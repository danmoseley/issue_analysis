[
    {
        "url":  "https://github.com/dotnet/runtime/issues/45649",
        "createdAt":  "2020-12-06T12:50:31Z",
        "number":  45649,
        "author":  "NN---",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-23T15:44:51Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nThere are no symbols for System.Runtime.dll on Microsoft Symbols Server:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.0\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nF:\\workspace\\_work\\1\\s\\artifacts\\obj\\System.Runtime\\net5.0-Release\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\symbols\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e9ffffffff\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\MicrosoftPublicSymbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e9ffffffff\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e91\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\MicrosoftPublicSymbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e91\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nSYMSRV:  BYINDEX: 0x20\r\n         c:\\symbols*https://referencesource.microsoft.com/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pd_\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/file.ptr\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  RESULT: 0x80190194\r\n\r\n\r\nSYMSRV:  BYINDEX: 0x21\r\n         c:\\symbols*https://referencesource.microsoft.com/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E91\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/System.Runtime.pd_\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/file.ptr\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  RESULT: 0x80190194\r\n\r\n\r\nhttps://referencesource.microsoft.com/symbols: Symbols not found on symbol server.\r\nSYMSRV:  BYINDEX: 0x22\r\n         c:\\symbols*https://msdl.microsoft.com/download/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /download/symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 801900c8 - HTTP_STATUS_OK\r\n\r\n\r\nSYMSRV:  System.Runtime.pdb from https://msdl.microsoft.com/download/symbols: 820 bytes \r\n\r\nSYMSRV:  PATH: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  RESULT: 0x00000000\r\n\r\n\r\nhttps://msdl.microsoft.com/download/symbols: Symbols downloaded from symbol server.\r\nc:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb: PDB does not match image.\r\nSYMSRV:  BYINDEX: 0x23\r\n         c:\\symbols*https://symbols.nuget.org/download/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  PATH: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  RESULT: 0x00000000\r\n\r\n\r\nhttps://symbols.nuget.org/download/symbols: Symbols downloaded from symbol server.\r\nc:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb: PDB does not match image.\r\n\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOadPgZQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczOTQ5ODM4Ng==",
                                           "createdAt":  "2020-12-06T12:50:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-12-06T12:50:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczOTU2MjYzNQ==",
                                           "createdAt":  "2020-12-06T20:57:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nThere are no symbols for System.Runtime.dll on Microsoft Symbols Server:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.0\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nF:\\workspace\\_work\\1\\s\\artifacts\\obj\\System.Runtime\\net5.0-Release\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\symbols\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e9ffffffff\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\MicrosoftPublicSymbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e9ffffffff\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e91\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\MicrosoftPublicSymbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e91\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nSYMSRV:  BYINDEX: 0x20\r\n         c:\\symbols*https://referencesource.microsoft.com/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pd_\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/file.ptr\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  RESULT: 0x80190194\r\n\r\n\r\nSYMSRV:  BYINDEX: 0x21\r\n         c:\\symbols*https://referencesource.microsoft.com/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E91\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/System.Runtime.pd_\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/file.ptr\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  RESULT: 0x80190194\r\n\r\n\r\nhttps://referencesource.microsoft.com/symbols: Symbols not found on symbol server.\r\nSYMSRV:  BYINDEX: 0x22\r\n         c:\\symbols*https://msdl.microsoft.com/download/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /download/symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 801900c8 - HTTP_STATUS_OK\r\n\r\n\r\nSYMSRV:  System.Runtime.pdb from https://msdl.microsoft.com/download/symbols: 820 bytes \r\n\r\nSYMSRV:  PATH: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  RESULT: 0x00000000\r\n\r\n\r\nhttps://msdl.microsoft.com/download/symbols: Symbols downloaded from symbol server.\r\nc:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb: PDB does not match image.\r\nSYMSRV:  BYINDEX: 0x23\r\n         c:\\symbols*https://symbols.nuget.org/download/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  PATH: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  RESULT: 0x00000000\r\n\r\n\r\nhttps://symbols.nuget.org/download/symbols: Symbols downloaded from symbol server.\r\nc:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb: PDB does not match image.\r\n\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNN---\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-12-06T20:57:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDE5OTUxNw==",
                                           "createdAt":  "2020-12-07T21:47:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@hoyosjs @mikem8361 ",
                                           "updatedAt":  "2020-12-07T21:47:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDIxNDkxOQ==",
                                           "createdAt":  "2020-12-07T22:19:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@mmitche fyi",
                                           "updatedAt":  "2020-12-07T22:19:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDIxNzM3OQ==",
                                           "createdAt":  "2020-12-07T22:24:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "Using [dotnet-symbol](https://github.com/dotnet/symstore/tree/master/src/dotnet-symbol#symbol-downloader-dotnet-cli-extension) I can download both the Windows and Portable PDBs for the 5.0.0 System.Runtime.dll.\r\n\r\nI\u0027m not sure why symsrv/symchk you are using doesn\u0027t find it.  Can you send me the exact command line you are using?\r\n\r\n",
                                           "updatedAt":  "2020-12-07T22:24:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDIxNzkzOA==",
                                           "createdAt":  "2020-12-07T22:25:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Looks like the reason is they are doing IL-only PDB fetching. We don\u0027t index those `system.runtime.ni.pdb/be121b6a3b997441e06296fca1dbdc361/system.runtime.ni.pdb` exists, but that\u0027s the after we changed to R2R. ",
                                           "updatedAt":  "2020-12-07T22:25:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDQzMDg4NA==",
                                           "createdAt":  "2020-12-08T07:13:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NN---",
                                           "body":  "@mikem8361 I use Visual Studio with Microsoft symbols server.",
                                           "updatedAt":  "2020-12-08T07:13:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MTE4Nzk3NA==",
                                           "createdAt":  "2020-12-08T23:03:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@mikem8361 the image has two debug directories:\r\n\r\n```\r\nED702F4D cv           11C 00009BB8     7FB8    Format: RSDS, {BE121B6A-3B99-7441-E062-96FCA1DBDC36}, 1, System.Runtime.ni.pdb\r\nED702F4D cv            6E 00009CD4     80D4    Format: RSDS, {A11BAEED-4C47-491B-80F6-FB479B20A1E9}, 1, F:\\workspace\\_work\\1\\s\\artifacts\\obj\\System.Runtime\\net5.0-Release\\System.Runtime.pdb\r\n```\r\nWe index the R2R pdb, but not the IL-Only one. ",
                                           "updatedAt":  "2020-12-08T23:03:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MTE5Nzk3NQ==",
                                           "createdAt":  "2020-12-08T23:11:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "Dotnet-symbol downloads the IL one just fine with A11BAEED-4C47-491B-80F6-FB479B20A1E9.\r\n",
                                           "updatedAt":  "2020-12-08T23:11:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MjEyMTg3Nw==",
                                           "createdAt":  "2020-12-09T23:10:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Looks like I had it wrong. \r\n\r\nThe IL PDB is indexed as \r\n- `System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pdb` (portable)\r\n- `System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/System.Runtime.pdb` (full-windows)\r\n\r\nThe R2R PDB is indexed as only under the full key:\r\n- `system.runtime.ni.pdb/be121b6a3b997441e06296fca1dbdc361/system.runtime.ni.pdb` (full-windows. Used only in specific cases)\r\n\r\nHowever, the check seems to fail. I can repro this locally. Will continue taking a look.\r\n",
                                           "updatedAt":  "2020-12-09T23:10:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0Mjk4NjYxNw==",
                                           "createdAt":  "2020-12-11T05:51:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "Looking at @NN--- \u0027s trace, this looks the problem:\r\n```\r\nSYMSRV:  System.Runtime.pdb from https://msdl.microsoft.com/download/symbols: 820 bytes \r\nSYMSRV:  PATH: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\r\n```\r\nIf I am reading that correctly, that means the portable IL PDB is being downloaded (good), but the symbol server is returning something which is either bogus, or which symsrv.dll doesn\u0027t understand, as 820 bytes is clearly not enough for a PDB.\r\n\r\n@hoyosjs I think your problem could be different from what @NN---  saw. Are you seeing a case where the wrong PDB is downloaded?\r\n\r\n@NN--- Do you still have this problem? If so, could you tell us more what  \u0027c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\u0027 looks like --\r\n1. Is it really 820 bytes?\r\n2. If so, if you open it in a hex editor, is a text file?\r\n3. If not, what are the first four bytes of the file?\r\n",
                                           "updatedAt":  "2020-12-11T05:51:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MzAwNTY2Mw==",
                                           "createdAt":  "2020-12-11T06:38:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "The PDB for System.Runtime should be pretty small. I verified the two PDBs do exist and the portable version is indeed (Both symweb and msdl) and that they are 820 bytes. (My local build has one with 696 bytes). It also has the classical portable \"BSJB\" set of first four bytes. I talked a bit with Chuck, and he confirmed what I thought: the SymReader for portable pdbs is saying things don\u0027t match. I\u0027ll do some testing on top of this removing VS from the equation.\r\n\r\n\u003e hoyosjs I think your problem could be different from what @NN--- saw. Are you seeing a case where the wrong PDB is downloaded?\r\n\r\nYeah, mine ended up being actually not getting the metadata for creating the key at all. Ironically the only problematic DLL is the one this is System.Runtime. WinDBG somehow reconstructs the key. I might dig a bit more some other day.\r\n\r\n",
                                           "updatedAt":  "2020-12-11T06:38:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MzQ0NzQwNA==",
                                           "createdAt":  "2020-12-11T21:55:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "Seems like all the ones that fail are the type forwarding assemblies. Although some stuff doesn\u0027t add up - if I fetch the symbols from storage something wrong, which hints at a bug in the uploading process.\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eThis is the full list that will fail verification\u003c/summary\u003e\r\n\r\n- System.AppContext.dll\r\n- System.Buffers.dll\r\n- System.ComponentModel.dll\r\n- System.Data.DataSetExtensions.dll\r\n- System.Diagnostics.Contracts.dll\r\n- System.Diagnostics.Debug.dll\r\n- System.Diagnostics.StackTrace.dll\r\n- System.Diagnostics.Tools.dll\r\n- System.Diagnostics.Tracing.dll\r\n- System.Dynamic.Runtime.dll\r\n- System.Globalization.Calendars.dll\r\n- System.Globalization.Extensions.dll\r\n- System.Globalization.dll\r\n- System.IO.FileSystem.Primitives.dll\r\n- System.IO.dll\r\n- System.IO.UnmanagedMemoryStream.dll\r\n- System.Net.WebProxy.dll\r\n- System.Numerics.Vectors.dll\r\n- System.Reflection.Emit.ILGeneration.dll\r\n- System.Reflection.Emit.Lightweight.dll\r\n- System.Reflection.Emit.dll\r\n- System.Reflection.Extensions.dll\r\n- System.Reflection.dll\r\n- System.Reflection.Primitives.dll\r\n- System.Resources.Reader.dll\r\n- System.Resources.ResourceManager.dll\r\n- System.Runtime.CompilerServices.VisualC.dll\r\n- System.Runtime.Extensions.dll\r\n- System.Runtime.Handles.dll\r\n- System.Runtime.Intrinsics.dll\r\n- System.Runtime.Loader.dll\r\n- System.Runtime.dll\r\n- System.Runtime.Serialization.Json.dll\r\n- System.Runtime.Serialization.Xml.dll\r\n- System.Security.Principal.dll\r\n- System.Security.SecureString.dll\r\n- System.Text.Encoding.Extensions.dll\r\n- System.Text.Encoding.dll\r\n- System.Threading.Overlapped.dll\r\n- System.Threading.Tasks.Extensions.dll\r\n- System.Threading.Tasks.dll\r\n- System.Threading.Thread.dll\r\n- System.Threading.ThreadPool.dll\r\n- System.Threading.Timer.dll\r\n- System.ValueTuple.dll\r\n- System.Web.HttpUtility.dll\r\n- System.Xml.ReaderWriter.dll\r\n- System.Xml.XDocument.dll\r\n- System.Xml.XmlDocument.dll\r\n- System.Xml.XmlSerializer.dll\r\n- System.Xml.XPath.dll\r\n- System.Xml.XPath.XDocument.dll\r\n\u003c/details\u003e",
                                           "updatedAt":  "2020-12-11T21:55:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NzI2MDY2OA==",
                                           "createdAt":  "2020-12-17T07:17:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027linkable-framework\u0027: @eerhardt, @vitek-karas, @LakshanF\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nThere are no symbols for System.Runtime.dll on Microsoft Symbols Server:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.0\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nF:\\workspace\\_work\\1\\s\\artifacts\\obj\\System.Runtime\\net5.0-Release\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\symbols\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e9ffffffff\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\MicrosoftPublicSymbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e9ffffffff\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e91\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\MicrosoftPublicSymbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e91\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nSYMSRV:  BYINDEX: 0x20\r\n         c:\\symbols*https://referencesource.microsoft.com/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pd_\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/file.ptr\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  RESULT: 0x80190194\r\n\r\n\r\nSYMSRV:  BYINDEX: 0x21\r\n         c:\\symbols*https://referencesource.microsoft.com/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E91\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/System.Runtime.pd_\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/file.ptr\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  RESULT: 0x80190194\r\n\r\n\r\nhttps://referencesource.microsoft.com/symbols: Symbols not found on symbol server.\r\nSYMSRV:  BYINDEX: 0x22\r\n         c:\\symbols*https://msdl.microsoft.com/download/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /download/symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 801900c8 - HTTP_STATUS_OK\r\n\r\n\r\nSYMSRV:  System.Runtime.pdb from https://msdl.microsoft.com/download/symbols: 820 bytes \r\n\r\nSYMSRV:  PATH: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  RESULT: 0x00000000\r\n\r\n\r\nhttps://msdl.microsoft.com/download/symbols: Symbols downloaded from symbol server.\r\nc:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb: PDB does not match image.\r\nSYMSRV:  BYINDEX: 0x23\r\n         c:\\symbols*https://symbols.nuget.org/download/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  PATH: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  RESULT: 0x00000000\r\n\r\n\r\nhttps://symbols.nuget.org/download/symbols: Symbols downloaded from symbol server.\r\nc:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb: PDB does not match image.\r\n\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNN---\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `area-Meta`, `linkable-framework`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-12-17T07:17:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NzI4NDQ5MA==",
                                           "createdAt":  "2020-12-17T08:14:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBaRilg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2020-12-17T08:21:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "It looks like this is the linker that is causing this. If I build a facade - say `System.Runtime` - on x86 and x64 Windows we get a dll with two issues:\r\n\r\n- The resulting dll no longer has a [PDBChecksum entry](https://github.com/dotnet/runtime/blob/master/docs/design/specs/PE-COFF.md#pdb-checksum-debug-directory-entry-type-19). According to @tmat, this is needed if symbols were to be indexed in NuGet and would be nice to have. This is needed for full verification of the PDB identity.\r\n- The PreTrim assemblies have different a GUID + Timestamp in the PDB entry of the debug directory. They would be indexed under different keys in the symbol server. After the linker runs, both end up with the same guid but different timestamp. The GUID portion of the Debug Directory entry/PDB ID is the only piece of information used to index a symbol into the symbol server, so the dlls will collide. Only one of them will get indexed and then verification - which uses the timestamp - will fail. In this case for example the symbol that got indexed for CoreCLR System.Runtime on x64 is the one with the timestamp only valid for linux/linux-musl x64. (@mmitche fyi, as this might be worth adding to the symbol validation stage in arcade)\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eExample\u003c/summary\u003e\r\n\r\nx64 pre linker\r\n```\r\n\u003e mdv.exe .\\artifacts\\obj\\System.Runtime\\net6.0-Release\\PreTrim\\System.Runtime.dll /il- /md-\r\nDebug Directory:\r\n  CodeView stamp=0x97DE86D5, version=(0x0100, 0x504D), size=105\r\n    path=\u0027E:\\repos\\runtime2\\artifacts\\obj\\System.Runtime\\net6.0-Release\\System.Runtime.pdb\u0027, guid={ef5578b4-7d98-430f-84f5-5051bfd4876e}, age=1\r\n  PdbChecksum stamp=0x00000000, version=(0x0001, 0x0000), size=39\r\n  Reproducible stamp=0x00000000, version=(0x0000, 0x0000), size=0\r\n\r\nMetadataVersion: v4.0.30319\r\n```\r\n\r\nx64 after linking\r\n```\r\nmdv.exe .\\artifacts\\obj\\System.Runtime\\net6.0-Release\\System.Runtime.dll /il- /md-\r\nDebug Directory:\r\n  CodeView stamp=0xB37E1ACC, version=(0x0100, 0x504D), size=105\r\n    path=\u0027E:\\repos\\runtime2\\artifacts\\obj\\System.Runtime\\net6.0-Release\\System.Runtime.pdb\u0027, guid={687893b0-1786-4ed3-bd94-c4c699e7946a}, age=1\r\n  Reproducible stamp=0x00000000, version=(0x0000, 0x0000), size=0\r\n\r\nMetadataVersion: v4.0.30319\r\n```\r\n\r\nx86 before linking \r\n```\r\nmdv.exe E:\\repos\\runtime3\\artifacts\\obj\\System.Runtime\\net6.0-Release\\PreTrim\\System.Runtime.dll /il- /md-\r\nDebug Directory:\r\n  CodeView stamp=0xCD59805D, version=(0x0100, 0x504D), size=105\r\n    path=\u0027E:\\repos\\runtime3\\artifacts\\obj\\System.Runtime\\net6.0-Release\\System.Runtime.pdb\u0027, guid={2013e38b-0f67-444f-aa0a-b255571151df}, age=1\r\n  PdbChecksum stamp=0x00000000, version=(0x0001, 0x0000), size=39\r\n  Reproducible stamp=0x00000000, version=(0x0000, 0x0000), size=0\r\n\r\nMetadataVersion: v4.0.30319\r\n```\r\n\r\nx86 Before Linking\r\n```\r\nmdv.exe .\\artifacts\\obj\\System.Runtime\\net6.0-Release\\PreTrim\\System.Runtime.dll /il- /md-\r\nDebug Directory:\r\n  CodeView stamp=0xCD59805D, version=(0x0100, 0x504D), size=105\r\n    path=\u0027E:\\repos\\runtime3\\artifacts\\obj\\System.Runtime\\net6.0-Release\\System.Runtime.pdb\u0027, guid={2013e38b-0f67-444f-aa0a-b255571151df}, age=1\r\n  PdbChecksum stamp=0x00000000, version=(0x0001, 0x0000), size=39\r\n  Reproducible stamp=0x00000000, version=(0x0000, 0x0000), size=0\r\n\r\nMetadataVersion: v4.0.30319\r\n```\r\n\r\nx86 after linking\r\n```\r\nmdv.exe E:\\repos\\runtime3\\artifacts\\obj\\System.Runtime\\net6.0-Release\\System.Runtime.dll /il- /md-\r\nDebug Directory:\r\n  CodeView stamp=0xA1057270, version=(0x0100, 0x504D), size=105\r\n    path=\u0027E:\\repos\\runtime3\\artifacts\\obj\\System.Runtime\\net6.0-Release\\System.Runtime.pdb\u0027, guid={687893b0-1786-4ed3-bd94-c4c699e7946a}, age=1\r\n  Reproducible stamp=0x00000000, version=(0x0000, 0x0000), size=0\r\n\r\nMetadataVersion: v4.0.30319\r\n```\r\n\u003c/details\u003e\r\n\r\nThis doesn\u0027t happen seem to happen with non-facade assemblies in the shared framework (at least on x64 windows where I verified). Currently there\u0027s no major break in the Watson-like scenarios, or dump debugging. However, I still don\u0027t fully know what causes the GUID collisions, so if this were ever to happen in non-facade IL assemblies and their PDBs, then we\u0027d have a bigger issue. \r\n\r\nSo far it looks like for 5.0.0 - 5.0.2 facades for coreclr are indexed under the same guid and all facades for mono builds are under a separate guid if the two runtimes share . (For example System.Runtime forwards to System.Private.CoreLib, so there\u0027s one guid that gets used for coreclr and another for mono. On the other hand, System.XML.XPath forwards to System.Private.XML, which is largely shared leading to just using one GUID but three different timestamps).\r\n\r\nCC: @tmat @tommcdon ",
                                           "updatedAt":  "2020-12-17T08:14:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NzM0OTM5OA==",
                                           "createdAt":  "2020-12-17T10:21:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I would think that facades don\u0027t run through the linker - there\u0027s nothing to do on them anyway. Would be interesting to know why this happens (if it actually does).\r\n\r\nAs for the GUIDs being the same before and after linking - linker implemented deterministic output, which includes copying the MVID from the input to the output. If we use linker in the deterministic mode, then this behavior is currently by design. But maybe we need to change that behavior.",
                                           "updatedAt":  "2020-12-17T10:21:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NzYwNTc5Ng==",
                                           "createdAt":  "2020-12-17T18:06:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "@vitek-karas Does the linker change anything in the PDB? If not then both timestamp and guid in the CodeView entry should remain the same. \r\n\r\nIf it does then either\r\n1) The input PDB is never indexed. The linker can then keep both timestamp and guid in the CodeView entry the same as input.\r\n2) The linker needs to update both timestamp and the guid in the CodeView and in the PDB itself (PDB ID) to values based on a hash of the new PDB content (with PDB ID bytes zeroed). Roslyn generates the timestamp and guid by calculating SHA2 hash and using 16 bytes of it for the guid and 4 bytes for the timestamp.",
                                           "updatedAt":  "2020-12-17T18:07:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NzYzODA0OA==",
                                           "createdAt":  "2020-12-17T19:06:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Linker will roundtrip the PDB if it processes an assembly (it has to, if it\u0027s making changes to the assembly). The interesting bit here is that running linker on facades doesn\u0027t make sense, so we should not do it.",
                                           "updatedAt":  "2020-12-17T19:06:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NzcxMjEyMg==",
                                           "createdAt":  "2020-12-17T21:27:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hoyosjs",
                                           "body":  "@vitek-karas two quick questions:\r\n\r\n- How do we know this really only happens to facades? Are there any other cases where collision is possible?\r\n- if we were to take the SHA2 approach like Roslyn does, is the illinker fully deterministic when writing the pdb/dll? I know the deterministic flag affects the MVID, but can it guarantee that identical outputs will have identical Guid + Timestamp, and such binaries are always possible to obtain from the input set of assemblies?",
                                           "updatedAt":  "2020-12-17T21:27:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0ODI1MDM3OQ==",
                                           "createdAt":  "2020-12-18T18:37:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBahltw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2020-12-18T18:42:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hoyosjs",
                                                                               "createdAt":  "2020-12-19T23:22:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Got me a while to make sure I understand what\u0027s going on. There are basically two problems here:\r\n* Lack of `PdbChecksum` entry - this is a lack of feature in Mono.Cecil - it has no knowledge about that entry type and can\u0027t write it. We will have to implement it if required. I think it already works for Windows PDBs (since it\u0027s using the native APIs to do this, which I assume already handle this), but framework uses Portable PDBs and Cecil uses internal implementation of everything. This will be tricky - especially computing the checksum following the rules of computing the has from the entire PDB with ID set to zeroes - the way the implementation works currently is definitely not ideal for such a computation.\r\n* Colliding GUIDs - I checked and the deterministic GUID is generated by computing a hash of the image and then converting it to GUID (so a new one is generated based on the content of the \"trimmed\" assembly). As content to hash Cecil uses all the sections of the file - but not the headers. As far as I can tell, facades are identical across architectures with the exception of the headers. So while Cecil will end up computing the hash twice, it will get the same result. I\u0027ll need to find out what Roslyn uses to compute the hash - and ideally change Cecil to do something very similar.\r\n\r\nIt seems this should be a problem basically for any assembly which has exactly the same content across architectures.",
                                           "updatedAt":  "2020-12-18T18:37:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzODk0NDE2Nw==",
                                           "createdAt":  "2021-05-11T18:18:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@vitek-karas - is this something that will be addressed in 6.0?",
                                           "updatedAt":  "2021-05-11T18:18:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzODk3NDQxNA==",
                                           "createdAt":  "2021-05-11T18:38:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Hmm - I completely forgot about this. If it\u0027s important I can try to find somebody to tackle this.",
                                           "updatedAt":  "2021-05-11T18:38:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc405WVg",
                                           "createdAt":  "2021-07-27T11:54:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Bartolomeus-649",
                                           "body":  "Not sure if this is the same issue as this or related, but Visual Studio does not find the symbols for `System.Runtime.dll`\r\n\r\n\r\n    https://referencesource.microsoft.com/symbols: Symbols downloaded from symbol server.\r\n    C:\\Users\\XXXXX\\AppData\\Local\\Temp\\SymbolCache\\System.Runtime.pdb\\76392EF435484AB3882E7D3888EBBEF7ffffffff\\System.Runtime.pdb: PDB does not match image.\r\n\r\n_Click the sections below to see more details_\r\n\u003cdetails\u003e\u003csummary\u003eDetails on the `System.Runtime.dll` with the unfound symbols.\u003c/summary\u003e\r\n\r\n### This is a copy of the \"System.Runtime.dll\" row from the Modules window in Visual Studio\r\n\r\n\tName= System.Runtime.dll\r\n\tPath= C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.8\\System.Runtime.dll\r\n\tOptimized= Yes\r\n\tUserCode= N/A\r\n\tSymbolStatus= Cannot find or open the PDB file.\r\n\tSymbolFile= \u003cnull\u003e\r\n\tOrder= 3\r\n\tVersion= 5.00.821.31504\r\n\tTimestamp= \u003cUnknown\u003e\r\n\tAddress= 00007FF9FBAD0000-00007FF9FBADA000\r\n\tProcess= [20360] iisexpress.exe\r\n\tAppDomain= [1] clrhost\r\n\r\n\u003c/details\u003e\r\n\u003cdetails\u003e\u003csummary\u003eSymbol load information\u003c/summary\u003e\r\n\r\n### Symbol load information for \"System.Runtime.dll\" (Copied from Visual Studio Modules windows)\r\n\r\n\tC:\\Program Files\\IIS Express\\System.Runtime.pdb: Cannot find or open the PDB file.\r\n    C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.8\\System.Runtime.pdb: Cannot find or open the PDB file.\r\n    D:\\workspace\\_work\\1\\s\\artifacts\\obj\\System.Runtime\\net5.0-Release\\System.Runtime.pdb: Cannot find or open the PDB file.\r\n    C:\\WINDOWS\\System.Runtime.pdb: Cannot find or open the PDB file.\r\n    C:\\WINDOWS\\symbols\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\n    C:\\WINDOWS\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\n    C:\\Users\\XXXXX\\AppData\\Local\\Temp\\SymbolCache\\System.Runtime.pdb\\76392ef435484ab3882e7d3888ebbef7ffffffff\\System.Runtime.pdb: PDB does not match image.\r\n    C:\\Users\\XXXXX\\AppData\\Local\\Temp\\SymbolCache\\MicrosoftPublicSymbols\\System.Runtime.pdb\\76392ef435484ab3882e7d3888ebbef7ffffffff\\System.Runtime.pdb: Cannot find or open the PDB file.\r\n    C:\\Users\\XXXXX\\AppData\\Local\\Temp\\SymbolCache\\System.Runtime.pdb\\76392ef435484ab3882e7d3888ebbef71\\System.Runtime.pdb: Cannot find or open the PDB file.\r\n    C:\\Users\\XXXXX\\AppData\\Local\\Temp\\SymbolCache\\MicrosoftPublicSymbols\\System.Runtime.pdb\\76392ef435484ab3882e7d3888ebbef71\\System.Runtime.pdb: Cannot find or open the PDB file.\r\n    C:\\code\\tfs\\YYYYY\\YYYYY\\Main\\Source\\ZZZZZ\\System.Runtime.pdb: Cannot find or open the PDB file.\r\n    SYMSRV:  BYINDEX: 0xEF\r\n             C:\\Users\\XXXXX\\AppData\\Local\\Temp\\SymbolCache*https://referencesource.microsoft.com/symbols\r\n             System.Runtime.pdb\r\n             76392EF435484AB3882E7D3888EBBEF7ffffffff\r\n    \r\n    \r\n    SYMSRV:  PATH: C:\\Users\\XXXXX\\AppData\\Local\\Temp\\SymbolCache\\System.Runtime.pdb\\76392EF435484AB3882E7D3888EBBEF7ffffffff\\System.Runtime.pdb\r\n    \r\n    \r\n    SYMSRV:  RESULT: 0x00000000\r\n    \r\n    \r\n    https://referencesource.microsoft.com/symbols: Symbols downloaded from symbol server.\r\n    C:\\Users\\XXXXX\\AppData\\Local\\Temp\\SymbolCache\\System.Runtime.pdb\\76392EF435484AB3882E7D3888EBBEF7ffffffff\\System.Runtime.pdb: PDB does not match image.\r\n    SYMSRV:  BYINDEX: 0xF0\r\n             C:\\Users\\XXXXX\\AppData\\Local\\Temp\\SymbolCache*https://msdl.microsoft.com/download/symbols\r\n             System.Runtime.pdb\r\n             76392EF435484AB3882E7D3888EBBEF7ffffffff\r\n    \r\n    \r\n    SYMSRV:  PATH: C:\\Users\\XXXXX\\AppData\\Local\\Temp\\SymbolCache\\System.Runtime.pdb\\76392EF435484AB3882E7D3888EBBEF7ffffffff\\System.Runtime.pdb\r\n    \r\n    \r\n    SYMSRV:  RESULT: 0x00000000\r\n    \r\n    \r\n    https://msdl.microsoft.com/download/symbols: Symbols downloaded from symbol server.\r\n    C:\\Users\\XXXXX\\AppData\\Local\\Temp\\SymbolCache\\System.Runtime.pdb\\76392EF435484AB3882E7D3888EBBEF7ffffffff\\System.Runtime.pdb: PDB does not match image.\r\n    SYMSRV:  BYINDEX: 0xF1\r\n             C:\\Users\\XXXXX\\AppData\\Local\\Temp\\SymbolCache*https://symbols.nuget.org/download/symbols\r\n             System.Runtime.pdb\r\n             76392EF435484AB3882E7D3888EBBEF7ffffffff\r\n    \r\n    \r\n    SYMSRV:  PATH: C:\\Users\\XXXXX\\AppData\\Local\\Temp\\SymbolCache\\System.Runtime.pdb\\76392EF435484AB3882E7D3888EBBEF7ffffffff\\System.Runtime.pdb\r\n    \r\n    \r\n    SYMSRV:  RESULT: 0x00000000\r\n    \r\n    \r\n    https://symbols.nuget.org/download/symbols: Symbols downloaded from symbol server.\r\n    C:\\Users\\XXXXX\\AppData\\Local\\Temp\\SymbolCache\\System.Runtime.pdb\\76392EF435484AB3882E7D3888EBBEF7ffffffff\\System.Runtime.pdb: PDB does not match image.\r\n\r\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-27T11:54:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41DDJP",
                                           "createdAt":  "2021-07-30T16:04:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@agocke @vitek-karas - is this something that will be addressed in 6.0?",
                                           "updatedAt":  "2021-07-30T16:04:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41DDOY",
                                           "createdAt":  "2021-07-30T16:05:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nThere are no symbols for System.Runtime.dll on Microsoft Symbols Server:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.0\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nF:\\workspace\\_work\\1\\s\\artifacts\\obj\\System.Runtime\\net5.0-Release\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\symbols\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e9ffffffff\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\MicrosoftPublicSymbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e9ffffffff\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e91\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\MicrosoftPublicSymbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e91\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nSYMSRV:  BYINDEX: 0x20\r\n         c:\\symbols*https://referencesource.microsoft.com/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pd_\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/file.ptr\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  RESULT: 0x80190194\r\n\r\n\r\nSYMSRV:  BYINDEX: 0x21\r\n         c:\\symbols*https://referencesource.microsoft.com/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E91\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/System.Runtime.pd_\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/file.ptr\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  RESULT: 0x80190194\r\n\r\n\r\nhttps://referencesource.microsoft.com/symbols: Symbols not found on symbol server.\r\nSYMSRV:  BYINDEX: 0x22\r\n         c:\\symbols*https://msdl.microsoft.com/download/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /download/symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 801900c8 - HTTP_STATUS_OK\r\n\r\n\r\nSYMSRV:  System.Runtime.pdb from https://msdl.microsoft.com/download/symbols: 820 bytes \r\n\r\nSYMSRV:  PATH: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  RESULT: 0x00000000\r\n\r\n\r\nhttps://msdl.microsoft.com/download/symbols: Symbols downloaded from symbol server.\r\nc:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb: PDB does not match image.\r\nSYMSRV:  BYINDEX: 0x23\r\n         c:\\symbols*https://symbols.nuget.org/download/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  PATH: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  RESULT: 0x00000000\r\n\r\n\r\nhttps://symbols.nuget.org/download/symbols: Symbols downloaded from symbol server.\r\nc:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb: PDB does not match image.\r\n\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNN---\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-AssemblyLoader-coreclr`, `linkable-framework`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-30T16:05:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41b4VX",
                                           "createdAt":  "2021-08-11T05:00:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/runtime-infrastructure\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nThere are no symbols for System.Runtime.dll on Microsoft Symbols Server:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.0\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nF:\\workspace\\_work\\1\\s\\artifacts\\obj\\System.Runtime\\net5.0-Release\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\symbols\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e9ffffffff\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\MicrosoftPublicSymbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e9ffffffff\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e91\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\MicrosoftPublicSymbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e91\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nSYMSRV:  BYINDEX: 0x20\r\n         c:\\symbols*https://referencesource.microsoft.com/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pd_\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/file.ptr\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  RESULT: 0x80190194\r\n\r\n\r\nSYMSRV:  BYINDEX: 0x21\r\n         c:\\symbols*https://referencesource.microsoft.com/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E91\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/System.Runtime.pd_\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/file.ptr\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  RESULT: 0x80190194\r\n\r\n\r\nhttps://referencesource.microsoft.com/symbols: Symbols not found on symbol server.\r\nSYMSRV:  BYINDEX: 0x22\r\n         c:\\symbols*https://msdl.microsoft.com/download/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /download/symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 801900c8 - HTTP_STATUS_OK\r\n\r\n\r\nSYMSRV:  System.Runtime.pdb from https://msdl.microsoft.com/download/symbols: 820 bytes \r\n\r\nSYMSRV:  PATH: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  RESULT: 0x00000000\r\n\r\n\r\nhttps://msdl.microsoft.com/download/symbols: Symbols downloaded from symbol server.\r\nc:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb: PDB does not match image.\r\nSYMSRV:  BYINDEX: 0x23\r\n         c:\\symbols*https://symbols.nuget.org/download/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  PATH: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  RESULT: 0x00000000\r\n\r\n\r\nhttps://symbols.nuget.org/download/symbols: Symbols downloaded from symbol server.\r\nc:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb: PDB does not match image.\r\n\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNN---\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-AssemblyLoader-coreclr`, `area-Infrastructure`, `linkable-framework`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-11T05:00:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42nQpM",
                                           "createdAt":  "2021-09-09T16:40:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @Anipik, @safern, @ViktorHofer\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nThere are no symbols for System.Runtime.dll on Microsoft Symbols Server:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.0\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nF:\\workspace\\_work\\1\\s\\artifacts\\obj\\System.Runtime\\net5.0-Release\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\symbols\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e9ffffffff\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\MicrosoftPublicSymbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e9ffffffff\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e91\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\MicrosoftPublicSymbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e91\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nSYMSRV:  BYINDEX: 0x20\r\n         c:\\symbols*https://referencesource.microsoft.com/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pd_\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/file.ptr\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  RESULT: 0x80190194\r\n\r\n\r\nSYMSRV:  BYINDEX: 0x21\r\n         c:\\symbols*https://referencesource.microsoft.com/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E91\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/System.Runtime.pd_\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/file.ptr\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  RESULT: 0x80190194\r\n\r\n\r\nhttps://referencesource.microsoft.com/symbols: Symbols not found on symbol server.\r\nSYMSRV:  BYINDEX: 0x22\r\n         c:\\symbols*https://msdl.microsoft.com/download/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /download/symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 801900c8 - HTTP_STATUS_OK\r\n\r\n\r\nSYMSRV:  System.Runtime.pdb from https://msdl.microsoft.com/download/symbols: 820 bytes \r\n\r\nSYMSRV:  PATH: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  RESULT: 0x00000000\r\n\r\n\r\nhttps://msdl.microsoft.com/download/symbols: Symbols downloaded from symbol server.\r\nc:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb: PDB does not match image.\r\nSYMSRV:  BYINDEX: 0x23\r\n         c:\\symbols*https://symbols.nuget.org/download/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  PATH: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  RESULT: 0x00000000\r\n\r\n\r\nhttps://symbols.nuget.org/download/symbols: Symbols downloaded from symbol server.\r\nc:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb: PDB does not match image.\r\n\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNN---\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Infrastructure-libraries`, `linkable-framework`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-09T16:40:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42nQuD",
                                           "createdAt":  "2021-09-09T16:40:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "@vitek-karas should we keep this in 6.0 or move it out? Asking as you just recently filed an issue for it with the milestone set to 6.0: https://github.com/mono/linker/issues/2203.",
                                           "updatedAt":  "2021-09-09T16:40:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44_6wt",
                                           "createdAt":  "2021-11-01T14:25:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCAqxfg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NN---",
                                                                               "createdAt":  "2021-11-01T14:30:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I spent some more time looking into this.\r\n\r\nWhile the problem exists in all versions of the linker/.NET, this seems to be primarily .NET 5 problem. In .NET 5 the managed assemblies were built separately for x86 and x64. So for example the .NET 5 `System.Runtime.dll` for x86 is a 32bit PE image, while the one for x64 is a 64bit PE image. Otherwise the two file are identical, they only differ in the architecture bit in the PE header. (This is were the bug in the linker shows up).\r\n\r\nOn .NET 6+ the x86 and x64 builds of `System.Runtime.dll` are both 32bit PE images. Interestingly enough we seem to ship different binaries for x86 and x64, even though both are 32bit PE images. There are slight differences in the binary content of these files for the two architectures.\r\n\r\nAlso the symbol indexing seems to work for 6.0, debugging a simple app in VS correctly loads symbols for all assemblies (including `System.Runtime.dll`).",
                                           "updatedAt":  "2021-11-01T14:25:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45AJW_",
                                           "createdAt":  "2021-11-01T15:36:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Hi @vitek-karas.  Did you identify any problems that we should fix?  It sounds like you were able to confirm that 6.0 binaries in the runtime packs matched what\u0027s on the symbol server.",
                                           "updatedAt":  "2021-11-01T15:36:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45AVwq",
                                           "createdAt":  "2021-11-01T16:36:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "There are definitely two separate issues in the linker/cecil.\r\n\r\nIt doesn\u0027t correctly consider all of the assembly when computing a hash (from which it derives the deterministic MVID) - and I was able to repro the problem on a simple example easily (assemblies which only differ by architecture in the PE header will get the same MVID after trimming -\u003e bad).\r\n\r\nAnd second it doesn\u0027t write the PdbChecksum entry into the output at all. This is a bit less important, but still would be really good to fix.\r\n\r\nWhat I mentioned above is that it seems that these has much lower impact on .NET 6 than on .NET 5, but they still exist and should be fixed.",
                                           "updatedAt":  "2021-11-01T16:36:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45GCAc",
                                           "createdAt":  "2021-11-02T16:04:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "\u003e On .NET 6+ the x86 and x64 builds of System.Runtime.dll are both 32bit PE images. Interestingly enough we seem to ship different binaries for x86 and x64, even though both are 32bit PE images. There are slight differences in the binary content of these files for the two architectures.\r\n\r\nWe should fix this too since Xamarin Android uses the MVID to deduplicate architecture-independent assemblies so we definitely want to make sure both builds are identical.",
                                           "updatedAt":  "2021-11-02T16:04:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45Wr2O",
                                           "createdAt":  "2021-11-05T22:03:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Just update on what I found after digging into this for real.\r\n\r\n### Issue 1 - MVID is not 100% unique\r\nThis is the issue mentioned above. Cecil doesn\u0027t include the PE file headers into the MVID hash computation, it only uses data from the IL Metadata tables and blobs. This leads to facades having collisions on MVID as the IL side of the dll is identical. This should be fixed by hashing the entire dll with MVID all zeroed and then just patching the MVID from the computed hash as the last thing to be done on the dll (well except where there is strong name signing, but I don\u0027t think we use this in the framework).\r\n\r\n### Issue 2 - Cecil reuses MVID as PDB ID\r\nCecil uses the MVID in the PDB as the PDB ID. This is actually very problematic for the fix for Issue 1, especially if there are embedded PDBs. On its own this is not something which should necessarily break anything. But it makes the correct implementation basically impossible, so this will need to be changed.\r\n\r\n### Issue 3 - Cecil doesn\u0027t write PdbChecksum debug header entry\r\nThis causes NuGet to raise warnings (potentially) and should be fixed. This is only applicable to portable PDBs (Cecil also supports Windows Native PDBs and also MDB - mono symbols format), so the changes are not as big, unfortunately this will require changing the order in which things are done in Cecil -\u003e potentially relatively risky change.",
                                           "updatedAt":  "2021-11-05T22:03:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46M5hH",
                                           "createdAt":  "2021-11-23T12:22:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCFb0iA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "hoyosjs",
                                                                               "createdAt":  "2021-12-06T21:01:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The fix for this has been merged into mono/cecil and also into dotnet/linker/main. So this should be fixed in .NET 7 for sure.\r\nWe\u0027re considering bringing the fix to .NET 6 servicing as well (the linker/SDK side of things). https://github.com/dotnet/linker/issues/2203",
                                           "updatedAt":  "2021-11-23T12:22:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GHz1R",
                                           "createdAt":  "2022-07-06T16:52:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "@vitek-karas should we move this to 8.0?",
                                           "updatedAt":  "2022-07-06T16:52:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GH8Yn",
                                           "createdAt":  "2022-07-06T17:23:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCld1ew==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ViktorHofer",
                                                                               "createdAt":  "2022-07-06T20:08:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "agocke",
                                           "body":  "I\u0027m moving it to 6.0 actually, because this is now only tracking whether we take a backport to 6.0.",
                                           "updatedAt":  "2022-07-06T17:23:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p0988",
                                           "createdAt":  "2023-10-23T15:44:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nThere are no symbols for System.Runtime.dll on Microsoft Symbols Server:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.0\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nF:\\workspace\\_work\\1\\s\\artifacts\\obj\\System.Runtime\\net5.0-Release\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\symbols\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e9ffffffff\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\MicrosoftPublicSymbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e9ffffffff\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e91\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\MicrosoftPublicSymbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e91\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nSYMSRV:  BYINDEX: 0x20\r\n         c:\\symbols*https://referencesource.microsoft.com/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pd_\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/file.ptr\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  RESULT: 0x80190194\r\n\r\n\r\nSYMSRV:  BYINDEX: 0x21\r\n         c:\\symbols*https://referencesource.microsoft.com/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E91\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/System.Runtime.pd_\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/file.ptr\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  RESULT: 0x80190194\r\n\r\n\r\nhttps://referencesource.microsoft.com/symbols: Symbols not found on symbol server.\r\nSYMSRV:  BYINDEX: 0x22\r\n         c:\\symbols*https://msdl.microsoft.com/download/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /download/symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 801900c8 - HTTP_STATUS_OK\r\n\r\n\r\nSYMSRV:  System.Runtime.pdb from https://msdl.microsoft.com/download/symbols: 820 bytes \r\n\r\nSYMSRV:  PATH: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  RESULT: 0x00000000\r\n\r\n\r\nhttps://msdl.microsoft.com/download/symbols: Symbols downloaded from symbol server.\r\nc:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb: PDB does not match image.\r\nSYMSRV:  BYINDEX: 0x23\r\n         c:\\symbols*https://symbols.nuget.org/download/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  PATH: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  RESULT: 0x00000000\r\n\r\n\r\nhttps://symbols.nuget.org/download/symbols: Symbols downloaded from symbol server.\r\nc:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb: PDB does not match image.\r\n\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNN---\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Host`, `linkable-framework`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.x\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-23T15:44:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p0-Bl",
                                           "createdAt":  "2023-10-23T15:44:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nThere are no symbols for System.Runtime.dll on Microsoft Symbols Server:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.0.0\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nF:\\workspace\\_work\\1\\s\\artifacts\\obj\\System.Runtime\\net5.0-Release\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\symbols\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nC:\\WINDOWS\\dll\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e9ffffffff\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\MicrosoftPublicSymbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e9ffffffff\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e91\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nc:\\symbols\\MicrosoftPublicSymbols\\System.Runtime.pdb\\a11baeed4c47491b80f6fb479b20a1e91\\System.Runtime.pdb: Cannot find or open the PDB file.\r\nSYMSRV:  BYINDEX: 0x20\r\n         c:\\symbols*https://referencesource.microsoft.com/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pd_\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/file.ptr\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  RESULT: 0x80190194\r\n\r\n\r\nSYMSRV:  BYINDEX: 0x21\r\n         c:\\symbols*https://referencesource.microsoft.com/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E91\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E91\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/System.Runtime.pd_\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  HTTPGET: /symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E91/file.ptr\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 80190194 - HTTP_STATUS_NOT_FOUND\r\n\r\n\r\nSYMSRV:  RESULT: 0x80190194\r\n\r\n\r\nhttps://referencesource.microsoft.com/symbols: Symbols not found on symbol server.\r\nSYMSRV:  BYINDEX: 0x22\r\n         c:\\symbols*https://msdl.microsoft.com/download/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pd_ - path not found\r\n\r\n\r\nSYMSRV:  UNC: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\file.ptr - path not found\r\n\r\n\r\nSYMSRV:  HTTPGET: /download/symbols/System.Runtime.pdb/A11BAEED4C47491B80F6FB479B20A1E9ffffffff/System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  HttpQueryInfo: 801900c8 - HTTP_STATUS_OK\r\n\r\n\r\nSYMSRV:  System.Runtime.pdb from https://msdl.microsoft.com/download/symbols: 820 bytes \r\n\r\nSYMSRV:  PATH: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  RESULT: 0x00000000\r\n\r\n\r\nhttps://msdl.microsoft.com/download/symbols: Symbols downloaded from symbol server.\r\nc:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb: PDB does not match image.\r\nSYMSRV:  BYINDEX: 0x23\r\n         c:\\symbols*https://symbols.nuget.org/download/symbols\r\n         System.Runtime.pdb\r\n         A11BAEED4C47491B80F6FB479B20A1E9ffffffff\r\n\r\n\r\nSYMSRV:  PATH: c:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb\r\n\r\n\r\nSYMSRV:  RESULT: 0x00000000\r\n\r\n\r\nhttps://symbols.nuget.org/download/symbols: Symbols downloaded from symbol server.\r\nc:\\symbols\\System.Runtime.pdb\\A11BAEED4C47491B80F6FB479B20A1E9ffffffff\\System.Runtime.pdb: PDB does not match image.\r\n\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNN---\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`linkable-framework`, `area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.x\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-23T15:44:51Z"
                                       }
                                   ],
                         "totalCount":  38
                     },
        "title":  "Facade assembly symbol indexing collision due to illinker",
        "labels":  [
                       "linkable-framework",
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103933",
        "createdAt":  "2021-01-28T15:04:47Z",
        "number":  103933,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-08T22:59:19Z",
        "body":  "The implementation of the `All` is to call `MarkEntireType` which works on definitions (TypeDefs and MethodDefs), which means it\u0027s not going to see generic instantiations. If the generic contains additional `DynamicallyAccessedMember` annotations, those might not be correctly validated by the linker (since those are only validated on generic instantiations which are TypeRefs/MethodRefs only).\r\n\r\nThis would then transitively apply to base types and interfaces, and maybe even methods.\r\n\r\nThe outcome of this should be added test coverage and any potential fixes.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgmPIJQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6CY8gl",
                                           "createdAt":  "2024-06-24T23:06:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-24T23:06:43Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Investigate how `DynamicallyAccessedMemberTypes.All` affects generic instantiations",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93718",
        "createdAt":  "2021-04-09T18:53:31Z",
        "number":  93718,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-19T10:42:01Z",
        "body":  "Currently boxing and unboxing operations leave unknown type on the stack, even if the input value has known static type. We should improve this so that the static type propagates across boxing/unboxing where possible.\r\n\r\nNote: boxing has special handling of `Nullable\u003c\u003e` so this is not as simple as it seems.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaYhkug==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5piGCD",
                                           "createdAt":  "2023-10-19T10:41:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrently boxing and unboxing operations leave unknown type on the stack, even if the input value has known static type. We should improve this so that the static type propagates across boxing/unboxing where possible.\r\n\r\nNote: boxing has special handling of `Nullable\u003c\u003e` so this is not as simple as it seems.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Tools-ILLink`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-19T10:41:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5piGS6",
                                           "createdAt":  "2023-10-19T10:42:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Note that analyzer doesn\u0027t have this problem because it doesn\u0027t see boxing.",
                                           "updatedAt":  "2023-10-19T10:42:01Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Data flow analysis: Track value\u0027s static type across boxing/unboxing",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117170",
        "createdAt":  "2021-04-16T11:57:09Z",
        "number":  117170,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODFMdsA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sbomer",
                                            "createdAt":  "2021-04-16T14:35:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "roji",
                                            "createdAt":  "2022-01-20T16:24:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tlakollo",
                                            "createdAt":  "2022-01-21T20:31:32Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-07T20:31:16Z",
        "body":  "This came as feedback from the team annotating libraries. It\u0027s likely that libraries contain unnecessary annotations, specifically `RequiredUnreferencedCode` and possibly even unnecessary suppressions `UnconditionalSuppressMessage`.\r\nThis can happen for multiple reasons, the most common ones:\r\n* Incorrect understanding of warnings and behavior of the linker, leading to over-annotation the code.\r\n* Improvements in the linker - code which needed annotation/suppression is fully recognized now\r\n* Simple bugs\r\n* Changes to the code which make existing annotations/suppressions stale\r\n\r\nIdeally this would be implemented in the Roslyn analyzer as code fixes/suggestions - definitely not warnings.\r\nBut until then, linker can probably figure out good chunk of these as well and could report them as simple info-messages to the output.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtY5inw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjAyMzY3MjM=",
                                           "createdAt":  "2021-04-16T14:01:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "I think it could be a new linker option which we someone would enable from time to time to clean them up in libraries",
                                           "updatedAt":  "2021-04-16T14:01:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60BSe2",
                                           "createdAt":  "2022-01-20T16:10:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Potentially linker could detect unnecessary `DynamicallyAccessedMembers` annotations as well.",
                                           "updatedAt":  "2022-01-20T16:10:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60BSe9",
                                           "createdAt":  "2025-06-18T22:00:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "https://github.com/dotnet/linker/pull/2922 Added IL2121 to the linker to warn on redundant suppressions. Looks like it\u0027s not supported in ilc or the trim analyzer.",
                                           "updatedAt":  "2025-06-18T22:00:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc60BSfK",
                                           "createdAt":  "2025-06-19T11:59:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The ilc part is already tracked in https://github.com/dotnet/runtime/issues/75201.",
                                           "updatedAt":  "2025-06-19T11:59:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61jmKf",
                                           "createdAt":  "2025-07-07T17:28:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-07T17:28:58Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Consider detecting unnecessary annotations",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102525",
        "createdAt":  "2021-05-11T14:37:05Z",
        "number":  102525,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-08T22:59:28Z",
        "body":  "```C#\r\nusing System;\r\nusing System.Reflection;\r\n\r\ninterface IFace\r\n{\r\n    public static int PublicStaticOnInterface = 0;\r\n\r\n    private static int PrivateStaticOnInterface = 0;\r\n}\r\n\r\nclass Base\r\n{\r\n    public static int PublicStaticOnBase = 0;\r\n    public int PublicInstanceOnBase = 0;\r\n    static int PrivateStaticOnBase = 0;\r\n    int PrivateInstanceOnBase = 0;\r\n}\r\nclass Program : Base, IFace\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        foreach (var f in typeof(Program).GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance | BindingFlags.FlattenHierarchy)) Console.WriteLine(f);\r\n    }\r\n}\r\n```\r\n\r\nPrints out:\r\n```console\r\nInt32 PublicInstanceOnBase\r\nInt32 PublicStaticOnBase\r\nInt32 PublicStaticOnInterface\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfpE-rA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxMjM0NDEwOTg=",
                                           "createdAt":  "2021-05-11T14:37:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Also investigate how this works for events, methods, properties and nested types.",
                                           "updatedAt":  "2021-05-11T14:37:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-kSXP",
                                           "createdAt":  "2024-05-21T21:05:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-21T21:05:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-kT6s",
                                           "createdAt":  "2024-05-21T21:10:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-21T21:10:30Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Linker should consider static members on base types and interfaces (only) if BindingFlags.FlattenHierarchy is specified",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103934",
        "createdAt":  "2021-06-03T11:15:35Z",
        "number":  103934,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6Hxiw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pentp",
                                            "createdAt":  "2024-08-12T18:57:35Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-21T18:43:31Z",
        "body":  "With https://github.com/dotnet/runtime/issues/29723 looking more and more real, I think we need to think about how attribute stripping can be done safely.\r\n\r\nAttribute stripping is currently the only optimization in illink that I know of that will break user code without any warnings.\r\n\r\nI think it would be interesting if we could scope attribute stripping down to places where we can provably do it safely. Illink has a good idea of what members are going to be reflected on. We could limit attribute stripping to places that we know are not going to be reflected on. I think we could still get pretty decent savings and APIs like the proposed nullability info decoder would not get broken by illink.\r\n\r\nCc @vitek-karas ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv26yjA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIxODc1NzUzMTk=",
                                           "createdAt":  "2021-06-03T11:20:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "Duplicate of dotnet/linker#1991",
                                           "updatedAt":  "2021-06-03T11:20:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CY8fa",
                                           "createdAt":  "2024-06-24T23:06:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-24T23:06:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I_kmv",
                                           "createdAt":  "2024-08-20T09:10:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "What would be the potential problem if attributes were trimmed away if the corresponding type is never referenced anywhere other than in attributes?\r\n\r\nSo for instance if no IL references `System.ObsoleteAttribute`, then all `System.ObsoleteAttribute` would be trimmed away.\r\n\r\nOf course it\u0027s possible to construct corner cases using reflection, but I believe those should already show warnings:\r\n\r\n```cs\r\npublic bool IsObsolete (Type type)\r\n{\r\n\treturn type.GetCustomAttributes ().Any (v =\u003e v.GetType ().Name == \"ObsoleteAttribute\");\r\n}\r\n```",
                                           "updatedAt":  "2024-08-20T09:10:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I_qnn",
                                           "createdAt":  "2024-08-20T09:23:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Of course it\u0027s possible to construct corner cases using reflection, but I believe those should already show warnings:\r\n\r\nThese don\u0027t show warnings. The `GetCustomAttributes` API is not annotated as trim unsafe and there\u0027s no analysis for it. So the snippet above should work, but won\u0027t.\r\n\r\nWe ran into this with nullable attributes because those are exactly in the category of attribute types that the Roslyn compiler emits into all assemblies (when targeting profiles that don\u0027t have the attribute in CoreLib that Roslyn could reference instead) and therefore cannot be reliably be checked for using typeof and everyone is looking for it by name. Other attributes could be checked with a `typeof` and we could detect that, but because of the above this is simply a breaking optimization.\r\n\r\nThe nullable attribute stripping actually caused tons of stress for the team around .NET 8 Preview 6 snap because Json started calling into nullable APIs (that are not declared trim unsafe so we didn\u0027t statically detect it) and then Blazor WASM SDK enabled attribute stripping and it broke everything several repos away. It took a while for the .NET team to root cause and fix, delayed build availability because of course this was checked in right before preview snap, and this was the .NET team with all the expertise we have. Imagine random Joe Developer hitting this. We want trimming to be a reliable optimization.",
                                           "updatedAt":  "2024-08-20T09:23:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JAJ5A",
                                           "createdAt":  "2024-08-20T10:27:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "\u003e We ran into this with nullable attributes because [...] everyone is looking for it by name.\r\n\r\nUgh, I see.\r\n\r\nI guess a workaround would be to also preserve an attribute if its type name is found within any string in the app...\r\n\r\nGoing forward I wonder if it would be better to add reflection API for attributes that\u0027s easier to trim, say something like:\r\n\r\n```cs\r\nMemberInfo.GetCustomAttributes\u003cT\u003e () where T: System.Attribute;\r\nMemberInfo.GetCustomAttributesByName (string name); // name can be either just the type\u0027s name or the full name, and the trimmer knows how to translate name to the actual type\r\n```\r\n\r\nbut I can see this taking a _long_ time to be used everywhere.",
                                           "updatedAt":  "2024-08-20T10:27:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_brKM",
                                           "createdAt":  "2025-08-21T18:43:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Zyano",
                                           "body":  "I\u0027m uncertain if this is the right place to bring this up so apologizes in advance if it\u0027s not.\n\nI\u0027m experiencing a scenario that seems related to what was mentioned in relation to GetCustomAttribute in WASM.\n\nThe following example code \"fails\" find a custom attribute when running in WASM yet the variable returned is not null when evaluated causing on determined behavior.\n\n```Csharp\nvar attr = interfaceMethodInfo.GetCustomAttribute\u003cHubMethodNameAttribute\u003e();\nvar methodName = attr != null ? attr.Name : interfaceMethodInfo.Name;\n... (omitted)\n```\n\n\u0027interfaceMethodInfo\u0027 is a RuntimeMethodInfo just for clarification.\n\nI would have expected this to return the method name when the custom attribute is not found but instead the method just returns with no exception cancelling the remaining statements,\n\nWhen checking with the debugger things get a bit strange. \nThe debugger reports that \u0027attr\u0027 is infact null\n\n\u003cimg width=\"819\" height=\"67\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/ac59b11d-391a-471f-901b-5abb4b9b620a\" /\u003e\n\nBut if we check `attr == null` we get false\n\n\u003cimg width=\"814\" height=\"68\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/cfef82c4-f94e-459a-bebb-54b7d1486ff1\" /\u003e\n\nAnd vice versa\n\n\u003cimg width=\"814\" height=\"73\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/a6e048f8-1858-461c-9095-95314e15cf60\" /\u003e\n\nIn case it\u0027s relevant this is happening under .NET 9\nSDK: 9.0.300\nRuntime: Microsoft.AspNetCore.App 9.0.5\n\n",
                                           "updatedAt":  "2025-08-21T18:43:31Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Attribute stripping",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117157",
        "createdAt":  "2022-01-26T16:05:29Z",
        "number":  117157,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T20:17:35Z",
        "body":  "```C#\r\n\t\t\tstring str = GetWithPublicMethods ();\r\n\t\t\tif (String.Empty.Length == 0) {\r\n\t\t\t\tstr = GetWithPublicFields (); // dataflow will merge this with the value from the previous basic block\r\n\t\t\t\tRequirePublicFields (str); // produces a warning\r\n\t\t\t}\r\n```\r\n\r\nIn the above sample, at the point of calling `RequirePublicFields` the `str` local is guaranteed to have the value coming only from `GetWithPublicFields()`, so it should not warn. But linker doesn\u0027t correctly track the values in this case.\r\n\r\nThere is an existing test case which covers this, but we don\u0027t have an issue for it: https://github.com/dotnet/linker/blob/5fca8b890c194c837d21513e43a361a5f5b357a6/test/Mono.Linker.Tests.Cases/DataFlow/LocalDataFlow.cs#L224-L232",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtY5hyw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6z_4dH",
                                           "createdAt":  "2025-06-30T16:28:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "https://github.com/dotnet/runtime/issues/117158 has some additional context.",
                                           "updatedAt":  "2025-06-30T16:28:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61jmHL",
                                           "createdAt":  "2025-07-07T17:28:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-07T17:28:52Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Data flow doesn\u0027t track per-branch values correctly",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83080",
        "createdAt":  "2022-01-28T22:06:43Z",
        "number":  83080,
        "author":  "tlakollo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-28T23:44:29Z",
        "body":  "There is no code that handles the attribute DynamicDependency on the analyzer, preventing some test from generating warnings.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVuYDlg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5W5gKx",
                                           "createdAt":  "2023-03-07T10:20:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-03-07T10:20:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5W5gOW",
                                           "createdAt":  "2023-03-07T10:20:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThere is no code that handles the attribute DynamicDependency on the analyzer, preventing some test from generating warnings.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etlakollo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-07T10:20:31Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Missing support for DynamicDependency in trim analyzer",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101734",
        "createdAt":  "2022-02-18T14:53:20Z",
        "number":  101734,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-12T20:41:15Z",
        "body":  "Out parameters should behave like return values in a way - they get assigned a value from within the method body (this works), and they are \"read\" by the caller (this doesn\u0027t work). For example:\r\n\r\n```csharp\r\nTryGetAnnotatedValue (out typeWithMethods);\r\ntypeWithMethods.RequiresPublicFields (); // Should IL2067 - mismatch of annotations\r\n\r\nstatic bool TryGetAnnotatedValue([DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods)] out Type typeWithMethods)\r\n```\r\n\r\nThe local variable (or stack slot) is not assigned a value after the call to the method with out parameter.\r\n\r\nThis also means that this doesn\u0027t warn:\r\n```csharp\r\nType typeWithMethods = null;\r\nTryGetAnnotatedValue (out typeWithMethods);\r\ntypeWithMethods.RequiresPublicFields ();\r\n```\r\n\r\nThat\u0027s correct, but for a wrong reason - the `typeWithMethods` is tracked throughout the method with a `null` literal value, nothing else.\r\n\r\nBut this will warn, twice:\r\n```csharp\r\nType typeWithMethods;\r\nTryGetAnnotatedValue (out typeWithMethods); // IL2062 - the `typeWithMethods` doesn\u0027t have a value -\u003e unknown value  we check it against the declared parameter\r\ntypeWithMethods.RequiresPublicFields (); // IL2062 - the out call above didn\u0027t assign value, so it\u0027s still \"unknown\"\r\n```\r\n\r\nThis should not warn at all.\r\n\r\nThere probably other cases where this is broken. What I can see as two issues:\r\n* The \"input\" value for a out parameter should only be checked if it\u0027s a parameter/field, so to simplify only if it\u0027s a value with annotation. Known (literal, string, type) or unknown values should not check anything and should be accepted as those will be overwritten.\r\n* After the call with an out parameter, the value passed in should be \"assigned\" the value of the out parameter - so from that point on, it should be tracked as an annotated value (pointing to the out parameter as its source), regardless of what the value was before the call.\r\n\r\nThe second problem applies to ref parameters as well - the value of the variable/stackslot after a call with ref parameter should be an annotated value (pointing to the ref parameter), since the ref parameter acts like an out parameter after the call. On the other hand before the call, the value must be checked as normal in parameter.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfGZTUQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc58Zi_r",
                                           "createdAt":  "2024-04-30T20:18:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-30T20:18:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58ZlNR",
                                           "createdAt":  "2024-04-30T20:19:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-30T20:19:41Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Data flow incorrectly handles out and ref parameters",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106886",
        "createdAt":  "2022-02-28T18:38:55Z",
        "number":  106886,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T01:41:00Z",
        "body":  "https://github.com/dotnet/linker/pull/2652 added tests that showed a few cases where intrinsics produce warnings for `null` inputs even when they throw at runtime. The intrinsic handling falls back on the annotated return values, which warn if they flow into methods with requirements that aren\u0027t satisfied by the return annotation.\r\n\r\n```csharp\r\n// Warns about the return value of GetType, even though this throws at runtime.\r\nType.GetType (null).RequiresAll ();\r\n```\r\n\r\n```csharp\r\nTestType nullInstance = null;\r\n// Warns about the return value of GetType, even though this throws at runtime\r\nnullInstance.GetType ().RequiresAll ();\r\n```\r\n```csharp\r\nType type = null;\r\n// Warns about the return value of BaseType, even though this throws at runtime.\r\ntype.BaseType.RequiresPublicMethods ();\r\n```\r\n\r\n```csharp\r\n// Technically this shouldn\u0027t warn because CreateInstanceFrom throws if the assembly file path is null.\r\n// However, our implementation is the same for CreateInstance and CreateInstanceFrom.\r\nActivator.CreateInstanceFrom (null, \"Namespace.SomeType\");\r\n```\r\n\r\nA similar issue exists for \"empty\" inputs flowing to intrinsics (the empty inputs represent unimplemented intrinsics in the analyzer, which should not warn, or values produced from intrinsics that are known to throw at runtime). In a few intrinsics, we propagate the \"empty\" input, while in others, we fall back on annotations.\r\n\r\n```csharp\r\nType t = null;\r\nstring noValue = t.AssemblyQualifiedName;\r\n// Warns about the return value of GetType, even though AssemblyQualifiedName throws at runtime.\r\nType.GetType (noValue).RequiresAll ();\r\n```\r\n\r\n```csharp\r\nType t = null;\r\nType noValue = Type.GetTypeFromHandle (t.TypeHandle);\r\n// Warns about the return value of GetType, even though the above throws at runtime.\r\nnoValue.GetType ().RequiresAll ();\r\n```\r\n\r\n```csharp\r\nType t = null;\r\nType noValue = Type.GetTypeFromHandle (t.TypeHandle);\r\n// Warns about the base type even though the above throws an exception at runtime.\r\nnoValue.BaseType.RequiresPublicMethods ();\r\n```\r\n\r\n```csharp\r\nType t = null;\r\nType noValue = Type.GetTypeFromHandle (t.TypeHandle);\r\n// Warns about the base type even though the above throws an exception at runtime.\r\nnoValue.BaseType.RequiresPublicMethods ();\r\n```\r\n\r\nMy suggestion would be to consistently avoid producing warnings for these cases, and return \"empty\" from intrinsics that we know would throw, or which receive an \"empty\" value.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiYj88A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6JiPlz",
                                           "createdAt":  "2022-02-28T19:24:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "I found another example:\r\n```csharp\r\nMethodInfo noValue = typeof (MakeGenericMethod).GetMethod (null);\r\n// Warns even though GetMethod throws at runtime.\r\nnoValue.MakeGenericMethod (typeof (TestType));\r\n```",
                                           "updatedAt":  "2022-02-28T19:24:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JiPl8",
                                           "createdAt":  "2022-03-18T22:24:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "https://github.com/dotnet/linker/pull/2694 fixed this for `Type.BaseType`.\r\n\r\nBTW @vitek-karas I realized that another way to think about this is that the `BaseType` behavior violated monotonicity of the transfer functions (which in general is required for the dataflow analysis to converge). So if `x \u003c= y` in the lattice, then we should have `Intrinsic(x) \u003c= Intrinsic(y)`. But for `BaseType`, we had `BaseType({All}) = {All}` and `BaseType({}) = {None}` - where `{All} \u003c= {}`, but it\u0027s not true that `{All} \u003c= {None}`.",
                                           "updatedAt":  "2022-03-18T22:24:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JiPl-",
                                           "createdAt":  "2022-03-18T22:31:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "That\u0027s a good point!",
                                           "updatedAt":  "2022-03-18T22:31:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JiPzw",
                                           "createdAt":  "2024-08-23T16:50:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-23T16:50:43Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Warnings for intrinsics that throw or are unreachable",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117174",
        "createdAt":  "2022-04-11T16:39:06Z",
        "number":  117174,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-30T18:44:36Z",
        "body":  "Example:\r\n```csharp\r\nType[] arr = new Type[1];\r\narr[0] = string.Empty.Length == 0 ? GetMethods() : GetFields();\r\n// IL2062 (Unknown value)\r\nRequireAll(arr[0]);\r\n```\r\n\r\nI would expect this to instead produce two instances of IL2072, warning about GetMethods/GetFields, like what happens in this example:\r\n```csharp\r\nType[] arr = new Type[1];\r\nif (string.Empty.Length == 0)\r\n    arr[0] = GetMethods();\r\nelse\r\n    arr[0] = GetFields();\r\nRequireAll(arr[0]); // IL2072 (GetMethods/GetFields)\r\n```\r\n\r\nI debugged this a little - what happens is this:\r\n- We put a reference to an `ArrayValue` on the stack.\r\n- After the call to GetMethods() in one branch, and GetFields() in another, we merge stacks\r\n- Merging stacks allocates a new dictionary of array values for the merged stack slot holding the array reference.\r\n  - This dictionary is now a different one than the original dictionary of values tracked in the locals of the method\r\n- We assign a merged value to the new dictionary.\r\n- We read `arr[0]` from the original `ArrayValue` which doesn\u0027t have any elements assigned.\r\n\r\nI think this is a specific case of https://github.com/dotnet/linker/issues/2158 - we need to ensure that the array reference on the stack and that in the tracked locals are the same.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtAaMsg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc60Boyy",
                                           "createdAt":  "2025-06-30T18:44:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-30T18:44:36Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Linker produces unknown value for merged value assigned to array element",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103932",
        "createdAt":  "2022-05-27T18:39:20Z",
        "number":  103932,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-10T16:18:38Z",
        "body":  "@MichalStrehovsky in https://github.com/dotnet/linker/pull/2792#issuecomment-1137977247:\r\n\r\n\u003e I\u0027m wondering whether the following ways to keep an entire type should be treated equivalently in analysis:\r\n\u003e 1. void Foo([DAM(DAMK.All) Type x) called with typeof(SomeTypeThatHasClosureThatDoesReflection)\r\n\u003e 2. [DynamicDependency(DAMK.All, typeof(SomeTypeThatHasClosureThatDoesReflection))]\r\n\u003e 3. ILLinkTrim.Descriptors.xml saying to keep the type in entirety\r\n\u003e 4. Command line argument to illink saying to keep the entire assembly that contains the type\r\n\u003e \r\n\u003e All of the above tell analysis that someone is going to access potentially everything on this type without analysis seeing it. They may use reflection invoke. They may use hosting APIs. But the analysis has no visibility into the values set/passed. It keeps the members so that someone can do arbitrary things with them at runtime.\r\n\r\n@sbomer in https://github.com/dotnet/linker/pull/2792#issuecomment-1138012830:\r\n\u003e I like the idea to treat descriptors/arguments as keeping things for reflection. If someone is going out of their way to preserve things we should assume the worst. This would also encourage people to turn on more aggressive trimming (since they might otherwise get more warnings from unused parts of the rooted assemblies).\r\n\r\n@MichalStrehovsky  in https://github.com/dotnet/linker/pull/2792#issuecomment-1138043846:\r\n\r\n\u003e We should guide people towards:\r\n\u003e \r\n\u003e - If you [DAM] anything in the assembly, you should also set IsTrimmable=true\r\n\u003e - Never set TrimMode to anything but link\r\n\u003e \r\n\u003e Then it should be less of a nuisance.\r\n\r\n@vitek-karas in https://github.com/dotnet/linker/pull/2792#issuecomment-1139679207:\r\n\r\n\u003e \r\n\u003e I do agree with descriptors and similar to trigger reflection dependency. We should fix that currently. That said I know that there were some cases in the past where we decided we should NOT warn on RUC if the reference is coming from a descriptor. Maybe we should revisit that again.\r\n\u003e \r\n\u003e As for \"copy\" assemblies, maybe those should not warn, but it\u0027s not a big deal I think. We should have single-warn on by default and so typically one should get a single warning from the entire assembly.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgmPFyw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6CY8XL",
                                           "createdAt":  "2024-06-24T23:06:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-24T23:06:04Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Treat code kept from descriptors or command line as accessed for reflection",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93720",
        "createdAt":  "2022-06-04T07:44:09Z",
        "number":  93720,
        "author":  "kant2002",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-10T16:19:07Z",
        "body":  "I attempt to annotate WinForms for linker.\r\n\r\nI have code approximately like this\r\n```csharp\r\n// [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)] // fix\r\nclass DataGridViewCell\r\n{\r\n    public virtual object Clone()\r\n    {\r\n        DataGridViewCell dataGridViewCell = (DataGridViewCell)System.Activator.CreateInstance(GetType()); // no warning\r\n        return dataGridViewCell;\r\n    }\r\n}\r\n\r\nclass DataGridViewCellConverter\r\n{\r\n  public override object? ConvertTo(ITypeDescriptorContext? context, CultureInfo? culture, object? value, Type destinationType)\r\n  {\r\n      ArgumentNullException.ThrowIfNull(destinationType);\r\n  \r\n      if (destinationType == typeof(InstanceDescriptor) \u0026\u0026 value is DataGridViewCell cell)\r\n      {\r\n          ConstructorInfo? ctor = cell.GetType().GetConstructor(Array.Empty\u003cType\u003e());  // warning\r\n          if (ctor is not null)\r\n          {\r\n              return new InstanceDescriptor(ctor, Array.Empty\u003cobject\u003e(), false);\r\n          }\r\n      }\r\n  \r\n      return base.ConvertTo(context, culture, value, destinationType);\r\n  }\r\n}\r\n```\r\n\r\nIf I add `[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)]` to `DataGridViewCell` type, then issue in Clone goes away, but in Converter stays, and complain that it needs `PublicParameterlessConstructor`.\r\n\r\nIn my understanding these two versions of code absolutely identical and either I should have a fix for both places, or have warnings in both places.\r\n\r\nhttps://github.com/dotnet/winforms/blob/5427959215dfc57d4ecf082ba5f65dc597e2c2b9/src/System.Windows.Forms/src/System/Windows/Forms/DataGridViewCell.cs#L1106-L1111\r\nand \r\nhttps://github.com/dotnet/winforms/blob/5427959215dfc57d4ecf082ba5f65dc597e2c2b9/src/System.Windows.Forms/src/System/Windows/Forms/DataGridViewCellConverter.cs#L25-L39",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaYivKg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5piKpt",
                                           "createdAt":  "2022-06-06T08:24:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "/cc @vitek-karas",
                                           "updatedAt":  "2022-06-06T08:24:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5piKpw",
                                           "createdAt":  "2022-06-06T12:49:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODKSA4w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kant2002",
                                                                               "createdAt":  "2022-06-06T12:55:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "This looks like a limitation of the current analysis. The analysis doesn\u0027t really track local variables as standalone values, it only tracks what is assigned into them. So in the case it sees the `cell` variable as having a value of \"The parameter `value`\" and the static type of that parameter is `object`.\r\n\r\nA workaround for this would be to use for example local function for the code in the if branch, so something like:\r\n```C#\r\n      if (destinationType == typeof(InstanceDescriptor) \u0026\u0026 value is DataGridViewCell cell)\r\n      {\r\n          return CreateInstanceDescriptor(cell);\r\n      }\r\n\r\n      static object? CreateInstanceDescriptor(DataGridViewCell cell)\r\n      {\r\n          ConstructorInfo? ctor = cell.GetType().GetConstructor(Array.Empty\u003cType\u003e());  // warning\r\n          if (ctor is not null)\r\n          {\r\n              return new InstanceDescriptor(ctor, Array.Empty\u003cobject\u003e(), false);\r\n          }\r\n      }\r\n```\r\n\r\nWe\u0027ll look into fixing this...",
                                           "updatedAt":  "2022-06-06T12:49:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5piKp0",
                                           "createdAt":  "2022-06-06T13:52:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kant2002",
                                           "body":  "Will linker perserve public parameterless constructor for derived class? For example in such snippet. I do think that\u0027s not affects me, so asking for my cuiriosity.\r\n\r\n```csharp\r\n[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)]\r\npublic class DataGridViewCell\r\n{\r\n    public virtual object Clone()\r\n    {\r\n        DataGridViewCell dataGridViewCell = (DataGridViewCell)System.Activator.CreateInstance(GetType()); // no warning\r\n        return dataGridViewCell;\r\n    }\r\n}\r\n\r\npublic class DerivedDataGridViewCell : DataGridViewCell\r\n{\r\n    public DerivedDataGridViewCell() {}\r\n    public DerivedDataGridViewCell( int x ) {}\r\n}\r\n\r\nvar x = new DerivedDataGridViewCell(5);\r\nx.Clone();\r\n```",
                                           "updatedAt":  "2022-06-06T13:54:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5piKp6",
                                           "createdAt":  "2022-06-06T20:14:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Yes - the annotation is applied to all derived types. This also works for interfaces, that you can put the annotation on the interface and all types implementing the interface will have that annotation applied to them.",
                                           "updatedAt":  "2022-06-06T20:14:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5piKp9",
                                           "createdAt":  "2022-06-07T02:41:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kant2002",
                                           "body":  "Thank you, that was not obvious to me, since all missing interface member implementations screams one me that implementation member should be annotated in same was as interface member. But for classes annotations silently applied. That\u0027s why I was a bit puzzled do I do proper thing or not.",
                                           "updatedAt":  "2022-06-07T02:41:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5piKp_",
                                           "createdAt":  "2022-06-07T11:25:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "\u003e since all missing interface member implementations screams one me that implementation member should be annotated in same was as interface member\r\n\r\nCould you please clarify this? Maybe an example where this happens?\r\nThe \"screaming\" should only happen if the implementation method doesn\u0027t have the same annotations as the interface method it implements.",
                                           "updatedAt":  "2022-06-07T11:25:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5piKqB",
                                           "createdAt":  "2022-06-07T13:01:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODKSA5g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2022-06-07T18:06:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@sbomer @tlakollo @MichalStrehovsky @agocke @jtschuster  - design discussion:\r\n\r\nThe problem is that `MethodBodyScanner` doesn\u0027t actually track local variables or stack slots as \"entities\", we only track external values *through* local variables and stack slots. So in the case of this bug, we track a value of the method parameter which is of static type `object`. When it gets assigned to a local variable of static type `MyType` we \"loose\" that information and we still keep tracking the method parameter with type of `object`.\r\n\r\nPotential high-level solutions:\r\n* \"Typed stack\" - we store static type information in every stack slot and then we use this information in the intrinsics (probably by passing another array of static types for all parameters to the `HandleCall`)\r\n  * Pros - relatively simple change, can track static types of pretty much everything everywhere (since everything is a stack slot before it\u0027s actually used)\r\n  * Cons - doesn\u0027t translate to analyzer - we would need a different solution for analyzer (I didn\u0027t look at what it would take to do it there) - but basically another \"side channel\".\r\n  * Cons - relatively expensive (we track a LOT of stack slots)\r\n* \"Static typed values\" - we add the ability to store static type on most `SingleValue` (or all on the base class?) - when there\u0027s a conversion or similar instruction we create a new value which is a clone of the input just with different static type. `HandleCall` would remain as is, since each value would carry its static type (similar to what we have today, it just would be more precise).\r\n  * Pros - integrates nicely with the value system we have\r\n  * Pros - tracks less info since in theory only some values would need to remember this, we might not need to track this information for things like `UnknownValue`, `NullValue` and so on which are very common (but see below for problems with this optimization).\r\n  * Cons - if efficient it doesn\u0027t fully solve the problem for some edge cases - for example when we read a value from an array `ldelem` and we don\u0027t know what went in, we track that as `UnknownValue` - when used with `object.GetType` we would need to track the static type on the `UnknownValue` to fully solve this.\r\n* \"Local variable value\" - we introduce a notion of local variables as tracked values. Similar to what we do for by-ref values - `ldloc` would return a new value `LocalVariableValue` which just points to the local variable. When we read from it we would get the underlying values stored there, but we would be also able to track additional static type information.\r\n  * Pros - still integrates pretty well with value system\r\n  * Pros - low overhead - we only add additional tracking for local values\r\n  * Pros - potentially better warnings - in lot of places we would be able to include the name of the local variable in the warnings (if it makes sense), currently we don\u0027t have this ability\r\n  * Cons - doesn\u0027t solve the problem for a set of cases, if for some reason the compiler decides to not create a local, or \"reuse\" a stack slot we would not track the static type and still fail to analyze it correctly.\r\n  * Cons - adds complexity to intrinsics processing - we would have to make it aware of \"unwrapping\" (see below)\r\n* \"Typed wrappers\" - the idea is very similar to \"Local variable value\" but for everything. Basically whenever we see a type conversion instruction we would \"wrap\" the input value in a `StaticTypedValue` (better name?) and add the static type that way.\r\n  * Pros - very efficient since it only tracks the additional type info in places where it\u0027s needed.\r\n  * Pros - flexible - we could add this to every place we need it (like the array element case described above for example).\r\n  * Cons - potentially complex implementation - we would need to add understanding of this to intrinsics handling - for by-ref values we so far avoided that by unwrapping the values before they get to intrinsics processing.\r\n\r\nPersonally I would prefer a full solution over other things, so that means either \"Typed stack\" or \"Static typed values\" or \"Typed wrappers\". From an architecture point of view I like the \"Static typed values\" a bit more (it doesn\u0027t need a side channel to pass type information nor it needs \"unwrapping\" everywhere). The downside is that we would need to add this info on all values (so basically to `SingleValue` itself) and we would not have singletons for `UnknownValue` and `NullValue` anymore (since they would carry a type as well).\r\n\r\nIt\u0027s likely that \"inlining\" of compiler generated code will exaggerate this problem as it will apply to all of the fields on closures as well (the plan to track them as basically local variables, or something very similar).\r\n\r\nWe\u0027ve discussed the idea of \"wrapper\" values for a while now, and actually used that for by-ref values. Maybe we should embrace it fully and swallow the associated cost - it is potentially very flexible and powerful (not only the above and by-refs, but also better warnings, easier compiler generated code and so on).\r\n\r\nIdeas, opinions???",
                                           "updatedAt":  "2022-06-07T13:01:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5piKqJ",
                                           "createdAt":  "2022-06-07T13:45:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "https://github.com/dotnet/linker/pull/2823 adds a test for this (currently expects the warning though).",
                                           "updatedAt":  "2022-06-07T13:45:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5piKqR",
                                           "createdAt":  "2022-06-07T18:06:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "For me the main architectural question is whether to store the types as part of the tracked values, or as part of the containers:\r\n- If we\u0027re only interested in tracking \"static\" types, then I would avoid a representation that tracks more type info than we need, so I would avoid storing types as part of the values since the local variable dictionary already has type info. We would need to add type info to the stackslots too (so the \"Typed stack\" approach).\r\n- But if we want to track \"dynamic\" types, then I would store type info with the values, since they can have more specific type info than the statically-known variable types.\r\n\r\nWith `GetType` we are already using more than just the static type info: the static type of the instance is `object`, but the intrinsic handling relies on us passing along the \"static\" type of the argument in the caller. So the question is whether we want to keep that as a special case, or generalize it so that we can track \"dynamic\" types too.\r\n\r\nWhat behavior do we want for this case?\r\n```csharp\r\npublic class C {\r\n    public void M() {\r\n        Base b = new Derived();\r\n        var t = b.GetType();\r\n        var methods = t.GetMethods(); // should this warn?\r\n    }\r\n}\r\n\r\nclass Base {}\r\n\r\n[DAM(DAMT.PublicMethods)]\r\nclass Derived : Base {}\r\n```\r\n\r\nIf we want to avoid warning above, I think that would eliminate the \"Typed stack\" approach.\r\n\r\nThe static types would probably be straightforward to track in the analyzer since every IOperation has a Type already. I don\u0027t even think we need a side-channel in the common case.\r\n\r\nFor tracking dynamic types, if we track them as part of the values this will naturally extend to the way we use values in the analyzer too. I agree that the \"Local variable value\" approach isn\u0027t the best since it\u0027s incomplete (and I find the concept confusing) - so for dynamic types that leaves \"Static typed values\" (which I would actually call \"dynamic typed values\" 😉 ) or \"Typed wrappers\".\r\n\r\nI don\u0027t have a strong preference between the two and I would prioritize simplicity unless we have evidence that there are performance problems. FWIW I don\u0027t think the \"typed wrappers\" will be overly complex, and I generally like composing types from simpler types because it leverages the type system to help provide correctness. (It might make it harder to accidentally forget to take the type info into account if you have to unwrap the typed wrappers).",
                                           "updatedAt":  "2022-06-07T18:06:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5piKqV",
                                           "createdAt":  "2022-06-07T18:30:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "I\u0027m not sure I follow the problem. Looking at the IL, the section that sounds like the problem is:\r\n\r\n```CIL\r\n .maxstack 5\r\n        .locals init (\r\n            [0] class DataGridViewCell cell,\r\n            [1] class [System.Runtime]System.Reflection.ConstructorInfo ctor\r\n        )\r\n\r\n        IL_0000: ldarg.s destinationType\r\n        IL_0002: ldstr \"destinationType\"\r\n        IL_0007: call void [System.Runtime]System.ArgumentNullException::ThrowIfNull(object, string)\r\n        IL_000c: ldarg.s destinationType\r\n        IL_000e: ldtoken [System.ComponentModel.TypeConverter]System.ComponentModel.Design.Serialization.InstanceDescriptor\r\n        IL_0013: call class [System.Runtime]System.Type [System.Runtime]System.Type::GetTypeFromHandle(valuetype [System.Runtime]System.RuntimeTypeHandle)\r\n        IL_0018: call bool [System.Runtime]System.Type::op_Equality(class [System.Runtime]System.Type, class [System.Runtime]System.Type)\r\n        IL_001d: brfalse.s IL_004a\r\n\r\n        IL_001f: ldarg.3\r\n        IL_0020: isinst DataGridViewCell\r\n        IL_0025: stloc.0\r\n        IL_0026: ldloc.0\r\n        IL_0027: brfalse.s IL_004a\r\n\r\n        IL_0029: ldloc.0\r\n        IL_002a: callvirt instance class [System.Runtime]System.Type [System.Runtime]System.Object::GetType()\r\n        IL_002f: call !!0[] [System.Runtime]System.Array::Empty\u003cclass [System.Runtime]System.Type\u003e()\r\n        IL_0034: callvirt instance class [System.Runtime]System.Reflection.ConstructorInfo [System.Runtime]System.Type::GetConstructor(class [System.Runtime]System.Type[])\r\n        IL_0039: stloc.1\r\n        IL_003a: ldloc.1\r\n```\r\n\r\nIt looks like we\u0027re doing a `callvirt` to `GetType()` on `ldloc.0` which has a static type of `DataGridViewCell`. Why is the static type `object` here?",
                                           "updatedAt":  "2022-06-07T18:30:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5piKqa",
                                           "createdAt":  "2022-06-07T18:51:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "The problem is what @vitek-karas described here: https://github.com/dotnet/runtime/issues/93720. To rephrase, we don\u0027t take into account the static type of the local even though the information is all there in IL. We just track \"a value that comes from the parameter of type `object`\", even as it\u0027s assigned to the local with a more specific type.",
                                           "updatedAt":  "2022-06-07T18:51:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5piKqe",
                                           "createdAt":  "2022-06-07T19:16:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Prioritization (based on offline discussion): This is not super important, except for this bug we didn\u0027t run into this problem anywhere yet. And while the workaround is not great it does exist, and the situation should be pretty rare (the usage GetType() is already pretty rare on its own).",
                                           "updatedAt":  "2022-06-07T19:16:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5piKqh",
                                           "createdAt":  "2022-06-09T01:51:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I think the .NET Native analyzer used the typed stack approach. The analyzer also ran on all code (not just the code that does something interesting) and it was fine perf-wise.\r\n\r\nHandling stack merge points would become a bit more tricky since the type of the thing on the evaluation stack could be different, coming through different paths (e.g. System.Object coming from one branch and System.String from another). We would probably need to merge to a common parent.",
                                           "updatedAt":  "2022-06-09T01:51:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5piKwn",
                                           "createdAt":  "2023-10-19T10:54:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI attempt to annotate WinForms for linker.\r\n\r\nI have code approximately like this\r\n```csharp\r\n// [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)] // fix\r\nclass DataGridViewCell\r\n{\r\n    public virtual object Clone()\r\n    {\r\n        DataGridViewCell dataGridViewCell = (DataGridViewCell)System.Activator.CreateInstance(GetType()); // no warning\r\n        return dataGridViewCell;\r\n    }\r\n}\r\n\r\nclass DataGridViewCellConverter\r\n{\r\n  public override object? ConvertTo(ITypeDescriptorContext? context, CultureInfo? culture, object? value, Type destinationType)\r\n  {\r\n      ArgumentNullException.ThrowIfNull(destinationType);\r\n  \r\n      if (destinationType == typeof(InstanceDescriptor) \u0026\u0026 value is DataGridViewCell cell)\r\n      {\r\n          ConstructorInfo? ctor = cell.GetType().GetConstructor(Array.Empty\u003cType\u003e());  // warning\r\n          if (ctor is not null)\r\n          {\r\n              return new InstanceDescriptor(ctor, Array.Empty\u003cobject\u003e(), false);\r\n          }\r\n      }\r\n  \r\n      return base.ConvertTo(context, culture, value, destinationType);\r\n  }\r\n}\r\n```\r\n\r\nIf I add `[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)]` to `DataGridViewCell` type, then issue in Clone goes away, but in Converter stays, and complain that it needs `PublicParameterlessConstructor`.\r\n\r\nIn my understanding these two versions of code absolutely identical and either I should have a fix for both places, or have warnings in both places.\r\n\r\nhttps://github.com/dotnet/winforms/blob/5427959215dfc57d4ecf082ba5f65dc597e2c2b9/src/System.Windows.Forms/src/System/Windows/Forms/DataGridViewCell.cs#L1106-L1111\r\nand \r\nhttps://github.com/dotnet/winforms/blob/5427959215dfc57d4ecf082ba5f65dc597e2c2b9/src/System.Windows.Forms/src/System/Windows/Forms/DataGridViewCellConverter.cs#L25-L39\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekant2002\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILLink`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-19T10:54:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5piK8q",
                                           "createdAt":  "2023-10-19T10:54:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The problem exists in all implementation, trimmer, analyzer, NativeAOT currently.",
                                           "updatedAt":  "2023-10-19T10:54:42Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "GetType() behave strange",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117171",
        "createdAt":  "2022-06-23T22:45:30Z",
        "number":  117171,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T20:17:34Z",
        "body":  "We could loosen the rules for parameters to treat them more like local variables when they are assigned. For example, this testcase currently warns when assigning to the parameter when the assigned value doesn\u0027t have matching annotations - instead, it should allow the assignment and track that the parameter has a FieldValue with PublicMethods thereafter. This particular case would then warn on the call to GetFields instead.\r\n\r\nhttps://github.com/dotnet/linker/blob/5460697bd57aff56666dd70cd64b5b6b00f417eb/test/Mono.Linker.Tests.Cases/DataFlow/MethodParametersDataFlow.cs#L230-L238\r\n\r\nMotivation:\r\n\r\nFor tracking reads/writes of hoisted fields in compiler-generated code (https://github.com/dotnet/linker/pull/2842), it\u0027s difficult if not impossible to distinguish between fields that were hoisted locals vs hoisted parameters. So the current approach allows modifying hoisted parameters. For consistency, we should allow the same for unhoisted parameters.\r\n\r\nThis will also simplify tracking compiler-generated code on the analyzer side, because there it\u0027s hard to tell which variables are hoisted. Treating hoisted vs unhoisted parameters differently would require an extra scan of the closure of methods called from compiler-generated code, to tell which parameters are closed over.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtY5eOg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc60BS1V",
                                           "createdAt":  "2022-07-25T21:36:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "This is no longer important for simplifying the analyzer implementation of compiler-generated code analysis, because the approach in https://github.com/dotnet/linker/pull/2842 changed in a way that already requires the analyzer to detect hoisted variables. We might still want to do it for consistency.\r\n\r\nCurrently the analyzer doesn\u0027t detect hoisted parameters, and it will treat them like normal parameters - warning if a parameter is assigned a value with an annotation that doesn\u0027t match the parameter annotation. The linker will treat captured parameters the same as other captured variables, tracking all values that get assigned. So there is a subtle difference in the warning behavior:\r\n- Linker won\u0027t warn on assignment to annotated captured parameter, but analyzer will\r\n- Linker will produce dataflow warnings for all values assigned to a captured parameter, but analyzer will not\r\n\r\nhttps://github.com/dotnet/linker/pull/2918 adds some more tests for these cases.",
                                           "updatedAt":  "2022-07-25T21:36:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc61jl46",
                                           "createdAt":  "2025-07-07T17:28:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-07T17:28:29Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Support tracking values written to parameters",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118706",
        "createdAt":  "2022-08-01T16:40:47Z",
        "number":  118706,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-13T23:13:59Z",
        "body":  "See tests added in https://github.com/dotnet/linker/pull/2928 and https://github.com/dotnet/linker/pull/2931.\r\n\r\nWhen constant propagation removes calls to a local function, the compiler-generated state may or may not detect the user method which owns the local function. It depends on whether it gets a chance to inspect the user method before constant propagation.\r\n\r\nhttps://github.com/dotnet/linker/pull/2931 shows a case where this can produce different warning behavior when RUC on the user method may or may not suppress a warning from the local function.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvehrBA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc696GsE",
                                           "createdAt":  "2025-08-13T23:13:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-13T23:13:59Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Warnings depend on order of constant prop and compiler-generated code detection",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/85465",
        "createdAt":  "2022-08-03T18:47:50Z",
        "number":  85465,
        "author":  "jtschuster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCwwjIQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HusanjonDeveloper",
                                            "createdAt":  "2023-06-17T22:19:57Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-10T16:24:35Z",
        "body":  "The linker doesn\u0027t properly handle when a ref variable is assigned to another ref variable by value.\r\n\r\nFor example, all values below are properly annotated, but will warn as assigning an unknown value to an annotated variable:\r\n```C#\r\nref struct RS\r\n{\r\n    [DAM(DAMT.PublicMethods)]\r\n    ref Type T;\r\n}\r\nvoid Method([DAM(DAMT.PublicMethods)] ref Type param, RS rs)\r\n{\r\n    ref Type t = GetRefTypeWithMethods();\r\n    param = t; // Warns with t as an unknown value\r\n    rs.T = t; // Warns\r\n    rs.T = param; // Warns\r\n    param = rs.T; // Warns\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWvDXZg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5a8NE6",
                                           "createdAt":  "2023-04-27T13:50:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe linker doesn\u0027t properly handle when a ref variable is assigned to another ref variable by value.\r\n\r\nFor example, all values below are properly annotated, but will warn as assigning an unknown value to an annotated variable:\r\n```C#\r\nref struct RS\r\n{\r\n    [DAM(DAMT.PublicMethods)]\r\n    ref Type T;\r\n}\r\nvoid Method([DAM(DAMT.PublicMethods)] ref Type param, RS rs)\r\n{\r\n    ref Type t = GetRefTypeWithMethods();\r\n    param = t; // Warns with t as an unknown value\r\n    rs.T = t; // Warns\r\n    rs.T = param; // Warns\r\n    param = rs.T; // Warns\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejtschuster\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-27T13:50:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a8NZI",
                                           "createdAt":  "2023-04-27T13:51:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe linker doesn\u0027t properly handle when a ref variable is assigned to another ref variable by value.\r\n\r\nFor example, all values below are properly annotated, but will warn as assigning an unknown value to an annotated variable:\r\n```C#\r\nref struct RS\r\n{\r\n    [DAM(DAMT.PublicMethods)]\r\n    ref Type T;\r\n}\r\nvoid Method([DAM(DAMT.PublicMethods)] ref Type param, RS rs)\r\n{\r\n    ref Type t = GetRefTypeWithMethods();\r\n    param = t; // Warns with t as an unknown value\r\n    rs.T = t; // Warns\r\n    rs.T = param; // Warns\r\n    param = rs.T; // Warns\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejtschuster\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`, `untriaged`, `area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-27T13:51:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5a8Ndm",
                                           "createdAt":  "2023-04-27T13:51:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "This also applies to NativeAOT.",
                                           "updatedAt":  "2023-04-27T13:51:21Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Linker doesn\u0027t track references/addresses for ldind.ref and always push an UnknownValue to the stack",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101562",
        "createdAt":  "2022-09-01T20:01:32Z",
        "number":  101562,
        "author":  "tlakollo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-10T16:24:44Z",
        "body":  "Runtime repo has a different set of code quality analyzers applied to code. Recently coreclr/tools folder enabled these analyzers (https://github.com/dotnet/runtime/pull/74825). These analyzers fixed several of the issues in common code between linker/nativeAOT. This issue tracks the enabling of the runtime code quality analyzers in linker repo.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOe9m-UA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc572a28",
                                           "createdAt":  "2024-04-25T18:06:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-25T18:06:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc572b5Q",
                                           "createdAt":  "2024-04-25T18:08:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-25T18:08:16Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Enable runtime code quality analyzers",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78050",
        "createdAt":  "2022-11-08T18:47:15Z",
        "number":  78050,
        "author":  "tlakollo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-10T16:20:30Z",
        "body":  "ILLink project has a .editorconfig different from runtime global configuration. One of the most important settings is that ILLink uses Mono format inside the .cs files along with a different header file. For now is important to maintain it in case we want to move some commits between dotnet/linker and dotnet/runtime but after the dotnet/linker repo gets archived we want to use the formatting and header from runtime. This issue tracks the work of modifying the .editorconfig once the dotnet/linker repo gets archived",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Tools illink should use runtime formatting",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78184",
        "createdAt":  "2022-11-10T19:05:28Z",
        "number":  78184,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-15T23:28:39Z",
        "body":  "When I publish a \"Hello World\" app with `PublishedTrimmed=true`, the following native assemblies are published with my app:\r\n\r\n![image](https://user-images.githubusercontent.com/8291187/201178025-9507e781-c97f-4d77-aa61-dac670d23f54.png)\r\n\r\nThese assemblies are always there, even if there are no calls to them. For \"Hello World\":\r\n\r\n* libSystem.Net.Security.Native.so\r\n* libSystem.Security.Cryptography.Native.OpenSsl.so\r\n\r\nare not used. And if I set `InvariantGlobalization=true` in the app, then\r\n\r\n* libSystem.Globalization.Native.so\r\n\r\nis not used, and can be trimmed.\r\n\r\nThis would save 200-300 KB of size.\r\n\r\nLarger savings could happen with `libSystem.IO.Compression.Native.so`. As it exists today, it contains the native code for Brotli compression and our \"shim\" APIs to call into `zlib` for Deflate compression. Typically, the Brotli code is unused, and could be trimmed. However, for CoreCLR apps, the Deflate shims are needed basically always because of it is needed to read portable PDB files for [source/line information for stacktrace/exception messages](https://github.com/dotnet/runtime/issues/34910).\r\n\r\nIf we were to implement this feature, we could split the Brotli and Deflate code into separate native assemblies, so the Brotli code could be trimmed. This would save another 800-900 KB.\r\n\r\nAnother potential idea here would be to add a Publish option to use the `.a` static libs at publish time. This would rely on a system linker, like `PublishAot=true` does. The advantage with this option is that native functions could be trimmed in these libraries. We wouldn\u0027t need to split the Compression.Native.so file. Instead, the Deflate code could remain while the Brotli code was trimmed.\r\n\r\ncc @agocke @AaronRobinsonMSFT @sbomer ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTiC_zw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5OIL_P",
                                           "createdAt":  "2022-11-10T19:05:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027size-reduction\u0027: @eerhardt, @SamMonoRT, @marek-safar\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen I publish a \"Hello World\" app with `PublishedTrimmed=true`, the following native assemblies are published with my app:\r\n\r\n![image](https://user-images.githubusercontent.com/8291187/201178025-9507e781-c97f-4d77-aa61-dac670d23f54.png)\r\n\r\nThese assemblies are always there, even if there are no calls to them. For \"Hello World\":\r\n\r\n* libSystem.Net.Security.Native.so\r\n* libSystem.Security.Cryptography.Native.OpenSsl.so\r\n\r\nare not used. And if I set `InvariantGlobalization=true` in the app, then\r\n\r\n* libSystem.Globalization.Native.so\r\n\r\nis not used, and can be trimmed.\r\n\r\nThis would save 200-300 KB of size.\r\n\r\nLarger savings could happen with `libSystem.IO.Compression.Native.so`. As it exists today, it contains the native code for Brotli compression and our \"shim\" APIs to call into `zlib` for Deflate compression. Typically, the Brotli code is unused, and could be trimmed. However, for CoreCLR apps, the Deflate shims are needed basically always because of it is needed to read portable PDB files for [source/line information for stacktrace/exception messages](https://github.com/dotnet/runtime/issues/34910).\r\n\r\nIf we were to implement this feature, we could split the Brotli and Deflate code into separate native assemblies, so the Brotli code could be trimmed. This would save another 800-900 KB.\r\n\r\nAnother potential idea here would be to add a Publish option to use the `.a` static libs at publish time. This would rely on a system linker, like `PublishAot=true` does. The advantage with this option is that native functions could be trimmed in these libraries. We wouldn\u0027t need to split the Compression.Native.so file. Instead, the Deflate code could remain while the Brotli code was trimmed.\r\n\r\ncc @agocke @AaronRobinsonMSFT @sbomer \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eeerhardt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`size-reduction`, `area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-10T19:05:34Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Proposal: Trim whole, unused native libraries when PublishTrimmed=true",
        "labels":  [
                       "size-reduction",
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78344",
        "createdAt":  "2022-11-14T21:42:32Z",
        "number":  78344,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-10T16:19:22Z",
        "body":  "https://github.com/dotnet/runtime/pull/78077 is disabling tests which relied on checked-in binaries to avoid committing those to dotnet/runtime. This tracks re-enabling those tests by moving those binaries to the runtime-assets repo, as suggested in https://github.com/dotnet/runtime/pull/78077#discussion_r1019419623.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTljlMg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5OWN7O",
                                           "createdAt":  "2022-11-14T21:42:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-11-14T21:42:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OWOUy",
                                           "createdAt":  "2022-11-14T21:44:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://github.com/dotnet/runtime/pull/78077 is disabling tests which relied on checked-in binaries to avoid committing those to dotnet/runtime. This tracks re-enabling those tests by moving those binaries to the runtime-assets repo, as suggested in https://github.com/dotnet/runtime/pull/78077#discussion_r1019419623.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esbomer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-14T21:44:20Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Re-enable illink tests which rely on checked-in binaries",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104627",
        "createdAt":  "2022-11-16T11:14:14Z",
        "number":  104627,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-02T21:26:18Z",
        "body":  "```C#\r\n\t\t\tinterface IBaseWithDefault\r\n\t\t\t{\r\n\t\t\t\tvoid DefaultMethod (Type type);\r\n\t\t\t}\r\n\r\n\t\t\tinterface IDerivedWithDefault : IBaseWithDefault\r\n\t\t\t{\r\n\t\t\t\t[ExpectedWarning (\"IL2092\")]\r\n\t\t\t\t[ExpectedWarning (\"IL2092\", ProducedBy = ProducedBy.Analyzer)] // Analyzer produces the warning again\r\n\t\t\t\tvoid IBaseWithDefault.DefaultMethod ([DynamicallyAccessedMembers (DynamicallyAccessedMemberTypes.PublicMethods)] Type type) { }\r\n\t\t\t}\r\n\r\n\t\t\tclass ImplDerivedWithDefault : IDerivedWithDefault\r\n\t\t\t{\r\n\t\t\t}\r\n\r\n```\r\n\r\nThis is because the analyzer uses symbol action (so called for every symbol). In this case it\u0027s called for `ImplDerivedWithDefault` and then for `IDerivedWithDefault` and both return the `DefaultMethod` override pair (the exact same pair) from their call to `GetMemberInterfaceImplementationPairs`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhDmJWQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6EOYSe",
                                           "createdAt":  "2022-11-16T11:14:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Probably low priority - it\u0027s just a bit of noise and in a very rare scenario.",
                                           "updatedAt":  "2022-11-16T11:14:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EOYSj",
                                           "createdAt":  "2024-07-09T18:17:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "NativeAot has a similar bug - it will produce duplicate warnings when there are multiple classes like `ImplDerivedWithDefault`, since it produces the warnings from the EETypeNode for that class.",
                                           "updatedAt":  "2024-07-09T18:17:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EOYlZ",
                                           "createdAt":  "2024-07-09T18:18:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-09T18:18:25Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Analyzer produces duplicate IL2092 for default interface method",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108523",
        "createdAt":  "2022-11-29T00:21:50Z",
        "number":  108523,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-21T06:01:54Z",
        "body":  "RUC on type silences warnings for code in members of the type, including generics warnings for methods.\r\nBut it doesn\u0027t silence warnings about generics on the type itself:\r\n\r\n```csharp\r\n    class RequireAll\u003c[DAM(DAMT.All)] T\u003e {}\r\n    \r\n    [RUC(\"C\u003cT\u003e\")]\r\n    class C\u003cT\u003e : RequireAll\u003cT\u003e {} // IL2091 \u0027T\u0027 generic argument does not satisfy \u0027DynamicallyAccessedMemberTypes.All\u0027 \r\n```\r\n\r\nI believe RUC on type should silence this warning. I can\u0027t think of a way to do something unsafe with `typeof(C\u003c\u003e)` that wouldn\u0027t cause warnings elsewhere.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvema2Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6OkUWv",
                                           "createdAt":  "2022-12-01T00:06:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Similar for fields:\r\n```csharp\r\n    class G\u003c[DAM(DAMT.PublicMethods)] T\u003e {}\r\n\r\n    [RUC(\"\")]\r\n    class CInst\u003cT\u003e {\r\n        public static G\u003cT\u003e field; // IL2091\r\n\r\n        public G\u003cT\u003e instField; // IL2091\r\n    }\r\n\r\n    [RequiresUnreferencedCode(\"\")]\r\n    public static void Test() {\r\n        var f = new CInst\u003cint\u003e().instField;\r\n        var g = CInst\u003cint\u003e.field;\r\n    }\r\n```\r\n\r\nI think these cases should not warn.",
                                           "updatedAt":  "2022-12-01T00:06:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OkVYC",
                                           "createdAt":  "2024-10-03T16:54:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-03T16:54:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OkVYN",
                                           "createdAt":  "2024-10-03T16:54:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-03T16:54:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OkVYm",
                                           "createdAt":  "2024-10-03T16:54:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-03T16:54:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OkVY1",
                                           "createdAt":  "2024-10-03T16:54:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-03T16:54:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc696ZrZ",
                                           "createdAt":  "2025-08-13T23:43:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "The field cases should be fixed by https://github.com/dotnet/runtime/pull/118708 since ILLink will no longer produce generic warnings on fields (instead they will show up at the field accesses).",
                                           "updatedAt":  "2025-08-13T23:43:56Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "RUC should suppress warnings about generics from type",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104802",
        "createdAt":  "2023-02-06T12:30:51Z",
        "number":  104802,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-29T18:44:50Z",
        "body":  "This is all about https://github.com/dotnet/roslyn/issues/66566.\r\n\r\nOnce there\u0027s the right API to use, the code fixer should switch to it.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhoHUSA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Eqzw6",
                                           "createdAt":  "2024-07-11T21:34:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bradwilson",
                                           "body":  "Analyzers are strongly suggested to get their UI from the compiler switch by using `LocalizableResourceString`, because the context in which they\u0027re executed is the compiler.\r\n\r\nFixers are not executed in the context of the compiler. They\u0027re executed in the context of a UI like Visual Studio or VS Code. As such, using `CultureInfo.CurrentCulture` should not have been prohibited by RS1035, and is actually the correct behavior to align with being displayed in a UI context. (This is what I\u0027ve been told by people on the Roslyn team after discovering RS1035 raising issues in fixers.)\r\n\r\nSee: https://github.com/dotnet/roslyn-analyzers/issues/7086#issuecomment-2223967184",
                                           "updatedAt":  "2024-07-11T21:34:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Eqzw_",
                                           "createdAt":  "2024-07-12T10:39:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "/fyi: @sbomer",
                                           "updatedAt":  "2024-07-12T10:39:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Eqz-S",
                                           "createdAt":  "2024-07-12T15:20:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-12T15:20:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GgdRI",
                                           "createdAt":  "2024-07-29T18:44:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "We are following the guidance, so this issue only tracks removing this suppression for RS1035 once it is no longer produced for code fixers:\r\nhttps://github.com/dotnet/runtime/blob/9550d3b3a2237d3cce4bc8fb9c0340e3d2cc0de8/src/tools/illink/src/ILLink.CodeFix/UnconditionalSuppressMessageCodeFixProvider.cs#L47-L49",
                                           "updatedAt":  "2024-07-29T18:44:45Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Codefixer should not use `CultureInfo.CurrentUICulture`",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82822",
        "createdAt":  "2023-02-26T19:42:03Z",
        "number":  82822,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-09T16:13:10Z",
        "body":  "The linker will perform some small constant folding for substituted methods or `static readonly T` fields. However, it leaves various \"crumbs\" behind that can quickly add up in a larger library.\r\n\r\nConsider for example, the relatively simple scenario here: https://github.com/terrafx/terrafx.interop.windows/pull/341\r\n\r\nWhile the substitution does cause `TerraFX.Interop.Configuration.DisableResolveLibraryHook` to be evaluated to a `constant true`, it\u0027s use site leaves behind a dead `compare+branch`, which in turn leaves behind a `static constructor` that could otherwise be removed:\r\n```csharp\r\nstatic Windows()\r\n{\r\n  if (true)\r\n    ;\r\n}\r\n```\r\n\r\nSimilar \"crumbs\" can be seen throughout `System.Private.Corelib` for things like `System.IntPtr.Size`, various `Isa.IsSupported` checks for hardware intrinsics, and more. This represents unnecessary \"bloat\" that is kept in the trimmed output and makes the JIT and other tools have to work harder to remove these dead blocks.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVyLMOA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5WajW_",
                                           "createdAt":  "2023-03-01T10:22:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-03-01T10:22:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Wajq2",
                                           "createdAt":  "2023-03-01T10:22:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe linker will perform some small constant folding for substituted methods or `static readonly T` fields. However, it leaves various \"crumbs\" behind that can quickly add up in a larger library.\r\n\r\nConsider for example, the relatively simple scenario here: https://github.com/terrafx/terrafx.interop.windows/pull/341\r\n\r\nWhile the substitution does cause `TerraFX.Interop.Configuration.DisableResolveLibraryHook` to be evaluated to a `constant true`, it\u0027s use site leaves behind a dead `compare+branch`, which in turn leaves behind a `static constructor` that could otherwise be removed:\r\n```csharp\r\nstatic Windows()\r\n{\r\n  if (true)\r\n    ;\r\n}\r\n```\r\n\r\nSimilar \"crumbs\" can be seen throughout `System.Private.Corelib` for things like `System.IntPtr.Size`, various `Isa.IsSupported` checks for hardware intrinsics, and more. This represents unnecessary \"bloat\" that is kept in the trimmed output and makes the JIT and other tools have to work harder to remove these dead blocks.\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etannergooding\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-01T10:22:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XFxKF",
                                           "createdAt":  "2023-03-09T01:30:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I had done some initial digging into this and it looks like the general handling for this is in [UnreachableBlocksOptimizer.cs](https://github.com/dotnet/runtime/blob/main/src/tools/illink/src/linker/Linker.Steps/UnreachableBlocksOptimizer.cs)\r\n\r\nFrom what I could tell, we effectively fill in a `FoldedInstructions` list with`nop` representing logic that can be evaluated as constant. We then use that to build a `reachableInstrs` map, and then attempt to remove the unreachable code.\r\n\r\nWe however don\u0027t actually go back and remove or otherwise reprocess the logic that was initially determined to be \"foldable\" and so they are left in \"as is\" which can lead to \"crumbs\" in the form of field reads, empty `if (true) { }` blocks, and similar.\r\n\r\nIs that about right and then would the fix be to ensure that the `FoldedInstructions` list is processed much as the trailing logic processes the `out var nopInstructions` created via `bodySweeper.Produce()`?\r\n\r\nIf so, could we change `bodySweeper.Produce` to mark things in `FoldedInstructions` instead of producing its own \"new list\" and then just removing anything marked `nop` from `FoldedInstructions` instead?",
                                           "updatedAt":  "2023-03-09T01:30:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XHmG9",
                                           "createdAt":  "2023-03-09T09:03:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Adding @marek-safar as the original author of this logic.\r\nI would have to dig into this in detail to answer the questions... didn\u0027t have time to do so yet.",
                                           "updatedAt":  "2023-03-09T09:03:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XIsw4",
                                           "createdAt":  "2023-03-09T11:56:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC3hUpQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2023-03-09T14:32:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2023-03-09T15:53:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "The logic would be more complex than just removing a few nops. In general, we are missing a step (logic) in ILLink that would optimize method IL and that code would be better done as an extra step than when processing unreachable sections.",
                                           "updatedAt":  "2023-03-09T11:56:15Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Linker leaves dead code for substituted methods",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82956",
        "createdAt":  "2023-03-03T21:08:12Z",
        "number":  82956,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-04T05:04:45Z",
        "body":  "If there\u0027s a lambda nested in local function, or the other direction, or another even more complex nesting scenario, warning suppressions applied to the local function/lambda are not propagated to warnings produced by the nested function/lambda.\r\n\r\nFor example:\r\n\r\n```C#\r\npublic static void Test()\r\n{\r\n    Local();\r\n\r\n    [UnconditionalSuppressMessage(\"ReflectionAnalysis\", \"IL2026:RequiresUnreferencedCode\")]\r\n    static void Local()\r\n    {\r\n        // Trim analysis warning IL2026 - even though it should be suppressed by the attribute above\r\n        AssemblyLoadContext.Default.Resolving +=\r\n            (context, assemblyName) =\u003e context.LoadFromAssemblyPath(\"\");\r\n    }\r\n}\r\n```\r\n\r\nThis is currently a by-design behavior:\r\nhttps://github.com/dotnet/runtime/blob/3853cb8437fea442c519232cf7ee20e1e9d81bf4/src/tools/illink/src/linker/Linker.Dataflow/CompilerGeneratedState.cs#L242-L244\r\n\r\nIt might be possible to improve on this if there\u0027s only one callsite - which should be the case for pretty much all lambdas, in which case we should be able to determine the outer scope of the lambda by its callsite.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVrEMvA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5WrElH",
                                           "createdAt":  "2023-03-03T21:08:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIf there\u0027s a lambda nested in local function, or the other direction, or another even more complex nesting scenario, warning suppressions applied to the local function/lambda are not propagated to warnings produced by the nested function/lambda.\r\n\r\nFor example:\r\n\r\n```C#\r\npublic static void Test()\r\n{\r\n    Local();\r\n\r\n    [UnconditionalSuppressMessage(\"ReflectionAnalysis\", \"IL2026:RequiresUnreferencedCode\")]\r\n    static void Local()\r\n    {\r\n        // Trim analysis warning IL2026 - even though it should be suppressed by the attribute above\r\n        AssemblyLoadContext.Default.Resolving +=\r\n            (context, assemblyName) =\u003e context.LoadFromAssemblyPath(\"\");\r\n    }\r\n}\r\n```\r\n\r\nThis is currently a by-design behavior:\r\nhttps://github.com/dotnet/runtime/blob/3853cb8437fea442c519232cf7ee20e1e9d81bf4/src/tools/illink/src/linker/Linker.Dataflow/CompilerGeneratedState.cs#L242-L244\r\n\r\nIt might be possible to improve on this if there\u0027s only one callsite - which should be the case for pretty much all lambdas, in which case we should be able to determine the outer scope of the lambda by its callsite.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-03T21:08:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WrOjH",
                                           "createdAt":  "2023-03-03T21:51:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "https://github.com/dotnet/runtime/pull/82957 adds a test for this case - hardcoding the current behavior for now.",
                                           "updatedAt":  "2023-03-03T21:51:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WsQy8",
                                           "createdAt":  "2023-03-04T05:04:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "I think this is basically fine. It\u0027s unfortunate that Roslyn handles the UnconditionalSuppress and doesn\u0027t have the same behavior, but overall I think this is a reasonable design decision and pretty understandable.",
                                           "updatedAt":  "2023-03-04T05:04:30Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Trim warning suppressions are not correctly propagated in multi-level compiler generated methods",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83169",
        "createdAt":  "2023-03-09T00:30:27Z",
        "number":  83169,
        "author":  "EgorBo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-09T16:12:59Z",
        "body":  "There is a method in `Ascii.Utility.cs` (SPC.dll):\r\n```csharp\r\nprivate static bool FirstCharInUInt32IsAscii(uint value)\r\n{\r\n    return (BitConverter.IsLittleEndian \u0026\u0026 (value \u0026 0xFF80u) == 0)\r\n        || (!BitConverter.IsLittleEndian \u0026\u0026 (value \u0026 0xFF800000u) == 0);\r\n}\r\n```\r\nAfter ILLink it looks like this:\r\n```make\r\n  .method private hidebysig static bool \r\n      FirstCharInUInt32IsAscii(unsigned int32 \u0027value\u0027) cil managed\r\n  {\r\n    .maxstack 8\r\n    IL_0000: ldsfld       bool System.BitConverter::IsLittleEndian\r\n    IL_0005: pop \r\n    IL_0006: ldarg.0      \r\n    IL_0007: ldc.i4       65408\r\n    IL_000c: and\r\n    IL_000d: brfalse.s    IL_0018\r\n    IL_000f: ldsfld       bool System.BitConverter::IsLittleEndian\r\n    IL_0014: brtrue.s     IL_0016\r\n    IL_0016: ldc.i4.0\r\n    IL_0017: ret\r\n    IL_0018: ldc.i4.1\r\n    IL_0019: ret\r\n  }\r\n```\r\nwhich is roughly:\r\n```csharp\r\nprivate static bool FirstCharInUInt32IsAscii(uint value)\r\n{\r\n    int unused = BitConverter.IsLittleEndian;\r\n    if ((value \u0026 65408) == 0)\r\n        goto RetTrue;\r\n    if (BitConverter.IsLittleEndian)\r\n        ; \r\n    return false;\r\nRetTrue:\r\n    return true;\r\n}\r\n```\r\nSo while it seems that ILLink did touch this method (thanks to https://github.com/dotnet/runtime/pull/37615) it seems that it could do a better job here by replacing `ldsfld       bool System.BitConverter::IsLittleEndian` with just `ldc.i4.1`, etc.\r\n\r\nThis doesn\u0027t let JIT to inline this small (in fact) method, because JIT doesn\u0027t resolve `ldsfld` tokens during IL prescan and it doesn\u0027t know that it\u0027s a special `IsLittleEndian` field that is always a constant) - it can be found in e.g. `GetIndexOfFirstNonAsciiChar_Intrinsified`\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVyNaag==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5XFlK4",
                                           "createdAt":  "2023-03-09T00:30:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch, @kunalspathak\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThere is a method in `Ascii.Utility.cs` (SPC.dll):\r\n```csharp\r\nprivate static bool FirstCharInUInt32IsAscii(uint value)\r\n{\r\n    return (BitConverter.IsLittleEndian \u0026\u0026 (value \u0026 0xFF80u) == 0)\r\n        || (!BitConverter.IsLittleEndian \u0026\u0026 (value \u0026 0xFF800000u) == 0);\r\n}\r\n```\r\nAfter ILLink it looks like this:\r\n```make\r\n  .method private hidebysig static bool \r\n      FirstCharInUInt32IsAscii(unsigned int32 \u0027value\u0027) cil managed\r\n  {\r\n    .maxstack 8\r\n    IL_0000: ldsfld       bool System.BitConverter::IsLittleEndian\r\n    IL_0005: pop \r\n    IL_0006: ldarg.0      \r\n    IL_0007: ldc.i4       65408\r\n    IL_000c: and\r\n    IL_000d: brfalse.s    IL_0018\r\n    IL_000f: ldsfld       bool System.BitConverter::IsLittleEndian\r\n    IL_0014: brtrue.s     IL_0016\r\n    IL_0016: ldc.i4.0\r\n    IL_0017: ret\r\n    IL_0018: ldc.i4.1\r\n    IL_0019: ret\r\n  }\r\n```\r\nwhich is roughly:\r\n```csharp\r\nprivate static bool FirstCharInUInt32IsAscii(uint value)\r\n{\r\n    int unused = BitConverter.IsLittleEndian;\r\n    if ((value \u0026 65408) == 0)\r\n        goto RetTrue;\r\n    if (BitConverter.IsLittleEndian)\r\n        ; \r\n    return false;\r\nRetTrue:\r\n    return true;\r\n}\r\n```\r\nSo while it seems that ILLink did touch this method (thanks to https://github.com/dotnet/runtime/pull/37615) it seems that it could do a better job here by replacing `ldsfld       bool System.BitConverter::IsLittleEndian` with just `ldc.i4.1`, etc.\r\n\r\nThis doesn\u0027t let JIT to inline this small (in fact) method, because JIT doesn\u0027t resolve `ldsfld` tokens during IL prescan and it doesn\u0027t know that it\u0027s a special `IsLittleEndian` field that is always a constant) - it can be found in e.g. `GetIndexOfFirstNonAsciiChar_Intrinsified`\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eEgorBo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CodeGen-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-09T00:30:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XFlVA",
                                           "createdAt":  "2023-03-09T00:31:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThere is a method in `Ascii.Utility.cs` (SPC.dll):\r\n```csharp\r\nprivate static bool FirstCharInUInt32IsAscii(uint value)\r\n{\r\n    return (BitConverter.IsLittleEndian \u0026\u0026 (value \u0026 0xFF80u) == 0)\r\n        || (!BitConverter.IsLittleEndian \u0026\u0026 (value \u0026 0xFF800000u) == 0);\r\n}\r\n```\r\nAfter ILLink it looks like this:\r\n```make\r\n  .method private hidebysig static bool \r\n      FirstCharInUInt32IsAscii(unsigned int32 \u0027value\u0027) cil managed\r\n  {\r\n    .maxstack 8\r\n    IL_0000: ldsfld       bool System.BitConverter::IsLittleEndian\r\n    IL_0005: pop \r\n    IL_0006: ldarg.0      \r\n    IL_0007: ldc.i4       65408\r\n    IL_000c: and\r\n    IL_000d: brfalse.s    IL_0018\r\n    IL_000f: ldsfld       bool System.BitConverter::IsLittleEndian\r\n    IL_0014: brtrue.s     IL_0016\r\n    IL_0016: ldc.i4.0\r\n    IL_0017: ret\r\n    IL_0018: ldc.i4.1\r\n    IL_0019: ret\r\n  }\r\n```\r\nwhich is roughly:\r\n```csharp\r\nprivate static bool FirstCharInUInt32IsAscii(uint value)\r\n{\r\n    int unused = BitConverter.IsLittleEndian;\r\n    if ((value \u0026 65408) == 0)\r\n        goto RetTrue;\r\n    if (BitConverter.IsLittleEndian)\r\n        ; \r\n    return false;\r\nRetTrue:\r\n    return true;\r\n}\r\n```\r\nSo while it seems that ILLink did touch this method (thanks to https://github.com/dotnet/runtime/pull/37615) it seems that it could do a better job here by replacing `ldsfld       bool System.BitConverter::IsLittleEndian` with just `ldc.i4.1`, etc.\r\n\r\nThis doesn\u0027t let JIT to inline this small (in fact) method, because JIT doesn\u0027t resolve `ldsfld` tokens during IL prescan and it doesn\u0027t know that it\u0027s a special `IsLittleEndian` field that is always a constant) - it can be found in e.g. `GetIndexOfFirstNonAsciiChar_Intrinsified`\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eEgorBo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-09T00:31:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XGjwi",
                                           "createdAt":  "2023-03-09T06:04:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Is linker keeping the `ldsfld` around to preserve the cctor trigger side effect? Preserving these side-effects is important for some substitutions.",
                                           "updatedAt":  "2023-03-09T06:04:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XGkCK",
                                           "createdAt":  "2023-03-09T06:05:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e JIT doesn\u0027t resolve ldsfld tokens during IL prescan and it doesn\u0027t know that it\u0027s a special IsLittleEndian field that is always a constant)\r\n\r\nShould the JIT start doing that in Tier1 or AOT modes to give the right treatment to initialized readonly fields?",
                                           "updatedAt":  "2023-03-09T06:05:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XHix-",
                                           "createdAt":  "2023-03-09T08:55:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC3f5eQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2023-03-09T10:52:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "If it\u0027s the access to the substituted field (and not a propagated constant) I think it should be OK to remove the `ldsfld` completely. But I haven\u0027t debugged the linker to tell exactly why it\u0027s keeping the instruction - it could be just general \"conservative\" approach.",
                                           "updatedAt":  "2023-03-09T08:55:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XITd0",
                                           "createdAt":  "2023-03-09T10:52:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e \u003e JIT doesn\u0027t resolve ldsfld tokens during IL prescan and it doesn\u0027t know that it\u0027s a special IsLittleEndian field that is always a constant)\r\n\u003e \r\n\u003e Should the JIT start doing that in Tier1 or AOT modes to give the right treatment to initialized readonly fields?\r\n\r\nI\u0027ll take a look",
                                           "updatedAt":  "2023-03-09T10:52:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XItvO",
                                           "createdAt":  "2023-03-09T11:58:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "\u003e Is linker keeping the ldsfld around to preserve the cctor trigger side effect? \r\n\r\nCorrect, we didn\u0027t put any effort yet to teach linker how to trim static constructors bodies and for that reason we also keep anything that could static ctor even when applying the substitutions. ",
                                           "updatedAt":  "2023-03-09T11:58:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XIzn8",
                                           "createdAt":  "2023-03-09T12:12:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e \u003e Is linker keeping the ldsfld around to preserve the cctor trigger side effect?\r\n\u003e \r\n\u003e Correct, we didn\u0027t put any effort yet to teach linker how to trim static constructors bodies and for that reason we also keep anything that could static ctor even when applying the substitutions.\r\n\r\nIt seems that even if I remove static constructor from `BitConverter` ([IsLittleEndian = true;](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/BitConverter.cs#L24) is not needed since that field is an intrinsic for CoreCLR/Crossgen/NAOT) - it still doesn\u0027t remove the field",
                                           "updatedAt":  "2023-03-09T12:13:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XI1pq",
                                           "createdAt":  "2023-03-09T12:16:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Ah, the lambda in https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/BitConverter.cs#L672 still keeps it 😞 - presumably, can be replaced with string.FastAllocate",
                                           "updatedAt":  "2023-03-09T12:16:12Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "ILLink substitute BitConverter.IsLittleEndian as true constant",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83194",
        "createdAt":  "2023-03-09T11:11:34Z",
        "number":  83194,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-09T18:45:26Z",
        "body":  "Currently only the `RequiresAssemblyFiles` attribute is allowed on properties and events. It applies to all accessor methods as if it was present on those methods. If the method has its own attribute the one on the method is used.\r\n\r\nFor consistency it would be good to allow also the `RequiresUnreferencedCode` and `RequiresDynamicCode` attributes on properties and events. On the other hand we don\u0027t have any immediate need for that.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVyGsNA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5XIaw0",
                                           "createdAt":  "2023-03-09T11:11:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrently only the `RequiresAssemblyFiles` attribute is allowed on properties and events. It applies to all accessor methods as if it was present on those methods. If the method has its own attribute the one on the method is used.\r\n\r\nFor consistency it would be good to allow also the `RequiresUnreferencedCode` and `RequiresDynamicCode` attributes on properties and events. On the other hand we don\u0027t have any immediate need for that.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-09T11:11:41Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Consider allowing `RequiresUnreferencedCode` and `RequiresDynamicCode` attributes on properties and events",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86626",
        "createdAt":  "2023-05-23T07:43:58Z",
        "number":  86626,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCwP_rg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sbomer",
                                            "createdAt":  "2023-05-23T16:33:10Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-10T16:30:39Z",
        "body":  "We use `HashSet` as the internal storage for `ValueSet`/`MultiValue`, but then we store mutable `ArrayValue` in it and sometimes mutate it such that it changes equality group and even its hash code - which violates assumptions made by `HashSet`. We should probably switch to use a `List` instead.\r\n\r\nWe just need to make sure that we can correctly handle unification of values as equality should handle multiple identical values as one.\r\n\r\nSee https://github.com/dotnet/runtime/pull/86449 for an example of a problem this causes and some discussion.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhsvtTg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5c6Bj4",
                                           "createdAt":  "2023-05-23T07:44:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe use `HashSet` as the internal storage for `ValueSet`/`MultiValue`, but then we store mutable `ArrayValue` in it and sometimes mutate it such that it changes equality group and even its hash code - which violates assumptions made by `HashSet`. We should probably switch to use a `List` instead.\r\n\r\nWe just need to make sure that we can correctly handle unification of values as equality should handle multiple identical values as one.\r\n\r\nSee https://github.com/dotnet/runtime/pull/86449 for an example of a problem this causes and some discussion.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-23T07:44:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Gy-1O",
                                           "createdAt":  "2024-07-31T21:42:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "The workaround from https://github.com/dotnet/runtime/pull/86449 fixed the equality check, and moving to `List` would just make the equality checks slower without fixing the underlying issue (that we are semantically trying to do value equality with mutable reference types).\r\n\r\nThis is in the same bucket as https://github.com/dotnet/runtime/issues/90335 - we need to rework array tracking, then this problem goes away (and we can remove the custom `Equals` implementation added in https://github.com/dotnet/runtime/pull/86449.",
                                           "updatedAt":  "2024-07-31T21:42:57Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Trim analyzer ValueSet should not track mutable reference types",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/86627",
        "createdAt":  "2023-05-23T07:48:24Z",
        "number":  86627,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-05T21:36:42Z",
        "body":  "The data flow analysis implemented by the analyzer (over CFG) implements a simple algorithm which loops until it hits a steady state. Assuming there no bugs, that should always happen, but if it doesn\u0027t the analyzer will effectively hang.\r\n\r\nWe should implement a guard on the number of iterations and fail (probably even throw) if it happens:\r\n* We want to know if this gets hit, since that means there\u0027s a bug\r\n* We don\u0027t want to hang, as that hangs the compiler/IDE and the experience of that is terrible (plus we don\u0027t get any info from it, unlike the exception where we could include the name of the method being analyzed for example)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXOg0JA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5c6DE_",
                                           "createdAt":  "2023-05-23T07:48:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe data flow analysis implemented by the analyzer (over CFG) implements a simple algorithm which loops until it hits a steady state. Assuming there no bugs, that should always happen, but if it doesn\u0027t the analyzer will effectively hang.\r\n\r\nWe should implement a guard on the number of iterations and fail (probably even throw) if it happens:\r\n* We want to know if this gets hit, since that means there\u0027s a bug\r\n* We don\u0027t want to hang, as that hangs the compiler/IDE and the experience of that is terrible (plus we don\u0027t get any info from it, unlike the exception where we could include the name of the method being analyzed for example)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-05-23T07:48:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c6DQk",
                                           "createdAt":  "2023-05-23T07:49:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "We should also implement the same in the trimmer and AOT since those also implement the interprocedural analysis which has one of these algorithms in it.",
                                           "updatedAt":  "2023-05-23T07:49:06Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Trim analyzer should defend against endless loops in analysis",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87435",
        "createdAt":  "2023-06-12T22:24:03Z",
        "number":  87435,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-09T16:16:11Z",
        "body":  "We produce various messages from MSBuild targets for the NativeAot build integration, for example https://github.com/dotnet/runtime/blob/98926e2b4922e752292fea4387bda49153069f54/src/coreclr/nativeaot/BuildIntegration/Microsoft.NETCore.Native.Unix.targets#L177\r\n\r\nILLink also has one at https://github.com/dotnet/runtime/blob/98926e2b4922e752292fea4387bda49153069f54/src/tools/illink/src/ILLink.Tasks/build/Microsoft.NET.ILLink.targets#L195-L197\r\n\r\nThese messages should be localized.\r\n\r\nNote: some of the ILLink messages are localized because they use resource strings defined in the SDK: https://github.com/dotnet/runtime/blob/98926e2b4922e752292fea4387bda49153069f54/src/tools/illink/src/ILLink.Tasks/build/Microsoft.NET.ILLink.targets#L120 This cross-repo dependency makes it harder to make changes in SDK, and should probably be removed. See context in https://github.com/dotnet/sdk/pull/33184.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXufEoQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5evivm",
                                           "createdAt":  "2023-06-13T15:15:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe produce various messages from MSBuild targets for the NativeAot build integration, for example https://github.com/dotnet/runtime/blob/98926e2b4922e752292fea4387bda49153069f54/src/coreclr/nativeaot/BuildIntegration/Microsoft.NETCore.Native.Unix.targets#L177\r\n\r\nILLink also has one at https://github.com/dotnet/runtime/blob/98926e2b4922e752292fea4387bda49153069f54/src/tools/illink/src/ILLink.Tasks/build/Microsoft.NET.ILLink.targets#L195-L197\r\n\r\nThese messages should be localized.\r\n\r\nNote: some of the ILLink messages are localized because they use resource strings defined in the SDK: https://github.com/dotnet/runtime/blob/98926e2b4922e752292fea4387bda49153069f54/src/tools/illink/src/ILLink.Tasks/build/Microsoft.NET.ILLink.targets#L120 This cross-repo dependency makes it harder to make changes in SDK, and should probably be removed. See context in https://github.com/dotnet/sdk/pull/33184.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esbomer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-13T15:15:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5e4STU",
                                           "createdAt":  "2023-06-14T18:52:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "When this is fixed, we should remove the test exception being added in https://github.com/dotnet/sdk/pull/33184#issuecomment-1591662767.",
                                           "updatedAt":  "2023-06-14T18:52:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5e58Rm",
                                           "createdAt":  "2023-06-15T02:29:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe produce various messages from MSBuild targets for the NativeAot build integration, for example https://github.com/dotnet/runtime/blob/98926e2b4922e752292fea4387bda49153069f54/src/coreclr/nativeaot/BuildIntegration/Microsoft.NETCore.Native.Unix.targets#L177\r\n\r\nILLink also has one at https://github.com/dotnet/runtime/blob/98926e2b4922e752292fea4387bda49153069f54/src/tools/illink/src/ILLink.Tasks/build/Microsoft.NET.ILLink.targets#L195-L197\r\n\r\nThese messages should be localized.\r\n\r\nNote: some of the ILLink messages are localized because they use resource strings defined in the SDK: https://github.com/dotnet/runtime/blob/98926e2b4922e752292fea4387bda49153069f54/src/tools/illink/src/ILLink.Tasks/build/Microsoft.NET.ILLink.targets#L120 This cross-repo dependency makes it harder to make changes in SDK, and should probably be removed. See context in https://github.com/dotnet/sdk/pull/33184.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esbomer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Tools-ILLink`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-15T02:29:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5e58Sh",
                                           "createdAt":  "2023-06-15T02:29:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "When it comes to localization, none of ILC gets localized, so the couple messages in MSBuild are the least of my worries.\r\n\r\nI think the ILLink part is probably more urgent. I\u0027m moving this to the ILLink area.",
                                           "updatedAt":  "2023-06-15T02:29:43Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Localize messages from MSBuild targets",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90115",
        "createdAt":  "2023-08-07T21:43:22Z",
        "number":  90115,
        "author":  "m-redding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1ibVw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexrp",
                                            "createdAt":  "2024-01-30T21:45:34Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-08-15T22:31:33Z",
        "body":  "### Description\n\nStructs cannot be annotated as `RequiresUnreferencedCode`. I\u0027m trying to make a library AOT compatible, and we have multiple structs that are not compatible with trimming. In most cases, we can just annotate all incompatible methods with `RequiresUnreferencedCode`. However, we have 2 cases where we have an overload for `ToString` which is incompatible with trimming. Since we cannot annotate the method or struct the warning will never be resolved.\n\n### Reproduction Steps\n\n```csharp\r\ninternal struct Sample\r\n{\r\n        public override string ToString()\r\n        {\r\n                // Reflection-based serialization code not compatible with trimming\r\n        }\r\n}\r\n```\n\n### Expected behavior\n\nAbility to annotate structs as `RequiresUnreferencedCode`\n\n### Actual behavior\n\nAdding `RequiresUnreferencedCode` attribute to a struct results in CS0592\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nFor the ToString() overload case, none. For the general case, every method must be annotated. \n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvk_1xQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jdYwO",
                                           "createdAt":  "2023-08-07T22:17:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nStructs cannot be annotated as `RequiresUnreferencedCode`. I\u0027m trying to make a library AOT compatible, and we have multiple structs that are not compatible with trimming. In most cases, we can just annotate all incompatible methods with `RequiresUnreferencedCode`. However, we have 2 cases where we have an overload for `ToString` which is incompatible with trimming. Since we cannot annotate the method or struct the warning will never be resolved.\n\n### Reproduction Steps\n\n```csharp\r\ninternal struct Sample\r\n{\r\n        public override string ToString()\r\n        {\r\n                // Reflection-based serialization code not compatible with trimming\r\n        }\r\n}\r\n```\n\n### Expected behavior\n\nAbility to annotate structs as `RequiresUnreferencedCode`\n\n### Actual behavior\n\nAdding `RequiresUnreferencedCode` attribute to a struct results in CS0592\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nFor the ToString() overload case, none. For the general case, every method must be annotated. \n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003em-redding\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Tools-ILLink`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-07T22:17:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jdZCr",
                                           "createdAt":  "2023-08-07T22:19:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "@vitek-karas @sbomer Is this just an oversight?",
                                           "updatedAt":  "2023-08-07T22:19:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jdevB",
                                           "createdAt":  "2023-08-07T22:49:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODC9Edg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2023-08-07T22:56:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "m-redding",
                                                                               "createdAt":  "2023-08-07T23:52:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "sbomer",
                                           "body":  "The annotation was intentionally only supported on classes according to the reasoning here: https://github.com/dotnet/runtime/issues/50122.\r\n\r\n\u003e If we allow this on structs, we would have to warn on instance methods too, plus it would introduce problems when unsafe instance methods get called indirectly through interfaces (the tool would not be able to see that at all).",
                                           "updatedAt":  "2023-08-07T22:49:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jh950",
                                           "createdAt":  "2023-08-08T15:34:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "How can an \"unsafe\" ToString on a struct be annotated correctly? You can\u0027t put `RequiresUnreferencedCode` on `ToString()`. You can\u0027t put `RequiresUnreferencedCode` on the struct itself. What are your other options beyond suppressing the warning?",
                                           "updatedAt":  "2023-08-08T15:34:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jiNM7",
                                           "createdAt":  "2023-08-08T16:11:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "As far as I know, there\u0027s currently no \"safe\" way to annotate that, without changes to the analysis that we do. In the API review for RUC, we discussed maybe adding support for annotating structs, but it would be a new feature. To catch all cases, we\u0027d need to decide where to warn in this example:\r\n```csharp\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\nclass Program {\r\n    static void Main() {\r\n        S s;\r\n        CallInterfaceMethod(s);\r\n    }\r\n\r\n    static void CallInterfaceMethod(I i) =\u003e i.M();\r\n}\r\n\r\ninterface I {\r\n    void M();\r\n}\r\n\r\nstruct S : I {\r\n    public S() =\u003e throw new Exception(\"ctor called\");\r\n\r\n    public void M() =\u003e Helper.RUC();\r\n}\r\n\r\nclass Helper {\r\n    [RequiresUnreferencedCode(\"Helper\")]\r\n    public static void RUC() =\u003e throw new Exception(\"RUC called\");\r\n}\r\n```\r\n\r\nNote that the struct ctor is never called, so the warning would probably need to be about the declaration in `Main`.",
                                           "updatedAt":  "2023-08-08T16:11:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jtH9P",
                                           "createdAt":  "2023-08-10T08:17:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDVdAg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2023-08-10T18:25:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "On a high level, we\u0027d need to detect when the struct is boxed, or a target of a constrained call. The analysis in IL Linker assumes that structs are boxed implicitly (the moment a struct type is reachable, we mark all the virtuals, etc.). This is a shortcut - if we could detect boxing or constrained calls, we could treat these the same as reference types. The rest are \"details\", but of course the devil is in them.\r\n\r\nAlternatively, we could say that a struct annotated as RUC warns every time someone touches it in any way (use as a generic argument, make an array of it, etc.). It will produce a lot of warnings - the warnings we try to avoid by the careful treatment of RUC on classes - even in code that is not too problematic in general.",
                                           "updatedAt":  "2023-08-10T08:17:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kF1Ej",
                                           "createdAt":  "2023-08-15T16:23:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Connecting the dots here, the problematic code in Azure.Core is:\r\n\r\nhttps://github.com/Azure/azure-sdk-for-net/blob/c4fb4c52117622c2107163ba6d3efbb20743836d/sdk/core/Azure.Core/src/DynamicData/MutableJsonChange.cs#L52-L61\r\n\r\nThis code is eventually called from `MutableJsonChange`\u0027s ToString().\r\n\r\n@m-redding - In this case, since this struct is internal, I would annotate the constructor as `RequiresUnreferencedCode` and then suppress the warning in the ToString. The `object? Value` readonly property (which is the root of being incompatible with trimming here) can only be set by the constructor. So only callers using the constructor will be able to use this struct.\r\n\r\nFollowing all the callsites up, the only place I see this exposed publicly is through APIs like [this](https://github.com/Azure/azure-sdk-for-net/blob/c4fb4c52117622c2107163ba6d3efbb20743836d/sdk/core/Azure.Core/src/Serialization/AzureCoreExtensions.cs#L65-L69):\r\n\r\n```C#\r\n        public static dynamic ToDynamicFromJson(this BinaryData utf8Json)\r\n        {\r\n            DynamicDataOptions options = new DynamicDataOptions();\r\n            return utf8Json.ToDynamicFromJson(options);\r\n        }\r\n```\r\n\r\nWhich will never be trim or AOT compatible. So we should just mark all this code as `RequiresUnreferencedCode`, and any Azure library that wants to be trim/AOT compatible will need to use alternate APIs.",
                                           "updatedAt":  "2023-08-15T16:23:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x0G5N",
                                           "createdAt":  "2024-01-25T07:19:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Thinking about this more, I don\u0027t think it will be possible to detect all the places where a struct could become boxed. There\u0027s just too many ways, and once the struct is boxed, any virtual methods on it are callable.\r\n\r\nI think the only reasonable way to implement this on structs would be to turn any reference to the struct into a warning - if the type is referenced from a parameter, local, field, any IL instruction - all of them will need to generate a warning. The question is whether it would still be practical in this shape.",
                                           "updatedAt":  "2024-01-25T07:19:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-T_XF",
                                           "createdAt":  "2025-08-15T22:31:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "I think with https://github.com/dotnet/runtime/pull/118020 and https://github.com/dotnet/runtime/pull/118708 we are closer to being able to support this, since we now detect struct boxing to produce warnings for generic annotation mismatches.",
                                           "updatedAt":  "2025-08-15T22:31:18Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Structs cannot be annotated as `RequiresUnreferencedCode`",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90335",
        "createdAt":  "2023-08-10T19:02:53Z",
        "number":  90335,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-10T16:30:35Z",
        "body":  "```csharp\r\nstatic void Test(bool b = true) {\r\n        var arr1 = new Type[] { GetAll () };\r\n        var arr2 = new Type[] { GetAll () };\r\n        (b ? arr1 : arr2)[0] = GetUnknownType ();\r\n        RequiresAll (arr1[0]);\r\n}\r\n\r\nstatic Type GetUnknownType () =\u003e throw null;\r\n\r\n[return: DynamicallyAccessedMembers (DynamicallyAccessedMemberTypes.All)]\r\nstatic Type GetAll () =\u003e throw null;\r\n\r\nstatic void RequiresAll ([DynamicallyAccessedMembers (DynamicallyAccessedMemberTypes.All)] Type t) {}\r\n```\r\n\r\nThis should warn about the return value of `GetUnknownType` being passed to `RequiresAll`, because it doesn\u0027t satisfy `DynamicallyAccessedMemberTypes.All`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhspydA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jw65t",
                                           "createdAt":  "2023-08-10T19:12:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```csharp\r\nstatic void Test(bool b = true) {\r\n        var arr1 = new Type[] { GetAll () };\r\n        var arr2 = new Type[] { GetAll () };\r\n        (b ? arr1 : arr2)[0] = GetUnknownType ();\r\n        RequiresAll (arr1[0]);\r\n}\r\n\r\nstatic Type GetUnknownType () =\u003e throw null;\r\n\r\n[return: DynamicallyAccessedMembers (DynamicallyAccessedMemberTypes.All)]\r\nstatic Type GetAll () =\u003e throw null;\r\n\r\nstatic void RequiresAll ([DynamicallyAccessedMembers (DynamicallyAccessedMemberTypes.All)] Type t) {}\r\n```\r\n\r\nThis should warn about the return value of `GetUnknownType` being passed to `RequiresAll`, because it doesn\u0027t satisfy `DynamicallyAccessedMemberTypes.All`.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esbomer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILLink`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-10T19:12:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GynJ0",
                                           "createdAt":  "2024-07-31T20:40:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "This doesn\u0027t warn because of the way we track array values. When we merge the two branches of `(b ? arr1 : arr2)`, the merged stack slot gets a copy of the tracked (merged) array. Then we assign `GetUnknownType ()` to that array using the stack slot, but this isn\u0027t reflected in the value stored in the locals.\r\n\r\nTo fix this we\u0027ll need to introduce a concept of a reference to an array that can be merged, without making a copy of the underlying array. Basically we need to rework how we do tracking for mutable reference types.",
                                           "updatedAt":  "2024-07-31T20:40:52Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Trim analysis hole for possible assignment to array",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90718",
        "createdAt":  "2023-08-17T06:37:51Z",
        "number":  90718,
        "author":  "Youssef1313",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-26T21:53:54Z",
        "body":  "### Description\n\n![image](https://github.com/dotnet/runtime/assets/31348972/c485edc3-3904-4cea-b869-a805325e7084)\r\n\n\n### Reproduction Steps\n\n-\n\n### Expected behavior\n\nShouldn\u0027t be unnecessary boxing\n\n### Actual behavior\n\nThis is boxing.\r\n\r\nhttps://github.com/dotnet/runtime/blob/ce54acdc1c2e820f06d6f813d6b6ed6ce0a1b64d/src/tools/illink/src/linker/Linker.Steps/UnreachableBlocksOptimizer.cs#L363\r\n\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZECiOw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kPSWW",
                                           "createdAt":  "2023-08-17T06:54:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ShreyasJejurkar",
                                           "body":  "Not sure how a boxed integer would help, as it might return `string` as well! \r\n\r\nhttps://github.com/dotnet/runtime/blob/ce54acdc1c2e820f06d6f813d6b6ed6ce0a1b64d/src/tools/illink/src/linker/Linker.Steps/UnreachableBlocksOptimizer.cs#L396-L407",
                                           "updatedAt":  "2023-08-17T06:54:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kPT6u",
                                           "createdAt":  "2023-08-17T07:00:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Youssef1313",
                                           "body":  "string can remain. There is no boxing concern with it.",
                                           "updatedAt":  "2023-08-17T07:00:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kPxP0",
                                           "createdAt":  "2023-08-17T08:26:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODD5tCQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2023-08-17T08:34:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "If boxing is indeed an issue, feel free to just define `static readonly` fields representing boxed values and use those.",
                                           "updatedAt":  "2023-08-17T08:26:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kP2BS",
                                           "createdAt":  "2023-08-17T08:40:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\n![image](https://github.com/dotnet/runtime/assets/31348972/c485edc3-3904-4cea-b869-a805325e7084)\r\n\n\n### Reproduction Steps\n\n-\n\n### Expected behavior\n\nShouldn\u0027t be unnecessary boxing\n\n### Actual behavior\n\nThis is boxing.\r\n\r\nhttps://github.com/dotnet/runtime/blob/ce54acdc1c2e820f06d6f813d6b6ed6ce0a1b64d/src/tools/illink/src/linker/Linker.Steps/UnreachableBlocksOptimizer.cs#L363\r\n\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eYoussef1313\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Tools-ILLink`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-17T08:40:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kP3ei",
                                           "createdAt":  "2023-08-17T08:45:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I don\u0027t think we can use static fields since the values are not known up front - they\u0027re read from the IL stream.\r\nIf this is indeed a perf problem, then we could probably avoid the cast to `(int)` and just return the `instruction.Operand` which will be an already boxed value. The casts are really not doing much here.",
                                           "updatedAt":  "2023-08-17T08:45:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kP4ar",
                                           "createdAt":  "2023-08-17T08:47:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Youssef1313",
                                           "body":  "@vitek-karas There are some cases where the value is known:\r\n\r\nhttps://github.com/dotnet/runtime/blob/ce54acdc1c2e820f06d6f813d6b6ed6ce0a1b64d/src/tools/illink/src/linker/Linker.Steps/UnreachableBlocksOptimizer.cs#L366-L395\r\n\r\nand other cases where it\u0027s not:\r\n\r\nhttps://github.com/dotnet/runtime/blob/ce54acdc1c2e820f06d6f813d6b6ed6ce0a1b64d/src/tools/illink/src/linker/Linker.Steps/UnreachableBlocksOptimizer.cs#L396-L401",
                                           "updatedAt":  "2023-08-17T08:47:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kP5c5",
                                           "createdAt":  "2023-08-17T08:51:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Even for unknowns, if it makes sense, you can define an array of, say, 200 objects representing -100..100 (at least for the `Ldc_I4` which is, I guess, the most popular) and then access it by index=value.\r\n\r\nA few big projects use a similar trick, e.g.: https://grep.app/search?q=static%20readonly%20object%20Box",
                                           "updatedAt":  "2023-08-17T08:51:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kQI_b",
                                           "createdAt":  "2023-08-17T09:34:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Good points - thanks a lot!\r\n\r\nI agree it would make sense to use precreated boxed values for the constants and avoid casting for the cases where we read the value from the operand (as that will already be boxed).",
                                           "updatedAt":  "2023-08-17T09:34:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kQKI7",
                                           "createdAt":  "2023-08-17T09:37:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODD9H_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EgorBo",
                                                                               "createdAt":  "2023-08-17T09:45:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2023-08-17T16:59:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@Youssef1313 it\u0027s really cool you\u0027re looking into performance of illink. We do have a benchmark for it: https://github.com/dotnet/performance/tree/main/src/benchmarks/real-world/ILLink, so it would be really great if you could attach potential improvements in the benchmark to each of the changes.\r\n\r\nThat said, the benchmark probably needs some work:\r\n* No good way to run using a local build of illink\r\n* No good way to compare local build to official build\r\n* The benchmarked app is probably too simplistic (HelloWorld)\r\n\r\nBut if we\u0027re going to do perf work for illink, it would make a lot of sense to invest into testing of it as well.",
                                           "updatedAt":  "2023-08-17T09:37:28Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "`UnreachableBlocksOptimizer.GetConstantValue` should used boxed integers instead of boxing every time",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93247",
        "createdAt":  "2023-10-09T18:41:27Z",
        "number":  93247,
        "author":  "arturek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-12T20:28:07Z",
        "body":  "### Description\n\nWhen the `InternalsVisibleTo` attribute is used in the `System.Private.CoreLib` project (where it is also defined), ILLink crashes (because of `NullReferenceException`) and prints `ILLink : error IL1012: IL Trimmer has encountered an unexpected error`.\r\n\r\nI found this problem while working on adding tests to #92534.\r\n\n\n### Reproduction Steps\n\n1. apply the commit arturek/runtime@677f9c24a818eaa22a4869c992ba63ac6f988a15\r\n2. run `build.cmd clr+libs -c Debug` in the x64 console (Release mode fails the same way)\r\n\n\n### Expected behavior\n\nThe runtime and libraries are successfully built.\n\n### Actual behavior\n\nThe following error is printed:\r\n\r\n```\r\n  sfx -\u003e Trimming win-x64 shared framework assemblies with ILLinker...\r\nILLink : error IL1012: IL Trimmer has encountered an unexpected error. Please report the issue at https://aka.ms/report-illink [C:\\r\\gh\r\n\\dotnet\\rt2\\runtime\\src\\libraries\\sfx.proj]\r\n  Fatal error in IL Linker\r\n  Unhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\r\n     at Mono.Linker.UnconditionalSuppressMessageAttributeState.GetModuleFromProvider(ICustomAttributeProvider provider) in C:\\r\\gh\\dotn\r\n  et\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\UnconditionalSuppressMessageAttributeState.cs:line 252\r\n     at Mono.Linker.UnconditionalSuppressMessageAttributeState.TryGetSuppressionsForProvider(ICustomAttributeProvider provider, Diction\r\n  ary`2\u0026 suppressions) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\UnconditionalSuppressMessageAttributeState.cs:l\r\n  ine 175\r\n     at Mono.Linker.UnconditionalSuppressMessageAttributeState.IsSuppressedOnElement(Int32 id, ICustomAttributeProvider provider, Suppr\r\n  essMessageInfo\u0026 info) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\UnconditionalSuppressMessageAttributeState.cs:\r\n  line 146\r\n     at Mono.Linker.UnconditionalSuppressMessageAttributeState.IsSuppressed(Int32 id, ICustomAttributeProvider warningOrigin, SuppressM\r\n  essageInfo\u0026 info) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\UnconditionalSuppressMessageAttributeState.cs:line\r\n   111\r\n     at Mono.Linker.UnconditionalSuppressMessageAttributeState.IsSuppressed(Int32 id, MessageOrigin warningOrigin, SuppressMessageInfo\u0026\r\n   info) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\UnconditionalSuppressMessageAttributeState.cs:line 82\r\n     at Mono.Linker.LinkContext.IsWarningSuppressed(Int32 warningCode, String subcategory, MessageOrigin origin) in C:\\r\\gh\\dotnet\\rt2\\\r\n  runtime\\src\\tools\\illink\\src\\linker\\Linker\\LinkContext.cs:line 744\r\n     at Mono.Linker.MessageContainer.CreateWarningMessageContainer(LinkContext context, MessageOrigin origin, DiagnosticId id, WarnVers\r\n  ion version, String subcategory, String[] args) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\MessageContainer.cs:\r\n  line 185\r\n     at Mono.Linker.MessageContainer.CreateWarningMessage(LinkContext context, MessageOrigin origin, DiagnosticId id, WarnVersion versi\r\n  on, String[] args) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\MessageContainer.cs:line 132\r\n     at Mono.Linker.LinkContext.LogWarning(MessageOrigin origin, DiagnosticId id, String[] args) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tool\r\n  s\\illink\\src\\linker\\Linker\\LinkContext.cs:line 595\r\n     at Mono.Linker.Steps.CheckSuppressionsDispatcher.Process(LinkContext context) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\l\r\n  inker\\Linker.Steps\\CheckSuppressionsDispatcher.cs:line 33\r\n     at Mono.Linker.Pipeline.ProcessStep(LinkContext context, IStep step) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Lin\r\n  ker\\Pipeline.cs:line 178\r\n     at Mono.Linker.Pipeline.Process(LinkContext context) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\Pipeline.cs:\r\n  line 167\r\n     at Mono.Linker.Driver.Run(ILogger customLogger) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\Driver.cs:line 81\r\n  4\r\n     at Mono.Linker.Driver.Main(String[] args) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\Driver.cs:line 68\r\n\r\nBuild FAILED.\r\n\r\nILLink : error IL1012: IL Trimmer has encountered an unexpected error. Please report the issue at https://aka.ms/report-illink [C:\\r\\gh\r\n\\dotnet\\rt2\\runtime\\src\\libraries\\sfx.proj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\n```\r\n\n\n### Regression?\n\nProbably not a regression, as this functionality was never used there.\n\n### Known Workarounds\n\nno workarounds found\n\n### Configuration\n\n.Net SDK 8.0.100-rc.1.23455.8 (x64)\r\nWindows 11 Home 22H2\r\nx64\r\n\n\n### Other information\n\nThe error happens because the `DeclaringType` property of the `Mono.Cecil.MethodDefinition` instance (representing the `System.Int32 GetClassFactoryForTypeInContext(Internal.Runtime.InteropServices.ComActivationContextInternal*,System.IntPtr)` method) is null. When this instance is created its DeclaringType is correct, but later it becomes null. I don\u0027t know when.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOav2Szg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5og_ig",
                                           "createdAt":  "2023-10-09T18:41:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen the `InternalsVisibleTo` attribute is used in the `System.Private.CoreLib` project (where it is also defined), ILLink crashes (because of `NullReferenceException`) and prints `ILLink : error IL1012: IL Trimmer has encountered an unexpected error`.\r\n\r\nI found this problem while working on adding tests to #92534.\r\n\n\n### Reproduction Steps\n\n1. apply the commit arturek/runtime@677f9c24a818eaa22a4869c992ba63ac6f988a15\r\n2. run `build.cmd clr+libs -c Debug` in the x64 console (Release mode fails the same way)\r\n\n\n### Expected behavior\n\nThe runtime and libraries are successfully built.\n\n### Actual behavior\n\nThe following error is printed:\r\n\r\n```\r\n  sfx -\u003e Trimming win-x64 shared framework assemblies with ILLinker...\r\nILLink : error IL1012: IL Trimmer has encountered an unexpected error. Please report the issue at https://aka.ms/report-illink [C:\\r\\gh\r\n\\dotnet\\rt2\\runtime\\src\\libraries\\sfx.proj]\r\n  Fatal error in IL Linker\r\n  Unhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\r\n     at Mono.Linker.UnconditionalSuppressMessageAttributeState.GetModuleFromProvider(ICustomAttributeProvider provider) in C:\\r\\gh\\dotn\r\n  et\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\UnconditionalSuppressMessageAttributeState.cs:line 252\r\n     at Mono.Linker.UnconditionalSuppressMessageAttributeState.TryGetSuppressionsForProvider(ICustomAttributeProvider provider, Diction\r\n  ary`2\u0026 suppressions) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\UnconditionalSuppressMessageAttributeState.cs:l\r\n  ine 175\r\n     at Mono.Linker.UnconditionalSuppressMessageAttributeState.IsSuppressedOnElement(Int32 id, ICustomAttributeProvider provider, Suppr\r\n  essMessageInfo\u0026 info) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\UnconditionalSuppressMessageAttributeState.cs:\r\n  line 146\r\n     at Mono.Linker.UnconditionalSuppressMessageAttributeState.IsSuppressed(Int32 id, ICustomAttributeProvider warningOrigin, SuppressM\r\n  essageInfo\u0026 info) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\UnconditionalSuppressMessageAttributeState.cs:line\r\n   111\r\n     at Mono.Linker.UnconditionalSuppressMessageAttributeState.IsSuppressed(Int32 id, MessageOrigin warningOrigin, SuppressMessageInfo\u0026\r\n   info) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\UnconditionalSuppressMessageAttributeState.cs:line 82\r\n     at Mono.Linker.LinkContext.IsWarningSuppressed(Int32 warningCode, String subcategory, MessageOrigin origin) in C:\\r\\gh\\dotnet\\rt2\\\r\n  runtime\\src\\tools\\illink\\src\\linker\\Linker\\LinkContext.cs:line 744\r\n     at Mono.Linker.MessageContainer.CreateWarningMessageContainer(LinkContext context, MessageOrigin origin, DiagnosticId id, WarnVers\r\n  ion version, String subcategory, String[] args) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\MessageContainer.cs:\r\n  line 185\r\n     at Mono.Linker.MessageContainer.CreateWarningMessage(LinkContext context, MessageOrigin origin, DiagnosticId id, WarnVersion versi\r\n  on, String[] args) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\MessageContainer.cs:line 132\r\n     at Mono.Linker.LinkContext.LogWarning(MessageOrigin origin, DiagnosticId id, String[] args) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tool\r\n  s\\illink\\src\\linker\\Linker\\LinkContext.cs:line 595\r\n     at Mono.Linker.Steps.CheckSuppressionsDispatcher.Process(LinkContext context) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\l\r\n  inker\\Linker.Steps\\CheckSuppressionsDispatcher.cs:line 33\r\n     at Mono.Linker.Pipeline.ProcessStep(LinkContext context, IStep step) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Lin\r\n  ker\\Pipeline.cs:line 178\r\n     at Mono.Linker.Pipeline.Process(LinkContext context) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\Pipeline.cs:\r\n  line 167\r\n     at Mono.Linker.Driver.Run(ILogger customLogger) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\Driver.cs:line 81\r\n  4\r\n     at Mono.Linker.Driver.Main(String[] args) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\Driver.cs:line 68\r\n\r\nBuild FAILED.\r\n\r\nILLink : error IL1012: IL Trimmer has encountered an unexpected error. Please report the issue at https://aka.ms/report-illink [C:\\r\\gh\r\n\\dotnet\\rt2\\runtime\\src\\libraries\\sfx.proj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\n```\r\n\n\n### Regression?\n\nProbably not a regression, as this functionality was never used there.\n\n### Known Workarounds\n\nno workarounds found\n\n### Configuration\n\n.Net SDK 8.0.100-rc.1.23455.8 (x64)\r\nWindows 11 Home 22H2\r\nx64\r\n\n\n### Other information\n\nThe error happens because the `DeclaringType` property of the `Mono.Cecil.MethodDefinition` instance (representing the `System.Int32 GetClassFactoryForTypeInContext(Internal.Runtime.InteropServices.ComActivationContextInternal*,System.IntPtr)` method) is null. When this instance is created its DeclaringType is correct, but later it becomes null. I don\u0027t know when.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003earturek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-AssemblyLoader-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-09T18:41:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oiglt",
                                           "createdAt":  "2023-10-09T21:08:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen the `InternalsVisibleTo` attribute is used in the `System.Private.CoreLib` project (where it is also defined), ILLink crashes (because of `NullReferenceException`) and prints `ILLink : error IL1012: IL Trimmer has encountered an unexpected error`.\r\n\r\nI found this problem while working on adding tests to #92534.\r\n\n\n### Reproduction Steps\n\n1. apply the commit arturek/runtime@677f9c24a818eaa22a4869c992ba63ac6f988a15\r\n2. run `build.cmd clr+libs -c Debug` in the x64 console (Release mode fails the same way)\r\n\n\n### Expected behavior\n\nThe runtime and libraries are successfully built.\n\n### Actual behavior\n\nThe following error is printed:\r\n\r\n```\r\n  sfx -\u003e Trimming win-x64 shared framework assemblies with ILLinker...\r\nILLink : error IL1012: IL Trimmer has encountered an unexpected error. Please report the issue at https://aka.ms/report-illink [C:\\r\\gh\r\n\\dotnet\\rt2\\runtime\\src\\libraries\\sfx.proj]\r\n  Fatal error in IL Linker\r\n  Unhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\r\n     at Mono.Linker.UnconditionalSuppressMessageAttributeState.GetModuleFromProvider(ICustomAttributeProvider provider) in C:\\r\\gh\\dotn\r\n  et\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\UnconditionalSuppressMessageAttributeState.cs:line 252\r\n     at Mono.Linker.UnconditionalSuppressMessageAttributeState.TryGetSuppressionsForProvider(ICustomAttributeProvider provider, Diction\r\n  ary`2\u0026 suppressions) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\UnconditionalSuppressMessageAttributeState.cs:l\r\n  ine 175\r\n     at Mono.Linker.UnconditionalSuppressMessageAttributeState.IsSuppressedOnElement(Int32 id, ICustomAttributeProvider provider, Suppr\r\n  essMessageInfo\u0026 info) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\UnconditionalSuppressMessageAttributeState.cs:\r\n  line 146\r\n     at Mono.Linker.UnconditionalSuppressMessageAttributeState.IsSuppressed(Int32 id, ICustomAttributeProvider warningOrigin, SuppressM\r\n  essageInfo\u0026 info) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\UnconditionalSuppressMessageAttributeState.cs:line\r\n   111\r\n     at Mono.Linker.UnconditionalSuppressMessageAttributeState.IsSuppressed(Int32 id, MessageOrigin warningOrigin, SuppressMessageInfo\u0026\r\n   info) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\UnconditionalSuppressMessageAttributeState.cs:line 82\r\n     at Mono.Linker.LinkContext.IsWarningSuppressed(Int32 warningCode, String subcategory, MessageOrigin origin) in C:\\r\\gh\\dotnet\\rt2\\\r\n  runtime\\src\\tools\\illink\\src\\linker\\Linker\\LinkContext.cs:line 744\r\n     at Mono.Linker.MessageContainer.CreateWarningMessageContainer(LinkContext context, MessageOrigin origin, DiagnosticId id, WarnVers\r\n  ion version, String subcategory, String[] args) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\MessageContainer.cs:\r\n  line 185\r\n     at Mono.Linker.MessageContainer.CreateWarningMessage(LinkContext context, MessageOrigin origin, DiagnosticId id, WarnVersion versi\r\n  on, String[] args) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\MessageContainer.cs:line 132\r\n     at Mono.Linker.LinkContext.LogWarning(MessageOrigin origin, DiagnosticId id, String[] args) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tool\r\n  s\\illink\\src\\linker\\Linker\\LinkContext.cs:line 595\r\n     at Mono.Linker.Steps.CheckSuppressionsDispatcher.Process(LinkContext context) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\l\r\n  inker\\Linker.Steps\\CheckSuppressionsDispatcher.cs:line 33\r\n     at Mono.Linker.Pipeline.ProcessStep(LinkContext context, IStep step) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Lin\r\n  ker\\Pipeline.cs:line 178\r\n     at Mono.Linker.Pipeline.Process(LinkContext context) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\Pipeline.cs:\r\n  line 167\r\n     at Mono.Linker.Driver.Run(ILogger customLogger) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\Driver.cs:line 81\r\n  4\r\n     at Mono.Linker.Driver.Main(String[] args) in C:\\r\\gh\\dotnet\\rt2\\runtime\\src\\tools\\illink\\src\\linker\\Linker\\Driver.cs:line 68\r\n\r\nBuild FAILED.\r\n\r\nILLink : error IL1012: IL Trimmer has encountered an unexpected error. Please report the issue at https://aka.ms/report-illink [C:\\r\\gh\r\n\\dotnet\\rt2\\runtime\\src\\libraries\\sfx.proj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\n```\r\n\n\n### Regression?\n\nProbably not a regression, as this functionality was never used there.\n\n### Known Workarounds\n\nno workarounds found\n\n### Configuration\n\n.Net SDK 8.0.100-rc.1.23455.8 (x64)\r\nWindows 11 Home 22H2\r\nx64\r\n\n\n### Other information\n\nThe error happens because the `DeclaringType` property of the `Mono.Cecil.MethodDefinition` instance (representing the `System.Int32 GetClassFactoryForTypeInContext(Internal.Runtime.InteropServices.ComActivationContextInternal*,System.IntPtr)` method) is null. When this instance is created its DeclaringType is correct, but later it becomes null. I don\u0027t know when.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003earturek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-AssemblyLoader-coreclr`, `untriaged`, `area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-09T21:08:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5okgQo",
                                           "createdAt":  "2023-10-10T05:14:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJH7mg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2023-10-10T05:32:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I found this problem while working on adding tests to https://github.com/dotnet/runtime/pull/92534.\r\n\r\nWe do not use InternalsVisible in core runtime assemblies. Even if this bug is fixed, we would not want to add InternalsVisible in CoreLib.",
                                           "updatedAt":  "2023-10-10T05:14:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5okk3l",
                                           "createdAt":  "2023-10-10T05:32:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Consider code sharing instead. We do that in several test assemblies.",
                                           "updatedAt":  "2023-10-10T05:32:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oq8my",
                                           "createdAt":  "2023-10-10T19:23:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arturek",
                                           "body":  "@jkotas Thank you for this information.\r\n@danmoseley I used sharing in other places and thought about it initially. Unfortunately, the way how the `DebuggerDisplay` and `DebuggerTypeProxy` attributes are tested do not work well with sharing. The [test method](https://github.com/dotnet/runtime/blob/1a1485138a92e01b2b90f8af0b19e169b7fb2f3a/src/libraries/Common/tests/System/Collections/DebugView.Tests.cs#L71) looks for equality of classes used internally to implement the debug view functionality. I started to investigate a solution with `InternalsVisibleTo` because I planned to create my instances of internal debug type proxy for this equality check.\r\n\r\nIMO using a library that returns a simplified debug view model for a given object (similar to the way VS debugger does it internally) would be a much better solution. No references to internal classes would be needed and verification could also cover other aspects of using these attributes, including the way how all names, values and types are formatted. If you know any solution or a library which can provide such functionality and can be used in this project to test debug views, please let me know. Otherwise, I\u0027ll try to find some other way to solve this testing problem.\r\n\r\n",
                                           "updatedAt":  "2023-10-10T19:23:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5orN4-",
                                           "createdAt":  "2023-10-10T20:17:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We use reflection to test internal types like debugger proxies.",
                                           "updatedAt":  "2023-10-10T20:17:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q_ZLO",
                                           "createdAt":  "2023-11-06T14:49:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "For this specific crash, it\u0027s actually a bug in basically the design of IL2121 (detection of redundant suppressions).\r\n\r\nWhat happens here is:\r\n* Method `Internal.Runtime.InteropServices.ComActivator.GetClassFactoryForTypeInContext` is `UnmanagedCallersOnly` and is not rooted. This is basically a bug in the sfx project - it runs the trimmer without any feature switches, so we don\u0027t check code which is hidden behind some feature switch - even that code should not produce warnings internally, it should all be annotated as necessary. It should be rooted by a descriptor.\r\n* This method is private, so we don\u0027t keep it in the library mode (which keeps everything public/internal)\r\n* It calls a local function, which get translated into `\u003cGetClassFactoryForTypeInContext\u003eg__GetClassFactoryForTypeLocal|5_0`. This method is `internal`! So the library mode roots it. No idea why Roslyn generates a local function for a private method as internal, that feels wrong.\r\n* In OutputStep the trimmer removes the UCO method and only leaves the local function.\r\n* We generate IL2121 for the local function - I don\u0027t know yet why this happens, the suppressions there seem to be correct, but it\u0027s pretty complicated with some suppressions added via XMLs.\r\n* Now we try to determine if IL2121 is itself suppressed on the local function - for this we walk the \"scope\" stack, so we look at the UCO method as that is the owning scope for the local function. And then we try to go to the owning type of the UCO - but that fails as that reference is `null`. The UCO has been removed from its parent\u0027s type as it\u0027s been trimmed - so it has no parent type.\r\n\r\nThe design flaw is that this is technically a valid situation to get into - the trimmer may be forced into keeping compiler generated methods for some reason, without keeping their respective scopes (user defined methods). Such configuration should always produce warnings, but those may be suppressed or ignored, it should not crash the trimmer.\r\n\r\nThe simplest fix is probably to make the `IsWarningSuppressed` robust to nulls (again, not having Cecil null annotated bites us). It can play it safe and if it can\u0027t find the owner type, just assume the warning is not suppressed there - it\u0027s unlikely to happy in otherwise warning free scenarios (I can\u0027t think of a case where this should happen without warnings).",
                                           "updatedAt":  "2023-11-06T14:49:36Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[ILLink]: Using InternalsVisibleTo in System.Private.CoreLib breaks a runtime build",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93416",
        "createdAt":  "2023-10-12T21:01:32Z",
        "number":  93416,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-10T16:30:41Z",
        "body":  "```csharp\r\n        var arr = new Type[] { GetMethods() };\r\n        var arr2 = new Type[] { GetFields() };\r\n        if (b)\r\n            arr = arr2;\r\n        RequiresAll(arr[0]);\r\n```\r\nILLink/ILCompiler treat reads of merged array values as an unknown value, producing IL2062:\r\n```\r\nTrim analysis warning IL2062: Program.Test(Boolean): Value passed to parameter \u0027t\u0027 of method \u0027Program.RequiresAll(Type)\u0027 can not be statically determined and may not meet \u0027DynamicallyAccessedMembersAttribute\u0027 requirements.\r\n```\r\n\r\nThe ILLink analyzer instead treats this as a merged value that may have come from either array, producing two instances of IL2072:\r\n```\r\nwarning IL2072: \u0027t\u0027 argument does not satisfy \u0027DynamicallyAccessedMemberTypes.All\u0027 in call to \u0027Program.RequiresAll(Type)\u0027. The return value of method \u0027Program.GetMethods()\u0027 does not have matching annotations. The source value must declare at least the same requirements as those declared on the target location it is assigned to. [/Users/sven/src/test-apps/array/array.csproj]\r\nwarning IL2072: \u0027t\u0027 argument does not satisfy \u0027DynamicallyAccessedMemberTypes.All\u0027 in call to \u0027Program.RequiresAll(Type)\u0027. The return value of method \u0027Program.GetFields()\u0027 does not have matching annotations. The source value must declare at least the same requirements as those declared on the target location it is assigned to.\r\n```\r\n\r\nWe should unify these behaviors. Related to https://github.com/dotnet/linker/issues/2680 which is about unifying the array tracking \"reset\" behavior across analyzer/ILLink.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhsv3Rg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5pMTje",
                                           "createdAt":  "2023-10-16T16:18:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```csharp\r\n        var arr = new Type[] { GetMethods() };\r\n        var arr2 = new Type[] { GetFields() };\r\n        if (b)\r\n            arr = arr2;\r\n        RequiresAll(arr[0]);\r\n```\r\nILLink/ILCompiler treat reads of merged array values as an unknown value, producing IL2062:\r\n```\r\nTrim analysis warning IL2062: Program.Test(Boolean): Value passed to parameter \u0027t\u0027 of method \u0027Program.RequiresAll(Type)\u0027 can not be statically determined and may not meet \u0027DynamicallyAccessedMembersAttribute\u0027 requirements.\r\n```\r\n\r\nThe ILLink analyzer instead treats this as a merged value that may have come from either array, producing two instances of IL2072:\r\n```\r\nwarning IL2072: \u0027t\u0027 argument does not satisfy \u0027DynamicallyAccessedMemberTypes.All\u0027 in call to \u0027Program.RequiresAll(Type)\u0027. The return value of method \u0027Program.GetMethods()\u0027 does not have matching annotations. The source value must declare at least the same requirements as those declared on the target location it is assigned to. [/Users/sven/src/test-apps/array/array.csproj]\r\nwarning IL2072: \u0027t\u0027 argument does not satisfy \u0027DynamicallyAccessedMemberTypes.All\u0027 in call to \u0027Program.RequiresAll(Type)\u0027. The return value of method \u0027Program.GetFields()\u0027 does not have matching annotations. The source value must declare at least the same requirements as those declared on the target location it is assigned to.\r\n```\r\n\r\nWe should unify these behaviors. Related to https://github.com/dotnet/linker/issues/2680 which is about unifying the array tracking \"reset\" behavior across analyzer/ILLink.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esbomer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Tools-ILLink`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-16T16:18:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Gy_dG",
                                           "createdAt":  "2024-07-31T21:45:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Same bucket as https://github.com/dotnet/runtime/issues/90335, this requires a rework of the way we track arrays.",
                                           "updatedAt":  "2024-07-31T21:45:12Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Different warning behavior for read of merged array in analyzer/ILLink/ILCompiler",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93453",
        "createdAt":  "2023-10-13T09:07:30Z",
        "number":  93453,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-15T22:00:31Z",
        "body":  "Especially when annotating libraries for trim/AOT compatibility, developers rely heavily on the trim analyzer. Unfortunately, it also means that suppressing warnings can be done via `SuppressMessage` attribute and `#pragma warning disable`. Both of those are on most cases wrong as the suppression will not make it into the final IL and thus it won\u0027t be visible by the trimmer/AOT compiler.\r\n\r\nWe should investigate if there\u0027s some way we can detect these cases and guide developers to use `UnconditionalSuppressMessage` instead.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaPltEA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5o-W0Q",
                                           "createdAt":  "2023-10-13T09:07:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nEspecially when annotating libraries for trim/AOT compatibility, developers rely heavily on the trim analyzer. Unfortunately, it also means that suppressing warnings can be done via `SuppressMessage` attribute and `#pragma warning disable`. Both of those are on most cases wrong as the suppression will not make it into the final IL and thus it won\u0027t be visible by the trimmer/AOT compiler.\r\n\r\nWe should investigate if there\u0027s some way we can detect these cases and guide developers to use `UnconditionalSuppressMessage` instead.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-13T09:07:35Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Trimming: Investigate if we can provide an analyzer which guides people to use `UnconditionalSuppressMessage`",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93800",
        "createdAt":  "2023-10-20T22:15:28Z",
        "number":  93800,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-05T21:35:49Z",
        "body":  "Repro:\r\n\r\n`dotnet new console`\r\n\r\n`app.csproj`:\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n    \u003cPropertyGroup\u003e\r\n        \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n        \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n        \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n        \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n        \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\r\n        \u003cWarningsAsErrors\u003efalse\u003c/WarningsAsErrors\u003e\r\n        \u003cNoWarn\u003eNU1605;NU1603;NU1701\u003c/NoWarn\u003e\r\n        \u003cTrimmerSingleWarn\u003efalse\u003c/TrimmerSingleWarn\u003e\r\n    \u003c/PropertyGroup\u003e\r\n\r\n    \u003cItemGroup\u003e\r\n        \u003cTrimmerRootAssembly Include=\"AltV.Net.Shared\" /\u003e\r\n\r\n        \u003cPackageReference Include=\"AltV.Net.Shared\" Version=\"14.0.2-dev\" /\u003e\r\n    \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n`dotnet publish`\r\n\r\nStacktrace from the build:\r\n```\r\n  Unhandled exception. System.FormatException: Index (zero based) must be greater than or equal to zero and less than t\r\n  he size of the argument list.\r\n     at System.Text.ValueStringBuilder.AppendFormatHelper(IFormatProvider provider, String format, ReadOnlySpan`1 args)\r\n     at System.String.FormatHelper(IFormatProvider provider, String format, ReadOnlySpan`1 args)\r\n     at System.String.Format(String format, Object[] args)\r\n     at ILLink.Shared.DiagnosticString.GetMessage(String[] args)\r\n     at Mono.Linker.MessageContainer..ctor(MessageCategory category, DiagnosticId id, String subcategory, Nullable`1 or\r\n  igin, String[] args)\r\n     at Mono.Linker.MessageContainer.CreateWarningMessageContainer(LinkContext context, MessageOrigin origin, Diagnosti\r\n  cId id, WarnVersion version, String subcategory, String[] args)\r\n     at Mono.Linker.MessageContainer.CreateWarningMessage(LinkContext context, MessageOrigin origin, DiagnosticId id, W\r\n  arnVersion version, String[] args)\r\n     at Mono.Linker.LinkContext.LogWarning(MessageOrigin origin, DiagnosticId id, String[] args)\r\n     at ILLink.Shared.TrimAnalysis.DiagnosticContext.AddDiagnostic(DiagnosticId id, String[] args)\r\n     at ILLink.Shared.TrimAnalysis.DiagnosticContext.AddDiagnostic(DiagnosticId id, ValueWithDynamicallyAccessedMembers\r\n   actualValue, ValueWithDynamicallyAccessedMembers expectedAnnotationsValue, String[] args)\r\n     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ValueSet`1\u0026 value, ValueWithDynamical\r\n  lyAccessedMembers targetValue)\r\n```\r\n\r\n/cc @LakshanF ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOa63WIA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ptNpa",
                                           "createdAt":  "2023-10-20T22:15:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRepro:\r\n\r\n`dotnet new console`\r\n\r\n`app.csproj`:\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n    \u003cPropertyGroup\u003e\r\n        \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n        \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n        \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n        \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n        \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\r\n        \u003cWarningsAsErrors\u003efalse\u003c/WarningsAsErrors\u003e\r\n        \u003cNoWarn\u003eNU1605;NU1603;NU1701\u003c/NoWarn\u003e\r\n        \u003cTrimmerSingleWarn\u003efalse\u003c/TrimmerSingleWarn\u003e\r\n    \u003c/PropertyGroup\u003e\r\n\r\n    \u003cItemGroup\u003e\r\n        \u003cTrimmerRootAssembly Include=\"AltV.Net.Shared\" /\u003e\r\n\r\n        \u003cPackageReference Include=\"AltV.Net.Shared\" Version=\"14.0.2-dev\" /\u003e\r\n    \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n`dotnet publish`\r\n\r\nStacktrace from the build:\r\n```\r\n  Unhandled exception. System.FormatException: Index (zero based) must be greater than or equal to zero and less than t\r\n  he size of the argument list.\r\n     at System.Text.ValueStringBuilder.AppendFormatHelper(IFormatProvider provider, String format, ReadOnlySpan`1 args)\r\n     at System.String.FormatHelper(IFormatProvider provider, String format, ReadOnlySpan`1 args)\r\n     at System.String.Format(String format, Object[] args)\r\n     at ILLink.Shared.DiagnosticString.GetMessage(String[] args)\r\n     at Mono.Linker.MessageContainer..ctor(MessageCategory category, DiagnosticId id, String subcategory, Nullable`1 or\r\n  igin, String[] args)\r\n     at Mono.Linker.MessageContainer.CreateWarningMessageContainer(LinkContext context, MessageOrigin origin, Diagnosti\r\n  cId id, WarnVersion version, String subcategory, String[] args)\r\n     at Mono.Linker.MessageContainer.CreateWarningMessage(LinkContext context, MessageOrigin origin, DiagnosticId id, W\r\n  arnVersion version, String[] args)\r\n     at Mono.Linker.LinkContext.LogWarning(MessageOrigin origin, DiagnosticId id, String[] args)\r\n     at ILLink.Shared.TrimAnalysis.DiagnosticContext.AddDiagnostic(DiagnosticId id, String[] args)\r\n     at ILLink.Shared.TrimAnalysis.DiagnosticContext.AddDiagnostic(DiagnosticId id, ValueWithDynamicallyAccessedMembers\r\n   actualValue, ValueWithDynamicallyAccessedMembers expectedAnnotationsValue, String[] args)\r\n     at ILLink.Shared.TrimAnalysis.RequireDynamicallyAccessedMembersAction.Invoke(ValueSet`1\u0026 value, ValueWithDynamical\r\n  lyAccessedMembers targetValue)\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-20T22:15:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rrarF",
                                           "createdAt":  "2023-11-10T23:05:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Simple repro:\r\n```csharp\r\n\t\tstatic Type UnannotatedField;\r\n\r\n\t\tstatic void MakeGenericNullableOfUnannotatedFieldRequiresPublicProperties ()\r\n\t\t{\r\n                        // Expected IL2087 (currently)\r\n\t\t\ttypeof (Nullable\u003c\u003e).MakeGenericType (UnannotatedField).RequiresPublicProperties ();\r\n\t\t}\r\n\r\n```\r\n\r\nThe bug is in https://github.com/dotnet/runtime/blob/7c8fff93d1ecba121f27b8f3f231dced84618a3f/src/tools/illink/src/ILLink.Shared/Annotations.cs#L114-L118\r\n\r\nThe code which maps the source/target pair values to the Diagnostic ID treats `NullableValueWithDynamicallyAccessedMembers` the same as `GenericParameterValue` - assigns the same diag IDs for them. The messages with these IDs expect that the source value will have 2 arguments for the formatted message, because `GenericParameterValue` has two (The name of the generic parameter and the containing symbol name).\r\nBut `NullableValueWithDynamicallyAccessedMembers` doesn\u0027t produce the arguments itself, it simply forwards the call to the underlying (non-nullable) value. Which can be pretty much anything. Most values do produce 2 arguments, but `FieldValue` doesn\u0027t, it only produces the full name of the field.\r\nIf this happens we fail with the above exception because we provide one less argument to the formatted message.\r\n\r\nThis is wrong because the formatted message will not make any sense. For example:\r\n```csharp\r\nvoid DoIt(Type p1)\r\n{\r\n    typeof(Nullable\u003c\u003e).MakeGenericType(p1).GetProperties();\r\n}\r\n```\r\n\r\nWill produce:\r\n```\r\nwarning IL2090: \u0027this\u0027 argument does not satisfy \u0027DynamicallyAccessedMemberTypes.PublicProperties\u0027 in call to \u0027System.Type.GetProperties()\u0027. The generic parameter \u0027p1\u0027 of \u0027DoIt(Type)\u0027 does not have matching annotations.\r\n```\r\n\r\nSpecifically `The generic parameter \u0027p1\u0027 of \u0027DoIt(Type)\u0027 does not have matching annotations.` makes no sense - `p1` is not a generic parameter and the method is not generic either.\r\n\r\nI think the correct behavior is to unwrap `NullableValueWithDynamicallyAccessedMembers` for the purposes of creating diag messages - the `Nullable\u003c\u003e` itself doesn\u0027t affect data flow, we intentionally treat it completely transparently, so the error comes from whatever it\u0027s wrapping - we should report it as such.",
                                           "updatedAt":  "2023-11-10T23:05:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rrdFZ",
                                           "createdAt":  "2023-11-10T23:20:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The problem with the proposed fix is, that it would change warning codes reported for these cases. Which is a breaking change.\r\nAlternatively, we could produce a warning with the old warning code but with the right message, but that comes with:\r\n* Non-trivial changes to the code (we\u0027re not setup to lie about the warning code)\r\n* Our docs page for the warning code would be wrong in this case.\r\n\r\nI think we do need to fix this, as in, we must not crash the trimmer in this case.\r\n\r\nOne last alternative would be to special case this specific situation (nullable over field) and in that case produce a warning with a different code.\r\n\r\nCurrent behavior:\r\n* Trimmer - crashes as described in this issue\r\n* NativeAOT - crashes with basically the same exception (the bug is in the shared code)\r\n* Analyzer - doesn\u0027t crash, but produces unformatted message: `\u0027this\u0027 argument does not satisfy {3} in call to \u0027{0}\u0027. The generic parameter \u0027{1}\u0027 of \u0027{2}\u0027 does not have matching annotations.`\r\n\r\nBecause of this, the specific case with nullable over field is basically not used in 8 - The only way to get the warning is in analyzer, both trimmer and AOT won\u0027t produce it (they crash). So changing the warning code in this specific case might be acceptable, as it\u0027s basically a change from crash to working.\r\n\r\nUnfortunately this would mean we leave the other cases with wrong messages (see above).",
                                           "updatedAt":  "2023-11-10T23:20:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rrdYg",
                                           "createdAt":  "2023-11-10T23:22:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Note that we\u0027ve shipped this in 7.0 trimmer already, so rushing a real fix into 8.0 servicing would not reduce the potential impact of the breaking change.",
                                           "updatedAt":  "2023-11-10T23:22:52Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "ILLink: FormatException when building a diagnostic message",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93802",
        "createdAt":  "2023-10-20T22:20:29Z",
        "number":  93802,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-10T17:45:00Z",
        "body":  "Repro:\r\n\r\n`dotnet new console`\r\n\r\n`app.csproj`:\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n    \u003cPropertyGroup\u003e\r\n        \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n        \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n        \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n        \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n        \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\r\n        \u003cWarningsAsErrors\u003efalse\u003c/WarningsAsErrors\u003e\r\n        \u003cNoWarn\u003eNU1605;NU1603;NU1701\u003c/NoWarn\u003e\r\n    \u003c/PropertyGroup\u003e\r\n\r\n    \u003cItemGroup\u003e\r\n        \u003cTrimmerRootAssembly Include=\"Kodeo.Doctum.Test\" /\u003e\r\n\r\n        \u003cPackageReference Include=\"Kodeo.Doctum.Test\" Version=\"6.0.0-beta008\" /\u003e\r\n    \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n`dotnet publish`\r\n\r\nStack trace:\r\n```\r\n  Unhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Pa\r\n  rameter \u0027target\u0027)\r\n     at Mono.Cecil.Cil.ILProcessor.InsertAfter(Instruction target, Instruction instruction)\r\n     at Mono.Linker.LinkerILProcessor.InsertAfter(Instruction target, Instruction instruction)\r\n     at Mono.Linker.Steps.MarkStep.ProcessPendingTypeChecks()\r\n     at Mono.Linker.Steps.MarkStep.Process()\r\n```\r\n\r\n/cc @LakshanF ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsG_xHQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ptOa3",
                                           "createdAt":  "2023-10-20T22:20:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRepro:\r\n\r\n`dotnet new console`\r\n\r\n`app.csproj`:\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n    \u003cPropertyGroup\u003e\r\n        \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n        \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n        \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n        \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n        \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\r\n        \u003cWarningsAsErrors\u003efalse\u003c/WarningsAsErrors\u003e\r\n        \u003cNoWarn\u003eNU1605;NU1603;NU1701\u003c/NoWarn\u003e\r\n    \u003c/PropertyGroup\u003e\r\n\r\n    \u003cItemGroup\u003e\r\n        \u003cTrimmerRootAssembly Include=\"Kodeo.Doctum.Test\" /\u003e\r\n\r\n        \u003cPackageReference Include=\"Kodeo.Doctum.Test\" Version=\"6.0.0-beta008\" /\u003e\r\n    \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n`dotnet publish`\r\n\r\nStack trace:\r\n```\r\n  Unhandled exception. System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. (Pa\r\n  rameter \u0027target\u0027)\r\n     at Mono.Cecil.Cil.ILProcessor.InsertAfter(Instruction target, Instruction instruction)\r\n     at Mono.Linker.LinkerILProcessor.InsertAfter(Instruction target, Instruction instruction)\r\n     at Mono.Linker.Steps.MarkStep.ProcessPendingTypeChecks()\r\n     at Mono.Linker.Steps.MarkStep.Process()\r\n```\r\n\r\n/cc @LakshanF \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-20T22:20:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CJmmj",
                                           "createdAt":  "2024-06-21T22:49:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "In Debug builds, this repro hits an assert:\r\n```\r\nProcess terminated. Assertion failed.\r\n   at Mono.Linker.Dataflow.CompilerGeneratedCallGraph.TrackCall(MethodDefinition fromMethod, TypeDefinition toType) in /home/svbomer/src/runtime/src/tools/illink/src/linker/Linker.Dataflow/CompilerGeneratedCallGraph.cs:line 33\r\n   at Mono.Linker.Dataflow.CompilerGeneratedState.\u003cGetCompilerGeneratedStateForType\u003eg__ProcessMethod|11_0(MethodDefinition method, \u003c\u003ec__DisplayClass11_0\u0026) in /home/svbomer/src/runtime/src/tools/illink/src/linker/Linker.Dataflow/CompilerGeneratedState.cs:line 212\r\n   at Mono.Linker.Dataflow.CompilerGeneratedState.GetCompilerGeneratedStateForType(TypeDefinition type) in /home/svbomer/src/runtime/src/tools/illink/src/linker/Linker.Dataflow/CompilerGeneratedState.cs:line 226\r\n   at Mono.Linker.Dataflow.CompilerGeneratedState.TryGetCompilerGeneratedCalleesForUserMethod(MethodDefinition method, List`1\u0026 callees) in /home/svbomer/src/runtime/src/tools/illink/src/linker/Linker.Dataflow/CompilerGeneratedState.cs:line 435\r\n   at Mono.Linker.Steps.MarkStep.MarkReflectionLikeDependencies(MethodIL methodIL, Boolean requiresReflectionMethodBodyScanner, MessageOrigin origin) in /home/svbomer/src/runtime/src/tools/illink/src/linker/Linker.Steps/MarkStep.cs:line 3786\r\n   at Mono.Linker.Steps.MarkStep.MarkMethodBody(MethodBody body, MessageOrigin origin) in /home/svbomer/src/runtime/src/tools/illink/src/linker/Linker.Steps/MarkStep.cs:line 3549\r\n   at Mono.Linker.Steps.MarkStep.ProcessMethod(MethodDefinition method, DependencyInfo\u0026 reason) in /home/svbomer/src/runtime/src/tools/illink/src/linker/Linker.Steps/MarkStep.cs:line 3221\r\n   at Mono.Linker.Steps.MarkStep.MethodDefinitionNode.GetStaticDependencies(NodeFactory context) in /home/svbomer/src/runtime/src/tools/illink/src/linker/Linker.Steps/MarkStep.MethodDefinitionNode.cs:line 34\r\n   at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.GetStaticDependenciesImpl(DependencyNodeCore`1 node) in /home/svbomer/src/runtime/src/coreclr/tools/aot/ILCompiler.DependencyAnalysisFramework/DependencyAnalyzer.cs:line 182\r\n   at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.GetStaticDependencies(DependencyNodeCore`1 node) in /home/svbomer/src/runtime/src/coreclr/tools/aot/ILCompiler.DependencyAnalysisFramework/DependencyAnalyzer.cs:line 222\r\n   at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ProcessMarkStack() in /home/svbomer/src/runtime/src/coreclr/tools/aot/ILCompiler.DependencyAnalysisFramework/DependencyAnalyzer.cs:line 257\r\n   at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes() in /home/svbomer/src/runtime/src/coreclr/tools/aot/ILCompiler.DependencyAnalysisFramework/DependencyAnalyzer.cs:line 308\r\n   at Mono.Linker.Steps.MarkStep.Process() in /home/svbomer/src/runtime/src/tools/illink/src/linker/Linker.Steps/MarkStep.cs:line 369\r\n   at Mono.Linker.Steps.MarkStep.Process(LinkContext context) in /home/svbomer/src/runtime/src/tools/illink/src/linker/Linker.Steps/MarkStep.cs:line 243\r\n   at Mono.Linker.Pipeline.ProcessStep(LinkContext context, IStep step) in /home/svbomer/src/runtime/src/tools/illink/src/linker/Linker/Pipeline.cs:line 178\r\n   at Mono.Linker.Pipeline.Process(LinkContext context) in /home/svbomer/src/runtime/src/tools/illink/src/linker/Linker/Pipeline.cs:line 167\r\n   at Mono.Linker.Driver.Run(ILogger customLogger) in /home/svbomer/src/runtime/src/tools/illink/src/linker/Linker/Driver.cs:line 843\r\n   at Mono.Linker.Driver.Main(String[] args) in /home/svbomer/src/runtime/src/tools/illink/src/linker/Linker/Driver.cs:line 68\r\n```\r\n\r\nIt\u0027s asserting because there\u0027s an async state machine type that doesn\u0027t match the expected compiler-generated names. The method\r\n```\r\nSystem.Void Kodeo.Doctum.CodeCheck::Requires(System.Threading.Tasks.Task`1\u003cSystem.Boolean\u003e,System.String)\r\n```\r\nhas an AsyncStateMachineAttribute that points to the type `Kodeo.Doctum.CodeCheck/c`.",
                                           "updatedAt":  "2024-06-21T22:57:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CJuyt",
                                           "createdAt":  "2024-06-21T23:51:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Found the problem:\r\n- There\u0027s a compiler-generated state machine method `System.Void Kodeo.Doctum.EntityFramework.Extensions/g::a()`, which is the `MoveNext` of an async state machine.\r\n- By design, MarkAndCheckRequiresReflectionMethodBodyScanner may be called multiple times for compiler-generated methods:\r\n  https://github.com/dotnet/runtime/blob/2b5c5422b8359716fc0d5766487ea1a6527d7472/src/tools/illink/src/linker/Linker.Steps/MarkStep.cs#L3597-L3601\r\n  (In this case once when it\u0027s analyzed as part of user code, and once as an override of `IAsyncStateMachine::MoveNext`.)\r\n- We normally cache the result to make MarkAndCheckRequiresReflectionMethodBodyScanner idempotent. The caching only happens for compiler-generated methods:\r\n  https://github.com/dotnet/runtime/blob/2b5c5422b8359716fc0d5766487ea1a6527d7472/src/tools/illink/src/linker/Linker.Steps/MarkStep.cs#L3618-L3619\r\n- Since `g::a()` doesn\u0027t match the compiler-generated names we look for, it\u0027s not cached:\r\n   https://github.com/dotnet/runtime/blob/2b5c5422b8359716fc0d5766487ea1a6527d7472/src/tools/illink/src/linker/Linker.Dataflow/CompilerGeneratedNames.cs#L23-L35\r\n- As a result, we process instructions of this method multiple times. We double-track some `isinst` instructions that we can potentially remove, and later try to remove them twice from the same method, causing the crash.\r\n\r\nThe fix will be to somehow make MarkAndCheckRequiresReflectionMethodBodyScanner idempotent for the method in question, despite it not matching the expected name mangling scheme.",
                                           "updatedAt":  "2024-06-24T17:33:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CQJ-2",
                                           "createdAt":  "2024-06-23T19:08:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "That looks like obfuscated code - if that\u0027s the case we should probably close it. None of our compiler generated code logic will work when it\u0027s renamed/obfuscated.",
                                           "updatedAt":  "2024-06-23T19:08:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wb_Ed",
                                           "createdAt":  "2025-06-10T17:44:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Not a high priority since we don\u0027t support obfuscated code - but I think we should at least avoid crashing on this kind of input.",
                                           "updatedAt":  "2025-06-10T17:44:55Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "ILLink: ArgumentOutOfRangeException in ILProcessor",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93803",
        "createdAt":  "2023-10-20T22:27:50Z",
        "number":  93803,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-05T21:35:57Z",
        "body":  "Repro:\r\n\r\n`dotnet new console`\r\n\r\n`app.csproj`:\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n    \u003cPropertyGroup\u003e\r\n        \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n        \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n        \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n        \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n        \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\r\n        \u003cWarningsAsErrors\u003efalse\u003c/WarningsAsErrors\u003e\r\n        \u003cNoWarn\u003eNU1605;NU1603;NU1701\u003c/NoWarn\u003e\r\n    \u003c/PropertyGroup\u003e\r\n\r\n    \u003cItemGroup\u003e\r\n        \u003cTrimmerRootAssembly Include=\"Microsoft.EntityFrameworkCore.Specification.Tests\" /\u003e\r\n\r\n        \u003cPackageReference Include=\"Microsoft.EntityFrameworkCore.Specification.Tests\" Version=\"6.0.0-preview.5.21301.9\" /\u003e\r\n    \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n`dotnet publish`\r\n\r\nStack trace:\r\n```\r\nStackOverFlowException:\r\n     at System.Collections.Generic.HashSet`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Add(System.__Canon)\r\n     at Mono.Linker.LinkContext.GetMethodIL(Mono.Cecil.MethodDefinition)\r\n     at Mono.Linker.LinkContext.GetMethodIL(Mono.Cecil.Cil.MethodBody)\r\n     at Mono.Linker.Dataflow.CompilerGeneratedState.\u003cGetCompilerGeneratedStateForType\u003eg__ScanForInit|11_2(Mono.Cecil.TypeDefinition, Mono.Cecil.Cil.MethodBody, \r\n    ...\r\n     at Mono.Linker.Dataflow.CompilerGeneratedState.GetCompilerGeneratedStateForType(Mono.Cecil.TypeDefinition)\r\n     at Mono.Linker.Dataflow.CompilerGeneratedState.GetGeneratedTypeAttributes(Mono.Cecil.TypeDefinition)\r\n     at ILLink.Shared.TrimAnalysis.FlowAnnotations.GetGeneratedTypeAttributes(Mono.Cecil.TypeDefinition)\r\n     at ILLink.Shared.TrimAnalysis.FlowAnnotations.BuildTypeAnnotations(Mono.Cecil.TypeDefinition)\r\n     at ILLink.Shared.TrimAnalysis.FlowAnnotations.GetAnnotations(Mono.Cecil.TypeDefinition)\r\n```\r\n\r\n/cc @LakshanF ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOabT6Gw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ptPob",
                                           "createdAt":  "2023-10-20T22:27:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRepro:\r\n\r\n`dotnet new console`\r\n\r\n`app.csproj`:\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n    \u003cPropertyGroup\u003e\r\n        \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n        \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n        \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n        \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n        \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\r\n        \u003cWarningsAsErrors\u003efalse\u003c/WarningsAsErrors\u003e\r\n        \u003cNoWarn\u003eNU1605;NU1603;NU1701\u003c/NoWarn\u003e\r\n    \u003c/PropertyGroup\u003e\r\n\r\n    \u003cItemGroup\u003e\r\n        \u003cTrimmerRootAssembly Include=\"Microsoft.EntityFrameworkCore.Specification.Tests\" /\u003e\r\n\r\n        \u003cPackageReference Include=\"Microsoft.EntityFrameworkCore.Specification.Tests\" Version=\"6.0.0-preview.5.21301.9\" /\u003e\r\n    \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n`dotnet publish`\r\n\r\nStack trace:\r\n```\r\nStackOverFlowException:\r\n     at System.Collections.Generic.HashSet`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Add(System.__Canon)\r\n     at Mono.Linker.LinkContext.GetMethodIL(Mono.Cecil.MethodDefinition)\r\n     at Mono.Linker.LinkContext.GetMethodIL(Mono.Cecil.Cil.MethodBody)\r\n     at Mono.Linker.Dataflow.CompilerGeneratedState.\u003cGetCompilerGeneratedStateForType\u003eg__ScanForInit|11_2(Mono.Cecil.TypeDefinition, Mono.Cecil.Cil.MethodBody, \r\n    ...\r\n     at Mono.Linker.Dataflow.CompilerGeneratedState.GetCompilerGeneratedStateForType(Mono.Cecil.TypeDefinition)\r\n     at Mono.Linker.Dataflow.CompilerGeneratedState.GetGeneratedTypeAttributes(Mono.Cecil.TypeDefinition)\r\n     at ILLink.Shared.TrimAnalysis.FlowAnnotations.GetGeneratedTypeAttributes(Mono.Cecil.TypeDefinition)\r\n     at ILLink.Shared.TrimAnalysis.FlowAnnotations.BuildTypeAnnotations(Mono.Cecil.TypeDefinition)\r\n     at ILLink.Shared.TrimAnalysis.FlowAnnotations.GetAnnotations(Mono.Cecil.TypeDefinition)\r\n```\r\n\r\n/cc @LakshanF \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evitek-karas\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-20T22:27:54Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ILLink: stack overflow when handling type parameters in compiler generated code",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94131",
        "createdAt":  "2023-10-28T08:45:29Z",
        "number":  94131,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCzntLg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2023-10-28T09:15:45Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-10T16:19:31Z",
        "body":  "We currently have a gap that generic cycles will get reported by the AOT compiler when ran into, but the analyzer doesn\u0027t look for them.\r\n\r\nIn the general case, the cycle could form across multiple assemblies and a Roslyn analyzer will never see such cycle. In practice, whenever I saw such cycle, it was within a single assembly. So maybe we don\u0027t need perfect, a good enough is fine.\r\n\r\nWe should reuse the cycle detector from the AOT compiler. It was originally ported from .NET Native. I don\u0027t even know how it works, I just made it build and hooked it up: https://github.com/dotnet/runtimelab/pull/1681 (notice first commit is just adding files from .NET Native and the next commit just replaces CCI with the managed type system).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOalHeYQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5qUd5h",
                                           "createdAt":  "2023-10-28T08:45:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe currently have a gap that generic cycles will get reported by the AOT compiler when ran into, but the analyzer doesn\u0027t look for them.\r\n\r\nIn the general case, the cycle could form across multiple assemblies and a Roslyn analyzer will never see such cycle. In practice, whenever I saw such cycle, it was within a single assembly. So maybe we don\u0027t need perfect, a good enough is fine.\r\n\r\nWe should reuse the cycle detector from the AOT compiler. It was originally ported from .NET Native. I don\u0027t even know how it works, I just made it build and hooked it up: https://github.com/dotnet/runtimelab/pull/1681 (notice first commit is just adding files from .NET Native and the next commit just replaces CCI with the managed type system).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-28T08:45:32Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Detect generic cycles in the Roslyn analyzer",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94312",
        "createdAt":  "2023-11-02T19:18:17Z",
        "number":  94312,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-25T17:17:34Z",
        "body":  "The ILLink RoslynAnalyzer has various types such as `TrimAnalysisMethodCallPattern` and `TrimAnalysisFieldAccessPattern` used to track relevant \"patterns\" that may produce dataflow warnings. Tracking such values is potentially expensive, especially now that we do it even for values which may not be relevant for dataflow, just to track their types, after https://github.com/dotnet/runtime/pull/93732.\r\n\r\nOn top of that, https://github.com/dotnet/runtime/pull/94123 is introducing additional context to the tracked patterns to track the \"feature context\" of the invocation/field access/etc.\r\n\r\nWe should investigate the performance of this approach and consider ways to optimize it.\r\n\r\nContext: https://github.com/dotnet/runtime/pull/94123#discussion_r1379978033\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOatNOiA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5qxrM8",
                                           "createdAt":  "2023-11-02T19:18:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-meta\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe ILLink RoslynAnalyzer has various types such as `TrimAnalysisMethodCallPattern` and `TrimAnalysisFieldAccessPattern` used to track relevant \"patterns\" that may produce dataflow warnings. Tracking such values is potentially expensive, especially now that we do it even for values which may not be relevant for dataflow, just to track their types, after https://github.com/dotnet/runtime/pull/93732.\r\n\r\nWe should investigate the performance of this approach and consider ways to optimize it.\r\n\r\nContext: https://github.com/dotnet/runtime/pull/94123#discussion_r1379978033\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esbomer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Meta`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-02T19:18:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5q006I",
                                           "createdAt":  "2023-11-03T10:53:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe ILLink RoslynAnalyzer has various types such as `TrimAnalysisMethodCallPattern` and `TrimAnalysisFieldAccessPattern` used to track relevant \"patterns\" that may produce dataflow warnings. Tracking such values is potentially expensive, especially now that we do it even for values which may not be relevant for dataflow, just to track their types, after https://github.com/dotnet/runtime/pull/93732.\r\n\r\nOn top of that, https://github.com/dotnet/runtime/pull/94123 is introducing additional context to the tracked patterns to track the \"feature context\" of the invocation/field access/etc.\r\n\r\nWe should investigate the performance of this approach and consider ways to optimize it.\r\n\r\nContext: https://github.com/dotnet/runtime/pull/94123#discussion_r1379978033\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esbomer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Meta`, `untriaged`, `area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-03T10:53:49Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Investigate/optimize performance of TrimAnalysisPatterns tracked by ILLink Roslyn analyzer",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94427",
        "createdAt":  "2023-11-06T18:27:01Z",
        "number":  94427,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-12T20:24:50Z",
        "body":  "The ILLink Roslyn Analyzer has some logic to handle dynamic object invocations, producing RequiresUnreferencedCode warnings, for example:\r\n```csharp\r\ndynamic s = \"hello\";\r\ns.DoSomething();\r\n```\r\n\r\nThis produces `IL2026` at the callsite.\r\n\r\nThis compiles into something like the following:\r\n```csharp\r\n        object arg = \"hello\";\r\n        if (\u003c\u003eo__0.\u003c\u003ep__0 == null)\r\n        {\r\n            Type typeFromHandle = typeof(C);\r\n            CSharpArgumentInfo[] array = new CSharpArgumentInfo[1];\r\n            array[0] = CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null);\r\n            \u003c\u003eo__0.\u003c\u003ep__0 = CallSite\u003cAction\u003cCallSite, object\u003e\u003e.Create(Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, \"DoSomething\", null, typeFromHandle, array));\r\n        }\r\n        \u003c\u003eo__0.\u003c\u003ep__0.Target(\u003c\u003eo__0.\u003c\u003ep__0, arg);\r\n```\r\n\r\nILLink also produces IL2026 due to InvokeMember being annotated with RequiresUnreferencedCode.\r\n\r\nILCompiler additionaly produces IL3050 due to CallSite.Create being annotated with RequiresDynamicCode. We should consider ways to produce the same warning in the ILLink Roslyn analyzer.\r\n\r\nhttps://github.com/dotnet/runtime/pull/94236 is improving the analyzer\u0027s coverage of the RequiresUnreferencedCode warnings by treating dynamic invocations as calls to RuntimeBinder methods. Perhaps we could do the same by including an additional call to CallSite.Create.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeXYDFQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5rCoHu",
                                           "createdAt":  "2023-11-06T18:27:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @cston\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe ILLink Roslyn Analyzer has some logic to handle dynamic object invocations, producing RequiresUnreferencedCode warnings, for example:\r\n```csharp\r\ndynamic s = \"hello\";\r\ns.DoSomething();\r\n```\r\n\r\nThis produces `IL2026` at the callsite.\r\n\r\nThis compiles into something like the following:\r\n```csharp\r\n        object arg = \"hello\";\r\n        if (\u003c\u003eo__0.\u003c\u003ep__0 == null)\r\n        {\r\n            Type typeFromHandle = typeof(C);\r\n            CSharpArgumentInfo[] array = new CSharpArgumentInfo[1];\r\n            array[0] = CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null);\r\n            \u003c\u003eo__0.\u003c\u003ep__0 = CallSite\u003cAction\u003cCallSite, object\u003e\u003e.Create(Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, \"DoSomething\", null, typeFromHandle, array));\r\n        }\r\n        \u003c\u003eo__0.\u003c\u003ep__0.Target(\u003c\u003eo__0.\u003c\u003ep__0, arg);\r\n```\r\n\r\nILLink also produces IL2026 due to InvokeMember being annotated with RequiresUnreferencedCode.\r\n\r\nILCompiler additionaly produces IL3050 due to CallSite.Create being annotated with RequiresDynamicCode. We should consider ways to produce the same warning in the ILLink Roslyn analyzer.\r\n\r\nhttps://github.com/dotnet/runtime/pull/94236 is improving the analyzer\u0027s coverage of the RequiresUnreferencedCode warnings by treating dynamic invocations as calls to RuntimeBinder methods. Perhaps we could do the same by including an additional call to CallSite.Create.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esbomer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Microsoft.CSharp`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-06T18:27:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rCpbn",
                                           "createdAt":  "2023-11-06T18:30:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe ILLink Roslyn Analyzer has some logic to handle dynamic object invocations, producing RequiresUnreferencedCode warnings, for example:\r\n```csharp\r\ndynamic s = \"hello\";\r\ns.DoSomething();\r\n```\r\n\r\nThis produces `IL2026` at the callsite.\r\n\r\nThis compiles into something like the following:\r\n```csharp\r\n        object arg = \"hello\";\r\n        if (\u003c\u003eo__0.\u003c\u003ep__0 == null)\r\n        {\r\n            Type typeFromHandle = typeof(C);\r\n            CSharpArgumentInfo[] array = new CSharpArgumentInfo[1];\r\n            array[0] = CSharpArgumentInfo.Create(CSharpArgumentInfoFlags.None, null);\r\n            \u003c\u003eo__0.\u003c\u003ep__0 = CallSite\u003cAction\u003cCallSite, object\u003e\u003e.Create(Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember(CSharpBinderFlags.ResultDiscarded, \"DoSomething\", null, typeFromHandle, array));\r\n        }\r\n        \u003c\u003eo__0.\u003c\u003ep__0.Target(\u003c\u003eo__0.\u003c\u003ep__0, arg);\r\n```\r\n\r\nILLink also produces IL2026 due to InvokeMember being annotated with RequiresUnreferencedCode.\r\n\r\nILCompiler additionaly produces IL3050 due to CallSite.Create being annotated with RequiresDynamicCode. We should consider ways to produce the same warning in the ILLink Roslyn analyzer.\r\n\r\nhttps://github.com/dotnet/runtime/pull/94236 is improving the analyzer\u0027s coverage of the RequiresUnreferencedCode warnings by treating dynamic invocations as calls to RuntimeBinder methods. Perhaps we could do the same by including an additional call to CallSite.Create.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esbomer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Microsoft.CSharp`, `untriaged`, `area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-06T18:30:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55dgMV",
                                           "createdAt":  "2024-04-04T17:22:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Note that with https://github.com/dotnet/runtime/pull/98559, Roslyn codegen no longer seems to produce a call to Binder.InvokeConstructor.",
                                           "updatedAt":  "2024-04-04T17:22:25Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[ILLink analyzer] Analyzer doesn\u0027t produce RequiresDynamicCode warnings for dynamic objects",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94745",
        "createdAt":  "2023-11-15T02:37:29Z",
        "number":  94745,
        "author":  "hamarb123",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-25T17:19:52Z",
        "body":  "### Description\r\n\r\nUsing the `Type.GetMember` function gives warnings that are not necessary when AOT analysis is enabled.\r\n\r\n### Reproduction Steps\r\n\r\nEnable AOT compatible analysis: `\u003cIsAotCompatible\u003etrue\u003c/IsAotCompatible\u003e`.\r\nWrite code like so:\r\n```csharp\r\nvoid X(Type t)\r\n{\r\n    t.GetMember(\"SomeMethod\", MemberTypes.Method, BindingFlags.Public | BindingFlags.Static | BindingFlags.NonPublic);\r\n}\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nAll that should be necessary to appease the analyser is:\r\n```csharp\r\n[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods | DynamicallyAccessedMemberTypes.NonPublicMethods)]\r\n```\r\n\r\n### Actual behavior\r\n\r\nInstead I get the following:\r\n\u003cimg width=\"1030\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/25316035/c7d42b19-c349-4e4a-8d31-a10093c8603e\"\u003e\r\n\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nIgnore the warning.\r\n\r\n### Configuration\r\n\r\n.NET SDK 8.0.0\r\nVS 17.8.0\r\nWindows 10.0.19045 x64\r\nI don\u0027t see why it would be specific to this configuration\r\n\r\n### Other information\r\n\r\nThis was likely just overlooked when implementing the analyser. I\u0027ve only discovered it now since I\u0027m only now adding AOT support.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObDTDeQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5r_JQ_",
                                           "createdAt":  "2023-11-15T02:37:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nUsing the `Type.GetMember` function gives warnings that are not necessary when AOT analysis is enabled.\n\n### Reproduction Steps\n\nEnable AOT compatible analysis: `\u003cIsAotCompatible\u003etrue\u003c/IsAotCompatible\u003e`.\r\nWrite code like so:\r\n```csharp\r\ntype.GetMember(\"SomeMethod\", MemberTypes.Method, BindingFlags.Public | BindingFlags.Static | BindingFlags.NonPublic);\r\n```\r\n\r\n\n\n### Expected behavior\n\nAll that should be necessary to appease the analyser is:\r\n```csharp\r\n[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods | DynamicallyAccessedMemberTypes.NonPublicMethods)]\r\n```\n\n### Actual behavior\n\nInstead I get the following:\r\n\u003cimg width=\"1030\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/25316035/c7d42b19-c349-4e4a-8d31-a10093c8603e\"\u003e\r\n\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nIgnore the warning.\n\n### Configuration\n\n.NET SDK 8.0.0\r\nVS 17.8.0\r\nWindows 10.0.19045 x64\r\nI don\u0027t see why it would be specific to this configuration\n\n### Other information\n\nThis was likely just looked over when implementing the analyser. I\u0027ve only discovered it now since I\u0027m only now adding AOT support.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehamarb123\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-NativeAOT-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-15T02:37:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r_KAb",
                                           "createdAt":  "2023-11-15T02:39:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "I\u0027d be happy to make a PR to fix this btw - if someone could point me to the code for this analyser, and people are happy for me to do it.",
                                           "updatedAt":  "2023-11-15T02:40:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r_Xyq",
                                           "createdAt":  "2023-11-15T04:03:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "I think you\u0027re confusing Get**Method** with Get**Member**. You\u0027re correct that `GetMethod` only requires `PublicMethods` and `PrivateMethods`, but `GetMember` requires `DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.NonPublicConstructors | DynamicallyAccessedMemberTypes.PublicMethods | DynamicallyAccessedMemberTypes.NonPublicMethods | DynamicallyAccessedMemberTypes.PublicFields | DynamicallyAccessedMemberTypes.NonPublicFields | DynamicallyAccessedMemberTypes.PublicNestedTypes | DynamicallyAccessedMemberTypes.NonPublicNestedTypes | DynamicallyAccessedMemberTypes.PublicProperties | DynamicallyAccessedMemberTypes.NonPublicProperties | DynamicallyAccessedMemberTypes.PublicEvents | DynamicallyAccessedMemberTypes.NonPublicEvents`\r\n",
                                           "updatedAt":  "2023-11-15T04:04:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r_YF1",
                                           "createdAt":  "2023-11-15T04:05:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "@agocke no I\u0027m not, I specified `MemberTypes.Method` in the code, therefore I don\u0027t see why I\u0027d need anything other than methods.",
                                           "updatedAt":  "2023-11-15T04:05:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r_6Ai",
                                           "createdAt":  "2023-11-15T07:08:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMrA5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hamarb123",
                                                                               "createdAt":  "2023-11-15T12:07:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "We\u0027d need to extend intrinsic handling of this method in the Roslyn analyzer and in ILLinker/NativeAOT compiler. Searching the codebase for [`Type_GetMember`](https://github.com/search?q=repo%3Adotnet%2Fruntime%20Type_GetMember\u0026type=code) should get you close enough. Looks like we already look at BindingFlags but that doesn\u0027t help much.\r\n\r\n\u003e ### Known Workarounds\r\n\u003e Ignore the warning.\r\n\r\nThe warning should be suppressible and this might be safe to suppress (unless there\u0027s some obscure corner case behavior difference between `GetMember(MemberTypes.Method)` and `GetMethod`, which we\u0027d need to investigate when the intrinsic is introduced).",
                                           "updatedAt":  "2023-11-15T07:08:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r_6NR",
                                           "createdAt":  "2023-11-15T07:08:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nUsing the `Type.GetMember` function gives warnings that are not necessary when AOT analysis is enabled.\r\n\r\n### Reproduction Steps\r\n\r\nEnable AOT compatible analysis: `\u003cIsAotCompatible\u003etrue\u003c/IsAotCompatible\u003e`.\r\nWrite code like so:\r\n```csharp\r\nvoid X(Type t)\r\n{\r\n    t.GetMember(\"SomeMethod\", MemberTypes.Method, BindingFlags.Public | BindingFlags.Static | BindingFlags.NonPublic);\r\n}\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nAll that should be necessary to appease the analyser is:\r\n```csharp\r\n[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods | DynamicallyAccessedMemberTypes.NonPublicMethods)]\r\n```\r\n\r\n### Actual behavior\r\n\r\nInstead I get the following:\r\n\u003cimg width=\"1030\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/25316035/c7d42b19-c349-4e4a-8d31-a10093c8603e\"\u003e\r\n\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nIgnore the warning.\r\n\r\n### Configuration\r\n\r\n.NET SDK 8.0.0\r\nVS 17.8.0\r\nWindows 10.0.19045 x64\r\nI don\u0027t see why it would be specific to this configuration\r\n\r\n### Other information\r\n\r\nThis was likely just overlooked when implementing the analyser. I\u0027ve only discovered it now since I\u0027m only now adding AOT support.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehamarb123\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-15T07:08:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sBVSQ",
                                           "createdAt":  "2023-11-15T11:01:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMrA2g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hamarb123",
                                                                               "createdAt":  "2023-11-15T12:07:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The fix would be here: https://github.com/dotnet/runtime/blob/18cac43e79503cb2d9424dd19822e7ee8444db26/src/tools/illink/src/ILLink.Shared/TrimAnalysis/HandleCallAction.cs#L382\r\n\r\nThe value of the new enum should already be tracked as an integer by dataflow, so I don\u0027t think it would need changes to the dataflow itself.\r\n\r\nNote that this code is shared by all 3 tools (ILLink, ILCompiler, the analyzer). Would need some more logic to figure out the correct member type masks but probably not too difficult.\r\n\r\nTechnically we can do even better and basically map this onto the handling of GetMethod - which has the ability to preserve only a single method, if the name of the method is a constant. But that\u0027s maybe a next level optimization on top.\r\n\r\nI agree with Michal that we should investigate if there are behavioral differences between `GetMember(.. Methods ...)` and `GetMethod()`.",
                                           "updatedAt":  "2023-11-15T11:01:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sDh1U",
                                           "createdAt":  "2023-11-15T16:29:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMt1kA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hamarb123",
                                                                               "createdAt":  "2023-11-15T19:57:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "agocke",
                                           "body":  "Yup, my mistake, missed the binding flags. It would be cool to support this properly",
                                           "updatedAt":  "2023-11-15T16:29:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sNMN5",
                                           "createdAt":  "2023-11-16T22:12:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hamarb123",
                                           "body":  "I agree with Michal that we should investigate if there are behavioral differences between `GetMember(.. Methods ...)` and `GetMethod()`.\r\n\r\nBoth `GetMember` and `GetMethod` begin to share the same implementation by this point.\r\n\r\nhttps://github.com/dotnet/runtime/blob/2e912a327d1836c328258ccb656c6d7cde6cdbce/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Reflection/Runtime/TypeInfos/RuntimeTypeInfo.BindingFlags.cs#L67\r\n\r\nhttps://github.com/dotnet/runtime/blob/2e912a327d1836c328258ccb656c6d7cde6cdbce/src/coreclr/nativeaot/System.Private.CoreLib/src/System/Reflection/Runtime/TypeInfos/RuntimeTypeInfo.GetMember.cs#L106\r\n\r\nThe only differences I see up to this point is that `GetMember` allows a pattern with `*` at the end to specify anything starting with the prior characters (e.g., `abc*` means anything starting with `abc`). That seems to be the only difference to me.",
                                           "updatedAt":  "2023-11-16T22:12:58Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Support `Type.GetMember` usage analysis properly with IL3050 warning (NAOT)",
        "labels":  [
                       "in-pr",
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94990",
        "createdAt":  "2023-11-20T07:03:26Z",
        "number":  94990,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-12T20:26:16Z",
        "body":  "See suppression added in #94985.\r\n\r\nPer the warning this was working around, the problem is that we didn\u0027t propagate annotations from `_typeParent` (annotated as `.All`).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcokqMQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5sYcMd",
                                           "createdAt":  "2023-11-20T07:03:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSee suppression added in #94985.\r\n\r\nPer the warning this was working around, the problem is that we didn\u0027t propagate annotations from `_typeParent` (annotated as `.All`).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-20T07:03:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yhwEo",
                                           "createdAt":  "2024-02-01T14:21:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "Oops, I didn\u0027t see this one when I opened https://github.com/dotnet/runtime/issues/96898. Should we keep both open, or should we maybe close this one as a duplicate and just use the other one for tracking, since it\u0027s also already added to the milestone too?",
                                           "updatedAt":  "2024-02-01T14:21:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yhxjD",
                                           "createdAt":  "2024-02-01T14:24:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Oops, I didn\u0027t see this one when I opened #96898. Should we keep both open, or should we maybe close this one as a duplicate and just use the other one for tracking, since it\u0027s also already added to the milestone too?\r\n\r\nYou\u0027re asking for a JIT intrinsic. This is about intrinsic recognition in reflection use analysis. Different things.",
                                           "updatedAt":  "2024-02-01T14:24:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yiSox",
                                           "createdAt":  "2024-02-01T15:28:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "Ooh gotcha, thank you for clarifying 🙂",
                                           "updatedAt":  "2024-02-01T15:28:26Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Intrinsically recognize Type.GetGenericTypeDefinition",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96442",
        "createdAt":  "2024-01-03T10:34:03Z",
        "number":  96442,
        "author":  "tranb3r",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-25T17:23:24Z",
        "body":  "### Description\n\nThe dotnet trimmer does not seem to trim an embedded resource that is not used.\r\nIs there a way to force the trimmer to remove embedded resources when they are not used by the application?\r\n\r\n\n\n### Reproduction Steps\n\n1. Create a console application.\r\n2. Add an EmbeddedResource.\r\n3. Publish the application with trimming enabled.\r\n4. Inspect the published assembly.\n\n### Expected behavior\n\n The embedded resource should be removed from the assembly, since the application is not using it.\n\n### Actual behavior\n\nThe embedded resource is still here, even if it\u0027s not used by the application.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.net8\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOb8phQg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5vxQBW",
                                           "createdAt":  "2024-01-03T10:56:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "How to determine if a resource is used?\n\nFor code, most code elements are used by direct references. They can be precisely analysed.  For embedded resources, it\u0027s quite common to concatenate their names, which is not analysable in reflection.",
                                           "updatedAt":  "2024-01-03T10:56:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vxUHM",
                                           "createdAt":  "2024-01-03T11:09:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tranb3r",
                                           "body":  "Embedded resources can be big. It would great to have a way to remove them.\r\nI understand it\u0027s difficult to do determine if a resource is used. It\u0027s also difficult to determine if some code is used. For example, if some code is only used via reflection, it\u0027s removed by the trimmer, and this is very similar the behavior I\u0027d like to have regarding embedded resources.\r\nSo, it could be the default behavior to remove embedded resources, and have some attribute to let the code indicate where it\u0027s using an embedded resource that should not be removed. Just an idea...",
                                           "updatedAt":  "2024-01-03T11:09:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vxYxK",
                                           "createdAt":  "2024-01-03T11:25:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe dotnet trimmer does not seem to trim an embedded resource that is not used.\r\nIs there a way to force the trimmer to remove embedded resources when they are not used by the application?\r\n\r\n\n\n### Reproduction Steps\n\n1. Create a console application.\r\n2. Add an EmbeddedResource.\r\n3. Publish the application with trimming enabled.\r\n4. Inspect the published assembly.\n\n### Expected behavior\n\n The embedded resource should be removed from the assembly, since the application is not using it.\n\n### Actual behavior\n\nThe embedded resource is still here, even if it\u0027s not used by the application.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.net8\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etranb3r\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-03T11:25:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vx48H",
                                           "createdAt":  "2024-01-03T13:08:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "The correct solution would have to be very similar to what we do for reflection:\r\n* All APIs which access embedded resources would have to be recognized by the trimmer (as intrinsics) and determine if the trimmer understands what resource is accessed or not. If it can\u0027t figure it out - produce a warning.\r\n* Some APIs would likely have to be marked as trim-incompatible completely.\r\n* Probably add a way to \"hint\" the trimmer to keep a specific embeded resource (for cases which are just not going to be analyzable)\r\n\r\nThere would still be possible issues - what if I have a helper method which takes the name of the resource to access - no way to annotate that (even if the method is called with a constant string). And so on.\r\n\r\nDefinitely solvable - after all it\u0027s basically very similar to what we solved for reflection APIs. But non-trivial. I think we would need a good reason to invest into this.\r\n\r\nAnother potential improvement in this area would be the ability to track string resources (typically exception messages) and selectively remove those - after all, why would I need to keep the exception message for exception which is never thrown by my application. This is probably even more complicated unfortunately.\r\n\r\nWe have some knobs in this area:\r\n* `UseSystemResourceKeys` can be enabled - this will trim all string messages from system assemblies. Exceptions will not throw nice messages though. This is officially supported, but make sure you\u0027re OK with the UX implications.\r\n* You can add a substitution XML and direct the trimmer to remove a specified resource: https://github.com/dotnet/runtime/blob/main/docs/tools/illink/data-formats.md#remove-embedded-resources . This is considered an \"internal\" feature - we use it to remove some resources but we don\u0027t document it as a publicly supported feature really. There are no diagnostics around this - the app may break if you use this incorrectly.",
                                           "updatedAt":  "2024-01-03T13:08:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vyQ1T",
                                           "createdAt":  "2024-01-03T14:21:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tranb3r",
                                           "body":  "I\u0027ve just tested the removal of several embedded resources using a substitution XML and it works perfectly.\r\nMy android apk size has decreased by ~500kB. This is exactly what I was looking for :)\r\nThanks a lot!",
                                           "updatedAt":  "2024-01-03T14:21:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vymFC",
                                           "createdAt":  "2024-01-03T15:16:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODRIrUQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "tranb3r",
                                                                               "createdAt":  "2024-01-03T15:32:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I\u0027m glad it works for you, just note that you\u0027re in \"Semi-unsupported\" territory - we may break you couple of years from now :-)",
                                           "updatedAt":  "2024-01-03T15:16:51Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Trim embedded resource",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96495",
        "createdAt":  "2024-01-04T17:14:59Z",
        "number":  96495,
        "author":  "LakshanF",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-05T21:34:14Z",
        "body":  "Repro:\r\n\r\n`dotnet new console`\r\n\r\n`app.csproj`:\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n    \u003cPropertyGroup\u003e\r\n        \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n        \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n        \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n        \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n        \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\r\n        \u003cTrimmerSingleWarn\u003efalse\u003c/TrimmerSingleWarn\u003e\r\n        \u003cNoWarn\u003eNU1605;NU1603;NU1701\u003c/NoWarn\u003e\r\n    \u003c/PropertyGroup\u003e\r\n\r\n \u003cItemGroup\u003e\r\n    \u003cTrimmerRootAssembly Include=\"Bit.Server.Signalr\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Bit.Server.Signalr\" Version=\"13.3.0\" /\u003e\r\n\u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n`dotnet publish`\r\n\r\nStacktrace from the build:\r\n```\r\nUnhandled exception. System.Collections.Generic.KeyNotFoundException: The given key \u0027Microsoft.ServiceBus.Messaging.ServiceBusResourceOperations/GetAsyncResult`1/\u003cGetAsyncSteps\u003ed__38\u0027 was not present in the dictionary.\r\n     at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n     at Mono.Linker.Dataflow.CompilerGeneratedState.\u003cGetCompilerGeneratedStateForType\u003eg__MapGeneratedTypeTypeParameters|11_1(TypeDefinition generatedType, Dictionary`2 generatedTypeToTypeArgs, LinkContext context)\r\n     at Mono.Linker.Dataflow.CompilerGeneratedState.\u003cGetCompilerGeneratedStateForType\u003eg__MapGeneratedTypeTypeParameters|11_1(TypeDefinition generatedType, Dictionary`2 generatedTypeToTypeArgs, LinkContext context)\r\n     at Mono.Linker.Dataflow.CompilerGeneratedState.GetCompilerGeneratedStateForType(TypeDefinition type)\r\n     at Mono.Linker.Dataflow.CompilerGeneratedState.TryGetCompilerGeneratedCalleesForUserMethod(MethodDefinition method, List`1\u0026 callees)\r\n     at Mono.Linker.Steps.MarkStep.MarkReflectionLikeDependencies(MethodIL methodIL, Boolean requiresReflectionMethodBodyScanner)\r\n     at Mono.Linker.Steps.MarkStep.MarkMethodBody(MethodBody body)\r\n     at Mono.Linker.Steps.MarkStep.ProcessMethod(MethodDefinition method, DependencyInfo\u0026 reason, MessageOrigin\u0026 origin)\r\n```\r\n\r\n/cc @vitek-karas ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOb_egVQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5v5_7O",
                                           "createdAt":  "2024-01-04T17:15:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRepro:\r\n\r\n`dotnet new console`\r\n\r\n`app.csproj`:\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n    \u003cPropertyGroup\u003e\r\n        \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n        \u003cTargetFramework\u003enet8.0\u003c/TargetFramework\u003e\r\n        \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\r\n        \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n        \u003cPublishTrimmed\u003etrue\u003c/PublishTrimmed\u003e\r\n        \u003cTrimmerSingleWarn\u003efalse\u003c/TrimmerSingleWarn\u003e\r\n        \u003cNoWarn\u003eNU1605;NU1603;NU1701\u003c/NoWarn\u003e\r\n    \u003c/PropertyGroup\u003e\r\n\r\n \u003cItemGroup\u003e\r\n    \u003cTrimmerRootAssembly Include=\"Bit.Server.Signalr\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\r\n\u003cItemGroup\u003e\r\n    \u003cPackageReference Include=\"Bit.Server.Signalr\" Version=\"13.3.0\" /\u003e\r\n\u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n`dotnet publish`\r\n\r\nStacktrace from the build:\r\n```\r\nUnhandled exception. System.Collections.Generic.KeyNotFoundException: The given key \u0027Microsoft.ServiceBus.Messaging.ServiceBusResourceOperations/GetAsyncResult`1/\u003cGetAsyncSteps\u003ed__38\u0027 was not present in the dictionary.\r\n     at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n     at Mono.Linker.Dataflow.CompilerGeneratedState.\u003cGetCompilerGeneratedStateForType\u003eg__MapGeneratedTypeTypeParameters|11_1(TypeDefinition generatedType, Dictionary`2 generatedTypeToTypeArgs, LinkContext context)\r\n     at Mono.Linker.Dataflow.CompilerGeneratedState.\u003cGetCompilerGeneratedStateForType\u003eg__MapGeneratedTypeTypeParameters|11_1(TypeDefinition generatedType, Dictionary`2 generatedTypeToTypeArgs, LinkContext context)\r\n     at Mono.Linker.Dataflow.CompilerGeneratedState.GetCompilerGeneratedStateForType(TypeDefinition type)\r\n     at Mono.Linker.Dataflow.CompilerGeneratedState.TryGetCompilerGeneratedCalleesForUserMethod(MethodDefinition method, List`1\u0026 callees)\r\n     at Mono.Linker.Steps.MarkStep.MarkReflectionLikeDependencies(MethodIL methodIL, Boolean requiresReflectionMethodBodyScanner)\r\n     at Mono.Linker.Steps.MarkStep.MarkMethodBody(MethodBody body)\r\n     at Mono.Linker.Steps.MarkStep.ProcessMethod(MethodDefinition method, DependencyInfo\u0026 reason, MessageOrigin\u0026 origin)\r\n```\r\n\r\n/cc @vitek-karas \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-04T17:15:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5v96BV",
                                           "createdAt":  "2024-01-05T11:10:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Couple of notes when I debugged this.\r\n\r\nThis happens on a really old assembly - the assembly in question has been built 7 years ago and targets .NET Framework 4.0. So it\u0027s possible that the Roslyn version used to build it produces slightly different patterns than we expect.\r\nIt also looks like this happens for a nested async state machines - the nesting seems to be important, the reason we fail is that we find a compiler generated state machine type, but we don\u0027t find a method which is associated with it via the attribute.",
                                           "updatedAt":  "2024-01-05T11:10:47Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ILLink: KeyNotFoundException in compiler generated code for not finding a type",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96646",
        "createdAt":  "2024-01-08T22:34:36Z",
        "number":  96646,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-12T22:36:03Z",
        "body":  "```csharp\r\nstatic void Method(Type[] interfaces) {\r\n    foreach (Type i in interfaces)\r\n        i.GetMethods(); // warning here. IL2075 for analyzer, IL2065 for ILLink\r\n}\r\n```\r\n\r\nThe ILLink Roslyn analyzer produces IL2075 (unannotated method return value flows to \u0027this\u0027 parameter with requirements), because it sees the return value of `Current.get` used as the receiver for `GetMethods`.\r\n\r\nILLink produces IL2065 (\u0027this\u0027 parameter cannot be statically determined), because when it sees `ldelem.ref` of the array method parameter, it turns this into an \"unknown\" value, which has a different warning code.\r\n\r\nFundamentally this is due to the analyzer seeing a different lowering of the foreach loop than illink. Fixing this seems tricky.\r\n\r\nFound while investigating https://github.com/dotnet/runtime/pull/96462. There\u0027s an existing testcase similar to this:\r\n\r\nhttps://github.com/dotnet/runtime/blob/0451127421fe7862f0e8407eafd6052d7ea3b175/src/tools/illink/test/Mono.Linker.Tests.Cases/DataFlow/LocalDataFlow.cs#L443-L453",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcCxDXg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5wLENe",
                                           "createdAt":  "2024-01-08T22:54:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```csharp\r\nstatic void Method(Type[] interfaces) {\r\n    foreach (Type i in interfaces)\r\n        i.GetMethods(); // warning here. IL2075 for analyzer, IL2065 for ILLink\r\n}\r\n```\r\n\r\nThe ILLink Roslyn analyzer produces IL2075 (unannotated method return value flows to \u0027this\u0027 parameter with requirements), because it sees the return value of `Current.get` used as the receiver for `GetMethods`.\r\n\r\nILLink produces IL2065 (\u0027this\u0027 parameter cannot be statically determined), because when it sees `ldelem.ref` of the array method parameter, it turns this into an \"unknown\" value, which has a different warning code.\r\n\r\nFundamentally this is due to the analyzer seeing a different lowering of the foreach loop than illink. Fixing this seems tricky.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esbomer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Tools-ILLink`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-08T22:54:03Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Inconsistent warning code for array parameter passed to annotated location in ILLink/analyzer",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96907",
        "createdAt":  "2024-01-12T18:05:37Z",
        "number":  96907,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-10T16:19:45Z",
        "body":  "Context: https://github.com/dotnet/runtime/pull/96363/files#r1449983607\r\n\r\nILLink has a hard-coded list of security attributes to remove: https://github.com/dotnet/runtime/blob/de1e52958e62ffe3eef06827d2d30ef2f098d3f2/src/tools/illink/src/linker/Linker.Steps/RemoveSecurityStep.cs#L67-L75\r\n\r\nWe should consider using the same approach we use for other attributes (the ILLink.LinkAttributes.xml) for consistency, and to get the same behavior in NativeAot.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOq1tWGQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5wozZL",
                                           "createdAt":  "2024-01-12T18:10:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nContext: https://github.com/dotnet/runtime/pull/96363/files#r1449983607\r\n\r\nILLink has a hard-coded list of security attributes to remove: https://github.com/dotnet/runtime/blob/de1e52958e62ffe3eef06827d2d30ef2f098d3f2/src/tools/illink/src/linker/Linker.Steps/RemoveSecurityStep.cs#L67-L75\r\n\r\nWe should consider using the same approach we use for other attributes (the ILLink.LinkAttributes.xml) for consistency, and to get the same behavior in NativeAot.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esbomer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Tools-ILLink`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-12T18:10:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rW1YZ",
                                           "createdAt":  "2025-05-13T02:35:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Should we just drop support for this entirely? I didn\u0027t think we wanted to support attribute trimming at all...",
                                           "updatedAt":  "2025-05-13T02:35:39Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Use attribute xml for security attribute stripping",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97798",
        "createdAt":  "2024-02-01T00:31:10Z",
        "number":  97798,
        "author":  "jtschuster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-01T18:47:31Z",
        "body":  "Linker uses \"RelevantToVariantCasting\" as heuristic for a type passed as a generic parameter with static interface constraint. A type may be passed as an unconstrained generic (which will mark it as RelevantToVariantCasting), but we\u0027ll still keep any static interface methods on the type, even though they can\u0027t be called on that type. We only need to keep the static interface methods for types that are passed as generic arguments constrained to the interface.\r\n\r\nWe should start tracking which types are passed as generic arguments with constraints so we can avoid marking static interface methods that can\u0027t be called.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcnSzlw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ydLOX",
                                           "createdAt":  "2024-02-01T00:31:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nLinker uses \"RelevantToVariantCasting\" as heuristic for a type passed as a generic parameter with static interface constraint. A type may be passed as an unconstrained generic (which will mark it as RelevantToVariantCasting), but we\u0027ll still keep any static interface methods on the type, even though they can\u0027t be called on that type. We only need to keep the static interface methods for types that are passed as generic arguments constrained to the interface.\r\n\r\nWe should start tracking which types are passed as generic arguments with constraints so we can avoid marking static interface methods that can\u0027t be called.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejtschuster\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-01T00:31:14Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Linker uses \"RelevantToVariantCasting\" as heuristic for a type passed as a generic parameter with static interface constraint",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98536",
        "createdAt":  "2024-02-16T01:33:40Z",
        "number":  98536,
        "author":  "jtschuster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T23:42:12Z",
        "body":  "Roslyn will apply InterfaceImpl\u0027s of the interfaces declared on the type, and all the interfaces that those interfaces implement, recursively. We rely on this fact in a few places in the linker when searching for DIMs, and determining which interfaces can be trimmed. However, this isn\u0027t required by IL, and if Roslyn doesn\u0027t do this, we get the wrong behavior.\r\n\r\nIn the following examples, if each type only has InterfaceImpls for the declared interfaces, the app will still run fine, but the linker would break it.\r\n\r\n```C#\r\ninterface IFoo\r\n{\r\n\tvoid Method();\r\n}\r\n\r\ninterface IBar : IFoo\r\n{\r\n\tvoid IFoo.Method() { }\r\n}\r\n\r\ninterface IBaz: IBar /*, not IFoo */\r\n{\r\n\tvoid Method() { }\r\n}\r\n    \r\nclass MyFoo : IBaz /* not IBar, not IFoo */\r\n{ }\r\n\r\nstatic void CallMethod(IFoo foo)\r\n{\r\n  foo.Method();\r\n}\r\n\r\nstatic void Main()\r\n{\r\n  CallMethod(new MyFoo());\r\n}\r\n```\r\n\r\n```C#\r\ninterface IBase\r\n{\r\n  static abstract void Method();\r\n}\r\n\r\ninterface I2 : IBase \r\n{ \r\n static void IBase.Method() { }\r\n}\r\n\r\ninterface I3 : I2 /* Not IBase */ { }\r\n\r\ninterface I4 : I3 /* not I2, not IBase */ { }\r\n\r\nstatic void CallMethod\u003cT\u003e() where T : IBase\r\n{\r\n  T.Method();\r\n}\r\n\r\nstatic void Main()\r\n{\r\n  CallMethod\u003cI4\u003e();\r\n}\r\n```\r\n\r\nSee https://github.com/dotnet/runtime/pull/98436#issuecomment-1945457985 for additional context and discussion.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeqo5hA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc50FjHx",
                                           "createdAt":  "2024-02-16T01:33:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRoslyn will apply InterfaceImpl\u0027s of the interfaces declared on the type, and all the interfaces that those interfaces implement, recursively. We rely on this fact in a few places in the linker when searching for DIMs, and determining which interfaces can be trimmed. However, this isn\u0027t required by IL, and if Roslyn doesn\u0027t do this, we get the wrong behavior.\r\n\r\nIn the following examples, if each type only has InterfaceImpls for the declared interfaces, the app will still run fine, but the linker would break it.\r\n\r\n```C#\r\ninterface IFoo\r\n{\r\n\tvoid Method();\r\n}\r\n\r\ninterface IBar : IFoo\r\n{\r\n\tvoid IFoo.Method() { }\r\n}\r\n\r\ninterface IBaz: IBar /*, not IFoo */\r\n{\r\n\tvoid Method() { }\r\n}\r\n    \r\nclass MyFoo : IBaz /* not IBar, not IFoo */\r\n{ }\r\n\r\nstatic void CallMethod(IFoo foo)\r\n{\r\n  foo.Method();\r\n}\r\n\r\nstatic void Main()\r\n{\r\n  CallMethod(new MyFoo());\r\n}\r\n```\r\n\r\n```C#\r\ninterface IBase\r\n{\r\n  static abstract void Method();\r\n}\r\n\r\ninterface I2 : IBase \r\n{ \r\n static void IBase.Method() { }\r\n}\r\n\r\ninterface I3 : I2 /* Not IBase */ { }\r\n\r\ninterface I4 : I3 /* not I2, not IBase */ { }\r\n\r\nstatic void CallMethod\u003cT\u003e() where T : IBase\r\n{\r\n  T.Method();\r\n}\r\n\r\nstatic void Main()\r\n{\r\n  CallMethod\u003cI4\u003e();\r\n}\r\n```\r\n\r\nSee https://github.com/dotnet/runtime/pull/98436#issuecomment-1945457985 for additional context and discussion.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejtschuster\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-16T01:33:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56qA9f",
                                           "createdAt":  "2024-04-15T21:23:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "@jtschuster Has this been resolved?",
                                           "updatedAt":  "2024-04-15T21:23:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56qjmE",
                                           "createdAt":  "2024-04-15T23:26:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "Not fully, I believe TypeMapInfo still doesn\u0027t look at recursive interfaces for default interface method mappings.",
                                           "updatedAt":  "2024-04-15T23:26:05Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[ILLink] Linker relies on recursive interfaceImpls to be applied by Roslyn",
        "labels":  [
                       "in-pr",
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98870",
        "createdAt":  "2024-02-23T20:28:39Z",
        "number":  98870,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-02T21:26:40Z",
        "body":  "```csharp\r\nusing System.Reflection;\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Globalization;\r\n\r\n_ = 0;\r\n\r\npublic class C : IReflect {\r\n    Type IReflect.UnderlyingSystemType =\u003e typeof(C);\r\n    FieldInfo? IReflect.GetField(string s, BindingFlags b) =\u003e null;\r\n    FieldInfo[] IReflect.GetFields(BindingFlags b) =\u003e new FieldInfo[] {};\r\n    PropertyInfo? IReflect.GetProperty(string name, BindingFlags bindingAttr) =\u003e null;\r\n    PropertyInfo[] IReflect.GetProperties(BindingFlags bindingAttr) =\u003e new PropertyInfo[] {};\r\n    PropertyInfo? IReflect.GetProperty(string name, BindingFlags bindingAttr, Binder? binder, Type? t, Type[] types, ParameterModifier[]? ps) =\u003e null;\r\n    MethodInfo? IReflect.GetMethod(string name, BindingFlags bindingAttr, Binder? binder, Type[] types, ParameterModifier[]? ps) =\u003e null;\r\n    MethodInfo? IReflect.GetMethod(string name, BindingFlags bindingAttr) =\u003e null;\r\n    MethodInfo[] IReflect.GetMethods(BindingFlags bindingAttr) =\u003e new MethodInfo[] {};\r\n    MemberInfo[] IReflect.GetMember(string name, BindingFlags bindingAttr) =\u003e null;\r\n    MemberInfo[] IReflect.GetMembers(BindingFlags bindingAttr) =\u003e null;\r\n    object? IReflect.InvokeMember(string name, BindingFlags invokeAttr, Binder? binder, object? target, object?[]? args, ParameterModifier[]? modifiers, CultureInfo? culture, string[]? namedParameters) =\u003e null;\r\n}\r\n```\r\n\r\n`PublishTrimmed` produces the following even though `C` and `IReflect` are unused:\r\n\r\n```\r\nProgram.cs(10,63): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetField(String, BindingFlags): Member \u0027C.System.Reflection.IReflect.GetField(String, BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetField(String, BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(10,63): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetField(String, BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetField(String, BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetField(String, BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(11,55): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetFields(BindingFlags): Member \u0027C.System.Reflection.IReflect.GetFields(BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetFields(BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(11,55): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetFields(BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetFields(BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetFields(BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(15,133): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[]): Member \u0027C.System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(15,133): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[]): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(16,78): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetMethod(String, BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetMethod(String, BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetMethod(String, BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(16,78): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetMethod(String, BindingFlags): Member \u0027C.System.Reflection.IReflect.GetMethod(String, BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetMethod(String, BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(17,67): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetMethods(BindingFlags): Member \u0027C.System.Reflection.IReflect.GetMethods(BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetMethods(BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(17,67): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetMethods(BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetMethods(BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetMethods(BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(13,72): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetProperties(BindingFlags): Member \u0027C.System.Reflection.IReflect.GetProperties(BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetProperties(BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(13,72): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetProperties(BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetProperties(BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetProperties(BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(12,82): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetProperty(String, BindingFlags): Member \u0027C.System.Reflection.IReflect.GetProperty(String, BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetProperty(String, BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(14,146): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[]): Member \u0027C.System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(14,146): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[]): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(12,82): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetProperty(String, BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetProperty(String, BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetProperty(String, BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(20,206): Trim analysis warning IL2094: C.System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[]): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(20,206): Trim analysis warning IL2046: C.System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[]): Member \u0027C.System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\n```\r\n\r\nThe analyzer produces these warnings since it sees the whole project. `PublishAot` does not because it only looks at used code. `PublishTrimmed` should do the same.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdPEj8w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc508PdX",
                                           "createdAt":  "2024-02-23T20:28:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```csharp\r\nusing System.Reflection;\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Globalization;\r\n\r\n_ = 0;\r\n\r\npublic class C : IReflect {\r\n    Type IReflect.UnderlyingSystemType =\u003e typeof(C);\r\n    FieldInfo? IReflect.GetField(string s, BindingFlags b) =\u003e null;\r\n    FieldInfo[] IReflect.GetFields(BindingFlags b) =\u003e new FieldInfo[] {};\r\n    PropertyInfo? IReflect.GetProperty(string name, BindingFlags bindingAttr) =\u003e null;\r\n    PropertyInfo[] IReflect.GetProperties(BindingFlags bindingAttr) =\u003e new PropertyInfo[] {};\r\n    PropertyInfo? IReflect.GetProperty(string name, BindingFlags bindingAttr, Binder? binder, Type? t, Type[] types, ParameterModifier[]? ps) =\u003e null;\r\n    MethodInfo? IReflect.GetMethod(string name, BindingFlags bindingAttr, Binder? binder, Type[] types, ParameterModifier[]? ps) =\u003e null;\r\n    MethodInfo? IReflect.GetMethod(string name, BindingFlags bindingAttr) =\u003e null;\r\n    MethodInfo[] IReflect.GetMethods(BindingFlags bindingAttr) =\u003e new MethodInfo[] {};\r\n    MemberInfo[] IReflect.GetMember(string name, BindingFlags bindingAttr) =\u003e null;\r\n    MemberInfo[] IReflect.GetMembers(BindingFlags bindingAttr) =\u003e null;\r\n    object? IReflect.InvokeMember(string name, BindingFlags invokeAttr, Binder? binder, object? target, object?[]? args, ParameterModifier[]? modifiers, CultureInfo? culture, string[]? namedParameters) =\u003e null;\r\n}\r\n```\r\n\r\n`PublishTrimmed` produces the following even though `C` and `IReflect` are unused:\r\n\r\n```\r\nProgram.cs(10,63): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetField(String, BindingFlags): Member \u0027C.System.Reflection.IReflect.GetField(String, BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetField(String, BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(10,63): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetField(String, BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetField(String, BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetField(String, BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(11,55): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetFields(BindingFlags): Member \u0027C.System.Reflection.IReflect.GetFields(BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetFields(BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(11,55): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetFields(BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetFields(BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetFields(BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(15,133): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[]): Member \u0027C.System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(15,133): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[]): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(16,78): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetMethod(String, BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetMethod(String, BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetMethod(String, BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(16,78): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetMethod(String, BindingFlags): Member \u0027C.System.Reflection.IReflect.GetMethod(String, BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetMethod(String, BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(17,67): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetMethods(BindingFlags): Member \u0027C.System.Reflection.IReflect.GetMethods(BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetMethods(BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(17,67): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetMethods(BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetMethods(BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetMethods(BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(13,72): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetProperties(BindingFlags): Member \u0027C.System.Reflection.IReflect.GetProperties(BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetProperties(BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(13,72): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetProperties(BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetProperties(BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetProperties(BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(12,82): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetProperty(String, BindingFlags): Member \u0027C.System.Reflection.IReflect.GetProperty(String, BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetProperty(String, BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(14,146): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[]): Member \u0027C.System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(14,146): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[]): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(12,82): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetProperty(String, BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetProperty(String, BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetProperty(String, BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(20,206): Trim analysis warning IL2094: C.System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[]): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(20,206): Trim analysis warning IL2046: C.System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[]): Member \u0027C.System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\n```\r\n\r\nThe analyzer produces these warnings since it sees the whole project. `PublishAot` does not because it only looks at used code. `PublishILLink` should do the same.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esbomer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Reflection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-23T20:28:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc508SPz",
                                           "createdAt":  "2024-02-23T20:39:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```csharp\r\nusing System.Reflection;\r\nusing System.Diagnostics.CodeAnalysis;\r\nusing System.Globalization;\r\n\r\n_ = 0;\r\n\r\npublic class C : IReflect {\r\n    Type IReflect.UnderlyingSystemType =\u003e typeof(C);\r\n    FieldInfo? IReflect.GetField(string s, BindingFlags b) =\u003e null;\r\n    FieldInfo[] IReflect.GetFields(BindingFlags b) =\u003e new FieldInfo[] {};\r\n    PropertyInfo? IReflect.GetProperty(string name, BindingFlags bindingAttr) =\u003e null;\r\n    PropertyInfo[] IReflect.GetProperties(BindingFlags bindingAttr) =\u003e new PropertyInfo[] {};\r\n    PropertyInfo? IReflect.GetProperty(string name, BindingFlags bindingAttr, Binder? binder, Type? t, Type[] types, ParameterModifier[]? ps) =\u003e null;\r\n    MethodInfo? IReflect.GetMethod(string name, BindingFlags bindingAttr, Binder? binder, Type[] types, ParameterModifier[]? ps) =\u003e null;\r\n    MethodInfo? IReflect.GetMethod(string name, BindingFlags bindingAttr) =\u003e null;\r\n    MethodInfo[] IReflect.GetMethods(BindingFlags bindingAttr) =\u003e new MethodInfo[] {};\r\n    MemberInfo[] IReflect.GetMember(string name, BindingFlags bindingAttr) =\u003e null;\r\n    MemberInfo[] IReflect.GetMembers(BindingFlags bindingAttr) =\u003e null;\r\n    object? IReflect.InvokeMember(string name, BindingFlags invokeAttr, Binder? binder, object? target, object?[]? args, ParameterModifier[]? modifiers, CultureInfo? culture, string[]? namedParameters) =\u003e null;\r\n}\r\n```\r\n\r\n`PublishTrimmed` produces the following even though `C` and `IReflect` are unused:\r\n\r\n```\r\nProgram.cs(10,63): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetField(String, BindingFlags): Member \u0027C.System.Reflection.IReflect.GetField(String, BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetField(String, BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(10,63): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetField(String, BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetField(String, BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetField(String, BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(11,55): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetFields(BindingFlags): Member \u0027C.System.Reflection.IReflect.GetFields(BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetFields(BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(11,55): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetFields(BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetFields(BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetFields(BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(15,133): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[]): Member \u0027C.System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(15,133): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[]): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(16,78): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetMethod(String, BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetMethod(String, BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetMethod(String, BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(16,78): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetMethod(String, BindingFlags): Member \u0027C.System.Reflection.IReflect.GetMethod(String, BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetMethod(String, BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(17,67): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetMethods(BindingFlags): Member \u0027C.System.Reflection.IReflect.GetMethods(BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetMethods(BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(17,67): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetMethods(BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetMethods(BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetMethods(BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(13,72): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetProperties(BindingFlags): Member \u0027C.System.Reflection.IReflect.GetProperties(BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetProperties(BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(13,72): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetProperties(BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetProperties(BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetProperties(BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(12,82): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetProperty(String, BindingFlags): Member \u0027C.System.Reflection.IReflect.GetProperty(String, BindingFlags)\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetProperty(String, BindingFlags)\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(14,146): Trim analysis warning IL2046: C.System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[]): Member \u0027C.System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\nProgram.cs(14,146): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[]): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(12,82): Trim analysis warning IL2094: C.System.Reflection.IReflect.GetProperty(String, BindingFlags): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.GetProperty(String, BindingFlags)\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.GetProperty(String, BindingFlags)\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(20,206): Trim analysis warning IL2094: C.System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[]): \u0027DynamicallyAccessedMemberTypes\u0027 in \u0027DynamicallyAccessedMembersAttribute\u0027 on the implicit \u0027this\u0027 parameter of method \u0027C.System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\u0027 don\u0027t match overridden implicit \u0027this\u0027 parameter of method \u0027System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\u0027. All overridden members must have the same \u0027DynamicallyAccessedMembersAttribute\u0027 usage.\r\nProgram.cs(20,206): Trim analysis warning IL2046: C.System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[]): Member \u0027C.System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 implements interface member \u0027System.Reflection.IReflect.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\n```\r\n\r\nThe analyzer produces these warnings since it sees the whole project. `PublishAot` does not because it only looks at used code. `PublishILLink` should do the same.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esbomer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Tools-ILLink`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-23T20:39:14Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ILLink warns for virtual method annotations on unused code",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101128",
        "createdAt":  "2024-04-16T17:04:03Z",
        "number":  101128,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3RBcA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkotas",
                                            "createdAt":  "2024-04-16T18:37:41Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-04-25T17:35:51Z",
        "body":  "Currently, ILLink keeps COM-related attributes on any preserved COM interfaces, even when removing members from the interface. This could break scenarios where built-in COM is enabled. (Note that built-in COM is not supported when trimming).\r\n\r\n@jkoritzinsky had a suggestion to improve this in https://github.com/dotnet/runtime/pull/101087#pullrequestreview-2002311215:\r\n\r\n\u003e I have another idea to avoid silent bad RCWs/CCWs: Given that this would break when built-in COM is enabled, could we remove the attributes/metadata that make an interface a COM interface if any of its members are trimmed? Then we wouldn\u0027t have the bad scenario where someone could say \"don\u0027t keep COM interfaces, but keep built-in COM enabled\", as if a COM interface is trimmed, it\u0027s no longer a COM interface.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOezgIgw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc57OAdm",
                                           "createdAt":  "2024-04-19T20:52:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-19T20:52:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57OAiD",
                                           "createdAt":  "2024-04-19T20:53:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-19T20:53:11Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Remove COM attributes from interfaces modified by trimming",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101148",
        "createdAt":  "2024-04-16T23:48:42Z",
        "number":  101148,
        "author":  "jtschuster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-16T23:59:22Z",
        "body":  "The trim analyzer doesn\u0027t understand the translation from a lambda value to a linq expression and the intrinsic methods that are called in those places, causing some missed warnings.\r\n\r\n```C#\r\n[ExpectedWarning (\"IL2111\", nameof (Property1WithAnnotation) + \".set\", ProducedBy = Tool.Trimmer | Tool.NativeAot)]\r\nstatic void LdToken ()\r\n{\r\n    Expression\u003cFunc\u003cType\u003e\u003e _ = () =\u003e Property1WithAnnotation;\r\n}\r\n\r\n[DynamicallyAccessedMembers (DynamicallyAccessedMemberTypes.PublicNestedTypes)]\r\npublic static Type Property1WithAnnotation { get; set; }",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOesp5lQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc56yl2D",
                                           "createdAt":  "2024-04-16T23:48:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-16T23:48:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56ymjb",
                                           "createdAt":  "2024-04-16T23:53:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "I believe EFCore was working on a generator for Linq Expressions, we may be able to leverage some of their work for this.",
                                           "updatedAt":  "2024-04-16T23:53:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56ynmV",
                                           "createdAt":  "2024-04-16T23:59:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "Closely related to https://github.com/dotnet/linker/issues/3172",
                                           "updatedAt":  "2024-04-16T23:59:21Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Trim analyzer doesn\u0027t recognize Linq Expressions translations",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101149",
        "createdAt":  "2024-04-16T23:51:40Z",
        "number":  101149,
        "author":  "jtschuster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6dgDg==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "sbomer",
                                            "createdAt":  "2024-04-25T17:12:09Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Sergio0694",
                                            "createdAt":  "2024-08-24T01:22:36Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-09-10T16:04:23Z",
        "body":  "Tracking issue for all discrepancies between Trim analyzer, Trimmer, and ILC warnings in Mono.Linker.Tests.Cases\n\n- [ ] https://github.com/dotnet/roslyn/issues/59746\n- [ ] https://github.com/dotnet/linker/issues/2921\n- [ ] https://github.com/dotnet/runtime/issues/83080\n- [ ] https://github.com/dotnet/linker/issues/2669\n- [ ] https://github.com/dotnet/runtime/issues/93718\n- [x] https://github.com/dotnet/runtime/issues/93719\n- [x] https://github.com/dotnet/runtime/issues/86580\n- [x] https://github.com/dotnet/linker/issues/2739\n- [ ] https://github.com/dotnet/linker/issues/1873\n- [ ] https://github.com/mono/linker/issues/2116\n- [ ] https://github.com/dotnet/linker/issues/2638\n- [ ] https://github.com/dotnet/runtime/issues/108523\n- [ ] https://github.com/dotnet/linker/issues/3140\n- [ ] https://github.com/dotnet/linker/issues/3158\n- [ ] https://github.com/dotnet/runtime/issues/118706\n- [ ] https://github.com/dotnet/linker/issues/2273\n- [ ] https://github.com/dotnet/runtime/issues/94427\n- [x] https://github.com/dotnet/runtime/issues/85464\n- [ ] https://github.com/dotnet/runtime/issues/117174\n- [ ] https://github.com/dotnet/runtime/issues/93416\n- [ ] https://github.com/dotnet/linker/issues/2680\n- [x] https://github.com/dotnet/runtime/issues/117158\n- [ ] https://github.com/dotnet/linker/issues/2832\n- [x] https://github.com/dotnet/runtime/issues/101211\n- [x] https://github.com/dotnet/runtime/issues/104911\n- [ ] https://github.com/dotnet/linker/issues/2158\n- [ ] https://github.com/dotnet/runtime/issues/82447\n- [ ] https://github.com/dotnet/linker/issues/3172\n- [x] https://github.com/dotnet/runtime/issues/85042\n- [ ] https://github.com/dotnet/runtime/issues/101191\n- [x] https://github.com/dotnet/runtime/issues/119541\n- [ ] https://github.com/dotnet/runtime/issues/101148\n- [ ] https://github.com/dotnet/linker/issues/2562\n- [ ] https://github.com/dotnet/runtime/issues/101195\n- [ ] https://github.com/dotnet/runtime/issues/104627\n- [x] https://github.com/dotnet/runtime/issues/95118\n- [ ] https://github.com/dotnet/linker/issues/2673\n- [ ] https://github.com/dotnet/runtime/issues/85465\n- [ ] https://github.com/dotnet/runtime/issues/101734\n- [x] https://github.com/dotnet/runtime/issues/104742\n- [x] https://github.com/dotnet/runtime/issues/105345\n- [x] https://github.com/dotnet/runtime/issues/106796\n- [ ] https://github.com/dotnet/runtime/issues/116846",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOespmGQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc56ymYZ",
                                           "createdAt":  "2024-04-16T23:52:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-16T23:52:01Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Trim Analyzer and Trimmer warning parity",
        "labels":  [
                       "User Story",
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101191",
        "createdAt":  "2024-04-17T16:40:53Z",
        "number":  101191,
        "author":  "jtschuster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-15T18:25:07Z",
        "body":  "The compiler generated method bodies of accessors for auto-properties can generate warnings in the trimmer that aren\u0027t found in the analyzer. For example, this getter returns an unannotated field in IL and will warn in the trimmer but not in the analyzer:\n\n```C#\npublic static Type Property5WithAnnotationOnMembers\n    {\n        [ExpectedWarning (\"IL2078\", nameof (Property5WithAnnotationOnMembers) + \".get\", Tool.Trimmer | Tool.NativeAot)]\n        [return: DynamicallyAccessedMembers (DynamicallyAccessedMemberTypes.PublicEvents)]\n        get;\n    }\n```\n\nhttps://github.com/dotnet/runtime/pull/119329 added support for propagating DAM annotations to the compiler generated field in the analyzer, but we don\u0027t try to analyze (what we expected will be generated for) the accessor method body.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxE0wAA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5645Yn",
                                           "createdAt":  "2024-04-17T16:41:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-17T16:41:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DJxG8",
                                           "createdAt":  "2025-09-10T09:30:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikernet",
                                           "body":  "I believe this is either the same or a closely related issue?\n\n```cs\n[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)]\npublic Type ViewModelType { get; }\n\n[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)]\npublic Type ViewType { get; }\n\npublic MappingInfo(\n    Type viewModelType,\n    Type viewType)\n{\n    ViewModelType = viewModelType; // No IL2067 warning\n    ViewType = viewType; // No IL2067 warning\n}\n\n```",
                                           "updatedAt":  "2025-09-10T09:30:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DPc2J",
                                           "createdAt":  "2025-09-10T16:07:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "I believe that was a related issue that @sbomer fixed for .NET 10, but I can\u0027t find the issue. What version of the sdk are you using that produces that behavior?",
                                           "updatedAt":  "2025-09-10T16:07:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DPliO",
                                           "createdAt":  "2025-09-10T16:16:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhtSkQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2025-09-10T17:54:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "@sbomer @MichalStrehovsky Wanted to get your thoughts on the updated issue description. Fixing this would be a fairly simple case of assuming what would be generated by the compiler (just assume the bodies are `ldfld`/`stfld`), but also I can also see the case for closing this as not planned.",
                                           "updatedAt":  "2025-09-10T16:16:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DQ0n7",
                                           "createdAt":  "2025-09-10T17:55:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "The issue description looks good, thanks. I think this would be nice to have for parity, but also not high priority.",
                                           "updatedAt":  "2025-09-10T17:55:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DRbjb",
                                           "createdAt":  "2025-09-10T18:45:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhuA_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jtschuster",
                                                                               "createdAt":  "2025-09-10T19:06:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mikernet",
                                           "body":  "@jtschuster SDK 9.0.304",
                                           "updatedAt":  "2025-09-10T18:45:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DRr89",
                                           "createdAt":  "2025-09-10T19:08:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhuGAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikernet",
                                                                               "createdAt":  "2025-09-10T19:14:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "\u003e SDK 9.0.304\n\nAwesome, that aligns with expectation and should be fixed in .NET 10.",
                                           "updatedAt":  "2025-09-10T19:08:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7D9-9w",
                                           "createdAt":  "2025-09-13T08:37:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikernet",
                                           "body":  "@jtschuster When I build with SDK version `10.0.100-rc.1.25451.107` it also does not warn.",
                                           "updatedAt":  "2025-09-13T08:37:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7ERzBF",
                                           "createdAt":  "2025-09-15T16:27:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "That\u0027s weird, https://github.com/dotnet/runtime/pull/117034 should have fixed this, but I also don\u0027t see a warning. @sbomer any idea why we might not be seeing this warning?",
                                           "updatedAt":  "2025-09-15T16:27:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7ETTAA",
                                           "createdAt":  "2025-09-15T18:19:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "I see the warning on my machine - could you confirm the repro steps? Here\u0027s my repro: https://github.com/sbomer/GetWarnRepro. Just clone that and run `dotnet build` (this has a global.json which requires SDK version `10.0.100-rc.1.25451.107`).\n\n```\nProgram.cs(17,9): warning IL2069: value stored in field \u0027MappingInfo.ViewModelType\u0027 does not satisfy \u0027DynamicallyAccessedMemberTypes.PublicConstructors\u0027 requirements. The parameter \u0027viewModelType\u0027 of method \u0027MappingInfo.MappingInfo(Type, Type)\u0027 does not have matching annotations. The source value must declare at least the same requirements as those declared on the target location it is assigned to.\nProgram.cs(18,9): warning IL2069: value stored in field \u0027MappingInfo.ViewType\u0027 does not satisfy \u0027DynamicallyAccessedMemberTypes.PublicParameterlessConstructor\u0027 requirements. The parameter \u0027viewType\u0027 of method \u0027MappingInfo.MappingInfo(Type, Type)\u0027 does not have matching annotations. The source value must declare at least the same requirements as those declared on the target location it is assigned to.\n```",
                                           "updatedAt":  "2025-09-15T18:25:07Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Trim analyzer doesn\u0027t perform dataflow analysis compiler-generated accessor bodies",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101195",
        "createdAt":  "2024-04-17T17:15:32Z",
        "number":  101195,
        "author":  "jtschuster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-13T22:54:27Z",
        "body":  "Taken from a comment:\r\n\r\n```\r\nNativeAOT has basically the best behavior in these cases - it produces the same warnings\r\nas if the accessor has a direct access to the target member. So if the accessor is correctly annotated\r\nthere will be no warnings.\r\n\r\nTrimmer is the worst - due to the fact that we mark all methods with a given name, we can\u0027t compare\r\nannotations and thus we need to warn on all annotated methods. In addition the accesses are modeled\r\nas reflection accesses so the warning codes are \"Reflection\" codes. When/If we implement\r\ncorrect target resolution, we should be able to emulate the behavior of NativeAOT\r\n\r\nAnalyzer doesn\u0027t warn at all in these cases - analyzer simply can\u0027t resolve targets (at least sometimes)\r\nand so for now we\u0027re not doing anything with UnsafeAccessor in the analyzer.\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeuSV6A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc565JXo",
                                           "createdAt":  "2024-04-17T17:15:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-17T17:15:48Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ILLink: Trimmer, NativeAOT, and Trim analyzer have inconsistent UnsafeAccessor behavior",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101215",
        "createdAt":  "2024-04-17T22:12:50Z",
        "number":  101215,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-12T20:30:48Z",
        "body":  "DynamicallyAccessedMembers annotations are not supported for arbitrary types. The ILLink analyzer normally produces IL2098 warnings when the annotations are applied to unsupported types, but this isn\u0027t working for top-level methods:\r\n\r\n```csharp\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\nRequireAll(GetFoo());\r\n\r\n// This should warn\r\nstatic void RequireAll([DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)] Foo f) {}\r\n\r\nstatic Foo GetFoo() =\u003e new Foo();\r\n\r\nclass Foo {}\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgHxTDw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc567-Il",
                                           "createdAt":  "2024-04-17T22:13:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-17T22:13:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AfFMP",
                                           "createdAt":  "2024-06-07T22:04:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "This is blocked on https://github.com/dotnet/roslyn/issues/14061. I can\u0027t find a way to register a symbol action in the analyzer that gets called for top-level methods. I tried adding a `RegisterSymbolAction` for `SymbolKind.Parameter`, but that faces the same problem as mentioned in https://github.com/dotnet/roslyn/issues/14061#issuecomment-249438327.",
                                           "updatedAt":  "2024-06-07T22:04:38Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ILLink analyzer doesn\u0027t warn for invalid annotations in top-level methods",
        "labels":  [
                       "blocked",
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101434",
        "createdAt":  "2024-04-23T15:04:09Z",
        "number":  101434,
        "author":  "mkhamoyan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8HbxA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RReverser",
                                            "createdAt":  "2024-10-23T18:30:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mhmd-azeez",
                                            "createdAt":  "2024-10-24T14:49:53Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-05-28T17:55:20Z",
        "body":  "### Description\n\nAfter https://github.com/dotnet/runtime/pull/100288 still for browser `UnmanagedCallersOnly` is not called after publish.\n\n### Reproduction Steps\n\ncreate browser sample app \r\n\r\n ```\r\n    public unsafe partial class Test\r\n    {\r\n        public unsafe static int Main(string[] args)\r\n        {\r\n            UnmanagedFunc();\r\n            return 0;\r\n        }\r\n\r\n      [UnmanagedCallersOnly(EntryPoint = \"ManagedFunc\")]\r\n      public static int ManagedFunc(int number)\r\n      {\r\n          // called from UnmanagedFunc\r\n          Console.WriteLine($\"ManagedFunc({number}) -\u003e 42\");\r\n          return 42;\r\n      }\r\n\r\n      [DllImport(\"local\", EntryPoint = \"UnmanagedFunc\")]\r\n      public static extern void UnmanagedFunc(); // calls ManagedFunc\r\n   }\r\n```\r\n\r\nand in `local.c`\r\n\r\n```\r\n#include \u003cstdio.h\u003e\r\n\r\nint ManagedFunc(int number);\r\n\r\nvoid UnmanagedFunc()\r\n{\r\n    int ret = 0;\r\n    printf(\"UnmanagedFunc calling ManagedFunc\\n\");\r\n    ret = ManagedFunc(123);\r\n    printf(\"ManagedFunc returned %d\\n\", ret);\r\n}\r\n```\n\n### Expected behavior\n\n`ManagedFunc` should be called\n\n### Actual behavior\n\nNo build errors, in `pinvoke-table.h` wrapper is there, but `ManagedFunc` is not being called.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nCalling it explicitly \r\n\r\n`((IntPtr)(delegate* unmanaged\u003cint,int\u003e)\u0026ManagedFunc).ToString();`\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiiBugw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc57iY27",
                                           "createdAt":  "2024-04-23T15:04:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-23T15:04:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57iZNZ",
                                           "createdAt":  "2024-04-23T15:04:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-23T15:04:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57t6Lx",
                                           "createdAt":  "2024-04-24T18:59:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "NativeAOT appears to use UnmanagedCallersOnlyAssembly which feeds into https://github.com/dotnet/runtime/blob/dd24e9c3ebaf6cda91fc281657878b75428f178c/src/coreclr/tools/aot/ILCompiler.Compiler/Compiler/UnmanagedEntryPointsRootProvider.cs#L15 @sbomer is there something similar for the trimmer?",
                                           "updatedAt":  "2024-04-24T18:59:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57t6oZ",
                                           "createdAt":  "2024-04-24T19:00:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-24T19:00:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57t6os",
                                           "createdAt":  "2024-04-24T19:00:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-24T19:00:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57up5Y",
                                           "createdAt":  "2024-04-24T20:58:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "ILLink doesn\u0027t have such support. Do we need to add support for UnmanagedCallersOnlyAssembly for this scenario to work? Or could the tooling that generates the interop logic for the UnmanagedCallersOnly method be made to pass along some extra roots to ILLink?\r\n\r\n@MichalStrehovsky @AaronRobinsonMSFT",
                                           "updatedAt":  "2024-04-24T20:58:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57uwWj",
                                           "createdAt":  "2024-04-24T21:12:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e NativeAOT appears to use UnmanagedCallersOnlyAssembly which feeds into\r\n\r\nNativeAOT would only export these if we\u0027re building a library. Is this building an executable that also acts as a library? Feels like a pretty special thing and I agree with Sven that maybe whatever is generating `pinvoke-table.h` could also generate a roots descriptor that could be passed to illink to keep these.",
                                           "updatedAt":  "2024-04-24T21:12:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57uyrg",
                                           "createdAt":  "2024-04-24T21:18:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Alternatively if we expect to support trimmed native libraries at some point, a general purpose mechanism could be added to illink in preparation for that - I could see a new command argument allowing to specify a list of assemblies where UnmanagedCallersOnly methods with a non-empty `EntryPoint` should be considered as roots. This command line argument could be used for libraries, but also for these executables that also export things.",
                                           "updatedAt":  "2024-04-24T21:18:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I6nw9",
                                           "createdAt":  "2024-08-19T17:24:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-19T17:24:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I6oGa",
                                           "createdAt":  "2024-08-19T17:25:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "It seems this is gap in ILink, please re-assign",
                                           "updatedAt":  "2024-08-19T17:25:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I7pZ-",
                                           "createdAt":  "2024-08-19T19:56:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e It seems this is gap in ILink, please re-assign\r\n\r\nIs https://github.com/dotnet/runtime/issues/101434#issuecomment-2075854243 not feasible?",
                                           "updatedAt":  "2024-08-19T19:56:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I_k1J",
                                           "createdAt":  "2024-08-20T09:11:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "My understanding is that `_GenerateManagedToNative` happens **after** `_RunILLink` in `Publish` nested build.\r\nTherefore the method is already gone when we get to it there.\r\n\r\nBinlog\r\n[wasi-uco-publish.zip](https://github.com/user-attachments/files/16672601/wasi-uco-publish.zip)\r\n\r\nBut overall it feels like the `UnmanagedCallersOnly` is expressing the intent pretty well and that ILLink is the right tool which should honor that intent.\r\n\r\nThose methods are created\r\n- for linking native code\r\n- for creating WASM or WASI export\r\n- by hands by app or lib developer\r\n- by code gen\r\n   - which could be 3rd party, for example could be `wit-bindgen` for WASI\r\n   - Roslyn, for NAOT + JavaScript\r\n\r\nWe could mandate that it\u0027s not enough, for those tools to do `UnmanagedCallersOnly` + sometimes also `WasmImportLinkageAttribute`, and that they have to author the link descriptors too. Is that the right DX ?\r\n\r\nFor a library in a nuget, we still don\u0027t have solution for running `_GenerateManagedToNative` on that either.\r\n\r\nWhat are the challenges to implement it in ILLInk ? What makes it \"pretty special thing\" ?\r\n\r\nWhy this is not a problem for NAOT on windows when they want to publish native DLL with exported native methods ? Are they not trimming it ?",
                                           "updatedAt":  "2024-08-20T09:16:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I_ywa",
                                           "createdAt":  "2024-08-20T09:39:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e Why this is not a problem for NAOT on windows when they want to publish native DLL with exported native methods ? Are they not trimming it ?\r\n\r\nIf I understand it correctly, WASM is hitting this when building an _executable_. `UnmanagedCallersOnly` methods are not considered exported roots on native AOT when building an executable either. They are considered roots only when building `\u003cOutputType\u003eLibrary\u003c/OutputType\u003e`.\r\n\r\nILLink currently doesn\u0027t support trimming `\u003cOutputType\u003eLibrary\u003c/OutputType\u003e`, AFAIK we don\u0027t have scenarios where it would be useful right now (these would not be downstream consumable) and nobody defined what trimming a self-contained library means. Without that, there\u0027s no need to even look at UnmanagedCallersOnly within ILLink (it would not be desirable to root UnmanagedCallersOnly with non-empty EntryPoint in the general case).\r\n\r\nIf I understand it correctly, this would be a one-off ILLink feature for WASM only. That\u0027s why the question of whether we can do it elsewhere so that WASM specific things stay together with WASM.",
                                           "updatedAt":  "2024-08-20T09:39:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JMrW6",
                                           "createdAt":  "2024-08-21T11:16:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e \u003e Why this is not a problem for NAOT on windows when they want to publish native DLL with exported native methods ? Are they not trimming it ?\r\n\r\nAfter discussing it offline, I understood that NAOT doesn\u0027t need to trim native DLL, because DLLs are never self-contained.\r\nBecause they share the runtime installed elsewhere on the OS, the trimming doesn\u0027t make much sense.\r\n\r\n\u003e ILLink currently doesn\u0027t support trimming `\u003cOutputType\u003eLibrary\u003c/OutputType\u003e`\r\n\r\n`\u003cOutputType\u003eLibrary\u003c/OutputType\u003e` for Browser it makes sense to trim it when it\u0027s part of the whole application. \r\n- If it bundled some native code (C code or object file) to be staticaly linked into .wasm file, we also need to protect UCO. Because that C code would expect to find the native symbols during (LLVM) linking.\r\n- if there are `JSExport`, currently we find them via reflection, but it would be better to also make them into WASM export via UCO. That would unify it with NAOT LLVM branch.\r\n\r\nFor WASI `\u003cOutputType\u003eLibrary\u003c/OutputType\u003e` would mean something else than for the rest of dotnet.\r\nIt would mean that we produce WASI component, which has self-contained dotnet runtime inside. If you have two such WASI components, they would not share the runtime but we would have two runtimes.\r\nFor such component it makes sense to trim it as if it was the whole APP.\r\nThe difference is that there is not just one entrypoint, but a WASI component could have multiple exports.\r\n\r\nThe next question is should we protect all UCOs ? \r\nI think the answer is yes, because they represent explicit public native/WASI API of the component.\r\n\r\nAnd if we need to express more nuance to trim some UCOs, I think that ILLInk\u0027s `feature=\"EnableOptionalFeature\" featurevalue=\"false\"` is way how we can trim the functionality, including specific UCOs.\r\nIt would be opt-in trimming, rather than opt-out.\r\n\r\n\u003e If I understand it correctly, this would be a one-off ILLink feature for WASM only. That\u0027s why the question of whether we can do it elsewhere so that WASM specific things stay together with WASM.\r\n\r\nI see that now, thanks. It still feels to me that **ILLink is the right place to implement UCO rooting**.\r\nSo that we don\u0027t have to implement another msbuild pass, which would do cecil/reflection over all the assemblies one more time.\r\nWe already have too many passes in WASM publish and it\u0027s already slow.\r\n\r\n@sbomer do you have objections ? And guidance ?\r\n\r\n",
                                           "updatedAt":  "2024-08-21T11:19:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JQJHQ",
                                           "createdAt":  "2024-08-21T18:28:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "My main objection is that keeping all UCO in the app and its dependencies would lead to unnecessary bloat.\r\n\r\nAre you aware of any scenarios where the managed code genuinely has no insight into whether the native code will call back into managed? In the sample app above, I think a better solution would be for UnmanagedFunc to have a DynamicDependencyAttribute pointing to ManagedFunc. Using that approach in a library would allow the both methods to be removed if the library code path is unused in a trimmed app.\r\n\r\n\u003e The next question is should we protect all UCOs ?\r\nI think the answer is yes, because they represent explicit public native/WASI API of the component.\r\n\r\nHow will this work if I\u0027m trying to implement a WASI component, and I have some nuget dependencies with UCO, but I don\u0027t want those to be exports of my WASI Component?",
                                           "updatedAt":  "2024-08-21T18:29:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JtH-l",
                                           "createdAt":  "2024-08-26T14:07:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e Are you aware of any scenarios where the managed code genuinely has no insight into whether the native code will call back into managed? \r\n\r\nI guess that\u0027s true with any WASI component which has more than one export. At build time, you don\u0027t know which of them would be used by other WASI component (for example written in python) that is consuming your component at runtime.\r\n\r\nAlso in case that there is nuget/assembly with UCOs + WasmImportLinkageAttribute. \r\nIt means the nuget library wants to contribute into list of exports of the final WASI component.\r\nIf such nuget would contain list of ILLink descriptors for **all exports**, we didn\u0027t learn anything new from such list.\r\n\r\nMore specific example I could imagine is WASI HTTP (server) handler, wrapper translating WASI API into C# API.\r\nSuch nuget would probably contain WASI (UCO) export on behalf of the C# application logic assembly.\r\n\r\n\u003e How will this work if I\u0027m trying to implement a WASI component, and I have some nuget dependencies with UCO, but I don\u0027t want those to be exports of my WASI Component?\r\n\r\nI suggest that UCOs should be protected by default and that trimming them would be opt-in via ILLink substitution/stub.\r\n\r\n",
                                           "updatedAt":  "2024-08-26T14:10:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JuTMG",
                                           "createdAt":  "2024-08-26T16:36:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Thank you, that helps me understand the scenarios a little better. A few more questions/comments:\r\n\r\nI agree that when building a library, UCO should be preserved, so that they exist when building an application that depends on the library (but whether they should be trimmed as part of the app build is a separate question). If we added a library trimming mode, I think it would make sense to preserve UCO in that mode - so for the rest of my comments I\u0027ll assume we\u0027re talking about trimming an app or final WASI component.\r\n\r\n\u003e Also in case that there is nuget/assembly with UCOs + WasmImportLinkageAttribute.\r\nIt means the nuget library wants to contribute into list of exports of the final WASI component.\r\n\r\nThis isn\u0027t entirely clear to me. Could it not be the case that a library has UCO for interop with library-specific native code, but doesn\u0027t want to contribute it to the exports of the final WASI component?\r\n\r\n\u003e I suggest that UCOs should be protected by default and that trimming them would be opt-in via ILLink substitution/stub.\r\n\r\nWe don\u0027t currently have a way to do this. The feature substitutions are able to:\r\n- conditionally substitute method bodies to a constant\r\n- conditionally root a method\r\n\r\nBut there\u0027s not a way to conditionally remove a method (other than making sure it\u0027s not called). We could probably come up with a way, but the model that currently makes most sense to me is to allow UCO methods to be removed by default. This allows libraries to preserve UCO methods only when certain code paths are reachable (for example via DynamicDependencyAttribute), allowing them to be removed if the library is unused or partially unused.",
                                           "updatedAt":  "2024-08-26T16:36:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Juo-P",
                                           "createdAt":  "2024-08-26T17:26:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e Could it not be the case that a library has UCO for interop with library-specific native code\r\n\r\nYes, you are right that there could be UCOs aimed at native code and we don\u0027t know if that native code uses it or not.\r\nIt is actually part of this issue. Right now you have to have link descriptor for those you want to use from native code.\r\n\r\nI don\u0027t know how bad it would be if we rooted all of them. Are there (native) interop scenarios which generate UCOs opportunistically assuming it would be trimmed later ? \r\n(Leading to unexpected bloat as opposed to necessary functionality)\r\n\r\n\u003e The feature substitutions are able to:\r\n\u003e     * conditionally substitute method bodies to a constant\r\n\r\nThat should be enough to trim extra functionality which UCO rooted. \r\nI see now that it would not remove the UCO/export.\r\n\r\n\u003eIf such nuget would contain list of ILLink descriptors for **all exports**, we didn\u0027t learn anything new from such list.\r\n\r\n@lewing suggested that wit-bindgen is in better position to categorize the methods into groups by interface they implement. \r\n\r\nSo that the app developer would have easier time to express what is to be preserved or trimmed by that group/interface.\r\nThey would still have to do something (root or trim the group), it can\u0027t be automagic end to end.\r\n\r\nLet\u0027s continue thinking about it.",
                                           "updatedAt":  "2024-08-26T17:26:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ju4NJ",
                                           "createdAt":  "2024-08-26T18:02:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "\u003e After discussing it offline, I understood that NAOT doesn\u0027t need to trim native DLL, because DLLs are never self-contained.\r\nBecause they share the runtime installed elsewhere on the OS, the trimming doesn\u0027t make much sense.\r\n\r\nNAOT does \"trim\" code from DLLs, because from the NAOT perspective, the output is always a self-contained native artifact. The difference between executables and libraries then becomes only about what are the entrypoints.\r\n\r\nThe current NAOT model is that you need to specify the assemblies for which `EntryPoint`ed UCOs are to be considered roots. The assembly from the project you\u0027re publishing is considered to be in this set implicitly, and additional ones can be specified via `UnmanagedEntryPointsAssembly` (as yet undocumented). This works fine for NAOT native libraries because they\u0027re not widely used (yet), and the exports naturally tend to live in one central place - that top-level project.\r\n\r\nIt works less well for WASI components, where it\u0027s expected that you can have exported UCOs in referenced assemblies. It does not work for JSExports.\r\n\r\nThe NativeAOT-LLVM experience with this problem suggests that _some_ more automatic solution is needed; this is easily the top recurring problem people open issues about. See e. g. https://github.com/dotnet/runtimelab/issues/2626.",
                                           "updatedAt":  "2024-08-26T18:02:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jv4HA",
                                           "createdAt":  "2024-08-26T20:28:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvzZnA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2024-08-26T23:30:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2024-08-27T09:55:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "This is to above point about the need for some UnmanagedEntryPointsAssembly-like mechanism:\r\n\r\nWe\u0027ve talked a bit with Pavel on Discord, and it was pointed out that it would be undesirable to specify the capability for rooting UCOs on an \"unconditional\" basis in a way that would force the trimmer (or ILC) to look at all of the referenced assemblies for unmanaged exports, many of which don\u0027t need to be looked at today.",
                                           "updatedAt":  "2024-08-26T20:28:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Jw6Mi",
                                           "createdAt":  "2024-08-26T23:46:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "\u003e Are there (native) interop scenarios which generate UCOs opportunistically assuming it would be trimmed later?\r\n\r\nMy understanding of the xamarin-macios managed static registrar, after reading through some of the discussion and code around https://github.com/dotnet/runtime/issues/80912, is that it:\r\n- generates UCO wrappers for all methods that may need to be exported to Objective-C\r\n- runs trimming to determine which of the wrapped methods are actually needed\r\n- has custom ILLink logic (that runs after marking) to ensure the UCO methods are preserved only for the preserved wrapped methods\r\n- passes the ILLink output to NativeAot, and sets UnmanagedEntryPointsAssembly to include all assemblies so that all of the remaining UCO methods are kept in the native code",
                                           "updatedAt":  "2024-08-26T23:46:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KFH-v",
                                           "createdAt":  "2024-08-29T02:33:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "@sbomer my understanding was that we want to move away from custom linker passes as a solution, are you suggesting that is the correct approach?",
                                           "updatedAt":  "2024-08-29T02:33:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KIG6D",
                                           "createdAt":  "2024-08-29T11:29:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Notes from discussion with @SingleAccretion earlier this week\r\n\r\n- use `UnmanagedEntryPointsAssembly` to tag limited set of assemblies that ILLink should load and should preserve UCO\u0027s in\r\n   - this already works for NAOT and it\u0027s passing `--generateunmanagedentrypoints` to ILLink\r\n   - we need to add it also to WASM publish/trim targets\r\n   - it probably doesn\u0027t float with `ProjectReference` and there could be [challenge](https://github.com/dotnet/msbuild/issues/5797)\r\n   - it probably doesn\u0027t float with libraries inside of nuget\r\n- we could add (Roslyn analyzer?) warning for missing `UnmanagedEntryPointsAssembly` in library projects with UCOs targeting WASM\r\n- we could add new `--exclude-unmanaged-entrypoints \u003cnamespace-prefix\u003e` to allow users to opt-out\r\n    - this is similar to wit-bindgen generated descriptor groups, but simpler and it would also work for non-WASI UCOs\r\n    - we could also do it for class name or method name in same format as ILLink\r\n    - we could also introduce new XML file for this\r\n    - we can\u0027t really automatically do what macios does, because we generally don\u0027t have visibility into what will be used (as dicussed above)\r\n",
                                           "updatedAt":  "2024-08-29T11:29:43Z"
                                       }
                                   ],
                         "totalCount":  23
                     },
        "title":  "[mono][wasm] TrimMode=full is trimming UnmanagedCallersOnly",
        "labels":  [
                       "arch-wasm",
                       "area-Tools-ILLink",
                       "os-wasi",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101951",
        "createdAt":  "2024-05-06T23:02:58Z",
        "number":  101951,
        "author":  "jtschuster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-14T16:06:04Z",
        "body":  "Analyzer will not warn that an element of a multidimensional array does not satisfy DAM constraints.\r\n\r\nArrayDataFlow.cs: \r\n```C#\r\n// Multidimensional Arrays not handled -- assumed to be UnknownValue\r\n[UnexpectedWarning (\"IL2062\", nameof (DataFlowTypeExtensions.RequiresPublicMethods), Tool.Trimmer | Tool.NativeAot, \"\")]\r\n[ExpectedWarning (\"IL2062\", nameof (DataFlowTypeExtensions.RequiresAll), Tool.Trimmer | Tool.NativeAot, \"\")]\r\nstatic void TestArrayWithInitializerOneElementStaticType ()\r\n{\r\n\tType[,] arr = new Type[,] { { typeof (TestType) } };\r\n\tarr[0, 0].RequiresAll ();\r\n\tarr[0, 1].RequiresPublicMethods (); // Should warn - unknown value at this index\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfP6-ww==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc58_r7D",
                                           "createdAt":  "2024-05-06T23:03:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-06T23:03:13Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ILLink: Trim analyzer doesn\u0027t warn on dataflow through multidimensional array",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101955",
        "createdAt":  "2024-05-07T00:12:02Z",
        "number":  101955,
        "author":  "jtschuster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-03T16:13:00Z",
        "body":  "The analyzer tracks the assignment of the argument to the annotated parameter, but if the argument is a reference to an annotated value, it should consider it an assignment from the parameter value to the argument value.\r\n\r\nThe following should warn for passing the field to the parameter, but also the parameter to the field.\r\n \r\n```C#\r\npublic static void PassRefToField ()\r\n{\r\n\tMethodWithRefParameter (ref s_typeWithPublicParameterlessConstructor);\r\n\tvar x = s_typeWithPublicParameterlessConstructor;\r\n\tMethodWithRefParameter (ref x);\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfP-qcQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc58_6px",
                                           "createdAt":  "2024-05-07T00:12:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-07T00:12:24Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ILLink: Trim analyzer doesn\u0027t warn on ref parameters as assignments from parameter to argument",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102576",
        "createdAt":  "2024-05-22T18:12:50Z",
        "number":  102576,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4FiQg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jtschuster",
                                            "createdAt":  "2024-05-22T18:38:05Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-10T17:42:06Z",
        "body":  "From @MichalStrehovsky in https://github.com/dotnet/runtime/pull/102528#issuecomment-2123957536:\r\n\r\n\u003e Another option could be to just stop doing the special behavior that looks for an event when an accessor is marked and let the event itself be trimmed. Only keep events that are visible targets of reflection (in that case consider the accessors reflection accessed as well).\r\n\u003e\r\n\u003e I think there is an issue somewhere to do the same thing with properties. It\u0027s a bit more tricky for properties because debugger looks at them (we could only trim property metadata with DebuggerSupport=false), but events aren\u0027t surfaced in the debugger (and I don\u0027t see a future where they could be surfaced based on how event metadata works) so this shouldn\u0027t really affect debuggability and we can do it always.\r\n\r\nThis would simplify some of the special handling around events (see https://github.com/dotnet/runtime/pull/102528 for full context).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfrABBA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5-sAEE",
                                           "createdAt":  "2024-05-22T18:17:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-22T18:17:16Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Allow trimming of events when event methods are not reflected over",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102802",
        "createdAt":  "2024-05-29T08:59:25Z",
        "number":  102802,
        "author":  "vyacheslav-volkov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4Pq8g==",
                          "nodes":  [
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "hez2010",
                                            "createdAt":  "2024-05-29T17:06:42Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-07-01T21:53:33Z",
        "body":  "### Background and motivation\n\nI\u0027m using JetBrains.Annotations as internal classes in my library and since trimmer doesn\u0027t know about these attributes they will be preserved in the final build, but since these attributes are only for code annotations I think it would be nice to have some sort of mechanism, allowing you to mark them as safe for trimming.\r\nI suggest adding a `TrimmableAttributeAttribute` which we can use to mark custom code annotation attributes and the linker will know that this attribute can be safely trimmed.\r\n\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics.CodeAnalysis;\r\n\r\n[AttributeUsage(AttributeTargets.Class)]\r\npublic sealed class TrimmableAttributeAttribute : Attribute;\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n[AttributeUsage(AttributeTargets.Parameter)]\r\n[TrimmableAttribute]\r\npublic class RequireStaticDelegateAttribute : Attribute\r\n{\r\n    public bool IsError { get; set; }\r\n}\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOf3KdAQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5_XpA9",
                                           "createdAt":  "2024-05-29T08:59:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-componentmodel-dataannotations\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-29T08:59:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_ZxoA",
                                           "createdAt":  "2024-05-29T13:48:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-29T13:48:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_bfnE",
                                           "createdAt":  "2024-05-29T17:22:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjwUxg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vyacheslav-volkov",
                                                                               "createdAt":  "2024-05-29T18:12:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "hez2010",
                                           "body":  "Why not just add a property to `AttributeUsageAttribute`?\r\n\r\n```cs\r\n[AttributeUsage(AttributeTargets.Parameter, Trimmable = true)]\r\npublic class RequireStaticDelegateAttribute : Attribute\r\n{\r\n    public bool IsError { get; set; }\r\n}\r\n```",
                                           "updatedAt":  "2024-05-29T17:22:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_buTp",
                                           "createdAt":  "2024-05-29T17:59:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "`JetBrains.Annotations` attributes are marked with `[Conditional(\"JETBRAINS_ANNOTATIONS\")]`. They will not be in your final build. You can also mark your own attributes as conditional.",
                                           "updatedAt":  "2024-05-29T18:00:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_b1wz",
                                           "createdAt":  "2024-05-29T18:17:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vyacheslav-volkov",
                                           "body":  "\u003eWhy not just add a property to AttributeUsageAttribute?\r\n\r\n@hez2010  If this can be added to the base class it would be great.\r\n\r\n\u003eJetBrains.Annotations attributes are marked with [Conditional(\"JETBRAINS_ANNOTATIONS\")]. They will not be in your final build. You can also mark your own attributes as conditional.\r\n\r\n@colejohnson66  If you want to ship your library to other developers, you will have to include them as internal classes or compile with `JETBRAINS_ANNOTATIONS` flag set.\r\n\r\n\u003eWhen building a library that is intended to be shipped to others, we can include the JetBrains Annotations source code directly in our project (or compile with the JETBRAINS_ANNOTATIONS flag set). https://blog.jetbrains.com/dotnet/2018/05/03/what-are-jetbrains-annotations/\r\n\r\nAnother example: many source generators use their own marker attributes just to generate sources, and these can be safely trimmed, the solution with `ConditionalAttribute` does not solve all cases.",
                                           "updatedAt":  "2024-05-29T18:21:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_cp0B",
                                           "createdAt":  "2024-05-29T20:33:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "Many attributes are trimmable in some scenarios and not in other scenarios. The nullability attributes are a good example. They are trimmable unless the app uses `NullabilityInfoContextSupport`. (#88805 tracks the problems around this.)",
                                           "updatedAt":  "2024-05-29T20:33:37Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: Add the ability to trim custom attributes",
        "labels":  [
                       "api-suggestion",
                       "linkable-framework",
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102830",
        "createdAt":  "2024-05-29T16:40:10Z",
        "number":  102830,
        "author":  "jtschuster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4QhUg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichalStrehovsky",
                                            "createdAt":  "2024-05-29T20:11:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2024-05-30T07:13:23Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-06-30T18:04:14Z",
        "body":  "The trim analyzer recognizes and understands `\u0026\u0026` and `||` and will not warn for code that is guarded by a feature guard, but the trimmer and ilc don\u0027t understand it and will not eliminate the branch with problematic code and will warn if there is code that should be considered guarded.\r\n\r\nThis is expected according to the feature-checks docs: https://github.com/dotnet/runtime/blob/main/docs/design/tools/illink/feature-checks.md#boolean-andor\r\n\r\nIf neither tool recognizes the pattern and will warn, does it make sense for the analyzer to not warn and leave the user surprised at publish?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOf3N2FQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5_bOR2",
                                           "createdAt":  "2024-05-29T16:40:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-29T16:40:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_c3YV",
                                           "createdAt":  "2024-05-29T21:12:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "The analyzer behavior fell out of the control-flow graph representation. It\u0027s one of those cases where the analyzer would have to do extra work to not recognize that pattern, but the other tools would have to do extra work to recognize it. Personally I\u0027m more inclined to teach the other tools to recognize it.\r\n\r\nBut I also agree that ideally the analyzer would match the other tools. I haven\u0027t looked into it yet, but if it\u0027s simple enough to make the analyzer not recognize the pattern I would be supportive.",
                                           "updatedAt":  "2024-05-29T21:12:37Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ILLink/ILC don\u0027t analyze boolean expressions for branch removal",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102856",
        "createdAt":  "2024-05-29T23:53:29Z",
        "number":  102856,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-02T12:00:42Z",
        "body":  "When marking fields for reflection, ILLink usually doesn\u0027t treat compiler-generated backing fields specially. They will be marked as any other field if referenced due to DAMT annotations, for example.\r\n\r\nHowever, there is one case where we have an optimization to avoid marking these fields if the corresponding property is not marked - that happens for root descriptors which reference the field using `preserve=\"fields\"`.\r\n\r\nThere is a similar issue https://github.com/dotnet/runtime/issues/85042 about warnings for reflection access to compiler-generated code, where we decided we would not try to produce warnings in this case. I\u0027m not sure it would be feasible to avoid marking the compiler-generated methods in that case, because I think dependency injection inspects compiler-generated code via reflection.\r\n\r\nBut we might consider not marking compiler-generated backing fields, as suggested by @jtschuster in https://github.com/dotnet/runtime/pull/102850/files#r1619568383. The current optimization looks for a field name ending with `\u003ek__BackingField`:https://github.com/dotnet/runtime/blob/e2a46dd6cc6a849c32a4065727f8ce8e32903afa/src/tools/illink/src/linker/Linker.Steps/MarkStep.cs#L2888\r\n\r\nMaybe a more robust way to do this would be to look for `CompilerGeneratedAttribute` on the field.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOf3k8Ew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5_eTwT",
                                           "createdAt":  "2024-05-30T04:25:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-30T04:25:03Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Don\u0027t mark compiler-generated backing fields for reflection in ILLink",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103289",
        "createdAt":  "2024-06-11T16:05:39Z",
        "number":  103289,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-10T16:20:02Z",
        "body":  "Sounds like this could help us catch unintended changes to the package in the future.\r\n\r\nContext: onboarding the dependency analysis framework from ILCompiler resulted in an unintended nuget dependency being added to the Microsoft.NET.ILLink package: https://github.com/dotnet/runtime/pull/103251\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Use libraries package testing infrastructure for ILLink",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103401",
        "createdAt":  "2024-06-13T08:11:11Z",
        "number":  103401,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-13T08:11:30Z",
        "body":  "ILLinker could theoretically do the same optimization as native AOT is doing and trim method names when StackTraceSupport is disabled. Since method names are also visible in debuggers, we\u0027d probably need to condition that on DebuggerSupport also being false.\r\n\r\nBut with that, we should in theory be able to rename methods that are not reflection visible and give them shorter names (or even `compilercontrolled` visibility and no name).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgQp1eA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6BCnV4",
                                           "createdAt":  "2024-06-13T08:11:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-13T08:11:29Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Trim method names when StackTraceSupport and DebuggerSupport is false",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103589",
        "createdAt":  "2024-06-17T16:54:07Z",
        "number":  103589,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-10T16:20:18Z",
        "body":  "Currently we build Microsoft.DotNet.Cecil (from [dotnet/cecil](https://github.com/dotnet/cecil)) using a versioning scheme that matches upstream ([jbevain/cecil](github.com/jbevain/cecil)). This is left over from when we used to depend on the upstream Mono.Cecil in dotnet/linker (see https://github.com/dotnet/linker/pull/1515/files for more context).\r\n\r\nNow that we no longer depend on the upstream build, we could adopt the common versioning scheme used by other components.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgZMG7Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Bkwbt",
                                           "createdAt":  "2024-06-17T16:56:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-17T16:56:25Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Update versioning scheme for Microsoft.DotNet.Cecil",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103831",
        "createdAt":  "2024-06-21T18:33:45Z",
        "number":  103831,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-10T16:23:02Z",
        "body":  "Currently ILLink has a relaxed default that makes a best-effort attempt to continue when it fails to resolve assemblies/types/members. This leads to bugs like https://github.com/dotnet/runtime/issues/93797. We should consider making the resolution behavior stricter.\r\n\r\nHistorically, the relaxed behavior (`--skip-unresolved true`) was useful in combination with assembly-level trimming:\r\n- Shims like mscorlib.dll often had dangling type forwarders\r\n- We would sometimes encounter apps where some unused code path had a dangling type reference\r\n\r\nWhen using aggressive trimming, I don\u0027t see any good reason for the relaxed behavior (`--skip-unresolved true`).\r\n\r\nI propose we make the following changes:\r\n1. Make the relaxed mode (`--skip-unresolved true`) strict for everything but type forwarders.\r\n2. Change the default to be strict (`--skip-unresolved false`) when using `TrimMode=link`\r\n\r\nI would make the change early in .NET 10 to give us time to respond to breaks. https://github.com/dotnet/runtime/pull/91007 has additional context describing Unity\u0027s use of these options.\r\n\r\n@vitek-karas @MichalStrehovsky @dotnet/illink",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOglx5ZQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6CIfkP",
                                           "createdAt":  "2024-06-21T18:34:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-21T18:34:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CIhBT",
                                           "createdAt":  "2024-06-21T18:38:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Last time we talked about this we [noted](https://github.com/dotnet/runtime/pull/91007#issuecomment-1700040590):\r\n\u003e The potential benefit of being stricter is that it could turn some runtime exceptions into build-time warnings/errors if you\u0027re trimming. But our philosophy behind trimming is that it should aim to warn about differences in behavior introduced by trimming, so producing these warnings isn\u0027t necessarily desirable for us.\r\n\r\nWhile it would be nice to limit errors to the cases where trimming introduces behavior differences, I think it is not worth the complexity of correctly handling dangling references. Unity tried to do this and this was their experience:\r\n\r\n\u003e Historically, in UnityLinker we hooked into the HandleUnresolvedMethod and HandleUnresolvedType calls and used that to record things that were missing so that UnityLinker could recreate these things. The history and motivation behind this predates me, but the impact was that problems with missing types and methods because runtime problems instead of build time problems. Which is more in line with the behavior you\u0027d get if you had out of sync assemblies in a normal console app and ran it.\r\n\u003e\r\n\u003e This scheme was unsustainable. It many cases you can\u0027t correctly recreate missing things. We won\u0027t be doing this going forward with CoreCLR bcl.",
                                           "updatedAt":  "2024-06-21T18:38:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CIiFX",
                                           "createdAt":  "2024-06-21T18:41:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "@mrvoorhe last time we discussed this you [mentioned](https://github.com/dotnet/runtime/pull/91007#issuecomment-1706541125):\r\n\r\n\u003e \r\n\u003e I was thinking of special casing the two missing assemblies that the mscorlib shim references. I forget how, but I was ultimately able to get our linker tests green without having to resort to that.\r\n\u003e \r\n\u003e Those two assemblies may not be enough. I may have to do what you suggest and treat missing references in forwarders specially. We\u0027ll see what happens.\r\n\r\nI\u0027m curious if you have any more insights, and whether you ended up treating forwarders specially.",
                                           "updatedAt":  "2024-06-21T18:41:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CR69m",
                                           "createdAt":  "2024-06-24T06:46:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Native AOT has similar code to be able to deal with missing assembly references. We regularly get bug reports when someone tries to compile something with missing references and it hits a code path we don\u0027t handle well. I even saw at least one NuGet package that was explicitly authored to have missing dependencies (the dependency was behind a lightup).\r\n\r\nSo this is purely a tradeoff between extending the funnel of \"compatible-with-trimming\" code and engineering improvement from not having to deal with missing references. In the native AOT compiler case, this is in a mostly leafy place (we basically just add try/catch in places that are recoverable), so I\u0027ve never considered removing it. I don\u0027t know in details how pervasive it is in the illinker codebase so I can\u0027t give much of an opinion.",
                                           "updatedAt":  "2024-06-24T06:46:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CWxol",
                                           "createdAt":  "2024-06-24T16:53:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrvoorhe",
                                           "body":  "\u003e @mrvoorhe last time we discussed this you [mentioned](https://github.com/dotnet/runtime/pull/91007#issuecomment-1706541125):\r\n\u003e \r\n\u003e \u003e I was thinking of special casing the two missing assemblies that the mscorlib shim references. I forget how, but I was ultimately able to get our linker tests green without having to resort to that.\r\n\u003e \u003e Those two assemblies may not be enough. I may have to do what you suggest and treat missing references in forwarders specially. We\u0027ll see what happens.\r\n\u003e \r\n\u003e I\u0027m curious if you have any more insights, and whether you ended up treating forwarders specially.\r\n\r\n@sbomer Missing forwarders in the bcl caused some pain.  I didn\u0027t think about forgiving forwarder assembly resolution failures across the board like you\u0027ve mentioned.  What we have currently is this ugly list of assembly names not to error on if we fail to resolve them.\r\n```\r\npublic static bool IsAssemblyKnownToBeReferencedByShimsAndNotIncludedInBCL(string assemblyName)\r\n    {\r\n        switch (assemblyName)\r\n        {\r\n            // These are .NET Framework assemblies that are referenced by the mscorlib.dll shim in .NET but don\u0027t exist in the BCL\r\n            case \"System.Security.Permissions\":\r\n            case \"System.Threading.AccessControl\":\r\n            case \"System.CodeDom\":\r\n            case \"Microsoft.Win32.SystemEvents\":\r\n            case \"System.Configuration.ConfigurationManager\":\r\n            case \"System.Diagnostics.PerformanceCounter\":\r\n            case \"System.Diagnostics.EventLog\":\r\n            case \"System.IO.Ports\":\r\n            case \"System.Windows.Extensions\":\r\n            case \"System.Drawing.Common\":\r\n\r\n            // Referenced by System.Data\r\n            case \"System.Data.SqlClient\":\r\n            case \"System.Data.Odbc\":\r\n            case \"System.Data.OleDb\":\r\n\r\n            // Referenced by System.Security\r\n            case \"System.Security.Cryptography.Pkcs\":\r\n            case \"System.Security.Cryptography.ProtectedData\":\r\n            case \"System.Security.Cryptography.Xml\":\r\n\r\n            // Referenced by System.Runtime.Serialization\r\n            case \"System.Runtime.Serialization.Schema\":\r\n\r\n            // Referenced by System.ServiceModel.Web\r\n            case \"System.ServiceModel.Syndication\":\r\n\r\n            // Referenced by System.ServiceProcess\r\n            case \"System.ServiceProcess.ServiceController\":\r\n\r\n            // Referenced by WindowsBase\r\n            case \"System.IO.Packaging\":\r\n\r\n                return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n```",
                                           "updatedAt":  "2024-06-24T16:54:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CXFr9",
                                           "createdAt":  "2024-06-24T17:42:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrvoorhe",
                                           "body":  "\u003e2. Change the default to be strict (--skip-unresolved false) when using TrimMode=link\r\n\r\nI\u0027m OK with that change.   That said, a couple thoughts.\r\n\r\nI would setup some projects that reference and use the .NET Framework shim assemblies.  I had to add that `IsAssemblyKnownToBeReferencedByShimsAndNotIncludedInBCL` method in order to get UnityLinker to process all of the assemblies in the BCL without crashing when `--skip-unresolved false`.   Maybe the MSBuild + ILLink setup won\u0027t have the same problems.  I assume those missing forwarders have nuget assemblies that will have been pulled down so that illink doesn\u0027t encounter so man missing forwarders?\r\n\r\nWe don\u0027t have UnityLinker w/ CoreCLR running in Unity yet.  So I have no new data on my point of concern about how problematic `--skip-unresolved false` could be.   We have UnityLinker processing coreclr assemblies in our linker tests and IL2CPP tests, but that\u0027s a far cry from Unity projects with all sorts of code gen and complex setups that could produce assemblies with missing types \u0026 methods. \r\n\r\n\r\n\u003e1. Make the relaxed mode (--skip-unresolved true) strict for everything but type forwarders.\r\n\r\nWhat\u0027s the motivation for changing the behavior of `--skip-unresolved true`?  In my experience (which is in the context of Unity, which means no nuget support, .NET Framework assemblies) the unresolved errors are generally trigger by either\r\na) Invalid IL generated by some code generation tool.  The code is just flat out wrong.  Maybe a TypeReference points to something that doesn\u0027t exist.\r\nb) A user has a precompiled managed assembly they dropped in their project years ago and eventually they update a dependency and now that precompiled assembly points to something that no longer exists.\r\n\r\nI don\u0027t think I\u0027ve seen a case where a forwarder assembly was missing.   Granted without nuget and with .NET Framework assemblies, the forwarder scene is less common.\r\n\r\nMy concern is, if the goal of leaving `--skip-unresolved true` in place is as a fallback for anyone who has problems with the new default behavior of `--skip-unresolved false`, then changing the behavior of `--skip-unresolved true` to still error on missing types/methods could greatly reduce the utility of `--skip-unresolved true` as a fallback.  \r\n\r\nOn the other hand, if your goal of changing the behavior of `--skip-unresolved true` is to stomp out unresolved types/methods and not allow them past across the board, then the behavior change makes sense.  Whether or not that choice would come back to cause a lot of pain, I don\u0027t know 😄 ",
                                           "updatedAt":  "2024-06-24T17:42:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CXHll",
                                           "createdAt":  "2024-06-24T17:47:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrvoorhe",
                                           "body":  "I don\u0027t want to bring back Unresolved Stubbing to UnityLinker.\r\n\r\nAnd I don\u0027t really want to have to modify IL2CPP to handle unresolved types \u0026 methods.  That\u0027s essentially the same game as unresolved stubbing.  What can you band-aid together and deferring to a runtime exception? And what\u0027s impossible to infer enough context that you can generate C++ that will compile?  I don\u0027t want to go down that road.\r\n\r\nIf Microsoft wants to push the ecosystem toward not tolerating unresolved types \u0026 methods, I\u0027m all for it.",
                                           "updatedAt":  "2024-06-24T17:47:46Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "ILLink should error out when failing to resolve assemblies/types/members",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104331",
        "createdAt":  "2024-07-02T21:04:30Z",
        "number":  104331,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-02T21:28:41Z",
        "body":  "https://github.com/dotnet/runtime/issues/103987 surfaced some Debug asserts related to Android custom step usage of linker APIs. The asserts were not directly related to the issue, but should be investigated (see comments https://github.com/dotnet/runtime/issues/103987#issuecomment-2197606521 and https://github.com/dotnet/runtime/issues/103987#issuecomment-2197623661).\r\n\r\nWe should also consider providing a way to run the android tests with the extra validation currently provided by asserts (see comment https://github.com/dotnet/runtime/issues/103987#issuecomment-2200646141).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOg2S-0g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6DZL7S",
                                           "createdAt":  "2024-07-02T21:05:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-02T21:05:00Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Investigate ILLink asserts in android scenarios",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105159",
        "createdAt":  "2024-07-19T18:36:07Z",
        "number":  105159,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-10T22:27:47Z",
        "body":  "https://github.com/dotnet/runtime/pull/104267 reverted ILLink\u0027s usage of the dependency analysis framework because it was causing issues with custom steps:\r\n- https://github.com/dotnet/runtime/issues/103115\r\n- https://github.com/dotnet/runtime/issues/103987\r\n\r\nOnce https://github.com/dotnet/runtime/issues/104266 is fixed we can try undoing the revert. I suggest doing this early in .NET 10 to avoid unnecessary risk at this point for .NET 9. @vitek-karas @MichalStrehovsky @jtschuster ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhYICUQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6FggI3",
                                           "createdAt":  "2024-07-19T18:36:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @vitek-karas, @agocke, @vsadov\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-19T18:36:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FggJR",
                                           "createdAt":  "2024-07-19T18:36:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-19T18:36:44Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add back ILLink usage of dependency analysis framework",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106552",
        "createdAt":  "2024-08-16T17:36:45Z",
        "number":  106552,
        "author":  "jtschuster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-16T17:37:36Z",
        "body":  "In IL it is valid for an abstract Base to implement I but provide no methods. This is not possible in C#, as Base would not be allowed to be missing M. If Base does provide M, the trimmer does warn there (see RequiresCapability/BaseProvidesInterfaceMethodRequiresMismatch.cs). This is a very niche corner case and not the highest priority.\r\n\r\n```C#\r\nabstract class Base : I\r\n{\r\n}\r\n\r\nclass Derived : Base\r\n{\r\n    public virtual void M() {} // warning IL2046\r\n}\r\n\r\ninterface I\r\n{\r\n    [RequiresUnreferencedCode(\"RUC\")]\r\n    void M();\r\n}\r\n```\r\n\r\nSee https://github.com/dotnet/runtime/pull/103317#discussion_r1718737150_\r\nfor context            ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiLoi7w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6IuiLv",
                                           "createdAt":  "2024-08-16T17:37:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-16T17:37:16Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ILLink doesn\u0027t warn for annotation mismatch for derived method implementing a recursive interface",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106647",
        "createdAt":  "2024-08-19T17:15:17Z",
        "number":  106647,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6VlcQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ViktorHofer",
                                            "createdAt":  "2024-08-20T14:06:03Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-05-05T20:27:16Z",
        "body":  "https://github.com/dotnet/runtime/blob/67631f58cd7c55fd57d9e281ee52163e3139bdcf/src/tools/illink/src/ILLink.Tasks/ILLink.Tasks.csproj#L21-L22",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiOpCxQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6I6kLF",
                                           "createdAt":  "2024-08-19T17:15:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-19T17:15:35Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add readme for ILLink.Tasks package",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107211",
        "createdAt":  "2024-08-30T20:30:00Z",
        "number":  107211,
        "author":  "jtschuster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCtD6g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-09-02T02:18:36Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "ivanpovazan",
                                            "createdAt":  "2024-09-02T08:51:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "simonrozsival",
                                            "createdAt":  "2024-09-13T10:58:36Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "jkurdek",
                                            "createdAt":  "2024-09-13T11:12:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2024-11-08T21:43:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "reflectronic",
                                            "createdAt":  "2025-05-22T19:01:43Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-06-16T20:39:05Z",
        "body":  "## Goals\n\n- Remove assembly loading from the trimmer process to enable ILLink to be published trimmed and AOT compiled\n- Enable transition from Mono.Cecil to System.Reflection.Metadata\n- Reduce API surface of ILLink\n- Enable more code sharing between ILLink and ILCompiler\n\n## Non-Goals\n\n- Remove custom steps entirely from Xamarin.iOS and Xamarin.Android\n- Design a new model for trimming customization\n- Remove the requirement for running ILLink with custom steps before Native AOT compilation. This would require reworking the custom steps to not depend on marking information or editing IL after trimming.\n\n## Current Custom Steps\n\nSearching for the `_TrimmerCustomSteps` msbuild property in github search, I found the following repositories that use custom steps:\n\n- [xamarin/xamarin-macios](https://github.com/xamarin/xamarin-macios): 27 custom steps\n- [dotnet/android](https://github.com/dotnet/android) (formerly xamarin/xamarin-android): 14 custom steps\n- [emclient/MailClient.Linker](https://github.com/emclient/MailClient.Linker): 1 custom step\n\nA short summary of each step is below (please update or correct if inaccurate or missing info):\n\n### xamarin-macios\n\nAll steps inherit from [ConfigurationAwareStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/ConfigurationAwareStep.cs), [ConfigurationAwareSubStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/ConfigurationAwareSubStep.cs), or [ConfigurationAwareMarkHandler](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/ConfigurationAwareMarkHandler.cs), which provide a config, [DerivedLinkContext](https://github.com/xamarin/xamarin-macios/blob/main/tools/common/DerivedLinkContext.cs) object, and Application object.\n\n#### Before MarkStep\n- [SetupStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/SetupStep.cs): S\n  - Logs a config file to the console and creates the directories needed by the config\n  - Can be easily replaced with an msbuild task\n- [CollectAssembliesStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/CollectAssembliesStep.cs): S\n  - This would not be needed if LinkContext.GetAssemblies () was exposed\n  - Calls LinkContext.GetAssemblies () via reflection and caches the result\n- [CoreTypeMapStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/linker/CoreTypeMapStep.cs): S\n  - Go through all the assemblies that may reference the framework and track which types are NSObject subclasses\n  - This is an optimization to cache results for IsNSObject and IsDirectBinding that isn\u0027t strictly necessary for correctness.\n- [ProcessExportedFields](https://github.com/xamarin/xamarin-macios/blob/main/tools/linker/MonoTouch.Tuner/ProcessExportedFields.cs) M\n  - Adds (property, FieldAttribute) pairs to the ExportedField CustomAnnotation dictionary to be used in ListExportedSymbols later.\n  - Could instead write the exports to a file?\n- [RegistrarRemovalTrackingStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/linker/RegistrarRemovalTrackingStep.cs) M\n  - Determines if DynamicRegistrar is required and stubs ObjCRuntime.Runtime.get_DynamicRegistrationSupported to return false if not required by any assembly. Warns if it is required by any assembly.\n  - Sets the RemoveDynamicRegistrar Optimization in the config.\n  - DynamicRegistrationSupported should be made a FeatureSwitch and the feature value could be set when this step runs pre-link.\n- [PreMarkDispatcher](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/PreMarkDispatcher.cs)\n  - [CollectUnmarkedMembersSubstep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/CollectUnmarkedMembers.cs) L / Unknown\n    - This ideally should run between MarkStep and SweepStep when members are marked, but resolution still works.\n    - Creates a list of all types that have been linked away (All types since this runs before MarkStep)\n    - Creates a list of all protocol interfaces.\n    - Creates a map from each type to the interface types of all their unmarked interfaceImpls\n    - This info is used later in the static registrar\n    - How can we save this information for use in the static registrar without storing the metadata objects themselves? What\u0027s the minimum information required?\n  - [StoreAttributesStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/StoreAttributesStep.cs) substep\n    - Base: [AttributeIteratorBaseStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/AttributeIteratorBaseStep.cs) L / Unknown\n    - Processes Attributes: tracks some attributes for later inspection with StoreCustomAttribute\n      - System.Runtime.CompilerServices..ExtensionAttribute\n      - System.Runtime.Versioning..SupportedOSPlatformAttribute\n      - System.Runtime.Versioning..UnsupportedOSPlatformAttribute\n      - Foundation..ProtocolAttribute\n    - This will require figuring out each attribute\u0027s purpose and how to transfer the relevant data from pre-link to post-link steps\n- [ManagedRegistrarStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/ManagedRegistrarStep.cs) L\n  - See [Managed Static Registrar Docs](https://github.com/xamarin/xamarin-macios/blob/main/docs/managed-static-registrar.md) and [ManagedRegistrarLookupTablesStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/ManagedRegistrarLookupTablesStep.cs)\n  - Everything is only done if the registrar mode is not ManagedStatic \n  - Looks through each assembly to find all methods that need an UnmanagedCallersOnlyAttribute, generates a wrapper for them, adds them to the assembly.\n  - Perhaps could be a generator? Looks like a similar job as LibraryImportGenerator and ComInterfaceGenerator. Probably a stretch goal though.\n  - Marks exported types on modified assemblies\n  - Unconditionally Marks the RegistrarHelper.Register method\n  - The ManagedStatic registrar could add a DynamicDependency on the UnmanagedCallerOnly wrapper to automatically mark the wrapper when the method is marked.\n    - Without the linker running first, this would cause ilc to keep all UCO methods because they define an EntryPoint\n\n#### IMarkHandlers which run during Mark\n- [PreserveBlockCodeHandler](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/PreserveBlockCodeHandler.cs) S\n  - Preserves a method and a field in SDInnerBlock type if the type is marked\n  - Should be replaced by DynamicDependency\n- [OptimizeGeneratedCodeHandler](https://github.com/xamarin/xamarin-macios/blob/main/tools/linker/CoreOptimizeGeneratedCode.cs) L\n  - Implements dead code elimination and maybe some others, but only if there\u0027s a CompilerGeneratedCodeAttribute or BindingImplAttribute\n  - It also does some extra optimizations specialized for mac-ios.\n  - This step modifies IL during MarkStep. We should investigate if the linker keeps things that this step removes and/or if this step adds dependencies that the linker isn\u0027t aware of.\n- [BackingFieldDelayHandler](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/BackingFieldDelayHandler.cs) L / Unknown\n  - For Dispose methods of NSObjects, stub the body and save to replace for later so that the linker doesn\u0027t mark the backing fields that aren\u0027t otherwise used. Later the Dispose method is restored to its original body (but without otherwise unused fields).\n  - Modifies the method during MarkStep, which could lead to issues.\n  - Could this be a feature added to the linker itself? Or could a write-only field have side effects even if it\u0027s never read?\n  - There\u0027s not an obvious way to save the method body for reapplying later. This would require more than translating to a pre- or post-linker step.\n- [MarkIProtocolHandler](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/MarkIProtocolHandler.cs) S\n  - For all marked NSObject subclasses, mark all the interfaces that have the ProtocolAttribute\n  - We could inject DynamicDependency for the protocols in a pre-linker step.\n\n#### MarkSubStepDispatcher steps: Only need to run on marked assemblies\n- [MarkDispatcher](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/MarkDispatcher.cs)\n  - [ApplyPreserveAtribute](https://github.com/xamarin/xamarin-macios/blob/main/tools/linker/ApplyPreserveAttribute.cs) S\n    - Base: [ApplyPreserveAttributeBase](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/ApplyPreserveAttributeBase.cs)\n    - Mobile Variant: [MobileApplyPreserveAttribute](https://github.com/xamarin/xamarin-macios/blob/main/tools/linker/MobileApplyPreserveAttribute.cs)\n    - Apply preserve / mark all types with PreserveAttribute\n  - [MarkNSObjects](https://github.com/xamarin/xamarin-macios/blob/main/tools/linker/MarkNSObjects.cs) S\n    - Preserve all on any NSObject subclass\n- [PreserveSmartEnumConversionsHandler](https://github.com/xamarin/xamarin-macios/blob/main/tools/linker/MonoTouch.Tuner/PreserveSmartEnumConversions.cs) S\n  - Looks like it finds the EnumNameExtensions GetConstant and GetValue methods and preserves them if they are found in a method param, return, or property\n  - Could be replaced with a DynamicDependency\n\n#### Pre-sweep custom steps\n- [ManagedRegistrarLookupTablesStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/ManagedRegistrarLookupTablesStep.cs) M\n  - This type will generate and inject a new type to the lookup code to:\n    * Convert between types and their type IDs.\n    * Map between a protocol interface and its wrapper type.\n    * Find the UnmanagedCallersOnly method for a given method ID.\n  - Also needs to inject a call to the class .cctor in the module ctor\n  - Info for each exported method is stored in \"ManagedRegistrarStep\" CustomAnnotation for the AssemblyDefinition from ManagedRegisrarStep.\n  - If the name of the UCO method is deterministic and a dynamicDependency is added to keep the UCO, we can lookup the wrapper from the exported method rather than keeping the info in an object.\n\n#### Post-sweep custom steps\n- [PostSweepDispatcher](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/PostSweepDispatcher.cs)\n  - [RemoveAttributesStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/RemoveAttributesStep.cs) S\n    - Base: [AttributeIteratorBaseStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/AttributeIteratorBaseStep.cs)\n    - Remove ObjCRuntime.NativeNameAttribute, ObjCRuntime.AdoptsAttribute (if RegisterProtocolsOptimization == true), Foundation.ProcolAttribute, and Foundation.ProcolMemberAttribute (if RegisterProtocolsOptimization==true)\n\n#### Pre-output custom steps\n- [LoadNonSkippedAssembliesStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/LoadNonSkippedAssembliesStep.cs) S\n  - saves some info (name, path, isDedupAssembly) about the assemblies that aren\u0027t skipped or deleted in the config (all the assemblies that are outputted)\n- [ExtractBindingLibrariesStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/ExtractBindingLibrariesStep.cs) S\n  - Saves some MSBuild items to the config\n\n\n- [ListExportedSymbols](https://github.com/xamarin/xamarin-macios/blob/main/tools/linker/MonoTouch.Tuner/ListExportedSymbols.cs) M\n  - The ListExportedSymbols must run after ExtractBindingLibrariesStep, otherwise we won\u0027t properly list exported Objective-C classes from binding libraries\n  - Accumulates a list of exports\n  - Generates native code for pinvokes\n- [PreOutputDispatcher](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/PreOutputDispatcher.cs)\n  - [RemoveUserResourcesSubStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/linker/RemoveUserResourcesSubStep.cs) S\n    - Removes some resource files from non-sdk and non-framework assemblies\n  - [BackingFieldReintroductionSubStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/BackingFieldDelayHandler.cs#L98) L / Unknown\n    - Re-add references to backing fields in Dispose that were removed in BackingFieldDelayHandler\n- [ClassHandleRewriterStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/ClassHandleRewriterStep.cs)\n  - Makes edits to the static registrar to rewrite the usage of class_ptr in NSObject subclasses and potentially remove static initializers.\n  - Don\u0027t think it edits IL\n\n#### Post-output steps\n- [RegistrarStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/RegistrarStep.cs) M\n  - Finalizes the registrar with the final trim data\n  - Generates C or Objective C? code\n- [GenerateMainStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/GenerateMainStep.cs) S\n  - Generates a main.mm file for each abi in the app and outputs some msbuild items\n- [GenerateReferencesStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/GenerateReferencesStep.cs) S\n  - Creates MSBuild items for a reference.m file?\n- [GatherFrameworksStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/GatherFrameworksStep.cs) S\n  - Creates MSBuild items for the framework references\n- [ComputeNativeBuildFlagsStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/ComputeNativeBuildFlagsStep.cs) S\n  - Creates some MSBuild items for the native build flags\n- [ComputeAOTArguments](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/ComputeAOTArguments.cs) S\n  - Generates MSBuild items related to calling AOT tools\n- [DoneStep](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/Steps/DoneStep.cs)\n  - Flushes the MSBuild items into a .items file to be loaded by msbuild\n\n### android\n\n#### Before MarkStep\n- [SetupStep](https://github.com/dotnet/android/blob/main/src/Microsoft.Android.Sdk.ILLink/SetupStep.cs)\n  - Saves XATargetFrameworkDirectories to a config object\n\n#### During MarkStep\n- [PreserveSubStepDispatcher](https://github.com/dotnet/android/blob/main/src/Microsoft.Android.Sdk.ILLink/PreserveSubStepDispatcher.cs)\n  - [ApplyPreserveAttribute](https://github.com/dotnet/android/blob/main/src/Microsoft.Android.Sdk.ILLink/ApplyPreserveAttribute.cs) substep\n    - Preserves members with the PreserveAttribute\n   - [PreserveExportedTypes](https://github.com/dotnet/android/blob/main/src/Microsoft.Android.Sdk.ILLink/PreserveExportedTypes.cs) substep\n    - Mark members with JavaExport attributes\n    - This runs on marked types but marks them again if they have the attribute, redundant?\n- [MarkJavaObjects](https://github.com/dotnet/android/blob/main/src/Microsoft.Android.Sdk.ILLink/MarkJavaObjects.cs)\n  - Registers a MarkTypeAction and MarkAssemblyAction\n    - AssemblyAction: finds IJavaObjects that are CustomViews or IJniNameProviderAttribute and marks them\n    - TypeAction: if the type implements IJavaObject, preserve the implementor / implementation?\n  - Looks like just marking items for each marked type\n- [PreserveJavaExceptions](https://github.com/dotnet/android/blob/main/src/Microsoft.Android.Sdk.ILLink/PreserveJavaExceptions.cs)\n  - If the type is a Java exception, mark the string ctor\n- [PreserveApplications](https://github.com/dotnet/android/blob/main/src/Microsoft.Android.Sdk.ILLink/PreserveApplications.cs)\n  - Mark default ctor of type references in the ApplicationAttribute\n  - Make these properties DAM(DAMT.PublicParameterlessConstructor)\n- [PreserveRegistrations](https://github.com/dotnet/android/blob/main/src/Microsoft.Android.Sdk.ILLink/PreserveRegistrations.cs)\n  - Find members in an attribute and mark them\n  - Marks all methods in type hierarchy with the name of the attribute\n  - DAM with name?\n- [PreserveJavaInterfaces](https://github.com/dotnet/android/blob/main/src/Microsoft.Android.Sdk.ILLink/PreserveJavaInterfaces.cs)\n  - Registers MarkTypeAction\n    - If the interface implements IJavaObject, mark all the methods\n- [FixAbstractMethodsStep](https://github.com/dotnet/android/blob/main/src/Xamarin.Android.Build.Tasks/Linker/MonoDroid.Tuner/FixAbstractMethodsStep.cs)\n  - Creates implementations for abstract methods in Java interfaces that throw\n  - It seems like this step was made before .NET supported Default interface implementations. This step could try injecting default implementations on the interfaces instead of on the implementing types.\n    - Alternatively, maybe the [tool that generates the java bindings](https://github.com/dotnet/java-interop/blob/main/tools/generator/generator.csproj) could add default implementations? Then devs wouldn\u0027t get warnings if they only partially implement the interfaces, though. Maybe the ref assembly has abstract methods and the implementation assembly has default implementations?\n\n#### After MarkStep\n- [GenerateProguardConfiguration](https://github.com/dotnet/android/blob/main/src/Microsoft.Android.Sdk.ILLink/GenerateProguardConfiguration.cs)\n  - Write some data about the linked assemblies and registered types to a file\n- [AddKeepAlivesStep](https://github.com/dotnet/android/blob/main/src/Xamarin.Android.Build.Tasks/Linker/MonoDroid.Tuner/AddKeepAlivesStep.cs)\n  - Insert GC::KeepAlive calls for all nonstring and nonvaluetype parameters on methdos with a RegisterAttribute\n\n#### After CleanStep\n- [StripEmbeddedLibraries](https://github.com/dotnet/android/blob/main/src/Microsoft.Android.Sdk.ILLink/StripEmbeddedLibraries.cs)\n  - Goes through assembly resources and removes some unnecessary ones\n- [RemoveResourcesDesignerStep](https://github.com/dotnet/android/blob/main/src/Xamarin.Android.Build.Tasks/Linker/MonoDroid.Tuner/RemoveResourceDesignerStep.cs)\n  - Remove references to a Resouce class and replaces references to the fields to the resource id exactly\n- [GetAssembliesStep](https://github.com/dotnet/android/blob/main/src/Microsoft.Android.Sdk.ILLink/GetAssembliesStep.cs)\n  - Saves the assemblies to a config object\n- [FixLegacyResourceDesignerStep](https://github.com/dotnet/android/blob/main/src/Xamarin.Android.Build.Tasks/Linker/MonoDroid.Tuner/FixLegacyResourceDesignerStep.cs)\n  - Rewrites some field references to property references\n\n\n### emclient/MailClient.Linker\n\n- Removes ObjCRuntime.ThrowHelper.ThrowArgumentNullException(string) from beginning of ReleaseBlockWhenDelegateIsCollected\n\n## Summary of Custom Step requirements and potential replacements\n\n### Edit Metadata\n\nThis can be done with separate tools that run before or after ILLink.\n\n### Unconditionally mark metadata\n\nThis could be replaced with a generated ILLink.Descriptors.xml.\n\n### Conditionally mark / create dynamic dependencies\n\nBasic dependencies could be implemented with DynamicDependencyAttributes in a generated ILLink.LinkAttributes.xml. Dependencies that are conditional on more than one metadatum would not work with this system. This also will require that the depending item can have a CustomAttribute applied to it. This may not be an issue for the current set of custom steps.\n\n### Optimizations to avoid processing unmarked metadata\n\nThe primary use of IsMarked and MarkHandler steps is primarily to reduce the cost of processing unnecessary metadata. While adding DynamicDependency\u0027s could be used to achieve the same effect, this would likely require more processing time.\n\n### Save data for msbuild, and pass data between steps\n\nSome steps must save information from before trimming to be used after trimming. Some info is required for platform linker or other subsequent build steps.\n\nSome steps save references to metadata objects before MarkStep and then retrieve those objects after. This would not be possible if they are run in separate processes. In particular, `CollectUnmarkedMembersSubstep` in xamarin-macios would cause issues.\n\n## Proposal\n\nCustom steps could be mostly left as they are but run either entirely before or entirely after ILLink. A new custom step host and msbuild task would be created to load and run the custom steps before and after ILLink. IMarkHandler steps would run after the trimmer with the assumption that all metadata in the assembly after ILLink is marked.\n\nA custom step that runs before the trimmer:\n- May unconditionally mark metadata\n- May create dynamic dependencies that are conditional on an ICustomAttributeProvider being marked\n- May set a TypePreserve on a type.\n- May edit metadata\n- Must not check for Annotations such as IsMarked\n\nA custom step that runs after ILLink:\n- Shall consider all the metadata it processes as marked\n- May edit metadata that does not create additional dependencies\n- Must not mark additional metadata\n- Must not create additional dependencies\n\nA custom step host project would exist in each of the repos where they are used to allow custom behavior for each platform and decouple custom steps from the trimmer.\n\n### Considerations\n\nThe primary incompatibility with this approach is dependencies that cannot be expressed with DynamicDependencyAttributes. For example, if a dependency is required if and only if two or more types are marked. It\u0027s not clear how prevalent these kinds of dependencies are in the custom steps.\n\nDynamicDependency is also treated as a reflection dependency in ILCompiler, which may lead to complications and unintended affects (for example, warnings if the depended-on member is annotated with DAM).\n\nThis would require loading and writing the assemblies two more times than currently. A good proxy for this is the time spent in the Mono.Cecil dll. Testing on my laptop showed illink spends about 12.05% of its time in Mono.Cecil when linking a sample Maui android app, and 31% of its time in Mono.Cecil when trimming a hello world app (I haven\u0027t been able to trim an IOS or Mac app without a Mac).\n\nCreating unconditional dependencies and dynamic dependencies is a model very similar to the DependencyAnalysis in ILCompiler. If the custom steps are able to declare their dependencies in this way and the trimmer is transitioned to the DependencyAnalysisFramework, the trimmer could offer a different method for declaring these DynamicDependencies that integrates well with the DependencyAnalysisFramework.\n\nThe custom steps may also be a great place to test transitioning from Mono.Cecil to System.Reflection.Metadata. Since the custom steps themselves and the tool that runs them would likely be smaller than the trimmer, we could try transitioning the custom steps first to find the pain points before transitioning the trimmer. This would also alleviate the performance impact of loading the assemblies multiple times.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrjN6rA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Ka10z",
                                           "createdAt":  "2024-08-30T20:30:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027linkable-framework\u0027: @eerhardt, @vitek-karas, @LakshanF, @sbomer, @joperezr, @marek-safar\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-30T20:30:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ka13K",
                                           "createdAt":  "2024-08-30T20:30:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-30T20:30:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KbAoM",
                                           "createdAt":  "2024-08-30T21:06:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODwp-Kg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2024-09-02T08:53:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Thanks a lot for the great writeup @jtschuster !\r\n\r\nI\u0027ll think on this some more, just writing down stuff I\u0027m thinking right now:\r\n- The most tricky part is the `DynamicDependency` and similar but more complex cases. There\u0027s one on iOS around enums, I don\u0027t remember the specifics but it\u0027s rather complicated - it might be possible to do this with a custom step which runs before the trimmer and adds `DynamicDependency` attributes - this would come with performance penalty since it would have to do that on all applicable types (in this case I think all enums) regardless if they\u0027re going to be used or not.\r\n- We might need to preserve more attributes during trimming and only remove them during the post-trimmer-steps as they might need those attributes (to produce the additional data which is consumed by the next steps in the build)\r\n- Performance - there\u0027s a potential advantage. The most perf sensitive piece are debug builds - where we still run the trimmer, but basically just for custom steps. There\u0027s actually a special \"hack\" (parameter) to the trimmer which makes it mark everything without doing the heavy lifting of data flow analysis on it - just for this case, so that we run the customer steps without paying too much for the rest of the trimmer. This would go away with this proposal.\r\n- Symbols - the pre and post processing steps would rewrite assemblies, and thus also rewrite symbols. Not sure if you measured that configuration - as mentioned above, the debug builds are actually the more perf sensitive builds and they do run the trimmer and we definitely want symbols there. (This is true for both Android and iOS although for slightly different reasons).\r\n\r\nOne major negative is that this doesn\u0027t really solve the problem for NativeAOT - for example right now, we have to run the trimmer for NativeAOT iOS targets - where we run the trimmer (with some modifications) to basically get the custom steps and their output and then feed the result to the NativeAOT compiler - which then runs another trimming. The above proposal would not fix this problem. but the only solution to that problem is probably to rewrite the interops such that we don\u0027t need the custom steps. So following that logic, an alternative approach would be to invest the resources into changing the interop generation for mobile targets to get rid of custom steps completely (or turn them into purely pre-processors, which would be compatible with NativeAOT). Ideally anything we do moves us closer to a future place where trimming and NativeAOT use the same solution (and we don\u0027t have to run trimmer and NativeAOT in series).\r\n\r\n@ivanpovazan, @simonrozsival . ",
                                           "updatedAt":  "2024-08-30T21:06:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6L_CRV",
                                           "createdAt":  "2024-09-13T10:03:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "For xamarin-macios we already have an issue to remove the custom linker steps, so it\u0027s on our todo list: https://github.com/xamarin/xamarin-macios/issues/17693\r\n\r\nFixing it completely is a major task though, so while I\u0027m fairly certain we could get started on the list of steps to move out of the ILLink, getting them all done (by ourselves at least) may take a while (it would be dicey in the .NET 10 timeline).\r\n\r\n\u003e So following that logic, an alternative approach would be to invest the resources into changing the interop generation for mobile targets to get rid of custom steps completely (or turn them into purely pre-processors, which would be compatible with NativeAOT).\r\n\r\nOne significant problem with NativeAOT is that we need to inspect the linked output (to create a list of Objective-C classes and other native entry points the linked code needs), and NativeAOT\u0027s output isn\u0027t very inspectable. There are additional problems as well (we currently create a table to map managed classes to Objective-C classes, but if we pre-generate that table, we\u0027ll end up preserving every managed class, and we can\u0027t post-generate it because it\u0027s a managed table - although @simonrozsival has some initial ideas on that [here](https://github.com/xamarin/xamarin-macios/issues/18684).\r\n\r\n\u003e Ideally anything we do moves us closer to a future place where trimming and NativeAOT use the same solution (and we don\u0027t have to run trimmer and NativeAOT in series).\r\n\r\nI totally agree with this.",
                                           "updatedAt":  "2024-09-13T10:03:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MDfAQ",
                                           "createdAt":  "2024-09-13T18:07:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e we don\u0027t have to run trimmer and NativeAOT in series\r\n\r\nWe may want to consider running the trimmer in analyze-only mode that just produces information about the surviving user and 3rd party library types. The result of this analysis would feed into the post-build interop generator(s). It is how this problem was solved in .NET Native for UWP. It is a common problem that interop solutions need to solve to minimize binary sizes and work done during the application startup.",
                                           "updatedAt":  "2024-09-13T18:07:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NahS7",
                                           "createdAt":  "2024-09-24T23:04:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "For now, my primary focus is to move the custom steps to pre- and post-processors before trying to find a preprocessor-only solution that works with both nativeaot and trimmer (though I think this effort would help us get there). I am happy to help work on this.\r\n\r\nRegarding performance, while there may be some drawbacks to running the steps outside of the trimmer, we do have the potential for parallelizing the work and making it incremental for the steps that lend themselves to it.",
                                           "updatedAt":  "2024-09-24T23:04:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NdsCk",
                                           "createdAt":  "2024-09-25T08:09:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODzwdtg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jtschuster",
                                                                               "createdAt":  "2024-09-26T20:24:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "I think we should start with the steps which can be moved before the trimmer - the main reason is that this applies to both trimmer and NativeAOT (same steps can be run before NativeAOT with hopefully the same effects). Additionally these are likely to remain close to their behavior even longer term.\r\n\r\nThe steps which would run after trimmer are the short-term solution, as longer term we need to figure out some solution which will work with NativeAOT as well.\r\n\r\nI also think that ideally we would focus this work on the Debug build scenarios - especially on Android the debug build doesn\u0027t trim anything (we pass a special parameter to trimmer to effectively root everything) and it only runs trimmer for the custom steps. In this case we should be able to avoid running trimmer altogether - and hopefully get some perf wins.\r\n\r\nMore medium term - if we do create a pre-trimmer tool which can modify IL and is based on System.Reflection.Metadata (and not Cecil) it would be very useful also for ILStrip - ILStrip is a tool which runs in some AOT enabled configurations in Mono and it removes method bodies (and potentially other things) for AOTed methods. Currently it\u0027s based on a very old source copy of Cecil and will cause more and more problems going forward. It can\u0027t be done on top of public Cecil as it needs to preserve token values.",
                                           "updatedAt":  "2024-09-25T08:09:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Neytu",
                                           "createdAt":  "2024-09-25T10:15:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODzwelw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jtschuster",
                                                                               "createdAt":  "2024-09-26T20:26:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "A few random thoughts:\r\n\r\n\u003e Some steps save references to metadata objects before MarkStep and then retrieve those objects after. This would not be possible if they are run in separate processes. In particular, `CollectUnmarkedMembersSubstep` in xamarin-macios would cause issues.\r\n\r\nOne idea here would be for the post-trimmer code to take both the untrimmed assemblies and the trimmed assemblies as input, and be able to compare them / inspect both.\r\n\r\nThe main problem with this approach is that NativeAOT doesn\u0027t produce a trimmed assembly.\r\n\r\n\u003e ### emclient/MailClient.Linker\r\n\u003e * Removes ObjCRuntime.ThrowHelper.ThrowArgumentNullException(string) from beginning of ReleaseBlockWhenDelegateIsCollected\r\n\r\nLooks like that was a workaround for https://github.com/xamarin/xamarin-macios/issues/20920, so it shouldn\u0027t be necessary anymore.\r\n\r\n\u003e * [BackingFieldDelayHandler](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/BackingFieldDelayHandler.cs?rgh-link-date=2024-08-30T20%3A30%3A00Z) L / Unknown\r\n\u003e \u003e   * Could this be a feature added to the linker itself? Or could a write-only field have side effects even if it\u0027s never read?\r\n\r\nFor xamarin-macios, this might be a good place to start, because if it could be implemented in the trimmer(s) themselves, it would be possible to just remove the code in xamarin-macios.\r\n\r\nI think you got the idea slightly wrong though, a general implementation would be to:\r\n\r\n* Not mark fields when they\u0027re assigned their default value.\r\n* If a field is never assigned (or only it\u0027s default value is assigned), then any code that references the field and is null-checked can be removed.\r\n\r\nThe point is to completely remove code like this:\r\n\r\n```cs\r\nMyDisposableType? obj;\r\nvoid Dispose ()\r\n{\r\n\tobj?.Dispose ();\r\n\tobj = null;\r\n}\r\n```\r\n\r\nThe main size savings we\u0027re looking for come from being able to trim away the `MyDisposableType` after this optimization, when it\u0027s not used anywhere else (which is quite common).\r\n",
                                           "updatedAt":  "2024-09-25T10:15:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UM0AM",
                                           "createdAt":  "2024-11-19T17:55:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "The PR out on `xamarin-macios` has some initial work for creating \"Custom Step Host\". It copies quite a lot of files from ILLink. Perhaps a better starting point for the transition would be to keep entire copies of ILLink in `xamarin-macios` and `android`, and use those trimmers instead of the ILLink package. This would allow runtime\u0027s ILLink to immediately remove custom steps and be AOT compiled for console apps. Each repo\u0027s ILLink could then be transitioned to a custom step host that runs before runtime\u0027s ILLink at their own pace.\n\nIn other words, rather than having a completed custom step host as a prerequisite for adding new functionality to the trimmer, it might be better to copy ILLink to each repository and enable concurrent work on runtime\u0027s ILLink and the custom step hosts.\n",
                                           "updatedAt":  "2024-11-19T17:55:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UM6up",
                                           "createdAt":  "2024-11-19T18:09:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD7qJKQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jtschuster",
                                                                               "createdAt":  "2024-11-19T18:19:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkotas",
                                                                               "createdAt":  "2024-11-20T04:34:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Copying large chunks of code to iOS and Android repos comes with the cost that somebody has to maintain those. And since the runtime\u0027s version would quickly diverge that maintenance would need to be duplicated manually. Effectively any bug fix would have to be ported. That doesn\u0027t sound like a good plan.\n\nNote that there\u0027s also WASM vertical which also uses trimmer and might have custom steps (I\u0027m not sure about that).",
                                           "updatedAt":  "2024-11-19T18:09:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uM3qs",
                                           "createdAt":  "2025-05-30T14:50:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "\u003e The custom steps may also be a great place to test transitioning from Mono.Cecil to System.Reflection.Metadata.\n\nOne problem here is that there\u0027s no good API to modify existing assemblies with SRM: https://github.com/dotnet/runtime/issues/30443",
                                           "updatedAt":  "2025-05-30T14:50:30Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Proposal: Move ILLink custom steps out of the trimmer process",
        "labels":  [
                       "linkable-framework",
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108082",
        "createdAt":  "2024-09-20T20:32:51Z",
        "number":  108082,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-10T16:22:06Z",
        "body":  "```csharp\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\n// warning IL2062: Value passed to parameter \u0027s\u0027 of method \u0027G(String)\u0027 can not be statically determined and may not meet \u0027DynamicallyAccessedMembersAttribute\u0027 requirements.\r\nG(typeof(C).AssemblyQualifiedName);\r\n\r\nstatic void G([DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)] string s) {\r\n    Activator.CreateInstance(Type.GetType(s));\r\n}\r\n\r\nclass C {}\r\n```\r\n\r\nThis produces a warning because the dataflow analysis treats the result of `typeof(C).AssemblyQualifiedName)` as unknown. Instead it should track the result as a known type name and not produce any warnings (note that `G(\"C, assemblyname\")` works and does not warn).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjPCX-Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6M8Jf5",
                                           "createdAt":  "2024-09-20T20:33:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-20T20:33:17Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Trim analysis doesn\u0027t track AssemblyQualifiedName of a known type",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108090",
        "createdAt":  "2024-09-20T23:49:53Z",
        "number":  108090,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T01:42:34Z",
        "body":  "Consider a type `Base` that has `RequiresUnreferencedCode`:\r\n\r\n```csharp\r\n[RequiresUnreferencedCode(\"Base\")]\r\nclass Base {\r\n    public Base() {}\r\n\r\n    public virtual void Instance() {}\r\n}\r\n```\r\n\r\nIt should be possible to annotate a derived class, without necessarily marking all static methods in the derived class as RUC:\r\n\r\n```csharp\r\nclass Derived : Base {\r\n    [RequiresUnreferencedCode(\"Base\")]\r\n    public Derived() {}\r\n\r\n    [RequiresUnreferencedCode(\"Instance\")] // warning: annotation mismatch\r\n    public override void Instance() =\u003e Helper.RUC();\r\n\r\n    public static void Static() {}\r\n}\r\n\r\n[RequiresUnreferencedCode(\"Helper\")]\r\nclass Helper {\r\n    public static void RUC() {}\r\n}\r\n```\r\n\r\nToday ILLink warns about mismatching annotations on Derived.Instance and Base.Instance:\r\n```\r\nTrim analysis warning IL2046: Derived.Instance(): Member \u0027Derived.Instance()\u0027 with \u0027RequiresUnreferencedCodeAttribute\u0027 overrides base member \u0027Base.Instance()\u0027 without \u0027RequiresUnreferencedCodeAttribute\u0027. \u0027RequiresUnreferencedCodeAttribute\u0027 annotations must match across all interface implementations or overrides.\r\n```\r\n\r\nThis should not happen. The analyzer and ILC don\u0027t produce the same warning.\r\n\r\n(note that this scenario also produces a separate warning about Derived deriving from Base, which should also be removed, see https://github.com/dotnet/runtime/issues/107660.)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjPNeEQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6M814R",
                                           "createdAt":  "2024-09-20T23:50:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-20T23:50:16Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ILLink: RUC on derived virtual should not warn if base class has RUC",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108114",
        "createdAt":  "2024-09-22T19:22:12Z",
        "number":  108114,
        "author":  "KubaZ2",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-18T06:58:49Z",
        "body":  "### Description\n\nThe second usage of `GetInterfaceMap` causes\r\n```\r\nIL2072: \u0027interfaceType\u0027 argument does not satisfy \u0027DynamicallyAccessedMemberTypes.PublicMethods\u0027, \u0027DynamicallyAccessedMemberTypes.NonPublicMethods\u0027 in call to \u0027System.Type.GetInterfaceMap(Type)\u0027. The return value of method \u0027System.Linq.Enumerable.First\u003cTSource\u003e(IEnumerable\u003cTSource\u003e)\u0027 does not have matching annotations. The source value must declare at least the same requirements as those declared on the target location it is assigned to.\r\n```\r\nwhile the first usage doesn\u0027t cause any warning.\r\n\r\nI am not sure whether it\u0027s how it\u0027s supposed to be or it\u0027s an actual bug.\n\n### Reproduction Steps\n\n```c#\r\nobject o = new();\r\n\r\nvar type = o.GetType();\r\n\r\nvar @interface = type.GetInterfaces().First();\r\n\r\n_ = type.GetInterfaceMap(@interface).TargetMethods;\r\n\r\n_ = type.GetInterfaceMap(@interface);\r\n```\n\n### Expected behavior\n\nI am not sure\n\n### Actual behavior\n\nThe warning is reported or not depending on whether some field is referenced or not\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 8\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjRSvRg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6NFHK3",
                                           "createdAt":  "2024-09-22T19:22:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-reflection\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-22T19:22:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NFK9G",
                                           "createdAt":  "2024-09-22T20:05:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-22T20:05:41Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "`Type.GetInterfaceMap(Type)` is treated oddly by the trimming analyzers",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108269",
        "createdAt":  "2024-09-26T07:28:23Z",
        "number":  108269,
        "author":  "ivanpovazan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7VXHg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rolfbjarne",
                                            "createdAt":  "2024-09-26T07:44:49Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-23T12:46:25Z",
        "body":  "## Description \r\n\r\nAs called out in: https://github.com/dotnet/runtime/issues/108108#issuecomment-2375220090 iOS apps built with `PublishTrimmed=true` set on a project level end up with different set of feature switches configured during the build. \r\nFor example consider the difference in the input to the trimmer with and without setting the property value explicitly:\r\n\r\n```\r\n--feature Microsoft.Extensions.DependencyInjection.VerifyOpenGenericServiceTrimmability false-\u003etrue\r\n--feature System.ComponentModel.DefaultValueAttribute.IsSupported -\u003efalse\r\n--feature System.ComponentModel.Design.IDesignerHost.IsSupported -\u003efalse\r\n--feature System.Resources.UseSystemResourceKeys true-\u003efalse\r\n--feature System.Runtime.CompilerServices.RuntimeFeature.IsDynamicCodeSupported false-\u003etrue\r\n--feature System.Runtime.InteropServices.Marshalling.EnableGeneratedComInterfaceComImportInterop -\u003efalse\r\n```\r\n\r\n## Problem\r\n\r\nThe problem comes from the order of importing MSBuild targets and property evaluation: \r\n\r\n- if it *is not set* on the project level, we will use feature switch configuration as set in the Xamarin SDK early in `Xamarin.Shared.Sdk.targets`: \r\nhttps://github.com/xamarin/xamarin-macios/blob/ec50934897ef1b98c1cd73ca780cdf5a3750faaa/dotnet/targets/Xamarin.Shared.Sdk.targets#L121-L158\r\nThe SDK later sets: `PublishTrimmed` to `true` so that we run the linker in:\r\nhttps://github.com/xamarin/xamarin-macios/blob/ec50934897ef1b98c1cd73ca780cdf5a3750faaa/dotnet/targets/Xamarin.Shared.Sdk.targets#L298\r\n\r\n- if it *is set* on project level, `Microsoft.NET.ILLink.targets` will set its own feature switch configuration in: https://github.com/dotnet/runtime/blob/a16e0d58e92fe5f3bcda9e75e9afd1ee0f766967/src/tools/illink/src/ILLink.Tasks/build/Microsoft.NET.ILLink.targets#L34-L61 as it is imported before `Xamarin.Shared.Sdk.targets`\r\n\r\n    \u003cimg width=\"976\" alt=\"Screenshot 2024-09-25 at 22 37 44\" src=\"https://github.com/user-attachments/assets/b53b8d78-dcb9-47fd-b1aa-e97ef83b1df0\"\u003e\r\n\r\n    This is specifically problematic in case of for example: `DynamicCodeSupport `, which should not be `true` on iOS platforms if interpreter is not enabled.\r\n\r\n## Proposal \r\n\r\nWe should investigate setting the feature switch defaults (and possibly other trimmer setting) in an MSBuild target so that mobile SDKs can provide different defaults earlier in the build.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuT-05Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6NoRLw",
                                           "createdAt":  "2024-09-26T07:28:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "/cc: @vitek-karas @rolfbjarne ",
                                           "updatedAt":  "2024-09-26T07:28:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6No1Wy",
                                           "createdAt":  "2024-09-26T08:28:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "@sbomer, @agocke as fyi\r\n\r\nThis is probably a bit larger discussion as it\u0027s effectively about feature switch MSBuild property behavior. I vaguely remember that we wanted the defaults to be set early on, so that other parts of the build can make decisions based on them, but I don\u0027t remember the specific use cases.",
                                           "updatedAt":  "2024-09-26T08:28:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NvGvH",
                                           "createdAt":  "2024-09-26T21:05:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027os-ios\u0027: @vitek-karas, @kotlarmilos, @ivanpovazan, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-26T21:05:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ObniI",
                                           "createdAt":  "2024-10-02T20:15:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "The defaults need to be set before the `RuntimeHostConfigurationOption` section here: https://github.com/dotnet/sdk/blob/c3a8f72c3a5491c693ff8e49e7406136a12c3040/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L514-L770.\r\n\r\nIf the defaults move to an MSBuild target, this section needs to move to a target as well. As an alternative, could the Xamarin defaults be set in an earlier import?",
                                           "updatedAt":  "2024-10-02T20:15:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OjuSk",
                                           "createdAt":  "2024-10-03T15:34:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "\u003e As an alternative, could the Xamarin defaults be set in an earlier import?\r\n\r\nXamarin plugs its platform targets - `Microsoft.iOS.Sdk.targets`, that in turn import `Xamarin.Shared.Sdk.targets` which set feature switch configuration, through `AfterMicrosoftNETSdkTargets` property which gets imported last in: https://github.com/dotnet/sdk/blob/afab26398e223c8de604acacca346e1e4306de0f/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L1480 or in other words, after ILLink targets have already been imported:\r\nhttps://github.com/dotnet/sdk/blob/afab26398e223c8de604acacca346e1e4306de0f/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L1439\r\n\r\nI think that changing the order of imports here is too risky. However, what might be possible is to relocate only the feature switch configuration from `Xamarin.Shared.Sdk.targets` into `Xamarin.Shared.Sdk.props` @rolfbjarne what do you think?\r\n\r\nLastly, even if we would be able to implement the mentioned workaround it wont/shouldn\u0027t be a long-term solution as other sdks (Android?) might have the same problem.",
                                           "updatedAt":  "2024-10-03T15:34:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Op0Zn",
                                           "createdAt":  "2024-10-04T09:59:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "Did we consider moving the defaults to Microsoft.NET.Sdk.targets? Instead of ILLink/ILCompiler targets setting these, we could delay giving them a default value until right before the value is needed (i.e. we could set it right before `Defaults @(RuntimeHostConfigurationOption) items based on MSBuild properties.` in the file).",
                                           "updatedAt":  "2024-10-04T09:59:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wcPHG",
                                           "createdAt":  "2025-06-10T18:09:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "\u003e Did we consider moving the defaults to Microsoft.NET.Sdk.targets?\n\nCould work, but I see two potential concerns:\n- It\u0027s technically a breaking change for any MSBuild logic that was checking any of these properties after the Microsoft.NET.ILLink.targets (but before the Microsoft.NET.Sdk.targets import). Probably uncommon, but the break makes me a little uncomfortable.\n- There are some new switches in .NET 9. If we put all defaults into the Sdk.targets they will result in extra RuntimeHostConfigurationOptions for apps that target .NET 8 (because the ILLink targets are TFM-specific, but the Sdk targets are not).",
                                           "updatedAt":  "2025-06-10T18:09:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65P7Tl",
                                           "createdAt":  "2025-07-23T12:46:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "IMHO the defaults should be set as late as possible, in particular because we change `PublishTrimmed` in a target: https://github.com/dotnet/macios/blob/63ccc8798cebb12fce1c262ea16ef9c818ea25d4/dotnet/targets/Xamarin.Shared.Sdk.targets#L299-L314, so anything that depends on a particular value of `PublishTrimmed` may get the wrong defaults otherwise.",
                                           "updatedAt":  "2025-07-23T12:46:25Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[illink][ios] Explicitly setting `PublishTrimmed=true` changes the default feature switch configuration",
        "labels":  [
                       "good first issue",
                       "os-ios",
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108454",
        "createdAt":  "2024-10-01T20:48:02Z",
        "number":  108454,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-31T17:59:33Z",
        "body":  "The trim analysis tooling warns on members annotated with attributes whose ctors have RequiresUnreferencedCode:\r\n\r\n```csharp\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\nvar m = typeof(C).GetMethod(\"M\");\r\nvar p = typeof(C).GetProperty(\"P\");\r\nvar f = typeof(C).GetField(\"f\");\r\nvar e = typeof(C).GetEvent(\"E\");\r\n\r\nclass C {\r\n    [AttributeWithRUC]\r\n    public static void M() {}\r\n\r\n    [AttributeWithRUC]\r\n    public static int f;\r\n\r\n    [AttributeWithRUC]\r\n    public static int P { get; set; }\r\n\r\n    [AttributeWithRUC]\r\n    public static event Action E;\r\n}\r\n\r\n[RequiresUnreferencedCode(\"AttributeWithRUC\")]\r\nclass AttributeWithRUCAttribute : Attribute {}\r\n\r\n```\r\n\r\nanalyzer:\r\n```\r\nProgram.cs(12,6): warning IL2026: Using member \u0027AttributeWithRUCAttribute.AttributeWithRUCAttribute()\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. AttributeWithRUC.\r\nProgram.cs(18,6): warning IL2026: Using member \u0027AttributeWithRUCAttribute.AttributeWithRUCAttribute()\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. AttributeWithRUC.\r\nProgram.cs(15,6): warning IL2026: Using member \u0027AttributeWithRUCAttribute.AttributeWithRUCAttribute()\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. AttributeWithRUC.\r\nProgram.cs(9,6): warning IL2026: Using member \u0027AttributeWithRUCAttribute.AttributeWithRUCAttribute()\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. AttributeWithRUC.\r\n```\r\nILC:\r\n```\r\nILC : Trim analysis warning IL2026: C.E: Using member \u0027AttributeWithRUCAttribute.AttributeWithRUCAttribute()\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. AttributeWithRUC.\r\nILC : Trim analysis warning IL2026: C.E: Using member \u0027AttributeWithRUCAttribute.AttributeWithRUCAttribute()\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. AttributeWithRUC.\r\nILC : Trim analysis warning IL2026: C.f: Using member \u0027AttributeWithRUCAttribute.AttributeWithRUCAttribute()\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. AttributeWithRUC.\r\nILC : Trim analysis warning IL2026: C.P: Using member \u0027AttributeWithRUCAttribute.AttributeWithRUCAttribute()\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. AttributeWithRUC.\r\nILC : Trim analysis warning IL2026: C.P: Using member \u0027AttributeWithRUCAttribute.AttributeWithRUCAttribute()\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. AttributeWithRUC.\r\nILC : Trim analysis warning IL2026: C.M(): Using member \u0027AttributeWithRUCAttribute.AttributeWithRUCAttribute()\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. AttributeWithRUC.\r\n```\r\n(similar for ILLink - except ILLink warns for all kept members, whereas ILC only warns for reflectable members)\r\n\r\nThe warning on the method `M` can be bubbled up by annotating it with RequiresUnreferencedCode - then there will be a warning on the reference to `M` instead.\r\n\r\nFields/properties/events aren\u0027t supported attribute targets of RequiresUnreferencedCode, so they can\u0027t be annotated directly. If you instead add RequiresUnreferencedCode at the class level, this produces warnings at the access to the field/property/event. However, the warnings from the annotated property/event are still present, making it impossible to annotate this without suppressions.\r\n\r\nThis came up while annotating System.Configuration.ConfigurationManager - for example, if ConfigurationPropertyAttribute is annotated with RequiresUnreferencedCode, it warns here: https://github.com/dotnet/runtime/blob/82f8ac64b3e369411f4f1168da616fa9ab3b79d3/src/libraries/System.Configuration.ConfigurationManager/src/System/Configuration/ProviderSettings.cs#L47-L48",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjkdxnw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6OR3Gf",
                                           "createdAt":  "2024-10-01T20:48:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-01T20:48:33Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Unactionable trim warnings on property/event with attribute that has RUC ctor",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108501",
        "createdAt":  "2024-10-02T23:07:14Z",
        "number":  108501,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-24T21:59:53Z",
        "body":  "Similar to https://github.com/dotnet/runtime/issues/108454, but for attributes at the type level:\r\n```csharp\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\nvar c = typeof(C).GetCustomAttributes(false);\r\n\r\n[AttributeWithRUC]\r\n[RequiresUnreferencedCode(\"C\")]\r\nclass C {}\r\n\r\n[RequiresUnreferencedCode(\"AttributeWithRUC\")]\r\nclass AttributeWithRUCAttribute : Attribute {}\r\n```\r\n\r\n```\r\nTrim analysis warning IL2026: C: Using member \u0027AttributeWithRUCAttribute.AttributeWithRUCAttribute()\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. AttributeWithRUC\r\n```\r\n\r\n`RequiresUnreferencedCode` on C has no effect in this example (nor should it - it\u0027s just there to demonstrate that it doesn\u0027t silence the warning). There doesn\u0027t seem to be a way to annotate this to bubble up warnings to the caller.\r\n\r\nA variation of this came up in https://github.com/dotnet/runtime/pull/108464. There the issue is not with RUC on an attribute ctor, but with DebuggerDisplayAttribute:\r\n\r\nhttps://github.com/dotnet/runtime/blob/81efcade9e543a2c03457b3bc87a2bc76b36057e/src/libraries/System.Configuration.ConfigurationManager/src/System/Configuration/ConfigurationElementCollection.cs#L10-L11\r\n\r\nThis has the same problem when ConfigurationElementCollection is annotated with RequiresUnreferencedCode. Related: https://github.com/dotnet/linker/issues/2122 worked around this issue for DebuggerDisplayAttribute strings that ILLink couldn\u0027t parse.\r\n\r\nWhile https://github.com/dotnet/runtime/issues/108454 could potentially be addressed by allowing RUC on properties/events, this issue seems to require a change in the warning model. I think the warning should point not to the annotated member, but to the place where the member (or maybe the attribute) is reflected over. Related: https://github.com/dotnet/runtime/issues/103934",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjnN-3w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Oc37f",
                                           "createdAt":  "2024-10-02T23:07:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-02T23:07:41Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Unactionable trim warning on class with attribute that has RUC ctor",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108507",
        "createdAt":  "2024-10-03T06:23:50Z",
        "number":  108507,
        "author":  "Sergio0694",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-25T16:08:28Z",
        "body":  "### Description\r\n\r\nSpotted what seems to be an incorrect trim warning that\u0027s not suppressed correctly.\r\n\r\n### Reproduction Steps\r\n\r\n```csharp\r\n[RequiresUnreferencedCode(\"\")]\r\nclass A;\r\n\r\nclass B\u003cT\u003e where T : new();\r\n\r\n[RequiresUnreferencedCode(\"\")]\r\nclass C : B\u003cA\u003e;\r\n```\r\n\r\n### Expected behavior\r\n\r\nNo warnings.\r\n\r\n### Actual behavior\r\n\r\n![image](https://github.com/user-attachments/assets/88b46472-91fc-4adf-90c4-bc53b6f88f21)\r\n\r\n### Regression?\r\n\r\nNo, can repro on .NET 8 as well.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvqjS5w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6OffOV",
                                           "createdAt":  "2024-10-03T06:24:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-03T06:24:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OkUuu",
                                           "createdAt":  "2024-10-03T16:53:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Related: https://github.com/dotnet/runtime/issues/108523\r\n\r\nThere are two problems here:\r\n- the warning isn\u0027t suppressed by RUC on `C`\r\n- the warning text mentions the wrong member (it should mention `A`\u0027s ctor, not `C`.",
                                           "updatedAt":  "2024-10-03T17:08:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OmmU-",
                                           "createdAt":  "2024-10-03T23:03:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "An additional problem we might want to solve as part of this:\n```csharp\nclass C : B\u003cA\u003e\n{\n    public C()\n    {\n    }\n}\n```\n\nIn this case the analyzer misses the warning due to the implicit call to the base constructor. Note that the following example does produce a warning:\n```csharp\n[RequiresUnreferencedCode]\nclass Requires {}\n\nclass Derived : Requires\n{\n    public Derived // warning IL2026\n    {\n    }\n}\n```\n\nThe logic for checking the new constraint should be moved into the analyzer\u0027s dataflow logic where the implicit base constructor call is visible.",
                                           "updatedAt":  "2025-08-18T23:44:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-T9ac",
                                           "createdAt":  "2025-08-15T22:25:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "\u003e the warning text mentions the wrong member (it should mention A\u0027s ctor, not C.\n\nThis part was fixed in https://github.com/dotnet/runtime/pull/108528.\n\n\u003e the warning isn\u0027t suppressed by RUC on C\n\nNote that this wouldn\u0027t be a problem if we fixed https://github.com/dotnet/runtime/issues/118713. I\u0027m still planning to fix this independently though.",
                                           "updatedAt":  "2025-08-15T22:25:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-qNLn",
                                           "createdAt":  "2025-08-18T23:44:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "\u003e An additional problem we might want to solve as part of this:\n\nI extracted this to a separate [issue](https://github.com/dotnet/runtime/issues/118869) so the fix can focus on the customer-reported scenario.",
                                           "updatedAt":  "2025-08-18T23:44:48Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Incorrect IL2026 for [RequiresUnreferencedCode] on type deriving from A\u003cB\u003e where B has new() in A\u003cT\u003e definition",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109352",
        "createdAt":  "2024-10-11T20:26:51Z",
        "number":  109352,
        "author":  "AArnott",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-04T22:16:56Z",
        "body":  "### Describe the bug\n\nIn enabling the AOT readiness analyzers, the MessagePack codebase produces a lot of warnings. Among them is an AD0001 warning about a failed analyzer. See Exceptions section for details.\n\n### To Reproduce\n\n```\ngit clone https://github.com/MessagePack-CSharp/MessagePack-CSharp.git\ncd MessagePack-CSharp\ngit checkout dotnet/sdk/bug44120repro\n.\\MessagePack.sln\n```\n\nInspect the error list, filtering to AD0001 entries.\n\n### Exceptions (if any)\n\n\u003e Analyzer \u0027ILLink.RoslynAnalyzer.DynamicallyAccessedMembersAnalyzer\u0027 threw an exception of type \u0027System.ArgumentException\u0027 with message \u0027Reported diagnostic \u0027IL2075\u0027 has a source location in file \u0027Q:\\source\\MessagePack-CSharp\\src\\MessagePack.Annotations\\Attributes.cs\u0027, which is not part of the compilation being analyzed. (Parameter \u0027diagnostic\u0027)\u0027.\nException occurred with following context:\nCompilation: MessagePack\nISymbol: BuildCustomFormatterField (Method)\n\n```\nSystem.ArgumentException: Reported diagnostic \u0027IL2075\u0027 has a source location in file \u0027Q:\\source\\MessagePack-CSharp\\src\\MessagePack.Annotations\\Attributes.cs\u0027, which is not part of the compilation being analyzed. (Parameter \u0027diagnostic\u0027)\n   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalysisContextHelpers.VerifyDiagnosticLocationInCompilation(String id, Location location, Compilation compilation)\n   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalysisContextHelpers.VerifyDiagnosticLocationsInCompilation(Diagnostic diagnostic, Compilation compilation)\n   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalysisContextHelpers.VerifyArguments(Diagnostic diagnostic, Compilation compilation, Func`3 isSupportedDiagnostic, CancellationToken cancellationToken)\n   at Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext.ReportDiagnostic(Diagnostic diagnostic)\n   at ILLink.RoslynAnalyzer.DynamicallyAccessedMembersAnalyzer.\u003c\u003ec.\u003cInitialize\u003eb__8_1(OperationBlockAnalysisContext context)\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info, CancellationToken cancellationToken)\n```\n\n### Further technical details\n- Include the output of `dotnet --info`\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsHM-ww==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6RvgbE",
                                           "createdAt":  "2024-10-11T20:26:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label.",
                                           "updatedAt":  "2024-10-11T20:26:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RvgbK",
                                           "createdAt":  "2024-10-11T20:26:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label.",
                                           "updatedAt":  "2024-10-11T20:26:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Sq37S",
                                           "createdAt":  "2024-11-06T20:27:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "CC @amanasifkhalid. ",
                                           "updatedAt":  "2024-11-06T20:27:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Sq8pr",
                                           "createdAt":  "2024-11-06T20:38:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "@agocke, please see if this is an ILLInk related issue. ",
                                           "updatedAt":  "2024-11-06T20:38:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6S-Mzi",
                                           "createdAt":  "2024-11-08T21:28:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD6Wj8Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jtschuster",
                                                                               "createdAt":  "2024-11-11T15:37:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "agocke",
                                           "body":  "@jtschuster could you take a look?",
                                           "updatedAt":  "2024-11-08T21:28:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TJq_E",
                                           "createdAt":  "2024-11-11T18:24:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "I\u0027m unable to reproduce this. Does this occur in VS only, or command line builds too? What version for the .NET SDK and VS are you using?",
                                           "updatedAt":  "2024-11-11T18:24:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TJv_g",
                                           "createdAt":  "2024-11-11T18:36:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AArnott",
                                           "body":  "@jtschuster This repros for me just now with Visual Studio Version 17.13.0 Preview 1.0 [35429.394.main].\n\nIt can be helpful to filter your Error List to just AD0001 warnings to find it:\n![Image](https://github.com/user-attachments/assets/ddd0ecbb-9e77-47bc-8e73-fffcaf10d6ab)\n\n\n\u003cdetails\u003e\n\u003csummary\u003edotnet --info\u003c/summary\u003e\n\n```\ndotnet --info\n.NET SDK:\n Version:           8.0.403\n Commit:            c64aa40a71\n Workload version:  8.0.400-manifests.42a6cf86\n MSBuild version:   17.11.9+a69bbaaf5\n\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.26100\n OS Platform: Windows\n RID:         win-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\8.0.403\\\n\n.NET workloads installed:\nConfigured to use loose manifests when installing new manifests.\nThere are no installed workloads to display.\n\nHost:\n  Version:      9.0.0-rc.2.24473.5\n  Architecture: x64\n  Commit:       990ebf52fc\n\n.NET SDKs installed:\n  8.0.403 [C:\\Program Files\\dotnet\\sdk]\n  9.0.100-rc.2.24474.11 [C:\\Program Files\\dotnet\\sdk]\n\n.NET runtimes installed:\n  Microsoft.AspNetCore.App 8.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 9.0.0-rc.2.24474.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 6.0.35 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 8.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.NETCore.App 9.0.0-rc.2.24473.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n  Microsoft.WindowsDesktop.App 6.0.35 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n  Microsoft.WindowsDesktop.App 8.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n  Microsoft.WindowsDesktop.App 9.0.0-rc.2.24474.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\n\nOther architectures found:\n  x86   [C:\\Program Files (x86)\\dotnet]\n    registered at [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x86\\InstallLocation]\n\nEnvironment variables:\n  Not set\n\nglobal.json file:\n  D:\\source\\MessagePack-CSharp\\global.json\n\nLearn more:\n  https://aka.ms/dotnet/info\n\nDownload .NET:\n  https://aka.ms/dotnet/download\n```\n\n\u003c/details\u003e",
                                           "updatedAt":  "2024-11-11T18:36:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TdVkT",
                                           "createdAt":  "2024-11-13T15:25:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "I\u0027m trying to figure out how to install 17.13.0 Preview 1.0, but on 17.13.0 Preview 2.0, the IL2075 warning location is `MessagePack-CSharp\\src\\MessagePack\\Resolvers\\DynamicObjectResolver.cs:401`, which is where it should be and is in the compilation. Maybe this is a Roslyn issue that got resolved between preview versions? If you upgrade to Preview 2.0, does it persist?",
                                           "updatedAt":  "2024-11-13T15:25:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TelJw",
                                           "createdAt":  "2024-11-13T17:21:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD6voDA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jtschuster",
                                                                               "createdAt":  "2024-11-13T18:09:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AArnott",
                                           "body":  "@jtschuster The bug still repros on 17.13 Preview 2 (35511.228.main):\n\n\n\u003e Analyzer \u0027ILLink.RoslynAnalyzer.DynamicallyAccessedMembersAnalyzer\u0027 threw an exception of type \u0027System.ArgumentException\u0027 with message \u0027Reported diagnostic \u0027IL2075\u0027 has a source location in file \u0027D:\\source\\MessagePack-CSharp\\src\\MessagePack.Annotations\\Attributes.cs\u0027, which is not part of the compilation being analyzed. (Parameter \u0027diagnostic\u0027)\u0027.\nException occurred with following context:\nCompilation: MessagePack\nISymbol: BuildCustomFormatterField (Method)\n\n\u003e System.ArgumentException: Reported diagnostic \u0027IL2075\u0027 has a source location in file \u0027D:\\source\\MessagePack-CSharp\\src\\MessagePack.Annotations\\Attributes.cs\u0027, which is not part of the compilation being analyzed. (Parameter \u0027diagnostic\u0027)\n   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalysisContextHelpers.VerifyDiagnosticLocationInCompilation(String id, Location location, Compilation compilation)\n   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalysisContextHelpers.VerifyDiagnosticLocationsInCompilation(Diagnostic diagnostic, Compilation compilation)\n   at Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalysisContextHelpers.VerifyArguments(Diagnostic diagnostic, Compilation compilation, Func`3 isSupportedDiagnostic, CancellationToken cancellationToken)\n   at Microsoft.CodeAnalysis.Diagnostics.OperationBlockAnalysisContext.ReportDiagnostic(Diagnostic diagnostic)\n   at ILLink.RoslynAnalyzer.DynamicallyAccessedMembersAnalyzer.\u003c\u003ec.\u003cInitialize\u003eb__8_1(OperationBlockAnalysisContext context)\n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info, CancellationToken cancellationToken)\n",
                                           "updatedAt":  "2024-11-13T17:21:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TgxdK",
                                           "createdAt":  "2024-11-13T21:35:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "I\u0027m not able to repro the issue either - @AArnott are you able to repro this on another machine?",
                                           "updatedAt":  "2024-11-13T21:35:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ThEro",
                                           "createdAt":  "2024-11-13T22:06:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD6xw7g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2024-11-13T22:19:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AArnott",
                                           "body":  "I\u0027ve already repro\u0027d it on 2 distinct machines. ",
                                           "updatedAt":  "2024-11-13T22:06:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ThmXr",
                                           "createdAt":  "2024-11-13T23:52:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Still can\u0027t repro on a fresh dev box. However, I do notice that the IL2075 warning shows up in a command-line build, but not in the error list. Maybe the AD0001 is getting swallowed somehow in our setup. @jtschuster do you see the warning in the error list or on the command-line?",
                                           "updatedAt":  "2024-11-13T23:52:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Tmi7z",
                                           "createdAt":  "2024-11-14T13:26:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "I see the IL2075 in `DynamicObjectResolver.cs` in the VS error list, but only (usually) on a rebuild or (consistently) after a `git clean -xdf`.",
                                           "updatedAt":  "2024-11-14T13:26:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6To2xi",
                                           "createdAt":  "2024-11-14T17:02:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AArnott",
                                           "body":  "FWIW I see the AD0001 error without any build at all. Just open the sln on a clean repo and wait a couple minutes. A flood of entries appear in the Error List, so I then apply the column filter to show only the (1) AD0001 error and it shows up.",
                                           "updatedAt":  "2024-11-14T17:02:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TpPX9",
                                           "createdAt":  "2024-11-14T17:52:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "Warnings don\u0027t show up for me until I open source files. When I open `DynamicObjectResolver.cs` and `MessagePack.Annotations\\Attributes.cs`, with no build I still can\u0027t get the AD0001. Which files do you have open when you get the AD0001 error? Or do you have a setting that turns on analysis on for unopened files?",
                                           "updatedAt":  "2024-11-14T17:52:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TpcyQ",
                                           "createdAt":  "2024-11-14T18:19:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD67VuQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jtschuster",
                                                                               "createdAt":  "2024-11-14T18:40:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "AArnott",
                                           "body":  "\u003e Or do you have a setting that turns on analysis on for unopened files?\n\nI definitely have this setting in my IDE.",
                                           "updatedAt":  "2024-11-14T18:19:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TpmNX",
                                           "createdAt":  "2024-11-14T18:40:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD67k6w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "AArnott",
                                                                               "createdAt":  "2024-11-14T19:06:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "Thank you, that did it, I can repro now. Now to investigate why..",
                                           "updatedAt":  "2024-11-14T18:40:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wcTeL",
                                           "createdAt":  "2025-06-10T18:17:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "@jtschuster did you end up getting any more insight into this? If you still have a repro handy it would be great if you could share it for future reference.",
                                           "updatedAt":  "2025-06-10T18:17:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wcz7D",
                                           "createdAt":  "2025-06-10T19:16:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEWG9QA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2025-06-10T21:54:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "I wasn\u0027t able to find the root cause. I haven\u0027t checked recent builds, but the repro in the original message worked once I set VS to run analysis on unopened files.",
                                           "updatedAt":  "2025-06-10T19:16:16Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "DynamicallyAccessedMembersAnalyzer throws an internal exception due to source location outside compilation",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109189",
        "createdAt":  "2024-10-24T16:51:59Z",
        "number":  109189,
        "author":  "Sergio0694",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-03T20:27:59Z",
        "body":  "### Description\n\nThe trim/AOT analyzer doesn\u0027t offer the same suggestion for `RuntimeHelpers.GetUninitializedObject` as it does for eg. `Activator.CreateInstance`, when used somewhere inside a generic class where the `T` type argument is used for the method (via a `typeof(T)` expression). It only offers to suppress the warning, which is not safe to do and might push developers into an incorrectly annotated scenario that might crash at runtime.\n\n### Reproduction Steps\n\n```csharp\nclass Foo\u003cT\u003e\n{\n    T _dummy = (T)RuntimeHelpers.GetUninitializedObject(typeof(T));\n}\n```\n\n### Expected behavior\n\nThe analyzer should suggest adding `[DAM]` on the `T` type parameter on `Foo\u003cT\u003e`. Interestingly enough, it does do that when using `Activator.CreateInstance`, but not when using this method. Perhaps it\u0027s just missing the same special casing in the analyzer or something?\n\n### Actual behavior\n\n![Image](https://github.com/user-attachments/assets/1ea9aa74-a38d-4a11-825d-340e02fc10ee)\n\nGet the warning, but the analyzer only offers to add the suppression for it.\n\n### Regression?\n\nNo.\n\n### Configuration\n\n- .NET 9 RC2\n- VS 17.12 P3",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkS8huA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6RLyG4",
                                           "createdAt":  "2024-10-24T16:52:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-24T16:52:18Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Analyzer doesn\u0027t offer correct fix for missing [DAM] for RuntimeHelpers.GetUninitializedObject",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109748",
        "createdAt":  "2024-11-12T21:24:23Z",
        "number":  109748,
        "author":  "jtschuster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-23T20:22:03Z",
        "body":  "It\u0027s a common pattern in `IDispose.Dispose()` to do something like the following for each field/property:\n```C#\nMyField?.Dispose();\nMyField = null;\n```\nHowever, this marks the field unconditionally, even if it\u0027s never used otherwise. xamarin-macios has custom steps ([here](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/BackingFieldDelayHandler.cs) and [here](https://github.com/xamarin/xamarin-macios/blob/main/tools/dotnet-linker/BackingFieldDelayHandler.cs#L98)) to work around this, but this functionality could be built directly into the linker.\n\nFields and property getters/setters would not be marked by references to the field/getter if:\n- A constant `null` or `default` is passed to a property setter/stfld AND the setter is an auto property\n- A getter/ldfld is called and return value is immediately (the value is not stored in a local) checked against null\n- A reference to the getter/ldfld in a basic block where the field must not be `null` or `default`\n  - Note a setter/stfld with a non-null value will mark the field/property in the basic block.\n\nReferences that do not mark the type and basic blocks that require the field/property to be `null` or `default` must be tracked so that:\n- Calls to the setter/stfld and the argument load must be removed\n- Checks on the getter/ldfld against null or default and the basic block it guards must be removed.\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOk1Lc0g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6TUdkY",
                                           "createdAt":  "2024-11-12T21:24:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-12T21:24:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TUeyd",
                                           "createdAt":  "2024-11-12T21:27:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "cc @MichalStrehovsky Does NativeAOT do anything like this?",
                                           "updatedAt":  "2024-11-12T21:27:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TUtzS",
                                           "createdAt":  "2024-11-12T22:06:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e cc [@MichalStrehovsky](https://github.com/MichalStrehovsky) Does NativeAOT do anything like this?\n\nIt doesn\u0027t. The cost of fields/properties is marginal in native AOT. We don\u0027t generate metadata for the fields/properties and the cost of a null assignment is basically a single mov instruction. More needs to happen to generate metadata such as names or field type information (the fields needs to be visible target of reflection). There might be value in the elimination of basic blocks guarded by null checks though.\n",
                                           "updatedAt":  "2024-11-12T22:06:55Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "ILLink: Don\u0027t mark fields and properties when only assigned default value and other accesses are null-checked",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109802",
        "createdAt":  "2024-11-13T21:57:37Z",
        "number":  109802,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAuRSg==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "Sergio0694",
                                            "createdAt":  "2024-11-13T22:16:07Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "vitek-karas",
                                            "createdAt":  "2024-11-14T10:42:33Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-11-14T15:23:39Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2024-11-15T03:54:03Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "AArnott",
                                            "createdAt":  "2025-04-01T14:15:50Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-03-31T17:56:28Z",
        "body":  "Context: https://github.com/dotnet/runtime/pull/109772#issuecomment-2474856235\n\nIt would be nice if the analyzer could warn on DynamicallyAccessedMembers annotations that preserve more than is necessary. This would be hard to do when a Type \"escapes\" to an annotated field, but sounds reasonable at least when the dataflow only involves annotated method parameters.\n\nThis would help move away from `DynamicallyAccessedMembers.All` annotations to the less broad annotations added for https://github.com/dotnet/runtime/issues/88512.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOk4QP0A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ThA_Q",
                                           "createdAt":  "2024-11-13T21:57:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @agocke, @sbomer, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-13T21:57:59Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Trim analyzer should warn on unnecessary DynamicallyAccessedMembers",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110239",
        "createdAt":  "2024-11-28T05:08:14Z",
        "number":  110239,
        "author":  "kant2002",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-14T05:25:26Z",
        "body":  "Consider this configuration\n```csharp\ninternal List\u003cType\u003e InterceptorProviders { get; } = [typeof(Server.Interceptors.ServerSide.RevalidatingInterceptor)];\n```\nAnd the code whcih use this configuration\n```csharp\nforeach (Type interceptorType in config.DataPortalOptions.DataPortalServerOptions.InterceptorProviders)\n{\n  services.AddScoped(typeof(IInterceptDataPortal), interceptorType);\n}\n```\n\nThere no way how I can say that List of Types will contain only types with specific DAM properties. I think having that would still be statically analyzeable.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlVkucw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6VVBys",
                                           "createdAt":  "2024-11-28T05:56:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-28T05:56:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VVCy4",
                                           "createdAt":  "2024-11-28T06:00:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "This would require annotating not just list of the types, but also the enumerator and IEnumerable.\n\nIf you want a workaround, we\u0027ve been using patterns like this:\n\n```csharp\nstruct ListOfActivatableTypes\n{\n    private readonly List\u003cType\u003e _activatableTypes = new List\u003cType\u003e();\n\n    public ListOfActivatableTypes() { }\n\n    public void Add([DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)] Type type)\n        =\u003e _activatableTypes.Add(type);\n\n    public Enumerator GetEnumerator() =\u003e new Enumerator(this);\n\n    public struct Enumerator : IEnumerator\u003cType\u003e\n    {\n        private List\u003cType\u003e.Enumerator _enumerator;\n\n        public Enumerator(ListOfActivatableTypes list) =\u003e _enumerator = list._activatableTypes.GetEnumerator();\n\n        public bool MoveNext() =\u003e _enumerator.MoveNext();\n\n        public void Reset() =\u003e ((IEnumerator)_enumerator).Reset();\n        public void Dispose() =\u003e _enumerator.Dispose();\n\n        [UnconditionalSuppressMessage(\"\", \"IL2073\", Justification = \"We ensure only annotated things are added\")]\n        [UnconditionalSuppressMessage(\"\", \"IL2093\", Justification = \"The annotation is on the return type and shouldn\u0027t matter\")]\n        [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)]\n        public Type Current =\u003e _enumerator.Current;\n        object IEnumerator.Current =\u003e Current;\n    }\n}\n```\n\nIt requires warning suppressions, but the invariants are relatively easy to ensure since it\u0027s pretty compact.",
                                           "updatedAt":  "2024-11-28T06:00:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VVKAE",
                                           "createdAt":  "2024-11-28T06:26:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kant2002",
                                           "body":  "Thank you. That\u0027s nice workaround, but this is business orienter project, so I don\u0027t know can it fly or not. Anyway, thanks for your help, I think it\u0027s really nice way to move forward, since that\u0027s internal property.",
                                           "updatedAt":  "2024-11-28T06:26:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VWS5z",
                                           "createdAt":  "2024-11-28T09:30:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD9P_jg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "kant2002",
                                                                               "createdAt":  "2024-11-28T10:04:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "neon-sunset",
                                                                               "createdAt":  "2024-11-28T20:55:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2024-12-02T18:44:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Another solution which we\u0027ve also used it to wrap the `Type` into a struct:\n\n```C#\n    struct ActivatableType\n    {\n        public ActivatableType([DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)] Type type)\n        {\n            this.type = type;\n        }\n\n        [DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)]\n        public Type type;\n    }\n\n    List\u003cActivatableType\u003e InterceptorProviders { get; } = [new ActivatableType(typeof(string))];\n\n    void TestIt()\n    {\n        foreach (var i in InterceptorProviders)\n        {\n            Activator.CreateInstance(i.type); // No warning\n\n            i.type.GetMethods(); // Warns\n        }\n    }\n```\n\nThe usage is a bit worse, but it doesn\u0027t require any suppressions and you can use any collection type with it.",
                                           "updatedAt":  "2024-11-28T09:30:38Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Consider annotations for generic arguments",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110553",
        "createdAt":  "2024-12-09T22:34:51Z",
        "number":  110553,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-10T18:18:16Z",
        "body":  "For code like this:\n\n```csharp\npublic static IEnumerable\u003cint\u003e IteratorWithIntegerDataflow ()\n{\n\tint integerLocal = 0;\n\tyield return 0;\n\tvar types = new Type[] { GetWithPublicMethods (), GetWithPublicFields () };\n\ttypes[integerLocal].RequiresPublicMethods ();\n}\n```\n\nILLink tracks assignments and reads of the int local, and before https://github.com/dotnet/runtime/pull/110105 this was enough for the analysis to determine that array element 0 satisfies PublicMethods.\n\nThe dependency update changed the iterator codegen, introducing a dispose method that assigns `null` to the array. This interferes with the analysis and causes this to report a warning:\n\n```\nTrim analysis warning IL2062: Mono.Linker.Tests.Cases.DataFlow.CompilerGeneratedCodeAccessedViaReflection.IteratorStateMachines.\u003cIteratorWithIntegerDataflow\u003ed__3.MoveNext(): Value passed to parameter \u0027type\u0027 of method \u0027Mono.Linker.Tests.Cases.Expectations.Helpers.DataFlowTypeExtensions.RequiresPublicMethods(Type)\u0027 can not be statically determined and may not meet \u0027DynamicallyAccessedMembersAttribute\u0027 requirements.\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlsfdhQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Wx92F",
                                           "createdAt":  "2024-12-09T22:35:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-09T22:35:15Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Trim analysis fails to track integer across iterator yield",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110563",
        "createdAt":  "2024-12-10T07:09:15Z",
        "number":  110563,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9iyGg==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "Sergio0694",
                                            "createdAt":  "2024-12-17T16:49:18Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-01-06T22:41:10Z",
        "body":  "We currently keep the `M` method for this even though it\u0027s provably unreachable - we intend to keep it because of a object.GetType call but the instance was never allocated so object.GetType would never return C.\n\n```csharp\nusing System.Diagnostics.CodeAnalysis;\n\nclass Program\n{\n    private static C _inst;\n\n    public static void Main()\n    {\n        if (_inst != null)\n            RequirePublicMethods(_inst.GetType());\n    }\n\n    public static void RequirePublicMethods([DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods)] Type t) { }\n}\n\n\n[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods)]\nclass C\n{\n    public void M() { }\n}\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOltYfeQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6W1h95",
                                           "createdAt":  "2024-12-10T07:09:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-10T07:09:45Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Postpone marking DAM members until type allocated",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110605",
        "createdAt":  "2024-12-11T08:52:19Z",
        "number":  110605,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-10T18:19:42Z",
        "body":  "ILLink testing runs ILVerify on the output validating that no new unverifiable code was introduced by trimming. If there is unverifiable code within the method and the method was rewritten by ILLink, the test infrastructure is not able to reconcile the preexisting warning and the warning in trimmed code. There\u0027s a workaround for this in the product, look for the issue number.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "ILLink PEVerify testing cannot handle rewritten methods",
        "labels":  [
                       "test-bug",
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110748",
        "createdAt":  "2024-12-16T17:22:28Z",
        "number":  110748,
        "author":  "vitek-karas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-28T18:15:59Z",
        "body":  "This code: https://github.com/xamarin/xamarin-macios/blob/84cb6e794e315f2b037c35fc96efe36fc9d84f6b/tools/dotnet-linker/Steps/ManagedRegistrarLookupTablesStep.cs#L136\n\ncalls `Mark((InterfaceImplementation)iface))`. This eventually ends up calling `new MessageOrigin(iface as ICustomAttributeProvider)` which works because `InterfaceImplementation` does implement `ICustomAttributeProvider`, but then later on we assert:\n```\n\t\t\tDebug.Assert (provider == null || provider is IMemberDefinition || provider is AssemblyDefinition);\n```\n\nin https://github.com/dotnet/runtime/blob/efb8a8fe6263cb66c154576c859523e885dc5a24/src/tools/illink/src/linker/Linker/MessageOrigin.cs#L54C1-L54C103\n\n`InterfaceImplementation` none of those and this assert fails.\n\nI don\u0027t know if we want the custom step calling `Mark` on `InterfaceImplementation`, but either way we should either change the custom step (if this is not desired behavior) or fix the assert.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[illink] Assert when running ios custom steps due to marking interface implementation",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112969",
        "createdAt":  "2025-02-26T21:28:39Z",
        "number":  112969,
        "author":  "Sergio0694",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBzQWw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MitchRazga",
                                            "createdAt":  "2025-04-28T14:20:33Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-05-02T02:26:09Z",
        "body":  "### Background and motivation\n\nThis proposal is a follow up to #96859, with the goal being to implement the ability to get analyzer support for custom feature switches. This was initially discussed there as well, but was then removed from the initial proposal. We have several scenarios where this would be great to have:\n- [CsWinRT](https://github.com/microsoft/CsWinRT): we have several feature switches available, and right now there is no way to easily understand how they affect the code execution at runtime. This makes it less intuitive for customers to use them, and it also makes it more difficult for us to maintain the codebase, as we have to \"just know\" what code paths will fail or not depending on combinations of feature switches.\n- Windows feature flags: as we\u0027re continuing to adopt C# for OS components, we also implemented a C# backend to check feature flags at runtime. This is extremely widespread in all C# components in Windows, but right now it has no analyzer support whatsoever, making things more brittle and more difficult to maintain. This is another scenario where we could really use support for custom feature flags.\n- [MVVM Toolkit](https://github.com/CommunityToolkit/dotnet): we have a number of feature switches here too, but no way to provide customers with analyzer support so they can easily validate that they\u0027re not trying to use code that won\u0027t work if they disabled a given feature switch.\n\nThe proposal is to make it possible for developers to leverage the same analyzer as for trimming/AOT, but for custom feature switches too.\n\nPrior design discussion: https://github.com/dotnet/designs/pull/305/.\n\n### API Proposal\n\n```diff\n  namespace System.Diagnostics.CodeAnalysis;\n  \n- [AttributeUsage(AttributeTargets.Property, Inherited = false)]\n+ [AttributeUsage(AttributeTargets.Property | AttributeTargets.Class, Inherited = false)]\n  public sealed class FeatureSwitchDefinitionAttribute : Attribute\n  {\n      public FeatureSwitchDefinitionAttribute(string switchName);\n  \n      public string SwitchName { get; }\n  }\n  ```\n\nThe role of `[FeatureCheck]` is to allow 3rd party libraries to define a relationship between a property representing a feature switch, and an attribute they can define to annotate members that rely on that custom feature switch, such that the analyzer can correctly warn (or not) upon usage.\n\n### API Usage\n\nThe goal is to make this scenario work as follows:\n\n```csharp\n[FeatureSwitchDefinition(\"MyCustomFeature\")]\npublic static bool IsMyCustomFeatureSupported { get; } = AppContext.TryGetSwitch(\"MyCustomFeature\", out bool flag) ? flag : true;\n\n[AttributeUsage(AttributeTargets.Method | AttributeTargets.Constructor | AttributeTargets.Class, Inherited = false)]\n[FeatureSwitchDefinition(\"MyCustomFeature\")]\npublic sealed class RequiresMyCustomFeatureAttribute : Attribute;\n\nclass Program\n{\n    public void Test()\n    {\n        M(); // Warns\n    \n        if (IsMyCustomFeatureSupported)\n        {\n            M(); // Does not warn\n        }\n    }\n    \n    [RequiresMyCustomFeature]\n    private void M()\n    {\n    }\n}\n```\n\n### Risks\n\nNo risk. The current situation is strictly worse, as there\u0027s no way for 3rd party authors to easily validate feature switch dependent scenarios.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoT0REg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6gHMgt",
                                           "createdAt":  "2025-02-26T21:29:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime-compilerservices\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-26T21:29:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gHUJ0",
                                           "createdAt":  "2025-02-26T21:45:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "Why introduce an indirection to a secondary attribute?\n\nWouldn\u0027t this work and be significantly simpler?\n\n```csharp\n[RequiresFeature(\"MyCustomFeature\")]\nprivate void M()\n{\n}\n```\n\nAdditionally, wouldn\u0027t it always make sense to check `AppContext` for the feature switch, instead of leaving it open using an arbitrary `bool` function?\n\nAnd lastly, won\u0027t this create a semantic conflict with `Microsoft.FeatureManagement`? Are you fine with the confusion that this will bring into the ecosystem? Was there any consideration about \"unifying\" these 2 concepts before introducing extra abstractions?",
                                           "updatedAt":  "2025-02-26T21:45:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hPRES",
                                           "createdAt":  "2025-03-06T23:03:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-06T23:03:56Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: extend \u0027Attribute\u0027 model for feature APIs for custom feature switches",
        "labels":  [
                       "api-suggestion",
                       "code-analyzer",
                       "partner-impact",
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113597",
        "createdAt":  "2025-03-17T05:12:00Z",
        "number":  113597,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-19T20:56:15Z",
        "body":  "The third `MakeGenericType` generates IL2055 even though it\u0027s equivalent to the above two.\n\n`dotnet publish` is obviously fine and no warning generated from ILLink or ILC since there\u0027s no difference between the three at IL level.\n\n```csharp\nusing System.Diagnostics.CodeAnalysis;\n\ntypeof(Foo\u003c\u003e).MakeGenericType(typeof(object)); // No warning\ntypeof(Foo\u003c\u003e).MakeGenericType(new[] { typeof(object) }); // No warning\ntypeof(Foo\u003c\u003e).MakeGenericType([typeof(object)]); // IL2055\n\nclass Foo\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.All)] T\u003e;\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOopzaVg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6inNpW",
                                           "createdAt":  "2025-03-17T05:12:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-17T05:12:31Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Add collection literal expression handling to Roslyn analyzer",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114022",
        "createdAt":  "2025-03-28T20:22:19Z",
        "number":  114022,
        "author":  "mnxamdev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-19T20:49:30Z",
        "body":  "### Description\n\nSame as https://github.com/dotnet/runtime/issues/104945\n\n\n### Reproduction Steps\n\n```\n/usr/local/share/dotnet/dotnet publish /Users/me/myproject/myapp.csproj --framework net9.0-ios --configuration InternalBuild --runtime ios-arm64 /p:ArchiveOnBuild=true\n```\n\n### Expected behavior\n\nBuilds on iOS.\n\n### Actual behavior\n\n\nError output during build (note: trying to build iOS IPA which always worked before updating to MAUI 9, works on development macs)\n\n```\nFatal error in IL Linker\n14:21:42                Unhandled exception. Mono.Linker.LinkerFatalErrorException: ILLink: error IL1011: Failed to write \u0027obj/QABuild/net9.0-ios/ios-arm64/linked/Microsoft.iOS.dll\u0027.\n14:21:42                 ---\u003e System.ArgumentException: Member \u0027System.Boolean owns\u0027 is declared in another module and needs to be imported\n14:21:42                   at Mono.Cecil.MetadataBuilder.LookupToken(IMetadataTokenProvider provider)\n14:21:42                   at Mono.Cecil.Cil.CodeWriter.WriteOperand(Instruction instruction)\n14:21:42                   at Mono.Cecil.Cil.CodeWriter.WriteInstructions()\n14:21:42                   at Mono.Cecil.Cil.CodeWriter.WriteResolvedMethodBody(MethodDefinition method)\n14:21:42                   at Mono.Cecil.MetadataBuilder.AddMethod(MethodDefinition method)\n14:21:42                   at Mono.Cecil.MetadataBuilder.AddType(TypeDefinition type)\n14:21:42                   at Mono.Cecil.MetadataBuilder.AddTypes()\n14:21:42                   at Mono.Cecil.MetadataBuilder.BuildTypes()\n14:21:42                   at Mono.Cecil.MetadataBuilder.BuildModule()\n14:21:42                   at Mono.Cecil.MetadataBuilder.BuildMetadata()\n14:21:42                   at Mono.Cecil.ModuleWriter.\u003c\u003ec.\u003cBuildMetadata\u003eb__2_0(MetadataBuilder builder, MetadataReader _)\n14:21:42                   at Mono.Cecil.ModuleDefinition.Read[TItem,TRet](TItem item, Func`3 read)\n14:21:42                   at Mono.Cecil.ModuleWriter.BuildMetadata(ModuleDefinition module, MetadataBuilder metadata)\n14:21:42                   at Mono.Cecil.ModuleWriter.Write(ModuleDefinition module, Disposable`1 stream, WriterParameters parameters)\n14:21:42                   at Mono.Cecil.ModuleWriter.WriteModule(ModuleDefinition module, Disposable`1 stream, WriterParameters parameters)\n14:21:42                   at Mono.Cecil.ModuleDefinition.Write(String fileName, WriterParameters parameters)\n14:21:42                   at Mono.Cecil.AssemblyDefinition.Write(String fileName, WriterParameters parameters)\n14:21:42                   at Mono.Linker.Steps.OutputStep.WriteAssembly(AssemblyDefinition assembly, String directory, WriterParameters writerParameters)\n14:21:42                   --- End of inner exception stack trace ---\n14:21:42                   at Mono.Linker.Steps.OutputStep.WriteAssembly(AssemblyDefinition assembly, String directory, WriterParameters writerParameters)\n14:21:42                   at Mono.Linker.Steps.OutputStep.WriteAssembly(AssemblyDefinition assembly, String directory)\n14:21:42                   at Mono.Linker.Steps.OutputStep.OutputAssembly(AssemblyDefinition assembly)\n14:21:42                   at Mono.Linker.Steps.OutputStep.ProcessAssembly(AssemblyDefinition assembly)\n14:21:42                   at Mono.Linker.Steps.BaseStep.Process(LinkContext context)\n14:21:42                   at Mono.Linker.Pipeline.ProcessStep(LinkContext context, IStep step)\n14:21:42                   at Mono.Linker.Pipeline.Process(LinkContext context)\n14:21:42                   at Mono.Linker.Driver.Run(ILogger customLogger)\n14:21:42                   at Mono.Linker.Driver.Main(String[] args)\n14:21:42                Build continuing because \"ContinueOnError\" on the task \"ILLink\" is set to \"ErrorAndContinue\".\n14:21:42            1\u003eDone Building Project \"/Users/macbuild/buildAgent/work/6715574de90c19a4/myproject/myapp.csproj\" (Publish target(s)) -- FAILED.\n14:21:42       \n14:21:43          1\u003eILLink : error IL1011: Failed to write \u0027obj/InternalBuild/net9.0-ios/ios-arm64/linked/Microsoft.iOS.dll\u0027.\n14:21:43          1\u003e/Users/macbuild/.nuget/packages/microsoft.net.illink.tasks/9.0.3/build/Microsoft.NET.ILLink.targets(96,5): error NETSDK1144: Optimizing assemblies for size failed.\n```\n\n### Regression?\n\nYes. Worked fine with .Net MAUI 8\n\n### Known Workarounds\n\nNone. Tried this but didn\u0027t work:\n`\u003c_AggressiveAttributeTrimming\u003efalse\u003c/_AggressiveAttributeTrimming\u003e` \n\n\n### Configuration\n\nmacOS Sequoia 15.3.2\nIntel Mac\n\n```\n\u003cPropertyGroup Condition=\"$(TargetFramework.Contains(\u0027-ios\u0027)) and \u0027$(Configuration)\u0027 == \u0027InternalBuild\u0027\"\u003e\n\t\t\u003cDefineConstants\u003e__IOS__;__INTERNALBUILD__;\u003c/DefineConstants\u003e\n\t\t\u003cOptimize\u003eTrue\u003c/Optimize\u003e\n\t\t\u003cDebugType\u003eportable\u003c/DebugType\u003e\n\t\t\u003cCreatePackage\u003efalse\u003c/CreatePackage\u003e\n\t\t\u003cCodesignProvision\u003eAutomatic:AdHoc\u003c/CodesignProvision\u003e\n\t\t\u003cCodesignKey\u003eiPhone Distribution\u003c/CodesignKey\u003e\n\t\t\u003cMtouchEnableSGenConc\u003etrue\u003c/MtouchEnableSGenConc\u003e\n\t\t\u003cBuildIpa\u003etrue\u003c/BuildIpa\u003e\n\t\t\u003cCodesignEntitlements\u003ePlatforms\\iOS\\Entitlements.plist\u003c/CodesignEntitlements\u003e\n\t\t\u003cMtouchLink\u003eSdkOnly\u003c/MtouchLink\u003e\n\t\t\u003cUseInterpreter\u003etrue\u003c/UseInterpreter\u003e\n\t\u003c/PropertyGroup\u003e\n```\n\n```\n.NET SDK:\n Version:           9.0.202\n Commit:            3a53853c30\n Workload version:  9.0.200-manifests.5c4e24dc\n MSBuild version:   17.13.13+1c2026462\n\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  15.3\n OS Platform: Darwin\n RID:         osx-x64\n Base Path:   /usr/local/share/dotnet/sdk/9.0.202/\n\n.NET workloads installed:\n [maui-maccatalyst]\n   Installation Source: SDK 9.0.200\n   Manifest Version:    9.0.14/9.0.100\n   Manifest Path:       /usr/local/share/dotnet/sdk-manifests/9.0.100/microsoft.net.sdk.maui/9.0.14/WorkloadManifest.json\n   Install Type:        FileBased\n\n [maui-ios]\n   Installation Source: SDK 9.0.200\n   Manifest Version:    9.0.14/9.0.100\n   Manifest Path:       /usr/local/share/dotnet/sdk-manifests/9.0.100/microsoft.net.sdk.maui/9.0.14/WorkloadManifest.json\n   Install Type:        FileBased\n\n [maui-android]\n   Installation Source: SDK 9.0.200\n   Manifest Version:    9.0.14/9.0.100\n   Manifest Path:       /usr/local/share/dotnet/sdk-manifests/9.0.100/microsoft.net.sdk.maui/9.0.14/WorkloadManifest.json\n   Install Type:        FileBased\n\n [ios]\n   Installation Source: SDK 9.0.200\n   Manifest Version:    18.2.9180/9.0.100\n   Manifest Path:       /usr/local/share/dotnet/sdk-manifests/9.0.100/microsoft.net.sdk.ios/18.2.9180/WorkloadManifest.json\n   Install Type:        FileBased\n\n [maui-mobile]\n   Installation Source: SDK 9.0.200\n   Manifest Version:    9.0.14/9.0.100\n   Manifest Path:       /usr/local/share/dotnet/sdk-manifests/9.0.100/microsoft.net.sdk.maui/9.0.14/WorkloadManifest.json\n   Install Type:        FileBased\n\n [maui]\n   Installation Source: SDK 9.0.200\n   Manifest Version:    9.0.14/9.0.100\n   Manifest Path:       /usr/local/share/dotnet/sdk-manifests/9.0.100/microsoft.net.sdk.maui/9.0.14/WorkloadManifest.json\n   Install Type:        FileBased\n\n [android]\n   Installation Source: SDK 9.0.200\n   Manifest Version:    35.0.50/9.0.100\n   Manifest Path:       /usr/local/share/dotnet/sdk-manifests/9.0.100/microsoft.net.sdk.android/35.0.50/WorkloadManifest.json\n   Install Type:        FileBased\n\nConfigured to use loose manifests when installing new manifests.\n\nHost:\n  Version:      9.0.3\n  Architecture: x64\n  Commit:       831d23e561\n\n```\n\n### Other information\n\nPlease fix soon or provide a workaround please. Thank you.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOq8Ojkw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6kp9Vq",
                                           "createdAt":  "2025-03-28T20:47:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-28T20:47:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6k6rbz",
                                           "createdAt":  "2025-03-31T17:04:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mnxamdev",
                                           "body":  "I just tried this on my M1 mac and this also failed when trying create iOS release/adhoc build:\n```\n.NET SDK:\n Version:           9.0.102\n Commit:            cb83cd4923\n Workload version:  9.0.100-manifests.693890c1\n MSBuild version:   17.12.18+ed8c6aec5\n\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  14.6\n OS Platform: Darwin\n RID:         osx-arm64\n Base Path:   /usr/local/share/dotnet/sdk/9.0.102/\n\n.NET workloads installed:\n [maui]\n   Installation Source: SDK 9.0.100\n   Manifest Version:    9.0.14/9.0.100\n   Manifest Path:       /usr/local/share/dotnet/sdk-manifests/9.0.100/microsoft.net.sdk.maui/9.0.14/WorkloadManifest.json\n   Install Type:        FileBased\n\nConfigured to use loose manifests when installing new manifests.\n\nHost:\n  Version:      9.0.1\n  Architecture: arm64\n  Commit:       c8acea2262\n\n```",
                                           "updatedAt":  "2025-03-31T17:04:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mHxY6",
                                           "createdAt":  "2025-04-08T16:39:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mnxamdev",
                                           "body":  "I found the code that was causing the problem. Like the linked issue above, perhaps the error is not representative of what\u0027s broken. I had to rewrite some code so it wasn\u0027t using AUGraph. I commented out all the code and merely having this in the code broke the build as reported:\n```\nprivate AUGraph _graph;\n```",
                                           "updatedAt":  "2025-04-08T16:39:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qLkNo",
                                           "createdAt":  "2025-05-06T16:11:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jenyangk",
                                           "body":  "Running into this issue too. Not exactly sure what changed. The error doesn\u0027t occur when building for iOS Simulators.",
                                           "updatedAt":  "2025-05-06T16:13:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rw6OT",
                                           "createdAt":  "2025-05-14T22:23:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ernestriggen",
                                           "body":  "Just wondering if anyone has a solution or workaround for this -- I still experience the error.",
                                           "updatedAt":  "2025-05-14T22:23:18Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "\"Optimizing assemblies for size failed\" - Core 9 Latest Maui iOS Build",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114044",
        "createdAt":  "2025-03-30T05:06:21Z",
        "number":  114044,
        "author":  "hez2010",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-01T04:29:28Z",
        "body":  "### Background and motivation\n\nSometimes it\u0027s impossible to make serialization code AOT-compatible due to public APIs that are exposed.\nTaking an example from ASP.NET Core (https://github.com/dotnet/aspnetcore/blob/25a9b32254806c89859ea2dfd2f03881cf9a4312/src/Components/Components/src/PersistentComponentState.cs#L123):\n\n```cs\npublic bool TryTakeFromJson\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.PublicFields | DynamicallyAccessedMemberTypes.PublicProperties)] TValue\u003e(string key, [MaybeNullWhen(false)] out TValue? instance)\n{\n    ArgumentNullException.ThrowIfNull(key);\n\n    if (TryTake(key, out var data))\n    {\n        var reader = new Utf8JsonReader(data);\n        instance = JsonSerializer.Deserialize\u003cTValue\u003e(ref reader, JsonSerializerOptionsProvider.Options)!;\n        return true;\n    }\n    else\n    {\n        instance = default;\n        return false;\n    }\n}\n```\n\nThe `TryTakeFromJson` is a public API and cannot be changed to be made AOT-compatible without a major breaking change. Even we take the breaking change, exposing an API to publicly take a `JsonTypeInfo\u003cT\u003e` everywhere is still not an option as it would complicate the usage and make it hard to be used outsides C#.\n\nHere what we need is to \"preserve the members for generic argument types as well\".\n\n### API Proposal\n\n```diff\nnamespace System.Diagnostics.CodeAnalysis;\n\npublic sealed class DynamicallyAccessedMembersAttribute : Attribute\n{\n+    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes, bool includesTypeArguments);\n+    public bool IncludesTypeArguments { get; }\n}\n```\n\n\n### API Usage\n\n```csharp\npublic bool TryTakeFromJson\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors | DynamicallyAccessedMemberTypes.PublicFields | DynamicallyAccessedMemberTypes.PublicProperties, true)] TValue\u003e(string key, [MaybeNullWhen(false)] out TValue? instance)\n{\n    ArgumentNullException.ThrowIfNull(key);\n\n    if (TryTake(key, out var data))\n    {\n        var reader = new Utf8JsonReader(data);\n        instance = JsonSerializer.Deserialize\u003cTValue\u003e(ref reader, JsonSerializerOptionsProvider.Options)!;\n        return true;\n    }\n    else\n    {\n        instance = default;\n        return false;\n    }\n}\n\nTryTakeFromJson\u003cMyClass[]\u003e(...); // preserves members for MyClass and MyClass[]\nTryTakeFromJson\u003cMyGenericType\u003cA\u003cB\u003e,C\u003e\u003e(...); // preserves members for MyGenericType\u003cA\u003cB\u003e,C\u003e, A\u003cB\u003e, B and C\nTryTakeFromJson\u003cMyStruct?\u003e(...); // preserves members for Nullable\u003cMyStruct\u003e and MyStruct\n```\n\n\n### Alternative Designs\n\nAdding an option enum to allow more customization:\n\n```diff\nnamespace System.Diagnostics.CodeAnalysis;\n\npublic sealed class DynamicallyAccessedMembersAttribute : Attribute\n{\n+    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes, DynamicallyAccessedMemberOptions options);\n+    public DynamicallyAccessedMemberOptions Options { get; }\n}\n\n+ public enum DynamicallyAccessedMemberOptions\n+ {\n+     IncludesTypeArguments,\n+     IncludesNestedTypeArguments\n+ }\n```\n\nWith `IncludesTypeArguments`:\n\n```\nTryTakeFromJson\u003cMyClass[][]\u003e(...); // preserves members for MyClass[][] and MyClass[]\nTryTakeFromJson\u003cMyGenericType\u003cA\u003cB\u003e,C\u003e\u003e(...); // preserves members for MyGenericType\u003cA\u003cB\u003e,C\u003e, A\u003cB\u003e and C\nTryTakeFromJson\u003cMyStruct?[]\u003e(...); // preserves members for Nullable\u003cMyStruct\u003e[] and Nullable\u003cMyStruct\u003e\n```\nWith `IncludesNestedTypeArguments`:\n\n```\nTryTakeFromJson\u003cMyClass[][]\u003e(...); // preserves members for MyClass[][], MyClass[] and MyClass\nTryTakeFromJson\u003cMyGenericType\u003cA\u003cB\u003e,C\u003e\u003e(...); // preserves members for MyGenericType\u003cA\u003cB\u003e,C\u003e, A\u003cB\u003e, B and C\nTryTakeFromJson\u003cMyStruct?[]\u003e(...); // preserves members for Nullable\u003cMyStruct\u003e[], Nullable\u003cMyStruct\u003e and MyStruct\n```\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpP1WDQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6kxTe9",
                                           "createdAt":  "2025-03-30T05:06:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json, @gregsdennis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-30T05:06:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kxXsh",
                                           "createdAt":  "2025-03-30T06:12:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-30T06:12:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6k_VYN",
                                           "createdAt":  "2025-04-01T04:28:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEMy5cA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2025-04-03T15:55:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "agocke",
                                           "body":  "We\u0027ve talked about broadening the scope of `DynamicallyAccessedMembers` to consider more things, but type arguments alone doesn\u0027t seem sufficient to hit most high-value use cases.\n\nI doubt this will be implemented unless we can find a way to substantially increase the number of existing APIs that can be annotated. Until then, our suggestion has been and will continue to be that serialization should be done via source generator, not reflection.",
                                           "updatedAt":  "2025-04-01T04:29:27Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: DynamicallyAccessedMembers for type arguments of the containing type",
        "labels":  [
                       "api-suggestion",
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114425",
        "createdAt":  "2025-04-09T08:21:44Z",
        "number":  114425,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-19T20:56:25Z",
        "body":  "The trimming analyzer currently doesn\u0027t handle `foreach (var x in someType.GetInterfaces())` and the `x` comes out unannotated even though `someType` was annotated `.All`/`.Interfaces`. This is because Roslyn models this as IEnumerable instead of a `for (int i = 0; i \u003c ...; i++)` that we get in IL. We get spurious warnings.\n\nSearch for this issue number to find places that need to be fixed up.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpjkRHQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6mOREd",
                                           "createdAt":  "2025-04-09T08:22:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-09T08:22:08Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[Trimming Analyzer] Handle foreach over arrays returned from Type.GetInterfaces",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115145",
        "createdAt":  "2025-04-29T09:46:12Z",
        "number":  115145,
        "author":  "rolfbjarne",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-28T17:37:29Z",
        "body":  "### Description\n\nIt seems the linker removes embedded sources from linked pdb files.\n\nThe test project is a .NET console project that references Microsoft.iOS.dll (`TargetFramework=net10.0`, _not_ `TargetFramework=net10.0-ios`), and which is linked. Once linked, the resulting `Microsoft.iOS.pdb` in the publish directory has incorrect sourcelink information (it looks like the linker linked away some embedded sources).\n\n### Reproduction Steps\n\n* Download: https://www.dropbox.com/scl/fi/huwlt21hfia8nx5qd81ch/console-5c86006.zip?rlkey=cpdt40558wa8p8wjj25sb0xlt\u0026st=w391s4pa\u0026dl=0\n\n* Install a recent .NET 10 version (I used .NET preview.5.25223.119).\n* Make sure the `sourcelink` .NET tool is installed (`dotnet tool install -g sourcelink`).\n\n* Run `./repro.sh`\n\n\n### Expected / actual behavior\n\nCompare the resulting `original.txt` and `actual.txt` for expected and actual behavior.\n\n### Regression?\n\nYes, this is a regression in .NET 10 preview 4.\n\nIt\u0027s happening in these maestro bumps:\n\n* https://github.com/dotnet/macios/pull/22679\n* https://github.com/dotnet/macios/pull/22675\n\n\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET 10 preview 4+\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqSrnpQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6pKuel",
                                           "createdAt":  "2025-04-29T09:51:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-29T09:51:24Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ILLink removes embedded sources",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116811",
        "createdAt":  "2025-06-18T12:40:29Z",
        "number":  116811,
        "author":  "kerams",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-29T01:01:12Z",
        "body":  "### Apple platform\n\niOS\n\n### Framework version\n\nnet10.0-*\n\n### Affected platform version\n\nVS 17.14.5, 10.0.100-preview.5.25277.114, 18.4.10622-net10-p5\n\n### Description\n\nSimilar to https://github.com/dotnet/macios/issues/14813\n\nAOT builds fail when `copyused` trimming is enabled for FSharp.Core.\n\n```\n1\u003e... Microsoft.iOS.Sdk.net10.0_18.4\\18.4.10622-net10-p5\\targets\\Xamarin.Shared.Sdk.targets(1284,3): error : Failed to AOT compile aot-instances.dll, the AOT compiler exited with code 1.\n1\u003e... Microsoft.iOS.Sdk.net10.0_18.4\\18.4.10622-net10-p5\\targets\\Xamarin.Shared.Sdk.targets(1284,3): error : Failed to AOT compile FSharp.Core.dll, the AOT compiler exited with code 1.\n```\n\n### Steps to Reproduce\n\nhttps://github.com/kerams/fsharp-ios-aot\n\nThere are 2 lines that use F# types in `App.axaml.cs`.\n\nTry to compile in Release, see errors. Then remove `TrimMode copyused` and uncomment `IsTrimmable` in `Theme.iOS.csproj`. Complile successfully.\n\n### Did you find any workaround?\n\nDisable trimming for FSharp.Core completely with\n\n```\n\u003cManagedAssemblyToLink Condition=\"\u0027%(Filename)\u0027 == \u0027FSharp.Core\u0027\"\u003e\n  \u003cIsTrimmable\u003efalse\u003c/IsTrimmable\u003e\n\u003c/ManagedAssemblyToLink\u003e\n```\n\n### Build logs\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsh1CCA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6yEVUd",
                                           "createdAt":  "2025-06-19T09:56:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "I can reproduce with the provided test project, thanks!\n\nThis is what the AOT compiler says:\n\n```\nCould not load signature of Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]:op_Implicit due to: Could not resolve type with token 0100001e from typeref (expected class \u0027System.Converter`2\u0027 in assembly \u0027System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\u0027) assembly:System.Private.CoreLib, Version=10.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e type:System.Converter`2 member:(null)\nFailed to load method 0x600016a from \u0027/Users/rolf/test/bugs/fsharp-ios-aot/Theme.iOS/obj/Release/net10.0-ios/iossimulator-arm64/linked/FSharp.Core.dll\u0027 due to Could not resolve signature of method Microsoft.FSharp.Core.FSharpFunc`2[T,TResult]:op_Implicit.\n```\n\nand since it only happens while trimming, it looks like an issue with the trimmer, so I\u0027m moving this to dotnet/runtime.\n\nBinlog: [msbuild.binlog.zip](https://github.com/user-attachments/files/20816678/msbuild.binlog.zip)",
                                           "updatedAt":  "2025-06-19T09:56:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6yEWhT",
                                           "createdAt":  "2025-06-19T09:57:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-19T09:57:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6yFpUr",
                                           "createdAt":  "2025-06-19T11:55:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "Possibly related to https://github.com/dotnet/fsharp/issues/18702.\nThere are two IL modification tools which run before the AOT compiler - ILLink and ILStrip, without detailed investigation it could be either of them to corrupt the IL.",
                                           "updatedAt":  "2025-06-19T11:55:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6yGXjP",
                                           "createdAt":  "2025-06-19T12:53:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "\u003e There are two IL modification tools which run before the AOT compiler - ILLink and ILStrip, without detailed investigation it could be either of them to corrupt the IL.\n\nILStrip runs after the AOT compiler, otherwise there would be no code to AOT compile.",
                                           "updatedAt":  "2025-06-19T12:53:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6yHUII",
                                           "createdAt":  "2025-06-19T14:16:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vitek-karas",
                                           "body":  "You\u0027re right - I was looking at the binlog and it shows it before... but it doesn\u0027t make sense... not sure what I was thinking.",
                                           "updatedAt":  "2025-06-19T14:16:11Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Cannot AOT compile trimmed FSharp.Core",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116846",
        "createdAt":  "2025-06-20T05:35:09Z",
        "number":  116846,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T18:01:13Z",
        "body":  "ILLink generates warning for this, the analyzer should too.\n\nWe should probably share the logic that is used to parse the DebuggerDisplay string. ILLink also has some special logic to not generate a warning if it doesn\u0027t understand the string (the string could be still valid, but ILLink has a simple algorithm to parse it).\n\n```csharp\nusing System.Diagnostics;\nusing System.Diagnostics.CodeAnalysis;\n\n[DebuggerDisplay(\"{Blah}\")]\nclass Program\n{\n    public string Blah\n    {\n        [RequiresUnreferencedCode(\"Nope\")]\n        get =\u003e \"Hello\";\n    }\n\n    static void Main() =\u003e Console.WriteLine(\"Hi\");\n}\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsk7t2A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6yNX4K",
                                           "createdAt":  "2025-06-20T05:35:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-20T05:35:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6yNl0e",
                                           "createdAt":  "2025-06-20T06:10:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sergio0694",
                                           "body":  "Are all of these warnings automatically suppressed when `PublishAot=true` and `DebuggerSupport=false`? Should they? 🤔",
                                           "updatedAt":  "2025-06-20T06:10:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6yNm7L",
                                           "createdAt":  "2025-06-20T06:13:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXSq0g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Sergio0694",
                                                                               "createdAt":  "2025-06-20T07:49:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "NativeAOT doesn\u0027t have a debugger that would benefit from this so it doesn\u0027t look at DebuggerDisplay at all.\n\nILLinker will drop these if DebuggerSupport=false, yes.\n\n(The Roslyn analyzer should however warn because it has no idea whether/how it will be used.)",
                                           "updatedAt":  "2025-06-20T06:14:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6yTu3Y",
                                           "createdAt":  "2025-06-20T12:58:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AArnott",
                                           "body":  "\u003e (The Roslyn analyzer should however warn because it has no idea whether/how it will be used.)\n\nIf the roslyn analyzer can read `DebuggerSupport`, then it\u0027ll know whether `DebuggerDisplayAttribute` needs to be parsed. If we don\u0027t know of any other use of the attribute, that seems sufficient.",
                                           "updatedAt":  "2025-06-20T12:58:51Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[Analyzer] Generate warnings for DebuggerDisplay attributes referencing RUC code",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117122",
        "createdAt":  "2025-06-29T00:58:16Z",
        "number":  117122,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-18T07:01:55Z",
        "body":  "The following code:\n```csharp\nscoped Span\u003cnint\u003e lengths = TensorOperation.RentedBuffer.CreateUninitialized(tensor.Rank, out TensorOperation.RentedBuffer\u003cnint\u003e lengthsRentedBuffer);\nscoped Span\u003cnint\u003e strides = TensorOperation.RentedBuffer.CreateUninitialized(tensor.Rank, out TensorOperation.RentedBuffer\u003cnint\u003e stridesRentedBuffer);\n\ntensor.Lengths.CopyTo(lengths);\ntensor.Strides.CopyTo(strides);\n\n(lengths[^1], lengths[^2]) = (lengths[^2], lengths[^1]);\n(strides[^1], strides[^2]) = (strides[^2], strides[^1]);\n```\n\nRaises an assert in the `ILLink.RoslynAnalyzer`. It is encountered on one of the `lengths[^1]` nodes in the tuple swap pattern:\n```\nProcess terminated. \nAssertion failed. \n   at ILLink.RoslynAnalyzer.DataFlow.LocalDataFlowVisitor`5.VisitImplicitIndexerReference(IImplicitIndexerReferenceOperation operation, LocalDataFlowState`4 state) in /_/src/tools/illink/src/ILLink.RoslynAnalyzer/DataFlow/LocalDataFlowVisitor.cs:line 636 \n   at ILLink.RoslynAnalyzer.DataFlow.OperationWalker`2.Visit(IOperation operation, TArgument argument) in /_/src/tools/illink/src/ILLink.RoslynAnalyzer/DataFlow/OperationWalker.cs:line 22 \n   at ILLink.RoslynAnalyzer.DataFlow.OperationWalker`2.VisitChildOperations(IOperation operation, TArgument argument) in /_/src/tools/illink/src/ILLink.RoslynAnalyzer/DataFlow/OperationWalker.cs:line 17 \n   at ILLink.RoslynAnalyzer.TrimAnalysis.TrimAnalysisVisitor.DefaultVisit(IOperation operation, LocalDataFlowState`4 argument) in /_/src/tools/illink/src/ILLink.RoslynAnalyzer/TrimAnalysis/TrimAnalysisVisitor.cs:line 80 \n   at ILLink.RoslynAnalyzer.DataFlow.OperationWalker`2.Visit(IOperation operation, TArgument argument) in /_/src/tools/illink/src/ILLink.RoslynAnalyzer/DataFlow/OperationWalker.cs:line 22 \n   at ILLink.RoslynAnalyzer.DataFlow.OperationWalker`2.VisitChildOperations(IOperation operation, TArgument argument) in /_/src/tools/illink/src/ILLink.RoslynAnalyzer/DataFlow/OperationWalker.cs:line 17 \n   at ILLink.RoslynAnalyzer.TrimAnalysis.TrimAnalysisVisitor.DefaultVisit(IOperation operation, LocalDataFlowState`4 argument) in /_/src/tools/illink/src/ILLink.RoslynAnalyzer/TrimAnalysis/TrimAnalysisVisitor.cs:line 80 \n   at ILLink.RoslynAnalyzer.DataFlow.OperationWalker`2.Visit(IOperation operation, TArgument argument) in /_/src/tools/illink/src/ILLink.RoslynAnalyzer/DataFlow/OperationWalker.cs:line 22 \n   at ILLink.RoslynAnalyzer.DataFlow.LocalDataFlowVisitor`5.VisitExpressionStatement(IExpressionStatementOperation operation, LocalDataFlowState`4 state) in /_/src/tools/illink/src/ILLink.RoslynAnalyzer/DataFlow/LocalDataFlowVisitor.cs:line 548 \n   at ILLink.RoslynAnalyzer.DataFlow.OperationWalker`2.Visit(IOperation operation, TArgument argument) in /_/src/tools/illink/src/ILLink.RoslynAnalyzer/DataFlow/OperationWalker.cs:line 22 \n   at ILLink.RoslynAnalyzer.DataFlow.LocalDataFlowVisitor`5.Transfer(BlockProxy block, LocalDataFlowState`4 state) in /_/src/tools/illink/src/ILLink.RoslynAnalyzer/DataFlow/LocalDataFlowVisitor.cs:line 83 \n   at ILLink.Shared.DataFlow.ForwardDataFlowAnalysis`8.TransferOut(TTransfer transfer, TControlFlowGraph cfg, TBlock block, TState state, Action`2 updateState) in /_/src/tools/illink/src/ILLink.Shared/DataFlow/ForwardDataFlowAnalysis.cs:line 189 \n   at ILLink.Shared.DataFlow.ForwardDataFlowAnalysis`8.Fixpoint(TControlFlowGraph cfg, TTransfer transfer) \n   at ILLink.RoslynAnalyzer.DataFlow.LocalDataFlowAnalysis`6.AnalyzeMethod(MethodBodyValue method, InterproceduralState`2\u0026 interproceduralState) in /_/src/tools/illink/src/ILLink.RoslynAnalyzer/DataFlow/LocalDataFlowAnalysis.cs:line 109 \n   at ILLink.RoslynAnalyzer.DataFlow.LocalDataFlowAnalysis`6.InterproceduralAnalyze() in /_/src/tools/illink/src/ILLink.RoslynAnalyzer/DataFlow/LocalDataFlowAnalysis.cs:line 91 \n   at ILLink.RoslynAnalyzer.DynamicallyAccessedMembersAnalyzer.\u003c\u003ec__DisplayClass13_0.\u003cInitialize\u003eb__1(OperationBlockAnalysisContext context) in /_/src/tools/illink/src/ILLink.RoslynAnalyzer/DynamicallyAccessedMembersAnalyzer.cs:line 105 \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.\u003c\u003ec.\u003cExecuteOperationBlockActions\u003eb__56_4(ValueTuple`2 data) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info, CancellationToken cancellationToken) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 contextInfo, CancellationToken cancellationToken) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.\u003c\u003ec.\u003cExecuteOperationBlockActions\u003eb__56_2(HashSet`1 blockActions, AnalyzerDiagnosticReporter diagReporter, Func`3 isSupportedDiagnostic, ExecutionData executionData, ValueTuple`6 args, CancellationToken cancellationToken) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteBlockActionsCore[TBlockStartAction,TBlockAction,TArgs](ImmutableArray`1 startActions, ImmutableArray`1 actions, ImmutableArray`1 endActions, SyntaxNode declaredNode, ExecutionData executionData, Action`5 addActions, Action`5 executeActions, Action`6 executeBlockActions, TArgs argument, CancellationToken cancellationToken) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationBlockActions(ImmutableArray`1 startActions, ImmutableArray`1 actions, ImmutableArray`1 endActions, DiagnosticAnalyzer analyzer, SyntaxNode declaredNode, ISymbol declaredSymbol, ImmutableArray`1 operationBlocks, ImmutableArray`1 operations, SemanticModel semanticModel, Nullable`1 filterSpan, Boolean isGeneratedCode, CancellationToken cancellationToken) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.\u003c\u003ec__DisplayClass11_0.\u003cExecuteDeclaringReferenceActions\u003eg__executeOperationsBlockActions|6(ImmutableArray`1 operationBlocksToAnalyze, ImmutableArray`1 operationsToAnalyze, ArrayBuilder`1 codeBlockActions) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.\u003c\u003ec__DisplayClass11_0.\u003cExecuteDeclaringReferenceActions\u003eg__executeExecutableCodeActions|2() \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.ExecuteDeclaringReferenceActions(SyntaxReference decl, SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, GroupedAnalyzerActions coreActions, GroupedAnalyzerActions additionalPerSymbolActions, Boolean shouldExecuteSyntaxNodeActions, Boolean shouldExecuteOperationActions, Boolean shouldExecuteCodeBlockActions, Boolean shouldExecuteOperationBlockActions, Boolean isInGeneratedCode, CancellationToken cancellationToken) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.ExecuteDeclaringReferenceActions(SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, Boolean isGeneratedCodeSymbol, IGroupedAnalyzerActions additionalPerSymbolActions, CancellationToken cancellationToken) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclaredAsync(SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, CancellationToken cancellationToken) \n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine\u0026 stateMachine) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclaredAsync(SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, CancellationToken cancellationToken) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCoreAsync(CompilationEvent compilationEvent, AnalysisScope analysisScope, CancellationToken cancellationToken) \n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine\u0026 stateMachine) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCoreAsync(CompilationEvent compilationEvent, AnalysisScope analysisScope, CancellationToken cancellationToken) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEventAsync(CompilationEvent e, AnalysisScope analysisScope, CancellationToken cancellationToken) \n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine\u0026 stateMachine) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEventAsync(CompilationEvent e, AnalysisScope analysisScope, CancellationToken cancellationToken) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsCoreAsync(AnalysisScope analysisScope, Boolean prePopulatedEventQueue, CancellationToken cancellationToken) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecutionContextCallback(Object s) \n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() \n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) \n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) \n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(Task`1 task, TResult result) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEventAsync(CompilationEvent e, AnalysisScope analysisScope, CancellationToken cancellationToken) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecutionContextCallback(Object s) \n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() \n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) \n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) \n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(Task`1 task, TResult result) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCoreAsync(CompilationEvent compilationEvent, AnalysisScope analysisScope, CancellationToken cancellationToken) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecutionContextCallback(Object s) \n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() \n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) \n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) \n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(Task`1 task, TResult result) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclaredAsync(SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, CancellationToken cancellationToken) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecutionContextCallback(Object s) \n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() \n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) \n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) \n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(Task`1 task, TResult result) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.GetPerSymbolAnalyzerActionsAsync(ISymbol symbol, AnalysisScope analysisScope, CancellationToken cancellationToken) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecutionContextCallback(Object s) \n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() \n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) \n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) \n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(Task`1 task, TResult result) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.GetPerSymbolAnalyzerActionsAsync(ISymbol symbol, DiagnosticAnalyzer analyzer, SyntaxTree filterTree, Nullable`1 filterSpan, CancellationToken cancellationToken) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecutionContextCallback(Object s) \n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() \n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) \n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) \n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(Task`1 task, TResult result) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.\u003cGetPerSymbolAnalyzerActionsAsync\u003eg__getAllActionsAsync|153_0(AnalyzerDriver driver, ISymbol symbol, DiagnosticAnalyzer analyzer, SyntaxTree filterTree, Nullable`1 filterSpan, CancellationToken cancellationToken) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecutionContextCallback(Object s) \n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() \n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) \n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) \n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(Task`1 task, TResult result) \n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(TResult result) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.\u003cGetPerSymbolAnalyzerActionsAsync\u003eg__getSymbolActionsCoreAsync|153_2(AnalyzerDriver driver, ISymbol symbol, DiagnosticAnalyzer analyzer, SyntaxTree filterTree, Nullable`1 filterSpan, CancellationToken cancellationToken)\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecutionContextCallback(Object s) \n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() \n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) \n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) \n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(Task`1 task, TResult result) \n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(TResult result) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.GetPerSymbolAnalyzerActionsAsync(ISymbol symbol, Boolean isGeneratedCodeSymbol, SyntaxTree filterTree, Nullable`1 filterSpan, DiagnosticAnalyzer analyzer, AnalyzerExecutor analyzerExecutor, CancellationToken cancellationToken) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecutionContextCallback(Object s) \n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() \n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) \n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) \n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(Task`1 task, TResult result) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.GetSymbolAnalysisScopeAsync(ISymbol symbol, Boolean isGeneratedCodeSymbol, SyntaxTree filterTree, Nullable`1 filterSpan, DiagnosticAnalyzer analyzer, ImmutableArray`1 symbolStartActions, AnalyzerExecutor analyzerExecutor, CancellationToken cancellationToken) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecutionContextCallback(Object s) \n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() \n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) \n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) \n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(Task`1 task, TResult result) \n   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerManager.GetSymbolAnalysisScopeCoreAsync(ISymbol symbol, Boolean isGeneratedCodeSymbol, SyntaxTree filterTree, Nullable`1 filterSpan, ImmutableArray`1 symbolStartActions, AnalyzerExecutor analyzerExecutor, AnalyzerExecutionContext analyzerExecutionContext, CancellationToken cancellationToken) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecutionContextCallback(Object s) \n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) \n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext() \n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) \n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) \n   at System.Threading.Tasks.Task.FinishSlow(Boolean userDelegateExecute) \n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task\u0026 currentTaskSlot, Thread threadPoolThread) \n   at System.Threading.ThreadPoolWorkQueue.Dispatch() \n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart() \n   at System.Threading.Thread.StartCallback() \n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOs8eBJg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6zx4Em",
                                           "createdAt":  "2025-06-29T00:58:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-29T00:58:46Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ILLink.RoslynAnalyzer asserts on tuple swap involving implicit indexer reference",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117155",
        "createdAt":  "2025-06-30T16:23:20Z",
        "number":  117155,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T20:34:10Z",
        "body":  "ILLink analyzes hoisted locals by inspecting all writes to a local, and using the merged value as the virtual \"annotation\" for the compiler-generated field. This produces dataflow warnings for any reads with conflicting requirements:\n\n```csharp\n// Trimmer tracks all assignments of hoisted locals, so this produces warnings.\n[ExpectedWarning(\"IL2072\", nameof(GetWithPublicMethods), nameof(DataFlowTypeExtensions.RequiresPublicFields), Tool.Trimmer | Tool.NativeAot, \"\", CompilerGeneratedCode = true)]\n[ExpectedWarning(\"IL2072\", [nameof(GetWithPublicFields), nameof(DataFlowTypeExtensions.RequiresPublicMethods)], Tool.Trimmer | Tool.NativeAot, \"\", CompilerGeneratedCode = true)]\nstatic IEnumerable\u003cint\u003e NoFlowAcrossYieldReturn()\n{\n    Type t = GetWithPublicMethods();\n    t.RequiresPublicMethods();\n    yield return 0;\n    t = GetWithPublicFields();\n    t.RequiresPublicFields();\n}\n```\n\nThe Roslyn analyzer treats these like other locals and tracks the overwriting definition, so that a later read only sees the latest definition.\n\nThis was by design in https://github.com/dotnet/linker/commit/bc46e445deb1411cc597019d693ddc5b4e5e24f4, but leads to a difference in behavior between the tools.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOs_9Pvw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6z_0-_",
                                           "createdAt":  "2025-06-30T16:24:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-30T16:24:01Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ILLink: dataflow doesn\u0027t track killed hoisted locals",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117167",
        "createdAt":  "2025-06-30T17:58:32Z",
        "number":  117167,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T20:17:21Z",
        "body":  "Our dataflow models arrays, mainly to support `MakeGenericType` patterns like this:\n```csharp\ntypeof(Dictionary\u003c,\u003e).MakeGenericType(new Type[] { typeof(Key), typeof(Value) });\n```\nwhere in general, we need to validate that the type arguments satisfy any requirements on the type parameters.\n\nOur dataflow system isn\u0027t currently designed to track mutable reference types, so the array support is not well-defined. This leads to a number of problematic behaviors:\n\n- https://github.com/dotnet/runtime/issues/87596#issuecomment-1593517797\n- https://github.com/dotnet/runtime/issues/117174\n- https://github.com/dotnet/runtime/issues/93416\n- https://github.com/dotnet/runtime/issues/90335\n\nOpening this as a top-level issue where we can track the work. All of the problems described in the above issues should be fixed when this work is done.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtAaDsg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc60BoOy",
                                           "createdAt":  "2025-06-30T18:43:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-30T18:43:50Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Define model for tracking arrays in trim analysis",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117830",
        "createdAt":  "2025-07-18T18:10:04Z",
        "number":  117830,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-21T17:43:29Z",
        "body":  "```csharp\nusing System.Diagnostics.CodeAnalysis;\n\nG\u003cint\u003e.Do();\n\nclass G\u003cT\u003e\n{\n    public class R\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods)] U\u003e\n    {\n        public void Do()\n        {\n            typeof(U).GetMethods();\n        }\n    }\n\n    public static R\u003cT\u003e r = new();\n\n    public static void Do()\n    {\n        r.Do();\n    }\n}\n```\nILC doesn\u0027t produce a warning for this. The analyzer and ILLink warn on the field initializer.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuDHVmg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc64MdWa",
                                           "createdAt":  "2025-07-18T18:10:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-18T18:10:35Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ILC: missing trim warning in field initializer",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117899",
        "createdAt":  "2025-07-21T21:02:17Z",
        "number":  117899,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-21T22:26:17Z",
        "body":  "```csharp\n\nusing System.Diagnostics.CodeAnalysis;\n\nnew ContainsField().field = 4;\n// DAM(typeof(ContainsField));\n\nstatic void DAM([DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.AllFields)] Type t) { }\n\nclass ContainsField\n{\n    [My] // warning IL2026: ContainsField.field: \u0027Using member \u0027MyAttribute.MyAttribute()\u0027 which has \u0027RequiresUnreferencedCodeAttribute\u0027 can break functionality when trimming application code. --My--.\n    public int field;\n}\n\n[RequiresUnreferencedCode(\"--My--\")]\nclass MyAttribute : Attribute;\n```\n\nILLink produces the warning above because the field has a trim-incompatible attribute, even though the field is not accessed via reflection (so the warning doesn\u0027t represent a real runtime issue). ILC produces the same warning but only when the field is reflection-accessed (if you uncomment the call to `DAM` for example).\n\nThe ILC model has problems too because fields may be reflection-accessed by another library - arguably the warning location should point to the reflection access, not to the field.\n\nThe discussion in https://github.com/dotnet/linker/issues/3140 is related.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuLalcQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc64tqVx",
                                           "createdAt":  "2025-07-21T21:09:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-21T21:09:47Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Inconsistent trim warnings for attributes on members",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118427",
        "createdAt":  "2025-08-06T04:22:26Z",
        "number":  118427,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-06T21:40:42Z",
        "body":  "The NonPublicMethods annotation gets applied here because of the c.GetType call, but since C was never allocated, we shouldn\u0027t consider it as returned by the `GetType` call.\n\n```csharp\nusing System.Diagnostics.CodeAnalysis;\n\nRequire(typeof(C));\nDo(null);\n\nstatic void Do(C c) =\u003e c.GetType();\n\nstatic void Require([DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.NonPublicEvents)] Type t) { }\n\n\n[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.NonPublicMethods)]\nclass C\n{\n    // The public default constructor is not kept, but this instance method is due to the NonPublicMethods on the type.\n    void Method() { }\n}\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvDFZGg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc68MVka",
                                           "createdAt":  "2025-08-06T04:22:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-06T04:22:59Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "DAM on type gets unnecessarily applied",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118713",
        "createdAt":  "2025-08-14T00:30:00Z",
        "number":  118713,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-08T18:59:56Z",
        "body":  "Similar to https://github.com/dotnet/runtime/issues/107660, it should be possible to call static methods on a derived type even if the type declaration has mismatching DAM annotations. The problem should surface when the base type is actually instantiated:\n\n```csharp\nusing System.Diagnostics.CodeAnalysis;\n\nDerived\u003cint\u003e.DoSomethingSafe();\nnew Derived\u003cint\u003e();\n\nclass Derived\u003cT\u003e : Base\u003cT\u003e // warns here but should not\n{\n    public Derived() // warns here\n    {\n    }\n\n    public static void DoSomethingSafe() { }\n}\n\nclass Base\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicMethods)] T\u003e\n{\n    static void Require() =\u003e typeof(T).GetMethods();\n}\n```\n\nSimilar for interfaces.\n\n@MichalStrehovsky @agocke do you agree or can you see any problems with this?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwsK9gg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6-DmQc",
                                           "createdAt":  "2025-08-14T14:14:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "I can\u0027t immediately see any problems with that. We might need to be careful with static virtuals.",
                                           "updatedAt":  "2025-08-14T14:14:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-HNhT",
                                           "createdAt":  "2025-08-14T19:01:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "@agocke came up with an [example](https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBLANgHwAEAmARgFgAoKqgYQB5sA7DAPgDoBZYgCgEoA3DUqEAzAAIS4gEL0AKqyoBvKuLWSJhUkkkpx3fuKXiAvlTMjNxcQwXiQM+ayOr1Y3fsMrK60+apAA===) that would cause problems:\n```csharp\nC\u003cint\u003e.M2();\n\npublic class B\u003cT\u003e\n{\n    public static void M2() { }\n}\npublic class C\u003cT\u003e : B\u003cT\u003e {\n    public void M() {\n    }\n}\n```\n\nC# allows calling base static methods through a reference to the derived class, so `Derived\u003cint\u003e.SomeStaticMethod` needs to warn if the method is on the base type. The analyzer would have to do significant extra work to figure that out, so this isn\u0027t worth the effort.",
                                           "updatedAt":  "2025-08-14T19:01:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-HXXa",
                                           "createdAt":  "2025-08-14T19:15:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEeYNSg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichalStrehovsky",
                                                                               "createdAt":  "2025-08-14T22:38:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Maybe I closed this too soon.\n\u003e The analyzer would have to do significant extra work to figure that out, so this isn\u0027t worth the effort.\n\nI think the analyzer already knows that the method is declared on the base type, for example:\n\n```csharp\nUseDerived\u003cint\u003e();\n\nstatic void UseDerived\u003cT\u003e()\n{\n    Derived\u003cT\u003e.StaticMethod(); // this already produces a warning\n}\n\nclass Derived\u003cT\u003e : BaseDAM\u003cT\u003e\n{ }\n\nclass BaseDAM\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicFields)] T\u003e\n{\n    public static void StaticMethod() { }\n}\n```",
                                           "updatedAt":  "2025-08-14T19:15:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Cwr2C",
                                           "createdAt":  "2025-09-08T18:59:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "I think this works for base types, but is harder to solve for interfaces since we don\u0027t have a way to detect all places where a type may get converted to an interface. We could move the warning to the constructor but that would require producing the same warning from all constructors, which doesn\u0027t seem worthwhile. So I\u0027m only planning to address this for the base type case.\n\nWe don\u0027t have a similar problem for https://github.com/dotnet/runtime/issues/107660 because we don\u0027t allow RUC on interfaces.",
                                           "updatedAt":  "2025-09-08T18:59:32Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Remove DAM warning for base types/interfaces",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118816",
        "createdAt":  "2025-08-16T23:25:47Z",
        "number":  118816,
        "author":  "BoyBaykiller",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-25T17:25:42Z",
        "body":  "In this case `MyFuncLazy` is not trimmed even though the only reference to it (`myFuncPtr`) is itself never read\n```cs\npublic static delegate* unmanaged\u003cint, void\u003e myFuncPtr = \u0026MyFuncLazy;\n\n[UnmanagedCallersOnly]\nprivate static void MyFuncLazy(int program)\n{\n}\n```\n\nFrom the discussion in the community discord I understood that at least in the general case of \"eliminate all side-effect-free code that writes into fields that are never read\" this is unlikely to get fixed soon, but I\u0027ll open this anyway so its officially recognized and I can reference it.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvmJ8jw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6-YAdP",
                                           "createdAt":  "2025-08-16T23:30:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here are possible related and/or duplicate issues (I may be wrong):\n- https://github.com/dotnet/runtime/issues/106627\n- https://github.com/dotnet/runtime/issues/101434",
                                           "updatedAt":  "2025-08-16T23:30:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-YnyP",
                                           "createdAt":  "2025-08-17T04:43:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-17T04:43:23Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Trimmer: Static function pointer should not keep function alive if its never read",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118853",
        "createdAt":  "2025-08-18T17:24:12Z",
        "number":  118853,
        "author":  "jtschuster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-18T17:24:43Z",
        "body":  "Currently the DAM analyzer does full backwards-branching dataflow analysis for tracking DAM values. This gives it the best analysis (sometimes better than illink), but it does require significant complexity, and can lead to performance issues. Adding matching dataflow analysis to the linker for matching behavior would create similar problems in the linker.\n\nAn alternative discussed was to have each local assume the annotation of the first value assigned to it, and warn if a different annotation is assigned to it, much like type analysis in the C# language. This would simplify implementation, but would require workarounds by code expecting to be able to assign differently annotated values to the same local.\n\nWe also run into potential issues when a local is first assigned in if/else blocks, a ternary statement, or a switch. We could work around this by taking the Meet of the potential values, or warning if all assignments to a local do not have the same DAM annotations.\n\nAnother way to look at it is to assign the requirements on the local variable (determine by assignments where the local is the source and an annotated location is the target), and require that all assignments to that local meet that requirement. This also makes the behavior of local variables analogous to properly annotated fields. Fields must be annotated with the union of the requirements of all the locations that are targets of assignments from the field, while locals would have those annotations inferred.\n\nFor example, consider the warning behavior between assuming first assignment\n```C#\n// okay\nvar myLocal = MyMethodReturnsWithPublicMethods();\nmyFieldWithPublicMethods = myLocal;\n\n// warn: myLocal requires PublicFields\nmyLocal = MyMethodReturnsWithPublicFields;\nmyFieldWithPublicFields = myLocal;\n```\n\nvs. assuming the union of all requirements\n\n```C#\n// warn: myLocal requires both PublicFields and PublicMethods\nvar myLocal = MyMethodReturnsWithPublicMethods();\nmyFieldWithPublicMethods = myLocal;\n\n// okay\nmyLocal = MyMethodReturnsWithPublicFieldsAndPublicMethods();\nmyFieldWithPublicFields = myLocal;\n```\n\nRegardless, if we do change the analyzer behavior to either of these, it\u0027s likely that illink and ilc will also need to match it for consistency in warnings. This would be a significant regression in the ergonomics of making code trim-safe, but it would greatly simplify analysis and likely increase the speed of the tools.\n\ncc. @dotnet/illink @dotnet/ilc-contrib for discussion",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvpqPvQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6-mo-9",
                                           "createdAt":  "2025-08-18T17:24:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-18T17:24:43Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[ILLink] Should the trim analyzer use full dataflow analysis, or single assignment of DAM",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119110",
        "createdAt":  "2025-08-26T19:00:24Z",
        "number":  119110,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-26T19:01:05Z",
        "body":  "The ILLink Roslyn analyzer doesn\u0027t properly handle operator methods. It doesn\u0027t see annotated operator method parameters, and instead treats operator method returns as unknown values:\n\nRepro:\n```csharp\nvar result = new OperatorType() - new OperatorType();\nresult.RequiresPublicMethods(); // Should report IL2072 about mismatch. Instead reports IL2062 (unknown value passed to RequiresPublicMethods).\n\nprivate sealed class OperatorType : TestSystemTypeBase\n{\n    [return: DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicFields)]\n    public static Type operator -(OperatorType left, OperatorType right) =\u003e ...\n}\n```\n\nAnnotated operator parameters are similar. This is a very niche scenario since it requires defining operators for annotatable types (System.Type for example).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwD9Z4g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7AP1ni",
                                           "createdAt":  "2025-08-26T19:01:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-26T19:01:04Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ILLink analyzer doesn\u0027t see operator method annotations",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119113",
        "createdAt":  "2025-08-26T19:38:30Z",
        "number":  119113,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-19T21:49:47Z",
        "body":  "With https://github.com/dotnet/runtime/pull/119017, the trimming tools ignore DAM on extension properties (and don\u0027t produce any warnings about it).\n\nAn extension property lowers to a property on a compiler-generated type, a stub method on the generated type, and an implementation static method on the user-declared type. To avoid having to reverse this lowering in ILLink and ILC, annotations on extension properties are not automatically propagated to the parameter/return of the static method that plays the role of the set/get accessor.\n\nOptions to address this:\n1. Leave it as-is (annotations on extension properties have no effect)\n2. Warn about the unused annotation\n3. Reverse the extension property lowering to propagate the annotation\n\nSince property annotations don\u0027t normally flow to the accessor methods (that\u0027s an ILLink rule, not a Roslyn behavior, to my knowledge), I don\u0027t think this should be handled by Roslyn via CompilerLoweringPreserve.\n\nPersonally, I think 2. makes the most sense, but 1. is fine too since I expect this to be rare.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxYbJPA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7AQTk2",
                                           "createdAt":  "2025-08-26T19:39:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-26T19:39:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AQqSO",
                                           "createdAt":  "2025-08-26T20:13:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "Isn\u0027t this the same as https://github.com/dotnet/roslyn/issues/80017?",
                                           "updatedAt":  "2025-08-26T20:13:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7ARS46",
                                           "createdAt":  "2025-08-26T21:16:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "No, this is specifically about the automatic propagation of property annotations to the accessors. Roslyn doesn\u0027t do that for normal properties, but ILLink does.\n\nIn https://github.com/dotnet/roslyn/issues/80017, even if you explicitly annotate the `return:` of the extension property, it doesn\u0027t end up in the implementation.",
                                           "updatedAt":  "2025-08-26T21:16:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7FNh9p",
                                           "createdAt":  "2025-09-18T17:19:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEi4blQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2025-09-18T17:28:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "agocke",
                                           "body":  "I think (2) makes sense.",
                                           "updatedAt":  "2025-09-18T17:19:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Fhsk8",
                                           "createdAt":  "2025-09-19T21:49:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "@sbomer I\u0027m gonna move this one back to 10. I think we should try to get this in at the same time that extension properties is shipping for the first time. It\u0027ll be easier than dealing with a breaking change later.",
                                           "updatedAt":  "2025-09-19T21:49:41Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "DAM on extension properties is silently ignored",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119118",
        "createdAt":  "2025-08-26T21:56:55Z",
        "number":  119118,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-15T23:35:44Z",
        "body":  "Many of the types defined in ILLink are unnecessarily public, leading to lots of API compat suppressions. We could clean this up by keeping only those types exposed in the ref assembly as public.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwEaWkw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7ARpaT",
                                           "createdAt":  "2025-08-26T21:57:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-26T21:57:29Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Clean up illink compat suppressions by making types non-public",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119290",
        "createdAt":  "2025-09-02T23:05:57Z",
        "number":  119290,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-16T21:21:07Z",
        "body":  "Repro:\n\n```csharp\n// IL2026 for type (ILLink produces this twice)\nclass ClassWithWarningOnGenericArgumentConstructor_NewAndAnnotation : RequiresNewAndConstructors\u003cClassWithRequires\u003e\n{\n    // IL2026 (ILLink produces this twice)\n    public ClassWithWarningOnGenericArgumentConstructor_NewAndAnnotation()\n    {\n    }\n}\n\nclass RequiresNewAndConstructors\u003c[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicParameterlessConstructor)] T\u003e where T : new();\n\n[RequiresUnreferencedCode(\"Message for --ClassWithRequires--\")]\nclass ClassWithRequires;\n```\n\nThis produces a warning on the type and on the implicit call to the base constructor (ILLink and ILC both do this). But ILLink produces two of each. That\u0027s because:\n- ILC handles the new constraint by treating it like PublicParameterlessConstructor annotations\n- ILLink handles the new constraint separately, while marking generic argument types\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwYpYFQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7BilgV",
                                           "createdAt":  "2025-09-02T23:06:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/illink\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-02T23:06:48Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ILLink: extra warning for generic parameter with new constraint and annotation",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119780",
        "createdAt":  "2025-09-16T19:22:17Z",
        "number":  119780,
        "author":  "sbomer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-17T00:57:56Z",
        "body":  "We started seeing the following ILC warnings in https://github.com/dotnet/maui/pull/31600:\n```\nNo warnings expected, but got 1 warnings:\nILC: IL2042: Microsoft.Maui.Controls.RenderWithAttribute.Type: Could not find a unique backing field for property \u0027Microsoft.Maui.Controls.RenderWithAttribute.Type\u0027 to propagate \u0027DynamicallyAccessedMembersAttribute\u0027.\nILC: IL2042: System.ComponentModel.TypeDescriptionProviderAttribute.TypeName: Could not find a unique backing field for property \u0027System.ComponentModel.TypeDescriptionProviderAttribute.TypeName\u0027 to propagate \u0027DynamicallyAccessedMembersAttribute\u0027.\nExpected: 0\nBut was:  1\n```\n\nThis happens in iOS tests which run ILC on the output of ILLink. The problem is that an ILLink optimization may remove backing fields and rewrite the getter for unreachable code:\n```\n.method /* 06000020 */ public hidebysig specialname \n\tinstance string get_TypeName () cil managed noinlining \n{\n\t.custom instance void [System.Private.CoreLib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor() = (\n\t\t01 00 00 00\n\t)\n\t// Method begins at RVA 0x21e3\n\t// Header size: 1\n\t// Code size: 11 (0xb)\n\t.maxstack 8\n\n\tIL_0000: ldstr \"Linked away\" /* 7000022B */\n\tIL_0005: newobj instance void [System.Private.CoreLib]System.NotSupportedException::.ctor(string) /* 0A000013 */\n\tIL_000a: throw\n} // end of method TypeDescriptionProviderAttribute::get_TypeName\n```\n\nAnd then ILC complains when it can\u0027t find a backing field for the getter.\n\nThe new warning was added in https://github.com/dotnet/runtime/pull/119329, but we didn\u0027t design for the case where ILLink runs after ILC. This optimization breaks ILC\u0027s assumption about how compiler-generated properties should look. I think we should silence the warning in the iOS scenario since that setup (running ILC after ILLink) is somewhat special.\n\nAlternatively, we could probably fix it by removing `CompilerGeneratedAttribute` when ILLink stubs out the getter, or by just commenting out the ILC warning at https://github.com/dotnet/runtime/pull/119329/files#diff-75dd6efb4bd47819547800323731b3c4e9d4c4c12b40f2d44de124e31d3878a6R606.\n\n@jtschuster @MichalStrehovsky @dotnet/illink",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxLtMtg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7EtSYx",
                                           "createdAt":  "2025-09-16T20:12:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEiiE-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2025-09-16T20:50:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jtschuster",
                                           "body":  "We could have ios set `\u003c_TrimmerUnreachableBodies\u003efalse\u003c_TrimmerUnreachableBodies\u003e` to avoid linking away the method body. I agree that doing something to support running ilc after illink doesn\u0027t seem right, but I can also see the argument that we shouldn\u0027t be warning when we can\u0027t find the backing field. It shouldn\u0027t ever lead to runtime errors, so we could just let it go or maybe raise an info diagnostic.",
                                           "updatedAt":  "2025-09-16T20:12:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Ett6k",
                                           "createdAt":  "2025-09-16T20:53:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "True, and that lines up nicely with what we did for aggressive attribute trimming.",
                                           "updatedAt":  "2025-09-16T20:53:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Etu2L",
                                           "createdAt":  "2025-09-16T20:54:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rolfbjarne",
                                           "body":  "\u003e Alternatively, we could probably fix it by removing CompilerGeneratedAttribute when ILLink stubs out the getter\n\nI like this option, because the getter isn’t really compiler generated anymore after ILLink modifies it.",
                                           "updatedAt":  "2025-09-16T20:54:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Et93M",
                                           "createdAt":  "2025-09-16T21:17:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "My only concern with that is that I don\u0027t want to be in the business of defining what `CompilerGeneratedAttribute` means to downstream tools in general. It\u0027s possible that other tooling interprets it as \"originally generated by the compiler\" or \"not user-generated\".\n\nDo you see any problems with disabling the `_TrimmerUnreachableBodies` optimization? I hope ILC\u0027s analysis would prevent any significant size impact from this.",
                                           "updatedAt":  "2025-09-16T21:17:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EuUU5",
                                           "createdAt":  "2025-09-16T21:56:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "agocke",
                                           "body":  "\u003e we didn\u0027t design for the case where [ILC runs after ILLink]\n\nIn 10.0 this is definitely the case. If we didn\u0027t design for this case when making the change, we should revert the change.",
                                           "updatedAt":  "2025-09-16T21:56:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EuxJ1",
                                           "createdAt":  "2025-09-16T22:53:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbomer",
                                           "body":  "Discussed with @agocke and we think the right thing to do here is to not strictly assume that compiler-generated properties access a single compiler-generated backing field. While that may be true of code generated today, there\u0027s no rule that requires this.\n\nSo we shouldn\u0027t be producing a warning when the heuristic fails - instead we should just let it fail and continue with the analysis.",
                                           "updatedAt":  "2025-09-16T22:53:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Eu0y2",
                                           "createdAt":  "2025-09-16T23:01:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEimLkQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbomer",
                                                                               "createdAt":  "2025-09-16T23:02:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vitek-karas",
                                                                               "createdAt":  "2025-09-17T07:35:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "agocke",
                                           "body":  "To elaborate a bit, my concern here was that there\u0027s a constellation of ILLink-\u003eILC issues that we could see as a drip. After discussing I understand the full issue now and am much more comfortable.😅\n\nFrom a high level, I think the proximal high-risk factor is warnings that trigger when our heuristics fail. In some sense we can describe ILLink as \"loosely non-heuristic preserving.\" That is, we don\u0027t go out of our way to disrupt the code patterns that C# emits, but we also don\u0027t go out of our way to preserve them (and test that they\u0027re preserved). Every time we emit a warning about heuristic mismatch/failure we\u0027ve effectively increased the risk in the ILLink-\u003eILC scenario due to the risk that ILLink will not preserve a heuristic pattern.\n\nHowever, it seems like there are relatively few places where we emit such warnings, most of those places are pre-existing and are already tested by iOS/MAUI, and we haven\u0027t changed ILLink codegen much. So the remaining risk is about introducing new warnings of that form. And any place we add them (like here) we increase the risk. Conversely, if we remove this warning we will decrease the risk. We also slightly raise the risk that we will miss a heuristic opportunity, but I\u0027m not too worried about that since I haven\u0027t seen a lot of evidence that\u0027s a problem yet.",
                                           "updatedAt":  "2025-09-17T00:57:56Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "ILC warns when it fails to find trimmed-away backing field",
        "labels":  [
                       "area-Tools-ILLink"
                   ]
    }
]
