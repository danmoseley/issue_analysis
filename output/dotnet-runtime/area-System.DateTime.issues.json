[
    {
        "url":  "https://github.com/dotnet/runtime/issues/14966",
        "createdAt":  "2015-08-04T18:23:07Z",
        "number":  14966,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T02:02:36Z",
        "body":  "It currently isn\u0027t possible to support Israel, Asia/Amman, Asia/Gaza, Asia/Hebron, Pacific/Fiji and America/Godthab daylight savings rules in the POSIX string that is used on Linux to describe the daylight savings transitions for years after the last transition stored in the file.\n\nHere is Israel\u0027s POSIX string: IST-2IDT,M3.4.4/**26**,M10.5.0\nThis is saying that daylight savings starts 26 hours after midnight of the 4th Thursday of March. \n\n\"On July 8, 2013, the Israeli Knesset approved the bill to extend IDT even further. According to the bill, IDT will begin on the Friday before the last Sunday of March, and end on the last Sunday of October.\"\nFrom https://en.wikipedia.org/wiki/Israel_Summer_Time\n\nSo this might not be the last Friday of the month.  Some years it is the last Friday of the month, some years it is the 2nd to last.\n\nThis rule isn\u0027t possible to describe in the current [TimeZoneInfo.TransitionTime structure](https://msdn.microsoft.com/en-us/library/vstudio/system.timezoneinfo.transitiontime%28v=vs.110%29.aspx).  It can only specify the 4th Friday, or the last Friday, there is no way to say \"the Friday before the last Sunday\".\n\nTo fix this, we should add a \"TimeSpan Offset\" to TransitionTime that we can use to convert the string \"M3.4.4/26\" into a TransitionTime structure.  Here the TimeSpan Offset = 26 hours, and month = 3, week = 4, day = 4.  The \"TimeOfDay\" property would be ignored in this case.\n\nNote that America/Godthab uses a negative time offset: WGT3WGST,M3.5.0/-2,M10.5.0/-1.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSORYSw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDEyNzgyMjc1MA==",
                                           "createdAt":  "2015-08-05T02:36:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "@mj1856 - something else to consider.\n",
                                           "updatedAt":  "2015-08-05T02:36:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1NDI4NzM1OA==",
                                           "createdAt":  "2015-11-06T05:09:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "FYI, for transitions like these, Windows has a separate rule for every year, for some arbitrary amount of time into the future.  Currently, Israel Dynamic DST rules go to year 2023 in the Windows registry.\n\nNot necessarily the best approach, but you could do something similar here.  You wouldn\u0027t necessarily need a new transition rule for _every_ year, but you\u0027d project pseudo rules, alternating between the 4th friday and the last friday, over a range of applicable years.  I suppose you could go out to `DateTime.MaxValue`, but perhaps for memory concerns less would be more.  Now+20 years sounds reasonable.\n\nWithout some scheme like that, then you are correct that the `TransitionTime` structure would need to be augmented.  The problem is, it\u0027s already 16 bytes. Adding another field would exceed the [recommended size of a struct](https://msdn.microsoft.com/en-us/library/ms229017.aspx).\n\nI suppose it would be possible to replace `m_dayOfWeek` with a single byte, freeing up three bytes in the struct.  The public API could remain the same.\n",
                                           "updatedAt":  "2015-11-06T05:11:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1NDI4Nzc2Ng==",
                                           "createdAt":  "2015-11-06T05:13:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "![image](https://cloud.githubusercontent.com/assets/1396388/10989904/16806bf4-8402-11e5-8079-f48c9798de9c.png)\n",
                                           "updatedAt":  "2015-11-06T05:13:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1NDQzNDY3Ng==",
                                           "createdAt":  "2015-11-06T15:15:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  ":+1: on that pic.\n\nFortunately for now, the tz files (on my Ubuntu machine) have transition timestamps until 2038. So we can accurately support these time zones until that year. This issue is only for years beyond the transition timestamps stored in the tz files, which could be less or more than 2038 depending on which tz files the system has.\n",
                                           "updatedAt":  "2015-11-06T15:15:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1OTI5MDMzNw==",
                                           "createdAt":  "2016-11-08T23:17:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "We need formal API proposal.\nIt will be entangled with all the other TimeZoneInfo issue - will likely be non-trivial API design and implementation.\n",
                                           "updatedAt":  "2016-11-08T23:19:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2OTU5NjMxMA==",
                                           "createdAt":  "2020-08-05T23:28:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@tarekgh do you know if this issue is still relevant?",
                                           "updatedAt":  "2020-08-05T23:28:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2OTU5NjgxMA==",
                                           "createdAt":  "2020-08-05T23:29:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I moved it to 6.0. will be good to look at it at some point in the future.",
                                           "updatedAt":  "2020-08-05T23:29:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I4_Y6",
                                           "createdAt":  "2022-08-22T20:06:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@tarekgh, is this still something we\u0027re wanting to look at?\r\n\r\nI\u0027m trying to close some of the older issues in the runtime area that are either not actionable or aren\u0027t something we\u0027re planning on doing ourselves.",
                                           "updatedAt":  "2022-08-22T20:06:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I5COh",
                                           "createdAt":  "2022-08-22T20:11:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@tannergooding its low priority per the comment https://github.com/dotnet/runtime/issues/14966#issuecomment-154434676. It will be good if we\u0027ll look at this at some time but this will not happen in the near future.",
                                           "updatedAt":  "2022-08-22T20:11:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I5FhL",
                                           "createdAt":  "2022-08-22T20:16:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@jeffhandley. Do you have any preference on how we handle issues like this?",
                                           "updatedAt":  "2022-08-22T20:16:58Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "TimeZoneInfo.TransitionTime cannot support Israel, et al. time zones on Linux",
        "labels":  [
                       "api-needs-work",
                       "os-linux",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/4728",
        "createdAt":  "2015-11-29T14:31:06Z",
        "number":  4728,
        "author":  "jskeet",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T02:08:55Z",
        "body":  "This issue is related to https://github.com/dotnet/corefx/issues/2465 but I\u0027m raising it separately as it\u0027s a specific set of implementation problems.\n\nI\u0027ve been comparing the information from TimeZoneInfo with that provided by Noda Time (from raw source data) and ZicDump (from the output of zic). There are a few discrepancies, some of which are fixable and some of which may not be.\n- TimeZoneInfo doesn\u0027t know how to handle more than \"standard name\" and \"daylight name\" - a single zone may vary between several names over the course of history\n- DateTimeOffset can\u0027t cope cope with UTC offsets which have a non-zero sub-minute second value, as is typically the case early in a time zone\n- Zones usually in the \"backward\" file behave inconsistently. If you call `GetSystemTimeZones()` before requesting them by ID, only `zone.tab` is loaded and the old zone ID can\u0027t be used. If you call `FindSystemTimeZoneById` _before_ calling `GetSystemTimeZones()`, the zone is loaded from its file, and a later call to `GetSystemTimeZones()` will include the ID. Sample zone for this behaviour: `America/Atka`. I can understand the zone either never being available, or being available through `FindSystemTimeZoneById` but never advertized by `GetSystemTimeZones()`, but the current behaviour is really unpleasant.\n- Some time zones are seen to observe changes when they shouldn\u0027t. For example, Africa/Casablanca was in permanent UTC+1 from 1940-1945, but `TimeZoneInfo` shows it alternating between UTC+0 and UTC+1\n- Some time zones observe a transition one tick too early, e.g. Africa/Johannesburg should transition from -3 to -2 at 1943-02-20T23:00:00Z, but it actually transitions a tick before that.\n\nSample code to demonstrate the last three issues:\n\n``` csharp\nusing System;\nusing System.Linq;\n\nnamespace BugDemo\n{\n    public class Program\n    {\n        public int Main(string[] args)\n        {\n            // Uncomment these lines to show False and then an exception...\n//            var atkaPresent = TimeZoneInfo.GetSystemTimeZones().Select(zone =\u003e zone.Id).Contains(\"America/Atka\");\n//            Console.WriteLine(atkaPresent);\n            var atka = TimeZoneInfo.FindSystemTimeZoneById(\"America/Atka\");\n            Console.WriteLine(atka.Id);\n\n            var casablanca = TimeZoneInfo.FindSystemTimeZoneById(\"Africa/Casablanca\");\n            // Should be +1, as Casablanca was at +1 between 1940 and 1945, with no \"standard time\")\n            Console.WriteLine(casablanca.GetUtcOffset(new DateTimeOffset(1940, 11, 20, 0, 0, 0, TimeSpan.Zero)));\n\n            var johannesburg = TimeZoneInfo.FindSystemTimeZoneById(\"Africa/Johannesburg\");\n            var transition = new DateTimeOffset(1943, 3, 20, 23, 0, 0, TimeSpan.Zero);\n            Console.WriteLine(johannesburg.GetUtcOffset(transition.AddTicks(-2))); // This should be -3\n            Console.WriteLine(johannesburg.GetUtcOffset(transition.AddTicks(-1))); // This should still be -3\n            Console.WriteLine(johannesburg.GetUtcOffset(transition)); // This should be -2\n\n            return 0;\n        }\n    }\n}\n```\n\n// cc @eerhardt \n\nCode for generating full time zone lists is at https://github.com/nodatime/tzvalidate\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJudG7Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE3MjExMjM5OA==",
                                           "createdAt":  "2016-01-15T22:24:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "I\u0027ve fixed the last 2 issues listed here with dotnet/coreclr#2685.  It was a simple check that was missing inside TimeZoneInfo.\n\nThe first issue is a design flaw/shortcoming with TimeZoneInfo, which is lower priority and probably won\u0027t be addressed unless there is strong customer demand for it.\n\nThe second issue appears to be \"by design\" according to this comment in the code:\n\nhttps://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/TimeZoneInfo.cs#L1205-L1206\n\n```\n// TZif supports seconds-level granularity with offsets but TimeZoneInfo only supports minutes since it aligns \n// with DateTimeOffset, SQL Server, and the W3C XML Specification \n```\n\nFor the third issue I\u0027ve logged https://github.com/dotnet/corefx/issues/5469 separately, so it gets addressed in RTM.\n\nI\u0027m keeping this issue open and under the \"Future\" milestone to track the first issue - handling more than 2 time zone names.\n",
                                           "updatedAt":  "2016-01-15T22:24:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MjY4Nzc0NA==",
                                           "createdAt":  "2020-07-01T23:04:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "@eerhardt is the first still not fixed? seems like this issue hasn\u0027t been updated in several years.",
                                           "updatedAt":  "2020-07-01T23:04:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MjY4ODgxMg==",
                                           "createdAt":  "2020-07-01T23:09:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003eis the first still not fixed? \r\n\r\n\u003e\u003e TimeZoneInfo doesn\u0027t know how to handle more than \"standard name\" and \"daylight name\" - a single zone may vary between several names over the course of history\r\n\r\nNo, as far as I know it isn\u0027t fixed and I haven\u0027t heard any more requests for it. cc @tarekgh - in case he has more information.",
                                           "updatedAt":  "2020-07-01T23:09:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MjY5MTE4MQ==",
                                           "createdAt":  "2020-07-01T23:17:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBJI-jw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joperezr",
                                                                               "createdAt":  "2020-07-01T23:40:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@eerhardt is correct. I would prefer keeping the issue opened for the future milestone. ",
                                           "updatedAt":  "2020-07-01T23:17:46Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "TimeZoneInfo mishandling of tz data",
        "labels":  [
                       "enhancement",
                       "os-linux",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/19537",
        "createdAt":  "2016-12-02T07:10:54Z",
        "number":  19537,
        "author":  "steentottrup",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCPZ7Ug==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "linflux",
                                            "createdAt":  "2017-01-24T14:03:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "abelbraaksma",
                                            "createdAt":  "2022-02-18T16:05:10Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-11-22T02:01:18Z",
        "body":  "Here is the summary of the proposal:\r\n\r\n## API Proposal \r\n\r\n```C#\r\nnamespace System\r\n{\r\n    public sealed class DateTime : ValueType, IComparable, IComparable\u003cDateTime\u003e, IConvertible, IEquatable\u003cDateTime\u003e, IFormattable\r\n    {\r\n        public String ToLongDateString(TimeZoneInfo tzi)\r\n        public String ToLongTimeString(TimeZoneInfo tzi)\r\n        public String ToShortDateString(TimeZoneInfo tzi)\r\n        public String ToShortTimeString(TimeZoneInfo tzi)\r\n        public String ToString(TimeZoneInfo tzi)\r\n        public String ToString(String format, TimeZoneInfo tzi)\r\n        public String ToString(TimeZoneInfo tzi, IFormatProvider provider)\r\n       public String ToString(String format, IFormatProvider provider)\r\n    }\r\n}\r\n```\r\n\r\n## Details \r\nNeed a way to be able to format the dates using non-default/Local time zone. currently to do that will need manually convert the date to the target time zone and then format it. \r\n\r\nToday if someone want to achieve the same result as the proposed APIs will write a code like \r\n\r\n```C#\r\n    var now = DateTime.Now;\r\n    var zone = TimeZoneInfo.FindSystemTimeZoneById(\"Turkey Standard Time\");\r\n    var localTime = TimeZoneInfo.ConvertTime(now, zone);\r\n    Console.WriteLine($\"{localTime.ToLongDateString()}\");\r\n```\r\n\r\nand will need to call the time zone conversion API TimeZoneInfo.ConvertTime every time before formatting the date/time.\r\n\r\nAlso today there is no easy way to format the DateTime with a target time zone using a formatting pattern like \"o\" which include the time zone information. for example doing:\r\n\r\n```C#\r\n    var now = DateTime.Now;\r\n    var zone = TimeZoneInfo.FindSystemTimeZoneById(\"Turkey Standard Time\");\r\n    var localTime = TimeZoneInfo.ConvertTime(now, zone);\r\n    Console.WriteLine($\"{localTime.ToString(\"o\")}\");\r\n```\r\n\r\nwill produce something like \r\n\r\n```\r\n2017-01-17T23:37:21.1371643\r\n```\r\n\r\nwhich either will show the formatted string without the time zone info or if the time zone info is there will be matching the local time zone or UTC time zone but cannot have the target time zone information. \r\nThe desired formatted string from the example should be something like \r\n\r\n```\r\n2017-01-17T23:37:21.1371643+03:00\r\n```\r\n\r\nwhere +03:00 reflect Turkey time zone offset from UTC.\r\n\r\nthe way the proposed APIs work will manually check the Kind of the DateTime, if it is Local/Unspecified then it will convert the DateTime from local time zone to target time zone. if the Kind is UTC, will convert it from UTC to target time zone.\r\n\r\nIf the output format is the one which include the time zone info (e.g. \u0027o\u0027 pattern), the resulted formatted string should reflect the target time zone. \r\n\r\n## Sample Code\r\n\r\n```C# \r\n\r\n    var now = DateTime.Now;\r\n    var zone = TimeZoneInfo.FindSystemTimeZoneById(\"Turkey Standard Time\");\r\n    Console.WriteLine($\"{now.ToLongDateString(zone)}\");\r\n\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOEEq3zQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NDkxMTQ0Nw==",
                                           "createdAt":  "2016-12-05T17:02:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@steentottrup we need API proposal for that. the proposal should address the details of how formatting dates will work with DateTime objects with (Local, UTC and Unspecified DateTimeKind). also the proposal need to address how this should work in the UWP apps as in UWP the current cultures for example are not the user cultures instead are driven by app + user profile cultures.\r\n",
                                           "updatedAt":  "2016-12-05T17:02:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Njc1MTUzNg==",
                                           "createdAt":  "2016-12-13T14:26:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steentottrup",
                                           "body":  "I\u0027m sorry I have no experience (or knowledge) with UWP, but if cultures are driven by the app + user profile, I bet this will fit right in, as what I\u0027m suggesting is a way to configure the timezone (for the UI).\r\n\r\nLike with ``CultureInfo``, the current timezone should be available somewhere from the context of a running application. In \"old\" dotnet you could get it on the thread or ``CultureInfo.CurrentUICulture`` etc. So i suggest the same with the ``TimeZoneInfo``. Today I believe there\u0027s a Local property somewhere, that will give you the timezone selected by the administrator on the server (if you\u0027re running in a web app as an example).\r\n\r\nSo I suggest putting a \"current\" property on the ``TimeZoneInfo`` class, and like with ``CultureInfo``, fetch a current ``TimeZone`` from the thread. It should probably be a ``CurrentUITimeZone``, as my proposal is strickly for showing the timezone right in all formatted texts.\r\n\r\nAs is possible with ``CultureInfo``, you should be able to change this property. It could default to the what the ``Local`` property is today, and it should probably be configurable in the app/web.config files, like ``CultureInfo`` is.\r\n\r\nThen when it comes to actually formatting the date (and time), we need an method that will get the time (and date) when taking the selected timezone into account. Something like:\r\n\r\n```c#\r\n    public String ToLongTimeString() {\r\n            Contract.Ensures(Contract.Result\u003cString\u003e() != null);\r\n            return DateTimeFormat.Format(this.ToCurrentTimeZone(), \"T\", DateTimeFormatInfo.CurrentInfo);\r\n    }\r\n```\r\n\r\nWhen doing the recalculation of the date/time, DateTimeKind should be taken into account, which should be easy for Local and UTC. I have no idea what to do with the Unspecified, which is a bit of a bastard in my world.\r\n\r\nI hope this helped, please post feedback!",
                                           "updatedAt":  "2017-01-17T19:50:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Njc5NjUzMQ==",
                                           "createdAt":  "2016-12-13T17:01:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I believe we have 2 options to support formatting with TZ:\r\n- we can attach default TZ object to CurrentCulture (note that is not CurrentUICulture) and then all Date/Time formatting will use this TZ object during the formatting. the problem with this approach is for the app which don\u0027t want to use the TZ during the formatting even when someone (like any used library) set it. in addition to that, this can create app compat issues as the app can opt-in using new version of any library which starts to set TZ.\r\n- the other option is to introduce overloaded formatting methods (in DateTime and possibly DateTimeFormatInfo) which can accept the TZ object and format the Date accordingly. the app will have choice to format the dates with or without TZ and will have full control on the results. in this approach there is no notion of default TZ and instead the API can format with any giving TZ object. it is similar approach of the formatting APIs which takes a culture today.\r\n\r\nI am inclining to the second option as it gives more control on the behavior and also it is more clearer for the app what to expect. in same time it reduces the risk of running issues (like in UWP, current culture is kind of global to the app and not limited to the thread).",
                                           "updatedAt":  "2016-12-13T17:01:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Njg0Mjc1MQ==",
                                           "createdAt":  "2016-12-13T19:51:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steentottrup",
                                           "body":  "I was hoping for option one, and it\u0027s actually kind of what I did the first couple of times I needed timezones (putting it on the CultureInfo that is).\r\nI hadn\u0027t taken into account the compat issue, where the app isn\u0027t interested in the tz support, but a library used, is changing the tz.\r\n\r\nSo option 2 is certainly acceptable! Even though I dislike the need for all these extra methods.",
                                           "updatedAt":  "2016-12-13T19:51:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Njk3MzQyNg==",
                                           "createdAt":  "2016-12-14T08:29:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steentottrup",
                                           "body":  "Just a small note to what you wrote on option 2,\r\n\r\n\u003e the app will have choice to format the dates with or without TZ\r\n\r\nThe datetime format actually decides if the timezone should be part of the output or not.\r\n\r\nSo what I think you meant (?) was if the datetime should be recalculated to the given (as an argument) timezone, right? Or do you want to provide an argument to tell the method to pull the (configured) timezone from the current thread/cultureinfo and then recalculate?",
                                           "updatedAt":  "2016-12-14T08:35:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NzA5NDY2Nw==",
                                           "createdAt":  "2016-12-14T17:14:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "my thought was to pass TZ object to the formatting and ask formatting the Date/Time using that TZ object. \r\n\r\nThe input DateTime will be converted to value matches the input TZ and then get formatted with this value.  I think this is the scenario you want to achieve, right?",
                                           "updatedAt":  "2016-12-14T17:14:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NzEwOTMzNA==",
                                           "createdAt":  "2016-12-14T18:10:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steentottrup",
                                           "body":  "It is, yes! The option to get the format output for a datetime with another tz than the one selected on the server by the admin.",
                                           "updatedAt":  "2016-12-14T18:10:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NzU3MzA1Ng==",
                                           "createdAt":  "2016-12-16T11:17:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steentottrup",
                                           "body":  "So instead of what I did before, where the `GetTimeZoneInfo` method is some black magic/hack I did, where I stored a TimeZoneInfo for each request in my web app, using DI:\r\n\r\n```c#\r\n    public static DateTime ToLocalDateTime(this DateTime dt) {\r\n        TimeZoneInfo tzi = GetTimeZoneInfo();\r\n        dt = TimeZoneInfo.ConvertTimeFromUtc(dt, tzi);\r\n        return dt;\r\n    }\r\n```\r\n\r\nThis is what it will look like if this proposal gets accepted and implemented:\r\n\r\n```c#\r\n    public struct DateTime {\r\n\r\n        public String ToLongTimeString() {\r\n            Contract.Ensures(Contract.Result\u003cString\u003e() != null);\r\n            return DateTimeFormat.Format(this, \"T\", DateTimeFormatInfo.CurrentInfo);\r\n        }\r\n\r\n        public String ToLongTime(TimeZoneInfo tzi) {\r\n            Contract.Ensures(Contract.Result\u003cString\u003e() != null);\r\n            return DateTimeFormat.Format(\r\n                TimeZoneInfo.ConvertTimeFromUtc(dt.ToUniversalTime(), tzi),\r\n                \"T\",\r\n                DateTimeFormatInfo.CurrentInfo\r\n            );\r\n        }\r\n    }\r\n```\r\n\r\nAnd then where you call this method from, you\u0027ll need to get the current (default or configured or what ever) TimeZoneInfo from somewhere (the current thread or...).\r\n",
                                           "updatedAt":  "2017-01-17T19:50:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NzY0MTcxMA==",
                                           "createdAt":  "2016-12-16T17:01:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "introducing the proposed method make sense to me.\r\n\r\n```C#\r\n    public String ToLongTime(TimeZoneInfo tzi) {\r\n        Contract.Ensures(Contract.Result\u003cString\u003e() != null);\r\n        return DateTimeFormat.Format(\r\n            TimeZoneInfo.ConvertTime(dt, tzi),\r\n            \"T\",\r\n            DateTimeFormatInfo.CurrentInfo\r\n        );\r\n```\r\nnotice I have changed a little bit in the implementation you previously provided.\r\n\r\nThe question now is, does it make sense to have overload to ToLongDateString, ToShortTimeString...etc. or not ",
                                           "updatedAt":  "2016-12-16T17:01:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NzY3NTA1Ng==",
                                           "createdAt":  "2016-12-16T19:23:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steentottrup",
                                           "body":  "It always makes sense, on all DateTime format methods. Imagine the scenario where it\u0027s a forum, a user has posted a new topic at 2:00 AM UTC, on December 16th 2016, now you visit the site, you\u0027re in GMT minus something (bigger than 2 hours), so this needs to show as December 15th, 2016, even without a time and timezone in the output string.\r\n\r\nAt least I think so!",
                                           "updatedAt":  "2016-12-16T19:23:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2NzcwNTc4NQ==",
                                           "createdAt":  "2016-12-16T21:58:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "we need to have the exact proposal to the design review committee. Thanks.",
                                           "updatedAt":  "2016-12-16T21:58:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2Nzg5NzM0Mg==",
                                           "createdAt":  "2016-12-19T07:16:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steentottrup",
                                           "body":  "I\u0027ll make something for this!",
                                           "updatedAt":  "2016-12-19T07:16:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2ODczNTkwOQ==",
                                           "createdAt":  "2016-12-22T07:23:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steentottrup",
                                           "body":  "What I would like, is for this [piece of code](https://gist.github.com/steentottrup/86ec8728d6d2781c88e35c5805a1b84f), generating this output:\r\n\r\nPosted by me, in Denmark, at Saturday, December 17, 2016 6:28:00 AM local time\r\nThat\u0027s UTC: Saturday, December 17, 2016 5:28:00 AM UTC\r\nAnd displays as (UTC-07:00) Mountain Time (USA og Canada) time: Friday, December 16, 2016 10:28:00 PM\r\n\r\nTo look like this [piece of code](https://gist.github.com/steentottrup/772f7221788556313fa4fca036ac9133) instead.\r\n\r\nThe changes being:\r\n\r\n```c#\r\n    Thread.CurrentThread.CurrentTimeZone = TimeZoneInfo.FindSystemTimeZoneById(\"Mountain Standard Time\");\r\n```\r\n\r\nand\r\n\r\n```c#\r\n    postedDk.ToLongDateString(Thread.CurrentThread.CurrentTimeZone)\r\n```\r\n\r\nWith this proposal, you can take any ``DateTime`` with a ``DateTimeKind`` of UTC or Local, and \u0027convert\u0027 it into a given TimeZone for output purpose.\r\n",
                                           "updatedAt":  "2017-01-17T19:50:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2ODkxNjIyMQ==",
                                           "createdAt":  "2016-12-22T23:52:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "why you need to have Thread.CurrentThread.CurrentTimeZone? this can be handled by the application, I am not seeing much value to attach CurrentTimeZone to the thread. you can achieve the same by defining ThreadStatic in your code already. \r\n\r\nso I guess the proposal now is we just need to add the new API \r\n\r\n```C#\r\n    public string ToLongDateString(TimeZoneInfo tzi)\r\n```\r\n\r\nin DateTime struct.\r\n",
                                           "updatedAt":  "2016-12-22T23:52:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2ODk0Njk1OQ==",
                                           "createdAt":  "2016-12-23T06:36:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steentottrup",
                                           "body":  "Sorry, you\u0027re absolutely right, that line of code was from my original idea, where you didn\u0027t have a new method with the TimeZoneInfo argument, but where the methods themselves fetched that TimeZoneInfo off the current thread.\r\n\r\nSo the changes to the API would be adding a TimeZonInfo parameter to these methods (actually add another method with the parameter added):\r\n\r\n```c#\r\n        public String ToLongDateString()\r\n        public String ToLongTimeString()\r\n        public String ToShortDateString()\r\n        public String ToShortTimeString()\r\n        public override String ToString()\r\n        public String ToString(String format)\r\n        public String ToString(IFormatProvider provider)\r\n        public String ToString(String format, IFormatProvider provider)\r\n```\r\n\r\nRight?",
                                           "updatedAt":  "2017-01-17T19:49:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3MDIyNDI0Ng==",
                                           "createdAt":  "2017-01-03T21:04:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "ok to summarize the signatures of the APIs we need to add to DateTime structure:\r\n\r\n```C#\r\n    public String ToLongDateString(TimeZoneInfo tzi)\r\n    public String ToLongTimeString(TimeZoneInfo tzi)\r\n    public String ToShortDateString(TimeZoneInfo tzi)\r\n    public String ToShortTimeString(TimeZoneInfo tzi)\r\n    public String ToString(TimeZoneInfo tzi)\r\n    public String ToString(String format, TimeZoneInfo tzi)\r\n    public String ToString(TimeZoneInfo tzi, IFormatProvider provider)\r\n    public String ToString(String format, IFormatProvider provider)\r\n```\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2017-01-03T21:08:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3MjUyMTc1Mw==",
                                           "createdAt":  "2017-01-13T19:12:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@tarekgh can you please summarize the final API in the top post? (here\u0027s typically used [template](https://github.com/dotnet/corefx/issues/271))\r\nBTW: I don\u0027t see class/namespace. Motivation/example would help as well.",
                                           "updatedAt":  "2017-01-13T19:12:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3MjUyODk0Mw==",
                                           "createdAt":  "2017-01-13T19:41:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@steentottrup I have moved your first comment to the next one and updated the first comment with the proposal.\r\n\r\n@karelz please let me know if you have any other asks.\r\n\r\nthanks",
                                           "updatedAt":  "2017-01-13T19:41:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3MjU4NDYwNA==",
                                           "createdAt":  "2017-01-14T00:33:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Thank you!",
                                           "updatedAt":  "2017-01-14T00:33:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3MzI4MTM0Mg==",
                                           "createdAt":  "2017-01-17T19:57:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "We just took a brief look. For semantics, is it fair to say that your code sample above:\r\n\r\n```C#\r\nvar now = DateTime.Now;\r\nvar zone = TimeZoneInfo.FindSystemTimeZoneById(\"Turkey Standard Time\");\r\nConsole.WriteLine($\"{now.ToLongDateString(zone)}\");\r\n```\r\n\r\nis (logically) the same as:\r\n\r\n```C#\r\nvar now = DateTime.Now;\r\nvar zone = TimeZoneInfo.FindSystemTimeZoneById(\"Turkey Standard Time\");\r\nvar localTime = zone.ConverDateTime(now);\r\nConsole.WriteLine($\"{localTime.ToLongDateString()}\");\r\n```\r\n\r\n@steentottrup @tarekgh ?",
                                           "updatedAt":  "2017-01-17T19:57:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3MzI4MTk0Nw==",
                                           "createdAt":  "2017-01-17T20:00:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "We need more info and @tarekgh\u0027s expertise to do proper review. If you can update the top post with the background, alternatives, etc., that would be great. If not, we can discuss it next time with @tarekgh in the room.",
                                           "updatedAt":  "2017-01-17T20:00:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3MzI5NDc1MA==",
                                           "createdAt":  "2017-01-17T20:47:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@terrajobst @karelz \r\n\r\nThe mentioned code by @terrajobst is correct as if want to achieve the same results with the proposed APIs except in one case\r\n\r\n```C#\r\nvar now = DateTime.Now;\r\nvar zone = TimeZoneInfo.FindSystemTimeZoneById(\"Turkey Standard Time\");\r\nvar localTime = TimeZoneInfo.ConvertTime(now, zone);\r\nConsole.WriteLine($\"{localTime.ToLongDateString()}\");\r\n```\r\nBasically the APIs will just help in converting the date/time to the target time zone before the formatting so the caller don\u0027t have to manually convert to the target time zone.\r\n\r\nThe only difference between the proposed API and the alternative code is when formatting the date with the pattern which include the time zone info, the time zone info should reflect the target time zone and not the local time zone.\r\n\r\n```C#\r\nvar now = DateTime.Now;\r\nvar zone = TimeZoneInfo.FindSystemTimeZoneById(\"Turkey Standard Time\");\r\nvar localTime = TimeZoneInfo.ConvertTime(now, zone);\r\nConsole.WriteLine($\"{localTime.ToString(\"o\")}\");\r\n```\r\n\r\nThis will produce something like:\r\n\r\n```\r\n2017-01-17T23:37:21.1371643\r\n```\r\nwhile the new proposed API should produce something \r\n\r\n```\r\n2017-01-17T23:37:21.1371643+03:00\r\n```\r\n\r\nto reflect the target time zone. we don\u0027t have any way today to achieve this result without the proposed APIs.\r\n",
                                           "updatedAt":  "2017-01-17T20:52:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3MzMyNDEyMQ==",
                                           "createdAt":  "2017-01-17T22:41:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Is extending the string formatting out of question?\r\nIt would be nice to include the background in motivation section of the proposal at the top.",
                                           "updatedAt":  "2017-01-17T22:41:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3MzMyNTg1MA==",
                                           "createdAt":  "2017-01-17T22:49:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@karelz \r\n\r\n\u003e Is extending the string formatting out of question?\r\n\r\nWhat you mean by that? do you mean the date/time formatting pattern strings? if this is the case I don\u0027t think this will help much as most people want to use the existing APIs without specifying the patterns.\r\n\r\n\u003e It would be nice to include the background in motivation section of the proposal at the top.\r\n\r\nI already mentioned the following in the details, what exactly else you want to see?\r\n\r\n```\r\nNeed a way to be able to format the dates using non-default/Local time zone. currently to do that will need manually convert the date to the target time zone and then format it.\r\n```",
                                           "updatedAt":  "2017-01-17T22:49:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3MzMyOTE1MQ==",
                                           "createdAt":  "2017-01-17T23:02:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "For me (with little background on specific APIs in the space), the sample code above is just much easier to comprehend - the alternative is to talk about it in person.\r\n\r\n\u003e What you mean by that? do you mean the date/time formatting pattern strings? if this is the case I don\u0027t think this will help much as most people want to use the existing APIs without specifying the patterns.\r\n\r\nI see `localTime.ToString(\"o\")` in your sample, I assume the \"o\" is important there and does not produce the right format. Is there option to extend that? e.g. `localTime.ToString(\"oo\")`?",
                                           "updatedAt":  "2017-01-17T23:02:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3MzMzMjE3Mw==",
                                           "createdAt":  "2017-01-17T23:16:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@karelz I have added the alternative code sample in the proposal to be easier for the reader. \r\n\r\nmy point regarding the formatting string is will still not help much even if we added something like \"oo\" such pattern will help format the date in specific pattern but not cover other pattern. Also the callers prefer the APIs (something like DateTime.ToLongDateString(), ToShortDateString(), ToString()) instead of calling the format method with the date time pattern. only people care much about specific format will pass the needed pattern. in our case here we need to allow formatting the date with the target time zone in all possible currently supported formatting APIs and patterns.\r\n\r\nif we introduced the new format like \"oo\" we\u0027ll still need to pass the target time zone anyway, so introducing a new format will not buy us anything.\r\n\r\n",
                                           "updatedAt":  "2017-01-17T23:32:01Z"
                                       }
                                   ],
                         "totalCount":  26
                     },
        "title":  "Proposal: Add overload DateTime formatting APIs which takes TimeZoneInfo",
        "labels":  [
                       "api-needs-work",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/19794",
        "createdAt":  "2017-01-02T19:16:47Z",
        "number":  19794,
        "author":  "justinvp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7T9QQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "repl-chris",
                                            "createdAt":  "2024-09-25T15:22:50Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-12-19T06:55:20Z",
        "body":  "The following test passes on Windows but fails on Unix:\r\n\r\n```c#\r\npublic static IEnumerable\u003cobject[]\u003e SystemTimeZonesTestData()\r\n{\r\n    foreach (TimeZoneInfo tz in TimeZoneInfo.GetSystemTimeZones())\r\n    {\r\n        yield return new object[] { tz };\r\n    }\r\n}\r\n\r\n[Theory]\r\n[MemberData(nameof(SystemTimeZonesTestData))]\r\npublic static void ToSerializedString_FromSerializedString_RoundTrips(TimeZoneInfo timeZone)\r\n{\r\n    string serialized = timeZone.ToSerializedString();\r\n    TimeZoneInfo deserializedTimeZone = TimeZoneInfo.FromSerializedString(serialized);\r\n    Assert.Equal(timeZone, deserializedTimeZone);\r\n    Assert.Equal(serialized, deserializedTimeZone.ToSerializedString());\r\n}\r\n```\r\n\r\nI believe it\u0027s due to how `GetAdjustmentRules` is implemented on Unix: https://github.com/dotnet/coreclr/blob/0a11492d52faa85c551761f8390be5de9d74e5ec/src/mscorlib/src/System/TimeZoneInfo.Unix.cs#L131-L153\r\n\r\nvs. on Windows: https://github.com/dotnet/coreclr/blob/0a11492d52faa85c551761f8390be5de9d74e5ec/src/mscorlib/src/System/TimeZoneInfo.Win32.cs#L87\r\n\r\nSee dotnet/corefx#14795\r\n\r\nAlso, when you pass an `AdjustmentRule[]` array to `TimeZoneInfo.CreateCustomTimeZone` to create a custom instance of `TimeZoneInfo`, calling `GetAdjustmentRules` on Windows will always give you a cloned copy of the same adjustment rules, whereas on Unix it looks like it will modify the adjustment rules that are returned.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgfhXAw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MzY4Nzc5Nw==",
                                           "createdAt":  "2017-04-12T19:49:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I moved this to the future release because fixing this will need some major changes how we read and handle the adjustment rules in Linux which will be risky for v2. We should have a better story for time zones in general in the future.",
                                           "updatedAt":  "2017-04-12T19:49:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1ODI1MTIxNQ==",
                                           "createdAt":  "2019-01-28T18:41:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SUPERSC0TT",
                                           "body":  "Bumping to see if there are any plans to get this fixed. This bug means that users who create custom time zones via [microsoft\u0027s documentation](https://docs.microsoft.com/en-us/dotnet/standard/datetime/create-time-zones-with-adjustment-rules) will not be able to use GetAdjustmentRules() to see the correct definitions, namely the Transition Rules Start/End are not returned correctly.",
                                           "updatedAt":  "2019-01-28T18:41:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1ODI3NTk1Nw==",
                                           "createdAt":  "2019-01-28T19:50:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@SUPERSC0TT there is no plan to address this very soon but we may get into that in the near future. the reason is we need to look at the whole TZ support and address the issues in more better designed way. \r\n\r\nCould you please share some more information about your TZ usage? like do you use custom TZ? why? what is your scenarios you are using with? \r\n\r\nWe appreciate your feedback. ",
                                           "updatedAt":  "2019-01-28T19:50:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NjQxNTY1MA==",
                                           "createdAt":  "2019-10-25T16:10:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yahorsi",
                                           "body":  "Guys, timezones are basic, we\u0027ve got into this as well, and issues such this are a show-stopper if we need to move 2 the Linux ((",
                                           "updatedAt":  "2019-10-25T16:10:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NjQxODc3NQ==",
                                           "createdAt":  "2019-10-25T16:19:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@yahorsi  could you please tell more about your scenario? why you want serialize TZI at all? are you creating your own custom TZ? ",
                                           "updatedAt":  "2019-10-25T16:19:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NjQyMTM3Ng==",
                                           "createdAt":  "2019-10-25T16:27:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yahorsi",
                                           "body":  "We\u0027re actually hit by aa bit another issue, the one that is described here:\r\n\r\nhttps://github.com/dotnet/corefx/issues/17120\r\n\r\nAnd caused by the following:\r\n```\r\n            // The rules we use in Unix care mostly about the start and end dates but don\u0027t fill the transition start and end info.\r\n            // as the rules now is public, we should fill it properly so the caller doesn\u0027t have to know how we use it internally\r\n            // and can use it as it is used in Windows\r\n```\r\n\r\nOur scenario is simple, we have a \u0027constant\u0027 custom Timezone that is parsed using TimeZoneInfo.FromSerializedString. In some parts of the code we just need to read transition start and end info, and it works on Windows and fails on Linux.\r\n\r\nAs I see in the code it should be very easy to fix. The question is why it was made in the first place.\r\nAs behaviour is really confusing. Seems like internally transition start and end info is correctly used  and only \"fails\" when you call GetAdjustmentRules\r\n\r\n\r\n",
                                           "updatedAt":  "2019-10-25T16:37:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NjQyOTA2OQ==",
                                           "createdAt":  "2019-10-25T16:50:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e As I see in the code it should be very easy to fix. The question is why it was made in the first place.\r\n\r\nInternally the data stored inside adjustment rules in Linux is different than what we have in Windows. We have another issues (like the one you pointed at) tracking fixing exposing the rules correctly on Linux too. That is why you are seeing this issue. \r\nTZI originally designed around how Windows stored TZ data which is different than what Linux/IANA does which made us to workaround that by internally storing different data. There is some rules that cannot be easily expressed by what we expose in Adjustment rules and that is why there is some challenge here.\r\n\r\nWill try to look at that in the next few weeks. I marked this issue for 5.0 release.\r\n",
                                           "updatedAt":  "2019-10-25T16:50:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NjQzMDMzMA==",
                                           "createdAt":  "2019-10-25T16:54:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yahorsi",
                                           "body":  "What people usually expect is that code just works the same way on the different operating systems. And we\u0027re hurt even if we didn\u0027t deploy on Linux as many today\u0027s build servers are using Linux and so, tests are just failing (\r\n\r\nIs there any option to have the fix for the 2.2.* branch?",
                                           "updatedAt":  "2019-10-25T16:54:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NjQzNDI0Mg==",
                                           "createdAt":  "2019-10-25T17:06:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@danmosemsft @ericstj to advise regarding servicing this in previous releases. \r\n\r\nWe don\u0027t have the fix yet and depend on the fix we can evaluate the risk. meanwhile, we may try to find you a workaround which may help parsing the Linux serialized TZ.\r\n",
                                           "updatedAt":  "2019-10-25T17:06:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NjQzNTk2Ng==",
                                           "createdAt":  "2019-10-25T17:11:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yahorsi",
                                           "body":  "Sorry, do you mean it should be serialized in different way for linux and windows?\r\nNow it parses just fine, at least it does not throw, and seems time conversion from/to UTC/local works fine as well, what fails (wrong transition start and end info) is just GetAdjustmentRules call\r\n\r\nJust FYI, this is how our serialized string looks now:\r\n```CSharp\r\n            public const string TimeZoneZrhSerialized = \"Central European Standard Time;60;(UTC+01:00) Sarajevo, Skopje, Warsaw, Zagreb;Central European Standard Time;Central European Daylight Time;[01:01:0001;12:31:9999;60;[0;02:00:00;3;5;0;];[0;03:00:00;10;5;0;];];\";\r\n```\r\n",
                                           "updatedAt":  "2019-10-25T17:14:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NjQzODY0NA==",
                                           "createdAt":  "2019-10-25T17:19:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAzk6ZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yahorsi",
                                                                               "createdAt":  "2019-10-25T17:21:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Sorry, do you mean it should be serialized in different way for linux and windows?\r\n\r\nNo. what I meant, if there is a way to detect the string is serialized on Linux and interpret the serialized data differently to get the original intended information. I don\u0027t know yet if this is possible. I just wanted to say, if there is any reasonable workaround can be used here.",
                                           "updatedAt":  "2019-10-25T17:19:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NjQ0MTI1Mw==",
                                           "createdAt":  "2019-10-25T17:27:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAzlBUg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yahorsi",
                                                                               "createdAt":  "2019-10-25T17:42:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "We do not accept servicing requests for past releases through Github, please see https://dotnet.microsoft.com/platform/support/policy/dotnet-core, https://github.com/dotnet/core/blob/master/microsoft-support.md for details around backporting to past releases.   The short answer is: if you need this for .NETCore 2.1, please open a [support request](https://support.microsoft.com/supportforbusiness/productselection/?sapid=4fd4947b-15ea-ce01-080f-97f2ca3c76e8), .NETCore 2.2 is no longer recieving hotfixes (only security fixes).",
                                           "updatedAt":  "2019-10-25T17:27:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NjQ0NzEyMQ==",
                                           "createdAt":  "2019-10-25T17:44:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yahorsi",
                                           "body":  "Thank you, we will have a look at possible workarounds and if needed I will create a proper fix request. BTW there is still time before 3.1 release, I\u0027m afraid 5.0 is too far in the future",
                                           "updatedAt":  "2019-10-25T17:44:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NjUyODIyNQ==",
                                           "createdAt":  "2019-10-25T22:04:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAzmO9g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yahorsi",
                                                                               "createdAt":  "2019-10-25T22:43:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "There is still time for 3.1 but that window is closing quickly, we\u0027re already in \"Ask mode\" where we are scrutinizing risk of all fixes going into 3.1.  If we can come up with a low risk fix in the next week it has a chance at getting in.",
                                           "updatedAt":  "2019-10-25T22:04:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTg0NzY3Mg==",
                                           "createdAt":  "2020-05-17T19:25:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ralsu091",
                                           "body":  "\u003e Could you please share some more information about your TZ usage? like do you use custom TZ? why? what is your scenarios you are using with?\r\n\r\nMy use case for calling GetAdjustmentRules is for me to send down the month, week and hour of start/end transitions to an iot device so it can observe daylight saving time.\r\n\r\nHere is another issue that is affected by this: https://github.com/dotnet/runtime/issues/26278#issuecomment-629847388\r\n",
                                           "updatedAt":  "2020-05-17T19:25:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzM4NjA4Mg==",
                                           "createdAt":  "2020-07-03T06:57:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e My use case for calling GetAdjustmentRules is for me to send down the month, week and hour of start/end transitions to an iot device so it can observe daylight saving time.\r\n\r\n@ralsu091 - I\u0027m assuming you\u0027re listing a subset of the fields, because month+week+hour(+year, assumedly) isn\u0027t sufficient.  A DST transition isn\u0027t guaranteed to be on any particular day-of-week.  For that matter, although unlikely, it\u0027s perfectly possible to have multiple transitions of various sorts in any given week.\r\n\r\nYou don\u0027t list what device you\u0027re using, but if it\u0027s something Linux-based, why not just update the actual timezone file (not necessarily through `apt-get`, just `scp` the relevant file, or `wget` on a schedule or something)?  Although you really only need to worry about that if the device has a reason to operate in local time.",
                                           "updatedAt":  "2020-07-03T06:57:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2OTMzMTU5OQ==",
                                           "createdAt":  "2020-08-05T17:40:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ademchenko",
                                           "body":  "@tarekgh, let me describe how we use timezones. We are cross-platform and we are also facing the exception \r\n```\r\n \"The elements of the AdjustmentRule array must be in chronological order and must not overlap.\",\r\n        \"stackTrace\": \"   at System.TimeZoneInfo.ValidateTimeZoneInfo(String id, TimeSpan baseUtcOffset, AdjustmentRule[] adjustmentRules, Boolean\u0026 adjustmentRulesSupportDst) in /_/src/System.Private.CoreLib/shared/System/TimeZoneInfo.cs:line 1989\\n   at \r\n```\r\nIt looks like .net core poorly supports timezones in Linux, and it seems like it is something that careful attention should be given to from your side. \r\nNow about our scenario. First of all, IANA timezones are de-facto the standard and so we store timezones and show them to end-users only in IANA format. Of course, we need not only ids to show and to store but also the actual timezone objects to be able to make time conversions. The latter causes some difficulty while running on Windows since there are no IANA timezones there. What we and I believe, most people do is to convert IANA timezone to some Windows timezone that suits the corresponding IANA timezone in a way of base offset and adjustment rules. For that reason, we use the widespread library [TimeZoneConverter](https://github.com/mj1856/TimeZoneConverter) which doesn\u0027t have any alternative. And, to recapitulate: having IANA id we need to show the user some timezone with that id and correct parameters - offset and adjustment. The only way to do that on Windows is to kind of merge IANA id with Windows parameters. That is possible only with a custom timezone:\r\n\r\n```\r\n private static Dictionary\u003cstring, TimeZoneInfo\u003e GetTimeZones()\r\n        {\r\n            return\r\n                TZConvert.KnownIanaTimeZoneNames\r\n                    .Select(tzId =\u003e\r\n                    {\r\n                        var timeZoneInfo = TZConvert.GetTimeZoneInfo(tzId);\r\n\r\n                        var customTimeZone = TimeZoneInfo.CreateCustomTimeZone(tzId, timeZoneInfo.BaseUtcOffset, null, null, null,\r\n                            timeZoneInfo.GetAdjustmentRules(), !timeZoneInfo.SupportsDaylightSavingTime);\r\n\r\n                        return customTimeZone;\r\n                    })\r\n                    .ToDictionary(v =\u003e v.Id);\r\n        }\r\n```\r\n\r\nWe would like to leave that code cross-platform but we can\u0027t do that as of yet, since CreateCustomTimeZone raises the exception on Linux.",
                                           "updatedAt":  "2020-08-05T20:04:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2OTQ3Nzc4MQ==",
                                           "createdAt":  "2020-08-05T20:13:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "@ademchenko - Frankly, if you\u0027re doing a lot of work with timezones, especially crossplatform, I\u0027d really recommend you use `NodaTime`, and forget the BCL stuff.  Especially since IANA and the Windows timezone database rev at different rates - you _are_ checking for/correcting for that, right?  Note too that IANA-\u003eWindows is a lossy conversion; some Windows zones refer to multiple IANA zones.",
                                           "updatedAt":  "2020-08-05T20:13:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B-FcD",
                                           "createdAt":  "2024-06-20T12:21:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "perlun",
                                           "body":  "Ran into this ourselves because we had a test which made assumptions that the `TimeZoneInfo` could be round-tripped. Interestingly enough, come cases _work_ on Unix too, for the UTC time zone (likely because it doesn\u0027t have any adjustment rules).\n\n### UTC time zone (works correctly on both Linux and Windows)\n\n```c#\n[Test]\npublic void UTC_test() {\n    var tz = TimeZoneInfo.Utc;\n\n    // Works correctly on both Linux and Windows\n    var serialized = tz.ToSerializedString();\n    var roundTrippedTimezone = TimeZoneInfo.FromSerializedString(serialized);\n\n    roundTrippedTimezone.Should()\n        .Be(tz);\n}\n```\n\n### Local time zone (fails on Linux)\n\n```c#\n[Test]\npublic void Stockholm_test() {\n    var tz = TimeZoneInfo.FindSystemTimeZoneById(\"Europe/Stockholm\");\n\n    // The FromSerializedString() call fails on Linux\n    var serialized = tz.ToSerializedString();\n    var roundTrippedTimezone = TimeZoneInfo.FromSerializedString(serialized);\n\n    roundTrippedTimezone.Should()\n        .Be(tz);\n}\n```",
                                           "updatedAt":  "2024-12-19T06:55:20Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "TimeZoneInfo.ToSerializedString/FromSerializedString do not round trip on Unix",
        "labels":  [
                       "bug",
                       "disabled-test",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/7719",
        "createdAt":  "2017-03-24T07:39:07Z",
        "number":  7719,
        "author":  "Tornhoof",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T02:00:45Z",
        "body":  "As suggested by @tannergooding in https://github.com/dotnet/csharplang/pull/206#discussion_r107746622 the `[StructLayout(LayoutKind.Auto)]` on `DateTime` is not necessary and might prevent the wider adoption of the [Initial blittable proposal](https://github.com/dotnet/csharplang/pull/206). `DateTime` only contains a [single private `long` field](https://github.com/dotnet/coreclr/blob/e1b0f8a1d353d41de515c4cc219339b220714777/src/mscorlib/src/System/DateTime.cs#L136).\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOEXBhuA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MDI4MjcxOQ==",
                                           "createdAt":  "2017-03-30T02:20:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gkhanna79",
                                           "body":  "CC @danmosemsft ",
                                           "updatedAt":  "2017-03-30T02:20:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MTAzNDM3OA==",
                                           "createdAt":  "2017-04-03T02:10:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ufcpp",
                                           "body":  "How about `ValueTuple\u003c...\u003e`?\r\nI expect `ValueTupele`s are blittable if its all type arguments are blittable. However, They are not so because their `LayoutKind` is `Auto`.",
                                           "updatedAt":  "2017-04-03T02:10:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MjU3NzcyMA==",
                                           "createdAt":  "2017-04-07T16:02:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@ufcpp, while useful. I\u0027m not sure if removing it from `ValueTuple` is possible.\r\n\r\nIn the case of `DateTime`, it only contains a single field (a `long`), so it will always have the same layout.\r\n\r\nWith `ValueTuple`, there are a multitude of fields, so `ValueTuple\u003cshort, long, short, int\u003e` would be `24` bytes for Sequential Layout and `16` bytes for `Auto` layout. On top of that, `ValueTuple` suffers from the same issue as `DateTimeOffset` in that `Auto` makes the layout change with regards to surrounding fields, not just with regards to the fields in the struct itself: https://github.com/dotnet/coreclr/issues/10449#issuecomment-292577303",
                                           "updatedAt":  "2017-04-07T16:02:37Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Remove StructLayout LayoutKind.Auto from DateTime",
        "labels":  [
                       "enhancement",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/7720",
        "createdAt":  "2017-03-24T07:41:07Z",
        "number":  7720,
        "author":  "Tornhoof",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T02:00:46Z",
        "body":  "As suggested by @tannergooding in dotnet/csharplang#206 (comment) the [StructLayout(LayoutKind.Auto)] on `DateTimeOffset` is not necessary and might prevent the wider adoption of the [Initial blittable proposal](https://github.com/dotnet/csharplang/pull/206).  `DateTimeOffset` is composed from a [`DateTime` and a `short`](https://github.com/dotnet/coreclr/blob/e1b0f8a1d353d41de515c4cc219339b220714777/src/mscorlib/src/System/DateTimeOffset.cs#L57).\r\n\r\nThis is related to Issue dotnet/runtime#7719.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOIE-Lrw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MDI4Mjc2NQ==",
                                           "createdAt":  "2017-03-30T02:20:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gkhanna79",
                                           "body":  "@danmosemsft ",
                                           "updatedAt":  "2017-03-30T02:20:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MjU3NzMwMw==",
                                           "createdAt":  "2017-04-07T16:00:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEA5KJQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tornhoof",
                                                                               "createdAt":  "2017-04-08T20:19:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2022-01-27T10:07:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "GeeLaw",
                                                                               "createdAt":  "2025-01-03T06:25:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "After giving some more thought, this one would actually change behavior on some things since `Auto` is aware of the surrounding fields with relation to the struct, rather than just the fields in the struct itself.\r\n\r\nFor example, take the `DateTimeOffset` struct:\r\n```C#\r\n[StructLayout(LayoutKind.Auto)]\r\nstruct DateTimeOffset\r\n{\r\n    private DateTime _dateTime;\r\n    private short _offsetMinutes;\r\n}\r\n```\r\n\r\nand take an example struct such as:\r\n```C#\r\n// Implicitly [StructLayout(LayoutKind.Sequential)]\r\nstruct S\r\n{\r\n    private short _a;\r\n    private short _b;\r\n    private short _c;\r\n    private DateTimeOffset _dateTimeOffset;\r\n}\r\n```\r\n\r\n`StructLayout=Auto` woudl have `sizeof(S) == 16` and the struct is rearranged to be:\r\n```C#\r\n[StructLayout(LayoutKind.Sequential)]\r\nstruct S\r\n{\r\n    private short _a;\r\n    private short _b;\r\n    private short _c;\r\n    private short _offsetMinutes;\r\n    private DateTime _dateTime;\r\n}\r\n```\r\n\r\n`StructLayout=Sequential` would have `sizeof(S) == 24` and the struct is rearranged to effectively be:\r\n```C#\r\n[StructLayout(LayoutKind.Explicit)]\r\nstruct S\r\n{\r\n    [FieldOffset(00)] private short _a;\r\n    [FieldOffset(02)] private short _b;\r\n    [FieldOffset(04)] private short _c;\r\n // [FieldOffset(06)] private short padding;\r\n    [FieldOffset(08)] private DateTime _dateTime;\r\n    [FieldOffset(16)] private short _offsetMinutes;\r\n // [FieldOffset(18)] private short padding;\r\n // [FieldOffset(20)] private short padding;\r\n // [FieldOffset(22)] private short padding;\r\n}\r\n```",
                                           "updatedAt":  "2017-04-07T16:00:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5NDE4NzYwOQ==",
                                           "createdAt":  "2017-04-14T16:40:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@tannergooding That\u0027s not what I see. Running [this code](https://gist.github.com/svick/0dd2398c193d4f2450e9c19a3a020c63) on .Net Core 1.1, I see `sizeof(S)` is always 24. And the disassembly of the `ToTuple` methods is exactly the same, which shows that the fields have the same offsets:\r\n\r\n```asm\r\n; ToTuple(AutoS)\r\nsub         rsp,18h  \r\nxor         eax,eax  \r\nlea         r8,[rsp+8]  \r\nxorpd       xmm0,xmm0  \r\nmovdqu      xmmword ptr [r8],xmm0  \r\nmovsx       rax,word ptr [rdx]  \r\nmovsx       r8,word ptr [rdx+2]  \r\nmovsx       r9,word ptr [rdx+4]  \r\nmov         r10,qword ptr [rdx+10h]  \r\nmovsx       rdx,word ptr [rdx+8]  \r\nmov         word ptr [rsp+8],ax  \r\nmov         word ptr [rsp+0Ah],r8w  \r\nmov         word ptr [rsp+0Ch],r9w  \r\nlea         rax,[rsp+10h]  \r\nmov         qword ptr [rax],r10  \r\nmov         word ptr [rsp+0Eh],dx  \r\nmovdqu      xmm0,xmmword ptr [rsp+8]  \r\nmovdqu      xmmword ptr [rcx],xmm0  \r\nmov         rax,rcx  \r\nadd         rsp,18h  \r\nret  \r\n\r\n; ToTuple(SequentialS)\r\nsub         rsp,18h  \r\nxor         eax,eax  \r\nlea         r8,[rsp+8]  \r\nxorpd       xmm0,xmm0  \r\nmovdqu      xmmword ptr [r8],xmm0  \r\nmovsx       rax,word ptr [rdx]  \r\nmovsx       r8,word ptr [rdx+2]  \r\nmovsx       r9,word ptr [rdx+4]  \r\nmov         r10,qword ptr [rdx+10h]  \r\nmovsx       rdx,word ptr [rdx+8]  \r\nmov         word ptr [rsp+8],ax  \r\nmov         word ptr [rsp+0Ah],r8w  \r\nmov         word ptr [rsp+0Ch],r9w  \r\nlea         rax,[rsp+10h]  \r\nmov         qword ptr [rax],r10  \r\nmov         word ptr [rsp+0Eh],dx  \r\nmovdqu      xmm0,xmmword ptr [rsp+8]  \r\nmovdqu      xmmword ptr [rcx],xmm0  \r\nmov         rax,rcx  \r\nadd         rsp,18h  \r\nret  \r\n```\r\n\r\nAlso, how would accessing the `_dateTimeOffset` by `ref` work?",
                                           "updatedAt":  "2017-04-14T16:40:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5NDE5NDQ3OA==",
                                           "createdAt":  "2017-04-14T17:16:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@svick, it appears that netcore and netfx have different behaviors here 😄 ",
                                           "updatedAt":  "2017-04-14T17:16:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5NDIwMzA3NQ==",
                                           "createdAt":  "2017-04-14T17:59:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@tannergooding I see the same behavior on .Net Framework 4.6.2.",
                                           "updatedAt":  "2017-04-14T17:59:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODQ5OTc1Mw==",
                                           "createdAt":  "2018-01-18T00:47:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@tannergooding @svick did it become clear whether this and dotnet/runtime#7719 should actually be done or not? ",
                                           "updatedAt":  "2018-01-18T00:47:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1OTk3Nzk2OQ==",
                                           "createdAt":  "2018-01-24T00:22:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@danmosemsft I\u0027m not sure I\u0027m the right person to ask, but:\r\n\r\n* I haven\u0027t seen any evidence this would cause a break or inefficiency.\r\n* It will become useful when/if `blittable` makes it into C# (in version 7.3?). \r\n\r\nSo, I think it makes sense to do it.",
                                           "updatedAt":  "2018-01-24T00:22:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1OTk4MTIzMg==",
                                           "createdAt":  "2018-01-24T00:40:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@jkotas do you see any issue with removing Auto from DateTime and DateTimeOffset?",
                                           "updatedAt":  "2018-01-24T00:40:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1OTk4MjExNg==",
                                           "createdAt":  "2018-01-24T00:45:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We should understand whether it is a potential breaking change for interop or not. It is not clear to me from the above whether it is the case.",
                                           "updatedAt":  "2018-01-24T00:50:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MjA4NDAxNQ==",
                                           "createdAt":  "2019-10-15T07:44:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Are DateTime and DateTimeOffset even supposed to be blittable? That would expose their internals.",
                                           "updatedAt":  "2019-10-15T07:44:40Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Remove StructLayout LayoutKind.Auto from DateTimeOffset",
        "labels":  [
                       "enhancement",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/8161",
        "createdAt":  "2017-05-19T23:32:44Z",
        "number":  8161,
        "author":  "ViktorHofer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T02:00:47Z",
        "body":  "Applies to both netfx and corefx.\r\n\r\nNetfx: https://referencesource.microsoft.com/#mscorlib/system/timezoneinfo.cs,3066\r\nCore: https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/TimeZoneInfo.AdjustmentRule.cs#L46\r\n\r\n## Repro\r\n```\r\nvar a = TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(new DateTime(1900, 1, 1), \r\n    new DateTime(1955, 12, 31),\r\n    TimeSpan.FromHours(2), \r\n    TimeZoneInfo.TransitionTime.CreateFixedDateRule(new DateTime(1, 1, 1, 2, 0, 0), 2, 3), \r\n    TimeZoneInfo.TransitionTime.CreateFixedDateRule(new DateTime(1, 1, 1, 2, 0, 0), 3, 4));\r\n\r\nvar b = TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(new DateTime(1900, 1, 1), \r\n    new DateTime(1955, 12, 31),\r\n    TimeSpan.FromHours(2), \r\n    TimeZoneInfo.TransitionTime.CreateFixedDateRule(new DateTime(1, 1, 1, 2, 0, 0), 2, 3), \r\n    TimeZoneInfo.TransitionTime.CreateFixedDateRule(new DateTime(1, 1, 1, 2, 0, 0), 3, 4));\r\n\r\nConsole.WriteLine(\"ReferenceEquals: \" + ReferenceEquals(a, b)); // false\r\nConsole.WriteLine(\"a == null: \" + (a == null)); // false\r\nConsole.WriteLine(\"b == null: \" + (b == null)); // false\r\nConsole.WriteLine(\"a == b: \" + (a == b)); // false\r\nConsole.WriteLine(\"a.equals(b): \" + a.Equals(b)); // true\r\nConsole.WriteLine(\"Object.Equals: \" + Object.Equals(a, b)); // false\r\n```\r\n\r\ncc @danmosemsft ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOEhdhwA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMzUxNzM2Mw==",
                                           "createdAt":  "2017-05-23T20:09:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "cc @stephentoub ",
                                           "updatedAt":  "2017-05-23T20:09:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMzUxNzgxNw==",
                                           "createdAt":  "2017-05-23T20:11:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@tarekgh?",
                                           "updatedAt":  "2017-05-23T20:11:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMzUyMjI0MA==",
                                           "createdAt":  "2017-05-23T20:29:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I think this will apply to many types and not just AdjustmentRule. I would hesitate to change anything in TZ in general before we figure out the plans for the other requests. there is a possibility we deprecate AdjustmentRule for the sake more fixable way in handling TZ and its rules.  ",
                                           "updatedAt":  "2017-05-23T20:29:05Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "System.TimeZoneInfo.AdjustmentRule is missing object.Equals(object) override",
        "labels":  [
                       "bug",
                       "enhancement",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/24121",
        "createdAt":  "2017-11-13T18:53:33Z",
        "number":  24121,
        "author":  "mattjohnsonpint",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCOYQJA==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "HalidCisse",
                                            "createdAt":  "2022-02-13T08:04:02Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-11-22T01:59:37Z",
        "body":  "It is still very common to see developers using the `ToShortDateString`,  `ToShortTimeString`, `ToLongDateString`, and `ToLongTimeString` methods on the `DateTime` struct.  However, there are no corresponding methods on the `DateTimeOffset` struct, and there probably should be, for consistency.  This also aids developers who may not be completely familiar with the various string format specifiers.\r\n\r\nAdditionally, I think it\u0027s not completely obvious that the culture is `CultureInfo.CurrentCulture` unless explicitly specified.  IMHO, it would make sense to have invariant forms of these methods.\r\n\r\nLastly, the invariant form is not the ISO standard year-month-day, but rather the US month-day-year, which is nonsortable.  IMHO, it would make sense to have ISO forms of both the date methods and for date-time.\r\n\r\nThe intent is to improve reliability, by making it crystal clear to developers which format they are getting, such that they don\u0027t wind up writing in bugs because they didn\u0027t think too much about dates.  (very common)\r\n\r\n## Proposed API\r\n```diff\r\nnamespace System {\r\n     public struct DateTimeOffset {\r\n+        public static string ToShortDateString();\r\n+        public static string ToShortTimeString();\r\n+        public static string ToLongDateString();\r\n+        public static string ToLongTimeString();\r\n+        public static string ToShortDateInvariantString();\r\n+        public static string ToShortTimeInvariantString();\r\n+        public static string ToLongDateInvariantString();\r\n+        public static string ToLongTimeInvariantString();\r\n+        public static string ToISODateString();\r\n+        public static string ToISOString();\r\n     }\r\n     public struct DateTime {\r\n+        public static string ToShortDateInvariantString();\r\n+        public static string ToShortTimeInvariantString();\r\n+        public static string ToLongDateInvariantString();\r\n+        public static string ToLongTimeInvariantString();\r\n+        public static string ToISODateString();\r\n+        public static string ToISOString();\r\n     }\r\n}\r\n```\r\n\r\n## Example Usage\r\n```csharp\r\nDateTimeOffset dto = new DateTimeOffset(2017, 7, 4, 1, 59, 59, 59, TimeSpan.Zero);\r\n\r\nstring s = dto.ToShortDateString();             // \"7/4/2017\" (en-US)  \"04/07/2017\" (en-GB)\r\nstring s = dto.ToShortTimeString();             // \"2:59 AM\" (en-US)  \"02:59\" (en-GB)\r\nstring s = dto.ToLongDateString();              // \"Tuesday, July 4, 2017\" (en-US)  \"04 July 2017\" (en-GB)\r\nstring s = dto.ToLongTimeString();              // \"2:59:59 AM\" (en-US)  \"02:59:59\" (en-GB)\r\n\r\nstring s = dto.ToShortDateInvariantString();    // \"07/04/2017\"\r\nstring s = dto.ToShortTimeInvariantString();    // \"02:59\"\r\nstring s = dto.ToLongDateInvariantString();     // \"Tuesday, July 4, 2017\"\r\nstring s = dto.ToLongTimeInvariantString();     // \"02:59:59\"\r\n\r\nstring s = dto.ToISODateString();               // \"2017-07-04\"\r\nstring s = dto.ToISOString();                   // \"2017-07-04T01:59:59+00:00\"\r\n\r\n\r\nDateTime dt = new DateTime(2017, 7, 4, 2, 59, 59, 59, DateTimeKind.Utc);\r\n\r\nstring s = dt.ToShortDateInvariantString();     // \"07/04/2017\"\r\nstring s = dt.ToShortTimeInvariantString();     // \"02:59\"\r\nstring s = dt.ToLongDateInvariantString();      // \"Tuesday, July 4, 2017\"\r\nstring s = dt.ToLongTimeInvariantString();      // \"02:59:59\"\r\n\r\nstring s = dt.ToISODateString();                // \"2017-07-04\"\r\nstring s = dt.ToISOString();                    // \"2017-07-04T01:59:59Z\"\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOFKJqtw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NjE4MTgwNw==",
                                           "createdAt":  "2017-11-21T22:26:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "cc: @tarekgh ",
                                           "updatedAt":  "2017-11-21T22:26:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0NjE4ODQ3MQ==",
                                           "createdAt":  "2017-11-21T22:55:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "From my experience, I am seeing the majority of people using DateTime for formatting dates. DateTimeOffset not used much in such scenarios. so adding these to DateTimeOffset would be ok but I am not expecting many people is going to use it.\r\n\r\nAdding Invariant APIs (e,g, ToShortDateInvariantString) is just equivalent to DateTime.ToString(CultureInfo.InvariantCulture, \"d\"). I don\u0027t think this is hard to discover. \r\n\r\nIso APIs also is DateTime.ToString(\"o\")\r\n\r\nI don\u0027t have a strong feeling for the invariant and the Iso as I am seeing it is just aliases for other calls. in general, I am seeing these nice to have but not really important.\r\n",
                                           "updatedAt":  "2017-11-21T22:56:40Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add DateTimeOffset.To[Short/Long][Date/Time]String, include invariant and ISO forms",
        "labels":  [
                       "api-needs-work",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/24277",
        "createdAt":  "2017-11-29T21:57:27Z",
        "number":  24277,
        "author":  "custarddog",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOB-mjvA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rekkonnect",
                                            "createdAt":  "2021-10-17T11:39:22Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-11-22T01:59:38Z",
        "body":  "@vancem commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789)\n\nI thought we fixed this but I just checked and we have not, so I am logging an issue.\r\n\r\nDateTime.Now is over 10X SLOWER than DateTime.UtcNow.     \r\nI ran the the trivial program below\r\n```c#\r\n            var start = DateTime.Now;\r\n            while ((DateTime.Now-start).TotalSeconds \u003c 5)\r\n            {\r\n\r\n            }\r\n```\r\nwhile profiling with [PerfView](https://github.com/Microsoft/perfview)  to get the following data\r\n\r\nName | Inc % | Inc\r\n-- | -- | --\r\n\\|\\|    \\|+ system.private.corelib!System.DateTime.get_Now() | 95.4 | 4,832\r\n\\|\\|    \\| + system.private.corelib!TimeZoneInfo.GetDateTimeNowUtcOffsetFromUtc | 88.1 | 4,462\r\n\\|\\|    \\| + system.private.corelib!System.DateTime.get_UtcNow() | 5.8 | 293\r\n\r\nwhich show that only 6% of time is spent actually fetching the time, and 95% of the time was figuring out what time zone we are in.  \r\n\r\nThis mapping from Utc time to local time could be cached and all the inefficiency removed.  \r\n\r\nThis is important because people DO use DateTIme.Now to measure the durations of fast things (in fact we improved DateTime.UtcNow so that it has a accuracy of \u003c 1msec).    Currently we tell people to avoid DateTime.Now (use DateTime.UtcNow), to avoid this inefficiency, but we could easily make DateTIme.Now almost the same cost \r\n\r\nThis is only a small amount of work, we should just do it. \r\n\r\n@danmosemsft , @karelz \r\n\n\n---\n\n@mikedn commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-327262909)\n\n\u003e Currently we tell people to avoid DateTime.Now (use DateTime.UtcNow), to avoid this inefficiency\r\n\r\nI don\u0027t know about others but I avoid `DateTime.Now` not because it\u0027s inefficient but because it is plain wrong to use it to measure durations. Or more generally, to use it for anything that doesn\u0027t involve displaying the local time to the user...\r\n\r\nLet\u0027s keep `DateTime.Now` slow to encourage devs to do the right thing 😁\n\n---\n\n@karelz commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-327279813)\n\nMarking as up-for-grabs.\r\nModerate cost (as it requires perf measurements before and after the change)\n\n---\n\n@danmosemsft commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-327292376)\n\n\u003e mapping from Utc time to local time could be cached\r\n\r\nOf course, daylight savings could begin one second from now so it presumably can\u0027t be trivially cached. @tarekgh is there a way that DateTime can be told when the local time offset changes, instead of asking each call? I\u0027m sure there has been thinking about this in the past.\n\n---\n\n@tarekgh commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-327297374)\n\n\u003e is there a way that DateTime can be told when the local time offset changes\r\n\r\nNo, we don\u0027t have a way to know that. We looked before, and the way you can know that (on Windows) is either you have a Window and listen to some window message or you use WinRT API. Obviously, both are not a good solution for us. \r\n\r\nAlso, it is difficult to know if we are passing the daylight saving at any moment to know we need to adjust the calculation (or the cache). \r\n\r\nWe already have some optimization here:\r\nhttp://source.dot.net/#System.Private.CoreLib/src/System/TimeZoneInfo.Win32.cs,50\r\n\r\nbut we still doing the calculations here:\r\nhttp://source.dot.net/#System.Private.CoreLib/src/System/TimeZoneInfo.Win32.cs,402\r\n\r\nbecause of we cannot know if we crossed the daylight or not. \r\n\r\nby the way, the optimization we have there has a bug. that can tell when trying to optimize, you can run into some other problems. \r\n\r\n\r\n\r\n\n\n---\n\n@vancem commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-327306683)\n\nOn the caching issue:   It seems to me that when you calculate daylight savings time, you can also know when it will change (at worst you probe say 4 hours into the future and see if it is different, since you know that daylight savings time only happens 2 a year, if you get the same number for now and 4 hours from now, you can know that for the next 4 hours it will not change).     The next time you want Now you can then just check if the time is in the \u0027known\u0027 region and if so use the cached DST value.\r\n\r\n@mikedn - yes, arguably DateTime.Now is bad for computing deltas  (since any time you cross DST, you get a weird value).   However giving bad perf does not actually change behavior, it just makes their code that much worse.    There are also correct usages (when you just want a timestamp).    The bottom line is that if people use it at all frequently (and we have evidence that they do), it is worth optimizing.  \n\n---\n\n@tarekgh commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-327316508)\n\n@vancem yes, in general, I agree there is a way we can optimize. we just want to be careful to not affect the functionality and not have a complex solution. \r\n\r\nTo mention, instead of probing for some time (4 hours in your example) we can just calculate the exact time we are going to switch the daylight when we create the cache. and then we always check against this time to know if we need to update the cache or just use the cached offset.\n\n---\n\n@danmosemsft commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-327320861)\n\nIf the machine time zone changes, do we need to listen to that? \n\n---\n\n@tarekgh commented on [Tue Sep 05 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-327322383)\n\n\u003e If the machine time zone changes, do we need to listen to that?\r\n\r\nSame answer:\r\n\r\n```\r\nNo, we don\u0027t have a way to know that. We looked before, and the way you can know that (on Windows) is either you have a Window and listen to some window message or you use WinRT API. Obviously, both are not a good solution for us.\r\n```\r\n\r\nToday we ask the apps to listen to the TZ changes on the machine and then call us to clear the cache. \n\n---\n\n@danmosemsft commented on [Wed Nov 29 2017](https://github.com/dotnet/coreclr/issues/13789#issuecomment-348010037)\n\nMoving to CoreFX to track more easily.\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOK9QHKQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0ODAxMDY0Ng==",
                                           "createdAt":  "2017-11-29T21:59:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "We should do some investigation to see whether we can do this without making DateTime.Now less reliable. As @tarekgh points out, it already relies on cached data, is there more that can be safely cached?",
                                           "updatedAt":  "2017-11-29T21:59:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0ODAxMTgyMA==",
                                           "createdAt":  "2017-11-29T22:03:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@vancem idea mentioned above should work to make it more performant. Just need to be careful we\u0027ll not regress any functionality. ",
                                           "updatedAt":  "2017-11-29T22:03:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0ODAzMjM2Nw==",
                                           "createdAt":  "2017-11-29T23:32:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PeterSmithRedmond",
                                           "body":  "I just checked the documentation which says:\r\nThe Now property is frequently used to measure performance. However, because of its low resolution, it is not suitable for use as a benchmarking tool. A better alternative is to use the **Stopwatch** class.\r\n\r\nCertainly there\u0027s not even a hint that this API is slower than the UtcNow value.  Those of us who have been programming for a while remember that the old real-time clock chips on IBM PCs only returned \"local\" time and never UTC time, and consequently the .Now would be expected to be faster than UtcNow because the localtime would not have to look up the local time zone.\r\n\r\n(https://docs.microsoft.com/en-us/dotnet/api/system.datetime.now?view=netcore-2.0)",
                                           "updatedAt":  "2017-11-29T23:32:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0ODAzMzM3OQ==",
                                           "createdAt":  "2017-11-29T23:37:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e the old real-time clock chips on IBM PCs only returned \"local\" time and never UTC time,\r\n\r\nThis will make me wonder how the chip knows when to start/end the daylight saving? \r\n",
                                           "updatedAt":  "2017-11-29T23:37:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0ODAzNDU0Mw==",
                                           "createdAt":  "2017-11-29T23:43:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAQU_DA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikedn",
                                                                               "createdAt":  "2017-12-06T09:01:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2017-12-10T02:11:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003eCurrently we tell people to avoid DateTime.Now (use DateTime.UtcNow), to avoid this inefficiency, but we could easily make DateTIme.Now almost the same cost.\r\n\r\nNo, currently we tell them to avoid `DateTime.Now` because it\u0027s almost certainly _the wrong thing_.  Any efficiencies are side effects.\r\n\r\n\u003eI just checked the documentation which says:\r\nThe Now property is frequently used to measure performance. However, because of its low resolution, it is not suitable for use as a benchmarking tool. A better alternative is to use the Stopwatch class.\r\n\r\nExcept **resolution is not speed**.  That particular gem is likely from before we switched to using a more precise method in corefx (not sure about status on the full framework). \r\n\r\n\u003eThose of us who have been programming for a while remember that the old real-time clock chips on IBM PCs only returned \"local\" time and never UTC time, and consequently the .Now would be expected to be faster than UtcNow because the localtime would not have to look up the local time zone.\r\n\r\n...which is a strange thing to have to worry about, I think, since you don\u0027t want to rely on any \u0027local time\u0027 shenanigans.\r\n\r\n\u003eThis will make me wonder how the chip knows when to start/end the daylight?\r\n\r\nIn many cases they probably didn\u0027t.  If it was a consumer machine you might be expected to set the clock yourself, like it was another appliance.  \r\nWhich is why I tend to think the \"Set the server timezone to UTC\" became such a thing: to avoid such a hassle.  If you\u0027re writing your software correctly, the timezone of the box should be a nonissue.",
                                           "updatedAt":  "2017-11-29T23:43:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0OTU3NjA5OA==",
                                           "createdAt":  "2017-12-06T08:59:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAb2Usw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikedn",
                                                                               "createdAt":  "2017-12-06T09:01:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2017-12-10T02:11:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joshfree",
                                                                               "createdAt":  "2018-09-10T19:25:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "I agree with @Clockwork-Muse. What\u0027s the motivation for this work item? Of the vanishingly small number of people who profile their applications and see that `DateTime.Now` is a bottleneck, the easy solution for them is to change the code to instead call `DateTime.UtcNow`, _which is almost certainly the right thing for them to have done from the start anyway_.\r\n\r\nEdit: I saw the comments above about when developers just want a timestamp, such as for logging purposes. I\u0027ve worked on and profiled real-world services, including services that write to logs frequently. `DateTime.Now` never registered so much as a blip on those profiles.",
                                           "updatedAt":  "2017-12-06T09:04:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0OTcwMjY0MA==",
                                           "createdAt":  "2017-12-06T16:52:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "...of course, part of the overall problem is that, really, you don\u0027t want to be logging in UTC either (which still has a timezone attached - namely, UTC).  You want an \"absolute\" stamp, which is an [`Instant`](https://nodatime.org/2.2.x/api/NodaTime.Instant.html) (which, granted, for historical and readability/roundtripping reasons, is usually **serialized** in UTC).  \r\nBecause if I have a `DateTime` (or whatever) with a UTC zone.... did you get the \u0027local\u0027 zone of the machine or user (and is the fact you have a zone important), or are you trying to represent an invariant/\"absolute\" stamp, and the zone can be ignored?  This is something of a fine distinction, however, and not something the general C# ecosystem pays attention to right now.",
                                           "updatedAt":  "2017-12-06T16:52:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxOTc0MDgyNA==",
                                           "createdAt":  "2018-09-09T19:58:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MV10",
                                           "body":  "@Clockwork-Muse UTC is not a timezone, UTC is a time _standard_. UTC is the time without any timezone applied. Timezones are relative to UTC, so using UTC shouldn\u0027t preclude also carrying timezone information, which is why everyone should use `DateTimeOffset`. GMT is the zero-offset timezone. It\u0027s a fine distinction but the ability to separately track a timezone offset (hence the name) is one of the reasons `DateTimeOffset` doesn\u0027t have the problems that `DateTime` has dragged around for all these years for compatibility reasons. Somebody blogged about this on MSDN [here](https://blogs.msdn.microsoft.com/davidrickard/2012/04/06/datetime-and-datetimeoffset-in-net-good-practices-and-common-pitfalls/) in some detail years ago, it\u0027s worth reading.\r\n\r\nI actually came here from a search while trying to figure out whether `DateTimeOffset` uses the same high-res source as `DateTime.UtcNow` has been changed to use. I wasn\u0027t going to post but now that I have -- does anyone know? I\u0027m doing high-frequency logging and would like the highest resolution timestamps possible. My logs use `DateTimeOffset.UtcNow` but it isn\u0027t clear where that\u0027s sourced.",
                                           "updatedAt":  "2018-09-09T19:58:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxOTc0MTI0NA==",
                                           "createdAt":  "2018-09-09T20:04:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAbzE8g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MV10",
                                                                               "createdAt":  "2018-09-09T20:52:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "svick",
                                           "body":  "@MV10\r\n\r\n\u003e I actually came here from a search while trying to figure out whether `DateTimeOffset` uses the same high-res source as `DateTime.UtcNow` has been changed to use. I wasn\u0027t going to post but now that I have -- does anyone know?\r\n\r\nYou can look at the source. On both [.Net Core](https://source.dot.net/#System.Private.CoreLib/shared/System/DateTimeOffset.cs,04abe0cac293ebd0) and [.Net Framework](https://referencesource.microsoft.com/#mscorlib/system/datetimeoffset.cs,04abe0cac293ebd0) it\u0027s:\r\n\r\n```c#\r\nstatic DateTimeOffset UtcNow\r\n{\r\n    get\r\n    {\r\n        return new DateTimeOffset(DateTime.UtcNow);\r\n    }\r\n}\r\n```\r\n\r\nThis means `DateTimeOffset.UtcNow` has the same resolution as `DateTime.UtcNow`.",
                                           "updatedAt":  "2018-09-09T20:05:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxOTc0NDIzNg==",
                                           "createdAt":  "2018-09-09T20:52:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAb1msg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2018-09-10T15:48:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MV10",
                                           "body":  "Some days I\u0027m still not used to the source actually being available. 😀 ",
                                           "updatedAt":  "2018-09-09T20:52:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxOTc0OTkyMw==",
                                           "createdAt":  "2018-09-09T22:33:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "@MV10 -\r\nAs it\u0027s commonly referenced, it\u0027s both.  Yes, formally it\u0027s only a time standard, but if we translate to/from ticks then it acts as a zero-offset time zone as well.\r\n\r\nAnd GMT is in the same boat, essentially.  And it would only be _one of_ the zero offset time zones.\r\n\r\n\r\n`DateTime`s primary problem is `DateTimeKind`.  If that had never been added, we\u0027d have a nice local-only type.  And even though `DateTimeOffset` avoided that, it still has issues: Most people really want a `DateTimeZoned`, because only having an offset loses some important information.\r\n\r\n\r\n",
                                           "updatedAt":  "2018-09-09T22:33:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxOTk2MzM0Ng==",
                                           "createdAt":  "2018-09-10T15:52:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e Of the vanishingly small number of people who profile their applications and see that DateTime.Now is a bottleneck, the easy solution for them is to change the code to instead call DateTime.UtcNow, which is almost certainly the right thing for them to have done from the start anyway.\r\n\r\nGenerally speaking of course we can\u0027t necessarily assume that the owner of the app profiles their code, or even can control the code (it might be in a library). It would also be nice if they didn\u0027t have to because they didn\u0027t have a perf issue in the first place. That isn\u0027t to say necessarily this particular API is worth optimizing, but I\u0027ve seen it in enough profiles I\u0027ve done to have a pretty good guess that it\u0027s worthwhile to optimize, if it is technically reasonable to do so. I think this is essentially what @vancem is saying in the top post.",
                                           "updatedAt":  "2018-09-10T15:52:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxOTk4MzI2Mg==",
                                           "createdAt":  "2018-09-10T16:53:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "@danmosemsft - \r\nSo we\u0027re speeding up an API, the use of which (for this scenario) can lead to wrong results occasionally?  If DST happens, they\u0027re going to get some strange reports...",
                                           "updatedAt":  "2018-09-10T16:53:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQxOTk4NzU3OA==",
                                           "createdAt":  "2018-09-10T17:07:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@Clockwork-Muse not necessarily - if they\u0027re using it for logging, it could be a good enough timestamp, especially if it\u0027s for human use.",
                                           "updatedAt":  "2018-09-10T17:07:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMDAwOTMwNA==",
                                           "createdAt":  "2018-09-10T18:15:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "....my naive assumption is that the logging output is going to outweigh the amount of time (heh) used to deal with the local time.  Perhaps @GrabYourPitchforks has more info, given his previous comment about that use case.\r\n\r\nMost conversation on here has been about timing loops, which would be the biggest problem.",
                                           "updatedAt":  "2018-09-10T18:15:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMDAxNTU1OQ==",
                                           "createdAt":  "2018-09-10T18:34:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MV10",
                                           "body":  "Many non-bare-bones loggers write with an async batch strategy so log output overhead isn\u0027t necessarily tied to the rate at which log entries are generated. I\u0027ve recently assumed the care-and-feeding of the Serilog SQL sink and we have some users batching many thousands of rows. Even with UtcNow it isn\u0027t uncommon to have many, many rows with identical timestamps. (We also see the UTC-loses-timezone-data confusion on a regular basis over there since we use DateTimeOffset.)",
                                           "updatedAt":  "2018-09-10T18:34:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMDMzOTU1MA==",
                                           "createdAt":  "2018-09-11T16:42:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "@MV10 - In logging, the timezone is completely irrelevant; what\u0027s relevant is something the equivalent of [Java\u0027s `Instant`](https://docs.oracle.com/javase/8/docs/api/java/time/Instant.html) (which isn\u0027t really in the UTC \"timezone\", per se).  No database really has an equivalent type, though - the best you can do on SQL Server is `DateTimeOffset` (as you appear to know), because otherwise the local/session time zone might be taken into account on retrieval.\r\n\r\nOf course, that\u0027s just a symptom of a wider problem - when it comes to date/time, the database is out to get you, some more than others.  But that\u0027s a blog post I need to write later.",
                                           "updatedAt":  "2018-09-11T16:42:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMDM1MDI2NA==",
                                           "createdAt":  "2018-09-11T17:15:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MV10",
                                           "body":  "@Clockwork-Muse That\u0027s the confusion I referred to: people think UTC is a timezone, and when they set the flag to convert to UTC, they freak out because the timezone information goes away. It\u0027s an \"education opportunity\" I guess.\r\n\r\nIt seems to me the Java-style `Instant` epoch-offset would be subject to the same accuracy/drift risks, no? Though I can certainly see why it should perform better.",
                                           "updatedAt":  "2018-09-11T17:15:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMDQ2Mjc5OQ==",
                                           "createdAt":  "2018-09-11T23:42:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "@MV10 - ...wait, what accuracy/drift risks are you talking about?\r\nAll modern OSs have a \"(fraction of) seconds since epoch\" function, which is what Java uses (and C# as well).  Note that such a count is completely ignorant of this thing called \"UTC\" and all actual timezones, it just refers to a specific point in time.\r\n\r\nNow, when you format Java\u0027s `Instant`, _by default_ it outputs UTC, since that\u0027s readable and commonly understood, but the underlying **concept** is still the numeric count.  Which, again, is not actually UTC itself, because UTC is defined in terms of years, months, etc.  You could instead output the count itself - I believe Windows log files do, normally (although Windows uses a different epoch), as well as several internet protocols.  Since we have this epoch offset, it\u0027s trivial to use it to get the point in time of the event recorded in any given timezone (in Java, via [`instant.atZone(someTimeZone)`](https://docs.oracle.com/javase/8/docs/api/java/time/Instant.html#atZone-java.time.ZoneId-)).  At no point is UTC itself involved (although certainly the then-offset must be applied).\r\n\r\nThis is the critical thing most programmers fail to actually realize, I think: UTC is almost never relevant to your problem domain.\r\n - When logging, you care about an exact point in time, not a time standard, and in almost all cases your program will be converting the logged instant into whatever the consumer timezone is for more understandable display.\r\n - When scheduling (future dates), almost none of your consumers will be in the UTC \"timezone\", and you shouldn\u0027t store scheduled dates in an unrelated timezone, or strange things happen when DST rules change (note that\u0027s the _rules_ changing, not when DST itself happens).  Those few individuals/businesses/industries that actually schedule in UTC are using it timezone-like, which means that it\u0027s a configuration change, not a compile change (The US military tends to plan things in UTC, for obvious reasons, but one could imagine some overly-patriotic general in the 60\u0027s declaring everything should be scheduled in Washington DC time....).\r\n\r\n\r\n.....aaaannnnd I\u0027m getting off topic.  If anybody wants to prod me about this, I\u0027m on gitter, I guess.\r\n\r\n",
                                           "updatedAt":  "2018-09-11T23:42:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMzAxMTcyNQ==",
                                           "createdAt":  "2018-09-20T01:41:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "@danmosemsft I suppose my experience has been different than yours. In the profiles I\u0027ve seen where `DateTime.Now` shows up in the hot path, it\u0027s always a microbenchmark or an application that\u0027s not doing anything terribly interesting. (I remember seeing this show up in Razor \"hello world\" pages in ASP.NET full framework a few years ago, but at that point we were just digging around in the dirt for a few dozen easy RPS here and there.)\r\n\r\nIf you have evidence that real-world applications running real-world workloads are actually running into this, I\u0027ll defer to you on that topic.",
                                           "updatedAt":  "2018-09-20T01:41:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQyMzAxOTY4Nw==",
                                           "createdAt":  "2018-09-20T02:30:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@grabyourpitchforks no I don\u0027t have anything useful. Maybe @vancem does based on the topmost comment.",
                                           "updatedAt":  "2018-09-20T02:30:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNDMyNDY1Ng==",
                                           "createdAt":  "2020-11-09T22:48:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "This issue has gone 2 years without activity. Closing as stale. If further discussion is warranted please reopen. Thanks!",
                                           "updatedAt":  "2020-11-09T22:48:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNTMxNTc1Mw==",
                                           "createdAt":  "2020-11-29T01:37:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Reopening as we can look at optimizing the perf for this API.",
                                           "updatedAt":  "2020-11-29T01:37:50Z"
                                       }
                                   ],
                         "totalCount":  23
                     },
        "title":  "Make DateTIme.Now as efficient as DateTime.UtcNow",
        "labels":  [
                       "enhancement",
                       "tenet-performance",
                       "help wanted",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/9364",
        "createdAt":  "2017-12-01T03:17:04Z",
        "number":  9364,
        "author":  "crozone",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC82qdw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IS-RAH",
                                            "createdAt":  "2024-03-13T09:08:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "toclan",
                                            "createdAt":  "2024-11-21T15:01:00Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2023-11-30T17:10:04Z",
        "body":  "`DateTimeParse.Parse()` (which powers `DateTime.Parse()` and `DateTimeOffset.Parse()`) currently only partially supports the ISO8601 standard. ISO8601 is heavily used in industry and having greater support for it significantly increases the usability of the `DateTime.Parse` methods.\r\n\r\nCurrently, the bits of ISO8601 that are supported are:\r\n\r\n* Sortable date/time pattern (\"s\"). **2009-06-15T13:45:30** = ISO8601 without timezone.\r\n\r\n* Round-trip date/time pattern. (\"O\"/\"o\"). **2009-06-15T13:45:30.0000000-07:00** = ISO 8601 with timezone offset.\r\n\r\nNotable formats that are currently omitted:\r\n\r\n* Dates, Times, or DateTimes without dash or colon separators: **20171201**, **123031**,  **20090615T134530+1100**\r\n\r\n* Datetimes that have a decimal fraction added to the lowest order time element when it isn\u0027t seconds:\r\n**2009-06-15T13:45.5** or **2009-06-15T13.5**\r\n\r\n* Week notation (with day): **2017-W48** or **2017-W48-4**\r\n\r\n* Ordinal date notation: **2017-001** - **2017-334**\r\n\r\n* Yearless date notation: **--10-31**, **--1031**.\r\n\r\n* Times that use a comma (\u0027,\u0027) as a decimal separator for the lowest time element. ISO8601 universally allows the use of both a comma (\u0027,\u0027) or a period (\u0027.\u0027) as a decimal separator, independent of current culture. Currently, only a period (\u0027.\u0027) is supported, regardless of the `CultureInfo.NumberFormat.NumberDecimalSeparator` provided (although both should be allowed irrespective of culture).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObVN1HQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM0ODU2OTkzNA==",
                                           "createdAt":  "2017-12-01T18:23:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mburbea",
                                           "body":  "Also of note is lacking support for `24:00:00`. Which is an alternative form of midnight. \r\nE.g. `2009-06-15T24:00:00Z` currently throws an exception.",
                                           "updatedAt":  "2017-12-01T18:23:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XyBYK",
                                           "createdAt":  "2023-03-16T20:59:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "niemyjski",
                                           "body":  "+1",
                                           "updatedAt":  "2023-03-16T20:59:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5csG7r",
                                           "createdAt":  "2023-05-19T18:24:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BellBat",
                                           "body":  "+1",
                                           "updatedAt":  "2023-05-19T18:24:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5csUHV",
                                           "createdAt":  "2023-05-19T19:14:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "for folks doing +1 .. it would probably be helpful if you could describe your use cases.",
                                           "updatedAt":  "2023-05-19T19:14:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cs0ia",
                                           "createdAt":  "2023-05-19T21:09:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "niemyjski",
                                           "body":  "Our use case is to support the spec and to have interop with external systems.",
                                           "updatedAt":  "2023-05-19T21:09:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cs4xG",
                                           "createdAt":  "2023-05-19T21:26:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "What sorts of systems? (Completely appreciate what you\u0027re saying, but for proposals like this, it\u0027s about pulling together supporting data.)",
                                           "updatedAt":  "2023-05-19T21:26:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c0EW5",
                                           "createdAt":  "2023-05-22T12:42:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "niemyjski",
                                           "body":  "I handle importing data from many third-party systems as well as listening to internal systems via kafka where we handle short dates (time only). A lot of educational type systems use the prefixes as mentioned above. In other apps you can have date-based invoices. The more support for the standard the better!",
                                           "updatedAt":  "2023-05-22T12:42:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5slT4b",
                                           "createdAt":  "2023-11-21T21:30:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TonyValenti",
                                           "body":  "I could really use this.  I interact with a lot of JSON APIs and I\u0027m running into a lot of issues interacting with Python APIs that use proper DateTimeOffset values.\r\n",
                                           "updatedAt":  "2023-11-21T21:30:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tU3Ud",
                                           "createdAt":  "2023-11-30T17:09:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "If this gets implemented, the corresponding implementations in the `Utf8Parser`, `IParsable\u003cT\u003e` and `IUtf8SpanParsable\u003cT\u003e` should be updated as well.",
                                           "updatedAt":  "2023-11-30T17:10:04Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "DateTimeParse.Parse lacks full ISO8601 support",
        "labels":  [
                       "enhancement",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/24839",
        "createdAt":  "2018-01-30T05:45:55Z",
        "number":  24839,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-18T22:27:08Z",
        "body":  "Repro (windows subsystem for Linux):\r\n- Create console app that does `Console.WriteLine(DateTime.Now)`\r\n- Publish it\r\n- Run it\r\n\r\nResult: The app takes 1.5s to run. 1 second out of that is time spent inside DateTime.Now",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOGE_mqw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MTQ4NDU5Mw==",
                                           "createdAt":  "2018-01-30T05:50:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The problem is that the TimeZoneInfo implementation ends up reading all timezones on the system. There is a lot of them and when it is combined with slower I/O of WSL, it takes 1 second to do it all.\r\n\r\nWe should look into making this more efficient - e.g. read all timezones only when it is actually required; or not read them at all.",
                                           "updatedAt":  "2018-01-30T05:50:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MTQ5NTU3NQ==",
                                           "createdAt":  "2018-01-30T07:01:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This affects other Linux distributions as well, not just WSL.",
                                           "updatedAt":  "2018-01-30T07:01:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MTc2NzYyOA==",
                                           "createdAt":  "2018-01-30T23:16:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @eerhardt ",
                                           "updatedAt":  "2018-01-30T23:16:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MTc3MDU2MQ==",
                                           "createdAt":  "2018-01-30T23:30:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@jkotas - I don\u0027t have WSL set up on my machine, but can you answer a few questions?\r\n\r\nNormally (or at least on my Ubuntu machine), `/etc/localtime` is a symlink to a zoneinfo file.  Can you `readlink /etc/localtime` and tell me the results?\r\n\r\nI am assuming the reason it is slow is because `TryGetLocalTzFile` is trying to get the timezone ID, and it is failing to get the ID using `readlink`, so it falls back to scanning the `/usr/share/zoneinfo` folder for a matching timezone file.\r\n\r\nAnother possibility is that the `TZ` environment variable is set to an absolute path, and the ID can\u0027t be discerned from that path.",
                                           "updatedAt":  "2018-01-30T23:32:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MTc3MTY1NQ==",
                                           "createdAt":  "2018-01-30T23:35:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Can you readlink `/etc/localtime` and tell me the results?\r\n\r\nRight - it is not a symlink. @wfurt could you please comment on what other distros have this as a file, and not symlink?\r\n\r\n\u003e it falls back to scanning the /usr/share/zoneinfo folder for a matching timezone file.\r\n\r\nRight. The code needs to figure out the timezone id just to make some internal implementation detail plumbing happy. Can we delay this until after somebody actually asks about the timezone id?",
                                           "updatedAt":  "2018-01-30T23:35:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MTc3MjAyMQ==",
                                           "createdAt":  "2018-01-30T23:37:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e I don\u0027t have WSL set up on my machine, but can you answer a few questions?\r\n\r\nBTW: It is very easy to install it. One powershell command and a few mouse clicks: https://docs.microsoft.com/en-us/windows/wsl/install-win10",
                                           "updatedAt":  "2018-01-30T23:37:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MTc3NDgwMg==",
                                           "createdAt":  "2018-01-30T23:51:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "The symlink is convenience and it does not need to exist (so as all the zones under /usr/share)\r\nThe file it self has POSIX name in it and that is all what matters for time calculations. \r\n\r\nI would be primarily concern about embedded distros like Yocto or Alpine. \r\n\r\nBTW The CompareTimeZoneFile() can do fstat() (cheap) first and move on if file size is different.\r\nThat can save on creating stream and reading any data.\r\n\r\n\r\n```\r\nfind /usr/share/zoneinfo/ -type f | xargs ls -al\r\n-r--r--r--  1 root  wheel    199 Sep 28  2016 /usr/share/zoneinfo/Pacific/Guam\r\n-r--r--r--  1 root  wheel    250 Sep 28  2016 /usr/share/zoneinfo/Pacific/Honolulu\r\n-r--r--r--  1 root  wheel    250 Sep 28  2016 /usr/share/zoneinfo/Pacific/Johnston\r\n-r--r--r--  1 root  wheel    204 Sep 28  2016 /usr/share/zoneinfo/Pacific/Kiritimati\r\n-r--r--r--  1 root  wheel    204 Sep 28  2016 /usr/share/zoneinfo/Pacific/Kosrae\r\n-r--r--r--  1 root  wheel    211 Sep 28  2016 /usr/share/zoneinfo/Pacific/Kwajalein\r\n-r--r--r--  1 root  wheel    171 Sep 28  2016 /usr/share/zoneinfo/Pacific/Majuro\r\n-r--r--r--  1 root  wheel    162 Sep 28  2016 /usr/share/zoneinfo/Pacific/Marquesas\r\n-r--r--r--  1 root  wheel    250 Sep 28  2016 /usr/share/zoneinfo/Pacific/Midway\r\n-r--r--r--  1 root  wheel    240 Sep 28  2016 /usr/share/zoneinfo/Pacific/Nauru\r\n-r--r--r--  1 root  wheel    200 Sep 28  2016 /usr/share/zoneinfo/Pacific/Niue\r\n-r--r--r--  1 root  wheel    263 Sep 28  2016 /usr/share/zoneinfo/Pacific/Norfolk  \r\n\r\n```\r\n\r\n\r\n",
                                           "updatedAt":  "2018-01-30T23:51:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MTc3NDgyOQ==",
                                           "createdAt":  "2018-01-30T23:51:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "To fix just `DateTime.Now`, we could change\r\n\r\nhttps://github.com/dotnet/coreclr/blob/7ab27c46cfca8b2a751316d82ea864267d1fcda4/src/mscorlib/shared/System/TimeZoneInfo.Unix.cs#L689\r\n\r\nto not use the `TimeZoneInfo.Local` property, and instead mimic closer to what we do on Windows - create and cache a private local TimeZoneInfo that isn\u0027t exposed anywhere.  We could just use the hard-coded `\"Local\"` value for the ID.\r\n\r\nThis wouldn\u0027t solve it for other code using `TimeZoneInfo.Local`, but it would solve it just for the `DateTime.Now` case - which is more often used.\r\n\r\nAnother thought would be to update the [ID finding code](https://github.com/dotnet/coreclr/blob/7ab27c46cfca8b2a751316d82ea864267d1fcda4/src/mscorlib/shared/System/TimeZoneInfo.Unix.cs#L360-L365) to also check if `tzFilePath` is under `GetTimeZoneDirectory()`, and use the relative path under it as the ID.\r\n\r\nThese two changes can be done independently.",
                                           "updatedAt":  "2018-01-30T23:51:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MTc3NTEzMg==",
                                           "createdAt":  "2018-01-30T23:53:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "BTW FreeBSD does not have symlink\r\n\r\n[furt@toweinfu-d11 ~]$ ls -al /etc/localtime\r\n-r--r--r--  1 root  wheel  2819 Sep 27 08:37 /etc/localtime\r\n\r\nOSX does\r\nmacik:~ furt$ ls -al /etc/localtime\r\nlrwxr-xr-x  1 root  wheel  39 Nov 27 06:30 /etc/localtime -\u003e /usr/share/zoneinfo/America/Los_Angeles\r\n",
                                           "updatedAt":  "2018-01-30T23:53:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MTc3NTg2Mw==",
                                           "createdAt":  "2018-01-30T23:56:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\r\n\r\nwe can possibly fall-back to Canonical name for each POSIX zone.\r\nZone mapping does not change much (unlike zone details)  ",
                                           "updatedAt":  "2018-01-30T23:56:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwNzg4OTU3OQ==",
                                           "createdAt":  "2018-07-25T20:45:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pjanotti",
                                           "body":  "Just listing a temporary workaround for WSL for anybody interested: `sudo dpkg-reconfigure tzdata` after that the symlink will be in place.",
                                           "updatedAt":  "2018-07-25T20:45:34Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "DateTime.Now takes 1 second to execute on WSL",
        "labels":  [
                       "bug",
                       "os-linux",
                       "tenet-performance",
                       "in-pr",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/25075",
        "createdAt":  "2018-02-17T10:31:46Z",
        "number":  25075,
        "author":  "Stoffelche",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0F-1Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alex-jitbit",
                                            "createdAt":  "2023-02-03T15:12:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Santas",
                                            "createdAt":  "2023-11-19T22:31:40Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-31T19:12:06Z",
        "body":  "The TimeZoneInfo methods ConvertTimeToUtc, IsAmbiguousTime and IsDayLightSavingTime popped up as eating up about half of the processing time in a program importing, converting and storing lots of data in a database, As this was quite unbelievable to me, I programmed a little converter, which did  these same conversions for our time zone \"W. Europe Standard Time\" and found it to be about 70 times as fast as the dotnet implementation.\r\nI tried to figure out what went wrong in TimeZoneInfo implementation, but it looked pretty complicated (even messed up) to me, and as I only have limited time resources thought, that someone responsible for this code should check this out instead. \r\nI know my comparison is only valid for our W.European timezone, but I think that most time zones are similarily easy to implement, so for these types of zones the dotnet code really should perform much better. Performance should really be an issue here, as time-related functionality is offen used in comination with engineering and measurment data, where converting between local timezones and UTC is very frequent, and needs to be fast.\r\nI have attached my test program and also paste it here for your convenience.\r\nStefan\r\n\r\n\r\n[Program.zip](https://github.com/dotnet/corefx/files/1733570/Program.zip)\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace TestTimeZone {\r\n\tclass MyWesternEuropeConverter {\r\n\t\tconst int YFirst = 1900;\r\n\t\tDateTime TFirst = new DateTime(YFirst, 1, 1), TLast = new DateTime(YFirst + 200, 1, 1);\r\n\t\tDateTime[] FwdTimes = new DateTime[200], BwdTimes = new DateTime[200];\r\n\t\tTimeZoneInfo RegularInfo;\r\n\t\tint StdHourDiff = 1;\r\n\t\tint HourOfChange = 2;\r\n\t\tpublic MyWesternEuropeConverter() {\r\n\t\t\tRegularInfo = TimeZoneInfo.FindSystemTimeZoneById(\"W. Europe Standard Time\");\r\n\t\t\tInitDates();\r\n\t\t}\r\n\t\tpublic DateTime ConvertTimeToUtcRegular(DateTime dt, out bool isAmbiguous, out bool isDayLightSavingTime, out bool isAllowed) {\r\n\t\t\ttry {\r\n\t\t\t\tisAmbiguous = RegularInfo.IsAmbiguousTime(dt);\r\n\t\t\t\tdt = TimeZoneInfo.ConvertTimeToUtc(dt, RegularInfo);\r\n\t\t\t\tisDayLightSavingTime = RegularInfo.IsDaylightSavingTime(dt);\r\n\t\t\t\tisAllowed = true;\r\n\t\t\t} catch {\r\n\t\t\t\tisAllowed = false;\r\n\t\t\t\tisAmbiguous = true;\r\n\t\t\t\tisDayLightSavingTime = true;\r\n\t\t\t}\r\n\t\t\treturn dt;\r\n\t\t}\r\n\t\tpublic DateTime ConvertTimeFromUtcRegular(DateTime dt) {\r\n\t\t\treturn TimeZoneInfo.ConvertTimeFromUtc(dt, RegularInfo);\r\n\t\t}\r\n\r\n\t\tpublic DateTime ConvertTimeToUtc(DateTime dt, out bool isAmbiguous, out bool isDayLightSavingTime, out bool isAllowed) {\r\n\t\t\tint yearIdx = dt.Year - YFirst;\r\n\t\t\tif (yearIdx \u003c 0 || yearIdx \u003e= 200) {\r\n\t\t\t\treturn ConvertTimeToUtcRegular(dt, out isAmbiguous, out isDayLightSavingTime, out isAllowed);\r\n\t\t\t} else {\r\n\t\t\t\tDateTime curFwd = FwdTimes[yearIdx];\r\n\t\t\t\tDateTime curBwd = BwdTimes[yearIdx];\r\n\t\t\t\tif (dt \u003c curFwd || dt \u003e= curBwd) {\r\n\t\t\t\t\tisAmbiguous = false;\r\n\t\t\t\t\tisAllowed = true;\r\n\t\t\t\t\tisDayLightSavingTime = false;\r\n\t\t\t\t\treturn new DateTime(dt.Ticks - TimeSpan.TicksPerHour * StdHourDiff, DateTimeKind.Utc);\r\n\t\t\t\t}\r\n\t\t\t\tif (dt.Ticks \u003c curFwd.Ticks + TimeSpan.TicksPerHour) {\r\n\t\t\t\t\tisAllowed = false;\r\n\t\t\t\t\tisAmbiguous = true;\r\n\t\t\t\t\tisDayLightSavingTime = true;\r\n\t\t\t\t\treturn dt; // new DateTime(dt.Ticks - TimeSpan.TicksPerHour * StdHourDiff, DateTimeKind.Utc);\r\n\t\t\t\t}\r\n\t\t\t\tisAllowed = true;\r\n\t\t\t\tisAmbiguous = dt.Ticks \u003e= curBwd.Ticks - TimeSpan.TicksPerHour;\r\n\t\t\t\tisDayLightSavingTime = !isAmbiguous;\r\n\t\t\t\treturn new DateTime(dt.Ticks - TimeSpan.TicksPerHour * (StdHourDiff + (isAmbiguous ? 0 : 1)), DateTimeKind.Utc);\r\n\t\t\t}\r\n\t\t}\r\n\t\tpublic DateTime ConvertTimeFromUtc(DateTime dt) {\r\n\t\t\tDateTime utc = new DateTime(dt.Ticks + TimeSpan.TicksPerHour * StdHourDiff, DateTimeKind.Local);\r\n\t\t\tint yearIdx = utc.Year - YFirst;\r\n\t\t\tif (yearIdx \u003c 0 || yearIdx \u003e= 200) {\r\n\t\t\t\treturn TimeZoneInfo.ConvertTimeFromUtc(dt, RegularInfo);\r\n\t\t\t}\r\n\t\t\tDateTime curFwd = FwdTimes[yearIdx];\r\n\t\t\tDateTime curBwd = BwdTimes[yearIdx];\r\n\t\t\tif (dt.Ticks \u003e= curFwd.Ticks || dt.Ticks \u003c= curBwd.Ticks - TimeSpan.TicksPerHour) dt = new DateTime(dt.Ticks + TimeSpan.TicksPerHour, DateTimeKind.Local);\r\n\t\t\treturn dt;\r\n\t\t}\r\n\t\tvoid InitDates() {\r\n\t\t\tint yFirst = TFirst.Year;\r\n\t\t\tfor (int i = 0; i \u003c FwdTimes.Length; i++) {\r\n\t\t\t\tFwdTimes[i] = GetFwdDate(yFirst + i).AddHours(HourOfChange);\r\n\t\t\t\tBwdTimes[i] = GetBwdDate(yFirst + i).AddHours(HourOfChange + 1);\r\n\t\t//\t\tSystem.Diagnostics.Trace.WriteLine(string.Format(\"{0}-{1}\", FwdTimes[i], BwdTimes[i]));\r\n\t\t\t}\r\n\t\t}\r\n\t\tDateTime GetFwdDate(int year) {\r\n\t\t\tDateTime dLast = new DateTime(year, 3, 31);\r\n\t\t\treturn dLast.AddDays(-(int)dLast.DayOfWeek);\r\n\t\t}\r\n\t\tDateTime GetBwdDate(int year) {\r\n\t\t\tDateTime dLast = new DateTime(year, 10, 31);\r\n\t\t\treturn dLast.AddDays(-(int)dLast.DayOfWeek);\r\n\t\t}\r\n\t}\r\n\r\n\tclass Program {\r\n\t\tstatic void Echo(string s) {\r\n\t\t\tSystem.Diagnostics.Trace.WriteLine(s);\r\n\t\t\tSystem.Console.WriteLine(s);\r\n\t\t}\r\n\t\tstatic string Report(DateTime t, bool isAmbiguous, bool isDayLightSaving, bool isAllowed) {\r\n\t\t\treturn string.Format(\"{0:yyyy/MM/dd/HH:mm} ambiguous:{1} dayLightSaving:{2} allowed:{3}\", t, isAmbiguous, isDayLightSaving, isAllowed);\r\n\t\t}\r\n\t\tstatic void Main(string[] args) {\r\n\t\t\tMyWesternEuropeConverter conv = new MyWesternEuropeConverter();\r\n\t\t\tTimeZoneInfo tzInfo = TimeZoneInfo.Local;\r\n\t\t\tDateTime tStart = new DateTime(1900, 1, 1);\r\n\t\t\tDateTime tEnd = new DateTime(2100, 1, 1);\r\n\t\t\tbool allowed1, allowed2, isAmbiguous1, isAmbiguous2, isDayLightSaving1, isDayLightSaving2;\r\n\t\t\tfor (DateTime tCur = tStart; tCur \u003c tEnd; tCur = tCur.AddMinutes(15)) {\r\n\t\t\t\tDateTime utc1 = conv.ConvertTimeToUtcRegular(tCur, out isAmbiguous1, out isDayLightSaving1, out allowed1);\r\n\t\t\t\tDateTime utc2 = conv.ConvertTimeToUtc(tCur, out isAmbiguous2, out isDayLightSaving2, out allowed2);\r\n\t\t\t\tif (utc1 != utc2 || isAmbiguous1 != isAmbiguous2 || isDayLightSaving1 != isDayLightSaving2 || allowed1 != allowed2)\r\n\t\t\t\t\tEcho(string.Format(\"Different: {0} {1}\", Report(utc1, isAmbiguous1, isDayLightSaving1, allowed1), Report(utc2, isAmbiguous2, isDayLightSaving2, allowed2)));\r\n\t\t\t}\r\n\t\t\tDateTime utc = DateTime.UtcNow;\r\n\t\t\tint count = 0;\r\n\t\t\tfor (DateTime tCur = tStart; tCur \u003c tEnd; tCur = tCur.AddMinutes(15)) {\r\n\t\t\t\tcount++;\r\n\t\t\t\tDateTime utc1 = conv.ConvertTimeToUtcRegular(tCur, out isAmbiguous1, out isDayLightSaving1, out allowed1);\r\n\t\t\t}\r\n\t\t\tTimeSpan tNeeded = DateTime.UtcNow - utc;\r\n\t\t\tEcho(string.Format(\"seconds needed for {0} ToUtc regular: {1}, ticks per call: {2}\", count, tNeeded.TotalSeconds,((double) tNeeded.Ticks)/count));\r\n\t\t\tutc = DateTime.UtcNow;\r\n\t\t\tcount = 0;\r\n\t\t\tfor (DateTime tCur = tStart; tCur \u003c tEnd; tCur = tCur.AddMinutes(15)) {\r\n\t\t\t\tcount++;\r\n\t\t\t\tDateTime utc2 = conv.ConvertTimeToUtc(tCur, out isAmbiguous2, out isDayLightSaving2, out allowed2);\r\n\t\t\t}\r\n\t\t\ttNeeded = DateTime.UtcNow - utc;\r\n\t\t\tEcho(string.Format(\"seconds needed for {0} ToUtc mine: {1}, ticks per call: {2}\", count, tNeeded.TotalSeconds, ((double)tNeeded.Ticks) / count));\r\n\t\t\tSystem.Console.Write(\"Ready \u003e\");\r\n\t\t\tSystem.Console.ReadKey();\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnMjm1w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43-tkf",
                                           "createdAt":  "2021-10-09T00:09:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I ran the code above and indeed:\r\n```\r\nseconds needed for 7012704 ToUtc regular: 2.4033412, ticks per call: 3.4271248294523766\r\nseconds needed for 7012704 ToUtc mine: 0.1591308, ticks per call: 0.22691789073087928\r\n```\r\n\r\n@tarekgh this code is special casing a block of years (1900-2199) for which it pre populates a cache of the daylight savings transitions (2 DateTime\u0027s per year). I guess (assuming that this logic was made robust against eg daylight savings switching \u003c\u003e 2x a year) it also incurs the cost of the cache per timezone (perhaps, you just pick one). It\u0027s clearly helpful if code is calling this a lot. Thoughts about the core libraries doing something like this?",
                                           "updatedAt":  "2021-10-09T00:09:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43-wZv",
                                           "createdAt":  "2021-10-09T01:13:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Well, creating a cache for all years inside the time zone will make it faster but the concern is the cache size for every zone. Like I know some services use many time zones in their incoming requests which will cause consuming a lot of memory for that. Also, the code here is customized to this specific zone which has a consistent daylight transition across all years (include the time of transition and what would be transition time offset). This is not the cases in all time zones. For example, Morocco time zone can have multiple transitions in the same year. and even the transition usually happens around the Lunar Ramadan month. That means the transition happen in different days and months every year. Time zone is complex thing. We can look doing some perf work there though as I believe there should be some opportunities to optimize. ",
                                           "updatedAt":  "2021-10-09T01:13:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43-xoN",
                                           "createdAt":  "2021-10-09T01:50:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Possibly we could cache just the nearest pair of transitions around the last requested date time/culture. That would help the case where the conversions are all in the current culture and approximately current datetime. (Can transition date change during process lifetime?)\r\n\r\nIt would be good to get input here to learn whether that would be useful. Cc @stoffelche in case after all this time they still have input!",
                                           "updatedAt":  "2021-10-09T01:50:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5saPIP",
                                           "createdAt":  "2023-11-20T10:52:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Santas",
                                           "body":  "+1",
                                           "updatedAt":  "2023-11-20T10:52:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hstfp",
                                           "createdAt":  "2024-08-08T21:01:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alex-jitbit",
                                           "body":  "We\u0027re also facing the same issue. Our app works in multiple timezones, and converting UTC time to/from user\u0027s local timezone is very VERY cpu-consuming, especially when DST is involved",
                                           "updatedAt":  "2024-08-08T21:01:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cojhg",
                                           "createdAt":  "2025-01-31T17:35:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alex-jitbit",
                                           "body":  "Any updates about this issue? With all the incredible performance improvements published by @stephentoub every year - I really hope timezone calculation improvements will make it there one day.\n\nBasically, every time you display a date in user-specific/company-specific timezone in a report - you call an incredibly slow method.\n\nI currently use my own caching mechanism to work this around, (cache UTC-offset by timezone ID) but it lacks DST-transition support.",
                                           "updatedAt":  "2025-02-02T00:47:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cpPbX",
                                           "createdAt":  "2025-01-31T18:39:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "We haven\u0027t looked into this yet, but it may be prioritized and addressed at some point hopefully soon.\n\n\u003e every time you display a date in user-specific/company-specific timezone in a report - you can an incredibly slow method.\n\nIs this always involving the Local time zone? I am asking to know if optimizing the Local time zone operations can help here.",
                                           "updatedAt":  "2025-01-31T18:39:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6csT0_",
                                           "createdAt":  "2025-02-01T08:50:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alex-jitbit",
                                           "body":  "@tarekgh \n\n\u003e Is this always involving the Local time zone\n\nNo. Our web app has users in all 24 time zones, datetimes are stored as UTC in the database and displayed in client\u0027s local time zone.\n\nWe have hundreds of thousands of users. And this is a wild performance bottleneck.",
                                           "updatedAt":  "2025-02-01T08:50:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ctfo6",
                                           "createdAt":  "2025-02-02T00:11:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Thanks @alex-jitbit for the information. \n\n\n",
                                           "updatedAt":  "2025-02-02T00:11:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cth2A",
                                           "createdAt":  "2025-02-02T00:38:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Is OS relevant here?",
                                           "updatedAt":  "2025-02-02T00:38:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ctiXj",
                                           "createdAt":  "2025-02-02T00:47:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Is OS relevant here?\n\nIt is a factor. On non-Windows platforms, the TZ adjustment rules count is much bigger, and we read it from the OS using the File IO operations. On Windows we get the rules from reading the registry and Windows doesn\u0027t carry the historical TZ data which reduces the rules count used there. But in all cases, we try to find the rule to use to do the time conversion matching the input date/time.",
                                           "updatedAt":  "2025-02-02T00:47:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ctpR1",
                                           "createdAt":  "2025-02-02T02:32:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEE4TMw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2025-02-02T03:26:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "It might be helpful for folks encountering this to share OS.",
                                           "updatedAt":  "2025-02-02T02:32:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cuANS",
                                           "createdAt":  "2025-02-02T08:56:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alex-jitbit",
                                           "body":  "@danmoseley tested in all OS\u0027es. We use Ubuntu on production, before that we used Windows, and we develop on Macs. I used PerfView on Windows and dotnet-trace on Ubuntu to confirm TimeZone operations are indeed a bottleneck on both.\n\nBenchmarkDotNet results (this is on M3 Mac, results on Windows Ryzen 7650X3D look similar):\n\n| Method                        | Mean      | Error     | StdDev    | Allocated |\n|------------------------------ |----------:|----------:|----------:|----------:|\n| TimeZoneInfo_ConvertTimeToUtc | 64.704 ns | 0.2887 ns | 0.2560 ns |         - |\n| CachedUtcOffset_ToUtc               |  0.3976 ns | 0.0191 ns | 0.0160 ns |         - |\n\nI basically keep a dictionary of UTC offsets for every timezone for current year.\n\n```csharp\npublic class UtcOffset\n{\n\tpublic readonly TimeSpan StandardOffset, DstOffset;\n\tpublic readonly TimeSpan DstStart, DstEnd; //store DST transition dates as timespans since year start - for performance\n\t//...rest of the code\n}\n```\n\nLooking at the (rather complicated) source [code](https://source.dot.net/#System.Private.CoreLib/src/libraries/System.Private.CoreLib/src/System/TimeZoneInfo.cs,770) I can see that .NET iterates through all adjustments rules, until it finds the correct one. And a timezone can have 150 adjustments tules. If you have a report with 50 rows and 3 date columns thats 22500 iterations total.\n\nP.S. Out of curiosity I tested NodaTime library it is also 3x faster at converting timezones. Better, but not good enough for me.",
                                           "updatedAt":  "2025-02-02T09:48:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cunDK",
                                           "createdAt":  "2025-02-02T16:35:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Thanks @alex-jitbit ",
                                           "updatedAt":  "2025-02-02T16:35:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cvCQU",
                                           "createdAt":  "2025-02-02T22:01:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e And a timezone can have 150 adjustments tules\n\nOn Windows, you shouldn\u0027t encounter that many rules.\n\n@alex-jitbit \n\nWhat range of years that the Date/time values stored in your DB? ",
                                           "updatedAt":  "2025-02-02T22:01:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cvdm7",
                                           "createdAt":  "2025-02-03T01:15:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alex-jitbit",
                                           "body":  "@tarekgh I\u0027m not on Windows though. It\u0027s Ubuntu (prod) \u0026 MacOS (dev)\n\nRange of years is \"current year +/- couple of years back and forth\"",
                                           "updatedAt":  "2025-02-03T01:15:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6cyObX",
                                           "createdAt":  "2025-02-03T09:31:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daniatic",
                                           "body":  "@stephentoub - Maybe it\u0027s worth considering performance improvements for TimeZone DateTime conversions? Could be an interesting topic for your \"Performance Improvements in .NET X\" blog series.",
                                           "updatedAt":  "2025-02-03T09:31:51Z"
                                       }
                                   ],
                         "totalCount":  17
                     },
        "title":  "TimeZoneInfo incredibly slow",
        "labels":  [
                       "enhancement",
                       "tenet-performance",
                       "help wanted",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/25295",
        "createdAt":  "2018-03-03T05:07:23Z",
        "number":  25295,
        "author":  "ahsonkhan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T01:58:40Z",
        "body":  "See https://github.com/dotnet/corefx/pull/27678 for context.\r\n\r\n@joperezr, @AlexGhiondea, @stephentoub, @jkotas ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOFmDwlg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NTEzNTg4MA==",
                                           "createdAt":  "2018-03-22T00:06:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "@AlexGhiondea As ParseExact is nothing new I believe this can safely be switched to future?",
                                           "updatedAt":  "2018-03-22T00:06:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NTQ1MTc5OA==",
                                           "createdAt":  "2018-03-22T20:46:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "@ViktorHofer agreed 😄 ",
                                           "updatedAt":  "2018-03-22T20:46:12Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Improve test coverage of DateTime ParseExact with different DateTimeStyles",
        "labels":  [
                       "test-enhancement",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/26278",
        "createdAt":  "2018-05-25T09:37:50Z",
        "number":  26278,
        "author":  "jskeet",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBEewBQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ralsu091",
                                            "createdAt":  "2020-05-17T19:23:37Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-11-22T01:58:43Z",
        "body":  "Closely related to dotnet/runtime#19794, but without involving serialized strings.\r\n\r\n`TimeZoneInfo.CreateCustomTimeZone` accepts adjustment rules - but the rules that are passed in are munged when `GetAdjustmentRules` is called, due to the way that regular TZIF files are handled.\r\n\r\nHere\u0027s an example:\r\n\r\n```csharp\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    public static void Main()        \r\n    {\r\n        var rules = new[]\r\n        {\r\n            // Rule for the whole of time, with DST of 1 hour commencing on March 1st\r\n            // and ending on September 1st.\r\n            TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule(\r\n                DateTime.MinValue, DateTime.MaxValue.Date, TimeSpan.FromHours(1),\r\n                TimeZoneInfo.TransitionTime.CreateFixedDateRule(DateTime.MinValue, 3, 1),\r\n                TimeZoneInfo.TransitionTime.CreateFixedDateRule(DateTime.MinValue, 9, 1))\r\n        };\r\n        var zone = TimeZoneInfo.CreateCustomTimeZone(\"custom\", baseUtcOffset: TimeSpan.Zero,\r\n                displayName: \"DisplayName\", standardDisplayName: \"Standard\",\r\n                daylightDisplayName: \"Daylight\",\r\n                adjustmentRules: rules);\r\n        var fetchedRules = zone.GetAdjustmentRules();\r\n        Console.WriteLine(rules[0].DaylightTransitionStart.Month);\r\n        Console.WriteLine(fetchedRules[0].DaylightTransitionStart.Month);        \r\n    }\r\n}\r\n```\r\n\r\nOutput on Windows: 3 3\r\nOutput on Unix: 3 1\r\n\r\nIdeally, if the user has passed in any rules, those should be exactly the rules returned as well.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJYriUA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTg0NzM4OA==",
                                           "createdAt":  "2020-05-17T19:23:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ralsu091",
                                           "body":  "I had a test failing on Linux and passing on Windows because of this issue. On Windows GetAdjustmentRules simply returns a clone of the whole array, while on Unix they create a fixed date rule. I\u0027m not sure why? \r\nhttps://github.com/dotnet/runtime/blob/b24e9cd0996c688fd627fc1698986097e54103cd/src/libraries/System.Private.CoreLib/src/System/TimeZoneInfo.Unix.cs#L188\r\nhttps://github.com/dotnet/runtime/blob/b24e9cd0996c688fd627fc1698986097e54103cd/src/libraries/System.Private.CoreLib/src/System/TimeZoneInfo.Unix.cs#L189\r\n\r\nI\u0027m willing to submit a PR to match the Windows behaviour, but I believe the current outcome is intentional and I\u0027m not sure I know why.\r\n\r\nMy use case for calling GetAdjustmentRules is for me to send down the month, week and hour of start/end transitions to an iot device so it can observe daylight saving time.",
                                           "updatedAt":  "2020-05-17T19:23:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTg1ODg5Ng==",
                                           "createdAt":  "2020-05-17T20:52:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBEtjYA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rayanalsubhi-feenics",
                                                                               "createdAt":  "2020-05-19T16:53:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e  while on Unix they create a fixed date rule. I\u0027m not sure why?\r\n\r\nUnfortunately, the AdjustmentRule is originally designed around the TZ data provided by Windows which is very different than what Linux has. To deal with that we had to internally store TZ data on Linux in some specific way just to achieve the functionality but this is still not perfect. That is why we need to rearchitect this area and possibly come up with new APIs (or extend the current APIs) which allows providing a better experience on Linux. I don\u0027t think this is a simple task that can be solved by a simple PR.",
                                           "updatedAt":  "2020-05-17T21:10:33Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Custom time zone creation on Unix doesn\u0027t return the presented rules",
        "labels":  [
                       "bug",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/26279",
        "createdAt":  "2018-05-25T09:44:38Z",
        "number":  26279,
        "author":  "jskeet",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T02:08:32Z",
        "body":  "Related to dotnet/runtime#20626.\r\n\r\nThe time zone rules returned from `GetAdjustmentRules()` in .NET Core use a combination of `DateEnd` and `DaylightSavingTransitionEnd` to determine when a particular rule effectively ends.\r\n\r\nIt looks like the intention is for the end point to be inclusive - but while the internal representation is inclusive by being one *tick* earlier than the transition instant, the rule returned from `GetAdjustmentRules()` is inclusive to the *second*... meaning that logically, everything else in a particular second doesn\u0027t fall into any rule.\r\n\r\nFor example, suppose we had a transition at 2018-05-25T10:00:00Z, we\u0027d end up with two rules. The first rule would end at 2018-05-25T09:59:59.0000000 inclusive, and the second rule would start at 2018-05-25T10:00:00.0000000 inclusive. What about 2018-05-25T09:59:59.5000000? That\u0027s not in either rule.\r\n\r\nIn Noda Time I\u0027ve worked around this by adding a second, but that has its own dangers - if this bug is ever fixed in the simplest way, I\u0027ll need to handle both \"to the second\" and \"to the tick\" rules, detecting which to use.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJu_LTg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MjExMDcxMg==",
                                           "createdAt":  "2018-05-25T16:25:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  ".... and this is why date/time ranges should always be upper-bound exclusive.  \r\nThere isn\u0027t really any such thing as an \"end of current state\" timestamp - it\u0027s really a \"start of new state\" timestamp.  In this case, it\u0027s not so much \"end of the current rule\", but \"start of the new/next rule\" (even if the rule is by implication, like ending daylight savings time).",
                                           "updatedAt":  "2018-05-25T16:25:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MjExMzA3NA==",
                                           "createdAt":  "2018-05-25T16:34:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jskeet",
                                           "body":  "@Clockwork-Muse: For continuous time, absolutely. Pure date ranges (e.g. June 10th-15th) make more sense to be end-inclusive, partly due to the values being discreet.",
                                           "updatedAt":  "2018-05-25T16:34:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MjEyNDM0OQ==",
                                           "createdAt":  "2018-05-25T17:17:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "....the problem here is that the rule actually starts/ends in continuous time, even if the rule is usually expressed in (what appears to be) discrete time.  My naive reading of `java.time.zone.ZoneOffsetTransition` suggests it was written like it was to specifically combat this problem: it models things as \"transitions\", so it falls natively into \"starts at\" stamps.\r\n\u003chr /\u003e\r\nThe more pedantic part of me wants to argue that there is no such thing as discrete time, rather there\u0027s just representations of continuous time at different resolutions.  The safest way, then, to shift resolutions is to treat it as continuous, because that means the lower bound of the next step can be blindly used (because it\u0027s going to be `0`).  If you take the next resolution as just another discrete step and an inclusive upper bound, you end up in the situation of having to figure out days-in-month, which is why so much stuff breaks on February 29th.\r\n\r\nNow, representing date ranges to non-programmers does get interesting, because so many of them do tend to think in discrete jumps, yes.  It\u0027s generally much safer to translate what the user says into a more-correct form, though: for example, if I was designing a form for users to query sales over a date range, I\u0027d make sure to silently change it from (rangeStart, rangeEnd) to (salesOnOrAfter, salesBefore), because my database is almost certainly going to be storing a full timestamp.",
                                           "updatedAt":  "2018-05-25T17:17:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MjE1NzQxNA==",
                                           "createdAt":  "2018-05-25T19:27:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jskeet",
                                           "body":  "Oh yes, I completely agree that using inclusive endpoints here is a bad idea, and in Noda Time we always use exclusive ones :)",
                                           "updatedAt":  "2018-05-25T19:27:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzI0ODk5Ng==",
                                           "createdAt":  "2020-07-02T22:41:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "cc: @tarekgh in case you want to add anything here.",
                                           "updatedAt":  "2020-07-02T22:41:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzI0OTM1OA==",
                                           "createdAt":  "2020-07-02T22:43:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@joperezr no, it is good to keep it opened so we track fixing that when having a chance. ",
                                           "updatedAt":  "2020-07-02T22:43:17Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "TimeZoneInfo adjustment rules returned on Unix \"miss\" a second per transition",
        "labels":  [
                       "bug",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/26281",
        "createdAt":  "2018-05-25T10:07:57Z",
        "number":  26281,
        "author":  "jskeet",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T01:58:44Z",
        "body":  "I believe this is another case of \"well we sort of assume a single standard offset for all time, but not everywhere\". The following program displays zones (with the first occurrence per zone) where `TimeZoneInfo` will say that an instant in time observes daylight savings, but the rule applied at that point has a DaylightDelta of zero.\r\n\r\n```csharp\r\nusing System;\r\nusing System.Linq;\r\n\r\nclass Program\r\n{\r\n    public static void Main()        \r\n    {\r\n        foreach (var zone in TimeZoneInfo.GetSystemTimeZones().OrderBy(zone =\u003e zone.Id))\r\n        {\r\n            var rules = zone.GetAdjustmentRules();\r\n            foreach (var rule in rules)\r\n            {\r\n                if (rule.DateStart == DateTime.MinValue)\r\n                {\r\n                    continue;\r\n                }\r\n                var localStart = rule.DateStart + rule.DaylightTransitionStart.TimeOfDay.TimeOfDay;\r\n                var utcStart = DateTime.SpecifyKind(localStart - zone.BaseUtcOffset, DateTimeKind.Utc);\r\n                var isDst = zone.IsDaylightSavingTime(utcStart);\r\n                if (isDst \u0026\u0026 rule.DaylightDelta == TimeSpan.Zero)\r\n                {\r\n                    Console.WriteLine($\"{zone.Id}: {utcStart}\");\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIn Noda Time I \"correct\" this by assuming that all such cases actually have a 1-hour DST. That assumption makes me uncomfortable, admittedly, but I suspect it\u0027s true almost everywhere. (I acknowledge that the tzif file doesn\u0027t have all the information we need here, but if we\u0027re going to make up information, let\u0027s at least have a better crack at it.)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJu_NZw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzI0OTI1NQ==",
                                           "createdAt":  "2020-07-02T22:42:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "FYI @tarekgh anything we want to fix here?",
                                           "updatedAt":  "2020-07-02T22:43:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzI0OTg5NQ==",
                                           "createdAt":  "2020-07-02T22:45:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@joperezr yes, please keep all issues tracking TZ opened for the future milestone. Thanks!",
                                           "updatedAt":  "2020-07-02T22:45:13Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "TimeZoneInfo.AdjustmentRule on Unix: daylight delta of zero (but DST reported) is confusing",
        "labels":  [
                       "bug",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/26362",
        "createdAt":  "2018-06-02T14:54:27Z",
        "number":  26362,
        "author":  "Tornhoof",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAmeBqw==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "atruskie",
                                            "createdAt":  "2019-04-08T04:04:53Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-11-22T01:58:45Z",
        "body":  "The following applies to ``DateTime``, ``DateTimeOffset`` and UTF8/UTF16.\r\n**Motivation**\r\nCurrently the time format pattern \u0027O\u0027, \u0027o\u0027 is the roundtrip pattern and the output of a formatted string looks like ``2009-06-15T13:45:30.0000000Z`` and quite often more like ``2009-06-15T13:45:30.0000000-00:00``. This is great for formatting, but the pattern specifies 7 fractional digits in a 100ns precision, this makes live complicated if the date format is produced by another programming language.\r\nAccording to https://nbsoftsolutions.com/blog/iso-8601-and-nanosecond-precision-across-languages python has 6, rust has 8, Go has 9 fractional digits.\r\n\r\nI propose another format pattern, let\u0027s name it \u0027i\u0027 for discussion, which is basically the same as \u0027o\u0027 just with a relaxed requirement of fractional digits.\r\n\r\n***Formatting***\r\nLike \u0027o\u0027, **but**:\r\n- If the ticks are zero then omit them (e.g. above example would be ``2009-06-15T13:45:30Z``)\r\n- Print \u0027Z\u0027 in all cases if the timezone is UTC (which currently not consistent over all of the different datetime/utf variants)\r\n\r\n***Parsing***\r\nLike \u0027o\u0027, **but**:\r\n- Allow an arbitrary amount of fractional digits and ignore  the digits after 7 digits.\r\n\r\n**Side effects**:\r\n- A new format pattern should not affect existing patterns (I assume changing an existing pattern is a breaking change)\r\n- Performance needs to be evaluated as a non-fixed amount of fractional digits takes a bit more time, the relevant code more or less already exists for ``Timespan``\r\n\r\n**Intended Audience**:\r\n- Everyone writing code parsing/formatting ISO8601 Datetimes for roundtripping with other platforms. Example: @ahsonkhan will probably need it for his JsonReader/Writer currently in corefxlab.\r\n\r\n**Alternatives**:\r\n- Do not implement the formatter side, just modify the \u0027o\u0027 parser side to allow for a different amount of fractional digits, then no new pattern is necessary, but we still write a rather \r\n- No new formatter pattern, but instead extension methods and using the internal structures of the respective formatters/parsers.\r\n- Put it into an extra lib, but as \u003e90% of the code overlaps with the formatters/parsers of  \u0027o\u0027, \u0027o\u0027 is at the end only a special case of \u0027i\u0027",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJwLtTQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNzMzNDQxNQ==",
                                           "createdAt":  "2018-11-09T11:36:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tornhoof",
                                           "body":  "@ahsonkhan You might want to tag this regarding your JSON Parser, this will affect the interoperability of DateTime/DateTimeOffset with other programming languages.",
                                           "updatedAt":  "2018-11-09T11:36:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNzQzMDI2Mg==",
                                           "createdAt":  "2018-11-09T17:18:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "Also common - Java has 9 digits (full nanoseconds precision).  \r\n\r\nAlthough it\u0027s actually possible to parse an unlimited number of digits via `TryParse`.\r\nThe problem with some of the existing implementation, as I bring up in dotnet/corefx#32907, is that the parsing _ends up rounding up_, meaning anything with `999999999` ns ends up bumping up to the next second.  Which means that you\u0027re silently bumping objects into the next \"bucket\".  Which has to be throwing somebody off.\r\n\r\n",
                                           "updatedAt":  "2018-11-09T17:18:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODU3ODYxMw==",
                                           "createdAt":  "2020-05-14T11:43:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "chucker",
                                           "body":  "See also https://github.com/dotnet/runtime/issues/9364",
                                           "updatedAt":  "2020-05-14T11:43:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NDUwMzI0NQ==",
                                           "createdAt":  "2020-07-06T22:52:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "cc: @tarekgh ",
                                           "updatedAt":  "2020-07-06T22:52:57Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "API Suggestion: Additional time format pattern for concise ISO8601 format",
        "labels":  [
                       "api-needs-work",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/12197",
        "createdAt":  "2019-03-06T18:40:11Z",
        "number":  12197,
        "author":  "JamesNK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCciUQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tornhoof",
                                            "createdAt":  "2019-03-06T19:09:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "atruskie",
                                            "createdAt":  "2019-04-08T03:53:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rubenprins",
                                            "createdAt":  "2019-04-25T11:53:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2019-05-14T09:57:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Ghost4Man",
                                            "createdAt":  "2021-08-03T09:53:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2021-11-04T07:18:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "choby",
                                            "createdAt":  "2024-01-05T11:56:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2024-01-05T16:17:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aetos382",
                                            "createdAt":  "2025-05-16T04:08:12Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2025-06-17T20:19:41Z",
        "body":  "A time of 24:00 is a valid in ISO8601 dates.\r\n\r\n\u003e Midnight is a special case and may be referred to as either \"00:00\" or \"24:00\". The notation \"00:00\" is used at the beginning of a calendar day and is the more frequently used. At the end of a day use \"24:00\". \"2007-04-05T24:00\" is the same instant as \"2007-04-06T00:00\" (see Combined date and time representations below).\r\n\r\nhttps://en.wikipedia.org/wiki/ISO_8601\r\n\r\n```cs\r\nvar dt = DateTimeOffset.Parse(\"2007-04-05T24:00\");\r\nvar dt = DateTime.Parse(\"2007-04-05T24:00\");\r\n```\r\n\r\n```\r\nSystem.FormatException: \u0027The DateTime represented by the string \u00272007-04-05T24:00\u0027 is not supported in calendar \u0027System.Globalization.GregorianCalendar\u0027.\u0027\r\n   at System.DateTimeParse.Parse(ReadOnlySpan`1 s, DateTimeFormatInfo dtfi, DateTimeStyles styles, TimeSpan\u0026 offset)\r\n   at System.DateTimeOffset.Parse(String input)\r\n   at ConsoleApp17.Program.Main(String[] args) in C:\\Users\\James\\source\\repos\\ConsoleApp17\\ConsoleApp17\\Program.cs:line 10\r\n```\r\n\r\nShould be fixed in DateTimeOffset.Parse/DateTime.Parse and new Utf8Parser API.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVUTrDA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwODI5OTk4Mg==",
                                           "createdAt":  "2019-07-04T00:54:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODRYyew==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ericstj",
                                                                               "createdAt":  "2019-07-04T03:16:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2021-11-04T07:19:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-01-05T16:05:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "According to ISO 8601-1:2019 \"5.3.2  - Beginning of the day\" this is explicitly **not** supported:\r\n\r\n\u003e For information interchange there is no representation of end of day. It is recognized that the expression ‘24:00:00’ is used as a natural language expression to denote end of a day; but for the benefit of clarity, ‘24’ shall not be used to represent hour in accordance with this document.\r\n\r\nAdditionally, \"4.3.8 Clock hour and hours duration\" is very explicit about valid hours being between `00` and `23`.\r\n\r\nISO 8601-2:2019 \"7.3.2 Beginning of the day\" also calls out explicitly that \"end of day\" is not supported.\r\n\r\n(I don\u0027t know if Wikipedia is accurate to some older revision of the specification. I only have access to the most current.)\r\n\r\ncc: @layomia, @tarekgh ",
                                           "updatedAt":  "2019-07-04T00:54:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwODU1MTE4Mw==",
                                           "createdAt":  "2019-07-04T18:12:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I agree with @JeremyKuhne too. the hours should be from 0 to 23. looking at https://tools.ietf.org/html/rfc3339#section-5.7 you can also see it is explicit saying in the section **5.7.** **Restrictions:**\r\n\r\n```\r\n   Although ISO 8601 permits the hour to be \"24\", this profile of ISO\r\n   8601 only allows values between \"00\" and \"23\" for the hour in order\r\n   to reduce confusion.\r\n```\r\n\r\nIn section [5.6. Internet Date/Time Format](https://tools.ietf.org/html/rfc3339#section-5.6) it mention:\r\n\r\n```\r\ntime-hour       = 2DIGIT  ; 00-23\r\n```\r\n\r\nAlthough [Appendix A. ISO 8601 Collected ABNF](https://tools.ietf.org/html/rfc3339#appendix-A) suggest ```time-hour         = 2DIGIT ; 00-24``` but the same appendix saying:\r\n\r\n```\r\nISO 8601 does not specify a formal grammar for the date and time\r\n   formats it defines.  The following is an attempt to create a formal\r\n   grammar from ISO 8601.  This is informational only and may contain\r\n   errors.  ISO 8601 remains the authoritative reference.\r\n\r\nNote that due to ambiguities in ISO 8601, some interpretations had to\r\n   be made.  First, ISO 8601 is not clear if mixtures of basic and\r\n   extended format are permissible.  This grammar permits mixtures. ISO\r\n   8601 is not clear on whether an hour of 24 is permissible only if\r\n   minutes and seconds are 0.  This assumes that an hour of 24 is\r\n   permissible in any context.  Restrictions on date-mday in section 5.7\r\n   apply.\r\n```\r\n\r\nIf the latest version of ISO8601 (year 2019) is explicit regarding that as @JeremyKuhne mentioned, then we should stick with that and not support 24 to avoid any confusion.\r\n",
                                           "updatedAt":  "2019-07-04T18:12:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwODYzMDM0OA==",
                                           "createdAt":  "2019-07-05T05:05:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCBIZ5Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2021-11-04T07:20:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "atruskie",
                                           "body":  "I think the key thing here is to be able to parse user input. I\u0027ve regularly needed to parse \"24:00:00\" and I usually have to write wrapper methods (or use NodaTime) to handle this case.\r\n\r\nAs soon as the dates are parsed, they are of course normalized to `00-23`.\r\n\r\nAnd as per the guidance from the spec, we shouldn\u0027t be able to format/output a date with the value `24`  in the hour component.\r\n\r\nFor reference, NodaTime took a similar approach: the ability to parse `24:00:00` exists, but the internal representation of that date is just the next day. See https://github.com/nodatime/nodatime/issues/198 and https://stackoverflow.com/a/20879976/224512",
                                           "updatedAt":  "2019-07-05T05:05:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwODgzMzM3NA==",
                                           "createdAt":  "2019-07-05T18:23:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "\u003e I think the key thing here is to be able to parse user input.\r\n\r\nI\u0027m fine with considering parsing it, but not as part of the \"O\" format.",
                                           "updatedAt":  "2019-07-05T18:23:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwODgzNDkwNQ==",
                                           "createdAt":  "2019-07-05T18:31:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e I\u0027m fine with considering parsing it, but not as part of the \"O\" format.\r\n\r\nThat will be more tricky. DateTime non-exact parser has a lot heuristics to detect which part of the date/time string is year, month, day, hour, minute...etc. trying to support 24 as hour will have a lot of disadvantages here and can cause a lot of other breaks.\r\nI would say, either allow 24 in O only or not.",
                                           "updatedAt":  "2019-07-05T18:39:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxOTQ0Mjc2Mw==",
                                           "createdAt":  "2019-08-08T09:27:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003chttps://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#dateTime\u003e specifically permits 24:00:00 but does not distinguish it from 00:00:00 on the next day. \u003chttps://www.w3.org/TR/2004/REC-xmlschema-2-20041028/#time\u003e is less clear on whether it allows 24:00:00.\r\n\r\nWhen using WCF to access a third-party SOAP service that declares some elements as xsd:time and occasionally responds with 24:00:00, I have had to edit the imported WSDL and change the type to xsd:string, so that my application could receive the data and then parse it more tolerantly. It would have been easier, especially during WSDL updates, if .NET Framework had supported 24:00:00 on its own. However, I suppose the support could be implemented in XmlSerializer and XmlConvert, not necessarily in DateTime.Parse. That would avoid messing with the non-exact parser heuristics.\r\n\r\nAdding DateTimeStyles.AllowEndOfDay and TimeSpanStyles.AllowEndOfDay for use with the ParseExact methods might make sense, though.",
                                           "updatedAt":  "2019-08-27T21:15:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxOTYxMjAyOA==",
                                           "createdAt":  "2019-08-08T17:23:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@KalleOlaviNiemitalo I think your suggestion is reasonable. maybe not even using DateTimeStyles.AllowEndOfDay can be OK even if it is a breaking change as long as we restrict the functionality to parse exact..",
                                           "updatedAt":  "2019-08-08T17:25:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxOTk5MjMyMQ==",
                                           "createdAt":  "2019-08-09T17:02:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "OTOH, supporting 24:00:00 for xsd:time in XmlSerializer would also require changing XmlSerializationWriter.FromTime, which is called by generated code. It currently writes 00:00:00 instead, and changing that could break someone\u0027s application. Perhaps the compatibility risk could be minimized by writing 24:00:00 only when `value == DateTime.MinValue.AddDays(1)` exactly, not when `value` is some other midnight. That starts looking like quite a hack, though. 🙁\r\n\r\nThis problem does not exist for xsd:dateTime.",
                                           "updatedAt":  "2019-08-09T17:06:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NTk4MDE5OQ==",
                                           "createdAt":  "2020-06-18T12:16:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBpyvOQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "ericek111",
                                                                               "createdAt":  "2021-05-06T08:14:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "makersky",
                                           "body":  "Unfortunately it\u0027s no longer valid. \r\n[ISO 8601-1:2019](https://www.iso.org/obp/ui/#iso:std:iso:8601:-1:ed-1:v1:en)",
                                           "updatedAt":  "2020-06-18T12:16:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NTk4Nzg1OQ==",
                                           "createdAt":  "2020-06-18T12:32:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Although ISO 8601 no longer allows 24:00, I believe XML Schema Part 2 still allows it, and it is actually used. Thus, I would still like to have this in XmlSerializer and XmlConvert, even if not in DateTime and DateTimeOffset themselves.",
                                           "updatedAt":  "2020-06-18T12:32:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VNos9",
                                           "createdAt":  "2023-02-14T12:06:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericek111",
                                           "body":  "It\u0027s supported again! See ISO 8601-1:2019/Amd 1:2022.",
                                           "updatedAt":  "2023-02-14T12:06:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VROsM",
                                           "createdAt":  "2023-02-15T00:29:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC2Ewqw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2023-02-15T01:07:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "\u003e As of ISO 8601-1:2019/Amd 1:2022, [midnight](https://en.wikipedia.org/wiki/Midnight) may be referred to as \"00:00:00\", corresponding to the instant at the beginning of a calendar day; or \"24:00:00\", corresponding to the instant at the end of a calendar day.[[1]](https://en.wikipedia.org/wiki/ISO_8601#cite_note-iso8601amd1-1) ISO 8601-1:2019 as originally published removed \"24:00\" as a representation for the end of day although it was permitted in earlier versions of the standard.",
                                           "updatedAt":  "2023-02-15T00:29:08Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Support 24:00 in hh:mm for ISO8601 dates",
        "labels":  [
                       "enhancement",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/13230",
        "createdAt":  "2019-08-08T10:09:13Z",
        "number":  13230,
        "author":  "KrzysFR",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCaH5FQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Const-me",
                                            "createdAt":  "2022-04-27T16:15:26Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-11-22T02:10:45Z",
        "body":  "Following dotnet/coreclr#24279 that improves precision of TimeSpan.FromMilliseconds, I\u0027m having issues with compatibility with .NET Framework, and more importantly weird inconsistencies in test code:\r\n\r\n__.NET Framework 4.7.2__\r\n```C#\r\nConsole.WriteLine(TimeSpan.FromSeconds(78043.43));\r\nConsole.WriteLine(TimeSpan.FromMilliseconds(78043430));\r\nConsole.WriteLine(TimeSpan.FromSeconds(78043.43) == TimeSpan.FromMilliseconds(78043430));\r\n```\r\noutputs:\r\n```\r\n21:40:43.4300000\r\n21:40:43.4300000\r\nTrue\r\n```\r\n\r\n__.NET Core 3.0 preview 7:__\r\n```C#\r\nConsole.WriteLine(TimeSpan.FromSeconds(78043.43));\r\nConsole.WriteLine(TimeSpan.FromMilliseconds(78043430));\r\nConsole.WriteLine(TimeSpan.FromSeconds(78043.43) == TimeSpan.FromMilliseconds(78043430));\r\n```\r\noutputs:\r\n```\r\n21:40:43.4299999\r\n21:40:43.4300000\r\nFalse\r\n```\r\n\r\nI don\u0027t really mind the fact that there will be a difference in behavior  between netfx and .NET Core (loss in precision vs not), but the main issue for me is that calling `TimeSpan.FromSeconds(CONSTANT)` and `TimeSpan.FromMilliseconds(CONSTANT * 1000)` on 3.0-preview7 does not return the same value (different Ticks).\r\n\r\nThis caused a lot of failing unit tests similar to `Assert.That(...., Is.EqualTo(TimeSpan.FromSeconds(123.45)))` that pass on netfx but not in .NET Core due to the weird behavior.\r\n\r\nLooking at the implementation:\r\n- `TimeSpan.FromSeconds(78043.43)` calls `TimeSpan.Interval(78043.43, 10000000)` which computes `double millis = 78043.43 * 10000000` which gives `780434299999.99988`, but then is truncated to a long, producing `780434299999` ticks, which is off by one.\r\n- `TimeSpan.FromMilliseconds(78043430)` calls `TimeSpan.Interval(78043430, 10000)` so `millis` is now `780434300000` which does not change when truncated to a long.\r\n\r\n_remark: maybe the variable should now be renamed into \u0027ticks\u0027 instead of \u0027millis\u0027 here?_\r\n\r\nMaybe the +0.5/-0.5 rounding should still be applied, but on the ticks before truncating?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQltWrQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxOTUzMDU1Mg==",
                                           "createdAt":  "2019-08-08T14:00:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "cc: @Anipik, @tannergooding ",
                                           "updatedAt":  "2019-08-08T14:00:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxOTU3NzI5NA==",
                                           "createdAt":  "2019-08-08T15:51:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODgQO0Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Anipik",
                                                                               "createdAt":  "2019-08-08T17:01:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "watfordgnf",
                                                                               "createdAt":  "2019-08-08T18:40:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2019-08-11T20:25:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-05-01T17:21:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This has to do with `double` being the closest representable value and the gap between values increasing as the magnitude increases.\r\n\r\nThere are some tricks that could be done to keep it accurate without incurring the rounding loss/etc, but they may come at a perf cost.",
                                           "updatedAt":  "2019-08-08T15:51:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNTYzMjY4NA==",
                                           "createdAt":  "2019-08-28T08:07:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Const-me",
                                           "body":  "@tannergooding I wonder why don\u0027t you want to round? I think rounding is the best thing to do here, I always use round in my numeric code when I\u0027m casting from float to int, it\u0027s 50% more precise in average.\r\n\r\nThe performance cost is barely measurable. If you have SSE4.1 it\u0027s a single instruction, roundsd. If you don\u0027t have SSE4.1 slightly more, but also cheap.",
                                           "updatedAt":  "2019-08-28T08:07:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzIxNDMxNg==",
                                           "createdAt":  "2020-04-14T04:05:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DanielBryars",
                                           "body":  "Yes this change in behaviour confused me no end. The documentation is now wrong (because it is documented to round to 1ms) - I\u0027ve described this in a [stackoverflow question](https://stackoverflow.com/questions/60987108/why-are-the-timespan-values-different-between-netcoreapp2-1-and-netcoreapp3-1/61200495#61200495\r\n)",
                                           "updatedAt":  "2020-04-14T04:05:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTA0NjEzOA==",
                                           "createdAt":  "2020-07-07T18:32:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "Keeping this in 5.0 to at least document the new/changed behavior.",
                                           "updatedAt":  "2020-07-07T18:32:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2OTYwMDMzOA==",
                                           "createdAt":  "2020-08-05T23:41:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "\u003e There are some tricks that could be done to keep it accurate without incurring the rounding loss/etc, but they may come at a perf cost.\r\n\r\n@tannergooding were you planning to do something here?",
                                           "updatedAt":  "2020-08-05T23:41:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2OTYwNTM3Mg==",
                                           "createdAt":  "2020-08-06T00:00:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "I don\u0027t think there is anything reasonable that could be done for .NET 5 aside from documenting the change. Anything further would require quite a bit of investigation and would likely hit some barriers simply due to the precision loss introduced by floating-point values",
                                           "updatedAt":  "2020-08-06T00:00:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CKkEK",
                                           "createdAt":  "2022-04-26T17:29:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roberto-tim",
                                           "body":  "We have come across this bug in .NET 5, after migrating from .NET 4.6 to .NET 5/6.\r\n\r\nAs you can see from below that the .NET 5 version has less precision than .NET 4.6 so returns different values.\r\n\r\nThe .NET 5 TimeSpan.FromMilliseconds() method has chopped some of the value off.\r\n\r\nWe found this because it caused our app to crash when trying to parse what was previously 800 to an int.\r\n\r\n```\r\ndouble duration = 799.99999999999989;\r\n```\r\n### .NET 4.6  **(good)**\r\n```\r\nTimeSpan.FromMilliseconds(duration)\r\n{00:00:00.8000000}\r\n    Days: 0\r\n    Hours: 0\r\n    Milliseconds: 800\r\n    Minutes: 0\r\n    Seconds: 0\r\n    Ticks: 8000000\r\n    TotalDays: 9.2592592592592591E-06\r\n    TotalHours: 0.00022222222222222221\r\n    TotalMilliseconds: 800\r\n    TotalMinutes: 0.013333333333333334\r\n    TotalSeconds: **0.79999999999999993**\r\n```\r\n### .NET 5 or 6  **(bad)**\r\n```\r\nTimeSpan.FromMilliseconds(duration)\r\n{00:00:00.7999999}\r\n    Days: 0\r\n    Hours: 0\r\n    Milliseconds: 799\r\n    Minutes: 0\r\n    Seconds: 0\r\n    Ticks: 7999999\r\n    TotalDays: 9.2592581018518525E-06\r\n    TotalHours: 0.00022222219444444443\r\n    TotalMilliseconds: 799.9999\r\n    TotalMinutes: 0.013333331666666667\r\n    TotalSeconds: **0.7999999**\r\n    _ticks: 7999999\r\n```",
                                           "updatedAt":  "2022-04-26T17:33:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CKlGI",
                                           "createdAt":  "2022-04-26T17:34:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e As you can see from below that the .NET 5 version has less precision than .NET 4.6 so returns different values.\r\n\r\nThis is a case of more precision, not less. `TimeSpan` more accurately represents the value you input rather than rounding it and silently dropping specified precision.",
                                           "updatedAt":  "2022-04-26T17:34:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CKlp6",
                                           "createdAt":  "2022-04-26T17:36:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roberto-tim",
                                           "body":  "At first it looks like more but it is less, so .NET 5 round down when it should be rounding up.\r\n\r\n.NET 4.6  = 0.79999999999999993\r\n.NET 5.0 = 0.7999999",
                                           "updatedAt":  "2022-04-26T18:37:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CNq5J",
                                           "createdAt":  "2022-04-27T11:17:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roberto-tim",
                                           "body":  "I\u0027ve done some investigation and found the reason for the bug in .NET 5/6/7:\r\n\r\nAll versions use a `long` to store the ticks, so they have the **same** internal storage.\r\nUse of * and / results in slightly different values, but this is probably not really a problem.\r\n- .NET 4.7 : `TotalMilliseconds uses (double)_ticks * MillisecondsPerTick`\r\n- .NET 5.0 : `TotalMilliseconds uses (double)_ticks / TicksPerMillisecond`\r\n\r\nBUT the main different is that .NET 4.7 has an extra line to handle double rounding, whereas the other .NET versions do not, which causes the bug by truncating the double value without adjusting for double rounding before type casting to a long.\r\n\r\n[Edit] I\u0027ve corrected my above statement about the bug, but I don\u0027t see any strike-thru option.\r\n\r\n.NET 4.7\r\n```\r\n       private static TimeSpan Interval(double value, int scale) \r\n       {\r\n            double tmp = value * scale;     // For FromMilliseconds() scale is 1\r\n\r\n            // \u003e\u003e\u003e\u003e\u003e The next line is missing from .NET 5.0\r\n            double millis = tmp + (value \u003e= 0? 0.5: -0.5);\r\n\r\n            return new TimeSpan((long)millis * TicksPerMillisecond);   // TicksPerMillisecond = 10000\r\n        }\r\n```\r\n.NET 5\r\n```\r\n        private static TimeSpan Interval(double value, double scale)\r\n        {\r\n            double ticks = value * scale;      // For FromMilliseconds() scale is 10000\r\n\r\n            // \u003e\u003e\u003e\u003e\u003e Missing adjustment for double rounding\r\n\r\n            return IntervalFromDoubleTicks(ticks);\r\n        }\r\n\r\n        private static TimeSpan IntervalFromDoubleTicks(double ticks)\r\n        {\r\n            return new TimeSpan((long)ticks);\r\n        }\r\n```",
                                           "updatedAt":  "2022-04-27T13:00:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CNvZD",
                                           "createdAt":  "2022-04-27T11:38:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roberto-tim",
                                           "body":  "I have hacked a copy of the .NET 5.0 TimeSpan code to test this for FromMilliseconds().  (yes I know I can folk the code :))\r\nAs you can see my \"fixed version\" TimeSpan5_0Fixed returns the correct values now.  It may not give correct values for the other From methods as it\u0027s just a hack.\r\n\r\n![image](https://user-images.githubusercontent.com/40469754/165506912-2aedbb83-5914-4f97-bb26-a8d833943cd5.png)\r\n\r\n        private static TimeSpan5_0Fixed Interval(double value, double scale)\r\n        {\r\n            double ticks = value * scale;\r\n\r\n            double millis = ticks + (value \u003e= 0 ? 0.5 : -0.5);\r\n\r\n            return IntervalFromDoubleTicks(millis);\r\n        }",
                                           "updatedAt":  "2022-04-27T11:45:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CODqk",
                                           "createdAt":  "2022-04-27T13:09:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roberto-tim",
                                           "body":  "The [TimeSpanTests](https://github.com/dotnet/runtime/blob/f3cd2f06521e3793da7667e05a629ecb0e2dadf5/src/libraries/System.Runtime/tests/System/TimeSpanTests.cs#L1400) is missing the edge cases for doubles and only has safe values, I believe it should also include numbers like 0.99999999999999993.\r\n\r\n        public static void ConvertToTimeSpanPrecisionTest()\r\n        {\r\n            Assert.Equal(12345, TimeSpan.FromMilliseconds(1.23456).Ticks);\r\n            Assert.Equal(12345, TimeSpan.FromMilliseconds(1.234567).Ticks);\r\n\r\n            Assert.Equal(12345600, TimeSpan.FromSeconds(1.23456).Ticks);\r\n\r\n            Assert.Equal(1.23456 * 60 * 10_000_000, TimeSpan.FromMinutes(1.23456).Ticks);\r\n        }",
                                           "updatedAt":  "2022-04-27T13:09:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5COjb6",
                                           "createdAt":  "2022-04-27T15:01:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e            // \u003e\u003e\u003e\u003e\u003e The next line is missing from .NET 5.0\r\n\u003e            double millis = tmp + (value \u003e= 0? 0.5: -0.5);\r\n\r\nThis was deleted in https://github.com/dotnet/coreclr/pull/24279 for some reason.",
                                           "updatedAt":  "2022-04-27T15:01:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5COkRC",
                                           "createdAt":  "2022-04-27T15:04:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The logic isn\u0027t really correct and isn\u0027t correctly accounting for rounding or floating-point inaccuracies for large values.",
                                           "updatedAt":  "2022-04-27T15:04:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5COnRS",
                                           "createdAt":  "2022-04-27T15:15:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roberto-tim",
                                           "body":  "\u003e The logic isn\u0027t really correct and isn\u0027t correctly accounting for rounding or floating-point inaccuracies for large values.\r\n\r\nMaybe as stated it\u0027s just a \"hack\" (from .NET 4.7 code) to demonstrate there is a bug in .NET 5/6/7, as the From methods use doubles the code does not correctly handle doubles. :)",
                                           "updatedAt":  "2022-04-27T15:15:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5COnTb",
                                           "createdAt":  "2022-04-27T15:15:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The algorithm, realistically, should be breaking the `double` into its `integral` and `fractional` parts (using the internal `Math.ModF`).\r\n\r\nThe integral portion, provided its in range of `ulong.MaxValue` should be converted to a `ulong` (and otherwise fail). This will be an exact conversion, noting this is exact from the represented double and not necessarily exact from whatever the user \"typed\" as some literal.\r\n\r\nThe fractional portion then needs to be carefully handled since scaling it will result in precision loss. For `FromSeconds` and below, we need to scale by up to `10 million` (ticks per second). This should be small enough that any rounding/precision loss is minimal and not visible within the range of a \"tick\".\r\n\r\n`FromDays` (`864 billion ticks`) and `FromHours` (`36 billion ticks) likely need some consideration. The rounding loss should be minimal and potentially still within range of a \"tick\", but I\u0027ve not checked the math to validate this.",
                                           "updatedAt":  "2022-04-27T15:16:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CO3Vg",
                                           "createdAt":  "2022-04-27T16:13:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCaIOQg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roberto-tim",
                                                                               "createdAt":  "2022-04-27T16:33:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Const-me",
                                           "body":  "@tannergooding The old way was strictly better.\r\n\r\nThe rounding used in old .NET runtime resulted in 0.25 ticks average rounding error when converting from double to ticks, and no systematic bias.\r\nThe truncation used in the current version results in 0.5 ticks average rounding error which is twice as high, and it also introduced a systematic bias towards zero.\r\n\r\nHere’s a demo of that systematic bias caused by truncation.\r\n\r\n\tusing System;\r\n\r\n\tstatic class Program\r\n\t{\r\n\t\tstatic void Main( string[] args )\r\n\t\t{\r\n\t\t\tTimeSpan initial = TimeSpan.FromMinutes( 1.23456 );\r\n\t\t\tTimeSpan ts = initial;\r\n\t\t\tfor( int i = 0; i \u003c 1000000; i++ )\r\n\t\t\t{\r\n\t\t\t\tts = TimeSpan.FromSeconds( ts.TotalSeconds * Math.PI );\r\n\t\t\t\tts = TimeSpan.FromSeconds( ts.TotalSeconds / Math.PI );\r\n\t\t\t}\r\n\r\n\t\t\tTimeSpan diff = initial - ts;\r\n\t\t\tConsole.WriteLine( \"Difference: {0} ticks, {1} ms\", diff.Ticks, diff.TotalMilliseconds );\r\n\t\t}\r\n\t}\r\n\r\nThe old runtime prints `0 ticks, 0 ms`, the .NET 6 runtime prints `564209 ticks, 56.4209 ms`.\r\n\r\nThe correct answer is zero: the body of the loop first multiplies the timespan by a constant, then divides by the same constant.",
                                           "updatedAt":  "2022-04-27T16:17:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CO4s8",
                                           "createdAt":  "2022-04-27T16:18:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCaH8vA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roberto-tim",
                                                                               "createdAt":  "2022-04-27T16:19:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "It was strictly better for some inputs and worse for others. We should not \"fix\" this by putting back in still broken behavior.\r\n\r\nWe should fix this properly and ensure that it works for both large and small values, which I gave a description of how to do in my last comment.",
                                           "updatedAt":  "2022-04-27T16:18:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CO8bc",
                                           "createdAt":  "2022-04-27T16:34:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e The correct answer is zero: the body of the loop first multiplies the timespan by a constant, then divides by the same constant.\r\n\r\nThis is notably not correct. `(x * y) / y` is not guaranteed to produce `x` because floating-point has finite precision and therefore introduces rounding error.\r\n\r\nA simplistic example is `(Math.PI * double.Epsilon) / double.Epsilon` which produces `3`, not `Math.PI`. This also reproduces with many other inputs/examples.",
                                           "updatedAt":  "2022-04-27T16:34:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CPEj6",
                                           "createdAt":  "2022-04-27T17:01:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Const-me",
                                           "body":  "\u003e and worse for others\r\n\r\nDo you have a test case when it’s worse?\r\n\r\n\u003e This is notably not correct. `(x * y) / y` is not guaranteed to produce `x` because floating-point has finite precision and therefore introduces rounding error.\r\n\r\nThe formula is more complex than just FP64 math because `TimeSpan` is keeping integer ticks @ 10MHz, and `TimeSpan.FromSeconds` rounds to integer. As you see from my demo, rounding to nearest integer actually stabilizes the math, while truncation introduces a systematic bias which causes numerical errors to accumulate with more operations on the TimeSpan.\r\n\r\n\u003e A simplistic example is `(Math.PI * double.Epsilon) / double.Epsilon` which produces `3`\r\n\r\nI don’t believe the example is relevant because Math.PI * double.Epsilon is about 1.48E-323. If the value is seconds, not only it’s well below 1 TimeSpan tick, it’s even well below [Planck time](https://en.wikipedia.org/wiki/Planck_units#Planck_time) i.e. doesn’t make any sense.",
                                           "updatedAt":  "2022-04-27T17:03:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CPHKz",
                                           "createdAt":  "2022-04-27T17:11:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Do you have a test case when it’s worse?\r\n\r\nWe have had and have fixed multiple precision bugs in the last few releases, especially where inputs were being unnecessarily truncated and the full tick precision wasn\u0027t being respected.\r\n\r\n\u003e I don’t believe the example is relevant because Math.PI * double.Epsilon is about 1.48E-323. If the value is seconds, not only it’s well below 1 TimeSpan tick, it’s even well below [Planck time](https://en.wikipedia.org/wiki/Planck_units#Planck_time) i.e. doesn’t make any sense.\r\n\r\nAgain, this was a simplistic example showing that you cannot and should not rely on `(x * y) / y` returning `x`. There are many scenarios across the entire `64-bit` tick range and entire range of inputs for `Days`, `Hours`, etc when represented as a `double` that imprecision will be introduced.\r\n\r\nThe correct fix here is to update the algorithm to correctly break apart the `double` into an exact `integer part` and inexact `fractional part`. The inexact `fractional part` is then the only place where rounding considerations exist. For the `Add*(double value)` functions that are present, this rounding consideration should all be easily mitigated within the confines of the `tick` range.",
                                           "updatedAt":  "2022-04-27T17:11:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CPKwF",
                                           "createdAt":  "2022-04-27T17:20:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "There is some decently complex math that goes into this, but the premise is that the `integer part` of any `double` up to `2^53` is exactly representable.\r\n\r\nLikewise, the primitive operations (including `+`, `-`, `*`, `/`, etc) take the input \"as given\", compute the result \"as if to infinite precision and unbounded range\", and then round the result \"to the nearest representable value\".\r\n\r\nThe integer and fractional portions can always be split into their own \"exact\" values. This leaves a fractional portion which, provided the scale amount is less than `floor(log10(2^53))` (`15`) digits will result in another \"exact\" integer representation of the fractional portion and which can be used to adjust the tick value further. There will be up to `4.265..` more digits represented which can then have rounding error present and this is small enough that it shouldn\u0027t matter. -- Even in the case of `Days` where `1.0` represents `864 billion ticks`, we need at most `1.1574 * 10^-12` to represent a single \"tick\" and so fractional portion will scale correctly into the integer realm.\r\n",
                                           "updatedAt":  "2022-04-27T17:22:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CPUHQ",
                                           "createdAt":  "2022-04-27T17:53:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Const-me",
                                           "body":  "\u003e We have had and have fixed multiple precision bugs in the last few releases, especially where inputs were being unnecessarily truncated and the full tick precision wasn\u0027t being respected.\r\n\r\nCan you recall or find any of these? Without knowing what specifically was fixed, it’s not really possible to come up with a good solution.\r\n\r\nBut from general perspective, a simple rounding should be enough. FP64 precision is enough to represent exact ticks up to 28.5 years or something. And these `Add*` functions should convert the double argument into ticks (using [banker’s rounding](https://en.wikipedia.org/wiki/Rounding#Round_half_to_even) which is precisely what these CPU rounding instructions are doing), then do int64 addition on the value.\r\n\r\n\u003e The correct fix here is to update the algorithm to correctly break apart the `double` into an exact `integer part` and inexact `fractional part`. The inexact `fractional part` is then the only place where rounding considerations exist.\r\n\r\nI’m not sure that’s actually correct. Ideally, look for a well-tested off-the-shelf library which implements either FP128 (like [boost](https://www.boost.org/doc/libs/1_79_0/libs/multiprecision/doc/html/boost_multiprecision/tut/floats/cpp_bin_float.html)) or arbitrary-precision (like [GMP](https://gmplib.org/) but beware of the license)\r\n\r\nHowever, I don’t think it’s worth the complexity for the time spans. At least not until I saw a realistic use case which demonstrates the errors of the simple FP64 + rounding approach. These libraries are very complicated and not particularly fast, I only using them when I absolutely need to.",
                                           "updatedAt":  "2022-04-27T17:53:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CPafU",
                                           "createdAt":  "2022-04-27T18:21:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e These libraries are very complicated and not particularly fast, I only using them when I absolutely need to.\r\n\r\nThe perf here won\u0027t be hurt and isn\u0027t going to involve anything complex. In fact, several parts will likely become faster or mitigated by other handling we already have/need.\r\n\r\n`ModF` (the API that splits into integer and fractional parts) already has a fast implementation that defers to the CRT. But even without that, the implementation is very trivial. \r\n\r\n`ModF` requires getting the actual bits (a 1-cycle single instruction), a comparison + branch to handle `NaN`/`Infinity`. And otherwise trivial arithmetic (integer shift + subtract to get the unbiased exponent; and then two shift + masks to get the relevant integer and fractional parts).\r\n\r\nYou\u0027re looking at about 15 instructions (in the worst case) with no more than 2 (generally predicted) branches to get the relevant parts and ensure this is a correctly computed result and without introducing rounding error. -- On modern hardware, you can actually extract these parts in 2 instructions since there are dedicated hardware support for this.\r\n\r\n\u003e Can you recall or find any of these? Without knowing what specifically was fixed, it’s not really possible to come up with a good solution.\r\n\r\nThere are a number of bugs related to `TimeSpan`: https://github.com/dotnet/runtime/issues?q=is%3Aissue+TimeSpan+is%3Aopen+label%3Abug\r\n\r\nMany of these are related to anything more precise than `1ms` not working as expected. New APIs covering `microseconds` and `nanoseconds` will likewise be impacted (https://github.com/dotnet/runtime/issues/23799)\r\n\r\nThe most correct thing, and which will not cause any kind of significant slowdown but which will ensure correct computation is to handle this in a way that minimizes rounding error and best preserves the input values given by the user. This would involve using `ModF` as I\u0027ve described.\r\n\r\n",
                                           "updatedAt":  "2022-04-27T18:21:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CTp3-",
                                           "createdAt":  "2022-04-28T17:03:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roberto-tim",
                                           "body":  "The more I use .NET 5 the more it looks like there is a problem with the System.Double type.\r\n\r\n### .NET 5\r\n```\r\n\t\tfloat tf = 1000000.0f * 1.005f; // 1005000\r\n\t\tdouble  td = 1000000.0d * 1.005d; // **1004999.9999999999**\r\n\t\tdecimal tm = 1000000.0m * 1.005m; // 1005000.0000\r\n```\r\n\r\n### .NET FW 4.7.2\r\n```\r\n\t\tfloat tf = 1000000.0f * 1.005f;  // 1005000\r\n\t\tdouble  td = 1000000.0d * 1.005d;  // **1005000**\r\n\t\tdecimal tm = 1000000.0m * 1.005m;  // 1005000.0000\r\n```\r\n",
                                           "updatedAt":  "2022-04-29T07:55:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CT3_j",
                                           "createdAt":  "2022-04-28T18:01:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "`double`, `float`, and `Half` are `binary` IEEE 754 types. Due to being `binary` (base-2) rather than `decimal` (base-10) any represented value is built up by various \"powers of 2\".\r\n\r\nThat is, `1.005` as a decimal-based value is `(1 * 10^0) + (0 * 10^-1) + (0 * 10^-2) + (5 * 10^-3)`. Any `decimal` value can be constructed by taking the individual digits (which can be `0` through `9`) and multiplying that by a `power of 10` representing that digits \"place\".\r\nSince `double` is a binary-based value, any representable number is constructing by taking the individual binary digits (which can be `0` or `1`) and multiplying that by a `power of 2` representing that digits place.\r\n\r\nSince you cannot construct `1.005` using such powers of `2`, it cannot be exactly represented and instead gets rounded to the nearest representable value. This exact value is `1.004999999999999893418589635984972119331359863281251`. The next largest representable is `1.0050000000000001154631945610162802040576934814453125`. The difference between the first value and exactly `1.005` is `1.06581410364015027880668640136718749 × 10^-16`. The difference between the second value and exactly `1.005` is `1.154631945610162802040576934814453125 × 10^-16`. Therefore the first value is closer and the \"nearest representable value\".\r\n\r\nUsing `double` inherently adds noise and error to the algorithm and that becomes visible across many kinds of operations.",
                                           "updatedAt":  "2022-04-28T18:01:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CT4xu",
                                           "createdAt":  "2022-04-28T18:05:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCag0YA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2022-04-29T14:37:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  ".NET Framework has \"many\" bugs around floating-point parsing and formatting that resulted in precision being lost and incorrect rounding. These are bugs that cannot be fixed due to the very high compat bar that .NET Framework has.\r\n\r\n.NET Core, since 3.0, has fixed these bugs and documented the bug fix (breaking change). There was a blog post that went out at the time describing the change, the why, and some of the problematic scenarios that could be hit: https://devblogs.microsoft.com/dotnet/floating-point-parsing-and-formatting-improvements-in-net-core-3-0/\r\n\r\nThe simplest example is that .NET Framework will not correctly handle `double.Parse(Math.PI.ToString())`. The returned value did not equate to `Math.PI` and resulted in \"silent\" truncation and loss of precision, which was not IEEE 754 standards compliant.\r\n\r\n.NET Core 3.0 and later ensures that the value roundtrips by default and so there is no loss in precision in the displayed/formatted string. The actual computation for `1000000.0d * 1.005d` hasn\u0027t changed, only what value gets displayed when you convert it to a string.\r\n",
                                           "updatedAt":  "2022-04-28T18:05:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CW1at",
                                           "createdAt":  "2022-04-29T12:58:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roberto-tim",
                                           "body":  "@tannergooding Thanks for the detailed reply, it is appreciated, and the link.\r\n\r\nUsing `{0:R}` I can see the value of the double in .NET FW 4.7 is indeed `1004999.9999999999`.\r\n\r\nWe are evaluating the impact on our software given the link you have provided. ",
                                           "updatedAt":  "2022-04-29T12:58:47Z"
                                       }
                                   ],
                         "totalCount":  29
                     },
        "title":  "TimeSpan.FromSeconds does not return expected value after recent change to precision",
        "labels":  [
                       "bug",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/360",
        "createdAt":  "2019-11-27T21:27:34Z",
        "number":  360,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T01:55:50Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/491452/timezones-and-datetimeoffset.html)._\n\n---\n\u003cp\u003eCurrently DateTimeOffset is lacking in Options for Time Zone conversions and the windows api for TimeZoneInfo has no support for DateTimeOffset\u003c/p\u003e\u003cp\u003ethis leads to having to write code to convert a datetime offset to a date time then useing TimeZoneInfo to convert to a new Datetime and then back to a DateTimeOffset  so that the intended point in time and time zone are perserved.\u003c/p\u003e\u003cp\u003ethis set of conversions between formats and the related api calls creates the possiblity of errors in conversion that may not be easy to spot if the developer is not fully versed in the details of time zones.\u003c/p\u003e\u003cp\u003ei think that a new set of methods or a new class library be created that unify the TimeZoneInfo and DateTimeOffset to allow a developer to ask that a datetimeoffset be converted to a new timezone and not need to get into a chain of conversions. this would reduce errors and make use of DateTimeOffset simpler for most developers\u003c/p\u003e\n\n---\n### Original Comments\n\n#### Denny Figuerres on 3/15/2019, 08:16 AM: \n\n\u003cp\u003ealso DateTimeOffset  ToLocal  assume the servers date time / timezone which does not give any option to convert to a users time zone  for an application on the web, the client may be in a different timezone than the browser client.\u003c/p\u003e\u003cp\u003eand a browser may need to see a date for a timezone they are not in.\u003c/p\u003e\n\n#### Jane Wu [MSFT] on 3/18/2019, 01:36 AM: \n\n\u003cp\u003eThank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.\u0026nbsp;We\u0027ll provide an update once the issue has been triaged by the product team.\u003c/p\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOIVXRFw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1OTI3MjIxNQ==",
                                           "createdAt":  "2019-11-27T22:28:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBEyO2A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2019-11-27T23:40:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yahorsi",
                                                                               "createdAt":  "2019-12-02T12:30:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hez2010",
                                                                               "createdAt":  "2019-12-17T02:24:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ddegasperi",
                                                                               "createdAt":  "2020-05-20T07:14:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e also DateTimeOffset ToLocal assume the servers date time / timezone which does not give any option to convert to a users time zone for an application on the web, the client may be in a different timezone than the browser client.\r\n\u003e\r\n\u003e and a browser may need to see a date for a timezone they are not in.\r\n\r\nThis.  This is why `DateTimeKind` is broken.  `Utc`/`Local`/`Unknown` (or `Other` in similar APIs) show a misunderstanding of the domain.\r\n\r\nI will reiterate that we should provide a first-party complete, modern, date/time API, that would look similar to java.time and NodaTime.  \r\nNote that in most cases `DateTimeOffset` is also not the proper domain type, as non-absolute-instant information is usually better recorded as a `DateTimeZoned` (which automatically updates the offset when adding any time).",
                                           "updatedAt":  "2019-11-27T22:28:50Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "TimeZones and DateTimeOffset",
        "labels":  [
                       "api-needs-work",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1179",
        "createdAt":  "2019-12-26T22:23:02Z",
        "number":  1179,
        "author":  "ChadNedzlek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T01:55:32Z",
        "body":  "Right now, I don\u0027t think there is any way to parse a string that would be something that might have the date (or might not) and might contain an offset (or not)  \"16:23:00+700\" or \"2019-12-25T16:23:00+700\" in the framework and preserve that information.\r\n\r\nWe can use DateTime.Parse(AdjustToUtc | NoCurrentDateDefault), but that loses the existing timezone information (and can\u0027t tell us if nothing was there).\r\n\r\nFor some reason, DateTimeOffset.Parse throws an exception if \"NoCurrentDateDefault\" is set.  I don\u0027t know why it can\u0027t have it do what datetime does of just returning 1/1/1 as the date, which we can infer means \"no date specified\", because writing down 1/1/1 in a date doesn\u0027t make any sense, since no such date existed.\r\n\r\nOr maybe we need a whole new method that returns the 3 parts in isolation (the date, the time, and the offset), so that we can take proper actions based on which parts are missing.  It looks like the internal type \"DateTimeParse\" has much more powerful parsing options, but those aren\u0027t exposed).\r\n\r\nOur scenarios is that we are trying to read human entered timestamps from a dated record.  If the human typed \"1 PM\", we need to assume the meant in the same day as the existing record\".  I think we could do this now with a huge array of \"TryParseExact\" of a few dozen built in formats, but it would be nice to get the magic of TryParse without losing the information about which parts of the date were present, and which part were inferred without our knowledge.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPns0AA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2OTIxMTE2Mg==",
                                           "createdAt":  "2019-12-27T07:31:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA4Ctlw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "Gnbrkm41",
                                                                               "createdAt":  "2019-12-27T09:53:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gnbrkm41",
                                                                               "createdAt":  "2019-12-27T09:53:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnyrup",
                                                                               "createdAt":  "2019-12-27T20:09:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e Right now, I don\u0027t think there is any way to parse a string that would be something that might have the date (or might not) and might contain an offset (or not) \"16:23:00+700\" or \"2019-12-25T16:23:00+700\" in the framework and preserve that information.\r\n\r\nWe don\u0027t have a dedicated `Time` (or `Date`) class, no, although there\u0027s been some debate around them.  You might have better luck with NodaTime, although even there you\u0027d likely have to build a custom parser.\r\n\r\n\u003e We can use `DateTime.Parse(AdjustToUtc | NoCurrentDateDefault)`, but that loses the existing timezone information\r\n\r\nThis loses the _offset_ information, not the timezone information (which is way more important).\r\n\r\n\u003e because writing down 1/1/1 in a date doesn\u0027t make any sense, since no such date existed.\r\n\r\nWhile it\u0027s true that the Gregorian calendar wasn\u0027t in effect at the time the equivalent date occurred, it\u0027s not quite correct to say that that date doesn\u0027t exist.  `DateTime(Offset)` is _proleptic_, that is, it posits the rules going forwards and backwards for all time.  Some of this is for simplicity in calculation, and a bunch of it is to simplify the history that was the adoption of the Gregorian calendar (which took multiple centuries).  It makes talking about the past much easier.\r\n\r\n\u003e  I think we could do this now with a huge array of \"TryParseExact\" of a few dozen built in formats,\r\n\r\n... you\u0027d want some sort of natural language processor, not a straight list of formats.  If this is truly freeform, people are going to be writing all sorts of wacky things, like:\r\n\r\n - 1AM\r\n - one in the morning\r\n - after midnight\r\n - teatime\r\n - 1AM central time [assume record is from pacific time]\r\n - 1PM tomorrow\r\n\r\nI\u0027m assuming you don\u0027t have the option to avoid the problem by doing something like supplying a form that would allow you to specify other points in time.\r\n\r\n\u003e If the human typed \"1 PM\", we need to assume the meant in the same day as the existing record\".\r\n\r\n... and then they type \"2:30 AM\" on a day with DST, and you\u0027re even more toast then you were before.",
                                           "updatedAt":  "2019-12-27T07:31:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2OTIxNTM4OQ==",
                                           "createdAt":  "2019-12-27T07:58:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChadNedzlek",
                                           "body":  "Unfortunately, no. For the scenario I ran into where I hit small walls at every turn, we are literally parsing free form text, looking for a pattern of \"Started: [some date/time]\". But humans being humans, we were hoping to be able to handle if they typed \"Started: 15:30\" and be helpful.  It was just... odd... that DateTime loses the timezone/offset, but DateTimeOffset would preserve the offset, but, for some reason, throws if you pass \"NoCurrentDateDefault\", so of my two options, both fail me in small, but blocking, ways.\r\n\r\nMostly I was hoping this issue would get resolved by just removing that exception from DateTimeOffset.Parse and having the same behavior as DateTime (just set 1/1/1 as the date portion). But I was open to there being some good reason that\u0027s not possible (or a better solution being proposed).  It\u0027s very frustrating that I _either_ have to call exact and force a format, or have no way of knowing if the date was even present, or was invented out of whole cloth.\r\n\r\nHeck, I\u0027d even be fine if the behavior was \"NoCurrentDateDefault\" caused it to throw _if no date was given_. So then I could at least provide a useful error message while still accepting a wide range of easily parsed formats (and then I could also just parse it again without that parameter, and replace the date myself).  Right now I need to do parsedValue.Date == DateTimeOffset.Now.Date, and hope that doesn\u0027t produce incorrect values (which I 100% know it will for many, many scenarios, but I don\u0027t have a choice other than to just... hope).\r\n\r\nWe certainly _can_ just fail to parse times alone and gently scold users and force them to enter the current date in the 99% of the cases where they are talking about \u0027today\u0027 (where \"today\" is \"the day I typed this text\", which is recorded in the medium we are parsing), but that is error prone (I\u0027m personally terrible and remembering today\u0027s date, so I\u0027m likely to type the wrong thing) and mostly it\u0027s just a little sad that the functionality seems to exist in the source code, but I can\u0027t get at it because of the exception.  I\u0027d be more than happy to assume that in my scenario, people aren\u0027t talking about the reverse calculated date of January 1st, in the year 1.  I\u0027m willing to bet in 99.99% of usages of DateTimeOffset, no one is meaningfully trying to represent that date in history while parsing date times... and even if the were my proposed change wouldn\u0027t change their scenario (since right now it just throws an exception anyway), so that value is basically the same as \"the null date\".  With that combined with the ability to choose to assume local/utc, my scenario would be met for all but the most ill-formed customer data, and I\u0027m more than willing to tell my users that we have a huge array of options, but \"one hour ago\" isn\u0027t one of them.",
                                           "updatedAt":  "2019-12-27T08:08:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MjgwODI0NA==",
                                           "createdAt":  "2020-01-09T23:44:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "@tarekgh Do you know why DateTimeOffset doesn\u0027t allow NoCurrentDateDefault? https://github.com/dotnet/runtime/blob/72b871dac31e8d5dc4f4b4a96948afa0e681474c/src/libraries/System.Private.CoreLib/src/System/DateTimeOffset.cs#L809-L812",
                                           "updatedAt":  "2020-01-09T23:44:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3MjgxMjMyNw==",
                                           "createdAt":  "2020-01-10T00:01:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Do you know why DateTimeOffset doesn\u0027t allow NoCurrentDateDefault?\r\n\r\nI am not sure but this may be to avoid going before 1/1/1:0:0:0 if the Utc offset is negative. ",
                                           "updatedAt":  "2020-01-10T00:01:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-aDoM",
                                           "createdAt":  "2022-02-21T15:51:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VladimirRybalko",
                                           "body":  "Hi @joperezr \r\nCould you please have a look at this and include it into the next public release. \r\nIt looks ridiculous that the method throws an exception instead of simply return 1/1/1. \r\nIt will be just one line changes, so please don\u0027t put it into the tail of backlog.\r\n\r\nThank you in advance. ",
                                           "updatedAt":  "2022-02-21T15:51:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-ezQA",
                                           "createdAt":  "2022-02-22T22:12:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e It looks ridiculous that the method throws an exception instead of simply return 1/1/1.\r\n\r\nI assume you meant when passing `DateTimeStyles.NoCurrentDateDefault` option. right?\r\n\r\n\u003e It will be just one line changes, so please don\u0027t put it into the tail of backlog.\r\n\r\nI don\u0027t think it is trivial as you think. what happen when I give you a string like `4:23:00-700`? Do you expect we\u0027ll throw at that time? If yes, this means, most of the negative offsets will throw which I don\u0027t think would be a good idea.\r\n\r\nThe behavior needs to be defined first.",
                                           "updatedAt":  "2022-02-22T22:25:46Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Need a way to parse a date string that contains optional date (but has time) and an offset",
        "labels":  [
                       "enhancement",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/33764",
        "createdAt":  "2020-03-19T16:42:25Z",
        "number":  33764,
        "author":  "terrajobst",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T01:54:58Z",
        "body":  "Find places where a `DateTime` known to be in local time (e.g. resulting from `DateTime.Now`) is used in math.\n\n**Category**: Reliability",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM6LvoA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwMTk2NzIwNA==",
                                           "createdAt":  "2020-03-21T00:42:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Estimates:\r\n* Analyzer: Large\r\n* Fixer: Not Applicable",
                                           "updatedAt":  "2020-03-21T00:42:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwMjAyMzcyNQ==",
                                           "createdAt":  "2020-03-21T10:22:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "This might be a dup of https://github.com/dotnet/roslyn-analyzers/issues/2937.",
                                           "updatedAt":  "2020-03-21T10:22:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxODE5MDE1MQ==",
                                           "createdAt":  "2020-10-28T20:29:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "@stephentoub I\u0027m not sure if they are the same. That issue is talking about leap year math specifically.\r\n\r\ndotnet/roslyn-analyzers#2937 already got approved back in Dec 2019, before we decided analyzers should go through API proposals in the runtime repo. It even has [a PR](https://github.com/dotnet/roslyn-analyzers/pull/3152) to implement it.",
                                           "updatedAt":  "2020-10-28T20:29:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDI3NjgzMQ==",
                                           "createdAt":  "2021-02-05T20:40:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "1. Track `DateTime` instances created using `DateTime.Now` or `DataTime dt = DateTime.SpecifyKind(datetime, DateTimeKind.Local);`. \r\n    - Probably might want to add instances initiated with `DateTime.Today` because it also created with `DateTimeKind .Local`\r\n2. Flag usages in Math or comparison operation (for all operators except addition `-, ==, !=, \u003c, \u003c=, \u003e, \u003e=`) and methods that do not consider the value of the `DateTime .Kind` property of the two `DateTime` values for  Math or comparison operation (`DateTime.Compare, DateTime.CompareTo, DateTime.Subtract, DateTime .Equals`)\r\n\r\n",
                                           "updatedAt":  "2021-02-05T20:40:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDMwNTM5Nw==",
                                           "createdAt":  "2021-02-05T21:45:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "Suggested severity: warning\r\n\r\nExamples:\r\n```cs\r\nstatic void Main()\r\n{\r\n    // Local\r\n    DateTime now = DateTime.Now;\r\n    DateTime nowLocal = DateTime.SpecifyKind(now, DateTimeKind.Local);\r\n    DateTime nowUtc = DateTime.SpecifyKind(now, DateTimeKind.Utc);\r\n    DateTime today = DateTime.Today;\r\n\r\n    // UTC\r\n    DateTime utc = DateTime.UtcNow;\r\n\r\n    // Unspecified\r\n    DateTime nowWithUnspecifiedKind = DateTime.SpecifyKind(now, DateTimeKind.Unspecified);\r\n\r\n\r\n\r\n    //// FLAGGED ////\r\n\r\n    // Flag the variable \u0027now\u0027\r\n    TimeSpan substracted = now - utc;\r\n    TimeSpan substracted2 = now.Subtract(utc);\r\n\r\n    // Flag the variable \u0027today\u0027\r\n    bool equal = today == utc;\r\n    bool notEqual = today != utc;\r\n    bool lessThan = today \u003c= utc;\r\n    bool greatedThan = today \u003e utc;\r\n\r\n    // Flag the variables \u0027nowLocal\u0027\r\n    bool equal2 = nowLocal.Equals(utc);\r\n    int compareTo = utc.CompareTo(nowLocal);\r\n\r\n    // We are comparing unknown with DateTime.Now\r\n    bool equalFromMethod = GetDateTime() == now;\r\n    bool equalFromProperty = MyDateTime == now;\r\n\r\n    // Known local compared with unspecified\r\n    int compareWithUnspecified2 = DateTime.Compare(nowWithUnspecifiedKind, now);\r\n\r\n\r\n\r\n    //// NOT FLAGGED ////\r\n\r\n    // Skip this case: it not possible to add two datetimes\r\n    // TimeSpan addition = now + utc;\r\n\r\n    // Math with timespans does not care about timezone\r\n    DateTime addition = now + TimeSpan.FromDays(5);\r\n    DateTime additionUtc = utc + TimeSpan.FromDays(5);\r\n\r\n    // Both are local\r\n    bool equalAllowed = today == now;\r\n\r\n    // Both are utc\r\n    int compareToAllowed = utc.CompareTo(nowUtc);\r\n\r\n    // Don\u0027t know if the returned values of methods and properties are DateTime.Now or not\r\n    bool equalFromMethod2 = GetDateTime() == utc;\r\n    bool equalFromProperty2 = MyDateTime == utc;\r\n\r\n\r\n\r\n\r\n    //// UNCLEAR ////\r\n\r\n    // Should unspecified DateTimeKind be flagged when compared to a known utc or a known now?\r\n    int compareWithUnspecified = DateTime.Compare(nowWithUnspecifiedKind, utc);\r\n}\r\n\r\nstatic DateTime GetDateTime()\r\n{\r\n    DateTime x = ...;\r\n    return x;\r\n}\r\n\r\nstatic DateTime MyDateTime\r\n{\r\n    get\r\n    {\r\n        DateTime x = ...;\r\n        return x;\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2021-02-05T21:45:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwNDIzODU0Nw==",
                                           "createdAt":  "2021-03-22T17:09:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "Hi.  Just seeing this now, but I\u0027m very interested and would like to help in any way I can.\r\n\r\nFeedback on the proposal:\r\n\r\n- I suggest flagging any usage of local time if the project is an ASP.Net project (assuming such awarness is possible.)  Local time in a web project is the time zone setting of the *server*, which is often UTC but should be considered irrelevant.  The analyzer would warn on any usage of `DateTime.Now`, `DateTime.Today`, `DateTimeOffset.Now`, `DateTimeKind.Local`, or `TimeZoneInfo.Local` - but only when the project sdk is `Microsoft.NET.Sdk.Web`.\r\n\r\n- I\u0027m unsure why `equalFromMethod` and `equalFromProperty` are flagged but `equalFromMethod2` and `equalFromProperty2` are not.  It seems the only difference is one is comparing against UTC and one is comparing against local time.  Both have unknown (not unspecified) kind on the left-side, so I would think that comparison should be allowed.  Same for `compareWithUnspecified2`.   In particular, it is a common use case to pull a datetime from elsewhere and compare against local time.  For example, the following should be allowed:\r\n\r\n  ```csharp\r\n  // call some retrieval or calculation function that returns the current birthday (with time truncated)\r\n  DateTime birthday = GetCurrentYearBirthday();\r\n\r\n  // equality comparison to local time is valid for desktop apps\r\n  if (birthday == DateTime.Today)\r\n      Console.WriteLine(\"Happy Birthday!\");\r\n  ```\r\n\r\n- The above addresses comparison with unknown or unspecified against local time.  However, the \"unclear\" item is asking about UTC comparison.  I believe that case *should* be flagged.  Comparison to UTC is inherently a point-in-time operation.  If one side is UTC but the other is known to be Local or Unspecified kinds, then it should flag.  (but not if one side is unknown)\r\n\r\n- The statement \"Math with timespans does not care about timezone\" is incorrect.  This is a common source of bugs related to daylight saving time transition.  Adding to a `DateTime` goes strictly off wall time, so if one adds an absolute unit of time to a non-UTC `DateTime`, then they could potentially be getting invalid results if the operation crosses a transition in the relevant time zone.   I suggest flagging on `Add`, `AddHours`, `AddMinutes`, `AddSeconds`, and `AddTicks` when the kind is known to be `Local` or `Unspecified`.  Don\u0027t flag on `Utc` or unknown kind.  Don\u0027t flag `AddYears`, `AddMonths`, or `AddDays` at all, because those are date-math operations that are *expected* to operate on wall-time rather than absolute time.\r\n\r\nAlso, I worked with @kwilkins on the original leap-year efforts.  He wrote the analyzer that we sent the PR for, but has since moved on to other efforts.  The feedback from that PR is that we should re-write it using a dataflow analysis approach.  I am just starting to pick this back up and am researching that approach.  I think it applies to much of what is written here as well.\r\n\r\nMay I suggest that the leap-year analyzer proposal (https://github.com/dotnet/roslyn-analyzers/issues/2937) and the one proposed here be merged into a common set of date/time analyzers?  I believe the previous PR (https://github.com/dotnet/roslyn-analyzers/pull/3152) can be abandoned.\r\n\r\nI can think of many other useful scenarios that could be added to this as well - various time zone and DST issues such as the ones [I blogged about many years ago](https://codeofmatt.com/five-common-daylight-saving-time-antipatterns-of-net-developers/), and others.  I\u0027d like to participate in the design and implementation of this.  Is the best way to go through the proposal process for each one? Or should I perhaps start on a standalone implementation to prototype?\r\n\r\nThanks.",
                                           "updatedAt":  "2021-03-22T17:24:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDA0NjcwNg==",
                                           "createdAt":  "2021-06-03T17:23:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "[Video](https://www.youtube.com/watch?v=m8JAKGO8zrI\u0026t=0h14m3s)\n\nIt\u0027s unclear what is being proposed here.  The examples seem to focus on the interaction with DateTimeKind.Local and DateTimeKind.Utc, not \"do[ing] math with local DateTime\", as the title suggests.\r\n\r\nIt\u0027s also not clear if this is realistically achievable, since any DateTime that comes in as a method parameter has a DateTimeKind that is not known to the called method (unless something coerced it).\r\n\r\nPerhaps an updated title, or more clear examples would help drive a discussion.",
                                           "updatedAt":  "2021-06-03T19:15:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NjMxNjE5Mg==",
                                           "createdAt":  "2021-06-22T20:36:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "\u003e I\u0027d like to participate in the design and implementation of this. Is the best way to go through the proposal process for each one? Or should I perhaps start on a standalone implementation to prototype?\r\n\r\n@mattjohnsonpint your help is more than welcome!\r\n\r\n- Do you think the title should be changed to \"Do not do math or comparisons with local DateTime\"?\r\n- Can you please help write the updated analyzer proposal that contains your described scenarios? Feel free to copy the original one and expand it / correct it as needed.\r\n",
                                           "updatedAt":  "2021-06-22T20:37:10Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Do not do math with local DateTime",
        "labels":  [
                       "api-needs-work",
                       "code-analyzer",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/34145",
        "createdAt":  "2020-03-26T18:16:28Z",
        "number":  34145,
        "author":  "Thraka",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T01:54:35Z",
        "body":  "_From @Emeka-NMC on Thursday, March 26, 2020 5:02:27 AM_\r\n\r\n\r\n[Suggestion To Add Unique Format-Specifiers For DateTime Offset]\r\n\r\nDateTime-FormatString doesn\u0027t have unique characters that represents the _offset-hour_ and _offset-minutes_. Instead it uses the following format/convention:\r\n \r\n| # | Offset Format specifier | Offset Format |\r\n|:---|:---|:---|\r\n| 1 | z | +-H  |\r\n| 2 | zz | +-HH  |\r\n| 3 | zzz | +-HH:mm  |\r\n \r\nCan we create unique specifiers for offset-hour and another for offset-minute?\r\nFor example:\r\n| # | Offset Format specifier | Offset Format |\r\n|:---|:---|:---|\r\n| 1 | r\u003csup\u003e1\u003c/sup\u003e | H  |\r\n| 2 | rr | HH  |\r\n| 4 | n\u003csup\u003e1\u003c/sup\u003e | +/- |\r\n| 4 | e\u003csup\u003e1\u003c/sup\u003e | m |\r\n| 5 | ee | mm |\r\n \r\n_\u003csup\u003e1\u003c/sup\u003e I chose the last characters in Hou(r), Sig(n), and Minut(e) to represent the offset specifiers._\r\n\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: dda93f14-f1b5-fde6-e441-302cdac261ab\r\n* Version Independent ID: 96abc7c4-3719-82da-e271-881d62f0640f\r\n* Content: [Custom date and time format strings](https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings#feedback)\r\n* Content Source: [docs/standard/base-types/custom-date-and-time-format-strings.md](https://github.com/dotnet/docs/blob/master/docs/standard/base-types/custom-date-and-time-format-strings.md)\r\n* Product: **dotnet**\r\n* Technology: **dotnet-standard**\r\n* GitHub Login: @Thraka\r\n* Microsoft Alias: **adegeo**\r\n\r\n_Copied from original issue: dotnet/docs#17603_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJwvh0A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNDU5MzY1Mg==",
                                           "createdAt":  "2020-03-26T18:16:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Thraka",
                                           "body":  "_From @Thraka on Thursday, March 26, 2020 6:13:42 PM_\r\n\r\nSorry, we\u0027re just documentation for how it currently works. You should make your suggestion at https://github.com/dotnet/runtime/issues. I\u0027ll move this issue there.",
                                           "updatedAt":  "2020-03-26T18:16:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNDY1MDIwNQ==",
                                           "createdAt":  "2020-03-26T19:52:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "@Emeka-NMC - Is there a specific problem you\u0027re trying to solve by getting split specifiers?\r\n\r\nNote that, contrary to what you may expect, it\u0027s the _entire_ offset which is the field/unit; specifying anything other than `\u0027zzz\u0027` is almost always going to be wrong due to the existence of multiple timezones/offsets with non-hour amounts (and that half of them are negative, requiring the addition of a sign).\r\n\r\n",
                                           "updatedAt":  "2020-03-26T19:52:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNDczMTk2MA==",
                                           "createdAt":  "2020-03-26T23:06:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Emeka-NMC",
                                           "body":  "\u003e _Is there a specific problem you\u0027re trying to solve by getting split specifiers?_\r\n\r\n@Clockwork-Muse, Yes, date-time-offset can be used to generate filenames/etc, or log. So being able to apply custom format to each field will be useful.\r\n* It supports `-07:00`\r\n* But what if I need `-0700`?\r\n\r\nWith my original recommendation, this will work: `DateTimeOffset.UtcNow.Offset.ToString(\"nrree\")`\r\nNOTE: I added `r` and `e` just for completeness sake. \r\n\r\n\u003e _I\u0027s the entire offset which is the field/unit_\r\n\r\nYes, similar to the HH:mm being the time-component of a date-time-offset struct. Within this time-component, I think of HH as the hour field, and mm as the minute field. These fields are combined and formatted to represent the time-component of date-time-offset. Same applies to the offset-component; it has an hour-field, a minute-field, and a reference-sign-field. They, together gets formatted. Having the ability to format this offset-component (in the same DateTimeOffset.ToString(....) command will make things easier.",
                                           "updatedAt":  "2020-03-26T23:07:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNDc1MjM0OQ==",
                                           "createdAt":  "2020-03-27T00:21:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  ".... Ignoring the potential in/advisability about disambiguating logs by offset....\r\n\r\n\u003e - It supports -07:00\r\n\u003e - But what if I need -0700?\r\n\r\nThat\u0027s a slightly different ask than separate format specifiers for each element, and one I personally would be more amenable to.\r\n\r\n\u003e Yes, similar to the HH:mm being the time-component of a date-time-offset struct. Within this time-component, I think of HH as the hour field, and mm as the minute field. \r\n\r\nRight - what I\u0027m getting at is that the offset _is one field_, equivalent to hours or minutes.  Subdividing it - or leaving off the sign - is leaving out part of the field, and results in nonsense.  (This is somewhat in contrast to dates/times that are often _truncated_ -  where smaller fields are omitted; you can\u0027t reasonably truncate an offset).\r\n\r\nPersonally, I feel that the current hour-only specifiers are in error - the offset should never be formatted without minutes, if it has any.\r\n\r\n",
                                           "updatedAt":  "2020-03-27T00:21:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNTMyMjAxNw==",
                                           "createdAt":  "2020-03-27T21:26:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Emeka-NMC",
                                           "body":  "\u003e _Subdividing it - or leaving off the sign - is leaving out part of the field, and results in nonsense._\r\n\r\nThank you for the response. Doesn\u0027t the above statement assumes that the user always intends on retaining the original meaning of date-time-offset? What if the user just needs to use/extract parts of the date-time-offset in order to generate some other data?\r\n\r\nI think this [Wiki UTC_Offset](https://en.wikipedia.org/wiki/UTC_offset) article may offer additional context:\r\n\u003e The UTC offset is the difference in hours and minutes from Coordinated Universal Time (UTC) for a particular place and date. It is generally shown in the format ±[hh]:[mm], ±[hh][mm], or ±[hh]. So if the time being described is one hour ahead of UTC (such as the time in Berlin during the winter), the UTC offset would be \"+01:00\", \"+0100\", or simply \"+01\".\r\n\r\ni.e. having the ability to represent the _offset field_ portion of date-time-offset _\"in the format ±[hh]:[mm], ±[hh][mm], or ±[hh]\"_ will be useful.",
                                           "updatedAt":  "2020-03-27T21:26:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNTM1MDkzMg==",
                                           "createdAt":  "2020-03-27T23:09:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e What if the user just needs to use/extract parts of the date-time-offset in order to generate some other data?\r\n\r\nThen you should probably be working with the `Offset` property directly, not monkeying with the output format string.\r\n\r\n\u003e i.e. having the ability to represent the offset field portion of date-time-offset \"in the format ±[hh]:[mm], ±[hh][mm], or ±[hh]\" will be useful.\r\n\r\nSure, but what you\u0027re asking for isn\u0027t the best way to achieve that.  In particular, there\u0027s no reason for the sign to be optional, and minutes can\u0027t be left off if there are any.  Oh, and note that leading zeroes aren\u0027t removed in their example.\r\n\r\nInstead, the format specifiers for the offset should likely be (replacing all instances of the `\u0027z\u0027` specifiers):\r\n\r\n| Specifier | Format        | Examples                      |\r\n|-----------|---------------|-------------------------------|\r\n| XX        | ±[hh]:[mm]    | `-700-\u003e\"-07:00\"` `630-\u003e\"+06:30\"` |\r\n| X         | ±[hh]\\(:[mm])? | `-700-\u003e\"-07\"` `630-\u003e\"+06:30\"`    |\r\n| xx        | ±[hh][mm]     | `-700-\u003e\"-0700\"` `630-\u003e\"+0630\"`   |\r\n| x         | ±[hh]\\([mm])? | `-700-\u003e\"-07\"` `630-\u003e\"+0630\"`     |",
                                           "updatedAt":  "2020-03-27T23:09:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNTU0OTA3Mg==",
                                           "createdAt":  "2020-03-29T02:32:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Emeka-NMC",
                                           "body":  "Your proposal makes sense, but doesn\u0027t address my original problem/request: _support for granular-format-specifiers for offset field._\r\n\r\n**Why?**\r\nI think that your proposal is based on the premise that we should always treat offset as an opaque/single-field object, even though it\u0027s actually a `TimeSpan` object (similar to `TimeOfDay`.)\r\n\r\n\r\n**Format vs Create**\r\n\u003e In particular, there\u0027s no reason for the sign to be optional, and minutes can\u0027t be left off if there are any.\r\n\r\nDoesn\u0027t the above statement assume that the resulting (custom-formatted) data still represents a DateTimeOffset? The intent of the user might be to _create_ a new/different data-type, i.e. with parts from a `DateTimeOffset`.\r\n\r\n**Summary**\r\n* We can do this: `DateTimeOffset.ToString(\"\u0027[\u0027yyyy\u0027,\u0027MM\u0027,\u0027dd\u0027,\u0027HH\u0027,\u0027mm\u0027,\u0027ss\u0027,\u0027fffffff\u0027,\u0027zzz\u0027]\u0027\")`\r\n* And I want to do this (for e.g.): `DateTimeOffset.ToString(\"\u0027[\u0027yyyy\u0027,\u0027MM\u0027,\u0027dd\u0027,\u0027HH\u0027,\u0027mm\u0027,\u0027ss\u0027,\u0027fffffff\u0027,\u0027n\u0027,\u0027rr\u0027,\u0027ee\u0027]\u0027\")`\r\n  i.e. without the additional step of concatenating the `.Offset.ToString(...)`\r\n",
                                           "updatedAt":  "2020-03-29T02:32:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNTU5MDAwMA==",
                                           "createdAt":  "2020-03-29T06:29:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003eI think that your proposal is based on the premise that we should always treat offset as an opaque/single-field object, even though it\u0027s actually a `TimeSpan` object (similar to `TimeOfDay`.)\r\n\r\n...yes, I believe it should be.  Because the C# object isn\u0027t actually important here, but the domain type, which is a single date/time field named \"offset\".\r\n\r\n\u003eDoesn\u0027t the above statement assume that the resulting (custom-formatted) data still represents a DateTimeOffset? The intent of the user might be to create a new/different data-type, i.e. with parts from a `DateTimeOffset`.\r\n\r\nDepending on what you\u0027re doing, again, I\u0027d recommend you convert to the new C# type directly, rather than going through the trouble of serializing it.  You\u0027d only need to turn it into a string if your actual domain type required it.  \r\n\r\nAnd your last example is something I\u0027d recommend against, and am trying to prevent.  Especially separating out the sign like that.  ",
                                           "updatedAt":  "2020-03-29T06:29:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTA5MDEyOA==",
                                           "createdAt":  "2020-07-07T19:51:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "FYI: @tarekgh ",
                                           "updatedAt":  "2020-07-07T19:51:49Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Suggestion For DateTime Offset",
        "labels":  [
                       "enhancement",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38412",
        "createdAt":  "2020-06-25T20:35:16Z",
        "number":  38412,
        "author":  "QuinnDamerell",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCEnlbg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ascott18",
                                            "createdAt":  "2021-11-30T17:41:06Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-11-22T01:54:37Z",
        "body":  "### Description\r\n\r\nDateTime.AddMilliseconds takes a double, but when the add operation actually happens the value passed in gets rounded to an integer. This breaks the use of DateTime with any granularity under 1ms, for example, game loops where you\u0027re trying to render evert 16.6666ms.\r\n\r\n### Configuration\r\n\r\nDotnet Core Current (tested on 3.1)\r\n\r\n### Regression?\r\n\r\nUnsure\r\n\r\n### Other information\r\n\r\nThe issue is the function `private DateTime Add(double value, int scale)` in DateTime.cs. This following line is the issue.\r\n\r\n`return AddTicks((long)millis_double * TicksPerMillisecond);`\r\n\r\nThe `millis_double ` value is a double, but cast to a long before being multiplied by the long value. Thus the double is truncated to an integer. The simple fix for this would be to cast TicksPerMillisecond as a double and then cast the result to a long.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHON_ZdQw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0OTgwMzkzMA==",
                                           "createdAt":  "2020-06-25T20:35:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-06-25T20:35:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MTUxODQ1MA==",
                                           "createdAt":  "2020-06-30T04:09:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joshudson",
                                           "body":  "We actually encountered the other roundoff problem with this API surface. Kinda disappointed there\u0027s no overload for these that takes a long. It\u0027s a one-liner but easy to get the order of operations wrong.",
                                           "updatedAt":  "2020-06-30T04:09:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MTUyNDIyMQ==",
                                           "createdAt":  "2020-06-30T04:26:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "QuinnDamerell",
                                           "body":  "@joshudson which other round off issue are you refering to? ",
                                           "updatedAt":  "2020-06-30T04:26:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MTg0NTU1MQ==",
                                           "createdAt":  "2020-06-30T14:52:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntonLapounov",
                                           "body":  "Previously discussed in #23771.",
                                           "updatedAt":  "2020-06-30T14:52:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MjExNTAzMA==",
                                           "createdAt":  "2020-07-01T00:21:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joshudson",
                                           "body":  "Trying to add a few thousand years worth of milliseconds loses a few milliseconds due to roundoff.",
                                           "updatedAt":  "2020-07-01T00:21:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTE2ODMzMg==",
                                           "createdAt":  "2020-07-07T22:25:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "cc: @tarekgh ",
                                           "updatedAt":  "2020-07-07T22:25:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTE4NjgyMA==",
                                           "createdAt":  "2020-07-07T23:15:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "This dup of https://github.com/dotnet/runtime/issues/23771 and we have tried to change this behavior and caused other problems. you may look at https://github.com/dotnet/coreclr/pull/10352 for more details. I would say if we need to support the version for not rounding the number, we should do it in a new API instead. ",
                                           "updatedAt":  "2020-07-07T23:15:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTE5NTUwNA==",
                                           "createdAt":  "2020-07-07T23:40:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joshudson",
                                           "body":  "@tarekgh : I want to know how to make custom code quality rules that read \"don\u0027t call this function\" the number of broken functions is getting too large to remember.",
                                           "updatedAt":  "2020-07-07T23:40:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NTE5ODYzMA==",
                                           "createdAt":  "2020-07-07T23:51:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I am reopening to look more if we can fix this with less breaking effect.",
                                           "updatedAt":  "2020-07-07T23:51:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc438yfl",
                                           "createdAt":  "2021-10-08T14:20:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wzchua",
                                           "body":  "This was resolved in https://github.com/dotnet/coreclr/pull/24279",
                                           "updatedAt":  "2021-10-08T14:20:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4389hE",
                                           "createdAt":  "2021-10-08T15:22:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@wzchua : No it isn\u0027t! There\u0027s not enough precision in a double to store the entire range.",
                                           "updatedAt":  "2021-10-08T15:22:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc438-g8",
                                           "createdAt":  "2021-10-08T15:28:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "So, here\u0027s the easiest fix I can come up with, noting that only AddMilliseconds is affected:\r\n\r\n````\r\n    public void AddMilliseconds(long value) =\u003e AddTicks(value * TimeSpan.TicksPerMillisecond);\r\n    public void AddMilliseconds(int value) =\u003e AddTicks((long)value * TimeSpan.TicksPerMillisecond); /* Promote int to long or double is ambiguous */\r\n````",
                                           "updatedAt":  "2021-10-08T15:28:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc439EVd",
                                           "createdAt":  "2021-10-08T16:02:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wzchua",
                                           "body":  "I believe the issue is about how something like 0.1 ms would be truncated to 0 losing precision there",
                                           "updatedAt":  "2021-10-08T16:02:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc439ExG",
                                           "createdAt":  "2021-10-08T16:05:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@wzchua : But I got it with a very large number. Same basic problem.",
                                           "updatedAt":  "2021-10-08T16:05:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc439l1D",
                                           "createdAt":  "2021-10-08T17:14:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "`double` can precisely represent whole integers up to 2^52. In terms of `DateTime` ticks, this is approx. `14.28 years`\r\n\r\nThere are likely things that could be done to improve accuracy for inputs that become very large here, but anything completely accurate would need to convert to and deal with `ticks` directly and as soon as possible.",
                                           "updatedAt":  "2021-10-08T17:14:15Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "DateTime.AddMilliseconds takes a double but rounds to an int",
        "labels":  [
                       "bug",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/39816",
        "createdAt":  "2020-07-23T04:07:24Z",
        "number":  39816,
        "author":  "sgryphon",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCyyekw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2020-07-23T09:53:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "antiufo",
                                            "createdAt":  "2020-07-23T12:58:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austinw-fineart",
                                            "createdAt":  "2023-03-01T05:09:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andrewdbond",
                                            "createdAt":  "2023-09-22T14:19:05Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2024-05-17T06:45:31Z",
        "body":  "aka _The Date project_\r\n\r\n## Background and Motivation\r\n\r\nDotnet Core contains several types for representing dates and times. As noted in the guidance documentation, developers should _\"consider `DateTimeOffset` as the default date and time type for application development\"_ (https://docs.microsoft.com/en-us/dotnet/standard/datetime/choosing-between-datetime)\r\n\r\nHowever in many cases, in examples, component packages, and business software, `DateTime` is used, even though it is the incorrect type -- part of this is historical because `DateTime` existed prior to `DateTimeOffset`. This issue even affects Dotnet and many examples from Microsoft, where `DateTime` is often used where `DateTimeOffset` would be more appropriate.\r\n\r\n**This proposal -** Everywhere that an ambigious `DateTime` has been used in Dotnet, it should be supplemented with an unambiguous `DateTimeOffset`, and these values should be promoted as the default for future use. \r\n\r\nIt is currently difficult to follow the guidance advice and use `DateTimeOffset` when basic classes like `FileInfo` only use `DateTime`.\r\n\r\nThere are still some uses for `DateTime`. For some, such as working with UTC dates and times, `DateTimeOffset` can also be used, and should still be considered the default, or for working with times only then `TimeSpan` can be used.\r\n\r\nThe cases where `DateTime` is the correct class are:\r\n\r\n* working with dates only, for example a birthdate for calculating something like drinking age only the date part is relevant -- it is generally not relevant which timezone you were born in or your current timezone.\r\n\r\n* working with abstract dates and times, for example in a calendar application; a common example is having a meeting at 09:00 on the first of each month, where the instance of time will vary in line with timezones. In these cases the date and time components need to be treated separately.\r\n\r\nIn both these cases, only the date part is used, not the full `DateTime`, and would be better served by a `Date` only structure; for all other cases either `DateTimeOffset` or another type (`TimeSpan`) is more appropriate. In some cases (e.g. calendar) both a `Date` and `TimeSpan` value would be needed, but also need to be handled independently (and not combined into a single `DateTime` value).\r\n\r\nPromoting the use of `Date`, for date only, and `DateTimeOffset`, for other scenarios, will help eliminate the issues that can arise from using ambiguous dates, e.g. where a field is supposed to be date only bug a bug has introduce a time component into the `DateTime` field -- such a bug is not possible with a date only structure.\r\n\r\nThe long term goal is to eventually be able to mark `DateTime` as `Obsolete` -- something that I have proposed before.\r\n\r\n## Proposed API\r\n\r\nThe new API changes would consist of adding a `Date` struct, and adding `DateTimeOffset` properties through Dotnet to supplement where there is currently only a `DateTime`.\r\n\r\nTo implement unambiguous single points of time across the entire Dotnet is a large, long term project, that can be done incrementally, with the following roadmap:\r\n\r\n1. Implement a Date structure for those scenarios that require only date. This will eliminate the need to ambiguously use `DateTime` with a time component, where only date is needed.\r\n\r\nA basic structure can be introduced, and then incrementally added to as needed.\r\n\r\n2. Incrementally add supplementary `DateTimeOffset` properties anywhere that `DateTime` is used in Dotnet. This would allow the guidance of \"consider `DateTimeOffset` as the default\" to be acted upon.\r\n\r\nIn some cases these values may already exist, e.g. `FileSystemInfo` already uses `DateTimeOffset` internally but just doesn\u0027t expose it in the API. \r\n\r\nSearching the code for something like \"[\\s.()=+-/*!\u0026\\[\\]{}]DateTime[\\s.()=+-/*!\u0026\\[\\]{}]\" within .cs files gives an idea of the scope -- 10,000 references across 1,000 files.\r\n\r\n3. Remove the dependency from `DateTimeOffset` on `DateTime`. Internally `DateTimeOffset` uses `DateTime`, plus the offset. This should be changed to a ulong, and make `DateTimeOffset` a stand alone structure without dependency on `DateTIme` limited to conversions.\r\n\r\nInitially, this would involve duplication of some code from `DateTime` to `DateTimeOffset` (there is also duplication in some places like `comdatetime`). Further incremental changes may reverse the dependency, e.g. `DateTime` could call an `IsValidTimeWithLeapSeconds` in `DateTimeOffset`, to then remove the duplication.\r\n\r\n4. As an additional aid, any example code, training material, documentation, and other guidance can also be incrementally updated, e.g. any examples that reference `FileInfo` should be updated to show examples using `DateTimeOffset` fields, not date time.\r\n\r\nSteps 1-4 can be done in parallel, incrementally.\r\n\r\n5. Once all functionality has been moved across, places where `DateTime` is used can be incrementally marked `Obsolete` and/or hidden from editors (e.g. Intellisense), via `[EditorBrowsable(EditorBrowsableState.Never)]`.\r\n\r\nNote that marking something `Obsolete` is not a directly breaking change, the API is the same and does not break any runtime dependencies. There may, however, be some indirect issues when recompiling any dependencies if \"treat warnings as errors\" is turned on -- these would be good indicators to fix those dependencies to also use the `DateTimeOffset` alternative. You could potentially start this before steps 1-4 are complete, but it may be clearer to wait.\r\n\r\n6. Eventually, `DateTime` itself can be marked `Obsolete`, and/or hidden, having been fully replaced by `DateTimeOffset` and, in some cases, `Date`. \r\n\r\nThere may be opposition to marking `DateTime` `Obsolete`, due to the possibility of breaking build systems that have treat warnings as errors turned on (not a runtime breaking change), but if all instances within Dotnet have been replaced, and after sufficient time, this should be possible. Once this is achieved, ambiguous dates and times will have been eliminated from Dotnet.\r\n\r\nA compromise may be to hide the class from editors, which will not break builds but help encourage future developers follow the guidance and use `DateTimeOffset`.\r\n\r\nNote: I have previously raised a suggestion to mark `DateTime` as `Obsolete`.\r\n\r\n## Usage Examples\r\n\r\nThe overview example of **How to get information about files, folders, and drives**, (https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/file-system/how-to-get-information-about-files-folders-and-drives) would be changed to use the `DateTimeOffset` version of the property. \r\n\r\n``` C#\r\n        foreach (System.IO.FileInfo fi in fileNames)\r\n        {\r\n            Console.WriteLine(\"{0}: {1}: {2}\", fi.Name, fi.LastAccessAt, fi.Length);\r\n        }\r\n```\r\n\r\nThe corresponding current properties on `FileInfo` (`FileSystemInfo`) are `LastAccessTime` and `LastAccessTimeUtc`. The specific pattern used for `DateTimeOffset` properties can be discussed and agreed. \r\n\r\nOther possible variations could be `LastAccess`, `LastAccessTimeAt`, `LastAccessedAt`, or `LastAccessedTimeAt`. Another possible variation is a past tense form `LastAccessed` similar to the `IFileInfo` interface from `Microsoft.Extensions.FileProviders`, although this could be confused with the conventions for event names.\r\n\r\n\r\n## Alternative Designs\r\n\r\n\u003c!--\r\nWere there other options you considered, such as alternative API shapes?\r\nHow does this compare to analogous APIs in other ecosystems and libraries?\r\n--\u003e\r\n\r\nThe main well known alternative is probably Noda Time (https://nodatime.org/).\r\n\r\n## Risks\r\n\r\n\u003c!--\r\nPlease mention any risks that to your knowledge the API proposal might entail, such as breaking changes, performance regressions, etc.\r\n--\u003e\r\n\r\nThere is probably a lot of opposition to trying to replace a core construct such as `DateTime`, although the professional guidance is that in most cases `DateTimeOffset` is far more appropriate to use.\r\n\r\nMarking it `Obsolete` could also indirectly cause issues with build processes in some cases, although it does not break runtime API compatibility.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfizMHg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MjgwODg1OQ==",
                                           "createdAt":  "2020-07-23T04:07:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-07-23T04:07:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2MzA2MzIxOA==",
                                           "createdAt":  "2020-07-23T15:11:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCsqZCg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mattjohnsonpint",
                                                                               "createdAt":  "2020-08-02T14:57:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "EduardoLarios",
                                                                               "createdAt":  "2021-03-28T05:56:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2022-09-22T14:41:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "... we\u0027ve had `System.Time.Date` and `System.Time.Time` types in corefxlab for years, although they\u0027ve never been pulled in.\r\n\r\nPersonally, I rather wish that we\u0027d get a good, complete, first-party date/time library, [like I proposed years ago](https://github.com/dotnet/runtime/issues/14744).  For one thing, it allows representations much closer to conceptual/semantic than the limited types you\u0027ve proposed.  Although the migration plan you\u0027ve outlined here is essentially what I imagined.\r\n\r\nNote that `DateTimeOffset` is often not the correct _semantic_ type - normally you want either an equivalent to NodaTime\u0027s `Instant` or `DateTimeZoned` (it often ends up being the correct \"solution\" type, since it\u0027s what\u0027s available).  For instance, file access times should really be represented as an `Instant` (since any zone, including UTC, is irrelevant).",
                                           "updatedAt":  "2020-07-23T15:11:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NDEyMTMxOQ==",
                                           "createdAt":  "2020-07-27T05:06:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sgryphon",
                                           "body":  "While NodaTime is good, I think simplicity is more important. `DateTimeOffset` already exists in the framework, and doesn\u0027t have the drawbacks of `DateTime`.\r\n\r\n`DateTimeOffset` can perform all the functions of `Instant`, such as comparison, without any of the drawbacks of `DateTime`. In theory a `DateTime` fixed to UTC could do similar, but there is a high risk of getting out of sync with any manipulation that involves local times.\r\n\r\n`DateTimeOffset` does contain additional information -- not just the instance of time, but the system offset at the time it was captured / or desired to be displayed in. Whilst this takes up additional storage, it doesn\u0027t lead to any problems.\r\n\r\n\u003e equivalent to NodaTime\u0027s `Instant`... file access times should really be represented as an `Instant` (since any zone, including UTC, is irrelevant). \r\n\r\nThe problem with `Instant` is that while it is okay from a programmatic side, usually at some point you want to display values to users, and showing the UTC instant would be a bit strange. `DateTimeOffset` is a compromise as you can, mostly, show local times to users, similar to what `DateTime` would, but without the ambiguity in code.\r\n\r\nAs a default, e.g. a simple programming example for new programmers, displaying a file time, or clock, in the \"local\" time is probably easier to understand.  Plus, `DateTimeOffset` already exists in the framework, and is a smaller, incremental change, that could be made.\r\n\r\nA change to `Instant` would be more complicated, and I question whether the slight improvement in semantics is worth the additional complexity.\r\n\r\n\u003e or `DateTimeZoned` (it often ends up being the correct \"solution\" type, since it\u0027s what\u0027s available). For instance, \r\n\r\nI consider `DateTimeZoned` a much more complicated type that, while on the surface seems good, is generally ambiguous for most uses of date and time, i.e. figuring out when something did or should happen. To correlate back to something in the real world, you are always correlating to an instant of time.\r\n\r\nThe NodaTime `Instance` is never ambiguous about that; likewise `DateTimeOffset` is never ambiguous about the instance that it represents.\r\n\r\nIn contrast, to resolve `DateTimeZoned` to a real world instance is dependent upon on how up to date the associated timezone database is, and ensuring that everything accessing the value is using the same database.\r\n\r\nWhile `DateTimeOffset` could display wrong (showing 05:00 +11 instead of 04:00 +10) due to an incorrect database, the real world instance of time it represents is never ambiguous. \r\n\r\nMaybe as a display value (user input/output) a zoned time is useful, but internally you would in most cases want to store something that represents an instance.\r\n\r\nWhere you do use it, such as a calendaring app, you probably need all the individual parts - time, timezone, date (or even day of month separate from month).\r\n\r\nWhile maybe it could be useful, I think using what we already have (`DateTimeOffset`) is more achievable, and in an incremental fashion.",
                                           "updatedAt":  "2020-07-27T05:06:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NDE3NTE1OQ==",
                                           "createdAt":  "2020-07-27T07:38:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e The problem with `Instant` is that while it is okay from a programmatic side, usually at some point you want to display values to users, and showing the UTC instant would be a bit strange. `DateTimeOffset` is a compromise as you can, mostly, show local times to users, similar to what `DateTime` would, but without the ambiguity in code.\r\n\r\n... `Instant`, in theory, doesn\u0027t have a \"friendly\" display (although both NodaTime and Java give it a default UTC output).  You\u0027re _supposed_ to translate it to some configured zone.  This is best handled by the application itself, not automatically (ie, file times can\u0027t be translated to the \"local\" zone), since the local zone of the process may not be the zone desired for display (ie, on a server).\r\n\r\n\u003eI consider `DateTimeZoned` a much more complicated type that, while on the surface seems good, is generally ambiguous for most uses of date and time, i.e. figuring out when something did or should happen. To correlate back to something in the real world, you are always correlating to an instant of time.\r\n\r\nGenerally uses of date/time values are split into two buckets:\r\n - Logged `Instant`s, representing the exact time something (was reported to have) happened in the past or \"right now\".  This is never ambiguous.\r\n - Future `DateTimeZoned`s, which have an _estimated_ instant.  This is, essentially, _deliberately_ ambiguous.\r\n\r\nThis cannot be emphasized enough - when dealing with future date/time values, you need (in almost all cases) to be working with the civil time.  If I put a time in my calendar for an appointment, the civil time shouldn\u0027t change if the rules do.  The primary value isn\u0027t the `Instant` - that part should be derived.\r\n\r\n\u003e In contrast, to resolve `DateTimeZoned` to a real world instance is dependent upon on how up to date the associated timezone database is, and ensuring that everything accessing the value is using the same database.\r\n\r\nYes, but for most real-world use cases `DateTimeOffset` is in the same boat, because you have to figure out what the offset for the \"destination\" timezone is anyways (ie, \"What time is it in Sydney, Australia?\").\r\n\r\n\u003e While `DateTimeOffset` could display wrong (showing 05:00 +11 instead of 04:00 +10) due to an incorrect database, the real world instance of time it represents is never ambiguous.\r\n\r\nnit: This can\u0027t display wrong, because the offset is stored.  It can be recorded wrong, or estimated wrong, if the database isn\u0027t correct/up to date, but the display will reflect the \"true\" value.\r\n\r\n\u003e Where you do use it, such as a calendaring app, you probably need all the individual parts - time, timezone, date (**or even day of month separate from month**).\r\n\r\n.... I can\u0027t see any reason this would be beneficial.  Note that date/time are **not** separate values for things like this, they represent a singular combined value.  Note that two dates with the same \"date\" aren\u0027t guaranteed to share the same 24-hour period.  In addition, your scheme ignores the fact that it would put the same day-of-month from every month+year combination into the same bucket, which seems strange - and will be in the wrong bucket if you\u0027re trying to find everything in \"your\" day-of-month, rather than \"origin\" day-of-month.  If you\u0027re trying to make it faster to query in a database, you\u0027re going to have better results by querying with a dynamic range.",
                                           "updatedAt":  "2020-07-27T07:38:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3OTI4NjE3Mw==",
                                           "createdAt":  "2020-08-24T18:15:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "cc: @tarekgh ",
                                           "updatedAt":  "2020-08-24T18:15:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J_MXw",
                                           "createdAt":  "2022-09-08T22:31:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@tarekgh, were you able to take a look at this? Is it something we should look at moving forward around or is it something we can close as not planned at this point?",
                                           "updatedAt":  "2022-09-08T22:31:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J_UN1",
                                           "createdAt":  "2022-09-08T23:29:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@tannergooding we have already done some of this by exposing `DateOnly`, `TimeOnly`, educating user directly when to use `DateTimeOffset` and when avoid using `DateTime`.  To be honest, I don\u0027t think we can obsolete `DateTime` in near future. `DateTime` mostly a problem when used for time zone related operations. We have some thoughts exposing a new type like `ZonedDateTime` which can be used in general for date and time with time zones. I believe this can better step to take than just trying to update `DateTimeOffset` and obsolete `DateTime`. Anyway, this is a long-term issue and with every release we add more support to the date and time area. ",
                                           "updatedAt":  "2022-09-08T23:29:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J_W_i",
                                           "createdAt":  "2022-09-08T23:52:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e `DateTime` mostly a problem when used for time zone related operations.\r\n\r\n... which is mostly a problem due to `DateTimeKind`.  You actually want a no-zone combined type like `DateTime` for certain scenarios (so you wouldn\u0027t deprecate `DateTime`, but instead `DateTimeKind`), but in most cases you need other/different types, depending on what your application is doing.",
                                           "updatedAt":  "2022-09-08T23:52:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KCjPb",
                                           "createdAt":  "2022-09-09T16:19:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "@tarekgh - I don\u0027t believe this proposal was for obsoleting `DateTime`, but rather to systematically look for properties on .NET classes that are exposed only as `DateTime` where they would be better exposed as `DateTimeOffset` (or `DateOnly` or `TimeOnly`)\r\n\r\nThe clear example is `System.IO.FileSystemInfo`, which has pairs of `DateTime` properties for creation, last access, and last write, all of which would be better served by `DateTimeOffset` properties.",
                                           "updatedAt":  "2022-09-09T16:19:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KCmex",
                                           "createdAt":  "2022-09-09T16:29:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e I don\u0027t believe this proposal was for obsoleting DateTime\r\n\r\nfrom the proposal:\r\n\r\n```\r\n6. Eventually, DateTime itself can be marked Obsolete, and/or hidden, having been fully replaced by DateTimeOffset and, in some cases, Date.\r\n```\r\n\r\n\u003e  but rather to systematically look for properties on .NET classes that are exposed only as DateTime where they would be better exposed as DateTimeOffset (or DateOnly or TimeOnly)\r\n\r\nThat is fine, I am not opposing that :-) ",
                                           "updatedAt":  "2022-09-09T16:29:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KCvUO",
                                           "createdAt":  "2022-09-09T17:04:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "Sure.  To be more precise on the 6 steps proposed in this issue\r\n\r\n1. \u003e Implement a Date structure for those scenarios that require only date.\r\n\r\n    Already completed with `DateOnly` / `TimeOnly`\r\n\r\n2. \u003e Incrementally add supplementary `DateTimeOffset` properties anywhere that `DateTime` is used in Dotnet\r\n\r\n    I believe this has the most value.  Similar work was done with adding `TimeSpan` properties/parameters in places that only had `int` seconds/milliseconds.\r\n\r\n3. \u003e Remove the dependency from `DateTimeOffset` on `DateTime`\r\n\r\n    I\u0027m not opposed to this, but I\u0027m not sure that its necessary or actually adds perf benefit.  Some work would need to be done to test that assumption.  (The public APIs shouldn\u0027t change either way, but perhaps the internals could.)\r\n\r\n4. \u003e As an additional aid, any example code, training material, documentation, and other guidance can also be incrementally updated\r\n\r\n    Always a good idea\r\n\r\n5. \u003e Once all functionality has been moved across, places where `DateTime` is used can be incrementally marked Obsolete and/or hidden from editors (e.g. Intellisense), via `[EditorBrowsable(EditorBrowsableState.Never)]`.\r\n\r\n   Debatable. May make sense in some areas, but not in others.\r\n\r\n6. \u003e Eventually, `DateTime` itself can be marked Obsolete ...\r\n\r\n    I\u0027m opposed to this.",
                                           "updatedAt":  "2022-09-09T17:04:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KC42L",
                                           "createdAt":  "2022-09-09T17:36:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Mostly I agree with you @mattjohnsonpint. for no. 2, do you have any candidate list for that? I am aware about `System.IO.FileSystemInfo` but wondering if you already have any list in mind?",
                                           "updatedAt":  "2022-09-09T17:36:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KC-6M",
                                           "createdAt":  "2022-09-09T17:53:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "Not off hand.  Someone should do a comprehensive search.",
                                           "updatedAt":  "2022-09-09T17:53:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KFkcr",
                                           "createdAt":  "2022-09-11T14:13:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sgryphon",
                                           "body":  "\u003e\u003e 6. Eventually, DateTime itself can be marked Obsolete ...\r\n\u003e I\u0027m opposed to this.\r\n\r\nGreat work with the progress on things like DateOnly (removing one of the reasons to use DateTime)\r\n\r\nOnce steps 1-5 have been done, what is the reasoning for not Obsoleting DateTime (note that obsolete doesn\u0027t mean remove now, but does mean an intention to remove in the future).\r\n\r\nIs it because builds that have \"treat warnings as errors\" will fail?  Or is it because you don\u0027t think that we could even remove DateTime, so marking it obsolete is misleading.\r\n\r\nOr is it for zoned operations, e.g. a future calendar agreement to meet in Brisbane at 06:00 on 01 March 2040, which should remain valid in civil time even if daylights savings rules change?  In my experience this is generally better represented as separate columns for TimeOnly and then a separate DateOnly (or something more complex) because you might be applying different rules to them (not for a one off, but for something recurring like \"last day of the month\")\r\n",
                                           "updatedAt":  "2022-09-11T14:13:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KFndP",
                                           "createdAt":  "2022-09-11T15:16:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e Or is it because you don\u0027t think that we could even remove DateTime, so marking it obsolete is misleading.\r\n\r\nThis one.  Because `DateTime` is occasionally useful on its own.\r\nThat said, I wouldn\u0027t be opposed to marking `DateTimeKind` (and a few related properties/methods) obsolete.\r\n\r\n\u003e Or is it for zoned operations, e.g. a future calendar agreement to meet in Brisbane at 06:00 on 01 March 2040, which should remain valid in civil time even if daylights savings rules change?\r\n\r\nIf you\u0027re doing this sort of work, you\u0027d be better off using NodaTime, as we currently lack a `DateTimeZoned` type.  That aside, even if you had the type you\u0027re still generally going to need to keep track of the offset for some use-cases; for instance if the DST rules change, you have to notify everybody **not** in that zone, because for them the civil time did change.\r\n\r\n\u003e separate columns for TimeOnly and then a separate DateOnly (or something more complex)\r\n\r\nRecurring events is probably best represented with `DateTimeZoned` + `Period` or similar (neither of which we have currently), or possibly a different set of columns for each different type of recurrence/event.",
                                           "updatedAt":  "2022-09-11T15:16:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KFyNL",
                                           "createdAt":  "2022-09-11T19:46:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "The main reason I\u0027m opposed  is that `DateTime` has many valid use cases, and is widely used in real-world applications. Obsoleting it would create too much friction.\r\n\r\nWith regard to the cited advice:\r\n\r\n\u003e ...  \"consider DateTimeOffset as the default date and time type for application development\"\r\n\r\nThis is *wrong* in my opinion.  We should not recommend *any* type to be the default.  Rather, each type should be described and developers should be advised to pick the type that best fits their scenario.\r\n\r\nAfter all, we have 13 different numeric types to choose from, and we don\u0027t tell developers to consider one of them as the \"default\" numeric type.   Sometimes your working with fractional values and need a `double`.  Sometimes you\u0027re working with currency it would be better to use `decimal` to avoid rounding issues.  Should we obsolete `double` and make everyone use `decimal`?  Or advise that `decimal` should be the default type because it doesn\u0027t have floating-point rounding issues?  I don\u0027t think so.  Developers are smart enough to choose the numeric type that fits their use case.  We should treat date and time types likewise.\r\n\r\n",
                                           "updatedAt":  "2022-09-11T19:46:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KF2ez",
                                           "createdAt":  "2022-09-11T21:36:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sgryphon",
                                           "body":  "\u003e Because DateTime is occasionally useful on its own.\r\n\u003e The main reason I\u0027m opposed is that DateTime has many valid use cases,\r\n\r\nI\u0027m not sure it is even occasionally, as I struggle to come up with a scenario when you actually have a valid use for DateTime?\r\n\r\nThe one I used to use was always to store date only, e.g. for calendaring type applications; but with DateOnly that is no longer the case.\r\n\r\nIs there any other valid use case for DateTime remaining? (i.e. that doesn\u0027t have a hidden implicit offset assumption)\r\n\r\n\u003e  and is widely used in real-world applications. Obsoleting it would create too much friction.\r\n\r\nI agree it is widely used.\r\n\r\nRemoving it outright would create some friction; obsoleting it would create less, and help hide/prevent further use.\r\n\r\n\u003e\u003e\u003e\u003e Should we obsolete double and make everyone use decimal?  \u003c\u003c\u003c\r\n\r\nProbably not a bad idea. Double was a product of a time with limited computing resources where we had to accept imprecision in return for adequate performance. If decimal was the default then it would probably prevent a lot of bugs and mistakes.\r\n\r\n(Although in this case I think the performance for things like graphics rendering is probably still a significant enough consideration... although they usually aren\u0027t done in C# though)",
                                           "updatedAt":  "2022-09-11T21:36:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KF44a",
                                           "createdAt":  "2022-09-11T22:40:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "\u003e Is there any other valid use case for DateTime remaining?\r\n\r\nYes, many - and they are almost always in the *future*.  Here are some that are easy to remember:\r\n\r\n- \"On Christmas day this year, all our stores will close early at 2:00 PM\" - ex., a national/global retailer.\r\n  - `DateTime` value: `2022-12-25T14:00`\r\n  - It\u0027s not valid to include a time zone or offset, because there could be stores in different time zones.\r\n- \"Set an alarm for next Tuesday at 8:00 AM\" - ex., on a phone.\r\n  - `DateTime` value: `2022-09-20T08:00`\r\n  - It\u0027s not valid to include a time zone or offset because the person could carry the phone to another time zone, such as while traveling.\r\n- \"The law changes / contract expires / sale ends / (etc.) on July 31, 2025  at 6:00 PM Pacific Time\".\r\n  - `DateTime` value: `2025-01-31T18:00` *and* time zone ID string `America/Los_Angeles`\r\n  - It\u0027s not valid to pre-compute the offset because we can\u0027t know ahead of time whether or not that offset will still be correct when that day comes around.\r\n\r\nThe last one is particularly interesting.  Say that we took the \"prefer `DateTimeOffset`\" advice, and had stored `2025-01-03T18:00-08:00`.  Well, the US Senate already [passed a bill to make DST permanent](https://www.congress.gov/bill/117th-congress/senate-bill/623/text).  The bill still needs to pass the US House of Representatives to become law.  If it does, then the *actual* offset would be `-07:00`.  Our timestamp would be an hour late.  The point is - we can\u0027t actually know *now* whether that will be the case or not.\r\n\r\nConsider also that on a global scale, time zones offsets and DST rules change somewhat frequently.  While some countries are more stable than others, logically we still cannot be certain of what the time zone offset for any future event will be until we are actually at that moment in time.  Sometimes changes happen with very little notice ([see my blog post](https://codeofmatt.com/on-the-timing-of-time-zone-changes/)) - which can wreak havoc on pre-computed offsets or UTC equivalents.\r\n\r\nIf I had to give one \"rule of thumb\" to follow, it would be to pick the type that most accurately stores the original values that you have.  If you know the date, store the date.  If you know the date and time, then store the date and time.  If you know the time zone and it\u0027s not variable, then store the time zone ID.  If you know the offset (because it is either *fixed* or has already come to pass), then store the offset.  If you don\u0027t know these things, then don\u0027t invent them.  Don\u0027t try to pre-determine an offset, or convert a future time to or from UTC based on data that might change.",
                                           "updatedAt":  "2022-09-11T22:54:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KF5M9",
                                           "createdAt":  "2022-09-11T22:49:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "Oh, and I forgot to mention - just because one *should* use a `DateTimeOffset` in a given scenario doesn\u0027t mean that everything will fall apart if you don\u0027t.  There are many cases where you can get by just fine using a `DateTime` and never have any problems.\r\n\r\nSay, for example, that you stored `DateTime.UtcNow` into a database field and then queried that field.  The `Kind` is probably `DateTimeKind.Unspecified` after the round-trip, unless you went out of your way to set it as `Utc` during loading.  So now you want to show that value in local time and call `theDateTime.ToLocalTime()`.  Guess what, everything works correctly!  Why? Because `DateTime.ToLocalTime` presumes that `Unspecified` means `Utc`.\r\n\r\nSure, if I called instead `.ToUniversalTime()`, it would assume `Local` kind and I\u0027d have converted in the wrong direction.  But probably I won\u0027t call that method in this scenario, so I never observe the problem.\r\n\r\nMy point is, deprecating `DateTime` all out would mean tons of red or yellow flags showing up to developers saying that they\u0027ve got problems they might not actually have.",
                                           "updatedAt":  "2022-09-11T22:49:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KF51U",
                                           "createdAt":  "2022-09-11T23:05:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "Thinking about this more, if we *were* to flag potentially problematic usage with an analyzer, I would flag `DateTime.Now` and `DateTime.UtcNow`, recommending `DateTimeOffset.Now` or `DateTimeOffset.UtcNow` instead.  There\u0027s very little purpose in storing a *current* date and time without also storing the offset.\r\n\r\nI suppose `DateTime.Today` could be flagged and replaced with `DateOnly.FromDateTime(DateTimeOffset.Now.Date)`\r\n\r\nI\u0027d also flag the `DateTime` to `DateTimeOffset` [implicit operator](https://docs.microsoft.com/dotnet/api/system.datetimeoffset.op_implicit) - that one is just flat out dangerous.",
                                           "updatedAt":  "2022-09-11T23:09:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KGBOP",
                                           "createdAt":  "2022-09-12T00:57:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e It\u0027s not valid to include a time zone or offset, because there could be stores in different time zones.\r\n\r\n.... yeesss, although probably this gets turned into per-store date/time values pretty quickly.\r\n\r\n\u003e It\u0027s not valid to pre-compute the offset because we can\u0027t know ahead of time whether or not that offset will still be correct when that day comes around.\r\n\r\nI want `DateTimeZoned`, for this reason.\r\nThat said, sometimes you still want to estimate/store the offset (usually, query optimization).",
                                           "updatedAt":  "2022-09-12T00:57:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KGB3o",
                                           "createdAt":  "2022-09-12T01:03:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@Clockwork-Muse \r\n\r\n\u003e I want DateTimeZoned, for this reason.\r\n\r\nAre you interested in submitting a proposal for that? It is in our radar, but we haven\u0027t gotten into it yet.\r\n",
                                           "updatedAt":  "2022-09-12T01:03:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KN4iJ",
                                           "createdAt":  "2022-09-13T09:37:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sgryphon",
                                           "body":  "Thanks for the expanded examples.\r\n\r\nCalendaring (future dates) is the one item that I had flagged, but usually for more complex scenarios like \"Set an alarm for every Tuesday at 08:00\", where you need a more complex type to store than just DateTime. In that scenario the single date time becomes a specialised version of the more complex schedule, i..e you probably wouldn\u0027t use the DateTime type.\r\n\r\nMaybe what we need is a FutureDateTime (not a serious suggestion) that has date and time, but does not have things like Now or implicit conversion to/from DateTimeOffset, or all those other things that cause problems.  \r\n\r\nObsoleting (or removing) all those functions from DateTime would satisfy me; and effectively make DateTime for the future calendar dates. So I guess it is not so much the DateTime struct itself that I dislike, but the operations like Now(), conversion, etc. \r\n\r\nLet\u0027s change step 6 to: `Obsolete` all of the problematic functions of DateTime (such as Now, implicit conversion, etc), and leave it for calendaring/future date operations where offset or zone are not known or applicable.\r\n\r\nI\u0027m pretty sure removing/hiding DateTime.Now() would solve 95% of the times DateTime is used incorrectly.\r\n\r\n----\r\n\r\nInteresting with the `ToLocalTime()` and `ToUniversalTime()` where it has the opposite effect on Unspecified times; I\u0027ve seen code that got caught out with that where different paths might or might not call the functions in different orders and end up in a complete mess. A complete mess that could not happen with `DateTimeOffset`.\r\n\r\nMaybe rather than default a more subtle wording is needed, such as: Usually you will be dealing with instants in time, such as \"now\", or when an event occurred such as a file change, log entry, or other historical record -- in these cases use the `DateTimeOffset` type.\r\n\r\nIf you are doing calendaring or other future date operations, consider the `DateTime` type.\r\n",
                                           "updatedAt":  "2022-09-13T09:37:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KPV9h",
                                           "createdAt":  "2022-09-13T14:55:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003eMaybe what we need is a FutureDateTime (not a serious suggestion)\r\n\r\nThe reason you don\u0027t want something like this is that then it makes your code dependent on the current time of execution, as opposed to using the same standard type all the time and writing methods that take a parameter for the \"current\" time.\r\n\r\n\u003eI\u0027m pretty sure removing/hiding DateTime.Now() would solve 95% of the times DateTime is used incorrectly.\r\n\r\n.... Personally, you should actually ban all the static `Now`/`UtcNow` properties, in preference for passing in some sort of current time factory or source (or in leaf methods, just the current time value), because it immediately makes your code far more testable.\r\nThere\u0027s justification to ban the call in server-related code, but in most cases you should likely be using `DateTimeOffset` there...",
                                           "updatedAt":  "2022-09-13T14:55:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KRI1w",
                                           "createdAt":  "2022-09-13T22:19:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sgryphon",
                                           "body":  "\u003e passing in some sort of current time factory\r\n\r\nPretty much all my code uses ISystemClock from Microsoft.AspNetCore.Authentication.\r\n\r\nAnd code reviews check for any static use of Now, UtcNow, or DateTime and flag them as wrong. Many applications use \"current time\", e.g. for recording logs or timestamps, and very few use calendaring / future dates.\r\n\r\nEven then, calendaring functions usually require something more complicated than a single datetime, e.g. checking a recent project it has a crontab like schedule + offset (for the schedule) ... although it could just as easily be crontab + timezone. The calendar specification then gets turned into/checked against DateTimeOffset for when to run, with no need to use the DateTime struct itself.\r\n\r\nBut as mentioned above, I realise it is not so much the struct I want to stop being used, but Now, implicit conversion, etc; sure they might sometimes work by coincidence -- i.e. keeping in the same timezone with no code changes -- but the code is inherently unsafe if you put on a different server/machine, or call methods in a different order, e.g. d.ToLocalTime() may get a different result than d.ToUniversalTime().ToLocalTime(), depending on the original value, which is weird.",
                                           "updatedAt":  "2022-09-13T22:19:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-Hi-p",
                                           "createdAt":  "2024-05-16T18:15:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sethzollinger",
                                           "body":  "I hope this is still pursued. While the ambiguity of `DateTime` or rather the effects of having `DateTime.Kind` can be problematic, I see that this can’t be fixed any time soon.\r\n\r\nI believe what was not discussed is the ambiguity or rather the expressiveness of `DateTimeOffset`. I would welcome a simpler type like `NodaTime.Instant` just expressing a point in time, a UTC timestamp (maybe simply named `Timestamp`). At least in the projects I have worked on, the actual “offset” was never relevant (and can easily be calculated). Only if it was a timestamp/instant or a generic `DateTime`. I know, creating [yet another type](https://xkcd.com/927/) seems like making things worse and maybe it is.\r\n\r\nBut for me as a dev, more specific minimalistic types (like `DateOnly` and `TimeOnly`) simplify things.\r\n\r\nAlso I can see library authors somewhat struggling with `DateTimeOffset` and `DateTime.Kind` as they are expressive and maybe hard to map to other tools. For instance Postgres has no native type capable of storing an offset. Because of that the type is not fully supported (roundtripping with offset = 0): [npgsql release notes 6.0](https://www.npgsql.org/doc/release-notes/6.0.html#quick-summary) https://github.com/npgsql/efcore.pg/issues/2108#issuecomment-974462473\r\n\r\nAs a side note, if a type like `Timestamp` is considered, I would suggest it behave mostly like and have the capabilities of a `DateTime` with `Kind=UTC`. With one exception, when `ToString` is called it should display its time not as UTC but in local/machine time (with the same default formatting `DateTime` uses). I believe this improves dev experience when printing or debugging, especially for beginners. All serializing should however be in the standard form of `\"…T…Z\"`.\r\n",
                                           "updatedAt":  "2024-05-16T18:15:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-J3y8",
                                           "createdAt":  "2024-05-17T02:27:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e With one exception, when `ToString` is called it should display its time not as UTC but in local/machine time (with the same default formatting `DateTime` uses). I believe this improves dev experience when printing or debugging, especially for beginners. All serializing should however be in the standard form of `\"…T…Z\"`.\r\n\r\nThese two requirements are in conflict, `ToString()` is how serialization is done.  Pick UTC.  There isn\u0027t a good way to do a local timezone for \"developer only debugging\".\r\n\r\nPedantically, a timestamp type like this is ignorant to all timezones, they\u0027re irrelevant to the thing being talked about.  UTC is commonly chosen because it\u0027s well known and \"safe\".  A pure seconds-since serialization is also common.\r\nFor most practical purposes `DateTimeOffset` is sufficient.  A more beneficial new type would be `DateTimeZoned`.",
                                           "updatedAt":  "2024-05-17T02:27:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-LMwe",
                                           "createdAt":  "2024-05-17T06:45:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sethzollinger",
                                           "body":  "I agree, maybe wanting a different value displayed, than is stored is wanting to much, or misleading. So that is definitely no requirement for me.\r\n\r\nBut `ToString` (to me this is just for display / printing) is not how serialization (to me this refers to a standardized roundtrippable format) is done. Because most of the time the default `ToString` produces an inadequate string representation for deserialization. The standard string representations in JSON, XML, Excel differ from what `ToString` would produce. This is especially true for most date/time value types. This is besides the culture specific nature of `ToString`. I was primarily referring to the requirement that a `Timestamp` needs to be exchanged as a UTC timestamp, suffixed with `Z`, and not with an `offset`.\r\n\r\nWhat is usually required is to record a point in time, irrespective of the time zone or offset that the server which originally created the timestamp had. And at the moment the runtime gives me only two somewhat ambiguous options to do that: a `DateTime` with `Kind = UTC`; or a `DateTimeOffset` with `Offset = 0`. \r\n\r\nWhat I am proposing, because I believe it would make things simpler, more expressive and because I value type safety. Is only having one definitive option, a specific `Timestamp` type to do that, store an exact point in time.\r\n\r\nPersonally I believe `DateTimeZoned` would be the ideal replacement for what `DateTimeOffset` was intended to be. Because the offset in and of itself is very inexact. As was described in previous examples (i.e. the example with `America/Los_Angeles`: https://github.com/dotnet/runtime/issues/39816#issuecomment-1243057690), `DateTimeOffset` it is not ideal for storing points in time in the future. And I do not see how storing an offset is beneficial to points in time in the past, because it yields almost no relevant information. Which again leads me to believe that a `DateTimeZoned` would be much more relevant than a `DateTimeOffset`.\r\n",
                                           "updatedAt":  "2024-05-17T06:45:30Z"
                                       }
                                   ],
                         "totalCount":  28
                     },
        "title":  "Eliminate ambiguous date and time values",
        "labels":  [
                       "api-suggestion",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42241",
        "createdAt":  "2020-09-15T05:04:38Z",
        "number":  42241,
        "author":  "EvgenyPrikhodko",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOB25KTA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tkent",
                                            "createdAt":  "2021-08-18T20:57:34Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-12-13T22:34:02Z",
        "body":  "Run application in a different time zone\r\nProblems:\r\n\r\n1. There is no source code.\r\n2. The project is large, written previously to rewrite using, for example, TimeZoneInfo great refactoring.\r\n3. This is especially problematic when applications need to be run from a hosting provider (azure, amazone, etc.). \r\n4. When the developer doesn\u0027t know the server timezone.\r\n\r\nFor example like this:\r\n`dotnet myapp.dll --timezone \"Morocco Standard Time\"`\r\n\r\nOptional:\r\n[This discussion was discussed here](https://github.com/dotnet/runtime/discussions/42153)\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPsMLzQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjQ2NjI5NA==",
                                           "createdAt":  "2020-09-15T05:04:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-09-15T05:04:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjQ3NjgxNg==",
                                           "createdAt":  "2020-09-15T05:39:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@tarekgh ",
                                           "updatedAt":  "2020-09-15T05:39:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjQ4MDQ1MQ==",
                                           "createdAt":  "2020-09-15T05:49:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gnbrkm41",
                                           "body":  "How hard is it to do `timedatectl set-timezone Africa/Casablanca` (*nix) or `Set-TimeZone -Id \"Morocco Standard Time\"` (Windows) before running the app, or what restricts you from doing that? Why do you want the OS Timezone to be different from the app\u0027s timezone? What about possible discrepancies between the app itself and dependencies of the app that acquire timezone / time data from other sources - e.g. native libraries that directly call into the OS? \r\n\r\nI\u0027m not exactly sure why this feature is required and how much value this holds, other than being (what looks to me) a hacky workaround for a specific problem that I\u0027m unsure if it is common. Could you perhaps elaborate a bit more about your scenario?",
                                           "updatedAt":  "2020-09-15T05:49:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjQ4NTgzNA==",
                                           "createdAt":  "2020-09-15T06:03:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EvgenyPrikhodko",
                                           "body":  "\u003e How hard is it to do `timedatectl set-timezone Africa/Casablanca` (*nix) or `Set-TimeZone -Id \"Morocco Standard Time\"` (Windows) before running the app, or what restricts you from doing that? \u003e\r\n\r\nNot difficult. but in my version does not solve the problem, for example, I have other applications on the same server that may live in a different time zone\r\n\r\n\u003eWhy do you want the OS Timezone to be different from the app\u0027s timezone? \u003e\r\n\r\nIt is very simple, take an example, hosting does not always have access to the OS, or the server uses UTC, and the application should, for example, be in utc + 3.\r\n\r\n\r\n\u003eWhat about possible discrepancies between the app itself and dependencies of the app that acquire timezone / time data from other sources - e.g. native libraries that directly call into the OS?\r\n\u003e\r\nIt is understandable here, if the application uses other people\u0027s native libraries, I agree, in this case you need to solve the issue differently. Not my case\r\n\r\n\u003e I\u0027m not exactly sure why this feature is required and how much value this holds, other than being (what looks to me) a hacky workaround for a specific problem that I\u0027m unsure if it is common. Could you perhaps elaborate a bit more about your scenario?\r\n\r\nIt\u0027s very simple, we have 3 web servers running asp.net Core. I needed to launch another application, but it turned out that a different time zone was needed. Moreover, this application will be launched in 5 instances in 5 different time zones. That would not buy 5 servers, this option will save money and time.\r\nWhen to use a specific time zone within the same application.\r\n\r\n\r\n",
                                           "updatedAt":  "2020-09-15T06:04:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjczNzkxMg==",
                                           "createdAt":  "2020-09-15T14:05:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @safern, @krwq\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-15T14:05:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MjgxNDY0NA==",
                                           "createdAt":  "2020-09-15T16:03:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e Moreover, this application will be launched in 5 instances in 5 different time zones. That would not buy 5 servers, this option will save money and time.\r\n\r\n[If you can use Docker, you can set the timezone for the container](https://serverfault.com/q/683605/87542).  However....\r\n\r\n\u003e It is very simple, take an example, hosting does not always have access to the OS, or the server uses UTC, and the application should, for example, be in utc + 3.\r\n\r\nIt\u0027s not going to help in your case (since you don\u0027t have the original source to modify), but generally the server/os/process timezone should be completely irrelevant.  You want some way for your application to retrieve/use an **entity** timezone - it figures out what timezone it needs based on what entity it\u0027s processing, and uses that.  Potentially, that means that you\u0027d only launch **one** instance of the application (and definitely makes your server config easier).  \r\n\r\nSome legacy applications were definitely written assuming a specific server timezone, but modern applications should not be written that way.",
                                           "updatedAt":  "2020-09-15T16:03:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMzI4Njc4OA==",
                                           "createdAt":  "2020-11-06T20:32:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB6_WWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "rdehuyss",
                                                                               "createdAt":  "2021-03-16T08:52:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "rdehuyss",
                                                                               "createdAt":  "2021-03-16T08:52:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "rdehuyss",
                                                                               "createdAt":  "2021-03-16T08:52:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "seriouz",
                                                                               "createdAt":  "2021-09-20T13:39:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "seriouz",
                                                                               "createdAt":  "2021-09-20T13:39:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "seriouz",
                                                                               "createdAt":  "2021-09-20T13:39:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "seriouz",
                                                                               "createdAt":  "2021-09-20T13:39:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "PathogenDavid",
                                           "body":  "It\u0027s worth noting that the runtime already supports the `TZ` environment variable on Linux:\r\n\r\n![image](https://user-images.githubusercontent.com/278957/98411868-7354dc80-203c-11eb-9e5e-c6dcec0f3c18.png)\r\n\r\nThe value of TZ can basically be any file under /usr/share/zoneinfo. (Or an absolute path to a custom timezone file.)\r\n\r\nThis functionality is implemented by [`TimeZoneInfo.TryGetLocalTzFile`](https://github.com/dotnet/runtime/blob/640f0f72bc1c31717b6a319ced7e00bd44675349/src/libraries/System.Private.CoreLib/src/System/TimeZoneInfo.Unix.cs#L275-L315).",
                                           "updatedAt":  "2020-11-06T20:32:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMzQ4Njg0OQ==",
                                           "createdAt":  "2020-11-07T19:49:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@PathogenDavid what is your scenario you want to use this for?",
                                           "updatedAt":  "2020-11-07T19:49:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMzUwMDI5Mg==",
                                           "createdAt":  "2020-11-07T21:58:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PathogenDavid",
                                           "body":  "@tarekgh I have 0 use for this feature, I just stumbled upon the discussion and thought I\u0027d mention `TZ` since it\u0027s less hacky than the reflection method as long as you don\u0027t need Windows support. (Which was seemingly the case for @EvgenyPrikhodko)",
                                           "updatedAt":  "2020-11-07T21:58:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMzUwMTM1MQ==",
                                           "createdAt":  "2020-11-07T22:08:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EvgenyPrikhodko",
                                           "body":  "\u003e @tarekgh I have 0 use for this feature, I just stumbled upon the discussion and thought I\u0027d mention `TZ` since it\u0027s less hacky than the reflection method as long as you don\u0027t need Windows support. (Which was seemingly the case for @EvgenyPrikhodko)\r\n\r\nThanks, but your solution doesn\u0027t work for me.",
                                           "updatedAt":  "2020-11-07T22:08:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMzU1MTA2OA==",
                                           "createdAt":  "2020-11-08T09:24:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PathogenDavid",
                                           "body":  "@EvgenyPrikhodko Not sure what to tell you, works fine for me on WSL.",
                                           "updatedAt":  "2020-11-08T09:24:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMzU4MDg4NA==",
                                           "createdAt":  "2020-11-08T13:58:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EvgenyPrikhodko",
                                           "body":  "\u003e @EvgenyPrikhodko Not sure what to tell you, works fine for me on WSL.\r\n\r\nThank you, we know this option.",
                                           "updatedAt":  "2020-11-08T13:58:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Ke3p",
                                           "createdAt":  "2022-01-10T21:55:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "betmix-matt",
                                           "body":  "\u003e It\u0027s worth noting that the runtime already supports the `TZ` environment variable on Linux:\r\n\u003e \r\n\u003e ![image](https://user-images.githubusercontent.com/278957/98411868-7354dc80-203c-11eb-9e5e-c6dcec0f3c18.png)\r\n\u003e \r\n\u003e The value of TZ can basically be any file under /usr/share/zoneinfo. (Or an absolute path to a custom timezone file.)\r\n\u003e \r\n\u003e This functionality is implemented by [`TimeZoneInfo.TryGetLocalTzFile`](https://github.com/dotnet/runtime/blob/640f0f72bc1c31717b6a319ced7e00bd44675349/src/libraries/System.Private.CoreLib/src/System/TimeZoneInfo.Unix.cs#L275-L315).\r\n\r\nInstead of adding a new argument to dotnet run, why not just make Windows consistent with Linux so that if the TZ environment variable is set in Windows, dotnet automatically uses that to determine the system timezone?",
                                           "updatedAt":  "2022-01-10T21:55:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48KhuQ",
                                           "createdAt":  "2022-01-10T22:11:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Instead of adding a new argument to dotnet run, why not just make Windows consistent with Linux so that if the TZ environment variable is set in Windows, dotnet automatically uses that to determine the system timezone?\r\n\r\nThis is a clever idea. The only concern with that setting such environment variable is going to affect other applications running on the same machine if the environment variable is set per user or machine. On Linux is ok as this is documented behavior for the OS. But Windows doesn\u0027t support that and can be a surprise for some applications. Maybe the best here is to do that with a config switch?",
                                           "updatedAt":  "2022-01-10T22:14:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Ks-V",
                                           "createdAt":  "2022-01-10T23:14:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "betmix-matt",
                                           "body":  "I guess it is kinda a major change as it could technically be a breaking change. It would be really nice if you didn\u0027t have to specify a command line argument to make this work though.  I hate that for every OS except windows, TZ sets the timezone.  Why does windows have to be so difficult?",
                                           "updatedAt":  "2022-01-10T23:14:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48K1nB",
                                           "createdAt":  "2022-01-11T00:10:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e  It would be really nice if you didn\u0027t have to specify a command line argument to make this work though.\r\n\r\nagree.\r\n\r\n\u003e Why does windows have to be so difficult?\r\n\r\nDid you request that from Windows before? :-)",
                                           "updatedAt":  "2022-01-11T00:10:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-skff",
                                           "createdAt":  "2022-02-26T09:06:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yunfandev",
                                           "body":  "@roji Hi roji, When I upgrade Npgsql to [6.x](https://www.npgsql.org/doc/release-notes/6.0.html#timestamp-rationalization-and-improvements),  is there any way I can set the timezone to UTC when I debug the dotnet program using Visual Studio 2022 on Windows, and my computer\u0027s time zone is UTC+8. 😂😂😂\r\n\r\nOr I have to use the following code:\r\n```chsarp\r\n#if DEBUG\r\n    AppContext.SetSwitch(\"Npgsql.EnableLegacyTimestampBehavior\", true);\r\n#endif\r\n```",
                                           "updatedAt":  "2022-02-27T10:39:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-slp4",
                                           "createdAt":  "2022-02-26T09:10:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@yunfandev in Npgsql 6.x, what your machine timezone is has no bearing on what Npgsql does; unless you enable EnableLegacyTimestampBehavior, Npgsql no longer performs any implicit timezone conversions based on the (.NET\u0027s) machine timezone.\r\n\r\nI\u0027d suggest opening an issue on https://github.com/npgsql/npgsql or https://github.com/efcore.pg/npgsql, and providing more context (with code samples) on what your exact problem is. That\u0027s unlikely to be related to this issue.",
                                           "updatedAt":  "2022-02-27T10:39:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-tgAL",
                                           "createdAt":  "2022-02-26T12:36:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yunfandev",
                                           "body":  "\u003e @yunfandev in Npgsql 6.x, what your machine timezone is has no bearing on what Npgsql does; unless you enable EnableLegacyTimestampBehavior, Npgsql no longer performs any implicit timezone conversions based on the (.NET\u0027s) machine timezone.\r\n\u003e \r\n\u003e \r\n\u003e \r\n\u003e I\u0027d suggest opening an issue on https://github.com/npgsql/npgsql or https://github.com/efcore.pg/npgsql, and providing more context (with code samples) on what your exact problem is. That\u0027s unlikely to be related to this issue.\r\n\r\n@roji  Because we have a lot of DateTimeOffset.Now and DateTimeOffset.FromUnixTimeSeconds in our code, I want to directly adjust the time zone of the runtime to Utc😅, so that the offset of the default DatetimeOffset is all 0.  It\u0027s easy to set the timezone when running in a container but not when debugging on Windows.  Or I should adjust the time zone of DateTimeOffset in the code by myself, instead of simply solving the problem by adjusting the time zone",
                                           "updatedAt":  "2022-02-27T10:40:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-uaNX",
                                           "createdAt":  "2022-02-26T17:30:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCQiJ-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PathogenDavid",
                                                                               "createdAt":  "2022-02-26T18:54:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "yunfandev",
                                                                               "createdAt":  "2022-02-27T02:21:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yunfandev",
                                                                               "createdAt":  "2022-02-27T02:21:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e Or I should adjust the time zone of DateTimeOffset in the code by myself, instead of simply solving the problem by adjusting the time zone\r\n\r\nYes. If what you\u0027re looking for is a UTC timestamp, it\u0027s much better to adjust your code to call DateTimeOffset.UtcNow instead of DateTimeOffset.Now. This is the correct way to address it, and would make the actual intent and meaning much clearer in your source code.",
                                           "updatedAt":  "2022-02-27T10:40:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-wwvN",
                                           "createdAt":  "2022-02-27T02:25:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "yunfandev",
                                           "body":  "\u003e \u003e Or I should adjust the time zone of DateTimeOffset in the code by myself, instead of simply solving the problem by adjusting the time zone\n\u003e \n\u003e \n\u003e \n\u003e Yes. If what you\u0027re looking for is a UTC timestamp, it\u0027s much better to adjust your code to call DateTimeOffset.UtcNow instead of DateTimeOffset.Now. This is the correct way to address it, and would make the actual intent and meaning much clearer in your source code.\n\nThanks ❤️",
                                           "updatedAt":  "2022-02-27T10:40:15Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "Run the application with a different time zone.",
        "labels":  [
                       "enhancement",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43303",
        "createdAt":  "2020-10-12T14:01:29Z",
        "number":  43303,
        "author":  "vanillajonathan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBTNC1A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "am11",
                                            "createdAt":  "2020-10-12T15:53:19Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-11-22T01:53:26Z",
        "body":  "## Background and Motivation\r\n\r\nI would like to get the \"short date string\" using a specific culture. It returns the string in the format \"mm/dd/YYYY\" but I want \"yyyy-MM-dd\" but there is no method overload, so I have to resort to workarounds such as `DateTime.Today.ToString(\"yyyy-MM-dd\")`.\r\n\r\n## Proposed API\r\n\r\n```diff\r\npublic struct DateTime : ...\r\n{\r\n     public string ToLongDateString();\r\n+    public string ToLongDateString(IFormatProvider provider);\r\n     public string ToLongTimeString();\r\n+    public string ToLongTimeString(IFormatProvider provider);\r\n     public string ToShortDateString();\r\n+    public string ToShortDateString(IFormatProvider provider);\r\n```\r\n\r\n## Usage Examples\r\n\r\n``` cs\r\nvar culture = CultureInfo.GetCultureInfo(\"sv-SE\");\r\nvar shortDate = DateTime.Today.ToShortDateString(culture);\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSf0tAg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzEzOTQ1NQ==",
                                           "createdAt":  "2020-10-12T14:01:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-10-12T14:01:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzIwMDA5OQ==",
                                           "createdAt":  "2020-10-12T15:48:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "A better example of current code would probably be:\r\n```csharp\r\nDateTime.Today.ToString(someDateTimeFormatInfo.ShortDatePattern);\r\n```",
                                           "updatedAt":  "2020-10-12T15:48:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzIwNDAwNA==",
                                           "createdAt":  "2020-10-12T15:55:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "same; my eyes were scanning for Now or UtcNow in the example. :)",
                                           "updatedAt":  "2020-10-12T15:55:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzI0OTY1MA==",
                                           "createdAt":  "2020-10-12T17:26:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "@am11 - I\u0027m going to assume the definition is:\r\n```csharp\r\npublic DateTime Today =\u003e Now.Date;\r\n```\r\n... the point was how to not use a raw string, more than anything else.\r\n",
                                           "updatedAt":  "2020-10-12T17:26:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzI1ODI3MA==",
                                           "createdAt":  "2020-10-12T17:43:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "@Clockwork-Muse, I meant  `DateTime.Now.ToShortDateString` instead of `DateTime.ToShortDateString` to access the non-static method.",
                                           "updatedAt":  "2020-10-12T17:51:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J_J02",
                                           "createdAt":  "2022-09-08T22:17:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "CC. @tarekgh for input. Seems like a simple ask and likely can mark `ready-for-review` if there is no pushback",
                                           "updatedAt":  "2022-09-08T22:17:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J_S0C",
                                           "createdAt":  "2022-09-08T23:19:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@tannergooding the ask is kind nice to have helper methods. I wouldn\u0027t mind having them, but we need to figure out where we draw the line between things that should be part of the .NET libraries, and which can be defined in the apps and 3rd party libraries. \r\n\r\nAs example, `DateTime.ToShortDateString(IFormatProvider provider)` can be easily done using `DateTime.ToString(\"d\", provider)`.",
                                           "updatedAt":  "2022-09-08T23:19:16Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "DateTime overloads for specifying the culture for formatting",
        "labels":  [
                       "api-suggestion",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43562",
        "createdAt":  "2020-10-18T04:32:32Z",
        "number":  43562,
        "author":  "hannasm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-14T12:54:31Z",
        "body":  "How about we add something to handle Unix Timestamps in the DateTime _standard_ or _custom_ format strings. \r\n\r\nIt would be great for me if i could handle a prefix and suffix like i get on images downloaded from text messages on my android cell phone like \u0027Message_1602994376381.jpg\u0027\r\n\r\n```powershell\r\n[DateTime]::ParseExact(\u0027Message_1602994376381.jpg\u0027, \u0027\\M\\e\\s\\s\\a\\g\\e\\_X\\.\\j\\p\\g\u0027, $filename, [System.Globalization.CultureInfo]::InvariantCulture)\r\n```\r\n\r\nIn this code snippet i am implying that the \u0027X\u0027 be handled as a unix timestamp.\r\n\r\nI am not aware of a way for the date time parser to handle prefix / suffix on a standard format specifier,and that makes my use case problematic with \u0027X\u0027 as a standard format specifier. Custom format specifiers can handle prefixes / suffixes but don\u0027t handle variadic lengths, and the unix format specifier can vary between  -62135596800000 -and 253402300799999 which implies anywhere between 0 and 15 digits. \r\n\r\nSomething as described above would be ideal in my use case. However, adding an \u0027X\u0027 standard format specifier would probably be the easiest addition to the existing framework. Adding \u0027X\u0027 as a custom format specifier requiring specific number of digits to be specified, might be annoying to use but, could help get the job done.\r\n\r\nConsidering i need this right now i will have to implement a workaround myself. This would be a fairly boring improvement to the API surface. I would even be happy to submit a patch if an acceptable approach could be agreed upon. \r\n\r\nAdd something to the documentation here:\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings\r\nhttps://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings\r\n\r\nThat ends up calling the function here:\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.datetimeoffset.fromunixtimemilliseconds\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOa-S5nQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMTExNTIzNw==",
                                           "createdAt":  "2020-10-18T04:32:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-10-18T04:32:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMTEyMTU2NA==",
                                           "createdAt":  "2020-10-18T05:58:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e I am not aware of a way for the date time parser to handle prefix / suffix on a standard format specifier,and that makes my use case problematic with \u0027X\u0027 as a standard format specifier. Custom format specifiers can handle prefixes / suffixes but don\u0027t handle variadic lengths, and the unix format specifier can vary between -62135596800000 -and 253402300799999 which implies anywhere between 0 and 15 digits.\r\n\r\nYes, because for _formatting_ the intent is that any extra characters come from the external formatting string, and you just use the formatting specifier.  Parsing has much the same intent - the extra characters are meant to handle some oddball formats, not extraction as you\u0027re doing here.  So standard formats are likely to always reject extra characters.\r\n\r\nNote that custom and standard format/parse strings _can_ (and often do) have varying lengths - consider month/day-of-week names (and all the various localizations), plus some formats don\u0027t prepend zeroes.\r\n\r\n\u003e It would be great for me if i could handle a prefix and suffix like i get on images downloaded from text messages on my android cell phone like \u0027Message_1602994376381.jpg\u0027\r\n\r\nArguably, this is a misuse of the parsing code, and you should be parsing this with `Regex` or a cut down parser (there are various libraries that would help craft this stuff, but a compiled regex for a simple case is likely to work well).\r\n\r\nFor your particular case, I\u0027d also check to see if any of the EXIF or file data has been set, you may not have to parse anything.\r\n",
                                           "updatedAt":  "2020-10-18T05:58:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMTE3NTc4Mg==",
                                           "createdAt":  "2020-10-18T14:26:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hannasm",
                                           "body":  "I wouldn\u0027t disagree with anything about that, but I also still believe a\nUnix timestamp qualifies as a DateTime format, and should be supported as\nsuch in the format specifiers and parser.\n\nGiven an extraction use case is out of scope a standard format specifier is\nthe only sensible choice.\n\nSomething like DateTime.ToString(\u0027X\u0027) in the format provider would convert\nto a Unix timestamp and a ParseExact(\u0027X\u0027) would read one.\n\nOn Sun, Oct 18, 2020, 1:58 AM Stephen A. Imhoff \u003cnotifications@github.com\u003e\nwrote:\n\n\u003e I am not aware of a way for the date time parser to handle prefix / suffix\n\u003e on a standard format specifier,and that makes my use case problematic with\n\u003e \u0027X\u0027 as a standard format specifier. Custom format specifiers can handle\n\u003e prefixes / suffixes but don\u0027t handle variadic lengths, and the unix format\n\u003e specifier can vary between -62135596800000 -and 253402300799999 which\n\u003e implies anywhere between 0 and 15 digits.\n\u003e\n\u003e Yes, because for *formatting* the intent is that any extra characters\n\u003e come from the external formatting string, and you just use the formatting\n\u003e specifier. Parsing has much the same intent - the extra characters are\n\u003e meant to handle some oddball formats, not extraction as you\u0027re doing here.\n\u003e So standard formats are likely to always reject extra characters.\n\u003e\n\u003e Note that custom and standard format/parse strings *can* (and often do)\n\u003e have varying lengths - consider month/day-of-week names (and all the\n\u003e various localizations), plus some formats don\u0027t prepend zeroes.\n\u003e\n\u003e It would be great for me if i could handle a prefix and suffix like i get\n\u003e on images downloaded from text messages on my android cell phone like\n\u003e \u0027Message_1602994376381.jpg\u0027\n\u003e\n\u003e Arguably, this is a misuse of the parsing code, and you should be parsing\n\u003e this with Regex or a cut down parser (there are various libraries that\n\u003e would help craft this stuff, but a compiled regex for a simple case is\n\u003e likely to work well).\n\u003e\n\u003e For your particular case, I\u0027d also check to see if any of the EXIF or file\n\u003e data has been set, you may not have to parse anything.\n\u003e\n\u003e —\n\u003e You are receiving this because you authored the thread.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/dotnet/runtime/issues/43562#issuecomment-711121564\u003e,\n\u003e or unsubscribe\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AASHZJDZBZ6YOOSYKOCL7QLSLJ7YFANCNFSM4SU2GMAQ\u003e\n\u003e .\n\u003e\n",
                                           "updatedAt":  "2020-10-18T14:26:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMTg0OTA3OQ==",
                                           "createdAt":  "2020-10-19T08:34:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBT5-eQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2020-10-19T12:02:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "benaadams",
                                           "body":  "Unix timestamp format is a simple numeric `long`?\r\n\r\nThere are methods on `DateTimeOffset` for converting to and from that `long`\r\n```csharp\r\nstruct DateTimeOffset\r\n{\r\n    DateTimeOffset FromUnixTimeMilliseconds(long milliseconds);\r\n    DateTimeOffset FromUnixTimeSeconds(long seconds);\r\n    long ToUnixTimeSeconds();\r\n    long ToUnixTimeMilliseconds();\r\n}\r\n```",
                                           "updatedAt":  "2020-10-19T08:34:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r5Lmd",
                                           "createdAt":  "2023-11-14T12:54:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IanKemp",
                                           "body":  "\u003e I wouldn\u0027t disagree with anything about that, but I also still believe a Unix timestamp qualifies as a DateTime format, and should be supported as such in the format specifiers and parser. Given an extraction use case is out of scope a standard format specifier is the only sensible choice. Something like DateTime.ToString(\u0027X\u0027) in the format provider would convert to a Unix timestamp and a ParseExact(\u0027X\u0027) would read one.\r\n\r\nThis is long overdue to be added. Will see if I can throw up a PR for it.",
                                           "updatedAt":  "2023-11-14T12:54:30Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Unix Timestamp as DateTime Format Specifier",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51966",
        "createdAt":  "2020-12-01T10:22:31Z",
        "number":  51966,
        "author":  "kolixx",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T01:53:27Z",
        "body":  "According to the documentation, there should be exactly 10000 ticks in a millisecond: https://docs.microsoft.com/en-us/dotnet/api/system.datetime.ticks?view=net-5.0\r\n\r\nHowever, this is not true. If you create time spans based on a large number of milliseconds, this invariant fails. Here are two examples:\r\n\r\n- TimeSpan.FromMilliseconds (315537897599999).Ticks returns 3155378975999989760 instead of 3155378975999990000\r\n- TimeSpan.FromMilliseconds(315537897599997).Ticks returns 3155378975999969792 instead of 3155378975999970000\r\n\r\nIf you decrease the order of magnitude of milliseconds by two or three orders, then the results are good. The number of ticks will be exactly 10000 times the number of milliseconds.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMWJxZQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODA0MzcyMg==",
                                           "createdAt":  "2021-04-28T00:11:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-04-28T00:11:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODE1OTA0Ng==",
                                           "createdAt":  "2021-04-28T05:38:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "This is because the multiplication is done in a `double` and then cast back to `long` and these particular values have no round trippable representation in a `double`.\n\nhttps://github.com/dotnet/runtime/blob/41f3d48b520d4cf4f9e051dc07f480dcb9c62e08/src/libraries/System.Private.CoreLib/src/System/TimeSpan.cs#L202\n\nThis could probably be improved, but I\u0027m curious do you have a real need for a 10,000 year TimeSpan?",
                                           "updatedAt":  "2021-04-28T05:40:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODE1OTIxNQ==",
                                           "createdAt":  "2021-04-28T05:39:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAccording to the documentation, there should be exactly 10000 ticks in a millisecond: https://docs.microsoft.com/en-us/dotnet/api/system.datetime.ticks?view=net-5.0\r\n\r\nHowever, this is not true. If you create time spans based on a large number of milliseconds, this invariant fails. Here are two examples:\r\n\r\n- TimeSpan.FromMilliseconds (315537897599999).Ticks returns 3155378975999989760 instead of 3155378975999990000\r\n- TimeSpan.FromMilliseconds(315537897599997).Ticks returns 3155378975999969792 instead of 3155378975999970000\r\n\r\nIf you decrease the order of magnitude of milliseconds by two or three orders, then the results are good. The number of ticks will be exactly 10000 times the number of milliseconds.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekolixx\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-28T05:39:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODE1OTQyMg==",
                                           "createdAt":  "2021-04-28T05:39:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Cc @kolixx in case subscribers don\u0027t follow issue moves",
                                           "updatedAt":  "2021-04-28T05:39:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODI2MjE0OA==",
                                           "createdAt":  "2021-04-28T08:31:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kolixx",
                                           "body":  "\u003e This could probably be improved, but I\u0027m curious do you have a real need for a 10,000 year TimeSpan?\r\n\r\n@danmoseley I gave examples that came from a long and painful bug fixing investigation so we did definitely stumble upon such examples.\r\nWe went around the issue by using different constructors for the TimeSpans, and now we have automated checks in place to prevent people from constructing TimeSpans in ways that might cause such inconsistencies.  So in this respect we are fine.\r\n\r\nMy preferred solution would be to check if a certain construction would introduce numerical errors,  and then not allow that construction to go through. Very much in the same spirit of the check here\r\n\r\nhttps://github.com/dotnet/runtime/blob/41f3d48b520d4cf4f9e051dc07f480dcb9c62e08/src/libraries/System.Private.CoreLib/src/System/TimeSpan.cs#L208\r\n\r\nIt would make detecting such issues much easier and the vast majority of people not creating such long TimeSpans would not see any change.\r\n\r\n\r\n",
                                           "updatedAt":  "2021-04-28T08:31:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODI2NTEyNQ==",
                                           "createdAt":  "2021-04-28T08:34:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kolixx",
                                           "body":  "@danmoseley From the other direction, I would not expect that the code is changed such that larger intervals remain consistent. Only if a certain construction did succeed, then it should behave according to specifications.",
                                           "updatedAt":  "2021-04-28T08:34:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODUzMDcxNQ==",
                                           "createdAt":  "2021-04-28T15:04:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@tannergooding is an expert on numerical precision and perhaps can recommend a change. It seems like we could avoid double when we are dealing with long. But I\u0027ll let him comment",
                                           "updatedAt":  "2021-04-28T15:04:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODUzNTE0MQ==",
                                           "createdAt":  "2021-04-28T15:09:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "For better or for worse, the public surface area of many APIs on `TimeSpan` take and return `double`. This means that any value input or returned that is greater than `2^52` is guaranteed to have a loss in precision and any fractional portion is likely to be lossy (not be exactly representative).\r\n\r\nWe could improve the handling in `Interval`, but it will likely come at the cost of some perf. The \"simplest\" fix here, which will help with whole integrals between 2^52 and 2^63, is to change `private static TimeSpan Interval(double value, double scale)` to `private static TimeSpan Interval(double value, long scale)` and then update it to handle the fractional and integer scaling separately:\r\n```csharp\r\nprivate static TimeSpan Interval(double value, long scale)\r\n{\r\n    if ((value \u003e long.MaxValue) || (value \u003c long.MinValue) || || double.IsNaN(value)\r\n        throw new OverflowException(SR.Overflow_TimeSpanTooLong);\r\n\r\n    double integer;\r\n    double fractional = Math.ModF(value, \u0026integer);\r\n\r\n    long ticks = checked(((long)integer * scale) + (long)(fractional * scale));\r\n    return (ticks == long.MaxValue) ? TimeSpan.MaxValue : new TimeSpan((long)ticks);\r\n}\r\n```\r\n\r\nNoting that I have done no testing on the above and so its likely there is a bug or something I\u0027m not remembering having just woken up 😄 ",
                                           "updatedAt":  "2021-04-28T15:11:19Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "TimeSpan.FromMilliseconds produces inconsistent results",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/46989",
        "createdAt":  "2021-01-14T15:35:09Z",
        "number":  46989,
        "author":  "lanegoolsby",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T01:52:59Z",
        "body":  "*Note I originally [reported this issue on the TimeZoneConverter repo](https://github.com/mj1856/TimeZoneConverter/issues/85) and was referred here.*\r\n\r\nI am seeing inconsistent daylight savings flags for MST when using TzConvert on Linux vs Windows. \r\n\r\nThe following code produces a True for `zoneInfo.SupportsDaylightSavingTime` on Linux but False (the correct value) on Windows. \r\n\r\n````\r\n        internal static TimeZone MapTimeZone(float latitude, float longitude)\r\n        {\r\n            var zone = TimeZoneLookup.GetTimeZone(latitude, longitude);\r\n            var zoneInfo = TZConvert.GetTimeZoneInfo(zone.Result);\r\n\r\n            return new TimeZone\r\n            {\r\n                DaylightSavingsIndicator = zoneInfo.SupportsDaylightSavingTime,\r\n                Name = zoneInfo.DisplayName,\r\n                StandardUtcOffset = zoneInfo.BaseUtcOffset.Hours.ToString(),\r\n                TxDatabaseName = zoneInfo.StandardName\r\n            };\r\n        }\r\n````\r\n\r\nAttached is a reproduction of the issue. [TzIssue.zip](https://github.com/mj1856/TimeZoneConverter/files/5810787/TzIssue.zip)\r\n\r\nRun the app through the IDE debugger and you\u0027ll see this:\r\n![image](https://user-images.githubusercontent.com/10758510/104503118-82548f80-5595-11eb-81c8-1df2dd986978.png)\r\n\r\nBut if you run it using Docker (`docker build -t tzissue . \u0026\u0026 docker run tzissue`) you\u0027ll get this:\r\n![image](https://user-images.githubusercontent.com/10758510/104503199-9ef0c780-5595-11eb-81b8-f8f3e0d3919e.png)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLYkUmg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MDMyNTU0OA==",
                                           "createdAt":  "2021-01-14T16:56:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-01-14T16:56:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MTUwMjgyNQ==",
                                           "createdAt":  "2021-01-16T06:17:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @safern, @krwq\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n*Note I originally [reported this issue on the TimeZoneConverter repo](https://github.com/mj1856/TimeZoneConverter/issues/85) and was referred here.*\r\n\r\nI am seeing inconsistent daylight savings flags for MST when using TzConvert on Linux vs Windows. \r\n\r\nThe following code produces a True for `zoneInfo.SupportsDaylightSavingTime` on Linux but False (the correct value) on Windows. \r\n\r\n````\r\n        internal static TimeZone MapTimeZone(float latitude, float longitude)\r\n        {\r\n            var zone = TimeZoneLookup.GetTimeZone(latitude, longitude);\r\n            var zoneInfo = TZConvert.GetTimeZoneInfo(zone.Result);\r\n\r\n            return new TimeZone\r\n            {\r\n                DaylightSavingsIndicator = zoneInfo.SupportsDaylightSavingTime,\r\n                Name = zoneInfo.DisplayName,\r\n                StandardUtcOffset = zoneInfo.BaseUtcOffset.Hours.ToString(),\r\n                TxDatabaseName = zoneInfo.StandardName\r\n            };\r\n        }\r\n````\r\n\r\nAttached is a reproduction of the issue. [TzIssue.zip](https://github.com/mj1856/TimeZoneConverter/files/5810787/TzIssue.zip)\r\n\r\nRun the app through the IDE debugger and you\u0027ll see this:\r\n![image](https://user-images.githubusercontent.com/10758510/104503118-82548f80-5595-11eb-81c8-1df2dd986978.png)\r\n\r\nBut if you run it using Docker (`docker build -t tzissue . \u0026\u0026 docker run tzissue`) you\u0027ll get this:\r\n![image](https://user-images.githubusercontent.com/10758510/104503199-9ef0c780-5595-11eb-81b8-f8f3e0d3919e.png)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elanegoolsby\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-01-16T06:17:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MjQ1NDE2NA==",
                                           "createdAt":  "2021-01-18T20:21:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBc-lBg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "lanegoolsby",
                                                                               "createdAt":  "2021-01-19T16:20:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "brandonhein",
                                                                               "createdAt":  "2021-01-19T22:09:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@lanegoolsby unfortunately we depend on different data when running on different OS\u0027s and that why you can run into discrepancies. but this is something we\u0027ll look at in the future to make the experience better and consistent as much as possible. ",
                                           "updatedAt":  "2021-01-18T20:21:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MjQ1NTYxMA==",
                                           "createdAt":  "2021-01-18T20:24:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @eerhardt ",
                                           "updatedAt":  "2021-01-18T20:24:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MzE0OTk5OQ==",
                                           "createdAt":  "2021-01-19T21:22:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lanegoolsby",
                                           "body":  "I think I found the problem @tarekgh  - its with this line:\r\n\r\nhttps://github.com/dotnet/runtime/blob/85162fbf9ccdeb4fa1df357f27308ae96579c066/src/libraries/System.Private.CoreLib/src/System/TimeZoneInfo.cs#L1932\r\n\r\nOn *nix the `adjustmentRules` array is not empty. See [example_tz_adjustments.zip](https://github.com/dotnet/runtime/files/5838627/example_tz_adjustments.zip) for example output of executing `zoneInfo.GetAdjustmentRules()` on a linux container for the Phoenix and Denver time zones. \r\n\r\nI think that `if` needs to be embelished to something akin to this:\r\n\r\n````\r\nif (adjustmentRules != null \u0026\u0026 adjustmentRules.Length != 0)\r\n{\r\n  foreach (var adjustmentRule in adjustmentRules)\r\n  {\r\n    if (adjustmentRule.DateStart \u003e DateTime.Now\r\n       \u0026\u0026 adjustmentRule.DateEnd \u003c DateTime.Now\r\n       \u0026\u0026 adjustmentRule.DaylightDelta \u003e TimeSpan.Zero)\r\n       {\r\n         adjustmentRulesSupportDst = true;\r\n         break;\r\n        }\r\n       }\r\n               \r\n//etc\r\n}\r\n````\r\n\r\nOr maybe it would be better to set the value for `NoDaylightTransitions` on the `AdjustmentRule` using analogous logic in this `for` block? That way the collection only has to be iterated over once. \r\n\r\nhttps://github.com/dotnet/runtime/blob/85162fbf9ccdeb4fa1df357f27308ae96579c066/src/libraries/System.Private.CoreLib/src/System/TimeZoneInfo.Unix.cs#L126-L144\r\n",
                                           "updatedAt":  "2021-01-19T21:22:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MzIyMTI0Mw==",
                                           "createdAt":  "2021-01-19T23:57:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@lanegoolsby what exactly the time zone Id that show the problem? I quickly tried `America/Phoenix` (which is `Mountain Standard Time` on Windows) and I am seeing on Windows and Linux it returns SupportsDaylightSavingTime as true. And that is the expected result.",
                                           "updatedAt":  "2021-01-19T23:57:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MzIyNTI0OQ==",
                                           "createdAt":  "2021-01-20T00:00:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBeP3PQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2021-01-20T00:11:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "safern",
                                                                               "createdAt":  "2021-01-29T21:49:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@lanegoolsby - I checked out your repro project today. As @tarekgh mentions above, the time zone data between Windows and non-Windows is vastly different, with the non-Windows data being much more accurate - especially historically.\r\n\r\nI see your above code is getting the `America/Phoenix` time zone, and asking if it `SupportsDaylightSavingTime`.\r\n\r\n`SupportsDaylightSavingTime` is [documented](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.supportsdaylightsavingtime?view=net-5.0) as:\r\n\r\n\u003e Gets a value indicating whether the time zone has any daylight saving time rules.\r\n\r\nUsing the Windows time zone information, this time zone doesn\u0027t have any DST rules. So the API is returning `false`.\r\n\r\nHowever, as stated above, the Windows time zone information (in the registry under `Computer\\HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones\\`) is not accurate historically. On non-Windows, we use the IANA time zone information that is installed locally on the machine in `/usr/share/zoneinfo`. There are some decent websites that allow you to browse this information. For example, for the `America/Phoenix` time zone, you can see the historical data at https://www.timeanddate.com/time/zone/usa/phoenix.\r\n\r\nIf you look before World War II, Phoenix did actually observe DST:\r\n\r\n![image](https://user-images.githubusercontent.com/8291187/105108429-d07afe80-5a7f-11eb-8a11-699dac2bd0d7.png)\r\n\r\nWith this in mind, the non-Windows information is more accurate than the Windows information. If you tried converting a DateTime from 1944, a non-Windows machine would accurately tell you the DST info. A Windows machine wouldn\u0027t.",
                                           "updatedAt":  "2021-01-20T00:00:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MzIyNzMwOA==",
                                           "createdAt":  "2021-01-20T00:01:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e what exactly the time zone Id that show the problem? I quickly tried America/Phoenix (which is Mountain Standard Time on Windows) and I am seeing on Windows and Linux it returns SupportsDaylightSavingTime as true. And that is the expected result.\r\n\r\n@tarekgh - on my machine, the repro project is using the `US Mountain Standard Time` Time Zone on Windows, which is the time zone for Arizona. The `Mountain Standard Time` is the time zone outside of Arizona.",
                                           "updatedAt":  "2021-01-20T00:02:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MzQwNzY2MA==",
                                           "createdAt":  "2021-01-20T07:49:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "... the only reference I\u0027m seeing to `Mountain Standard Time` is in reference to Arizona\u0027s, so the data would appear to match that in @eerhardt \u0027s comment.  Perhaps printing out all the adjustment rules for those two timezones?\r\n\r\nThat aside, I believe you\u0027re correct about the method used to decide DST support is invalid; the question would be how timezones with changes, but that never experienced DST, are handled.  There should actually be multiple of these, since pretty much all timezones had an initial adjustment from local solar to coordinated time.\r\n\r\n```csharp\r\nadjustmentRule.DateStart \u003e DateTime.Now\r\n\u0026\u0026 adjustmentRule.DateEnd \u003c DateTime.Now\r\n```\r\nThese conditions won\u0027t work, because they tie the evaluation to the current time, which would make it non-reproducible.\r\nOh, as an aside some DST transitions are based on non-local times, so would be incorrect for them anyways.\r\n\r\n```csharp\r\n\u0026\u0026 adjustmentRule.DaylightDelta \u003e TimeSpan.Zero\r\n```\r\nIf my assumption about how historical adjustments are handled is correct, this doesn\u0027t work either, because the adjustment rule has to offset from whatever the base is (either solar or the most recent).  You\u0027d probably have to do it based off of `TimeZoneInfo.AdjustmentRule.DaylightTransitionStart`/`TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd`",
                                           "updatedAt":  "2021-01-20T07:49:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2Mzg0ODk1Mw==",
                                           "createdAt":  "2021-01-20T18:35:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lanegoolsby",
                                           "body":  "\u003e ... the only reference I\u0027m seeing to `Mountain Standard Time` is in reference to Arizona\u0027s, so the data would appear to match that in @eerhardt \u0027s comment. Perhaps printing out all the adjustment rules for those two timezones?\r\n\r\nI attached a console dump above of `US Mountain Standard Time` (Phoenix, _does not_ support DST) and `Mountain Standard Time` (Denver, _does_ support DST).  \r\n\r\n\u003e ```cs\r\n\u003e adjustmentRule.DateStart \u003e DateTime.Now\r\n\u003e \u0026\u0026 adjustmentRule.DateEnd \u003c DateTime.Now\r\n\u003e ```\r\n\u003e \r\n\u003e These conditions won\u0027t work, because they tie the evaluation to the current time, which would make it non-reproducible.\r\n\u003e Oh, as an aside some DST transitions are based on non-local times, so would be incorrect for them anyways.\r\n\r\nIf you look at the Phoenix dump the last entry is this:\r\n\r\n````\r\n    \"DateStart\": \"1967-10-29T00:00:00\",\r\n    \"DateEnd\": \"9999-12-31T00:00:00\",\r\n    \"DaylightDelta\": {\r\n      \"Ticks\": 0,\r\n      \"Days\": 0,\r\n      \"Hours\": 0,\r\n      \"Milliseconds\": 0,\r\n      \"Minutes\": 0,\r\n      \"Seconds\": 0,\r\n      \"TotalDays\": 0,\r\n      \"TotalHours\": 0,\r\n      \"TotalMilliseconds\": 0,\r\n      \"TotalMinutes\": 0,\r\n      \"TotalSeconds\": 0\r\n    },\r\n    \"DaylightTransitionStart\": {\r\n      \"TimeOfDay\": \"0001-01-01T01:00:00\",\r\n      \"Month\": 10,\r\n      \"Week\": 1,\r\n      \"Day\": 29,\r\n      \"DayOfWeek\": 0,\r\n      \"IsFixedDateRule\": true\r\n    },\r\n    \"DaylightTransitionEnd\": {\r\n      \"TimeOfDay\": \"0001-01-01T23:59:59\",\r\n      \"Month\": 12,\r\n      \"Week\": 1,\r\n      \"Day\": 31,\r\n      \"DayOfWeek\": 0,\r\n      \"IsFixedDateRule\": true\r\n    }\r\n````\r\n\r\nNote that the last entry is effectively saying that adjustment applies to any date between \"1967-10-29\" and \"9999-12-31\". My thinking was the `DateTime.Now` is to catch if the tz is currently applicable (the `DateStart` and `DateEnd` encompasses the current date). The reason that is necessary is if you look at the Denver tz adjustments it has adjustments for many years in the future. For example:\r\n\r\n````\r\n  {\r\n    \"DateStart\": \"2037-11-01T00:00:00\",\r\n    \"DateEnd\": \"9999-12-31T00:00:00\",\r\n    \"DaylightDelta\": {\r\n      \"Ticks\": 36000000000,\r\n      \"Days\": 0,\r\n      \"Hours\": 1,\r\n      \"Milliseconds\": 0,\r\n      \"Minutes\": 0,\r\n      \"Seconds\": 0,\r\n      \"TotalDays\": 0.041666666666666664,\r\n      \"TotalHours\": 1,\r\n      \"TotalMilliseconds\": 3600000,\r\n      \"TotalMinutes\": 60,\r\n      \"TotalSeconds\": 3600\r\n    },\r\n    \"DaylightTransitionStart\": {\r\n      \"TimeOfDay\": \"0001-01-01T01:00:00\",\r\n      \"Month\": 11,\r\n      \"Week\": 1,\r\n      \"Day\": 1,\r\n      \"DayOfWeek\": 0,\r\n      \"IsFixedDateRule\": true\r\n    },\r\n    \"DaylightTransitionEnd\": {\r\n      \"TimeOfDay\": \"0001-01-01T23:59:59\",\r\n      \"Month\": 12,\r\n      \"Week\": 1,\r\n      \"Day\": 31,\r\n      \"DayOfWeek\": 0,\r\n      \"IsFixedDateRule\": true\r\n    }\r\n````\r\n\r\n\u003e ```cs\r\n\u003e \u0026\u0026 adjustmentRule.DaylightDelta \u003e TimeSpan.Zero\r\n\u003e ```\r\n\r\nThat is to actually check if there is an adjustment. In the case of Phoenix there is no delta from 1967 onward. \r\n\r\n\u003e If my assumption about how historical adjustments are handled is correct, this doesn\u0027t work either, because the adjustment rule has to offset from whatever the base is (either solar or the most recent). You\u0027d probably have to do it based off of `TimeZoneInfo.AdjustmentRule.DaylightTransitionStart`/`TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd`\r\n\r\nI don\u0027t think so. If you look at the Denver example the transition start date appears to be `DateTime.Min` and the transition end is some calculation based off `DateTime.Min`. But that\u0027s speculation on my part. \r\n\r\nI agree that the DateTime.Now is pretty kludgey, though. But since we\u0027re just using it to set a flag on if the tz supports DST, and not in the actual calculation of anything date/time related I think its acceptable kludge... at least until humanity finally gets smart and gets rid of DST and time zones lol. ",
                                           "updatedAt":  "2021-01-20T18:40:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2Mzk1ODQyNg==",
                                           "createdAt":  "2021-01-20T21:25:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBdIRfg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lanegoolsby",
                                                                               "createdAt":  "2021-01-20T21:37:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e My thinking was the `DateTime.Now` is to catch if the tz is currently applicable\r\n\r\nThe TZ is _always_ applicable, since it is in theory available for all time - it is **adjustment rules** that change over time.  `SupportsDaylightSavingTime` isn\u0027t whether the zone currently, at this moment, experiences DST, but whether it ever has (or ever will, since there are rules that will take effect future).\r\n\r\n\u003e That is to actually check if there is an adjustment. In the case of Phoenix there is no delta from 1967 onward.\r\n\r\nThat might be true, but I was thinking of cases like Japan/the Koreas, which adjusted their offsets without ever experiencing DST.\r\nA quick check of North Korea indicates it\u0027s at least partially encoded in the `TimeZoneInfo.AdjustmentRule.DaylightTransitionStart`/`TimeZoneInfo.AdjustmentRule.DaylightTransitionEnd`, so you might be right, but in this case there\u0027s no offset listed for the 2015-2018 change they made (although the rule is otherwise present).  So some values are potentially being lost.",
                                           "updatedAt":  "2021-01-20T21:25:37Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  " Inconsistent daylight savings flag when running on Linux containers",
        "labels":  [
                       "enhancement",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47460",
        "createdAt":  "2021-01-26T13:47:48Z",
        "number":  47460,
        "author":  "OlegZ-XC",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T01:52:59Z",
        "body":  "next code throws exception when machine time/region in UTC+X but OK in UTC-X\r\n\r\n```\r\nusing System;\r\nclass P { static void Main() {\r\n    DateTimeOffset dto = default(DateTime); // OK in LA/NY but failed in Berlin/Moscow/Beijing\r\n    Console.WriteLine(dto);\r\n} }\r\n```\r\n\r\nWhen u create some struct with defaults and then assign it to DateTimeOffset app behaviour is changed depends from user/machine region. imo **its wrong**.\r\n\r\nsimple workaround for .NET:\r\n`  default(DateTime) = DateTime.MinValue = new DateTime(0, Kind.Utc)` // no exceptions with .Utc\r\nOR change DateTimeOffset.ctor(DateTime) // default(DateTime) as special case\r\n\r\nand for user code:\r\n```\r\nstruct SomeStruct {\r\n  public DateTime RequestTime { get; set; } = new DateTime(0, Kind.Utc);\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONNBcZA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NzU1MTY1Ng==",
                                           "createdAt":  "2021-01-26T13:47:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-01-26T13:47:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NzU4MDY5NQ==",
                                           "createdAt":  "2021-01-26T14:33:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Change the behavior treating `Unspecified` As `Local` is breaking.\r\n\r\n\u003e simple workaround for .NET:\r\n\u003e ` default(DateTime) = DateTime.MinValue = new DateTime(0, Kind.Utc)` // no exceptions with .Utc\r\n\r\nNo, this isn\u0027t possible. The `enum DateTimeKind` has value `Unspecified = 0`.\r\n\r\n\r\nThe simplest correct way is to use `default(DateTimeOffset)`. There should be an analyzer to warn on potential acquiring of `DateTimeKind.Unspecified`.",
                                           "updatedAt":  "2021-01-26T14:33:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NzU5NDQ5Ng==",
                                           "createdAt":  "2021-01-26T14:49:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "OlegZ-XC",
                                           "body":  "```\r\n    public DateTimeOffset(DateTime dateTime)\r\n    {\r\n      TimeSpan offset = dateTime.Kind == DateTimeKind.Utc ? new TimeSpan(0L) : TimeZoneInfo.GetLocalUtcOffset(dateTime, TimeZoneInfoOptions.NoThrowOnInvalidTime);\r\n      this.m_offsetMinutes = DateTimeOffset.ValidateOffset(offset);\r\n      this.m_dateTime = DateTimeOffset.ValidateDate(dateTime, offset);\r\n    }\r\n```\r\nchange to\r\n```\r\n      var useZeroOffset = dateTime == default(DateTime) ||  dateTime.Kind == DateTimeKind.Utc; // which equality better to check first?\r\n      TimeSpan offset = useZeroOffset ? new TimeSpan(0L) : TimeZoneInfo.GetLocalUtcOffset(dateTime, \r\n```\r\nor \r\n```\r\n      // imo better if dto.ToLocalTime()/ToUniversalTime() can throw Exception. need more tests here\r\n      if (dateTime == default(DateTime)) dateTime = new DateTime(0, Kind.Utc);\r\n      // and then as current code.\r\n      TimeSpan offset = dateTime.Kind == DateTimeKind.Utc ? new TimeSpan(0L) : TimeZoneInfo.GetLocalUtcOffset(dateTime, \r\n```",
                                           "updatedAt":  "2021-01-26T16:27:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NzYwNTczMw==",
                                           "createdAt":  "2021-01-26T15:06:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Yes, changing the behavior in the conversion constructor is **possible**, but it\u0027s still breaking because it changes behavior.\r\n\r\nThe correct approach should be allowing 0 ticks with positive offset, because the internal representation of `DateTimeOffset` supports it.",
                                           "updatedAt":  "2021-01-26T15:06:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDM0NDg0NQ==",
                                           "createdAt":  "2021-06-19T02:47:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBxr4ig==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CuteLeon",
                                                                               "createdAt":  "2021-07-08T02:56:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "FYI, ASP.NET Core just hit this in preview5 https://github.com/dotnet/aspnetcore/issues/33634\r\n\r\nI understand that this is \"by design\", but there really shouldn\u0027t be different behavior for something like this based on time zones. Especially when the difference is between working or throwing.",
                                           "updatedAt":  "2021-06-19T02:47:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NjA4MTc4Mg==",
                                           "createdAt":  "2021-07-08T02:57:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CuteLeon",
                                           "body":  "Met this issue https://github.com/dotnet/aspnetcore/issues/33634 when upgrading https://github.com/cuteleon/hacksystem from .Net 6 Preview 1 to .Net 6 Preview 5",
                                           "updatedAt":  "2021-07-08T02:57:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzA4NjY5Mg==",
                                           "createdAt":  "2021-07-09T10:31:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roklenardic",
                                           "body":  "Is there a workaround for #33634? JWT authentication is broken and this issue has been present since January...",
                                           "updatedAt":  "2021-07-09T10:31:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40yGCu",
                                           "createdAt":  "2021-07-23T10:29:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBzosSA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "OlegZ-XC",
                                                                               "createdAt":  "2021-07-23T11:07:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roklenardic",
                                                                               "createdAt":  "2021-07-23T11:17:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "CuteLeon",
                                           "body":  "\u003e Met this issue [dotnet/aspnetcore#33634](https://github.com/dotnet/aspnetcore/issues/33634) when upgrading https://github.com/cuteleon/hacksystem from .Net 6 Preview 1 to .Net 6 Preview 5\r\n\r\nIssue gone in Preview 6 version.",
                                           "updatedAt":  "2021-07-23T10:29:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40yLv2",
                                           "createdAt":  "2021-07-23T11:18:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roklenardic",
                                           "body":  "I confirm that this is gone in Preview 6 as well.",
                                           "updatedAt":  "2021-07-23T11:18:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40yLwx",
                                           "createdAt":  "2021-07-23T11:18:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "OlegZ-XC",
                                           "body":  "\u003e Issue gone in Preview 6 version.\r\n\r\nI can\u0027t check this before the stable Release, so if you are sure then close the issue.",
                                           "updatedAt":  "2021-07-23T11:18:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40y8yt",
                                           "createdAt":  "2021-07-23T16:55:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrennanConroy",
                                           "body":  "I think they were talking about the linked JWT issue being gone in preview6... not the DateTimeOffset issue being fixed.",
                                           "updatedAt":  "2021-07-23T16:55:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc400Fxk",
                                           "createdAt":  "2021-07-24T15:44:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CuteLeon",
                                           "body":  "Yeah actually,I mean JWT works in preview 6 currently,no more time-zone related exceptions thrown anymore.",
                                           "updatedAt":  "2021-07-24T15:44:26Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "new DateTimeOffset( default(DateTime)) throws exceptions for regions with UTC+X and OK in UTC-X",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50311",
        "createdAt":  "2021-03-27T01:09:03Z",
        "number":  50311,
        "author":  "mattjohnsonpint",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T02:07:40Z",
        "body":  "Consider the following program:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Globalization;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        TimeZoneInfo tzi;\r\n\r\n        CultureInfo.CurrentUICulture = CultureInfo.GetCultureInfo(\"en-US\");\r\n        tzi = TimeZoneInfo.FindSystemTimeZoneById(\"America/Los_Angeles\");\r\n        Console.WriteLine(tzi.StandardName); // \"Pacific Standard Time\"\r\n        Console.WriteLine(tzi.DaylightName); // \"Pacific Daylight Time\"\r\n        Console.WriteLine(tzi.DisplayName);  // \"(UTC-08:00) Pacific Time (Los Angeles)\"\r\n\r\n        CultureInfo.CurrentUICulture = CultureInfo.GetCultureInfo(\"fr-FR\");\r\n        TimeZoneInfo.ClearCachedData();\r\n\r\n        tzi = TimeZoneInfo.FindSystemTimeZoneById(\"America/Los_Angeles\");\r\n        Console.WriteLine(tzi.StandardName); // \"heure normale du Pacifique nord-américain\"\r\n        Console.WriteLine(tzi.DaylightName); // \"heure d’été du Pacifique\"\r\n        Console.WriteLine(tzi.DisplayName);  // \"(UTC-08:00) heure du Pacifique nord-américain (Los Angeles)\"\r\n    }\r\n}\r\n```\r\n\r\nThis will work fine on Linux/OSX (but not Windows due to #50310).  However there are a couple of problems:\r\n\r\n- The need to call `ClearCachedData` to change the language is non-obvious.\r\n- An app might need to switch languages for different users, thus requiring the cache to be cleared often, thus defeating the benefit of a cache.\r\n- In a more complex application (an ASP.NET app for example), there could be more than one active thread with different users in different cultures simultaneously.  Thus there is a chance that another thread could populate the cache with a different language, resulting in unexpected language in the above program if the timing is just right.\r\n- A call to `GetSystemTimeZones` iterates through all time zones, populating the cache for each one.  But a call to `FindSystemTimeZoneById` only populates the cache for that one time zone.  Thus at any given time, the cache might be in an inconsistent state - having entries belonging to more than one language.\r\n\r\nI believe the internal cache of display names will need to be broken out per-language to resolve these concerns.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONGhy9w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwODYxMDgwNw==",
                                           "createdAt":  "2021-03-27T01:09:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @safern\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nConsider the following program:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Globalization;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        TimeZoneInfo tzi;\r\n\r\n        CultureInfo.CurrentUICulture = CultureInfo.GetCultureInfo(\"en-US\");\r\n        tzi = TimeZoneInfo.FindSystemTimeZoneById(\"America/Los_Angeles\");\r\n        Console.WriteLine(tzi.StandardName); // \"Pacific Standard Time\"\r\n        Console.WriteLine(tzi.DaylightName); // \"Pacific Daylight Time\"\r\n        Console.WriteLine(tzi.DisplayName);  // \"(UTC-08:00) Pacific Time (Los Angeles)\"\r\n\r\n        CultureInfo.CurrentUICulture = CultureInfo.GetCultureInfo(\"fr-FR\");\r\n        TimeZoneInfo.ClearCachedData();\r\n\r\n        tzi = TimeZoneInfo.FindSystemTimeZoneById(\"America/Los_Angeles\");\r\n        Console.WriteLine(tzi.StandardName); // \"heure normale du Pacifique nord-américain\"\r\n        Console.WriteLine(tzi.DaylightName); // \"heure d’été du Pacifique\"\r\n        Console.WriteLine(tzi.DisplayName);  // \"(UTC-08:00) heure du Pacifique nord-américain (Los Angeles)\"\r\n    }\r\n}\r\n```\r\n\r\nThis will work fine on Linux/OSX (but not Windows due to #50310).  However there are a couple of problems:\r\n\r\n- The need to call `ClearCachedData` to change the language is non-obvious.\r\n- An app might need to switch languages for different users, thus requiring the cache to be cleared often, thus defeating the benefit of a cache.\r\n- There could be more than one active thread with different users in different cultures simultaneously.  Thus there is a chance that another thread could populate the cache with a different language, resulting in unexpected language in the above program if the timing is just right.\r\n- A call to `GetSystemTimeZones` iterates through all time zones, populating the cache for each one.  But a call to `FindSystemTimeZoneById` only populates the cache for that one time zone.  Thus at any given time, the cache might be in an inconsistent state - having entries belonging to more than one language.\r\n\r\nI believe the internal cache of display names will need to be broken out per-language to resolve these concerns.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emattjohnsonpint\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-27T01:09:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTc4MTMyOQ==",
                                           "createdAt":  "2021-03-29T23:01:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "An alternate approach would be to remove the `_displayName`, `_standardDisplayName`, and `_daylightDisplayName` private fields from the `TimeZoneInfo` object.  They would no longer be part of the state of the object and thus would no longer be part of the cache.  The `DisplayName`, `StandardName`, and `DaylightName` properties would simply look up the correct localization at runtime based on the `CurrentUICulture`.\r\n\r\nThis would be a tradeoff between memory utilization of the cache and performance of the display string lookup.  I believe it would be worthwhile though.\r\n\r\nThe only complication I can think of is how to deal with \"custom\" time zones, as built with `TimeZoneInfo.CreateCustomTimeZone`, where the names are passed in as parameters.   The fields may have to remain (or put elsewhere) for that purpose only.",
                                           "updatedAt":  "2021-03-29T23:02:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NzQ5MzU1NA==",
                                           "createdAt":  "2021-07-09T22:42:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntonLapounov",
                                           "body":  "We could cache language-neutral `@path,-stringID[;comment]` resource descriptions instead and resolve them on demand using another cache.  (That might be the same idea you mentioned above.)",
                                           "updatedAt":  "2021-07-09T22:42:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTI1MTQzNw==",
                                           "createdAt":  "2021-07-13T17:00:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "Yes, that\u0027s a possibility, though it could load quite a bit into memory unnecessarily.  I believe all the resource files are memory mapped, both in the ICU and in the NLS implementations.  Thus, it would only be saving a tiny bit of CPU that\u0027s used for the lookup and concatenation pieces.   I think the better idea is just to remove display names from the cache altogether.",
                                           "updatedAt":  "2021-07-13T17:00:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTI1OTI0MQ==",
                                           "createdAt":  "2021-07-13T17:12:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "@tarekgh - I\u0027d like to get this in for 6.0.  Ok to send a PR?",
                                           "updatedAt":  "2021-07-13T17:12:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTI2MDQwNw==",
                                           "createdAt":  "2021-07-13T17:14:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOByWNZA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mattjohnsonpint",
                                                                               "createdAt":  "2021-07-13T17:26:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "We need to fix https://github.com/dotnet/runtime/issues/55307 first before we do anything here. I expect we\u0027ll have some non-trivial change in handling the TZ names with that fix.",
                                           "updatedAt":  "2021-07-13T17:14:25Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Localization concerns with display names in TimeZoneInfo internal cache",
        "labels":  [
                       "enhancement",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51515",
        "createdAt":  "2021-04-19T19:22:48Z",
        "number":  51515,
        "author":  "ssasoglu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T01:52:08Z",
        "body":  "### Description\r\n\r\n```csharp\r\nusing System;\r\n\t\t\t\t\t\r\npublic class Program\r\n{\r\n\tpublic static void Main()\r\n\t{\r\n\t\tvar date = DateTime.Now;\r\n\t\tvar dateOffset = DateTimeOffset.Now;\r\n\t\t\r\n\t\tConsole.WriteLine(date.ToUniversalTime().ToString(\"O\"));\r\n\t\tConsole.WriteLine(DateTime.UtcNow.ToString(\"O\"));\r\n\t\t\r\n\t\tConsole.WriteLine(dateOffset.ToUniversalTime().ToString(\"O\"));\r\n\t\tConsole.WriteLine(dateOffset.UtcDateTime.ToString(\"O\"));\r\n\t}\r\n}\r\n```\r\nThis simple program produces the following output:\r\n\r\n```\r\n2021-04-19T19:10:02.1679783Z\r\n2021-04-19T19:10:02.1816479Z\r\n2021-04-19T19:10:02.1736443+00:00\r\n2021-04-19T19:10:02.1736443Z\r\n```\r\n\r\nI would have expected to see all of them to result with the same output.\r\nHere is a [.NET Fiddle link for it.](https://dotnetfiddle.net/TsJAZg)\r\n\r\n### Configuration\r\n\r\nI tried to execute the same program on .NET 4.7.2 and .NET 5 on Fiddle. The program behaves the same in both configurations.\r\nI also tried locally. Here is my `dotnet --info`\r\n\r\n```bash\r\n\u003e dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.202\r\n Commit:    db7cc87d51\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.15\r\n OS Platform: Darwin\r\n RID:         osx.10.15-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/5.0.202/\r\n\r\nHost (useful for support):\r\n  Version: 5.0.5\r\n  Commit:  2f740adc14\r\n```\r\n\r\nIs this the intended behavior?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMQqPMg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMjcyMzYzOA==",
                                           "createdAt":  "2021-04-19T19:22:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-04-19T19:22:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMjcyODAwOA==",
                                           "createdAt":  "2021-04-19T19:29:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBoCGYw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scalablecory",
                                                                               "createdAt":  "2021-04-21T15:01:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "The problem is that:\r\n```text\r\n2021-04-19T19:10:02.1736443+00:00\r\n2021-04-19T19:10:02.1736443Z\r\n```\r\n... while referencing the same _instant_ in time, aren\u0027t necessarily from the same \"timezone\" (UTC isn\u0027t actually a zone, but it\u0027s easiest to treat it as one for a number of reasons).  `DateTimeOffset` has no idea if a `00:00` offset is actually UTC, or is some other 0 offset.",
                                           "updatedAt":  "2021-04-19T19:29:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMjc3NTYwMg==",
                                           "createdAt":  "2021-04-19T20:50:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\n```csharp\r\nusing System;\r\n\t\t\t\t\t\r\npublic class Program\r\n{\r\n\tpublic static void Main()\r\n\t{\r\n\t\tvar date = DateTime.Now;\r\n\t\tvar dateOffset = DateTimeOffset.Now;\r\n\t\t\r\n\t\tConsole.WriteLine(date.ToUniversalTime().ToString(\"O\"));\r\n\t\tConsole.WriteLine(DateTime.UtcNow.ToString(\"O\"));\r\n\t\t\r\n\t\tConsole.WriteLine(dateOffset.ToUniversalTime().ToString(\"O\"));\r\n\t\tConsole.WriteLine(dateOffset.UtcDateTime.ToString(\"O\"));\r\n\t}\r\n}\r\n```\r\nThis simple program produces the following output:\r\n\r\n```\r\n2021-04-19T19:10:02.1679783Z\r\n2021-04-19T19:10:02.1816479Z\r\n2021-04-19T19:10:02.1736443+00:00\r\n2021-04-19T19:10:02.1736443Z\r\n```\r\n\r\nI would have expected to see all of them to result with the same output.\r\nHere is a [.NET Fiddle link for it.](https://dotnetfiddle.net/TsJAZg)\r\n\r\n### Configuration\r\n\r\nI tried to execute the same program on .NET 4.7.2 and .NET 5 on Fiddle. The program behaves the same in both configurations.\r\nI also tried locally. Here is my `dotnet --info`\r\n\r\n```bash\r\n\u003e dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   5.0.202\r\n Commit:    db7cc87d51\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.15\r\n OS Platform: Darwin\r\n RID:         osx.10.15-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/5.0.202/\r\n\r\nHost (useful for support):\r\n  Version: 5.0.5\r\n  Commit:  2f740adc14\r\n```\r\n\r\nIs this the intended behavior?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003essasoglu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-19T20:50:02Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "DateTime and DateTimeOffset produce different ISO8601 strings",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51860",
        "createdAt":  "2021-04-26T13:36:20Z",
        "number":  51860,
        "author":  "isonil",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-13T16:34:50Z",
        "body":  "DateTime.ParseExact handles \"yyy\" incorrectly.\r\n\r\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\nDateTime.ParseExact requires the year to be 3-digits when using \"yyy\" despite \"yyy\" normally accepting 3-4 digits as per the [documentation](https://docs.microsoft.com/en-US/dotnet/standard/base-types/custom-date-and-time-format-strings).\r\n\r\nOther 1-2 digit parts, like \"H\" for 1-2 digits hours, or \"m\" for 1-2 digits minutes work correctly.\r\n\r\nRepro case:\r\n```\r\nusing System;\r\nusing System.Globalization;\r\n\t\t\t\t\t\r\npublic class Program\r\n{\r\n\tpublic static void Main()\r\n\t{\r\n\t\tDateTime.ParseExact(\"2021:04:26 10:19:57\", \"yyyy:M:d H:m:s\", CultureInfo.InvariantCulture);\r\n\t\t\r\n\t\tConsole.WriteLine(\"OK\");\r\n\t\t\r\n\t\tDateTime.ParseExact(\"2021:04:26 10:19:57\", \"yyy:M:d H:m:s\", CultureInfo.InvariantCulture);\r\n\t}\r\n}\r\n```\r\nOutput:\r\n```\r\nOK\r\nRun-time exception (line 12): String was not recognized as a valid DateTime.\r\n```\r\nTry it [here](https://dotnetfiddle.net/mKqx6U)\r\n\r\n### Configuration\r\n\r\nTested on .NET 4.7.2, .NET 5, and .NET Core 3.1",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOq38gxQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNjk5NzAwMQ==",
                                           "createdAt":  "2021-04-26T16:57:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nDateTime.ParseExact handles \"yyy\" incorrectly.\r\n\r\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\nDateTime.ParseExact requires the year to be 3-digits when using \"yyy\" despite \"yyy\" normally accepting 3-4 digits as per the [documentation](https://docs.microsoft.com/en-US/dotnet/standard/base-types/custom-date-and-time-format-strings).\r\n\r\nOther 1-2 digit parts, like \"H\" for 1-2 digits hours, or \"m\" for 1-2 digits minutes work correctly.\r\n\r\nRepro case:\r\n```\r\nusing System;\r\nusing System.Globalization;\r\n\t\t\t\t\t\r\npublic class Program\r\n{\r\n\tpublic static void Main()\r\n\t{\r\n\t\tDateTime.ParseExact(\"2021:04:26 10:19:57\", \"yyyy:M:d H:m:s\", CultureInfo.InvariantCulture);\r\n\t\t\r\n\t\tConsole.WriteLine(\"OK\");\r\n\t\t\r\n\t\tDateTime.ParseExact(\"2021:04:26 10:19:57\", \"yyy:M:d H:m:s\", CultureInfo.InvariantCulture);\r\n\t}\r\n}\r\n```\r\nOutput:\r\n```\r\nOK\r\nRun-time exception (line 12): String was not recognized as a valid DateTime.\r\n```\r\nTry it [here](https://dotnetfiddle.net/mKqx6U)\r\n\r\n### Configuration\r\n\r\nTested on .NET 4.7.2, .NET 5, and .NET Core 3.1\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eisonil\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-26T16:57:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjYzNjAyMA==",
                                           "createdAt":  "2021-06-02T01:18:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SimonCropp",
                                           "body":  "my vote would be to change the documentation",
                                           "updatedAt":  "2021-06-02T01:18:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rfyDF",
                                           "createdAt":  "2025-05-13T16:34:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I agree to fix the documentation as changing that can break other cases. https://github.com/dotnet/runtime/pull/115507#issuecomment-2877227989",
                                           "updatedAt":  "2025-05-13T16:34:49Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "DateTime.ParseExact handles \"yyy\" incorrectly.",
        "labels":  [
                       "documentation",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52094",
        "createdAt":  "2021-04-30T05:43:12Z",
        "number":  52094,
        "author":  "ssaran046",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T02:13:45Z",
        "body":  "Please find the issue details here https://github.com/microsoft/ProjectReunion/issues/732.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMXoGEg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyOTg1MzczNQ==",
                                           "createdAt":  "2021-04-30T05:43:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-04-30T05:43:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMDA4MDUzMA==",
                                           "createdAt":  "2021-04-30T13:04:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nPlease find the issue details here https://github.com/microsoft/ProjectReunion/issues/732.\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003essaran046\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime.Intrinsics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-30T13:04:27Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ArgumentOutOfRangeException was thrown when creating DateTimeOffset for MinDate",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/52892",
        "createdAt":  "2021-05-18T08:53:34Z",
        "number":  52892,
        "author":  "Cricle",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-12-21T07:20:55Z",
        "body":  "### Description\r\n\r\nWhen I use Asp.net core(.NET5.0), to call `DateTime.Now.Ticks`, i got an `NullReferenceException`.\r\n\r\nThe `DateTime.Now.Ticks` is call in `.NETSTANDARD2.0`\u0026`.NETSTANDARD2.1` library.\r\n\r\n### Configuration\r\n\r\n|Physical|Version|\r\n|:-:|:-|\r\n|IDE|Microsoft Visual Studio Community 2019 v16.9.4|\r\n|dotnet cli|6.0.100-preview.2.21155.3|\r\n|dotnet runtime|.NET 5.0.202|\r\n|OS|Win10 20H2 x64|\r\n|TimeZone|China Standard Time(UTC+08:00)|\r\n\r\n- The Web csproj(a part)\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e\r\n    \u003cPropertyGroup\u003e\r\n        \u003c!--...--\u003e\r\n        \u003cTargetFramework\u003enet5.0\u003c/TargetFramework\u003e\r\n        \u003c!--...--\u003e\r\n    \u003c/PropertyGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n- The referenced library csproj\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFrameworks\u003enetstandard2.0;netstandard2.1;\u003c/TargetFrameworks\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n    \u003cItemGroup Condition=\"\u0027$(TargetFramework)\u0027==\u0027netstandard2.0\u0027\"\u003e\r\n    \u003cPackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"3.1.15\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.AspNetCore.Identity.EntityFrameworkCore\" Version=\"2.2.0\" /\u003e\r\n    \u003cPackageReference Include=\"Z.EntityFramework.Plus.EFCore\" Version=\"3.1.36\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup Condition=\"\u0027$(TargetFramework)\u0027==\u0027netstandard2.1\u0027\"\u003e\r\n    \u003cPackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"5.0.6\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.AspNetCore.Identity.EntityFrameworkCore\" Version=\"5.0.6\" /\u003e\r\n    \u003cPackageReference Include=\"Z.EntityFramework.Plus.EFCore\" Version=\"5.1.36\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n\r\n```\r\n\r\n- The code (a part) in library\r\n\r\n```csharp\r\npublic async Task DoneFetchEntityAsync(...)\r\n{\r\n    if (context.ProviderFetcher != this \u0026\u0026 !context.FetchContext.IsFromCache)\r\n    {\r\n        //...\r\n        var now = DateTime.Now.Ticks;//\u003c-- here thrown exception\r\n        var val = context.Value;\r\n    }\r\n}\r\n```\r\n\r\nI has been try to exchange code position, delete `bin` and `obj` folders and rebuild the solution, but the exception exists.\r\n\r\n### Regression?\r\n\r\nSince this line of code appeared, the program has never been normal.\r\n\r\n\r\n### Other information\r\n\r\nThe detail please see the image\r\n\r\n\u003cimg width=\"976\" alt=\"a\" src=\"https://user-images.githubusercontent.com/26201412/118621492-ff6c6b80-b7f8-11eb-816c-9e817004e09a.png\"\u003e\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObzTSmQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0Mjk4NjU3MA==",
                                           "createdAt":  "2021-05-18T08:53:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-05-18T08:53:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzM3Nzk5MQ==",
                                           "createdAt":  "2021-05-18T17:22:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen I use Asp.net core(.NET5.0), to call `DateTime.Now.Ticks`, i got an `NullReferenceException`.\r\n\r\nThe `DateTime.Now.Ticks` is call in `.NETSTANDARD2.0`\u0026`.NETSTANDARD2.1` library.\r\n\r\n### Configuration\r\n\r\n|Physical|Version|\r\n|:-:|:-|\r\n|IDE|Microsoft Visual Studio Community 2019 v16.9.4|\r\n|dotnet cli|6.0.100-preview.2.21155.3|\r\n|dotnet runtime|.NET 5.0.202|\r\n|OS|Win10 20H2 x64|\r\n|TimeZone|China Standard Time(UTC+08:00)|\r\n\r\n- The Web csproj(a part)\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk.Web\"\u003e\r\n    \u003cPropertyGroup\u003e\r\n        \u003c!--...--\u003e\r\n        \u003cTargetFramework\u003enet5.0\u003c/TargetFramework\u003e\r\n        \u003c!--...--\u003e\r\n    \u003c/PropertyGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n\r\n- The referenced library csproj\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cTargetFrameworks\u003enetstandard2.0;netstandard2.1;\u003c/TargetFrameworks\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\r\n    \u003cItemGroup Condition=\"\u0027$(TargetFramework)\u0027==\u0027netstandard2.0\u0027\"\u003e\r\n    \u003cPackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"3.1.15\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.AspNetCore.Identity.EntityFrameworkCore\" Version=\"2.2.0\" /\u003e\r\n    \u003cPackageReference Include=\"Z.EntityFramework.Plus.EFCore\" Version=\"3.1.36\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n  \u003cItemGroup Condition=\"\u0027$(TargetFramework)\u0027==\u0027netstandard2.1\u0027\"\u003e\r\n    \u003cPackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"5.0.6\" /\u003e\r\n    \u003cPackageReference Include=\"Microsoft.AspNetCore.Identity.EntityFrameworkCore\" Version=\"5.0.6\" /\u003e\r\n    \u003cPackageReference Include=\"Z.EntityFramework.Plus.EFCore\" Version=\"5.1.36\" /\u003e\r\n  \u003c/ItemGroup\u003e\r\n\u003c/Project\u003e\r\n\r\n```\r\n\r\n- The code (a part) in library\r\n\r\n```csharp\r\npublic async Task DoneFetchEntityAsync(...)\r\n{\r\n    if (context.ProviderFetcher != this \u0026\u0026 !context.FetchContext.IsFromCache)\r\n    {\r\n        //...\r\n        var now = DateTime.Now.Ticks;//\u003c-- here thrown exception\r\n        var val = context.Value;\r\n    }\r\n}\r\n```\r\n\r\nI has been try to exchange code position, delete `bin` and `obj` folders and rebuild the solution, but the exception exists.\r\n\r\n### Regression?\r\n\r\nSince this line of code appeared, the program has never been normal.\r\n\r\n\r\n### Other information\r\n\r\nThe detail please see the image\r\n\r\n\u003cimg width=\"976\" alt=\"a\" src=\"https://user-images.githubusercontent.com/26201412/118621492-ff6c6b80-b7f8-11eb-816c-9e817004e09a.png\"\u003e\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCricle\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-18T17:22:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzY5MTM2OA==",
                                           "createdAt":  "2021-05-19T02:13:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "Side note:\r\nCalling `DateTime.Now.Ticks` for timing info is going to be slower than other options, and if you\u0027re extremely unlucky and a DST transition happens between two calls your timing results are going to be wildly off.  If you want relative timing information, you should at least use `DateTime.UtcNow.Ticks`, or better yet `Stopwatch.GetTimestamp`, which would avoid the struct entirely (you\u0027d need to validate the frequency during program initialization, but most clocks will be using 100ns ticks).\r\n \r\nLong term you might want to look into actually setting up event sources, if you\u0027re only logging this, but that\u0027s more involved.",
                                           "updatedAt":  "2021-05-19T02:13:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzcwNDA5NQ==",
                                           "createdAt":  "2021-05-19T02:52:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cricle",
                                           "body":  "\u003e Side note:\r\n\u003e Calling `DateTime.Now.Ticks` for timing info is going to be slower than other options, and if you\u0027re extremely unlucky and a DST transition happens between two calls your timing results are going to be wildly off. If you want relative timing information, you should at least use `DateTime.UtcNow.Ticks`, or better yet `Stopwatch.GetTimestamp`, which would avoid the struct entirely (you\u0027d need to validate the frequency during program initialization, but most clocks will be using 100ns ticks).\r\n\u003e \r\n\u003e Long term you might want to look into actually setting up event sources, if you\u0027re only logging this, but that\u0027s more involved.\r\n\r\nThank you for your note. The data (`DateTime.Now`) will be store in database, so I just need to use the approximate time. I also try use `DateTime.UtcNow`, but the exception is still thrown.",
                                           "updatedAt":  "2021-05-19T02:52:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NDIzMDIzNQ==",
                                           "createdAt":  "2021-05-19T15:45:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e The data (`DateTime.Now`) will be store in database.\r\n\r\n.... `DateTime.Now` and `DateTime.UtcNow` will likely be two wildly different values, you can\u0027t swap one for the other if you\u0027re recording the value itself.  In almost all cases where you\u0027re recording \"now\", this is logging, and it should have been `DateTime.UtcNow` in the first place.  It\u0027s not clear why you\u0027d be recording ticks, however, because all databases have date/time types.  If you do want the local time, you need to also record the offset in effect at the time of recording, so the absolute instant can be reconstructed later, ideally as part of the same type (and quite probably you want the timezone recorded somewhere too), although I\u0027m not sure all databases support a `DateTimeOffset` type.",
                                           "updatedAt":  "2021-05-19T15:45:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NDI1MzkzNw==",
                                           "createdAt":  "2021-05-19T16:12:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Can you provide the stack trace or some other details to help indicate what in DateTime is throwing?",
                                           "updatedAt":  "2021-05-19T16:12:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NDY0NDkxNw==",
                                           "createdAt":  "2021-05-20T02:55:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cricle",
                                           "body":  "\u003e Can you provide the stack trace or some other details to help indicate what in DateTime is throwing?\r\n\r\n\u003cimg width=\"783\" alt=\"ps\" src=\"https://user-images.githubusercontent.com/26201412/118911304-900d8d80-b958-11eb-8cb7-374df6809ad8.png\"\u003e\r\n\u003cimg width=\"1085\" alt=\"ps2\" src=\"https://user-images.githubusercontent.com/26201412/118911311-93a11480-b958-11eb-8c47-7f48b1446f1a.png\"\u003e\r\n\r\nThe stack trace has nothing, I guess it\u0027s about threads",
                                           "updatedAt":  "2021-05-20T02:55:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0NDY0NjMwMg==",
                                           "createdAt":  "2021-05-20T02:59:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cricle",
                                           "body":  "\u003e \u003e The data (`DateTime.Now`) will be store in database.\r\n\u003e \r\n\u003e .... `DateTime.Now` and `DateTime.UtcNow` will likely be two wildly different values, you can\u0027t swap one for the other if you\u0027re recording the value itself. In almost all cases where you\u0027re recording \"now\", this is logging, and it should have been `DateTime.UtcNow` in the first place. It\u0027s not clear why you\u0027d be recording ticks, however, because all databases have date/time types. If you do want the local time, you need to also record the offset in effect at the time of recording, so the absolute instant can be reconstructed later, ideally as part of the same type (and quite probably you want the timezone recorded somewhere too), although I\u0027m not sure all databases support a `DateTimeOffset` type.\r\n\r\nThank you very much for your help. I think I should use the `DateTime` type to record(Using SQL Service) after this exception is resolved",
                                           "updatedAt":  "2021-05-20T02:59:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vNNKZ",
                                           "createdAt":  "2023-12-21T07:20:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Cricle",
                                           "body":  "This is caused by moving the current running code during VS debugging, the specific reason is unknown",
                                           "updatedAt":  "2023-12-21T07:20:54Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  ".NET 5.0 runtime call DateTime.Now.Ticks in library .netstandard2.0\u0026.netstandard2.1 thrown exception",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53519",
        "createdAt":  "2021-06-01T10:34:46Z",
        "number":  53519,
        "author":  "bramve-fenetre",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T01:52:13Z",
        "body":  "### Description\r\n\r\nFor context our application is hosted in the Europe/Amsterdam timezone and we use dates dating back in the 1900\u0027s. Throughout the years different daylight saving rules are applied to this timezone. This is where there we found a weird problem where a wrong timezone offset is used for summer days in years where there should be no daylight time savings yet. Here is the code on how to see the issue:\r\n\r\n```\r\n//System timezone Europe/Amsterdam  (GMT+1 without daylight saving, GMT+2 with daylight saving)\r\n\r\n// Date before daylight saving time was introduced\r\nvar beforeDaylightSaving = DateTime.Parse(\"1958-07-03T23:00:00.000Z\");\r\nvar beforeDaylightSavingISOString = beforeDaylightSaving.ToString(\"s\");\r\n//Results in GMT +2: 1958-07-04T01:00:00\r\n//Expected GMT +1: 1958-07-04T00:00:00\r\n//NOT OK\r\n\r\n// Date in daylight saving time\r\nvar daylightSaving = DateTime.Parse(\"2000-07-03T22:00:00.000Z\");\r\nvar daylightSavingISOString = daylightSaving.ToString(\"s\");\r\n//Results in GMT +2: 2000-07-04T00:00:00\r\n//Expected GMT +2: 2000-07-04T00:00:00\r\n//OK\r\n\r\n// Date outside of daylight saving time\r\nvar noDaylightSaving = DateTime.Parse(\"2000-11-03T23:00:00.000Z\");\r\nvar noDaylightSavingISOString = noDaylightSaving.ToString(\"s\");\r\n//Results in GMT +1: 2000-11-04T00:00:00\r\n//Expected GMT +1: 2000-11-04T00:00:00\r\n//OK\r\n```\r\n\r\nIn the above example there are 3 scenario\u0027s\r\n1. A date in summer months in a year where DTS was not applicable (Before 1977)\r\n2. A date in summer months in a year where DTS was applicable\r\n3. A date in winter months in a year where DTS was applicable\r\n\r\nOut of these 3 scenario\u0027s the first scenario is done incorrectly, there are 2 hours added in the DateTime after parsing the ISO string. This should be just 1 hour as in the year 1958 Daylight saving time did not exist in the Netherlands.\r\n\r\nThese same 3 scenario\u0027s can be tested in Javascript by just doing `new Date(isoString)` in the browser console, this results in the correct behavior. I would expect the same in .NET here.\r\n\r\n### Configuration\r\n\r\n* Tested this on .NET Core 3.1 and the old .NET Framework 4.7\r\n* Windows 10 x64\r\n* **Important**: Timezone Europe/Amsterdam",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM1xKFw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjAxNzkwNw==",
                                           "createdAt":  "2021-06-01T10:34:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tarekgh, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nFor context our application is hosted in the Europe/Amsterdam timezone and we use dates dating back in the 1900\u0027s. Throughout the years different daylight saving rules are applied to this timezone. This is where there we found a weird problem where a wrong timezone offset is used for summer days in years where there should be no daylight time savings yet. Here is the code on how to see the issue:\r\n\r\n```\r\n//System timezone Europe/Amsterdam  (GMT+1 without daylight saving, GMT+2 with daylight saving)\r\n\r\n// Date before daylight saving time was introduced\r\nvar beforeDaylightSaving = DateTime.Parse(\"1958-07-03T23:00:00.000Z\");\r\nvar beforeDaylightSavingISOString = beforeDaylightSaving.ToString(\"s\");\r\n//Results in GMT +2: 1958-07-04T01:00:00\r\n//Expected GMT +1: 1958-07-04T00:00:00\r\n//NOT OK\r\n\r\n// Date in daylight saving time\r\nvar daylightSaving = DateTime.Parse(\"2000-07-03T22:00:00.000Z\");\r\nvar daylightSavingISOString = daylightSaving.ToString(\"s\");\r\n//Results in GMT +2: 2000-07-04T00:00:00\r\n//Expected GMT +2: 2000-07-04T00:00:00\r\n//OK\r\n\r\n// Date outside of daylight saving time\r\nvar noDaylightSaving = DateTime.Parse(\"2000-11-03T23:00:00.000Z\");\r\nvar noDaylightSavingISOString = noDaylightSaving.ToString(\"s\");\r\n//Results in GMT +1: 2000-11-04T00:00:00\r\n//Expected GMT +1: 2000-11-04T00:00:00\r\n//OK\r\n```\r\n\r\nIn the above example there are 3 scenario\u0027s\r\n1. A date in summer months in a year where DTS was not applicable (Before 1977)\r\n2. A date in summer months in a year where DTS was applicable\r\n3. A date in winter months in a year where DTS was applicable\r\n\r\nOut of these 3 scenario\u0027s the first scenario is done incorrectly, there are 2 hours added in the DateTime after parsing the ISO string. This should be just 1 hour as in the year 1958 Daylight saving time did not exist in the Netherlands.\r\n\r\nThese same 3 scenario\u0027s can be tested in Javascript by just doing `new Date(isoString)` in the browser console, this results in the correct behavior. I would expect the same in .NET here.\r\n\r\n### Configuration\r\n\r\n* Tested this on .NET Core 3.1 and the old .NET Framework 4.7\r\n* Windows 10 x64\r\n* **Important**: Timezone Europe/Amsterdam\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebramve-fenetre\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-01T10:34:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjAyNTA4NQ==",
                                           "createdAt":  "2021-06-01T10:47:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "\u003e * Tested this on .NET Core 3.1 and the old .NET Framework 4.7\r\n\u003e * Windows 10 x64\r\n\r\nCan you test this on .NET 5 (and/or Linux) for completeness? With .NET 5 [all culture-related APIs (which includes time zones) switched the Windows implementation to ICU data](https://docs.microsoft.com/en-us/dotnet/core/compatibility/globalization/5.0/icu-globalization-api), so that may give the correct answer for such historical dates.",
                                           "updatedAt":  "2021-06-01T10:47:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjAzNzQxMg==",
                                           "createdAt":  "2021-06-01T11:07:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bramve-fenetre",
                                           "body":  "@Joe4evr Tested it with .NET 5 now (5.0.6). The same behavior still occurs in that version",
                                           "updatedAt":  "2021-06-01T11:07:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjIyMDE5OQ==",
                                           "createdAt":  "2021-06-01T15:30:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "I suspect `TimeZone.CurrentTimeZone.ToLocalTime(DateTime.Parse(\"1958-07-03T23:00:00.000Z\")).ToString(\"s\")` may work.",
                                           "updatedAt":  "2021-06-01T15:30:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjI5MDYwMQ==",
                                           "createdAt":  "2021-06-01T17:03:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tannergooding\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nFor context our application is hosted in the Europe/Amsterdam timezone and we use dates dating back in the 1900\u0027s. Throughout the years different daylight saving rules are applied to this timezone. This is where there we found a weird problem where a wrong timezone offset is used for summer days in years where there should be no daylight time savings yet. Here is the code on how to see the issue:\r\n\r\n```\r\n//System timezone Europe/Amsterdam  (GMT+1 without daylight saving, GMT+2 with daylight saving)\r\n\r\n// Date before daylight saving time was introduced\r\nvar beforeDaylightSaving = DateTime.Parse(\"1958-07-03T23:00:00.000Z\");\r\nvar beforeDaylightSavingISOString = beforeDaylightSaving.ToString(\"s\");\r\n//Results in GMT +2: 1958-07-04T01:00:00\r\n//Expected GMT +1: 1958-07-04T00:00:00\r\n//NOT OK\r\n\r\n// Date in daylight saving time\r\nvar daylightSaving = DateTime.Parse(\"2000-07-03T22:00:00.000Z\");\r\nvar daylightSavingISOString = daylightSaving.ToString(\"s\");\r\n//Results in GMT +2: 2000-07-04T00:00:00\r\n//Expected GMT +2: 2000-07-04T00:00:00\r\n//OK\r\n\r\n// Date outside of daylight saving time\r\nvar noDaylightSaving = DateTime.Parse(\"2000-11-03T23:00:00.000Z\");\r\nvar noDaylightSavingISOString = noDaylightSaving.ToString(\"s\");\r\n//Results in GMT +1: 2000-11-04T00:00:00\r\n//Expected GMT +1: 2000-11-04T00:00:00\r\n//OK\r\n```\r\n\r\nIn the above example there are 3 scenario\u0027s\r\n1. A date in summer months in a year where DTS was not applicable (Before 1977)\r\n2. A date in summer months in a year where DTS was applicable\r\n3. A date in winter months in a year where DTS was applicable\r\n\r\nOut of these 3 scenario\u0027s the first scenario is done incorrectly, there are 2 hours added in the DateTime after parsing the ISO string. This should be just 1 hour as in the year 1958 Daylight saving time did not exist in the Netherlands.\r\n\r\nThese same 3 scenario\u0027s can be tested in Javascript by just doing `new Date(isoString)` in the browser console, this results in the correct behavior. I would expect the same in .NET here.\r\n\r\n### Configuration\r\n\r\n* Tested this on .NET Core 3.1 and the old .NET Framework 4.7\r\n* Windows 10 x64\r\n* **Important**: Timezone Europe/Amsterdam\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebramve-fenetre\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-01T17:03:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjM5OTY1OQ==",
                                           "createdAt":  "2021-06-01T19:45:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@bramve-fenetre this is a known limitation when running on Windows. Windows doesn\u0027t carry the historical time zone data. When you look at the Windows time zone data in the registry `HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones\\W. Europe Standard Time` you will find the data is covering the whole date ranges from `1/1/1` to `12/31/999`. and the following adjustment rule will apply even for year 1985 which state the daylight saving always starts in March and ends in October.\r\n\r\n```\r\nDateStart                  : 1/1/0001 12:00:00 AM (Unspecified)\r\nDateEnd                    : 12/31/9999 12:00:00 AM (Unspecified)\r\nDaylightDelta              : 01:00:00\r\nDaylightTransitionStart    : M:3, D:1, W:5, DoW:Sunday, FixedDate:False\r\nDaylightTransitionEnd      : M:10, D:1, W:5, DoW:Sunday, FixedDate:False\r\nBaseUtcOffsetDelta         : 00:00:00\r\nNoDaylightTransitions      : False\r\n```\r\n\r\nIt is already something we are considering to fix in the future release to try to depend on other source of the data rather than Windows registry data.\r\n\r\nP.S. this should work fine on Linux though.",
                                           "updatedAt":  "2021-06-01T19:45:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MTQ4NTIxNw==",
                                           "createdAt":  "2021-06-15T13:11:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rogerhendriks",
                                           "body":  "@tarekgh 2 questions:\r\nThis is closed but what is the Issue # we can follow then as you are considering this?\r\n\r\nThis is quite serious: in our applications all dates and calculated ages in the summer \u003c=1958 are incorrect on Windows. \r\nWhat is the recommended workaround?\r\n",
                                           "updatedAt":  "2021-06-15T13:11:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MTY4NjI5NQ==",
                                           "createdAt":  "2021-06-15T17:22:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBve7RQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rogerhendriks",
                                                                               "createdAt":  "2021-06-21T11:21:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e What is the recommended workaround?\r\n\r\nCurrently there is no easy work around for that. You may consider using [NodaTime Library](https://nodatime.org/) if this is really a blocker. \r\n\r\n\u003e This is closed but what is the Issue # we can follow then as you are considering this?\r\n\r\nI\u0027ll reopen this issue and move it to the future. When I meant considering it, I meant this came up in some other offline discussions. We don\u0027t consider this high priority because it is limited scenario and also the limitation is on the OS too. ",
                                           "updatedAt":  "2021-06-15T17:22:36Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "DateTime daylight savings issue",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54400",
        "createdAt":  "2021-06-18T03:12:20Z",
        "number":  54400,
        "author":  "DrkWzrd",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T01:51:07Z",
        "body":  "## Background and Motivation\r\nI apologize in advance for my English.\r\n\r\nTimeSpan is fine, but managing big time spans (years, months) with it (or, in the worst case, with DateTime struct) is so frustrating (and in DateTime case, incoherent). In real world there are so many scenarios where we use larger time spans than just a few days.\r\n\r\nTherefore, I think DateOnly introduction should be accompanied with a DateSpan type (because I understand adding APIs like Months, or Years to TimeSpan should not be right). making computations with DateOnly easier, and more clear and straightforward when we are developing. \r\n\r\nAnd DateOnly has this APIs, but separated in every field (days, months and years), and are backed by DateTime internally, but I think we need a structure to represent that, a DateSpan. a Date\"Period\" (something like TimeSpan, but with bigger concepts like weeks, months and years; like NodaTime Period).\r\n\r\nE.g.: if i talk with someone about an appointment in \"3 months\" or \"2 weeks\", or \"4 years\" this numbers are so big to manage it in days values with TimeSpan. In addition, if we are working with DateOnly types, it doesn\u0027t make sense to use an XXXXSpan struct which accepts values smaller than days.\r\n\r\nWith this struct should be able to operate with DateOnly types (e.g.: operators like +, -, etc are not included right now).\r\n\r\n## Proposed API\r\n```\r\n    namespace System\r\n    {\r\n        public readonly struct DateSpan : IEquatable\u003cDateSpan\u003e, IFormattable, IComparable, IComparable\u003cDateSpan\u003e\r\n        {\r\n\r\n            public static DateSpan MinValue { get { throw null; } }\r\n            public static DateSpan MaxValue { get { throw null; } }\r\n\r\n            public int Days { get { throw null; } }\r\n            public int Months { get { throw null; } }\r\n            public int Years { get { throw null; } }\r\n\r\n            public int TotalDays { get { throw null; } } //the lesser unit allowed should be days, then total days can be an integer\r\n            public double TotalMonths { get { throw null; } }\r\n            public double TotalYears { get { throw null; } }\r\n\r\n            public int CompareTo(DateSpan other) { throw new NotImplementedException(); }\r\n            public int CompareTo(object obj) { throw new NotImplementedException(); }\r\n            public bool Equals(DateSpan other) { throw new NotImplementedException(); }\r\n            public string ToString(string format, IFormatProvider formatProvider) { throw new NotImplementedException(); }\r\n\r\n            public static DateSpan operator +(DateSpan ds1, DateSpan ds2) { throw null; }\r\n            public static DateSpan operator -(DateSpan ds1, DateSpan ds2) { throw null; }\r\n\r\n            public static implicit operator TimeSpan(DateSpan ds1) { throw null; } //something like this:  return new TimeSpan(ds1.TotalDays, 0, 0, 0, 0);\r\n            public static implicit operator DateSpan(TimeSpan ts1) { throw null; }\r\n        }\r\n\r\n    }\r\n```\r\n## Usage Examples\r\n\r\nThis API should allow this new operators \r\n\r\n```\r\n    public struct DateOnly\r\n    {\r\n        public static DateSpan operator -(DateOnly do1, DateOnly do2) { throw null; }\r\n\r\n        public static DateOnly operator +(DateOnly do1, DateSpan ds1) { throw null; }\r\n    }\r\n\r\n    public struct DateTime\r\n    {\r\n        public static DateSpan operator -(DateTime dt1, DateTime dt2) { throw null; }\r\n        public static DateTime operator +(DateTime dt1, DateSpan ds1) { throw null; }\r\n    }\r\n\r\n```\r\n## Risks\r\n\r\nThe one main risk I can see is the confusion of usage between TimeSpan and DateSpan. But I\u0027m sure there are a lot I haven\u0027t thought.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSfxodw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzcyMTkyMQ==",
                                           "createdAt":  "2021-06-18T03:12:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-06-18T03:12:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2Mzc1MTM1NA==",
                                           "createdAt":  "2021-06-18T04:44:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\nI apologize in advance for my English.\r\n\r\nTimeSpan is fine, but managing big time spans (years, months) with it (or, in the worst case, with DateTime struct) is so frustrating (and in DateTime case, incoherent). In real world there are so many scenarios where we use larger time spans than just a few days.\r\n\r\nTherefore, I think DateOnly introduction should be accompanied with a DateSpan type (because I understand adding APIs like Months, or Years to TimeSpan should not be right). making computations with DateOnly easier, and more clear and straightforward when we are developing. \r\n\r\nAnd DateOnly has this APIs, but separated in every field (days, months and years), and are backed by DateTime internally, but I think we need a structure to represent that, a DateSpan. a Date\"Period\" (something like TimeSpan, but with bigger concepts like weeks, months and years; like NodaTime Period).\r\n\r\nE.g.: if i talk with someone about an appointment in \"3 months\" or \"2 weeks\", or \"4 years\" this numbers are so big to manage it in days values with TimeSpan. In addition, if we are working with DateOnly types, it doesn\u0027t make sense to use an XXXXSpan struct which accepts values smaller than days.\r\n\r\nWith this struct should be able to operate with DateOnly types (e.g.: operators like +, -, etc are not included right now).\r\n\r\n## Proposed API\r\n```\r\n    namespace System\r\n    {\r\n        public readonly struct DateSpan : IEquatable\u003cDateSpan\u003e, IFormattable, IComparable, IComparable\u003cDateSpan\u003e\r\n        {\r\n\r\n            public static DateSpan MinValue { get { throw null; } }\r\n            public static DateSpan MaxValue { get { throw null; } }\r\n\r\n            public int Days { get { throw null; } }\r\n            public int Months { get { throw null; } }\r\n            public int Years { get { throw null; } }\r\n\r\n            public int TotalDays { get { throw null; } } //the lesser unit allowed should be days, then total days can be an integer\r\n            public double TotalMonths { get { throw null; } }\r\n            public double TotalYears { get { throw null; } }\r\n\r\n            public int CompareTo(DateSpan other) { throw new NotImplementedException(); }\r\n            public int CompareTo(object obj) { throw new NotImplementedException(); }\r\n            public bool Equals(DateSpan other) { throw new NotImplementedException(); }\r\n            public string ToString(string format, IFormatProvider formatProvider) { throw new NotImplementedException(); }\r\n\r\n            public static DateSpan operator +(DateSpan ds1, DateSpan ds2) { throw null; }\r\n            public static DateSpan operator -(DateSpan ds1, DateSpan ds2) { throw null; }\r\n\r\n            public static implicit operator TimeSpan(DateSpan ds1) { throw null; } //something like this:  return new TimeSpan(ds1.TotalDays, 0, 0, 0, 0);\r\n            public static implicit operator DateSpan(TimeSpan ts1) { throw null; }\r\n        }\r\n\r\n    }\r\n```\r\n## Usage Examples\r\n\r\nThis API should allow this new operators \r\n\r\n```\r\n    public struct DateOnly\r\n    {\r\n        public static DateSpan operator -(DateOnly do1, DateOnly do2) { throw null; }\r\n\r\n        public static DateOnly operator +(DateOnly do1, DateSpan ds1) { throw null; }\r\n    }\r\n\r\n    public struct DateTime\r\n    {\r\n        public static DateSpan operator -(DateTime dt1, DateTime dt2) { throw null; }\r\n        public static DateTime operator +(DateTime dt1, DateSpan ds1) { throw null; }\r\n    }\r\n\r\n```\r\n## Risks\r\n\r\nThe one main risk I can see is the confusion of usage between TimeSpan and DateSpan. But I\u0027m sure there are a lot I haven\u0027t thought.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDrkWzrd\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-18T04:44:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MzgwMzk4NQ==",
                                           "createdAt":  "2021-06-18T06:54:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBvRIUA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "huoyaoyuan",
                                                                               "createdAt":  "2021-06-18T09:37:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e In real world there are so many scenarios where we use larger time spans than just a few days.\r\n\r\nThe real concern isn\u0027t the _length_ of time, it\u0027s the fact that years/months have a varying number of days (and thus hours/minutes/seconds).  In contrast, `TimeSpan` represents an exact duration.  NodaTime (and JodaTime/JSR310) refer to this as a [`Period`](https://nodatime.org/3.0.x/api/NodaTime.Period.html), although the name isn\u0027t terribly important overall.\r\n",
                                           "updatedAt":  "2021-06-18T06:54:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDEyNjE4Mw==",
                                           "createdAt":  "2021-06-18T15:42:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrkWzrd",
                                           "body":  "@Clockwork-Muse I know months and years are variable length elements, but that not invalidate my argument. In fact, \u0027Period\u0027 from NodaTime has APIs for \u0027Weeks\u0027, \u0027Months\u0027 and \u0027Years\u0027 for example. And I understand TimeSpan is a \"not editable\" API (that\u0027s why I suggest a new-not incompatible API), and the computations made by \u0027Period\u0027 and \u0027TimeSpan\u0027 are like night and day.\r\n\r\nMy point is \"if we have a DateOnly API we should have a API representing Span between two DateOnlys, and TimeSpan for that case could be... not convenient in a lot of cases\".\r\n\r\nThe name is irrelevant, I chose it because already exists something similar (but not equal) in .net: TimeSpan",
                                           "updatedAt":  "2021-06-18T15:45:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDI1NDExNA==",
                                           "createdAt":  "2021-06-18T20:17:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e ```csharp\r\n\u003e public int TotalDays { get { throw null; } } \r\n\u003e public double TotalMonths { get { throw null; } }\r\n\u003e public double TotalYears { get { throw null; } }\r\n\u003e```\r\n\r\nThese rely heavily on _normalization_, and in particular any of them will give wildly incorrect values if any of the properties are large enough.\r\n\r\n\u003e ```csharp\r\n\u003e public static implicit operator TimeSpan(DateSpan ds1) { throw null; } //something like this:  return new TimeSpan(ds1.TotalDays, 0, 0, 0, 0);\r\n\u003e public static implicit operator DateSpan(TimeSpan ts1) { throw null; }\r\n\u003e```\r\n\r\nThese are actively dangerous, because the values you get this way can (and almost always will) be wildly different than the existing codepaths.  You\u0027re essentially reinventing DB2\u0027s `TIMESTAMPDIFF`, [and that has problems](https://stackoverflow.com/q/7677529/812837).\r\n\r\n\u003e```csharp\r\n\u003e public struct DateTime\r\n\u003e {\r\n\u003e     public static DateSpan operator -(DateTime dt1, DateTime dt2) { throw null; }\r\n\u003e }\r\n\u003e```\r\n\r\nThis isn\u0027t possible to implement, since there\u0027s an existing subtraction operator with this signature.\r\n\r\n\u003e I know months and years are variable length elements, but that not invalidate my argument.\r\n\r\nI\u0027m not disagreeing about that it\u0027s a useful type.  What I\u0027m getting at is that \"amount in `TimeSpan`\" is not a relevant argument in favor of the type, as opposed to more natural \"relative\" offsets.",
                                           "updatedAt":  "2021-06-18T20:17:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDQ5ODQ2Ng==",
                                           "createdAt":  "2021-06-20T04:38:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrkWzrd",
                                           "body":  "@Clockwork-Muse Maybe the API can (or must) include a reference to a concrete `Calendar` or require it in one of the ctors and do the numbers around it (just like DateOnly).",
                                           "updatedAt":  "2021-06-20T04:42:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDU0NDc1MA==",
                                           "createdAt":  "2021-06-20T12:12:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Let\u0027s say you have\n\n- `DateTime dt2` for February 1, 2000\n- `DateSpan ds1m` for one month\n- `DateSpan ds30d` for 30 days\n\nThen, I think the result of `dt2 + ds1m` should be March 1, 2000, because that\u0027s what `dt2.AddMonths(1)` returns. `dt2 + ds30d` should be is March 2, 2000, like `dt2.AddDays(30)`. Right?\n\nWhat should `ds1m.TotalDays` return? The difference between February 1 and March 1 is 29 days but `ds1m` does not know that the month is February and the year is a leap year. Perhaps `TotalDays` would have to always translate 1 month to the same number of days (e.g. 30 days). I doubt such a property would be useful for applications.\n\nWhat should `ds1m.Equals(ds30d)` return? I think `false` because `dt2 + ds1m` is March 1 but `dt2 + ds30d` is March 2. \n\nWhat should `ds1m.CompareTo(ds30d)` return? If it returns 0 just because both `ds1m.TotalDays` and `ds30d.TotalDays` are 30, that seems a bit inconsistent with `Equals`. Such a comparison could still be useful for sorting date spans in a user interface, though.",
                                           "updatedAt":  "2021-06-20T12:12:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2NDU3MzQ5OQ==",
                                           "createdAt":  "2021-06-20T15:45:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "Basically, what @KalleOlaviNiemitalo is saying about the `TotalX` properties is what the problems end up being, and what the issue with `TIMESTAMPDIFF` ends up being for DB2.\r\n\r\n\u003e Maybe the API can (or must) include a reference to a concrete `Calendar` or require it in one of the ctors and do the numbers around it (just like DateOnly).\r\n\r\nGiven ease of implementation, expected use patterns, and the rest of the shape of the API, I expect by default it wouldn\u0027t take `Calendar`.\r\n\r\n\u003e What should `ds1m.Equals(ds30d)` return? I think `false` because `dt2 + ds1m` is March 1 but `dt2 + ds30d` is March 2.\r\n\u003e\r\n\u003eWhat should `ds1m.CompareTo(ds30d)` return? If it returns 0 just because both `ds1m.TotalDays` and `ds30d.TotalDays` are 30, that seems a bit inconsistent with `Equals`. Such a comparison could still be useful for sorting date spans in a user interface, though.\r\n\r\nThe only \"proper\" way to implement a type like this is to have individual fields.  `Equals` would work off the individual fields.\r\nI didn\u0027t really think about it, but neither of the equivalent types in Java and NodaTime implement a comparing interface, which makes sense given the issue you mention.  That aside, if it was implemented I\u0027d probably just strictly sort on YMD, since in **most** cases this will return the expected ordering (since in most cases `M \u003c 12, D \u003c 31`).\r\n",
                                           "updatedAt":  "2021-06-20T15:45:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40qRAq",
                                           "createdAt":  "2021-07-20T15:41:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daiplusplus",
                                           "body":  "I agree that `DateOnly` should ship with `DateSpan` (or similar), otherwise it\u0027s going to leave another awkward void in the API (though I am very pleased that we finally have a real date type built-in to the framework, and hopefully `1:1` support for database `date` types too?)\r\n\r\nIn my own private utility library I have a `Date` struct that\u0027s similar to `DateOnly` in that it wraps a `DateTime` value (it also has an `int ExcelSerial` property that is aware of the 1904 problem...), and for my `DateSpan` type I implemented it as a simple tuple over `Date from, Int32 daysLength` representing the signed number of days from `from`. This does mean that it only offers simple operations over integral days - with no consideration towards weeks, months, or years (well, it does have an `IsoWeeks` count and `float ApproxYears`, but that\u0027s not what most people are after, I assume).\r\n\r\n@DrkWzrd I like your idea to use require a `Calendar` reference to allow for month and year arithmetic, I think I\u0027ll steal that idea for my own library :)",
                                           "updatedAt":  "2021-07-20T15:41:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J_AS9",
                                           "createdAt":  "2022-09-08T21:29:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "CC. @tarekgh for input on this since it impacts date/times.",
                                           "updatedAt":  "2022-09-08T21:29:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J_Gh3",
                                           "createdAt":  "2022-09-08T21:59:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I recall there was some other similar request but couldn\u0027t find it now. Anyway, this is a request to expose things like `Duration` or `Period` type. I suggest triage this to keep the issue open for the future. ",
                                           "updatedAt":  "2022-09-08T21:59:58Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "DateOnly should have a matching Span type",
        "labels":  [
                       "api-suggestion",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57736",
        "createdAt":  "2021-08-19T15:32:43Z",
        "number":  57736,
        "author":  "hrrrrustic",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T01:51:09Z",
        "body":  "Do all of this constants still needed?\r\nhttps://github.com/dotnet/runtime/blob/1eed51293dd5bfc7ce602b9ef8b25097c9a0a215/src/libraries/System.Private.CoreLib/src/System/DateTime.cs#L61-L65\r\n\r\n `DateTimeOfsset`, `DateOnly` and `TimeOnly` use directly `TimeSpan` public ones\r\nhttps://github.com/dotnet/runtime/blob/56d881f52fd2e1a00363d32356ab41585e31b0a2/src/libraries/System.Private.CoreLib/src/System/DateTimeOffset.cs#L49-L56\r\n\r\nhttps://github.com/dotnet/runtime/blob/56d881f52fd2e1a00363d32356ab41585e31b0a2/src/libraries/System.Private.CoreLib/src/System/DateOnly.cs#L31-L33\r\n\r\nhttps://github.com/dotnet/runtime/blob/56d881f52fd2e1a00363d32356ab41585e31b0a2/src/libraries/System.Private.CoreLib/src/System/TimeOnly.cs#L113-L122",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONc9YoQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41w6Tt",
                                           "createdAt":  "2021-08-19T15:32:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-08-19T15:32:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41w8es",
                                           "createdAt":  "2021-08-19T15:44:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hrrrrustic",
                                           "body":  "Well, I also see same constants in `StopWatch`, `InternalGlobalizationHelper`, `GregorianCalendarHelper`, `InternalGlobalizationHelper` and `Calendar`",
                                           "updatedAt":  "2021-08-19T18:07:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41zLdk",
                                           "createdAt":  "2021-08-20T10:52:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hrrrrustic",
                                           "body":  "I guess this is System.Runtime\r\n@tannergooding",
                                           "updatedAt":  "2021-08-20T10:52:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41z1ih",
                                           "createdAt":  "2021-08-20T15:38:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nDo all of this constants still needed?\r\nhttps://github.com/dotnet/runtime/blob/1eed51293dd5bfc7ce602b9ef8b25097c9a0a215/src/libraries/System.Private.CoreLib/src/System/DateTime.cs#L61-L65\r\n\r\n `DateTimeOfsset`, `DateOnly` and `TimeOnly` use directly `TimeSpan` public ones\r\nhttps://github.com/dotnet/runtime/blob/56d881f52fd2e1a00363d32356ab41585e31b0a2/src/libraries/System.Private.CoreLib/src/System/DateTimeOffset.cs#L49-L56\r\n\r\nhttps://github.com/dotnet/runtime/blob/56d881f52fd2e1a00363d32356ab41585e31b0a2/src/libraries/System.Private.CoreLib/src/System/DateOnly.cs#L31-L33\r\n\r\nhttps://github.com/dotnet/runtime/blob/56d881f52fd2e1a00363d32356ab41585e31b0a2/src/libraries/System.Private.CoreLib/src/System/TimeOnly.cs#L113-L122\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehrrrrustic\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-20T15:38:01Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "DateTime private constants",
        "labels":  [
                       "needs-further-triage",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58734",
        "createdAt":  "2021-09-06T21:55:57Z",
        "number":  58734,
        "author":  "olmobrutall",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCpEiw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2021-09-07T08:10:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ChristophTF",
                                            "createdAt":  "2021-09-07T14:23:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2021-09-08T12:10:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlgorithmsAreCool",
                                            "createdAt":  "2021-10-31T00:43:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Pilchard123",
                                            "createdAt":  "2022-06-24T11:25:58Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "yv989c",
                                            "createdAt":  "2022-11-16T21:32:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jnpritchard",
                                            "createdAt":  "2023-03-14T20:58:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shuruev",
                                            "createdAt":  "2023-05-24T20:09:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "amunim",
                                            "createdAt":  "2023-07-15T09:39:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StijnOttenVMT",
                                            "createdAt":  "2023-07-18T11:37:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "304NotModified",
                                            "createdAt":  "2024-02-27T18:40:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ascott18",
                                            "createdAt":  "2024-03-13T18:49:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-06-14T10:50:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IanKemp",
                                            "createdAt":  "2024-10-31T18:30:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CePur",
                                            "createdAt":  "2024-12-06T16:20:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SKProCH",
                                            "createdAt":  "2025-01-22T11:12:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JSparshottO2",
                                            "createdAt":  "2025-03-28T14:25:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OronDF343",
                                            "createdAt":  "2025-05-21T14:53:28Z"
                                        }
                                    ],
                          "totalCount":  18
                      },
        "updatedAt":  "2024-06-14T15:26:34Z",
        "body":  "### Background and motivation\r\n\r\nAs part of adapting Signum Framework to .Net 6 I had some friction with the current API for `DateOnly` / `TimeOnly`, specially in the LINQ provider. I think similar inconveniences will arise in Entity Framework.\r\n\r\nDuring the design and implementation that @tarekgh was championing, at some point (https://github.com/dotnet/runtime/issues/49036#issuecomment-802237375 / https://github.com/dotnet/runtime/issues/49036#issuecomment-803058176) was decided to remove any implicit or explicit conversion operator between `DateTime` and `DateOnly`, and also `TimeSpan` and `TimeOnly`. There was some discussion about whether this operators should be implicit or explicit, but not any discussion why they were removed. \r\n\r\nI think this is a bad decision for a few reasons: \r\n\r\n1.  Conversion operators are more discoverable: Why there is `date.ToDateTime(...)`, but no  `dateTime.ToDateOnly()` and you have to use `DateOnly.FromDateTime` instead? There is a \"`DateOnly` was invented later\" argument that is not evident for a new developer, making `DateOnly` a second class citizen. For conversion operators, as a consumer, you don\u0027t need to worry whether they are implemented in the source or target type. \r\n2. Is inconsistent with other similar APIs, like `public static implicit operator DateTimeOffset(DateTime dateTime)`.\r\n3. When casting from `DateOnly` to `DateTime`, I see there is a real ambiguity in what `DateTimeKind` should be used, but can be safely assume that the time is expected to be `00:00:00`. The current API however always forces a `TimeOnly` but is more forgiving on the `DateTimeKind` part. Why?\r\n\r\nBut more specific, it makes working in SQL / LINQ scenarios much harder: \r\n\r\n**Conversion operators can be lifted** \r\n https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/expressions#lifted-operators, \r\n\r\nThis means if there is a conversion from `DateOnly` to `DateTime`, C# compiler creates a conversion from `DateOnly?` to `DateTime?` automatically for you (Yeah!): \r\n\r\n```C#\r\ndb.Invoces.Select(inv = new { DateTime = (DateOnly?)inv.InvoiceDate })  //With automatically lifted operator\r\ndb.Invoces.Select(inv = new { DateTime = inv.InvoiceDate == null ? null : inv.InvoiceDate.ToDateTime(TimeOnly.MinValue) }) //Current API\r\n\r\ndb.Invoces.Select(inv = new { Date = (DateOnly?)inv.InvoiceDateTime }) //With automatically lifted operator\r\ndb.Invoces.Select(inv = new { Date = inv.InvoiceDateTime == null ? null : DateOnly.FromDateTime(inv.InvoiceDateTime) }) //Current API\r\n```\r\n\r\nYou could get some relive by implementing some extension methods: \r\n\r\n```C#\r\n    public static DateTime ToDateTime(this DateOnly date)\r\n    {\r\n            return date.ToDateTime(new TimeOnly());\r\n    }\r\n\r\n    public static DateOnly ToDateOnly(this DateTime dateTime)\r\n    {\r\n           return DateOnly.FromDateTime(dateTime);\r\n    }\r\n    \r\n     public static TimeOnly ToTimeOnly(this TimeSpan time)\r\n     {\r\n            return TimeOnly.FromTimeSpan(time);\r\n     }\r\n```\r\n\r\n```C#\r\ndb.Invoces.Select(inv = new { DateTime = (DateOnly?)inv.InvoiceDate })  //With automatically lifted operator\r\ndb.Invoces.Select(inv = new { DateTime = inv.InvoiceDate == null ? null : inv.InvoiceDate.ToDateTime() }) //With custom extension methods\r\ndb.Invoces.Select(inv = new { DateTime = inv.InvoiceDate == null ? null : inv.InvoiceDate.ToDateTime(TimeOnly.MinValue) }) //Current API\r\n\r\ndb.Invoces.Select(inv = new { Date = (DateOnly?)inv.InvoiceDateTime }) //With automatically lifted operator\r\ndb.Invoces.Select(inv = new { Date = inv.InvoiceDateTime == null ? null : inv.InvoiceDateTime.ToDateOnly() }) //With custom extension methods\r\ndb.Invoces.Select(inv = new { Date = inv.InvoiceDateTime == null ? null : DateOnly.FromDateTime(inv.InvoiceDateTime) }) //Current API\r\n```\r\n\r\nAnd in theory you could simulate lifted operators using `?.`, but [nowadays you can\u0027t](https://github.com/dotnet/csharplang/issues/503) and [2](https://github.com/dotnet/csharplang/discussions/158) (Buuuh!!!), so you need to add a few overloads more to make it usable with nullable types: \r\n\r\n```C#\r\n        public static DateTime? ToDateTime(this DateOnly? date)\r\n        {\r\n            return date == null ? null: date.Value.ToDateTime(new TimeOnly());\r\n        }\r\n\r\n        public static DateTime? ToDateTime(this DateOnly? date, DateTimeKind kind)\r\n        {\r\n            return date == null ? null : date.Value.ToDateTime(new TimeOnly(), kind);\r\n        }\r\n\r\n        public static DateOnly? ToDateOnly(this DateTime? dateTime)\r\n        {\r\n            return dateTime == null ? null : DateOnly.FromDateTime(dateTime.Value);\r\n        }\r\n\r\n        public static TimeSpan? ToTimeSpan(this TimeOnly? time)\r\n        {\r\n            return time == null ? null : time.Value.ToTimeSpan();\r\n        }\r\n\r\n        public static TimeOnly? ToTimeOnly(this TimeSpan? time)\r\n        {\r\n            return time == null ? null : TimeOnly.FromTimeSpan(time.Value);\r\n        }\r\n```\r\n\r\n```C#\r\ndb.Invoces.Select(inv = new { DateTime = (DateOnly?)inv.InvoiceDate })  //With automatically lifted operator\r\ndb.Invoces.Select(inv = new { DateTime = inv.InvoiceDate.ToDateTime() }) //With custom extension methods for nullables\r\ndb.Invoces.Select(inv = new { DateTime = inv.InvoiceDate == null ? null : inv.InvoiceDate.ToDateTime() }) //With custom extension methods\r\ndb.Invoces.Select(inv = new { DateTime = inv.InvoiceDate == null ? null : inv.InvoiceDate.ToDateTime(TimeOnly.MinValue) }) //Current API\r\n\r\ndb.Invoces.Select(inv = new { Date = (Date?)inv.InvoiceDateTime }) //With automatically lifted operator\r\ndb.Invoces.Select(inv = new { Date = inv.InvoiceDateTime.ToDateOnly() }) //With custom extension methods for nullables\r\ndb.Invoces.Select(inv = new { Date = inv.InvoiceDateTime == null ? null : inv.InvoiceDateTime.ToDateOnly() }) //With custom extension methods\r\ndb.Invoces.Select(inv = new { Date = inv.InvoiceDateTime == null ? null : DateOnly.FromDateTime(inv.InvoiceDateTime) }) //Current API\r\n```\r\n\r\nThis is a total of 8 extension methods required that, together with the current API, has to be implemented in the LINQ provider to convert to and from the new types. Something that SqlServer or Postgrees do without getting on the way (database interoperability was mentioned in the initial presentation of the feature).\r\n\r\nWhat was the argument for removing the implicit/explicit operators @terrajobst?\r\n\r\nFinally, if this operators are reconsidered, I would also restore `public static DateTime operator +(DateOnly d, TimeOfDay t)` for similar arguments: Discoverability, working with nulls, consistency with `DateTimeOffset` and similarity to SQL. \r\n\r\n### API Proposal\r\n\r\nRestore:\r\n\r\n```C#\r\n  public static explicit operator DateOnly(DateTime dateTime) { throw null; } \r\n  public static implicit operator DateTime(DateOnly date) { throw null; }\r\n  public static DateTime operator +(DateOnly d, TimeOfDay t) { throw null; }\r\n  \r\n  public static explicit operator TimeOfDay(TimeSpan timeSpan) { throw null; }\r\n  public static explicit operator TimeOfDay(DateTime dateTime) { throw null; } \r\n```\r\n\r\n### API Usage\r\n\r\n\r\n```C#\r\ndb.Invoces.Select(inv = new { DateTime = (DateOnly?)inv.InvoiceDate })  //With automatically lifted operator\r\ndb.Invoces.Select(inv = new { Date = (Date?)inv.InvoiceDateTime }) //With automatically lifted operator\r\n```\r\n\r\n### Risks\r\n\r\nI don\u0027t see any additional risk if explicit operators are used \"if the conversion is potentially lossy\".\r\nhttps://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/operator-overloads#conversion-operators \r\n\r\nThe conversion from `DateOnly` to `DateTime` assumes that:\r\n* Time will be `00:00:00`: completely reasonable, just like 5 (int) converts to 5.0 (double). \r\n* Kind will be `DateTimeKind.Unspecified`: already assumed by the simplest overload of `ToDateTime`.\r\n\r\nAll the other conversions should be uncontroversial. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgT0vaA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42eHup",
                                           "createdAt":  "2021-09-06T21:56:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-09-06T21:56:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQT54",
                                           "createdAt":  "2022-08-26T22:28:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@tarekgh, could you provide some additional input here. I think some of this has already shipped so we can\u0027t change it.",
                                           "updatedAt":  "2022-08-26T22:28:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQdOk",
                                           "createdAt":  "2022-08-27T00:04:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@tannergooding I think the ask here is to add operators to the DateOnly and TimeOnly. These were in the original proposal of the APIs, and it was decided to remove them. Unfortunately, the review on March 18, 2021, somehow not recorded which captures the details of the discussion.  \r\n\r\n@bartonjs do you recall the reasons deciding to remove the operators on these types? I recall you were the one asking for that :-)",
                                           "updatedAt":  "2022-08-27T00:08:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQePi",
                                           "createdAt":  "2022-08-27T00:12:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "The general reasoning would be\r\n\r\n* Operators (especially conversions) should have named equivalents, because operators are not discoverable.\r\n* You have a named version, do you really need an operator?\r\n* Implicit operators are good at creating ambiguity in overload resolution... are you confident that adding them won\u0027t cause problems?",
                                           "updatedAt":  "2022-08-27T00:12:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JSXwN",
                                           "createdAt":  "2022-08-28T21:02:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "olmobrutall",
                                           "body":  "\u003e The general reasoning would be\r\n\u003e \r\n\u003e * Operators (especially conversions) should have named equivalents, because operators are not discoverable.\r\n\r\nYes, I don\u0027t suggest to remove them. \r\n\r\n\u003e * You have a named version, do you really need an operator?\r\n\r\nI think the world needs it more than the effort it is to build it. The alternative is up to 8 extension methods on each application. \r\n\r\n\u003e * Implicit operators are good at creating ambiguity in overload resolution... are you confident that adding them won\u0027t cause problems?\r\n\r\nEmpirically, previously to [this commit](https://github.com/signumsoftware/framework/commit/e2f4db6b453b89a8208303b61e11704c689263e7) I know about 10 applications that were working OK with the operators defined in [Date.cs](https://github.com/signumsoftware/framework/commit/e2f4db6b453b89a8208303b61e11704c689263e7#diff-9060644f9440dbf0f0e4af9a5cb399d39b1b5d8c49fc430763136ff9f3bc027b). \r\n\r\nCurrently `DateTime` has no conversion operations and there is no way to add them (extension operators), so I can not foresee any overloading problem. What I am missing?  \r\n\r\n",
                                           "updatedAt":  "2022-08-28T21:02:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JXgqr",
                                           "createdAt":  "2022-08-29T21:50:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "\u003e Currently DateTime has no conversion operations and there is no way to add them (extension operators), so I can not foresee any overloading problem. What I am missing?\r\n\r\nI don\u0027t see a particular problem right now, but let\u0027s just imagine that there\u0027s a method group somewhere which overloads both `DateTime` and `DateTimeOffset`, and that `DateOnly` gained implicit conversion operators to both of those:\r\n\r\n```C#\r\npublic partial class SomeType\r\n{\r\n    public void SomeMethod(DateTime start, ...);\r\n    public void SomeMethod(DateTimeOffset start, ...);\r\n}\r\n```\r\n\r\ncalling that method group and passing a `DateOnly` would have two candidates of equal weight (both require an implicit conversion via a user-defined (not base class, interface, or special math relationship) conversion operator).  So if there already was at least one implicit conversion from a DateOnly to something else then adding another is risky (I don\u0027t think that applies here, but I was just giving general \"questions we ask in API review that makes people conclude to not have conversion operators\").\r\n\r\nThere\u0027s one more question/reason that does apply here, to me, that I didn\u0027t say before, and that\u0027s \"does it do what someone would expect?\".  `DateOnly` represents a date.  If it becomes a `DateTime` then it gains an arbitrary midnight... one of three possible midnights (`Local`, `UTC`, `Unknown`).  At any given callsite where you passed what looks like a \"pure date\", but it\u0027s getting converted to a `DateTime`, are you going to get the output you desire?  The date portion could flow forwards or backwards a day depending on your local vs UTC offset, and what `DateTimeKind` the operator picks.\r\n\r\nI believe this last question/reason is actually why the operators got removed: we got rid of anything that assumed midnight (the conversion methods require you to specify a `TimeOnly` and an optional `DateTimeKind`).  While \"assume midnight\" might work for particular libraries/applications, it\u0027s not something that necessarily generalizes well to the ecosystem.",
                                           "updatedAt":  "2022-08-29T21:50:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JXy7r",
                                           "createdAt":  "2022-08-29T23:34:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e While \"assume midnight\" might work for particular libraries/applications, it\u0027s not something that necessarily generalizes well to the ecosystem.\r\n\r\nAlso - Not all days have midnight.  There are multiple timezones where DST skips midnight, and going to some other time (usually 01:00).\r\n\r\n(Strictly speaking this is only a problem because of the existence of `DateTimeKind`.  If that was removed the transformation to `DateTime` would be safe, but the resolution into a particular timezone might not be, and would require adjustment)",
                                           "updatedAt":  "2022-08-29T23:34:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JYdKa",
                                           "createdAt":  "2022-08-30T05:09:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "olmobrutall",
                                           "body":  "* The operator `DateTime` -\u003e `DateOnly`: it is explicit because of lossy precision. This means there is no overloads ambiguity and also no midnight problem. Right?\r\n* The operator `DateOnly` -\u003e `DateTime`: could we make it explicit at least? It will also avoid the overload resolution problem and will make the midnight assumption more aware. \r\n\r\nAbout the problem of not every day having midnight, this is a problem that the named method is already solving when calling it with `date.Value.ToDateTime(new TimeOnly());`, and a problem that SQL Server or other DBMS are already solving. ",
                                           "updatedAt":  "2022-08-30T13:31:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JbFtr",
                                           "createdAt":  "2022-08-30T15:38:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e About the problem of not every day having midnight, this is a problem that the named method is already solving when calling it with `date.Value.ToDateTime(new TimeOnly());`, and a problem that SQL Server or other DBMS are already solving.\r\n\r\nThis is false, in these ways:\r\n -  `date.Value.ToDateTime(new TimeOnly());` leaves `DateTime.Kind` as `Unspecified`, so it has no idea whether there\u0027s even a timezone involved, or if so, which one.\r\n -  `date.Value.ToDateTime(new TimeOnly(), DateTimeKind.Local);` just uses raw ticks, which doesn\u0027t validate that the resulting time is valid for the local time at all.\r\n\r\n`DateTime` performs no validation as to whether the inputs you give constitute a valid time in the local timezone, nor whether any date/time math should adjust for DST (`DateTimeOffset` doesn\u0027t either, but doesn\u0027t need to because it\u0027s only offset-based, there\u0027s no implicit timezone involved).  You **will** get an invalid time with these methods.  Alas, .NET F/Core doesn\u0027t have a built-in way to perform the necessary resolve to a valid time for you, you\u0027d have to do it yourself.  The only time `DateTime` references timezone information is during `DateTime.Now` (or conversion to/from UTC); after that you\u0027re on your own.\r\n\r\n - Handling of timezones in SQL Server or any other DBMS is usually poor, especially if you want to deal with actual timezones and/or future dates, not just offsets.  It also requires you be using one, and that apparently you want to route all date/time values through the DB, which is not great for performance.  Too, this assumes that the timezone definitions are the same on both the DB and the application server, which isn\u0027t guaranteed (preferably rely on just one, usually the application server).  Using a DB is not a magic bullet here, and may not help - in server applications your timezone had better be UTC for safety reasons, which means you can\u0027t rely on any `Local` shenanigans anyways.\r\n\r\nIf you\u0027re doing any serious date/time work, especially involving future dates and multi-timezone scheduling, you\u0027re going to have a **much** easier time using NodaTime.\r\n",
                                           "updatedAt":  "2022-08-30T15:38:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LBR_F",
                                           "createdAt":  "2022-09-26T21:01:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD48Yrw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yv989c",
                                                                               "createdAt":  "2022-11-16T21:31:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnpritchard",
                                                                               "createdAt":  "2023-03-14T21:05:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "olmobrutall",
                                                                               "createdAt":  "2023-04-17T10:47:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shuruev",
                                                                               "createdAt":  "2023-05-24T20:08:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StijnOttenVMT",
                                                                               "createdAt":  "2023-07-18T11:41:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IanKemp",
                                                                               "createdAt":  "2024-10-31T18:31:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "MisinformedDNA",
                                           "body":  "\u003e The general reasoning would be\r\n\u003e \r\n\u003e * Operators (especially conversions) should have named equivalents, because operators are not discoverable.\r\n\r\nI disagree on discoverability. I think there are plenty of devs who would try an implicit or explicit conversion before looking for a named conversion.\r\n\r\n\u003e * You have a named version, do you really need an operator?\r\n\r\nYes, that\u0027s why explicit operators exist. The explicit operator would handle `null` conversions whereas the named conversion does not. I\u0027d also agree with OP that an explicit operator would be more discoverable than `DateOnly.FromDateTime()`\r\n\r\n\u003e * Implicit operators are good at creating ambiguity in overload resolution... are you confident that adding them won\u0027t cause problems?\r\n\r\nI don\u0027t think implicit operators should be added, just explicit ones.\r\n\r\nAt the very least, I think these two named conversions should also have explicit operators:\r\n\r\n1. `DateOnly.FromDateTime()` - Explicit cast from `DateTime` to `DateOnly`\r\n1. `TimeOnly.FromDateTime()` - Explicit cast from `DateTime` to `TimeOnly`",
                                           "updatedAt":  "2022-09-26T21:01:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hwX_l",
                                           "createdAt":  "2023-07-18T11:52:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD48YvA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "olmobrutall",
                                                                               "createdAt":  "2023-07-18T13:17:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IanKemp",
                                                                               "createdAt":  "2024-10-31T18:31:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "StijnOttenVMT",
                                           "body":  "As this hasn\u0027t been closed and there hasn\u0027t been activity for almost a year.\r\nWhat is the reason these few lines of code ended up not being implemented?\r\n\r\nIs it the explicit implicit debate? \r\n\r\nWhy not implement explicit now and later debate on changing it to implicit?\r\nSince changing from explicit to implicit isn\u0027t a breaking change while the other way around is.\r\n\r\nI get needing to be sure before making changes to dotnet but come on `DateOnly` and `TimeOnly` have really been treated as second class since they were introduced.",
                                           "updatedAt":  "2023-07-18T11:53:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hxCxH",
                                           "createdAt":  "2023-07-18T13:38:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e What is the reason these few lines of code ended up not being implemented?\r\n\r\nIt being a few lines of code does not necessarily mean it is simple to do.\r\n\r\n\u003e Why not implement explicit now and later debate on changing it to implicit?\r\nSince changing from explicit to implicit isn\u0027t a breaking change while the other way around is.\r\n\r\nIt is a binary breaking change to change explicit conversions to implicit conversions. It is only non binary-breaking if you expose implicit in addition to any existing explicit. \r\n\r\nHowever, it is often source breaking to expose new implicit conversions regardless, because it can introduce new ambiguities as part of overload resolution. For example, if you have a type `C` with implicit conversions to both `A` and `B` and a method group that takes `A` and `B`, but not `C`; then you will get an error since `C` could be implicitly converted to either `A` or `B` and there is then no \"best match\".\r\n\r\n\u003e I get needing to be sure before making changes to dotnet but come on DateOnly and TimeOnly have really been treated as second class since they were introduced.\r\n\r\nThey are new types. It is only natural for there to be some growing pains as the ecosystem moves to adopt them and discover the best patterns and approaches to support them.\r\n\r\nThis can be particularly painful when you have a net new type compared to a type that\u0027s existed for the full 20 year lifetime of the ecosystem, and thus have a large amount of existing code to consider compatibility and interoperability around.\r\n\r\n------------------------------\r\n\r\nBefore anything can move forward, the API proposal should be updated to be \"proper\" and declare the exact types the APIs will be on. The pattern we\u0027ve established for which type exposes conversions is that `T` exposes conversions from itself to another type (e.g. `Int128` exposes `explicit operator UInt128(Int128 value)`; while `UInt128` exposes `explicit operator Int128(UInt128 value);`).\r\n\r\nThe API proposal is currently:\r\n```csharp\r\n  public static explicit operator DateOnly(DateTime dateTime) { throw null; } \r\n  public static implicit operator DateTime(DateOnly date) { throw null; }\r\n  public static DateTime operator +(DateOnly d, TimeOfDay t) { throw null; }\r\n  \r\n  public static explicit operator TimeOfDay(TimeSpan timeSpan) { throw null; }\r\n  public static explicit operator TimeOfDay(DateTime dateTime) { throw null; } \r\n```\r\n\r\nThe proposal should be something more like the following:\r\n```csharp\r\nnamespace System;\r\n\r\npublic partial struct DateOnly\r\n{\r\n    // Lossless conversion, can be implicit\r\n    public static implicit operator DateTime(DateOnly date);\r\n\r\n    public static DateTime operator +(DateOnly d, TimeOnly t);\r\n}\r\n\r\npublic partial struct DateTime\r\n{\r\n    // Lossy conversion (loses the time part), must be explicit\r\n    public static explicit operator DateOnly(DateTime dateTime);\r\n\r\n    // Lossy conversion (loses the date part), must be explicit    \r\n    public static explicit operator TimeOnly(DateTime dateTime);\r\n}\r\n\r\npublic partial struct TimeSpan\r\n{\r\n    // Domain conversion, must be explicit\r\n    public static explicit operator TimeOnly(TimeSpan timeSpan);\r\n}\r\n```\r\n\r\nThe implicit conversion for `DateOnly-\u003eDateTime` might warrant some minimal discussion just because new implicit conversions can be tricky. There should be no ambiguities introduced, however, given its the only implicit operator on either type.\r\n\r\nThe explicit conversion for `TimeSpan-\u003eTimeOnly` might warrant discussion as well. This isn\u0027t necessarily a \"lossy conversion\" but rather more like a \"domain conversion\" where the concepts do not necessarily line up, but can abstractly be thought to carry similar information. That is, it is very similar conceptually to a `Point` vs `Vector`; where the `Point` (which would be akin to `TimeOnly`) represents an exact position; where-as a `Vector` (which would be akin to `TimeSpan`) represents a directional offset from a given point. Thus, a point is functionally a vector from `0, 0, 0`; much like a `TimeOnly` is functionally a `TimeSpan` from `00:00.00000`. However, these aren\u0027t necessarily something you would want to expose as conversions and only using named APIs may make more sense.\r\n\r\nThe addition operator `DateTime = DateOnly + TimeOnly` is also something that\u0027s \"interesting\" and potentially worth discussion. Not only are other operators potentially missing, but it breaks from the normal `T in, T out` pattern. This pattern is broken in a few places for the various Date/Time types, so it might be acceptable. But it\u0027ll be a discussion point regardless. Notably potentially missing are:\r\n```csharp\r\npublic partial struct TimeOnly\r\n{\r\n    // Should time/date addition be commutative\r\n    public static DateTime operator +(TimeOnly t, DateOnly d);\r\n\r\n    // TO - TO = TS, so logically TO + TS should produce a TO\r\n    public static TimeOnly operator +(TimeOnly t, TimeSpan s);\r\n}\r\n```\r\n\r\nOne could also argue that there should be an explicit conversion from `TimeOnly-\u003eDateTime` or from `TimeSpan-\u003eTimeOnly` to ensure parity between the conversions. One directional conversions often do not make sense and may represent a gap in functionality.",
                                           "updatedAt":  "2023-07-18T13:39:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h0Gab",
                                           "createdAt":  "2023-07-18T21:59:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MisinformedDNA",
                                           "body":  "I don\u0027t see the point of `DateTime = DateOnly + TimeOnly`, `new DateTime(DateOnly, TimeOnly)` makes more sense to me. Also, what is the use case for conversions between `TimeSpan` and `TimeOnly`?",
                                           "updatedAt":  "2023-07-18T21:59:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h0KAc",
                                           "createdAt":  "2023-07-18T22:15:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StijnOttenVMT",
                                           "body":  "\u003e Also, what is the use case for conversions between `TimeSpan` and `TimeOnly`?\n\nPersonally I can see some use there because `TimeOnly` doesn\u0027t implement `AddTicks()` but that\u0027s more a problem with the constant refusal of the dotnet Devs to add any quality of life improvements to `TimeOnly` and `DateOnly`.\n\n(On that topic why does it take years to integrate it into EF Core and ASP.NET)\n\nAside from that point `TimeOnly` and `TimeSpan` do both keep track of time but since they represent inherently different things they\u0027re indeed very much like the given example of `Point` and `Vector` but even worse since `TimeSpan` can contain more information than `TimeOnly` can",
                                           "updatedAt":  "2023-07-18T22:15:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h0MmG",
                                           "createdAt":  "2023-07-18T22:28:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e but that\u0027s more a problem with the constant refusal of the dotnet Devs to add any quality of life improvements to TimeOnly and DateOnly.\r\n\r\nThere\u0027s no refusal to add APIs. There\u0027s two API suggestions that I can see (this one and https://github.com/dotnet/runtime/issues/62413) and both have had some engagement with feedback from the area owner leaving some open questions and feedback. There was then little to no follow up engagement from the original proposer/community.\r\n\r\n\u003e I don\u0027t see the point of DateTime = DateOnly + TimeOnly, new DateTime(DateOnly, TimeOnly) makes more sense to me.\r\n\r\nDifferent things make sense to different people. Some people prefer named methods and other casting operators, for example ;). That\u0027s why I explicitly called out the ones I did as potentially needing more discussion, if not here then in API review.\r\n\r\nUltimately, this moving forward is dependent on the @dotnet/area-system-datetime owners marking it `ready-for-review` when they believe its in the correct shape with the necessary questions answered. But helping drive the design can largely be done by anyone with enough interest, provided there is consistent engagement from both sides.",
                                           "updatedAt":  "2023-07-18T22:28:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h4Vh0",
                                           "createdAt":  "2023-07-19T14:07:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MisinformedDNA",
                                           "body":  "\u003e very much like the given example of `Point` and `Vector`\r\n\r\nBut there is no explicit or implicit cast operator for `Point` and `Vector`, is there?",
                                           "updatedAt":  "2023-07-19T14:07:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h4bxv",
                                           "createdAt":  "2023-07-19T14:22:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBLxmg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StijnOttenVMT",
                                                                               "createdAt":  "2023-07-19T16:05:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MisinformedDNA",
                                           "body":  "`public static TimeOnly operator +(TimeOnly t, TimeSpan s);` would have to define overflow scenarios.",
                                           "updatedAt":  "2023-07-19T14:22:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pnPFH",
                                           "createdAt":  "2023-10-20T00:39:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMcFvQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StijnOttenVMT",
                                                                               "createdAt":  "2023-11-13T09:26:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Corey-M",
                                           "body":  "\u003e I don\u0027t see the point of `DateTime = DateOnly + TimeOnly`, `new DateTime(DateOnly, TimeOnly)` makes more sense to me.\r\n\r\nI don\u0027t see the point of having `TimeSpan.Add(TimeSpan)`, `TimeSpan operator +(TimeSpan, TimeSpan)` makes more sense to me.\r\n\r\nWe all have different ways that we approach problems. No one way is the *right* way.\r\n\r\n\u003e Also, what is the use case for conversions between `TimeSpan` and `TimeOnly`?\r\n\r\n`TimeSpan` has been used to represent time of day since the very first draft of C#, and we\u0027ve spent the last 20+ years treating it as such. Mountains of legacy code exist in which `TimeSpan` is used that way, and currently we have to do all sorts of things to convert to/from `TimeOnly` to use it with that legacy code.\r\n\r\nAnd then there\u0027s the fact that `TimeOnly` current has extremely limited functionality. It has internal resolution in the ticks range (100ns) but unlike `TimeSpan` there are no granular `Add` methods - apparently we never need to add seconds or milliseconds to a `TimeOnly`, but we can add fractional hours or minutes. `TimeSpan` has a much richer interface.\r\n\r\nGoing forward we\u0027re going to see a lot more instances of `TimeOnly` in APIs, and I\u0027m really not looking forward to all the hoops you apparently want me to jump through in order to marry those APIs to legacy APIs that don\u0027t support `TimeOnly`.\r\n\r\n\u003e `public static TimeOnly operator +(TimeOnly t, TimeSpan s);` would have to define overflow scenarios.\r\n\r\nIn all cases where arithmetic operations exist as named methods (`Add` in this case) the corresponding `operator` should act exactly the same as the method. Since we already have a `TimeOnly.Add(TimeSpan)` method, there is no further discussion needed: `TimeOnly.Add(TimeSpan)` handles overflow by truncation, so `operator +(TimeOnly, TimeSpan)` should do the same.\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2023-10-20T00:39:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rwmWc",
                                           "createdAt":  "2023-11-13T10:37:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD48ZBg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "IanKemp",
                                                                               "createdAt":  "2024-10-31T18:32:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "StijnOttenVMT",
                                           "body":  "\u003e`TimeSpan` has been used to represent time of day since the very first draft of C#, and we\u0027ve spent the last 20+ years treating it as such. Mountains of legacy code exist in which `TimeSpan` is used that way, and currently we have to do all sorts of things to convert to/from `TimeOnly` to use it with that legacy code.\r\n\r\nYeah it is kinda absurd that for 20 years `TimeSpan` has been seen as the default way to represent the time of day and now that we have an actual time of day struct `TimeOnly` there are no explicit and implicit conversions between them to easily support legacy APIs. And honestly there are still enough modern APIs  and libraries, some of which even being offical microsoft libraries, that haven\u0027t updated to `TimeOnly` and `DateOnly`\r\n\r\n\r\n\r\n\u003e `TimeOnly.Add(TimeSpan)` handles overflow by truncation, so `operator +(TimeOnly, TimeSpan)`\r\n\r\nWould it make sense to then also implement an `operator checked +(TimeOnly, TimeSpan)` that throws an `OverflowException`?\r\nAnd if so would it then make sense to instead return a child of `OverflowException` that contains an `int overFlowAmount`?\r\n",
                                           "updatedAt":  "2023-11-13T10:37:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BPS9o",
                                           "createdAt":  "2024-06-14T15:26:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODmAqMw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Corey-M",
                                                                               "createdAt":  "2024-06-18T02:21:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mkorsukov",
                                           "body":  "`DateOnly` type is so useful in daily use cases, so I think about an addition to `DateTime` and `DateTimeOffset` types in the form of `ToDateOnly()` instance method.\r\n\r\nHere is code snippets:\r\n\r\n[DateTime.cs](/runtime/src/libraries/System.Private.CoreLib/src/System/DateTime.cs)\r\n\r\n```cs\r\npublic DateOnly ToDateOnly() =\u003e\r\n    DateOnly.FromDateTime(this);\r\n```\r\n\r\n[DateTimeOffset.cs](/runtime/src/libraries/System.Private.CoreLib/src/System/DateTimeOffset.cs)\r\n\r\n```cs\r\npublic DateOnly ToDateOnly() =\u003e\r\n    DateOnly.FromDateTime(_dateTime);\r\n```\r\n\r\nCan\u0027t create a PR, so unit tests included.\r\n\r\n[DateTimeTests.cs](/runtime/src/libraries/System.Runtime/tests/System.Runtime.Tests/System/DateTimeTests.cs)\r\n\r\n```cs\r\n[Fact]\r\npublic static void ToDateOnly()\r\n{\r\n    DateTime dateTime = new DateTime(2024, 06, 13, 11, 55, 45, 0, DateTimeKind.Utc);\r\n    Assert.Equal(new DateOnly(2024, 06, 13), dateTime.ToDateOnly());\r\n}\r\n```\r\n\r\n[DateTimeOffsetTests.cs](/runtime/src/libraries/System.Runtime/tests/System.Runtime.Tests/System/DateTimeOffsetTests.cs)\r\n\r\n```cs\r\n[Fact]\r\npublic static void ToDateOnly()\r\n{\r\n    DateTimeOffset dateTimeOffset = new DateTimeOffset(new DateTime(2024, 06, 13, 11, 55, 45, 0, DateTimeKind.Utc));\r\n    Assert.Equal(new DateOnly(2024, 06, 13), dateTimeOffset.ToDateOnly());\r\n}\r\n```",
                                           "updatedAt":  "2024-06-14T15:26:33Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "Reconsider conversion operators `DateOnly` \u003c--\u003e `DateTime`",
        "labels":  [
                       "api-suggestion",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61109",
        "createdAt":  "2021-11-02T17:57:50Z",
        "number":  61109,
        "author":  "DougSchmidt-AI",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T01:51:14Z",
        "body":  "### Description\n\nThe `ParseExact` functionality of DateTime/DateTimeOffset fails to parse times with a leading single character `H` or `h` (1-or-2-digit 24-hour or 12-hour) followed by 2-digit minute (and/or 2-digit seconds).\r\n\r\n\"1245\" is parsed as 12:45 PM, but \"945\" thows `FormatException(\"String was not recognized as a valid DateTime\")`\r\n\r\nSo \"Hmm\" can only parse times from 10AM until midnight.\r\n\r\nLooking at the [`DateTimeParse.DoStrictParse` source code](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Globalization/DateTimeParse.cs#L4461) and [`ParseByFormat` source code](https://github.com/dotnet/runtime/blob/a3f31e9218e94b5d2474f6fbb9eeeca43d314a76/src/libraries/System.Private.CoreLib/src/System/Globalization/DateTimeParse.cs#L4016-L4040), this likely isn\u0027t a simple change, as the parsing logic tries to evaluate the pattern from left to right.\r\n\r\nBut we have many customers trying to ingest timestamp data in this format, supplying custom timestamp patterns following the .NET documentation, and expecting \u0027Hmm\" to work. It\u0027s a common use case (trying to parse a time-only column using a custom format string) and there is no workaround without changing the source text or the pattern. Often those changes cannot be made, so parsing fails.\r\n\n\n### Reproduction Steps\n\n```C#\r\nnew List\u003c(string text, string pattern)\u003e\r\n{\r\n    (\"945\", \"Hmm\"),\r\n    (\"1015\", \"Hmm\"),\r\n    (\"94512\", \"hmmss\"),\r\n    (\"123023\", \"hmmss\")\r\n}\r\n.ForEach(t =\u003e WriteLine(\r\n    DateTime.TryParseExact(t.text, t.pattern, null, DateTimeStyles.None, out var dateTime)\r\n    ? $\"\u0027{t.text}\u0027 matches \u0027{t.pattern}\u0027 =\u003e {dateTime.TimeOfDay}\"\r\n    : $\"\u0027{t.text}\u0027 does not match \u0027{t.pattern}\u0027\"));\r\n```\r\nProduces:\r\n```\r\n\u0027945\u0027 does not match \u0027Hmm\u0027\r\n\u00271015\u0027 matches \u0027Hmm\u0027 =\u003e 10:15:00\r\n\u002794512\u0027 does not match \u0027hmmss\u0027\r\n\u0027123023\u0027 matches \u0027hmmss\u0027 =\u003e 00:30:23\r\n```\n\n### Expected behavior\n\nHumans (not just us coders) expect \u0027945\u0027 to match the \u0027Hmm\u0027 or \u0027hmm\u0027 pattern.\n\n### Actual behavior\n\nDateTime.ParseExact(\"945\", \"hmm\", null) throws a FormatException.\n\n### Regression?\n\nSeems to behave this way in .NET Framework 4.7 and 4.8, and .NET 5.0 (Windows and WASM). Not tested on other platforms.\n\n### Known Workarounds\n\nNo known workaround without changing both the text data and the format pattern.\r\n\r\nAs more of our customers are hitting this bug, we are trying to detect this specific scenario by writing a wrapper method around our calls to DateTime.ParseExact parsing logic something like this:\r\n```C#\r\nbool MoreRobustTryParse(string text, string pattern, IFormatProvider provider, DateTimeStyles styles, out DateTime dateTime)\r\n{\r\n    if( !DoesPatternContainSingleDigitHoursWithNoPunctuation(pattern) )\r\n        return DateTime.TryParse(text, pattern, provider, styles, out dateTime);\r\n\r\n    // Try to handle \u0027Hmm\u0027 on our own somehow ...\r\n}\r\n```\r\n\r\nBut that is obviously quite fiddly, and often we can\u0027t quickly patch all of our .NET code to use this custom implementation.\n\n### Configuration\n\n.NET Framework 4.7.2, and 4.8\r\n.NET 5 (Windows and WASM)\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOORwbWw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc45GdHh",
                                           "createdAt":  "2021-11-02T17:57:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-11-02T17:57:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45HBtb",
                                           "createdAt":  "2021-11-02T20:30:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe `ParseExact` functionality of DateTime/DateTimeOffset fails to parse times with a leading single character `H` or `h` (1-or-2-digit 24-hour or 12-hour) followed by 2-digit minute (and/or 2-digit seconds).\r\n\r\n\"1245\" is parsed as 12:45 PM, but \"945\" thows `FormatException(\"String was not recognized as a valid DateTime\")`\r\n\r\nSo \"Hmm\" can only parse times from 10AM until midnight.\r\n\r\nLooking at the [`DateTimeParse.DoStrictParse` source code](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Private.CoreLib/src/System/Globalization/DateTimeParse.cs#L4461) and [`ParseByFormat` source code](https://github.com/dotnet/runtime/blob/a3f31e9218e94b5d2474f6fbb9eeeca43d314a76/src/libraries/System.Private.CoreLib/src/System/Globalization/DateTimeParse.cs#L4016-L4040), this likely isn\u0027t a simple change, as the parsing logic tries to evaluate the pattern from left to right.\r\n\r\nBut we have many customers trying to ingest timestamp data in this format, supplying custom timestamp patterns following the .NET documentation, and expecting \u0027Hmm\" to work. It\u0027s a common use case (trying to parse a time-only column using a custom format string) and there is no workaround without changing the source text or the pattern. Often those changes cannot be made, so parsing fails.\r\n\n\n### Reproduction Steps\n\n```C#\r\nnew List\u003c(string text, string pattern)\u003e\r\n{\r\n    (\"945\", \"Hmm\"),\r\n    (\"1015\", \"Hmm\"),\r\n    (\"94512\", \"hmmss\"),\r\n    (\"123023\", \"hmmss\")\r\n}\r\n.ForEach(t =\u003e WriteLine(\r\n    DateTime.TryParseExact(t.text, t.pattern, null, DateTimeStyles.None, out var dateTime)\r\n    ? $\"\u0027{t.text}\u0027 matches \u0027{t.pattern}\u0027 =\u003e {dateTime.TimeOfDay}\"\r\n    : $\"\u0027{t.text}\u0027 does not match \u0027{t.pattern}\u0027\"));\r\n```\r\nProduces:\r\n```\r\n\u0027945\u0027 does not match \u0027Hmm\u0027\r\n\u00271015\u0027 matches \u0027Hmm\u0027 =\u003e 10:15:00\r\n\u002794512\u0027 does not match \u0027hmmss\u0027\r\n\u0027123023\u0027 matches \u0027hmmss\u0027 =\u003e 00:30:23\r\n```\n\n### Expected behavior\n\nHumans (not just us coders) expect \u0027945\u0027 to match the \u0027Hmm\u0027 or \u0027hmm\u0027 pattern.\n\n### Actual behavior\n\nDateTime.ParseExact(\"945\", \"hmm\", null) throws a FormatException.\n\n### Regression?\n\nSeems to behave this way in .NET Framework 4.7 and 4.8, and .NET 5.0 (Windows and WASM). Not tested on other platforms.\n\n### Known Workarounds\n\nNo known workaround without changing both the text data and the format pattern.\r\n\r\nAs more of our customers are hitting this bug, we are trying to detect this specific scenario by writing a wrapper method around our calls to DateTime.ParseExact parsing logic something like this:\r\n```C#\r\nbool MoreRobustTryParse(string text, string pattern, IFormatProvider provider, DateTimeStyles styles, out DateTime dateTime)\r\n{\r\n    if( !DoesPatternContainSingleDigitHoursWithNoPunctuation(pattern) )\r\n        return DateTime.TryParse(text, pattern, provider, styles, out dateTime);\r\n\r\n    // Try to handle \u0027Hmm\u0027 on our own somehow ...\r\n}\r\n```\r\n\r\nBut that is obviously quite fiddly, and often we can\u0027t quickly patch all of our .NET code to use this custom implementation.\n\n### Configuration\n\n.NET Framework 4.7.2, and 4.8\r\n.NET 5 (Windows and WASM)\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDougSchmidt-AI\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-02T20:30:19Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "DateTime.TryParseExact returns false for \"945\" with pattern \"Hmm\"",
        "labels":  [
                       "needs-further-triage",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62413",
        "createdAt":  "2021-12-05T03:01:22Z",
        "number":  62413,
        "author":  "medo64",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxQsKw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2021-12-28T06:14:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StijnOttenVMT",
                                            "createdAt":  "2023-07-12T11:48:38Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-01-28T05:10:57Z",
        "body":  "### Background and motivation\r\n\r\nAs one goes around converting code using existing DateTime to TimeOnly, missing methods cause a bit of friction. Most notably, DateTime has `AddMilliseconds` and `AddTicks` methods that adjust the time while TimeOnly does not. \r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace System\r\n{\r\n    public class TimeOnly\r\n    {\r\n        public TimeOnly AddSeconds(double seconds);\r\n        public TimeOnly AddMilliseconds(double milliseconds);\r\n        public TimeOnly AddTicks(long ticks);\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```C#\r\nvar time = new TimeOnly(13, 45, 12);\r\nvar x = time.AddMilliseconds(123);\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nI don\u0027t believe there are any risks involved as these methods are already used in both DateTime and DateTimeOffset where they call other (already existing) methods to do actual work.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcg0AFw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc46x5D5",
                                           "createdAt":  "2021-12-05T03:01:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-12-05T03:01:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46x6vI",
                                           "createdAt":  "2021-12-05T04:21:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nAs one goes around converting code using existing DateTime to TimeOnly, missing methods cause a bit of friction. Most notably, DateTime has `AddMilliseconds` and `AddTicks` methods that adjust the time while TimeOnly does not. \n\n### API Proposal\n\n```C#\r\nnamespace System\r\n{\r\n    public class TimeOnly\r\n    {\r\n        public TimeOnly AddMilliseconds(double milliseconds);\r\n        public TimeOnly AddTicks(long ticks);\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```C#\r\nvar time = new TimeOnly(13, 45, 12);\r\ntime.AddMilliseconds(123);\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nI don\u0027t believe there are any risks involved as these methods are already used in both DateTime and DateTimeOffset where they call other (already existing) methods to do actual work.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emedo64\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-05T04:21:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46yWj_",
                                           "createdAt":  "2021-12-05T18:29:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rubenprins",
                                           "body":  "The method `AddSeconds` is missing as well. Although the `Add(TimeSpan)` method should cover all needs, it\u0027s a bit weird that there is an `AddHours` and `AddMinutes`, but not the other units.",
                                           "updatedAt":  "2021-12-05T18:29:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47HZ-B",
                                           "createdAt":  "2021-12-11T22:21:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "medo64",
                                           "body":  "\u003e The method `AddSeconds` is missing as well.\r\n\r\nI edited text to include the same in the API proposal.\r\n\r\n\r\n",
                                           "updatedAt":  "2021-12-11T22:21:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQNRZ",
                                           "createdAt":  "2022-08-26T21:49:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "CC. @tarekgh, if this is something we should provide and the shape looks good could you mark this `api-ready-for-review`? Otherwise can we close this with the relevant reasoning?",
                                           "updatedAt":  "2022-08-26T21:49:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQRv6",
                                           "createdAt":  "2022-08-26T22:11:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@medo64 what is your scenario of using TimeOnly and need to add a milliseconds and ticks? TimeOnly represents a time of day and we thought about that during designing TimeOnly and we couldn\u0027t find a real scenario that needed adding milliseconds or ticks to TimeOnly. We are not trying to copy functionality provided to DateTime to TimeOnly. I don\u0027t think we need to expose such functionality with having a real scenario for it.\r\n\r\nCC @mattjohnsonpint ",
                                           "updatedAt":  "2022-08-26T22:11:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQtG1",
                                           "createdAt":  "2022-08-27T03:56:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "medo64",
                                           "body":  "My scenario was aligning events from multiple machines. I had many measurements from different systems already using TimeOnly and I had to adjust them a millisecond here or there to sync with a reference node.\r\n\r\nAt the end I just converted TimeOnly to ticks, adjusted as needed, and then created TimeOnly from adjusted ticks.\r\n\r\nIt just seemed strange that struct accepting both milliseconds and ticks in constructors would not have the methods to adjust them, thus the issue.",
                                           "updatedAt":  "2022-08-27T03:56:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQvMO",
                                           "createdAt":  "2022-08-27T05:02:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCrQR6w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2022-08-27T21:12:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e My scenario was aligning events from multiple machines.\r\n\r\nIf you have an event it implies you should be using `DateTimeOffset` (and possibly not actually adjusting them, just using the value from the reference node outright).",
                                           "updatedAt":  "2022-08-27T05:02:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JRSdY",
                                           "createdAt":  "2022-08-27T21:17:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@Clockwork-Muse is right. Your scenario should use DateTimeOffset and not TimeOnly. Maybe you need to revisit using TimeOnly in that scenario.\r\n\r\n\u003e It just seemed strange that struct accepting both milliseconds and ticks in constructors would not have the methods to adjust them, thus the issue.\r\n\r\nNot necessarily strange. Some scenarios would use some time units from other sources to create TimeOnly. But after creating TimeOnly, I am struggling to think in real scenario need to add milliseconds or ticks to it.",
                                           "updatedAt":  "2022-08-27T21:17:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JSOWq",
                                           "createdAt":  "2022-08-28T17:29:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD95yIA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CePur",
                                                                               "createdAt":  "2024-12-06T16:23:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "What is the scenario where AddMinutes is useful but AddSeconds would not be? ",
                                           "updatedAt":  "2022-08-28T17:29:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JSPXD",
                                           "createdAt":  "2022-08-28T17:50:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "TimeOnly represents the time of day.  You can use it in normal life scenarios like the show will start after 15 minutes. Adding 15 minutes will make sense. Add seconds is not really used the same way. \r\n\r\nNote, TimeOnly also has `Add(TimeSpan)` which can support adding any other smaller units if needed. ",
                                           "updatedAt":  "2022-08-28T17:50:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yDQAX",
                                           "createdAt":  "2024-01-28T05:10:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nvmkpk",
                                           "body":  "If I were to compute sunrise and sunset times for a given date represented by `DateOnly`, my calculation does precise time including milliseconds and returns it as `TimeOnly` (since the date is already known to the caller), I need to round it up or down to nearest minute, I would use `AddSeconds` to add or subtract seconds to my computed `TimeOnly` value. Currently it is easy to work around but having `AddSeconds` would be most logical. Astronomy (and astrology) has many cases where this would be useful.",
                                           "updatedAt":  "2024-01-28T05:10:55Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "[API Proposal]: TimeOnly should contain AddMilliseconds and AddTicks methods",
        "labels":  [
                       "api-suggestion",
                       "needs-further-triage",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62527",
        "createdAt":  "2021-12-08T11:15:34Z",
        "number":  62527,
        "author":  "edvinkugelberg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T02:05:07Z",
        "body":  "### Description\n\nThe functions `TimeZoneInfo.GetSystemTimeZones()` and `TimeZoneInfo.FindSystemTimeZoneById(string id)` uses different ways of getting system time zones, but they use the same cache. You can therefore get different results depending on what order you call them in.\r\n\r\nOn macOs Big Sur 11.6 the file /usr/share/zoneinfo/zone.tab that `TimeZoneInfo.GetSystemTimeZones()` reads from is not a complete list of all system time zones on macOS. The file description says:\r\n\u003e From Paul Eggert (2021-09-20):\r\n\u003e This file is intended as a backward-compatibility aid for older programs.\r\n\u003e New programs should use zone1970.tab. [...]\r\n\r\n`TimeZoneInfo.FindSystemTimeZoneById(string id)` reads instead from the actual binary files of dir /usr/share/zoneinfo/. It can thus find other time zones than `TimeZoneInfo.GetSystemTimeZones()`.\n\n### Reproduction Steps\n\n```\r\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleApplication1\r\n{\r\n  internal class Program\r\n  {\r\n    public static void Main(string[] args)\r\n    {\r\n      // var timeZoneCetFromId = TimeZoneInfo.FindSystemTimeZoneById(\"CET\");\r\n      var timeZoneListCount = TimeZoneInfo.GetSystemTimeZones().Count();\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nRun this program with the first line of main commented and uncommented\n\n### Expected behavior\n\nThere should be no difference in `timeZoneListCount` depending on if the first line in commented or not.\n\n### Actual behavior\n\nWith the first line commented `timeZoneListCount` is 424.\r\nWith the first line uncommente it is 425.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nRecreated twice:\r\nTarget framework: 4.8\r\nLanguage version: 7.3\r\nAND\r\nTarget framework: netcoreapp3.1\r\nLanguage version: 8.0\r\n\r\nMacOS BigSur 11.6\r\nMacBook Pro (16-inch, 2019)\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOxIK4Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc467rNL",
                                           "createdAt":  "2021-12-08T11:15:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-12-08T11:15:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc468R2n",
                                           "createdAt":  "2021-12-08T14:49:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe functions `TimeZoneInfo.GetSystemTimeZones()` and `TimeZoneInfo.FindSystemTimeZoneById(string id)` uses different ways of getting system time zones, but they use the same cache. You can therefore get different results depending on what order you call them in.\r\n\r\nOn macOs Big Sur 11.6 the file /usr/share/zoneinfo/zone.tab that `TimeZoneInfo.GetSystemTimeZones()` reads from is not a complete list of all system time zones on macOS. The file description says:\r\n\u003e From Paul Eggert (2021-09-20):\r\n\u003e This file is intended as a backward-compatibility aid for older programs.\r\n\u003e New programs should use zone1970.tab. [...]\r\n\r\n`TimeZoneInfo.FindSystemTimeZoneById(string id)` reads instead from the actual binary files of dir /usr/share/zoneinfo/. It can thus find other time zones than `TimeZoneInfo.GetSystemTimeZones()`.\n\n### Reproduction Steps\n\n```\r\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleApplication1\r\n{\r\n  internal class Program\r\n  {\r\n    public static void Main(string[] args)\r\n    {\r\n      // var timeZoneCetFromId = TimeZoneInfo.FindSystemTimeZoneById(\"CET\");\r\n      var timeZoneListCount = TimeZoneInfo.GetSystemTimeZones().Count();\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nRun this program with the first line of main commented and uncommented\n\n### Expected behavior\n\nThere should be no difference in `timeZoneListCount` depending on if the first line in commented or not.\n\n### Actual behavior\n\nWith the first line commented `timeZoneListCount` is 424.\r\nWith the first line uncommente it is 425.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nRecreated twice:\r\nTarget framework: 4.8\r\nLanguage version: 7.3\r\nAND\r\nTarget framework: netcoreapp3.1\r\nLanguage version: 8.0\r\n\r\nMacOS BigSur 11.6\r\nMacBook Pro (16-inch, 2019)\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eedvinkugelberg-ff\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-08T14:49:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47AzPj",
                                           "createdAt":  "2021-12-09T17:31:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "The comment you quoted is from the IANA timezone database, macOS doesn\u0027t actually distribute `zone1970.tab` file. The problem is merely that `zone.tab` references only the canonical names while `FindSystemTimeZoneById` can also hit the non-canonical ones (aliases).\r\n\r\nThat said, I agree that `TimeZoneInfo.GetSystemTimeZones` should return consistent results and those should be the canonical ones only.",
                                           "updatedAt":  "2021-12-09T17:37:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47Ef8M",
                                           "createdAt":  "2021-12-10T14:49:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "edvinkugelberg",
                                           "body":  "Shouldn\u0027t `FindSystemTimeZoneById` and `GetSystemTimeZones` read from the exact same set of time zones? Shouldn\u0027t `GetSystemTimeZones` therefore return both canonical and non-canonical ones?",
                                           "updatedAt":  "2021-12-10T14:49:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47Egrh",
                                           "createdAt":  "2021-12-10T14:53:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "IIRC from .NET 6 `FindSystemTimeZoneById` can look up both IANA and Windows time zone names on systems with the ICU library (Windows 10+, Linux, macOS). That means it supports non-canonical names by design. I don\u0027t think I would expect `GetSystemTimeZones` to return me the same zone more than once [with different name] which would happen once you start listing the non-canonical ones.",
                                           "updatedAt":  "2021-12-10T14:53:52Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "`GetSystemTimeZones()` produces different results whether `FindSystemTimeZoneById()` has been called previous or not",
        "labels":  [
                       "needs-further-triage",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63570",
        "createdAt":  "2022-01-10T08:07:20Z",
        "number":  63570,
        "author":  "hughesjs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCapnAQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xced",
                                            "createdAt":  "2022-05-01T11:53:03Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-11-22T01:49:19Z",
        "body":  "### Description\n\nThe methods in `System.DateOnly` such as `.AddYears(int)` are pure in that they create a new instance of `DateOnly` with the modified values.\r\n\r\nHowever, they haven\u0027t been decorated with the `[Pure]` attribute which means that IDEs (and users by extension) might not be aware of this and might be expecting it to mutate the variable itself. IIRC, most IDEs will generate a warning if you don\u0027t capture the value of a `[Pure]` method call. \r\n\r\nTbh, this probably ought to be a compiler warning as well.\n\n### Reproduction Steps\n\n```cs\r\nvar x = DateOnly.MinValue;\r\n// These lines should produce a warning about not capturing the value of a pure method\r\nx.AddYears(1);\r\nx.AddDays(1);\r\nx.AddMonths(1);\r\n```    \n\n### Expected behavior\n\nAt the very least, IDEs that are aware of the `[Pure]` attribute (I believe as a minimum VS and Rider both are) should display a squiggly about not capturing the value of a pure method.\r\n\r\nIdeally, the compiler should also generate a warning.\n\n### Actual behavior\n\nNo warnings are created as the methods aren\u0027t declared as pure.\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nVersion: .NET 6.0\r\nOS: Mac OS 11.6.1\r\nArch: x64\r\nConfig Specific: No\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPCWo5w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48HlxE",
                                           "createdAt":  "2022-01-10T08:07:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-01-10T08:07:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48H2dr",
                                           "createdAt":  "2022-01-10T09:36:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Some previous requests to add `[Pure]` elsewhere were rejected. See \u003chttps://github.com/dotnet/runtime/issues/24659\u003e, \u003chttps://github.com/dotnet/runtime/issues/33414#issuecomment-597043981\u003e, \u003chttps://github.com/dotnet/runtime/issues/34098#issuecomment-604439020\u003e.\r\n",
                                           "updatedAt":  "2022-01-10T09:36:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48JNAW",
                                           "createdAt":  "2022-01-10T16:21:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThe methods in `System.DateOnly` such as `.AddYears(int)` are pure in that they create a new instance of `DateOnly` with the modified values.\r\n\r\nHowever, they haven\u0027t been decorated with the `[Pure]` attribute which means that IDEs (and users by extension) might not be aware of this and might be expecting it to mutate the variable itself. IIRC, most IDEs will generate a warning if you don\u0027t capture the value of a `[Pure]` method call. \r\n\r\nTbh, this probably ought to be a compiler warning as well.\n\n### Reproduction Steps\n\n```cs\r\nvar x = DateOnly.MinValue;\r\n// These lines should produce a warning about not capturing the value of a pure method\r\nx.AddYears(1);\r\nx.AddDays(1);\r\nx.AddMonths(1);\r\n```    \n\n### Expected behavior\n\nAt the very least, IDEs that are aware of the `[Pure]` attribute (I believe as a minimum VS and Rider both are) should display a squiggly about not capturing the value of a pure method.\r\n\r\nIdeally, the compiler should also generate a warning.\n\n### Actual behavior\n\nNo warnings are created as the methods aren\u0027t declared as pure.\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nVersion: .NET 6.0\r\nOS: Mac OS 11.6.1\r\nArch: x64\r\nConfig Specific: No\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehughesjs\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-10T16:21:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48JY4F",
                                           "createdAt":  "2022-01-10T16:42:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "IDEs and tooling that only consider the `Pure` attribute are \"outdated\" in my opinion.\r\n\r\nThe `Pure` attribute has never been actually enforced and never had \"significant\" usage throughout the BCL or other key foundations of the ecosystem.\r\n\r\nModern C#/.NET have newer concepts such as `readonly struct` and `readonly members` that do at least get language validation and enforcement (ignoring unsafe code) and the \"purity\" of something like `DateTime.AddX` is implied by it being an instance member of a `readonly struct`. The same goes for methods like `Vector4.CopyTo`, where `Vector4` isn\u0027t readonly but the `CopyTo` method is and that indicates that the method cannot mutate instance state (and this is validated by the language for safe code).\r\n\r\nThe concept from \"pure\" that is missing is for static/instance methods mutating static state, but due to back-compat among other things I would expect that the existing `Pure` attribute couldn\u0027t be reused or enforced. It would end up being some new language enforced attribute if that was ever introduced.",
                                           "updatedAt":  "2022-01-10T16:46:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48JaTf",
                                           "createdAt":  "2022-01-10T16:45:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCJOuSA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2022-01-10T16:46:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Yes, as I outlined in https://github.com/dotnet/runtime/issues/34098#issuecomment-604439020, I\u0027d be happy to see us introduce a `[DoNotIgnoreResult]` attribute and associated analyzer, but that\u0027s distinct from [Pure].  I don\u0027t want to further propagate the use of [Pure].",
                                           "updatedAt":  "2022-01-10T16:45:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48Jajn",
                                           "createdAt":  "2022-01-10T16:45:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Modern .NET likewise provides two built-in analyzers covering \"you forgot to use the value\":\r\n* https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0058\r\n* https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/ide0059\r\n\r\nThese cover the scenario of \"you called a method that returns a value, but aren\u0027t consuming the value anywhere\".",
                                           "updatedAt":  "2022-01-10T16:45:33Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "DateOnly.AddX methods should be marked [Pure]",
        "labels":  [
                       "needs-further-triage",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64111",
        "createdAt":  "2022-01-21T19:55:48Z",
        "number":  64111,
        "author":  "mdh1418",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCMgfpQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alexdresko",
                                            "createdAt":  "2022-02-01T13:24:14Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-11-22T02:05:10Z",
        "body":  "Through [work]( https://github.com/dotnet/runtime/pull/64028) to ensure no duplicate display names for timezones on Android, it was discovered that there are duplicates on Linux Arm64.\r\n\r\n```\r\ntzCollection: id America/Punta_Arenas has DisplayName (UTC-03:00) GMT\r\ntzCollection: id America/Nuuk has DisplayName (UTC-03:00) GMT\r\n\r\ntzCollection: id Europe/Astrakhan has DisplayName (UTC+04:00) GMT\r\ntzCollection: id Europe/Ulyanovsk has DisplayName (UTC+04:00) GMT\r\ntzCollection: id Europe/Saratov has DisplayName (UTC+04:00) GMT\r\n\r\ntzCollection: id Asia/Tomsk has DisplayName (UTC+07:00) GMT\r\ntzCollection: id Asia/Barnaul has DisplayName (UTC+07:00) GMT\r\n```\r\n\r\nOn Linux musl x64 and Android x64, for example, the IDs have different display names for \r\n```\r\ntzCollection: id America/Punta_Arenas has DisplayName (UTC-03:00) Punta Arenas Time\r\n\r\ntzCollection: id Europe/Astrakhan has DisplayName (UTC+04:00) Astrakhan Time\r\ntzCollection: id Europe/Ulyanovsk has DisplayName (UTC+04:00) Ulyanovsk Time\r\ntzCollection: id Europe/Saratov has DisplayName (UTC+04:00) Saratov Time\r\n\r\ntzCollection: id Asia/Tomsk has DisplayName (UTC+07:00) Tomsk Time\r\ntzCollection: id Asia/Barnaul has DisplayName (UTC+07:00) Barnaul Time\r\n```\r\n\r\nFull list of GetSystemTimeZone IDs and DIsplayNames https://gist.github.com/mdh1418/a2dca0098fea5af098fcee92639b6515\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPMX9tw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48ueML",
                                           "createdAt":  "2022-01-21T19:55:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-01-21T19:55:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48xYgk",
                                           "createdAt":  "2022-01-23T22:15:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThrough [work]( https://github.com/dotnet/runtime/pull/64028) to ensure no duplicate display names for timezones on Android, it was discovered that there are duplicates on Linux Arm64.\r\n\r\n```\r\ntzCollection: id America/Punta_Arenas has DisplayName (UTC-03:00) GMT\r\ntzCollection: id America/Nuuk has DisplayName (UTC-03:00) GMT\r\n\r\ntzCollection: id Europe/Astrakhan has DisplayName (UTC+04:00) GMT\r\ntzCollection: id Europe/Ulyanovsk has DisplayName (UTC+04:00) GMT\r\ntzCollection: id Europe/Saratov has DisplayName (UTC+04:00) GMT\r\n\r\ntzCollection: id Asia/Tomsk has DisplayName (UTC+07:00) GMT\r\ntzCollection: id Asia/Barnaul has DisplayName (UTC+07:00) GMT\r\n```\r\n\r\nOn Linux musl x64 and Android x64, for example, the IDs have different display names for \r\n```\r\ntzCollection: id America/Punta_Arenas has DisplayName (UTC-03:00) Punta Arenas Time\r\n\r\ntzCollection: id Europe/Astrakhan has DisplayName (UTC+04:00) Astrakhan Time\r\ntzCollection: id Europe/Ulyanovsk has DisplayName (UTC+04:00) Ulyanovsk Time\r\ntzCollection: id Europe/Saratov has DisplayName (UTC+04:00) Saratov Time\r\n\r\ntzCollection: id Asia/Tomsk has DisplayName (UTC+07:00) Tomsk Time\r\ntzCollection: id Asia/Barnaul has DisplayName (UTC+07:00) Barnaul Time\r\n```\r\n\r\nFull list of GetSystemTimeZone IDs and DIsplayNames https://gist.github.com/mdh1418/a2dca0098fea5af098fcee92639b6515\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emdh1418\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-23T22:15:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48xaG2",
                                           "createdAt":  "2022-01-23T22:56:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThrough [work]( https://github.com/dotnet/runtime/pull/64028) to ensure no duplicate display names for timezones on Android, it was discovered that there are duplicates on Linux Arm64.\r\n\r\n```\r\ntzCollection: id America/Punta_Arenas has DisplayName (UTC-03:00) GMT\r\ntzCollection: id America/Nuuk has DisplayName (UTC-03:00) GMT\r\n\r\ntzCollection: id Europe/Astrakhan has DisplayName (UTC+04:00) GMT\r\ntzCollection: id Europe/Ulyanovsk has DisplayName (UTC+04:00) GMT\r\ntzCollection: id Europe/Saratov has DisplayName (UTC+04:00) GMT\r\n\r\ntzCollection: id Asia/Tomsk has DisplayName (UTC+07:00) GMT\r\ntzCollection: id Asia/Barnaul has DisplayName (UTC+07:00) GMT\r\n```\r\n\r\nOn Linux musl x64 and Android x64, for example, the IDs have different display names for \r\n```\r\ntzCollection: id America/Punta_Arenas has DisplayName (UTC-03:00) Punta Arenas Time\r\n\r\ntzCollection: id Europe/Astrakhan has DisplayName (UTC+04:00) Astrakhan Time\r\ntzCollection: id Europe/Ulyanovsk has DisplayName (UTC+04:00) Ulyanovsk Time\r\ntzCollection: id Europe/Saratov has DisplayName (UTC+04:00) Saratov Time\r\n\r\ntzCollection: id Asia/Tomsk has DisplayName (UTC+07:00) Tomsk Time\r\ntzCollection: id Asia/Barnaul has DisplayName (UTC+07:00) Barnaul Time\r\n```\r\n\r\nFull list of GetSystemTimeZone IDs and DIsplayNames https://gist.github.com/mdh1418/a2dca0098fea5af098fcee92639b6515\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emdh1418\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-23T22:56:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48xaKU",
                                           "createdAt":  "2022-01-23T22:58:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@mattjohnsonpint do you think there is a way we can distinguish the display names for the listed zones? ",
                                           "updatedAt":  "2022-01-23T22:58:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48xf23",
                                           "createdAt":  "2022-01-24T00:34:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEa7-BQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2022-01-24T00:39:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-07-17T12:38:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "I don\u0027t quite understand why it would matter that it\u0027s Arm64.  Could it just be that the machine had an outdated version of ICU or its data?\r\n\r\nThat said, it\u0027s really bad that the display name is \"GMT\".  That shouldn\u0027t ever be there.  If for some reason we can\u0027t get a true display name, we should fall back to using the IANA ID, for example `\"(UTC+04:00) Europe/Astrakhan\"`",
                                           "updatedAt":  "2022-01-24T00:34:57Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Linux Arm64 TimeZoneInfo Duplicate DisplayNames",
        "labels":  [
                       "enhancement",
                       "arch-arm64",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64778",
        "createdAt":  "2022-02-04T00:54:01Z",
        "number":  64778,
        "author":  "francotiveron",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCwC7ug==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "legistek",
                                            "createdAt":  "2023-05-12T17:14:33Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-06-06T17:22:47Z",
        "body":  "### Description\n\nAccording to https://devblogs.microsoft.com/dotnet/date-time-and-time-zone-enhancements-in-net-6/#time-zone-conversion-apis, with .NET 6 we should be able to use both IANA and Windows Time Zone identifier formats.\r\n\r\nHowever this doesn\u0027t work in Blazor WASM (client side), where only IANA format seems to be recognized.\n\n### Reproduction Steps\n\nTimeZoneInfo.FindSystemTimeZoneById(\"America/New_York\")\r\nTimeZoneInfo.FindSystemTimeZoneById(\"Eastern Standard Time\")\n\n### Expected behavior\n\nBoth expressions work and give the same result\n\n### Actual behavior\n\nOnly the first work, the second throws \"TimeZone not found\"\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nBlazor WASM .NET 6\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXiBF0w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49XYeu",
                                           "createdAt":  "2022-02-04T00:54:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-02-04T00:54:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49XZXr",
                                           "createdAt":  "2022-02-04T01:01:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "@tarekgh @lewing - IIRC, .NET on WASM doesn\u0027t have the windows time zone mappings from ICU/CLDR, correct?  I know we touched on this in #49412.",
                                           "updatedAt":  "2022-02-04T01:01:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49XaSv",
                                           "createdAt":  "2022-02-04T01:09:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nAccording to https://devblogs.microsoft.com/dotnet/date-time-and-time-zone-enhancements-in-net-6/#time-zone-conversion-apis, with .NET 6 we should be able to use both IANA and Windows Time Zone identifier formats.\r\n\r\nHowever this doesn\u0027t work in Blazor WASM (client side), where only IANA format seems to be recognized.\n\n### Reproduction Steps\n\nTimeZoneInfo.FindSystemTimeZoneById(\"America/New_York\")\r\nTimeZoneInfo.FindSystemTimeZoneById(\"Eastern Standard Time\")\n\n### Expected behavior\n\nBoth expressions work and give the same result\n\n### Actual behavior\n\nOnly the first work, the second throws \"TimeZone not found\"\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nBlazor WASM .NET 6\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efrancotiveron\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-04T01:09:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49Xaix",
                                           "createdAt":  "2022-02-04T01:11:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@lewing may advise how to run Blazor WASM with the full ICU which I believe address this issue.",
                                           "updatedAt":  "2022-02-04T01:12:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5V35_h",
                                           "createdAt":  "2023-02-22T20:00:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "timezones are in separate file `dotnet.timezones.blat`, not in ICU data files. It\u0027s not easily configurable right now.\r\n",
                                           "updatedAt":  "2023-02-22T20:00:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cJuga",
                                           "createdAt":  "2023-05-12T17:19:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "legistek",
                                           "body":  "Affecting me as well. Is there any workaround?\r\n\r\nI also note that `TimeZoneInfo.TryConvertWindowsIdToIanaId` always returns false.",
                                           "updatedAt":  "2023-05-12T18:06:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eIEXT",
                                           "createdAt":  "2023-06-06T17:22:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rowe2ryWA",
                                           "body":  "Not working on .NET 7 as well. Copy/Pasting code directly from MS not working.\r\n\r\n![image](https://github.com/dotnet/runtime/assets/118480921/e43186d7-ffad-4aca-bba7-ee1c584cd366)\r\n![image](https://github.com/dotnet/runtime/assets/118480921/a07c7fa9-ab3b-46a2-af9d-e10ee9a0ae85)\r\n ",
                                           "updatedAt":  "2023-06-06T17:22:47Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Windows Time Zone Identifiers not supported in .NET 6 Blazor WASM",
        "labels":  [
                       "arch-wasm",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67932",
        "createdAt":  "2022-04-12T22:37:51Z",
        "number":  67932,
        "author":  "dakersnar",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-25T02:46:13Z",
        "body":  "System.Tests.Perf_DateTime.GetNow has regressed across multiple configurations.\r\n\r\n[Reporting System](https://pvscmdupload.blob.core.windows.net/reports/allTestHistory%2frefs%2fheads%2fmain_x64_Windows%2010.0.18362%2fSystem.Tests.Perf_DateTime.GetNow.html):\r\n\r\n![image](https://user-images.githubusercontent.com/18474647/163065631-92659809-0cb4-4f31-942e-fb70215a496f.png)\r\n\r\nLooking at the [commit diff](https://github.com/dotnet/runtime/compare/227ff3d53784f655fa04dad059a98b3e8d291d61...51b90cc60b8528c77829ef18481b0f58db812776), #66282 seems to be to blame.\r\n\r\n\r\nRepro:\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_monthly.py net7.0-preview2 net7.0-preview3 --filter System.Tests.Perf_DateTime.GetNow \r\n```\r\n\r\n\u003cdetails\u003e\r\n## System.Tests.Perf_DateTime.GetNow\r\n\r\n| Result |    Base |    Diff | Ratio | Operating System      | Bit   | Processor Name                                  |\r\n| ------ | -------:| -------:| -----:| --------------------- | ----- | ----------------------------------------------- |\r\n| Same   |  112.05 |  114.53 |  0.98 | Windows 10            | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz               |\r\n| Same   |   93.72 |   99.81 |  0.94 | Windows 11            | X64   | AMD Ryzen Threadripper PRO 3945WX 12-Cores      |\r\n| Slower |   73.98 |   83.75 |  0.88 | Windows 11            | X64   | AMD Ryzen 9 5900X                               |\r\n| Same   |  131.78 |  149.14 |  0.88 | Windows 11            | X64   | Intel Core i5-4300U CPU 1.90GHz (Haswell)       |\r\n| Same   |  118.61 |  116.32 |  1.02 | Windows 11            | X64   | Unknown processor                               |\r\n| Same   |   88.62 |   86.35 |  1.03 | Windows 11            | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)    |\r\n| Same   |  103.63 |   99.92 |  1.04 | Windows 11            | X64   | Intel Core i9-9900T CPU 2.10GHz                 |\r\n| Same   |  372.20 |  380.11 |  0.98 | alpine 3.13           | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      |\r\n| Same   |   66.48 |   65.91 |  1.01 | centos 7              | X64   | Intel Xeon CPU E5530 2.40GHz                    |\r\n| Slower |  416.66 |  472.23 |  0.88 | debian 11             | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      |\r\n| Slower |   70.55 |  139.81 |  0.50 | ubuntu 18.04          | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz               |\r\n| Same   |  198.80 |  190.36 |  1.04 | ubuntu 18.04          | X64   | Intel Core i7-2720QM CPU 2.20GHz (Sandy Bridge) |\r\n| Same   |  240.11 |  241.49 |  0.99 | alpine 3.12           | Arm64 | Unknown processor                               |\r\n| Same   |  243.79 |  242.33 |  1.01 | ubuntu 18.04          | Arm64 | Unknown processor                               |\r\n| Slower |  169.90 |  191.41 |  0.89 | Windows 10            | Arm64 | Microsoft SQ1 3.0 GHz                           |\r\n| Slower |  169.84 |  194.79 |  0.87 | Windows 11            | Arm64 | Microsoft SQ1 3.0 GHz                           |\r\n| Same   |  403.45 |  402.18 |  1.00 | Windows 10            | X86   | Intel Xeon CPU E5-1650 v4 3.60GHz               |\r\n| Slower |  244.43 |  272.36 |  0.90 | Windows 11            | X86   | AMD Ryzen Threadripper PRO 3945WX 12-Cores      |\r\n| Same   |  669.31 |  771.68 |  0.87 | Windows 11            | X86   | Intel Core i7-10510U CPU 1.80GHz                |\r\n| Same   |  294.33 |  296.09 |  0.99 | Windows 7 SP1         | X86   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      |\r\n| Same   |  766.67 |  714.33 |  1.07 | ubuntu 18.04          | Arm   | ARMv7 Processor rev 3 (v7l)                     |\r\n| Slower | 1358.46 | 1709.54 |  0.79 | Windows 10            | Arm   | Microsoft SQ1 3.0 GHz                           |\r\n| Slower |   94.22 |  169.26 |  0.56 | macOS Monterey 12.2.1 | X64   | Intel Core i7-5557U CPU 3.10GHz (Broadwell)     |\r\n| Same   |  162.60 |  158.64 |  1.02 | macOS Monterey 12.3.1 | X64   | Intel Core i7-4870HQ CPU 2.50GHz (Haswell)      |\r\n\u003c/details\u003e\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSMzF5A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5BZ3UO",
                                           "createdAt":  "2022-04-12T22:37:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-04-12T22:37:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BZ5Mb",
                                           "createdAt":  "2022-04-12T22:47:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCX_Caw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "saucecontrol",
                                                                               "createdAt":  "2022-04-12T22:54:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "dakersnar",
                                                                               "createdAt":  "2022-04-13T16:07:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2022-04-13T23:57:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "This is expected, `DateTime.Now` regresses and improves once a year at fixed dates due to DST ;-) https://twitter.com/EgorBo/status/1460697206667763714",
                                           "updatedAt":  "2022-04-12T22:47:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BZ6yt",
                                           "createdAt":  "2022-04-12T22:54:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "this code only runs when we\u0027re in DST: https://github.com/dotnet/runtime/blob/67761043f1b0e1514a1b8c1c6d99a353737a24a1/src/libraries/System.Private.CoreLib/src/System/TimeZoneInfo.cs#L1383-L1412\r\n\r\nBut, that doesn\u0027t seem like much. would need profiling.",
                                           "updatedAt":  "2022-04-12T22:54:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BZ82N",
                                           "createdAt":  "2022-04-12T23:00:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "~~@danmoseley I don\u0027t think it executes that code as part of `DateTime.Now`, I assume the regression is internal in kernel32~~",
                                           "updatedAt":  "2022-04-12T23:12:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BZ9iz",
                                           "createdAt":  "2022-04-12T23:02:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "oh, or maybe it does?\r\n![image](https://user-images.githubusercontent.com/523221/163068395-8c6ea8d3-cdc0-4e6b-8479-eef763b13802.png)\r\n",
                                           "updatedAt":  "2022-04-12T23:02:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BaUde",
                                           "createdAt":  "2022-04-13T00:16:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Is that with DST, or without? If GetDatePart is larger in DST, then it\u0027s perhaps because it\u0027s getting Year out of the DateTime in that block. The code before already gets Day and Month and Year, though. I wonder if there is opportunity to have GetDatePart() return all of those together rather than repeat its work. (Edit - I see that\u0027s GetDate())\r\n \r\nis the codegen for GetDatePart() reasonable? ",
                                           "updatedAt":  "2022-04-13T00:28:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Bb-XT",
                                           "createdAt":  "2022-04-13T10:04:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "Ah, ignore my flamegraph - it\u0027s for my local time where we don\u0027t have daylight savings. When I change my tz to the pacific one I now see a different picture - it seems there are quite a few things to optimize\r\n![image](https://user-images.githubusercontent.com/523221/163154845-875d41de-7984-45b8-910e-b50474d4f083.png)\r\n\r\n\r\n\u003e is the codegen for GetDatePart() reasonable?\r\n\r\nmore or less, but we might need to extract it for Year separately since it\u0027s on a hot path and inline into `Year` property.\r\nAlso, it\u0027s executed from 3 different places in this flamegraph",
                                           "updatedAt":  "2022-04-13T10:04:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Bb_rq",
                                           "createdAt":  "2022-04-13T10:08:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSystem.Tests.Perf_DateTime.GetNow has regressed across multiple configurations.\r\n\r\n[Reporting System](https://pvscmdupload.blob.core.windows.net/reports/allTestHistory%2frefs%2fheads%2fmain_x64_Windows%2010.0.18362%2fSystem.Tests.Perf_DateTime.GetNow.html):\r\n\r\n![image](https://user-images.githubusercontent.com/18474647/163065631-92659809-0cb4-4f31-942e-fb70215a496f.png)\r\n\r\nLooking at the [commit diff](https://github.com/dotnet/runtime/compare/227ff3d53784f655fa04dad059a98b3e8d291d61...51b90cc60b8528c77829ef18481b0f58db812776), #66282 seems to be to blame.\r\n\r\n\r\nRepro:\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_monthly.py net7.0-preview2 net7.0-preview3 --filter System.Tests.Perf_DateTime.GetNow \r\n```\r\n\r\n\u003cdetails\u003e\r\n## System.Tests.Perf_DateTime.GetNow\r\n\r\n| Result |    Base |    Diff | Ratio | Operating System      | Bit   | Processor Name                                  |\r\n| ------ | -------:| -------:| -----:| --------------------- | ----- | ----------------------------------------------- |\r\n| Same   |  112.05 |  114.53 |  0.98 | Windows 10            | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz               |\r\n| Same   |   93.72 |   99.81 |  0.94 | Windows 11            | X64   | AMD Ryzen Threadripper PRO 3945WX 12-Cores      |\r\n| Slower |   73.98 |   83.75 |  0.88 | Windows 11            | X64   | AMD Ryzen 9 5900X                               |\r\n| Same   |  131.78 |  149.14 |  0.88 | Windows 11            | X64   | Intel Core i5-4300U CPU 1.90GHz (Haswell)       |\r\n| Same   |  118.61 |  116.32 |  1.02 | Windows 11            | X64   | Unknown processor                               |\r\n| Same   |   88.62 |   86.35 |  1.03 | Windows 11            | X64   | Intel Core i7-8700 CPU 3.20GHz (Coffee Lake)    |\r\n| Same   |  103.63 |   99.92 |  1.04 | Windows 11            | X64   | Intel Core i9-9900T CPU 2.10GHz                 |\r\n| Same   |  372.20 |  380.11 |  0.98 | alpine 3.13           | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      |\r\n| Same   |   66.48 |   65.91 |  1.01 | centos 7              | X64   | Intel Xeon CPU E5530 2.40GHz                    |\r\n| Slower |  416.66 |  472.23 |  0.88 | debian 11             | X64   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      |\r\n| Slower |   70.55 |  139.81 |  0.50 | ubuntu 18.04          | X64   | Intel Xeon CPU E5-1650 v4 3.60GHz               |\r\n| Same   |  198.80 |  190.36 |  1.04 | ubuntu 18.04          | X64   | Intel Core i7-2720QM CPU 2.20GHz (Sandy Bridge) |\r\n| Same   |  240.11 |  241.49 |  0.99 | alpine 3.12           | Arm64 | Unknown processor                               |\r\n| Same   |  243.79 |  242.33 |  1.01 | ubuntu 18.04          | Arm64 | Unknown processor                               |\r\n| Slower |  169.90 |  191.41 |  0.89 | Windows 10            | Arm64 | Microsoft SQ1 3.0 GHz                           |\r\n| Slower |  169.84 |  194.79 |  0.87 | Windows 11            | Arm64 | Microsoft SQ1 3.0 GHz                           |\r\n| Same   |  403.45 |  402.18 |  1.00 | Windows 10            | X86   | Intel Xeon CPU E5-1650 v4 3.60GHz               |\r\n| Slower |  244.43 |  272.36 |  0.90 | Windows 11            | X86   | AMD Ryzen Threadripper PRO 3945WX 12-Cores      |\r\n| Same   |  669.31 |  771.68 |  0.87 | Windows 11            | X86   | Intel Core i7-10510U CPU 1.80GHz                |\r\n| Same   |  294.33 |  296.09 |  0.99 | Windows 7 SP1         | X86   | Intel Core i7-7700 CPU 3.60GHz (Kaby Lake)      |\r\n| Same   |  766.67 |  714.33 |  1.07 | ubuntu 18.04          | Arm   | ARMv7 Processor rev 3 (v7l)                     |\r\n| Slower | 1358.46 | 1709.54 |  0.79 | Windows 10            | Arm   | Microsoft SQ1 3.0 GHz                           |\r\n| Slower |   94.22 |  169.26 |  0.56 | macOS Monterey 12.2.1 | X64   | Intel Core i7-5557U CPU 3.10GHz (Broadwell)     |\r\n| Same   |  162.60 |  158.64 |  1.02 | macOS Monterey 12.3.1 | X64   | Intel Core i7-4870HQ CPU 2.50GHz (Haswell)      |\r\n\u003c/details\u003e\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edakersnar\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `tenet-performance`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-13T10:08:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Bb_42",
                                           "createdAt":  "2022-04-13T10:09:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "I\u0027ll take a look when I have some spare time 🙂 ",
                                           "updatedAt":  "2022-04-13T10:09:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IyoOB",
                                           "createdAt":  "2022-08-20T04:43:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I measured the impact locally, including old frameworks for interest. Difference is only about 4% now, in .NET 6 it was 9% which is what the graph above shows from earlier. The recent #72712 will have contributed to that, because the DST path adds calls to Year, Month, Day.\r\n\r\n@tarekgh it is OK to assume that timezone rules aren\u0027t changing during the lifetime of the process, right? So possibly the current rule and timezone can be cached, and if the timezone matches what was cached, we can continue to use that rule, and maybe short circuit simple cases. I\u0027ll leave as help wanted in case someone wants to take a look at some kind of caching of that sort. But otherwise I am not sure it is worth further attention. \r\n```\r\nBenchmarkDotNet=v0.13.1, OS=Windows 10.0.19044.1889 (21H2)\r\nIntel Core i7-7700 CPU 3.60GHz (Kaby Lake), 1 CPU, 8 logical and 4 physical cores\r\n.NET SDK=7.0.100-rc.2.22419.24\r\n  [Host]     : .NET 7.0.0 (7.0.22.41112), X64 RyuJIT\r\n  Job-CERAHN : .NET 8.0.0 (42.42.42.42424), X64 RyuJIT\r\n  Job-SZEXDU : .NET 6.0.8 (6.0.822.36306), X64 RyuJIT\r\n  Job-BHYKGQ : .NET Core 3.1.28 (CoreCLR 4.700.22.36202, CoreFX 4.700.22.36301), X64 RyuJIT\r\n  Job-NYWNMR : .NET Framework 4.8 (4.8.4510.0), X64 RyuJIT\r\n\r\n\r\n|            Method |        Job |            Runtime |                                Toolchain |      Mean |    Error |   StdDev | Ratio | RatioSD | Allocated |\r\n|------------------ |----------- |------------------- |----------------------------------------- |----------:|---------:|---------:|------:|--------:|----------:|\r\n| DateTimeNow_NoDST | Job-CERAHN |           .NET 7.0 |                        \\main\\corerun.exe |  81.67 ns | 1.479 ns | 1.311 ns |  1.00 |    0.00 |         - |\r\n|   DateTimeNow_DST | Job-CERAHN |           .NET 7.0 |                        \\main\\corerun.exe |  85.09 ns | 0.479 ns | 0.448 ns |  1.04 |    0.02 |         - |\r\n| DateTimeNow_NoDST | Job-SZEXDU |           .NET 6.0 |                                  Default |  94.49 ns | 0.640 ns | 0.567 ns |  1.16 |    0.02 |         - |\r\n|   DateTimeNow_DST | Job-SZEXDU |           .NET 6.0 |                                  Default | 103.12 ns | 0.512 ns | 0.479 ns |  1.26 |    0.02 |         - |\r\n| DateTimeNow_NoDST | Job-BHYKGQ |      .NET Core 3.1 |                                  Default | 215.65 ns | 1.004 ns | 0.890 ns |  2.64 |    0.05 |         - |\r\n|   DateTimeNow_DST | Job-BHYKGQ |      .NET Core 3.1 |                                  Default | 226.76 ns | 1.080 ns | 0.902 ns |  2.78 |    0.04 |         - |\r\n| DateTimeNow_NoDST | Job-NYWNMR | .NET Framework 4.8 |                                  Default | 217.80 ns | 0.855 ns | 0.800 ns |  2.67 |    0.04 |         - |\r\n|   DateTimeNow_DST | Job-NYWNMR | .NET Framework 4.8 |                                  Default | 229.96 ns | 0.847 ns | 0.751 ns |  2.82 |    0.04 |         - |\r\n```\r\n\r\n\u003cdetails\u003e\r\n    \u003csummary\u003ebenchmark\u003c/summary\u003e\r\n\r\n```c#\r\n\r\nusing System;\r\nusing System.ComponentModel;\r\nusing System.Runtime.InteropServices;\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Configs;\r\nusing BenchmarkDotNet.Environments;\r\nusing BenchmarkDotNet.Jobs;\r\nusing BenchmarkDotNet.Running;\r\n\r\n[MemoryDiagnoser]\r\npublic class Program\r\n{\r\n    // run as admin \r\n    public static void Main(string[] args)\r\n    {\r\n        var config = DefaultConfig.Instance\r\n        .AddJob(Job.Default.WithRuntime(CoreRuntime.Core31))\r\n        .AddJob(Job.Default.WithRuntime(CoreRuntime.Core60))\r\n        .AddJob(Job.Default.WithRuntime(CoreRuntime.CreateForNewVersion(\"net7.0\", \".NET 7.0\")))\r\n        .AddJob(Job.Default.WithRuntime(ClrRuntime.Net48));\r\n        BenchmarkSwitcher.FromAssembly(typeof(Program).Assembly).Run(args, config);\r\n    }\r\n\r\n    [GlobalSetup(Target = nameof(DateTimeNow_NoDST))]\r\n    public void NoDST() =\u003e SetSystemTime(new DateTime(2022, 12, 1)); // assuming US\r\n\r\n    [GlobalSetup(Target = nameof(DateTimeNow_DST))]\r\n    public void DST() =\u003e SetSystemTime(new DateTime(2022, 6, 1)); // assuming US\r\n\r\n    [Benchmark(Baseline = true)]\r\n    public DateTime DateTimeNow_NoDST() =\u003e DateTime.Now;\r\n\r\n    [Benchmark]\r\n    public DateTime DateTimeNow_DST() =\u003e DateTime.Now;\r\n\r\n    public void SetSystemTime(DateTime dt)\r\n    {\r\n        SYSTEMTIME st = new SYSTEMTIME();\r\n        st.wYear = (short)dt.Year;\r\n        st.wMonth = (short)dt.Month;\r\n        st.wDay = (short)dt.Day;\r\n        SetSystemTime(ref st);\r\n        int errorCode = Marshal.GetLastWin32Error();\r\n        if (errorCode != 0)\r\n            throw new Win32Exception(errorCode);\r\n    }\r\n    [DllImport(\"kernel32.dll\", SetLastError = true)]\r\n    private static extern bool SetSystemTime(ref SYSTEMTIME st);\r\n}\r\n\r\n[StructLayout(LayoutKind.Sequential)]\r\npublic struct SYSTEMTIME\r\n{\r\n    public short wYear;\r\n    public short wMonth;\r\n    public short wDayOfWeek;\r\n    public short wDay;\r\n    public short wHour;\r\n    public short wMinute;\r\n    public short wSecond;\r\n    public short wMilliseconds;\r\n}\r\n\r\n```\r\n\r\n\u003c/details\u003e\r\n\r\nHere\u0027s an idea of where the time is spent. There\u0027s not a clear \"single place\".\r\n![image](https://user-images.githubusercontent.com/6385855/185729194-59ad03db-267e-496e-993f-7552893ea284.png)\r\n",
                                           "updatedAt":  "2022-08-20T13:01:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IzMXk",
                                           "createdAt":  "2022-08-20T18:14:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCq4L-w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2022-08-20T20:30:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e it is OK to assume that timezone rules aren\u0027t changing during the lifetime of the process, right? \r\n\r\nNot really, users can change the local time zone and clear the cached Local TZ. But we can handle flushing the current rule if the local TZ cache is flushed. By the way, on Windows, we already cache the rule https://github.com/dotnet/runtime/blob/6d60d06fc69ffebb3ec91885772b4690516f0a7d/src/libraries/System.Private.CoreLib/src/System/TimeZoneInfo.Win32.cs#L374\r\n\r\nThe better idea here is not catching the rule and only cache the UTC offset and when the daylight will change. Doing that will make calculation of the `Now` much faster and simpler to handle too. I can try that when I get some chance. ",
                                           "updatedAt":  "2022-08-20T18:17:11Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "System.Tests.Perf_DateTime.GetNow gets slower every summer due to daylight savings",
        "labels":  [
                       "tenet-performance",
                       "help wanted",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68122",
        "createdAt":  "2022-04-17T06:10:48Z",
        "number":  68122,
        "author":  "songdongsheng",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T01:49:23Z",
        "body":  "### Description\n\nBefore invoke ToLocalTime():\r\n```\r\nPS C:\\\u003e ([System.DateTimeOffset]::FromUnixTimeSeconds(1650174759)).ToString(\"r\")\r\nSun, 17 Apr 2022 05:52:39 GMT\r\n```\r\n\r\nAfter ToLocalTime():\r\n```\r\nPS C:\\\u003e ([System.DateTimeOffset]::FromUnixTimeSeconds(1650174759)).ToLocalTime().ToString(\"r\")\r\nSun, 17 Apr 2022 13:52:39 GMT\r\n```\r\n\r\nThe result is wrong, **different** hour with **same** time zone!\n\n### Reproduction Steps\n\n```\r\nPS C:\\\u003e ([System.DateTimeOffset]::FromUnixTimeSeconds(1650174759)).ToString(\"r\")\r\nSun, 17 Apr 2022 05:52:39 GMT\r\n\r\nPS C:\\\u003e ([System.DateTimeOffset]::FromUnixTimeSeconds(1650174759)).ToLocalTime().ToString(\"r\")\r\nSun, 17 Apr 2022 13:52:39 GMT\r\n```\r\n\n\n### Expected behavior\n\nreturn correct date time string.\n\n### Actual behavior\n\nreturn error date time string.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\ndotnet 6.0.3 on win10-x64\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQZ5Exw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5BnQ_t",
                                           "createdAt":  "2022-04-17T06:10:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-04-17T06:10:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BnTjS",
                                           "createdAt":  "2022-04-17T07:30:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "songdongsheng",
                                           "body":  "area-System.Runtime",
                                           "updatedAt":  "2022-04-17T07:30:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BnbZi",
                                           "createdAt":  "2022-04-17T11:12:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nBefore invoke ToLocalTime():\r\n```\r\nPS C:\\\u003e ([System.DateTimeOffset]::FromUnixTimeSeconds(1650174759)).ToString(\"r\")\r\nSun, 17 Apr 2022 05:52:39 GMT\r\n```\r\n\r\nAfter ToLocalTime():\r\n```\r\nPS C:\\\u003e ([System.DateTimeOffset]::FromUnixTimeSeconds(1650174759)).ToLocalTime().ToString(\"r\")\r\nSun, 17 Apr 2022 13:52:39 GMT\r\n```\r\n\r\nThe result is wrong, **different** hour with **same** time zone!\n\n### Reproduction Steps\n\n```\r\nPS C:\\\u003e ([System.DateTimeOffset]::FromUnixTimeSeconds(1650174759)).ToString(\"r\")\r\nSun, 17 Apr 2022 05:52:39 GMT\r\n\r\nPS C:\\\u003e ([System.DateTimeOffset]::FromUnixTimeSeconds(1650174759)).ToLocalTime().ToString(\"r\")\r\nSun, 17 Apr 2022 13:52:39 GMT\r\n```\r\n\n\n### Expected behavior\n\nreturn correct date time string.\n\n### Actual behavior\n\nreturn error date time string.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\ndotnet 6.0.3 on win10-x64\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esongdongsheng\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-17T11:12:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BnkTH",
                                           "createdAt":  "2022-04-17T14:34:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "I cannot reproduce this issue with PowerShell 7.2.2 on .NET 6.0.3, nor with Windows PowerShell 5.1 on .NET Framework 4.8. This is with FLE Daylight Time (UTC+3) on Windows 10.\r\n\r\n```\r\nPS C:\\\u003e ([System.DateTimeOffset]::FromUnixTimeSeconds(1650174759)).ToString(\"r\")\r\nSun, 17 Apr 2022 05:52:39 GMT\r\nPS C:\\\u003e ([System.DateTimeOffset]::FromUnixTimeSeconds(1650174759)).ToLocalTime().ToString(\"r\")\r\nSun, 17 Apr 2022 05:52:39 GMT\r\n```\r\n\r\nFor reference, here are the same DateTimeOffset values in two formats so that the values of the DateTimeOffset.Offset property also show up.\r\n\r\n```\r\nPS C:\\\u003e [String]::Format(\"{0:O} = {0:R}\", [System.DateTimeOffset]::FromUnixTimeSeconds(1650174759))\r\n2022-04-17T05:52:39.0000000+00:00 = Sun, 17 Apr 2022 05:52:39 GMT\r\nPS C:\\\u003e [String]::Format(\"{0:O} = {0:R}\", [System.DateTimeOffset]::FromUnixTimeSeconds(1650174759).ToLocalTime())\r\n2022-04-17T08:52:39.0000000+03:00 = Sun, 17 Apr 2022 05:52:39 GMT\r\n```\r\n\r\nIf I use the DateTimeOffset.DateTime or DateTimeOffset.LocalDateTime property, then I get an incorrect time in GMT, but that behavior is documented in [The RFC1123 (\"R\", \"r\") format specifier](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-date-and-time-format-strings#RFC1123): _\"you must convert the [DateTime](https://docs.microsoft.com/en-us/dotnet/api/system.datetime) value to UTC by calling the [DateTime.ToUniversalTime](https://docs.microsoft.com/en-us/dotnet/api/system.datetime.touniversaltime) method before you perform the formatting operation.\"_\r\n\r\n```\r\nPS C:\\\u003e [String]::Format(\"{0:O} = {0:R}\", [System.DateTimeOffset]::FromUnixTimeSeconds(1650174759).DateTime)\r\n2022-04-17T05:52:39.0000000 = Sun, 17 Apr 2022 05:52:39 GMT\r\nPS C:\\\u003e [String]::Format(\"{0:O} = {0:R}\", [System.DateTimeOffset]::FromUnixTimeSeconds(1650174759).ToLocalTime().DateTime)\r\n2022-04-17T08:52:39.0000000 = Sun, 17 Apr 2022 08:52:39 GMT\r\nPS C:\\\u003e [String]::Format(\"{0:O} = {0:R}\", [System.DateTimeOffset]::FromUnixTimeSeconds(1650174759).LocalDateTime)\r\n2022-04-17T08:52:39.0000000+03:00 = Sun, 17 Apr 2022 08:52:39 GMT\r\nPS C:\\\u003e [String]::Format(\"{0:O} = {0:R}\", [System.DateTimeOffset]::FromUnixTimeSeconds(1650174759).ToLocalTime().LocalDateTime)\r\n2022-04-17T08:52:39.0000000+03:00 = Sun, 17 Apr 2022 08:52:39 GMT\r\n```",
                                           "updatedAt":  "2022-04-17T14:34:41Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "DateTimeOffset.ToLocalTime() should return local time with adjusted DateTimeKind",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68348",
        "createdAt":  "2022-04-21T18:55:54Z",
        "number":  68348,
        "author":  "CodeBlanch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxCK6w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jods4",
                                            "createdAt":  "2023-06-30T13:03:29Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-11-22T01:49:24Z",
        "body":  "Today for culture-invariant round-tripping `TimeOnly` supports the `o`/`O` format.\r\n\r\n```csharp\r\nConsole.WriteLine(new TimeOnly(0, 1, 0).ToString(\"O\")) // Outputs: \"00:01:00.0000000\"\r\n```\r\n\r\nIt would be nice if there was a more compact format akin to [`TimeSpan` `c` format](https://docs.microsoft.com/dotnet/standard/base-types/standard-timespan-format-strings#the-constant-c-format-specifier) basically `hh:mm:ss[.fffffff]` for `TimeOnly`.\r\n\r\nSomething like:\r\n\r\n```csharp\r\nConsole.WriteLine(new TimeOnly(0, 1, 0).ToString(\"c\")) // Outputs: \"00:01:00\"\r\n```\r\n\r\nThe benefit of this format would be to save some bits during transport when fractional portions of the time are not used.\r\n\r\nSomewhat relates to #53539 \u0026 #53768\r\n\r\n/cc @tarekgh ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQhnyKA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5B5rbr",
                                           "createdAt":  "2022-04-21T18:55:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-04-21T18:55:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B5sTL",
                                           "createdAt":  "2022-04-21T18:59:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "can\u0027t you just use `hh\u0027:\u0027mm\u0027:\u0027ss`?\r\n\r\n```C#\r\nstatic string C = \"hh\u0027:\u0027mm\u0027:\u0027ss\";\r\nTimeOnly.FromDateTime(DateTime.Now).ToString(C)\r\n```\r\n\r\nNote, `TimeOnly` is different than TimeSpan because it must get the formats from the used culture. We have `t` for culture aware short time. Therefore you\u0027ll never see `C` with DateTime/DateTimeOffset/TimeOnly/DateOnly. Supporting `C` will need to define if we use cultural separators or always use the `:` and \u0027/`.  I don\u0027t think this is worth adding as the workaround is really simple.",
                                           "updatedAt":  "2022-04-21T19:14:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B5t8q",
                                           "createdAt":  "2022-04-21T19:06:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nToday for culture-invariant round-tripping `TimeOnly` supports the `o`/`O` format.\r\n\r\n```csharp\r\nConsole.WriteLine(new TimeOnly(0, 1, 0).ToString(\"O\")) // Outputs: \"00:01:00.0000000\"\r\n```\r\n\r\nIt would be nice if there was a more compact format akin to [`TimeSpan` `c` format](https://docs.microsoft.com/dotnet/standard/base-types/standard-timespan-format-strings#the-constant-c-format-specifier) basically `hh:mm:ss[.fffffff]` for `TimeOnly`.\r\n\r\nSomething like:\r\n\r\n```csharp\r\nConsole.WriteLine(new TimeOnly(0, 1, 0).ToString(\"c\")) // Outputs: \"00:01:00\"\r\n```\r\n\r\nThe benefit of this format would be to save some bits during transport when fractional portions of the time are not used.\r\n\r\nSomewhat relates to #53539 \u0026 #53768\r\n\r\n/cc @tarekgh \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCodeBlanch\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-21T19:06:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B5zil",
                                           "createdAt":  "2022-04-21T19:30:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CodeBlanch",
                                           "body":  "You can do it with a custom format string, yes. I think the format would need to be `HH\u0027:\u0027mm\u0027:\u0027ss.FFFFFFF` though.\r\n\r\nBasically this issue is because I think this would be useful/common enough that it should be a standard format. We can just leave this out there to see if anyone else feels the same. #53539 is proposing the same format which will probably need the support to go into #53768.\r\n\r\nPS: This format would be for round-tripping so it would need to be culture invariant. Just a more compact version of `O`/`o`.",
                                           "updatedAt":  "2022-04-21T19:30:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B53v1",
                                           "createdAt":  "2022-04-21T19:49:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e  I think the format would need to be HH\u0027:\u0027mm\u0027:\u0027ss.FFFFFFF though.\r\n\r\nYou are right if you want to get closer to `O` :-) isn\u0027t `HH\u0027:\u0027mm\u0027:\u0027ss.FFFFFFF` will give you the same `O` output?\r\n\r\nI am wondering why `O` is not enough for your scenario. ",
                                           "updatedAt":  "2022-04-21T20:14:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B5_C7",
                                           "createdAt":  "2022-04-21T20:20:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` since it may be missing important information. Please refer to our [contribution guidelines](https://github.com/dotnet/runtime/blob/main/CONTRIBUTING.md#writing-a-good-bug-report) for tips on how to report issues effectively.",
                                           "updatedAt":  "2022-04-21T20:20:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B6V8-",
                                           "createdAt":  "2022-04-21T22:14:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CodeBlanch",
                                           "body":  "Here are a few examples. Basically the fractional units get compacted or are not written at all, depending on the value:\r\n\r\n```csharp\r\nstring format = \"HH\u0027:\u0027mm\u0027:\u0027ss.FFFFFFF\";\r\nConsole.WriteLine(TimeOnly.FromTimeSpan(TimeSpan.FromMinutes(1)).ToString(format)); // 00:01:00\r\nConsole.WriteLine(TimeOnly.FromTimeSpan(TimeSpan.FromMilliseconds(1)).ToString(format)); // 00:00:00.001\r\nConsole.WriteLine(TimeOnly.FromTimeSpan(TimeSpan.FromTicks(1)).ToString(format)); // 00:00:00.0000001\r\n\r\nConsole.WriteLine(TimeOnly.FromTimeSpan(TimeSpan.FromMinutes(1)).ToString(\"O\")); // 00:01:00.0000000\r\nConsole.WriteLine(TimeOnly.FromTimeSpan(TimeSpan.FromMilliseconds(1)).ToString(\"O\")); // 00:00:00.0010000\r\nConsole.WriteLine(TimeOnly.FromTimeSpan(TimeSpan.FromTicks(1)).ToString(\"O\")); // 00:00:00.0000001\r\n```",
                                           "updatedAt":  "2022-04-21T22:14:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B6dxE",
                                           "createdAt":  "2022-04-21T23:14:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I am wondering about your scenario that needs the compact form and the full form is not acceptable. Note, most of the time, TimeOnly will not have such milliseconds without smaller fraction as you see in TimeSpan especially when dealing with system time which I guess will be your scenario. So, it is unlikely to run into cases need to compact the output. ",
                                           "updatedAt":  "2022-04-21T23:30:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B9pCH",
                                           "createdAt":  "2022-04-22T16:32:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCZt_Fw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2022-04-25T19:35:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CodeBlanch",
                                           "body":  "You kind of lost me there. You are saying the precision is NOT likely to be used with `TimeOnly`? I would agree there. But wouldn\u0027t that be an argument FOR the compacted format? If we agree the precision is not likely to be used we should also agree that it should be optional during round-trip 😄 ",
                                           "updatedAt":  "2022-04-22T16:32:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B9swx",
                                           "createdAt":  "2022-04-22T16:53:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCuLZNw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "mm6502",
                                                                               "createdAt":  "2022-10-20T09:08:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "What I mean is when working with system time, the time precision is higher than milliseconds. Compact formatting of such time wouldn\u0027t be noticeable. Here is an example which uses the compact pattern. \r\n\r\n```C#\r\n            string format = \"HH\u0027:\u0027mm\u0027:\u0027ss.FFFFFFF\";\r\n            for (int i = 0; i \u003c 1000000; i++)\r\n            {\r\n                TimeOnly to = TimeOnly.FromDateTime(DateTime.Now);\r\n                Console.WriteLine($\"{to.ToString(format)}\");\r\n            }\r\n\r\n```\r\n\r\nOut something like:\r\n\r\n```\r\n09:49:27.7696078\r\n09:49:27.7697399\r\n09:49:27.7698547\r\n09:49:27.7699744\r\n09:49:27.7700997\r\n09:49:27.7702792\r\n09:49:27.7704194\r\n09:49:27.7705359\r\n09:49:27.7707199\r\n09:49:27.7708429\r\n09:49:27.7709553\r\n09:49:27.7710782\r\n09:49:27.7712189\r\n09:49:27.7713536\r\n09:49:27.771458\r\n09:49:27.7715862\r\n09:49:27.7717099\r\n09:49:27.7718269\r\n09:49:27.7719315\r\n09:49:27.7720225\r\n09:49:27.7721371\r\n09:49:27.7722448\r\n09:49:27.7724362\r\n```\r\n\r\nCompact formatting is not helping much with that.\r\n\r\nMy point is, such compact formatting makes more sense for TimeSpan than TimeOnly.",
                                           "updatedAt":  "2022-04-22T17:26:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B-LUw",
                                           "createdAt":  "2022-04-22T20:01:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CodeBlanch",
                                           "body":  "\u003e My point is, such compact formatting makes more sense for TimeSpan than TimeOnly.\r\n\r\n👍 ",
                                           "updatedAt":  "2022-04-22T20:01:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CGX_6",
                                           "createdAt":  "2022-04-25T19:42:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvebjA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mm6502",
                                                                               "createdAt":  "2022-10-20T09:09:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "snakefoot",
                                                                               "createdAt":  "2022-11-12T10:13:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e What I mean is when working with system time, the time precision is higher than milliseconds.\r\n\r\nSure but what if you are _not_ working with system time though? Or what if you are working with \"time since the beginning of the day\" instead of \"time since now\"?\r\n\r\nI don\u0027t quite understand why creating a specific scenario where milliseconds will unlikely be 0 invalidates this request for other scenarios where it will be. \r\n\r\nI can see a multitude of common use cases where the `TimeOnly` values will be rounded values and the problem described in the OP would make a lot of sense. For instance, imagine a scheduling API of sorts where you can define time slots for meetings. No one schedules meetings with millisecond precision.",
                                           "updatedAt":  "2022-04-25T19:42:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CGbIZ",
                                           "createdAt":  "2022-04-25T19:57:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@julealgon the other scenarios you are talking about here which mostly not having a fraction of milliseconds. I am wondering why using `HH\u0027:\u0027mm\u0027:\u0027ss` or `HH\u0027:\u0027mm\u0027:\u0027ss.FFFFFFF` formats is not enough? I am seeing for the TimeOnly, exposing compact format is really something nice to have thing more than crucial feature to add.",
                                           "updatedAt":  "2022-04-25T20:03:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CGdX5",
                                           "createdAt":  "2022-04-25T20:07:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e I am seeing for the TimeOnly, exposing compact format is really something nice to have thing more than crucial feature to add.\r\n\r\nI don\u0027t disagree with that, but I don\u0027t think something just being nice to have instead of crucial invalidates the request is my point.",
                                           "updatedAt":  "2022-04-25T20:07:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CGfIo",
                                           "createdAt":  "2022-04-25T20:15:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvTOKw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2022-04-25T20:23:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zdenek-jelinek",
                                                                               "createdAt":  "2022-11-09T14:08:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e I don\u0027t disagree with that, but I don\u0027t think something just being nice to have instead of crucial invalidates the request is my point.\r\n\r\nIt doesn\u0027t. We still have the issue open :-) but it is a low priority though as the workaround is quite simple.",
                                           "updatedAt":  "2022-04-25T20:15:03Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "System.TimeOnly: Compact round-trip format",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70429",
        "createdAt":  "2022-06-08T12:13:37Z",
        "number":  70429,
        "author":  "dahauns",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T01:49:26Z",
        "body":  "### Description\n\nTimeSpan.ParseExact throws an exception when \r\n\r\n- using a custom format string with multiple specifiers\r\n- the first is a \"non-padded\" specifier, like \"hmm\", \"mss\" etc.\r\n- the input string contains a non-padded value for that specifier.\r\n\r\nI\u0027d have assumed that the above should result in a valid output - am I wrong?\r\n\n\n### Reproduction Steps\n\n```\r\nvar ts= TimeSpan.ParseExact(\"820\",\"hmm\",CultureInfo.InvariantCulture);\r\nConsole.WriteLine(ts);\r\n```\n\n### Expected behavior\n\n```\r\n08:20:00\r\n```\n\n### Actual behavior\n\n```\r\nUnhandled exception. System.FormatException: Input string was not in a correct format.\r\n   at System.Globalization.TimeSpanParse.TimeSpanResult.SetInvalidStringFailure()\r\n   at System.Globalization.TimeSpanParse.TryParseByFormat(ReadOnlySpan`1 input, ReadOnlySpan`1 format, TimeSpanStyles styles, TimeSpanResult\u0026 result)\r\n   at System.Globalization.TimeSpanParse.TryParseExactTimeSpan(ReadOnlySpan`1 input, ReadOnlySpan`1 format, IFormatProvider formatProvider, TimeSpanStyles styles, TimeSpanResult\u0026 result)\r\n   at System.TimeSpan.ParseExact(String input, String format, IFormatProvider formatProvider)\r\n   at Program.Main()\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nUsing LeftPad on the string...\n\n### Configuration\n\nFirst reproduced with\r\n.NET 6.0/x64/Windows 10 21H2\r\n\r\nBut can also be reproduced e.g. at dotnetfiddle with both .NET 6.0 and 4.7.2.\r\n\r\n\r\n\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORKSAqQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5EiRpY",
                                           "createdAt":  "2022-06-08T12:13:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-06-08T12:13:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EjN70",
                                           "createdAt":  "2022-06-08T15:39:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nTimeSpan.ParseExact throws an exception when \r\n\r\n- using a custom format string with multiple specifiers\r\n- the first is a \"non-padded\" specifier, like \"hmm\", \"mss\" etc.\r\n- the input string contains a non-padded value for that specifier.\r\n\r\nI\u0027d have assumed that the above should result in a valid output - am I wrong?\r\n\n\n### Reproduction Steps\n\n```\r\nvar ts= TimeSpan.ParseExact(\"820\",\"hmm\",CultureInfo.InvariantCulture);\r\nConsole.WriteLine(ts);\r\n```\n\n### Expected behavior\n\n```\r\n08:20:00\r\n```\n\n### Actual behavior\n\n```\r\nUnhandled exception. System.FormatException: Input string was not in a correct format.\r\n   at System.Globalization.TimeSpanParse.TimeSpanResult.SetInvalidStringFailure()\r\n   at System.Globalization.TimeSpanParse.TryParseByFormat(ReadOnlySpan`1 input, ReadOnlySpan`1 format, TimeSpanStyles styles, TimeSpanResult\u0026 result)\r\n   at System.Globalization.TimeSpanParse.TryParseExactTimeSpan(ReadOnlySpan`1 input, ReadOnlySpan`1 format, IFormatProvider formatProvider, TimeSpanStyles styles, TimeSpanResult\u0026 result)\r\n   at System.TimeSpan.ParseExact(String input, String format, IFormatProvider formatProvider)\r\n   at Program.Main()\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nUsing LeftPad on the string...\n\n### Configuration\n\nFirst reproduced with\r\n.NET 6.0/x64/Windows 10 21H2\r\n\r\nBut can also be reproduced e.g. at dotnetfiddle with both .NET 6.0 and 4.7.2.\r\n\r\n\r\n\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edahauns\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-08T15:39:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EjZDp",
                                           "createdAt":  "2022-06-08T16:20:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nTimeSpan.ParseExact throws an exception when \r\n\r\n- using a custom format string with multiple specifiers\r\n- the first is a \"non-padded\" specifier, like \"hmm\", \"mss\" etc.\r\n- the input string contains a non-padded value for that specifier.\r\n\r\nI\u0027d have assumed that the above should result in a valid output - am I wrong?\r\n\n\n### Reproduction Steps\n\n```\r\nvar ts= TimeSpan.ParseExact(\"820\",\"hmm\",CultureInfo.InvariantCulture);\r\nConsole.WriteLine(ts);\r\n```\n\n### Expected behavior\n\n```\r\n08:20:00\r\n```\n\n### Actual behavior\n\n```\r\nUnhandled exception. System.FormatException: Input string was not in a correct format.\r\n   at System.Globalization.TimeSpanParse.TimeSpanResult.SetInvalidStringFailure()\r\n   at System.Globalization.TimeSpanParse.TryParseByFormat(ReadOnlySpan`1 input, ReadOnlySpan`1 format, TimeSpanStyles styles, TimeSpanResult\u0026 result)\r\n   at System.Globalization.TimeSpanParse.TryParseExactTimeSpan(ReadOnlySpan`1 input, ReadOnlySpan`1 format, IFormatProvider formatProvider, TimeSpanStyles styles, TimeSpanResult\u0026 result)\r\n   at System.TimeSpan.ParseExact(String input, String format, IFormatProvider formatProvider)\r\n   at Program.Main()\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nUsing LeftPad on the string...\n\n### Configuration\n\nFirst reproduced with\r\n.NET 6.0/x64/Windows 10 21H2\r\n\r\nBut can also be reproduced e.g. at dotnetfiddle with both .NET 6.0 and 4.7.2.\r\n\r\n\r\n\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edahauns\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-08T16:20:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EkGQR",
                                           "createdAt":  "2022-06-08T19:29:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e I\u0027d have assumed that the above should result in a valid output - am I wrong?\r\n\r\nYou are not wrong, but it is a little bit tricky for parsing or the current way we are parsing. Could you explain more why you are using formats like `hmm`? I mean what scenario do you want to parse such strings? ",
                                           "updatedAt":  "2022-06-08T19:29:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EkiaT",
                                           "createdAt":  "2022-06-08T21:23:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6duEg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mavaddat",
                                                                               "createdAt":  "2023-04-24T13:55:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dahauns",
                                           "body":  "Hey, it\u0027s not that I *want* to parse those strings...:)\r\n\r\nBut jokes aside, in the current case it\u0027s external scientific data, over whose schema I have no control over.\r\n\r\nIt\u0027s no big deal for me in practice - I\u0027m fine with doing it some other way (the aforementioned LeftPad, using another parsing method, splitting the string myself, etc.).\r\n\r\nI only think that if you decide not to support that pattern combination(s), the current behaviour shouldn\u0027t stay as it is: It contradicts the docs *and* it only fails with certain inputs.\r\nI guess it would be better if the method failed-fast (with e.g. an \"invalid pattern\" exception), and the documentation reflecting that.\r\n\r\nHm, and now that I\u0027ve played with it a bit more...it seems the method even allows some potentially undecidable patterns:\r\nI can do \r\n```\r\nTimeSpan.ParseExact(\"12200\",\"hms\",CultureInfo.InvariantCulture);\r\n```\r\nwhich gives me\r\n```\r\n12:20:00\r\n```\r\n...and I\u0027m still scratching my head whether that\u0027s a good idea :)\r\n\r\n",
                                           "updatedAt":  "2022-06-08T21:26:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ekiuv",
                                           "createdAt":  "2022-06-08T21:25:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dahauns",
                                           "body":  "Some further tests show that at least the current behaviour seems to be consistent with DateTime and DateTimeOffset.",
                                           "updatedAt":  "2022-06-08T21:25:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ek7d2",
                                           "createdAt":  "2022-06-09T00:05:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e I only think that if you decide not to support that pattern combination(s), the current behaviour shouldn\u0027t stay as it is: It contradicts the docs and it only fails with certain inputs.\r\n\r\nWhich part of the documentation is contracting the current behavior? \r\n\r\n\u003e TimeSpan.ParseExact(\"12200\",\"hms\",CultureInfo.InvariantCulture);\r\n\r\nwhen parsing something like that, each part of `h`, `m`, and `s` can be one or two digits. Therefore, it is tricky for the parser to decide what to do. In your original case `var ts= TimeSpan.ParseExact(\"820\",\"hmm\",CultureInfo.InvariantCulture);` it fails because of the same reason which how to decide each part of the time is one or two digits. \r\n\r\nParsing such format, we can consider doing it in the future, but for now it is not a priority to consider it. \r\n\r\n",
                                           "updatedAt":  "2022-06-09T00:05:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EpICp",
                                           "createdAt":  "2022-06-09T21:15:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dahauns",
                                           "body":  "\u003e Which part of the documentation is contracting the current behavior?\r\n\r\nThe docs for TimeSpan.ParseExcact(string,string,...) specify the behaviour as follows (relevant exceprts):\r\n\r\n_\"The [ParseExact](https://docs.microsoft.com/en-us/dotnet/api/system.timespan.parseexact?view=net-6.0) method parses the string representation of a time interval, which must be in the format defined by the format parameter, except that leading and trailing white-space characters are ignored. Because input must conform to the format of format exactly, you should always use exception handling when converting a string input by the user to a time interval.[..]\"_\r\n\r\n_\"The format parameter is a string that contains either a single standard format specifier, or one or more custom format specifiers that define the required format of input. For more information about valid format strings, see [Standard TimeSpan Format Strings](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings) and [Custom TimeSpan Format Strings](https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings).\"_\r\n\r\nWith the latter link further specifying (again relevant excerpts):\r\n\r\n_\"[..]A custom format string consists of one or more custom [TimeSpan](https://docs.microsoft.com/en-us/dotnet/api/system.timespan) format specifiers along with any number of literal characters. Any string that isn\u0027t a [Standard TimeSpan format string](https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-timespan-format-strings) is interpreted as a custom [TimeSpan](https://docs.microsoft.com/en-us/dotnet/api/system.timespan) format string.\"_\r\n\r\n\u003chtml\u003e\r\n\u003cbody\u003e\r\n\u003c!--StartFragment--\u003e\r\n\r\n\"h\", \"%h\" | _The number of whole hours in the time interval that aren\u0027t counted as part of days. Single-digit hours don\u0027t have a leading zero._\r\n-- | --\r\n\r\n\r\n\u003c!--EndFragment--\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n\u003chtml\u003e\r\n\u003cbody\u003e\r\n\u003c!--StartFragment--\u003e\r\n\r\n\"mm\" |_The number of whole minutes in the time interval that aren\u0027t included as part of hours or days. Single-digit minutes have a leading zero.More information: The \"mm\" custom format specifier._\r\n-- | --\r\n\r\n\r\n\u003c!--EndFragment--\u003e\r\n\u003c/body\u003e\r\n\u003c/html\u003e\r\n\r\nAt no point does the document specify that certain combinations of specifiers are invalid, or that certain combinations can lead to exceptions with valid input and should not be used.\r\n\r\n\r\n\r\n \r\n\u003e \u003e TimeSpan.ParseExact(\"12200\",\"hms\",CultureInfo.InvariantCulture);\r\n\u003e \r\n\u003e when parsing something like that, each part of `h`, `m`, and `s` can be one or two digits. Therefore, it is tricky for the parser to decide what to do. \r\n\r\nAgreed -  now that I think of it, \"undecidable\" was poor wording from me, \"ambiguous\" is more correct, I think. \r\n\r\n\u003eIn your original case `var ts= TimeSpan.ParseExact(\"820\",\"hmm\",CultureInfo.InvariantCulture);` it fails because of the same reason which how to decide each part of the time is one or two digits.\r\n\r\nAlthough in this case, the pattern isn\u0027t ambiguous: The two rightmost characters will always contain the minutes. But yeah, parser complexity would definitely rise...\r\n\r\n\u003e Parsing such format, we can consider doing it in the future, but for now it is not a priority to consider it.\r\n\r\nI understand - and it\u0027s only sensible not wanting to open the regex \"Pandora\u0027s Box\". :) \r\n\r\n\r\n",
                                           "updatedAt":  "2022-06-09T21:17:20Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "TimeSpan.ParseExact throws exception for non-padded custom format specifiers in compound format strings",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72064",
        "createdAt":  "2022-07-12T23:20:50Z",
        "number":  72064,
        "author":  "TheBrambleShark",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDUXdQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ohads-MSFT",
                                            "createdAt":  "2023-05-15T20:56:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "amis92",
                                            "createdAt":  "2023-10-24T14:02:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "migueloliveiradev",
                                            "createdAt":  "2023-11-22T19:56:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MineCake147E",
                                            "createdAt":  "2023-12-13T04:44:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SaifAqqad",
                                            "createdAt":  "2024-04-29T08:26:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "b1tzer0",
                                            "createdAt":  "2024-06-05T15:35:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-06-20T21:17:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mstgms",
                                            "createdAt":  "2024-06-23T20:45:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CyrilJad",
                                            "createdAt":  "2024-08-26T11:41:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "emphasis87",
                                            "createdAt":  "2024-09-03T12:01:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Reprevise",
                                            "createdAt":  "2025-02-13T23:49:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dreamescaper",
                                            "createdAt":  "2025-06-05T13:50:09Z"
                                        }
                                    ],
                          "totalCount":  12
                      },
        "updatedAt":  "2024-06-21T17:00:55Z",
        "body":  "### Background and motivation\r\n\r\nCurrently I am integrating with a JSON REST API which returns its time spans formatted as [ISO8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations). Parsing these values with the available TimeSpan type is not appropriate due to issues identified in [this comment](https://github.com/dotnet/runtime/issues/72064#issuecomment-1182640207).\r\n\r\n### API Proposal\r\n\r\n~~This proposal does not add any new APIs. It only modifies existing APIs.~~\r\n\r\n1. ~~Add constant \"o\" format specifier for `ParseExact()` and `TryParseExact()`. This is in reference to the same value used by DateTime and DateTimeOffset to serialize and deserialize ISO8601 timestamp formats.~~\r\n2. ~~Add support for parsing years and months using `y`, `yy`, `yyyy`, `yyyyy`, and `M`, `MM` respectively.~~\r\n3. ~~Optionally add support for `Parse()` and `TryParse()` if this proves not to be too complicated.~~\r\n\r\nCreate a new type, `Duration`, which is able to adequately represent ISO8601 Duations. I will describe the new type with an interface definition so that implementation details can be described at a later date. The type itself will likely not implement such an interface seeing as `ITimeSpan` and `IDateTime` do not exist.\r\n\r\n```cs\r\npublic interface IDuration\r\n{\r\n    // The ISO format does not allow for decimals, so the int type is used.\r\n    // Making the type immutable has its advantages. Modifications can happen through a the with keyword for the record struct type or through AddX() methods.\r\n\r\n    int Years { get; init; }\r\n    int Months { get; init; }\r\n    int Days { get; init; }\r\n    int Hours { get; init; }\r\n    int Minutes { get; init; }\r\n    long Seconds { get; init; }\r\n    long Ticks { get; init; }\r\n\r\n    // A default, zeroed instance of a duration.\r\n    public static Duration Zero { get; }\r\n\r\n    public Duration Parse(string iso8601duration);\r\n    public bool TryParse(string iso8601duration, out Duration duration);\r\n\r\n    // Default parameterless constructor, record constructor for properties, and cloning constructor should be all that\u0027s needed. They will not be described here.\r\n\r\n    // As the duration struct is immutable, these helper methods exist to perform mathematical operations.\r\n    // Static variations accepting two Durations as well as the corresponding operators should be implemented.\r\n    public Duration Add(Duration other);\r\n    public Duration Subtract(Duration other);\r\n\r\n    // Returns an equivalent but not necessarily equal duration based on the overall ticks value.\r\n    // For instance, a duration with a time of 25 hours would be normalized to a time of 1 day and 1 hour.\r\n    // The old duration and new duration would be equivalent but would not be equal.\r\n    // This method functions identically to Period.Normalize() from NodaTime.\r\n    public Duration Normalize();\r\n\r\n    // A static helper which returns a duration created from the corresponding number of units.\r\n    // A FromX() method should be created for each of the various \r\n    public static Duration FromX(int x);\r\n\r\n    // Sometimes this conversion can be useful. Add an explicit conversion operator as well.\r\n    public static Duration FromTimeSpan(TimeSpan timeSpan);\r\n    \r\n    // Equals() should compare two durations based on their ticks, not their actual values. If actual value comparison is important, the `is` keyword can be used.\r\n\r\n    // The ToString() method should return the following format: \"P#Y#M#DT#H#M#S\", where the # represents a particular integer value.\r\n}\r\n```\r\n\r\nI think I got everything, but please do let me know if there is anything I should add to the proposal.\r\n\r\nI do have concerns over the name Duration. I feel it makes the most sense from the perspective of representing an ISO8601 Duration, however this name conflicts with the NodaTime library in a way that may cause a rather painful transition for developers seeking to use the BCL type rather than NodaTime.Period. NodaTime.Duration represents a different concept, and so having references to both System.Duration and NodaTime.Duration may create ambiguity and headaches.\r\n\r\nNormally I would not take the names used by third party libraries into consideration, however with NodaTime being the most popular time library, I feel that willfully ignoring its existence and forging ahead would be foolhardy and lead to a lot of very annoyed developers. As such, I am seeking suggestions for alternative names to move away from both Period and Duration, even if such a name is simply `ISO8601Duration`.\r\n\r\n### API Usage\r\n\r\n```csharp\r\nstring duration = \"P3Y6M4DT99H30M5S\";\r\nvar duration = Duration.Parse(duration); // 3 years, 6 months, 0 Weeks, 4 days, 99 hours, 30 minutes, 5 seconds.\r\nvar normalized = duration.Normalize(); // 3 years, 6 months, 0 weeks, 8 days, 3 hours, 30 minutes, 5 seconds\r\n```\r\n\r\n### Alternative Designs\r\n\r\nCurrently, a sort-of workaround is to use `XmlConvert.ToTimeSpan(string duration)` and `XmlConvert.ToString(TimeSpan duration)`, however this lives in the `System.Xml` namespace and usually makes little sense to add, especially when working with JSON. Additionally, as pointed out by @tthiery, this does not function with parsing months or years, so it\u0027s not to be used as a drop-in replacement for this proposed type.\r\n\r\n### Risks\r\n\r\n_No response_\r\n\r\n### Honorable Mentions\r\n#28942 is specifically for JSON parsing and these issues will likely overlap. Their issue is specifically DateTime and DateTimeOffset.\r\n\r\nEdit: Restructured proposal to create new type rather than update TimeSpan.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgh-yXA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5GfOir",
                                           "createdAt":  "2022-07-12T23:20:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-07-12T23:20:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GfTPL",
                                           "createdAt":  "2022-07-13T00:03:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nCurrently I am integrating with a JSON REST API which returns its timespans formatted as [ISO8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations). Attempting to parse these values with `TimeSpan.Parse()` is currently not available. Parsing with `TimeSpan.ParseExact()` may work with a custom formatting string, but I have not had any luck and currently, no support for parsing groups larger than days exists.\r\n\r\n### API Proposal\r\n\r\nThis proposal does not add any new APIs. It only modifies existing APIs.\r\n\r\n1. Add constant \"o\" format specifier for `ParseExact()` and `TryParseExact()`. This is in reference to the same value used by DateTime and DateTimeOffset to serialize and deserialize ISO8601 timestamp formats.\r\n2. Add support for parsing years and months using `y`, `yy`, `yyyy`, `yyyyy`, and `M`, `MM` respectively.\r\n3. Optionally add support for `Parse()` and `TryParse()` if this proves not to be too complicated.\r\n\r\n### API Usage\r\n\r\n```csharp\r\nstring duration = \"P3Y6M4DT12H30M5S\";\r\nvar timespan = TimeSpan.ParseExact(duration, \"o\", null); // 3 years, 6 months, 4 days, 12 hours, 30 minutes, 5 seconds.\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nCurrently a viable workaround is to use `XmlConvert.ToTimeSpan(string duration)` and `XmlConvert.ToString(TimeSpan duration)`, however this lives in the `System.Xml` namespace and usually makes little sense to add, especially when working with JSON.\r\n\r\n### Risks\r\n\r\n_No response_\r\n\r\n### Honorable Mentions\r\n#28942 is specifically for JSON parsing and these issues will likely overlap. Their issue is specifically DateTime and DateTimeOffset.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eFoxtrek64\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-13T00:03:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GfahP",
                                           "createdAt":  "2022-07-13T00:47:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "Being able to parse into a `TimeSpan` isn\u0027t going to solve any problems, it\u0027s immediately going to give you a new one: For any field larger than \"Day\", durations are only relative.  \"Month\", for instance, may be equivalent to 28, 29, 30, or 31 days.  You cannot reliably translate this to a `TimeSpan` and then add it to a `DateTime`/`DateTimeOffset`, you\u0027re going to be dealing with incorrect values.\r\n\r\nWe\u0027d need to create a type that\u0027s the equivalent of the [`Period`](https://nodatime.org/3.1.x/api/NodaTime.Period.html) class from NodaTime/JSR310 to be able to actually handle this.\r\n\u003chr /\u003e\r\n\r\nAs a side note, if you\u0027re actually dealing with date/time problems like this, you\u0027re probably better advised to just use NodaTime anyways, as there are a number of shortcomings in the BCL that it addresses (although not as many as there used to be).\r\n\r\n\u003chr /\u003e\r\n\r\n Actually, technically \"Day\" is sometimes relative too, about once every 18 months, due to Leap Seconds.  Although most APIs I\u0027m aware of ignore them anyways.",
                                           "updatedAt":  "2022-07-13T00:47:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQCt3",
                                           "createdAt":  "2022-08-26T20:59:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "CC. @tarekgh, is this something we should look at providing?",
                                           "updatedAt":  "2022-08-26T20:59:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQD8a",
                                           "createdAt":  "2022-08-26T21:04:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheBrambleShark",
                                           "body":  "With the shortcomings @Clockwork-Muse brought up, if you guys think modifying this proposal to instead create a new `Duration` type is a better answer, I can always update the proposal. That could potentially resolve some of the issues, but of course we run into that training issue of getting people to move from TimeSpan to Duration, same as getting people to move from DateTime to DateTimeOffset.",
                                           "updatedAt":  "2022-08-26T21:04:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQPeN",
                                           "createdAt":  "2022-08-26T21:56:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I agree with @Clockwork-Muse, cannot parse duration format to a TimeSpan. We may consider supporting `duration` by introducing a new type. We just want to see a demand for that, and we can consider it. ",
                                           "updatedAt":  "2022-08-26T21:56:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQWO9",
                                           "createdAt":  "2022-08-26T22:47:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7XQTg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "VinzSpring",
                                                                               "createdAt":  "2023-05-09T13:34:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "TheBrambleShark",
                                           "body":  "\u003e I agree with @Clockwork-Muse, cannot parse duration format to a TimeSpan. We may consider supporting `duration` by introducing a new type. We just want to see a demand for that, and we can consider it.\r\n\r\nI\u0027ll go ahead and update the proposal to recommend the creation of a new type. This will help us better gauge demand.",
                                           "updatedAt":  "2022-08-26T22:47:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5L6d1-",
                                           "createdAt":  "2022-10-10T17:23:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCtlrGQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eiriktsarpalis",
                                                                               "createdAt":  "2022-10-10T17:32:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tthiery",
                                           "body":  "Please remove `System.Xml.XmlConvert.ToTimeSpan` as a *viable* design. It does only support normalized to days which is highly inaccurate when working with months or years. The parsed timespan is generally not accepted as a suitable (see #28862).\r\n\r\n@eiriktsarpalis The community filed already an API Proposal suitable for the issue #28862 😀.\r\n\r\n@Foxtrek64 thanks ;) saved me two hours",
                                           "updatedAt":  "2022-10-10T17:28:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cT2Gr",
                                           "createdAt":  "2023-05-15T22:36:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC71D8g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "chrisoverzero",
                                                                               "createdAt":  "2023-05-16T16:46:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "oising",
                                           "body":  "\u003e I agree with @Clockwork-Muse, cannot parse duration format to a TimeSpan. We may consider supporting `duration` by introducing a new type. We just want to see a demand for that, and we can consider it.\r\n\r\nIs there anything particularly wrong about forcing the caller to provide an anchor/base datetime to give a context for parsing the duration into a TimeSpan? This would at least force developers to acknowledge the ambiguities, while also giving them what they ask for. In any other platforms, the anchor/base is implicit, so making it explicit here seems logical [to me.] \r\n\r\ni.e. `TimeSpan.Parse(string is8601duration, DateTimeOffset base)`\r\n\r\nIn short, people are going to use XmlConvert and be forced to handle months/years themselves, and invariably make mistakes. Let\u0027s help people fall into the pit of success.\r\n",
                                           "updatedAt":  "2023-05-15T22:36:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lRXvF",
                                           "createdAt":  "2023-08-30T12:15:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODT68Yg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TheBrambleShark",
                                                                               "createdAt":  "2023-08-30T14:06:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "migueloliveiradev",
                                                                               "createdAt":  "2023-11-22T19:58:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "saoc90",
                                                                               "createdAt":  "2024-01-24T15:08:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "WhatzGames",
                                           "body":  "Should it be considered to add some new new operators for working with TimeOnly and DateOnly?\r\n\r\n```csharp\r\npublic static TimeOnly operator +(TimeOnly left, Duration right);\r\npublic static TimeOnly operator -(TimeOnly left, Duration right);\r\n\r\npublic static DateOnly operator +(DateOnly left, Duration right);\r\npublic static DateOnly operator -(DateOnly left, Duration right);\r\n\r\npublic static Duration operator -(DateOnly left, DateOnly right);\r\npublic static Duration operator -(TimeOnly left, TimeOnly right);\r\n```\r\n\r\nThese were the ones that would make sense to me.\r\nCalculating differences between Times or Dates.\r\nAdding a Duration to a `DateOnly` would only add everything from Days, Weeks, Months and Years.\r\nThe `TimeOnly` then only adds the time components and would overflow back to zero",
                                           "updatedAt":  "2023-08-30T12:15:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59BfUm",
                                           "createdAt":  "2024-05-07T06:27:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mstgms",
                                           "body":  "Is there any progress? We also need can parse duration values which sents from clients in jsons like \"PT7H0.301S\" on our Financial APIs. \r\n+@muazcoban",
                                           "updatedAt":  "2024-05-07T06:27:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59GQ27",
                                           "createdAt":  "2024-05-07T15:56:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "We\u0027re currently occupied with higher-priority tasks. We\u0027ll address this at a later time. Thank you!",
                                           "updatedAt":  "2024-05-07T15:56:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59GVxY",
                                           "createdAt":  "2024-05-07T16:06:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODhBgKQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mstgms",
                                                                               "createdAt":  "2024-05-07T21:37:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "@mstgms - especially if you\u0027re dealing with many of the scenarios where date-based durations make sense, you may find the overall API from [NodaTime](https://nodatime.org/) more ergonomic for many tasks, which also includes a [`Period` type](https://nodatime.org/3.1.x/api/NodaTime.Period.html).",
                                           "updatedAt":  "2024-05-07T16:06:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CGG4T",
                                           "createdAt":  "2024-06-21T12:15:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "When/if this is implemented, will the framework start adding overloads to timeout-related methods that take a `Duration` instead of a `TimeSpan`? Any other areas in the framework where having this type would be better than a `TimeSpan` currently?\r\n\r\nWould this also potentially deprecate `TimeSpan` over time? Is there any specific reason someone would _not_ use a `Duration` instead of a `TimeSpan` in their domains?",
                                           "updatedAt":  "2024-06-21T12:15:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CH7Jc",
                                           "createdAt":  "2024-06-21T17:00:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODmkIHg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-06-21T17:23:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e When/if this is implemented, will the framework start adding overloads to timeout-related methods that take a Duration instead of a TimeSpan? Any other areas in the framework where having this type would be better than a TimeSpan currently?\r\n\r\nThis depends on if it makes sense to have any API accept duration. That needs to look at case by case to decide that.\r\n\r\n\u003e Would this also potentially deprecate TimeSpan over time? Is there any specific reason someone would not use a Duration instead of a TimeSpan in their domains?\r\n\r\nI don\u0027t think we need to deprecate TimeSpan at all. TimeSpan and Duration are needed for different purposes. You may look at the blog https://thecontentauthority.com/blog/span-vs-duration describing the difference between the time span and the duration. \r\n\r\n",
                                           "updatedAt":  "2024-06-21T17:00:55Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "[API Proposal]: BCL Type to Represent ISO8601 Durations",
        "labels":  [
                       "api-suggestion",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73813",
        "createdAt":  "2022-08-11T20:47:39Z",
        "number":  73813,
        "author":  "jozkee",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-22T02:07:42Z",
        "body":  "From @pedrobsaila https://github.com/dotnet/runtime/pull/72258#issuecomment-1199985566:\r\n\r\n\u003e libraries\\System.Private.CoreLib\\src\\System\\TimeZoneInfo.Unix.NonAndroid.cs : seems to handle case where link is not resolved. I\u0027m not sure whether I should validate or not.\r\n\u003e \r\n\u003e https://github.com/dotnet/runtime/blob/a5f3676cc71e176084f0f7f1f6beeecd86fbeafc/src/libraries/System.Private.CoreLib/src/System/TimeZoneInfo.Unix.NonAndroid.cs#L359-L379",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSGXdSQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5IRPBF",
                                           "createdAt":  "2022-08-11T20:47:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-08-11T20:47:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IRPD5",
                                           "createdAt":  "2022-08-11T20:47:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFrom @pedrobsaila https://github.com/dotnet/runtime/pull/72258#issuecomment-1199985566:\r\n\r\n\u003e libraries\\System.Private.CoreLib\\src\\System\\TimeZoneInfo.Unix.NonAndroid.cs : seems to handle case where link is not resolved. I\u0027m not sure whether I should validate or not.\r\n\u003e \r\n\u003e https://github.com/dotnet/runtime/blob/a5f3676cc71e176084f0f7f1f6beeecd86fbeafc/src/libraries/System.Private.CoreLib/src/System/TimeZoneInfo.Unix.NonAndroid.cs#L359-L379\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJozkee\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-11T20:47:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IZd1J",
                                           "createdAt":  "2022-08-15T05:32:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "@Jozkee I\u0027m moving this to Future, but if it\u0027s fixed during RC2 we could consider porting the fix into that branch.",
                                           "updatedAt":  "2022-08-15T05:32:40Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "TimeZoneInfo: Determine readlink result whether should be validated or not ",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75275",
        "createdAt":  "2022-09-08T15:00:01Z",
        "number":  75275,
        "author":  "SergeyRazmyslov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-03T21:16:20Z",
        "body":  "### Description\n\nAccording to [official documentation](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-6.0#remarks) the passed time zone identifier argument in method `TimeZoneInfo.FindSystemTimeZoneById()` is case-insensitive on Linux. There is no issue on Windows.\r\n\r\nFor example, `var timezoneInfo = TimeZoneInfo.FindSystemTimeZoneById(\"Central Standard Time\");` works correctly on Linux, but `var timezoneInfo = TimeZoneInfo.FindSystemTimeZoneById(\"CENTRAL STANDARD TIME\");` throws exception.\n\n### Reproduction Steps\n\nCall the `FindSystemTimeZoneById()` with upper-case time zone ID:\r\n````\r\nvar timezoneInfo = TimeZoneInfo.FindSystemTimeZoneById(\"CENTRAL STANDARD TIME\");\r\n````\n\n### Expected behavior\n\nCorrect instance of `TimeZoneInfo` for requested time zone ID.\n\n### Actual behavior\n\n```\r\nUnhandled exception. System.TimeZoneNotFoundException: The time zone ID \u0027CENTRAL STANDARD TIME\u0027 was not found on the local computer.\r\n ---\u003e System.IO.FileNotFoundException: Could not find file \u0027/usr/share/zoneinfo/CENTRAL STANDARD TIME\u0027.\r\nFile name: \u0027/usr/share/zoneinfo/CENTRAL STANDARD TIME\u0027\r\n   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.FileStreamHelpers.ChooseStrategy(FileStream fileStream, String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.File.ReadAllBytes(String path)\r\n   at System.TimeZoneInfo.TryGetTimeZoneFromLocalMachineCore(String id, TimeZoneInfo\u0026 value, Exception\u0026 e)\r\n   --- End of inner exception stack trace ---\r\n   at System.TimeZoneInfo.FindSystemTimeZoneById(String id)\r\n   at TimezoneTestApp.Program.Main() in /home/sergei/projects/timezones/Program.cs:line 13\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n```\r\n$ dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.400\r\n Commit:    7771abd614\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  20.04\r\n OS Platform: Linux\r\n RID:         ubuntu.20.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/6.0.400/\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nHost:\r\n  Version:      6.0.8\r\n  Architecture: x64\r\n  Commit:       55fb7ef977\r\n\r\n.NET SDKs installed:\r\n  6.0.400 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.8 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet-download\r\n\r\nLearn about .NET Runtimes and SDKs:\r\n  https://aka.ms/dotnet/runtimes-sdk-info\r\n```\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYzirWw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5J9bJc",
                                           "createdAt":  "2022-09-08T15:00:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-09-08T15:00:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J9cTQ",
                                           "createdAt":  "2022-09-08T15:03:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nAccording to [official documentation](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-6.0#remarks) the passed time zone identifier argument in method `TimeZoneInfo.FindSystemTimeZoneById()` is case-insensitive on Linux. There is no issue on Windows.\r\n\r\nFor example, `var timezoneInfo = TimeZoneInfo.FindSystemTimeZoneById(\"Central Standard Time\");` works correctly on Linux, but `var timezoneInfo = TimeZoneInfo.FindSystemTimeZoneById(\"CENTRAL STANDARD TIME\");` throws exception.\n\n### Reproduction Steps\n\nCall the `FindSystemTimeZoneById()` with upper-case time zone ID:\r\n````\r\nvar timezoneInfo = TimeZoneInfo.FindSystemTimeZoneById(\"CENTRAL STANDARD TIME\");\r\n````\n\n### Expected behavior\n\nCorrect instance of `TimeZoneInfo` for requested time zone ID.\n\n### Actual behavior\n\n```\r\nUnhandled exception. System.TimeZoneNotFoundException: The time zone ID \u0027CENTRAL STANDARD TIME\u0027 was not found on the local computer.\r\n ---\u003e System.IO.FileNotFoundException: Could not find file \u0027/usr/share/zoneinfo/CENTRAL STANDARD TIME\u0027.\r\nFile name: \u0027/usr/share/zoneinfo/CENTRAL STANDARD TIME\u0027\r\n   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.FileStreamHelpers.ChooseStrategy(FileStream fileStream, String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.File.ReadAllBytes(String path)\r\n   at System.TimeZoneInfo.TryGetTimeZoneFromLocalMachineCore(String id, TimeZoneInfo\u0026 value, Exception\u0026 e)\r\n   --- End of inner exception stack trace ---\r\n   at System.TimeZoneInfo.FindSystemTimeZoneById(String id)\r\n   at TimezoneTestApp.Program.Main() in /home/sergei/projects/timezones/Program.cs:line 13\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n```\r\n$ dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.400\r\n Commit:    7771abd614\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  20.04\r\n OS Platform: Linux\r\n RID:         ubuntu.20.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/6.0.400/\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nHost:\r\n  Version:      6.0.8\r\n  Architecture: x64\r\n  Commit:       55fb7ef977\r\n\r\n.NET SDKs installed:\r\n  6.0.400 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.8 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet-download\r\n\r\nLearn about .NET Runtimes and SDKs:\r\n  https://aka.ms/dotnet/runtimes-sdk-info\r\n```\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eSergeyRazmyslov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-08T15:03:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J9x-Y",
                                           "createdAt":  "2022-09-08T16:14:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Are IDs in the TZ info specified to be case sensitive? If so perhaps we do not want to match insensitively.",
                                           "updatedAt":  "2022-09-08T16:14:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ke-q7",
                                           "createdAt":  "2022-09-16T17:45:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nAccording to [official documentation](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-6.0#remarks) the passed time zone identifier argument in method `TimeZoneInfo.FindSystemTimeZoneById()` is case-insensitive on Linux. There is no issue on Windows.\r\n\r\nFor example, `var timezoneInfo = TimeZoneInfo.FindSystemTimeZoneById(\"Central Standard Time\");` works correctly on Linux, but `var timezoneInfo = TimeZoneInfo.FindSystemTimeZoneById(\"CENTRAL STANDARD TIME\");` throws exception.\n\n### Reproduction Steps\n\nCall the `FindSystemTimeZoneById()` with upper-case time zone ID:\r\n````\r\nvar timezoneInfo = TimeZoneInfo.FindSystemTimeZoneById(\"CENTRAL STANDARD TIME\");\r\n````\n\n### Expected behavior\n\nCorrect instance of `TimeZoneInfo` for requested time zone ID.\n\n### Actual behavior\n\n```\r\nUnhandled exception. System.TimeZoneNotFoundException: The time zone ID \u0027CENTRAL STANDARD TIME\u0027 was not found on the local computer.\r\n ---\u003e System.IO.FileNotFoundException: Could not find file \u0027/usr/share/zoneinfo/CENTRAL STANDARD TIME\u0027.\r\nFile name: \u0027/usr/share/zoneinfo/CENTRAL STANDARD TIME\u0027\r\n   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.FileStreamHelpers.ChooseStrategy(FileStream fileStream, String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.File.ReadAllBytes(String path)\r\n   at System.TimeZoneInfo.TryGetTimeZoneFromLocalMachineCore(String id, TimeZoneInfo\u0026 value, Exception\u0026 e)\r\n   --- End of inner exception stack trace ---\r\n   at System.TimeZoneInfo.FindSystemTimeZoneById(String id)\r\n   at TimezoneTestApp.Program.Main() in /home/sergei/projects/timezones/Program.cs:line 13\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n```\r\n$ dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.400\r\n Commit:    7771abd614\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  20.04\r\n OS Platform: Linux\r\n RID:         ubuntu.20.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/6.0.400/\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nHost:\r\n  Version:      6.0.8\r\n  Architecture: x64\r\n  Commit:       55fb7ef977\r\n\r\n.NET SDKs installed:\r\n  6.0.400 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.8 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet-download\r\n\r\nLearn about .NET Runtimes and SDKs:\r\n  https://aka.ms/dotnet/runtimes-sdk-info\r\n```\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eSergeyRazmyslov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-16T17:45:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KfBz9",
                                           "createdAt":  "2022-09-16T17:56:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nAccording to [official documentation](https://docs.microsoft.com/en-us/dotnet/api/system.timezoneinfo.findsystemtimezonebyid?view=net-6.0#remarks) the passed time zone identifier argument in method `TimeZoneInfo.FindSystemTimeZoneById()` is case-insensitive on Linux. There is no issue on Windows.\r\n\r\nFor example, `var timezoneInfo = TimeZoneInfo.FindSystemTimeZoneById(\"Central Standard Time\");` works correctly on Linux, but `var timezoneInfo = TimeZoneInfo.FindSystemTimeZoneById(\"CENTRAL STANDARD TIME\");` throws exception.\n\n### Reproduction Steps\n\nCall the `FindSystemTimeZoneById()` with upper-case time zone ID:\r\n````\r\nvar timezoneInfo = TimeZoneInfo.FindSystemTimeZoneById(\"CENTRAL STANDARD TIME\");\r\n````\n\n### Expected behavior\n\nCorrect instance of `TimeZoneInfo` for requested time zone ID.\n\n### Actual behavior\n\n```\r\nUnhandled exception. System.TimeZoneNotFoundException: The time zone ID \u0027CENTRAL STANDARD TIME\u0027 was not found on the local computer.\r\n ---\u003e System.IO.FileNotFoundException: Could not find file \u0027/usr/share/zoneinfo/CENTRAL STANDARD TIME\u0027.\r\nFile name: \u0027/usr/share/zoneinfo/CENTRAL STANDARD TIME\u0027\r\n   at Interop.ThrowExceptionForIoErrno(ErrorInfo errorInfo, String path, Boolean isDirectory, Func`2 errorRewriter)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.Strategies.FileStreamHelpers.ChooseStrategy(FileStream fileStream, String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, Int64 preallocationSize)\r\n   at System.IO.File.ReadAllBytes(String path)\r\n   at System.TimeZoneInfo.TryGetTimeZoneFromLocalMachineCore(String id, TimeZoneInfo\u0026 value, Exception\u0026 e)\r\n   --- End of inner exception stack trace ---\r\n   at System.TimeZoneInfo.FindSystemTimeZoneById(String id)\r\n   at TimezoneTestApp.Program.Main() in /home/sergei/projects/timezones/Program.cs:line 13\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n```\r\n$ dotnet --info\r\n.NET SDK (reflecting any global.json):\r\n Version:   6.0.400\r\n Commit:    7771abd614\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  20.04\r\n OS Platform: Linux\r\n RID:         ubuntu.20.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/6.0.400/\r\n\r\nglobal.json file:\r\n  Not found\r\n\r\nHost:\r\n  Version:      6.0.8\r\n  Architecture: x64\r\n  Commit:       55fb7ef977\r\n\r\n.NET SDKs installed:\r\n  6.0.400 [/usr/share/dotnet/sdk]\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 6.0.8 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 6.0.8 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nDownload .NET:\r\n  https://aka.ms/dotnet-download\r\n\r\nLearn about .NET Runtimes and SDKs:\r\n  https://aka.ms/dotnet/runtimes-sdk-info\r\n```\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eSergeyRazmyslov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `needs-further-triage`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-16T17:56:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KfSPg",
                                           "createdAt":  "2022-09-16T19:12:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Are IDs in the TZ info specified to be case sensitive? If so perhaps we do not want to match insensitively.\r\n\r\nThis is a good question but needs a more detailed answer. \r\n\r\nIn .NET Framework when we support Windows only, we allowed using case-insensitive Ids. The reason is zone Ids are stored in the registry and we can read it using case-insensitive operation. Also, we cache the mapping from Ids to the time zone object using a case-insensitive dictionary. \r\nIn .NET Core, when we started supporting other platforms the case insensitivity was partially working. I mean if you try to call `TimeZoneInfo.FindSystemTimeZoneById` early before enumerating all time zone on the system using `TimeZoneInfo.GetSystemTimeZones()`  and using not well case formed Id, we\u0027ll throw exception. The reason is because the zone data is stored as files on Linux/MacOS and we try to search for such file to get the zone data. As such OSs have case-sensitive file system, we\u0027ll fail to find it. But if calling `TimeZoneInfo.GetSystemTimeZones()` first, we enumerate all zone files and cache the result in the case-insensitive dictionary. This will make `TimeZoneInfo.FindSystemTimeZoneById` work even with not well case formed Ids. \r\n\r\nNow as we have started to support creating zone objects using IANA ids when running on Windows and creating zone objects using Windows Ids when running on Linux/MacOS, we are depending on the ICU library for the Id conversion. ICU is case-sensitive and therefore we fail the case mentioned in this issue. \r\n\r\nThere is no standardization for zone Ids case sensitivity, but most platforms are case-sensitive. for example, Java 8 started to be case sensitive while before that it was case-insensitive as mentioned in the [stackoverflow post](https://stackoverflow.com/questions/33741934/java-timezone-ids-are-case-sensitive-or-platform-dependent#:~:text=FYI%20%2D%20In%20the%20general%20case,be%20treated%20as%20case%20sensitive.).\r\n\r\nMy thinking, usually users pick Ids from some source which always be in well-formed casing shape. Using not well-formed casing Ids is not the norm. We may suggest and update the docs to ask users to ensure using well-formed Ids. Otherwise, we\u0027ll need to support but it will come with some perf cost. Here is a simple workaround can be used by the users who want to work with case insensitive Ids:\r\n\r\n```C#\r\n        private static readonly IEnumerable\u003cTimeZoneInfo\u003e s_timeZonesList = TimeZoneInfo.GetSystemTimeZones();\r\n\r\n        public static TimeZoneInfo? GetTimeZoneInfoUsingCaseInsensitiveId(string zoneId)\r\n        {\r\n            foreach (TimeZoneInfo tz in s_timeZonesList)\r\n            {\r\n                string? id;\r\n\r\n                if (tz.Id.Equals(zoneId, StringComparison.OrdinalIgnoreCase) ||\r\n                    ((tz.HasIanaId ? TimeZoneInfo.TryConvertIanaIdToWindowsId(tz.Id, out id) : TimeZoneInfo.TryConvertWindowsIdToIanaId(tz.Id, out id)) \u0026\u0026\r\n                    id.Equals(zoneId, StringComparison.OrdinalIgnoreCase)))\r\n                {\r\n                    return tz;\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n```\r\n",
                                           "updatedAt":  "2022-09-16T19:16:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kfajp",
                                           "createdAt":  "2022-09-16T19:54:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e My thinking, usually users pick Ids from some source which always be in well-formed casing shape.\r\n\r\nUsually, harvested from the available tz files.\r\n\r\n\u003e Here is a simple workaround...\r\n\r\n... if the application loaded the zones on startup because of the enumeration, wouldn\u0027t that mean that `TimeZoneInfo.FindSystemTimeZoneById()` would have them cached in a case-insensitive format?",
                                           "updatedAt":  "2022-09-16T19:54:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kfthe",
                                           "createdAt":  "2022-09-16T21:20:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e ... if the application loaded the zones on startup because of the enumeration, wouldn\u0027t that mean that TimeZoneInfo.FindSystemTimeZoneById() would have them cached in a case-insensitive format?\r\n\r\nYes, but first the enumeration is expensive, but we cache it. Second, when requesting `TimeZoneInfo.FindSystemTimeZoneById` passing IANA id on Windows or passing Windows Id on Linux, this will not work if using case-insensitive format because at that time we call ICU for that, and ICU not support case-insensitive Ids. ",
                                           "updatedAt":  "2022-09-17T00:26:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jOKtb",
                                           "createdAt":  "2023-08-03T21:16:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "osexpert",
                                           "body":  "What is weird is that the Id you ask for the first time is the Id you get back in the cached TimeZoneInfo (Win10\\Net7):\r\n```\r\nvar tz = TimeZoneInfo.FindSystemTimeZoneById(\"central STANDARD time\");\r\n// tz.Id = \"central STANDARD time\"\r\ntz = TimeZoneInfo.FindSystemTimeZoneById(\"central standard time\");\r\n// tz.Id = \"central STANDARD time\"\r\ntz = TimeZoneInfo.FindSystemTimeZoneById(\"CENTRAL STANDARD TIME\");\r\n// tz.Id = \"central STANDARD time\"\r\n```\r\nI guess it make sense, but its kind of fishy and not deterministic. It could be possible to \"poison\" the cache if you are the first one to ask for time zones and you use funny casing:-D",
                                           "updatedAt":  "2023-08-03T21:16:20Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "TimeZoneInfo.FindSystemTimeZoneById() is case-sensitive on Linux",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75400",
        "createdAt":  "2022-09-10T21:59:54Z",
        "number":  75400,
        "author":  "tarekgh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAWaQA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danmoseley",
                                            "createdAt":  "2022-09-10T23:14:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ufcpp",
                                            "createdAt":  "2022-09-11T01:35:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "huoyaoyuan",
                                            "createdAt":  "2022-09-11T02:51:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2022-09-11T08:10:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattjohnsonpint",
                                            "createdAt":  "2022-09-12T21:17:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "trympet",
                                            "createdAt":  "2023-01-19T17:29:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Arithmomaniac",
                                            "createdAt":  "2023-01-23T14:44:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Frulfump",
                                            "createdAt":  "2023-07-16T10:21:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "svenesters",
                                            "createdAt":  "2024-02-02T00:05:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RushuiGuan",
                                            "createdAt":  "2024-03-07T21:06:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Adhara3",
                                            "createdAt":  "2024-06-18T13:20:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rgroenewoudt",
                                            "createdAt":  "2024-06-20T20:40:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wjrogers",
                                            "createdAt":  "2024-07-31T15:43:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lilinus",
                                            "createdAt":  "2024-08-08T13:21:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "daviddotcs",
                                            "createdAt":  "2024-08-14T04:04:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yutakamurata-eizo",
                                            "createdAt":  "2024-09-03T23:51:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marpro200",
                                            "createdAt":  "2024-11-04T13:23:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kpietraszko",
                                            "createdAt":  "2025-03-21T08:46:09Z"
                                        }
                                    ],
                          "totalCount":  18
                      },
        "updatedAt":  "2022-11-22T01:34:00Z",
        "body":  "The `DateTimeOffset` implicit operator internally convert the input `DateTime` to `DateTimeOffset`. This conversion will depend on the `DateTime.Kind` value. If the value is `Unspecified` or `Local`, will automatically calculate the offset between the current local time zone and UTC and use this offset for creating `DateTimeOffset`. If the `Kind` value is Utc, will use 0 offset to create the `DateTimeOffset` object.\r\n\r\n```C#\r\npublic static implicit operator DateTimeOffset(DateTime dateTime)\r\n```\r\n\r\nMost users unaware about this and not paying much attention when this implicit operator get used and can get a surprised result. The issue can be much worse if this operator used with the time zone APIs as described in https://github.com/dotnet/runtime/issues/32954\r\n\r\nThe request here is to have analyzer detect the usage of this implicit operator and produce a `suggestion` to the user. \r\n\r\nSomething like: \r\n\r\n```\r\nUsing DateTimeOffset(DateTime dateTime) implicit operator can produce a surprising result depending on the Kind value stored in the input DateTime. Consider using the explicit DateTimeOffset constructor that takes the dateTime.Ticks and the desired offset.\r\n```\r\n\r\nOr any better wording.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOShiOSA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5KE8mh",
                                           "createdAt":  "2022-09-10T22:00:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe `DateTimeOffset` implicit operator internally convert the input `DateTime` to `DateTimeOffset`. This conversion will depend on the `DateTime.Kind` value. If the value is `Unspecified` or `Local`, will automatically calculate the offset between the current local time zone and UTC and use this offset for creating `DateTimeOffset`. If the `Kind` value is Utc, will use 0 offset to create the `DateTimeOffset` object.\r\n\r\n```C#\r\npublic static implicit operator DateTimeOffset(DateTime dateTime)\r\n```\r\n\r\nMost users unaware about this and not paying much attention when this implicit operator get used and can get a surprised result. The issue can be much worse if this operator used with the time zone APIs as described in https://github.com/dotnet/runtime/issues/32954\r\n\r\nThe request here is to have analyzer detect the usage of this implicit operator and produce a `suggestion` to the user. \r\n\r\nSomething like: \r\n\r\n```\r\nUsing DateTimeOffset(DateTime dateTime) implicit operator can produce a surprising result depending on the Kind value stored in the input DateTime. Consider using the explicit DateTimeOffset constructor that takes the dateTime.Ticks and the desired offset.\r\n```\r\n\r\nOr any better wording.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etarekgh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-10T22:00:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KFQrb",
                                           "createdAt":  "2022-09-11T05:51:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Will it warn about an explicit cast?\n\n```C#\nDateTime dt = default;\nDateTimeOffset dto = (DateTimeOffset)dt;\n```\n\nI would slightly prefer not warning about that. Then though, it would also have to suppress any suggestion about removing the cast.",
                                           "updatedAt":  "2022-09-11T05:51:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KFtVC",
                                           "createdAt":  "2022-09-11T17:42:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@KalleOlaviNiemitalo that is a good question. The current proposal is for implicit casting so does not include explicit casting. \r\n\r\nI would say explicit casting is explicit user intention, but I believe it will suffer from the same thing if the user is not aware about the expected behavior. So, it makes sense the analyzer will include this case too. But I want to hear more feedback if this can be an issue.\r\n\r\nAlso, the compiler will use the implicit casting to do the explicit one:\r\n\r\n```C#\r\nDateTimeOffset dto = (DateTimeOffset) dt;\r\n```\r\nwill be converted to \r\n\r\n```C#\r\ncall valuetype [System.Runtime]System.DateTimeOffset [System.Runtime]System.DateTimeOffset::op_Implicit(valuetype [System.Runtime]System.DateTime)\r\n```\r\n\r\nNote the analyzer `suggestion` is not going to break any build or produce any warning. It is just info which users can even ignore without suppressing it. ",
                                           "updatedAt":  "2022-09-11T17:42:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KFt_R",
                                           "createdAt":  "2022-09-11T18:01:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODw4Fgg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2022-09-12T02:34:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "YohanSciubukgian",
                                                                               "createdAt":  "2022-10-30T21:41:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Arithmomaniac",
                                                                               "createdAt":  "2023-01-23T14:19:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andrewimcclement",
                                                                               "createdAt":  "2023-07-01T10:54:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wjrogers",
                                                                               "createdAt":  "2024-07-31T15:44:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "wjrogers",
                                                                               "createdAt":  "2024-07-31T15:51:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yutakamurata-eizo",
                                                                               "createdAt":  "2024-09-03T23:55:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "martincostello",
                                           "body":  "I think the implicit version is the most important one to focus on, as it\u0027s often done by accident and can lead to bugs that can take up to six months to become apparent.\r\n\r\nThis has been the source of a number of major bugs in applications I\u0027ve worked on over the last few years where behaviour around daylight savings transitions is important and implicit conversions have caused values to end up being compared incorrectly leading to incorrect behaviour.\r\n\r\nTo try and prevent this we\u0027ve adopted the [Microsoft.CodeAnalysis.BannedApiAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.BannedApiAnalyzers) to specifically detect any accidental usage of it with a warning via the following entry in `BannedSymbols.txt`:\r\n\r\n```\r\nM:System.DateTimeOffset.op_Implicit(System.DateTime); Do not implicitly cast DateTime to DateTimeOffset.\r\n```\r\n",
                                           "updatedAt":  "2022-09-11T18:01:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KGI5I",
                                           "createdAt":  "2022-09-12T01:56:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ufcpp",
                                           "body":  "```cs\r\nvar dto = DateTimeOffset.UtcNow;\r\n\r\n// Converting from Unspecified to DTO is almost always unintentional.\r\n// I\u0027d like this to be error.\r\nvar unspecified = (DateTimeOffset)dto.DateTime;\r\n\r\n// However, Local and Utc is OK.\r\n// How should an analyzer suggest converting these?\r\nvar utc = (DateTimeOffset)dto.UtcDateTime;\r\nvar local = (DateTimeOffset)dto.LocalDateTime;\r\n```",
                                           "updatedAt":  "2022-09-12T01:56:10Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Add analyzer for DateTimeOffset implicit operator with DateTime.",
        "labels":  [
                       "api-suggestion",
                       "code-analyzer",
                       "code-fixer",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76225",
        "createdAt":  "2022-09-27T04:14:51Z",
        "number":  76225,
        "author":  "davhdavh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODRooxA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aradalvand",
                                            "createdAt":  "2022-11-23T13:18:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Zintom",
                                            "createdAt":  "2022-11-23T14:29:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "madelson",
                                            "createdAt":  "2022-11-26T16:43:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlgorithmsAreCool",
                                            "createdAt":  "2023-01-28T23:22:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mikhail-khalizev",
                                            "createdAt":  "2023-05-02T07:56:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "egortech",
                                            "createdAt":  "2023-05-28T03:35:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ChristophHornung",
                                            "createdAt":  "2023-09-06T06:20:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JochemPalmsens",
                                            "createdAt":  "2023-09-08T08:45:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hez2010",
                                            "createdAt":  "2023-09-08T09:38:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vladd",
                                            "createdAt":  "2023-09-09T00:02:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MineCake147E",
                                            "createdAt":  "2023-12-13T04:31:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "koenigst",
                                            "createdAt":  "2023-12-13T11:36:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yukitomoda",
                                            "createdAt":  "2024-06-13T03:16:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2024-07-19T20:29:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SWB54",
                                            "createdAt":  "2024-08-09T04:08:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-09-30T13:53:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ldy985",
                                            "createdAt":  "2024-10-29T12:37:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fitdev",
                                            "createdAt":  "2024-12-05T07:36:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stephen-zhao",
                                            "createdAt":  "2025-01-09T22:23:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JanRomero",
                                            "createdAt":  "2025-03-02T00:22:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dexcompiler",
                                            "createdAt":  "2025-06-18T13:15:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "khellang",
                                            "createdAt":  "2025-09-02T08:28:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xriuk",
                                            "createdAt":  "2025-09-18T15:09:56Z"
                                        }
                                    ],
                          "totalCount":  23
                      },
        "updatedAt":  "2025-08-14T16:53:46Z",
        "body":  "### Background and motivation\r\n\r\nTimeSpan is fundamentally a long, and has most of the semantics of being a long.\r\nYet, when adding the `IMinMaxValue\u003cT\u003e`, `INumberBase\u003cT\u003e` and so on, none of them were applied to TimeSpan.\r\nThis prevents making things like Math.Min (if it had an overload that used the new interfaces) work on TimeSpans.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System;\r\n\r\npublic class TimeSpan\r\n        : IComparable,\r\n          IComparable\u003cTimeSpan\u003e,\r\n          IEquatable\u003cTimeSpan\u003e,\r\n          ISpanFormattable,\r\n          ISpanParsable\u003cTimeSpan\u003e,\r\n//NEW\r\n          IMinMaxValue\u003cTimeSpan\u003e,\r\n          IAdditionOperators\u003cTimeSpan, TimeSpan, TimeSpan\u003e,\r\n          IAdditiveIdentity\u003cTimeSpan, TimeSpan\u003e,\r\n          IEqualityOperators\u003cTimeSpan, TimeSpan, bool\u003e,\r\n          ISubtractionOperators\u003cTimeSpan, TimeSpan, TimeSpan\u003e,\r\n          IUnaryPlusOperators\u003cTimeSpan, TimeSpan\u003e,\r\n          IUnaryNegationOperators\u003cTimeSpan, TimeSpan\u003e,\r\n          ISignedNumber\u003cTimeSpan\u003e //\u003c-- problem with this, see below\r\n{\r\n...\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar min = Math.Min(TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(1));\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nA few semantics of the new interfaces does not really make sense for TimeSpan, e.g. TimeSpan _can_ be negative, but the concept of NegativeOne does not really make much sense outside being a unary operator. and for some reason `ISignedNumber\u003cT\u003e` assumes the entire `INumberBase\u003cT\u003e` is applicable.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvhb4RA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5LCgDE",
                                           "createdAt":  "2022-09-27T04:14:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-09-27T04:14:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LCmI_",
                                           "createdAt":  "2022-09-27T04:43:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXbh-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "egortech",
                                                                               "createdAt":  "2023-05-28T03:35:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stevehansen",
                                                                               "createdAt":  "2023-11-14T14:46:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2023-12-13T04:31:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "iPilot",
                                                                               "createdAt":  "2024-03-25T12:03:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2024-08-24T07:22:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CREAsTIVE",
                                                                               "createdAt":  "2025-02-04T01:17:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nightowl286",
                                                                               "createdAt":  "2025-06-20T19:27:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "hez2010",
                                           "body":  "IMO all types having operator overloads should implement their corresponding operator interfaces. If a type is not number, it only isn\u0027t necessary to implement the INumberBase/INumber interface. ",
                                           "updatedAt":  "2022-09-27T04:44:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LCwaW",
                                           "createdAt":  "2022-09-27T05:54:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-numerics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nTimeSpan is fundamentally a long, and has most of the semantics of being a long.\r\nYet, when adding the `IMinMaxValue\u003cT\u003e`, `INumberBase\u003cT\u003e` and so on, none of them were applied to TimeSpan.\r\nThis prevents making things like Math.Min (if it had an overload that used the new interfaces) work on TimeSpans.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System;\r\n\r\npublic class TimeSpan\r\n        : IComparable,\r\n          IComparable\u003cTimeSpan\u003e,\r\n          IEquatable\u003cTimeSpan\u003e,\r\n          ISpanFormattable,\r\n          ISpanParsable\u003cTimeSpan\u003e,\r\n//NEW\r\n          IMinMaxValue\u003cTimeSpan\u003e,\r\n          IAdditionOperators\u003cTimeSpan, TimeSpan, TimeSpan\u003e,\r\n          IAdditiveIdentity\u003cTimeSpan, TimeSpan\u003e,\r\n          IEqualityOperators\u003cTimeSpan, TimeSpan, bool\u003e,\r\n          ISubtractionOperators\u003cTimeSpan, TimeSpan, TimeSpan\u003e,\r\n          IUnaryPlusOperators\u003cTimeSpan, TimeSpan\u003e,\r\n          IUnaryNegationOperators\u003cTimeSpan, TimeSpan\u003e,\r\n          ISignedNumber\u003cTimeSpan\u003e //\u003c-- problem with this, see below\r\n{\r\n...\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar min = Math.Min(TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(1));\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nA few semantics of the new interfaces does not really make sense for TimeSpan, e.g. TimeSpan _can_ be negative, but the concept of NegativeOne does not really make much sense outside being a unary operator. and for some reason `ISignedNumber\u003cT\u003e` assumes the entire `INumberBase\u003cT\u003e` is applicable.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavhdavh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Numerics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-27T05:54:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LC7E0",
                                           "createdAt":  "2022-09-27T06:46:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "The interfaces was implemented in the first version, but then removed when they were moved into `System.Numerics` namespace.",
                                           "updatedAt":  "2022-09-27T06:46:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LFRhe",
                                           "createdAt":  "2022-09-27T15:27:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODz9EMQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2024-08-24T07:11:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2024-09-28T18:45:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "As indicated above, the original design had types like `TimeSpan` implementing such interfaces. However, API review decided we shouldn\u0027t expose that without more concrete scenarios showing the usage scenarios. That likely includes indicating how such APIs would be versioned.\r\n\r\n\u003e  and for some reason ISignedNumber\u003cT\u003e assumes the entire INumberBase\u003cT\u003e is applicable.\r\n\r\nThe interface name implies that it is a `number` like type and not just some arbitrary type that has a \"sign\".\r\n",
                                           "updatedAt":  "2022-09-27T15:27:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LFdK3",
                                           "createdAt":  "2022-09-27T16:05:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD4iTWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "koenigst",
                                                                               "createdAt":  "2023-12-13T11:36:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ldy985",
                                                                               "createdAt":  "2024-10-29T12:37:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "hrrrrustic",
                                           "body":  "\u003e more concrete scenarios showing the usage scenarios\r\n\r\nFor https://github.com/dotnet/runtime/issues/69590 would be nice to have `IComparisonOperators\u003c,\u003e` on TimeSpan, DateTime, etc",
                                           "updatedAt":  "2022-09-27T16:05:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LFgVT",
                                           "createdAt":  "2022-09-27T16:16:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwER6Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2022-10-03T07:49:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "omariom",
                                                                               "createdAt":  "2022-11-23T10:08:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "For comparison, `IComparable\u003cT\u003e` and `IEquatable\u003cT\u003e` is often a better choice due to the semantics and guarantees it provides (they are not the same as `IComparisonOperators` and `IEqualityOperators`, and the functions may return different results -- and do in the case of floating-point).",
                                           "updatedAt":  "2022-09-27T16:16:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LYBHd",
                                           "createdAt":  "2022-10-02T08:48:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwO3FQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hrrrrustic",
                                                                               "createdAt":  "2022-10-02T08:54:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Wraith2",
                                                                               "createdAt":  "2022-11-26T20:45:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "gusty",
                                           "body":  "I think `TimeSpan` shouldn\u0027t implement `IAdditionOperators\u003c_,_,_\u003e` as it\u0027s loosely tied to numerics and for instance there is no concept of Unchecked Addition.\r\n\r\nIdeally it should implement something more generic like `IMonoid\u003c_\u003e` and `ISemigroup\u003c_\u003e`, we definitely need those interfaces which are not tied to numerics. Other non numeric types like `String`, `List\u003c\u0027T\u003e` can profit from these interfaces as well, this will allow to generalize over those operations which have some compelling use cases like accumulative error collection to name the first one that comes to my mind from my day to day work,\r\n\r\nThen ideally `IAdditionOperators\u003c\u0027t,\u0027t,\u0027t\u003e` should inherit from `ISemiGroup\u003c\u0027t\u003e` if we had a kind of selective inheritance mechanism based on generics specializations, I wish we had it.\r\n\r\nRegarding `IMinMaxValue` I think it makes sense to `TimeSpan`.",
                                           "updatedAt":  "2022-10-02T09:04:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LYOOp",
                                           "createdAt":  "2022-10-02T13:12:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Ideally it should implement something more generic like IMonoid\u003c_\u003e and ISemigroup\u003c_\u003e, we definitely need those interfaces which are not tied to numerics.\r\n\r\nConcepts like `monoids` and `semigroups` are incredibly difficult to expose. Some systems have tried to define or expose such types/support, but they are only loosely related to the actual mathematical term. This is in the same way that `tensors`, `vectors`, `scalars`, `functions`, and other terms are most often only very loosely related to the same mathematical concepts.\r\n\r\nSuch concepts exist in a purely mathematical sense where you have a theoretical \"turing machine\" with infinite time/resources. However, in the practical sense no such computer exists. Applications generally run on an imperative machine where such machine has finite resources and finite time. Data is broken up into smaller pieces for easy interaction. Interacting with data can often have side effects and it can imply introduced error in the form of rounding, wrapping, saturating, truncating, or more. \r\n\r\nSuch systems are typically minimally abstracted over with a basic type system. While the complexity of some type systems can vary, they all have limitations that further restrict what models can be exposed and how easy vs complex it is for others to consume the expose interface.\r\n\r\nIn the case of `semigroup`, an extremely simplified view is that it implies an `associative` binary operator. However, in computer programming `(a + b) + c` and `a + (b + c)` can differ in result. While it minimally holds true for certain types of primitive integers (namely those that are two\u0027s complement and provide \"truncating\" arithmetic), it falls apart for types which saturate, types which round, types which have side effects, etc. Many of these concepts (associative, commutative, distributive, identities, inverses, etc) only exist or hold true part of the time and even then often can\u0027t be represented via purely static data.\r\n\r\nBecause of this, among other reasons, we have no plans to add such interfaces now or in the future. It is not the goal or aim of the BCL to try and provide mathematical abstractions like this. The interfaces we expose take into account the practical limitations and interaction scenarios a developer requires. We also take into account that things like `monoids` are a higher level concept that many developers will never have been introduced to and may represent a very high entrance barrier as compared to a concept like `IAdditionOperators\u003c...\u003e`.\r\n\r\n\u003e for instance there is no concept of Unchecked Addition.\r\n\r\nSuch a concept would make sense for `TimeSpan`, however. In general, anything that has a `Min/MaxValue` has some concept of \"overflow\" and therefore what happens when those boundaries are \"passed\". In many cases users will want/expect such overflow to fault (raise an exception/surface an error). However, there are likewise cases where another behavior is desirable instead. Today, `TimeSpan` always overflows but allowing for explicit saturation or wrapping would also be viable and potentially something worth exposing.",
                                           "updatedAt":  "2022-10-02T13:12:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LYVtF",
                                           "createdAt":  "2022-10-02T15:37:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODMaIkQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "neon-sunset",
                                                                               "createdAt":  "2023-11-12T19:33:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "gusty",
                                           "body":  "\u003e Concepts like monoids and semigroups are incredibly difficult to expose.\r\n\r\nWell, the solution is easy, let\u0027s pick a different name, and don\u0027t enforce strict adherence to those properties.\r\nWhat about `ITypeThatSupportsABinaryOperationWhichDoesntChangeItsType` ? but please don\u0027t put it in `Numerics`.\r\n\r\n\u003e  Some systems have tried to define or expose such types/support, but they are only loosely related to the actual mathematical term\r\n\r\nI\u0027m totally fine with that, as that\u0027s not the goal.\r\nWhat I propose is not to re-create the abstract mathematical properties, but the **practical** ones, I mean something that encompass `string`, `list\u003c\u0027t\u003e` and perhaps `Timespan` as well.",
                                           "updatedAt":  "2022-10-02T15:42:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LYeqT",
                                           "createdAt":  "2022-10-02T18:45:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e Well, the solution is easy, let\u0027s pick a different name, and don\u0027t enforce strict adherence to those properties.\r\nWhat about ITypeThatSupportsABinaryOperationWhichDoesntChangeItsType ?\r\n\r\nYou can just use `IAdditionOperators\u003cT, T, T\u003e`. Having to specify the inputs/outputs isn\u0027t really problematic. It allows maximum extensibility while requiring minimal additional typing.\r\n\r\n\u003e but please don\u0027t put it in Numerics.\r\n\r\nThere is no reason why these interfaces can\u0027t be used elsewhere. They ultimately are very numeric oriented and are hidden away here because direct usage isn\u0027t as common. It\u0027s primarily a consideration for library/type authors rather than for application authors.\r\n\r\nAPI review already discussed and considered this when deciding to put these interfaces in `System.Numerics`\r\n\r\n\u003e I\u0027m totally fine with that, as that\u0027s not the goal.\r\nWhat I propose is not to re-create the abstract mathematical properties, but the practical ones, I mean something that encompass string, list\u003c\u0027t\u003e and perhaps Timespan as well.\r\n\r\nYou\u0027re going to need to provide some more concrete examples of what you think is missing and usage scenarios around how you expect such an abstraction to be used/be beneficial.\r\n\r\nIn the case of string/list/array, most of the functionality is covered by interfaces in `System.Collections` and `System.Collections.Generic`.",
                                           "updatedAt":  "2022-10-02T18:45:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mAJoh",
                                           "createdAt":  "2023-09-08T08:53:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JochemPalmsens",
                                           "body":  "Maybe also add `IDivisionOperators\u003cTimeSpan,double,TimeSpan\u003e` and `IDivisionOperators\u003cTimeSpan,TimeSpan,double\u003e`, etc? To expose more of the mathematical operations?\r\n\r\nwould improve usability in constrained generic methods.\r\nI do understand @gusty \u0027s concern. However, the current implementation is just too limited, and requires overloaded methods that contain duplicate code (= not very clean)",
                                           "updatedAt":  "2023-09-08T08:53:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rt21R",
                                           "createdAt":  "2023-11-12T16:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nTimeSpan is fundamentally a long, and has most of the semantics of being a long.\r\nYet, when adding the `IMinMaxValue\u003cT\u003e`, `INumberBase\u003cT\u003e` and so on, none of them were applied to TimeSpan.\r\nThis prevents making things like Math.Min (if it had an overload that used the new interfaces) work on TimeSpans.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System;\r\n\r\npublic class TimeSpan\r\n        : IComparable,\r\n          IComparable\u003cTimeSpan\u003e,\r\n          IEquatable\u003cTimeSpan\u003e,\r\n          ISpanFormattable,\r\n          ISpanParsable\u003cTimeSpan\u003e,\r\n//NEW\r\n          IMinMaxValue\u003cTimeSpan\u003e,\r\n          IAdditionOperators\u003cTimeSpan, TimeSpan, TimeSpan\u003e,\r\n          IAdditiveIdentity\u003cTimeSpan, TimeSpan\u003e,\r\n          IEqualityOperators\u003cTimeSpan, TimeSpan, bool\u003e,\r\n          ISubtractionOperators\u003cTimeSpan, TimeSpan, TimeSpan\u003e,\r\n          IUnaryPlusOperators\u003cTimeSpan, TimeSpan\u003e,\r\n          IUnaryNegationOperators\u003cTimeSpan, TimeSpan\u003e,\r\n          ISignedNumber\u003cTimeSpan\u003e //\u003c-- problem with this, see below\r\n{\r\n...\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar min = Math.Min(TimeSpan.FromSeconds(2), TimeSpan.FromSeconds(1));\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nA few semantics of the new interfaces does not really make sense for TimeSpan, e.g. TimeSpan _can_ be negative, but the concept of NegativeOne does not really make much sense outside being a unary operator. and for some reason `ISignedNumber\u003cT\u003e` assumes the entire `INumberBase\u003cT\u003e` is applicable.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavhdavh\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-System.DateTime`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-12T16:59:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6N5L0i",
                                           "createdAt":  "2024-09-28T09:17:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0GOdw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vladd",
                                                                               "createdAt":  "2024-09-28T09:41:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2024-09-28T10:27:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hez2010",
                                                                               "createdAt":  "2024-09-28T11:00:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-09-30T13:53:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "roji",
                                           "body":  "FYI NodaTime is adding generic math interfaces to their types (https://github.com/nodatime/nodatime/issues/1693).",
                                           "updatedAt":  "2024-09-28T09:17:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6x0S4p",
                                           "createdAt":  "2025-06-18T08:48:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXKjqg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hez2010",
                                                                               "createdAt":  "2025-06-18T12:17:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2025-06-18T13:03:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fitdev",
                                                                               "createdAt":  "2025-06-19T07:02:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "neuecc",
                                           "body":  "Enumerable.Sequence/InfiniteSequence has been merged.\nhttps://github.com/dotnet/runtime/pull/116538\n\nI think it would be convenient if DateTime and DateTimeOffset supported IAdditionOperators, as this would allow enumeration like:\n\n```csharp\nEnumerable.Sequence(new DateTime(2000, 12, 1), new DateTime(2000, 12, 31), TimeSpan.FromDays(1));\nEnumerable.InfiniteSequence(DateTime.Now, TimeSpan.FromDays(1)).Take(7)\n```\n\n(Though Sequence requires `INumber\u003cT\u003e`, so the constraints would need to be relaxed)\n\nWhat do you think...? @stephentoub ",
                                           "updatedAt":  "2025-06-18T08:48:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6x3L-s",
                                           "createdAt":  "2025-06-18T12:38:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e (Though Sequence requires INumber\u003cT\u003e, so the constraints would need to be relaxed)\n\u003e What do you think...? @stephentoub\n\n@tannergooding, you\u0027d expressed hesitancy over constraining the T in Sequence to be IAdditionOperators + IComparable rather than INumber. Should we reconsider?",
                                           "updatedAt":  "2025-06-18T12:38:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6x6TB1",
                                           "createdAt":  "2025-06-18T16:03:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e @tannergooding, you\u0027d expressed hesitancy over constraining the T in Sequence to be IAdditionOperators + IComparable rather than INumber. Should we reconsider?\n\nI think it could be done for `Sequence`, just couldn\u0027t have been done for `Range`, due to the lack of a `Step`.\n\nIt\u0027s a bit tricky, however, since `INumber` gives access to the relational operators and other specialized helpers which can have a difference in behavior to `IComparable` and we\u0027d need to determine which semantic is \"more correct\" -- I think we\u0027re missing some handling from the current `Sequence` API, accordingly, as the checks may not line up correctly for certain concepts (`nan`, `negative`, etc). Where `INumber` gives explicit APIs to check such concepts, like `IsNaN`, `IsNegative`, etc.\n\nWe likely need to have a deeper discussion on what should expose operators like `IAdditionOperators` beyond the numeric types first. There\u0027s really nothing that conceptually blocks some `Enumerable.Sequence(string, string)` for example, which has a form of concatenation (addition operator) and is comparable. But it is also a bit more of a jump than say `TimeSpan` at the same time.\n\nI don\u0027t immediately see an issue with generally supporting the operators on anything that provides them, just something we should rather discuss and decide on a plan around for .NET moving forward.",
                                           "updatedAt":  "2025-06-18T16:03:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-Cq7g",
                                           "createdAt":  "2025-08-14T13:00:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "webczat",
                                           "body":  "just came across this that DateTime doesn\u0027t have IAdditionOperators and friends. Imagine if I wanted to make a generic range taking a step parameter, now I can\u0027t.\nPossible usage for unit tests, give me a series of dates as a theory data source.",
                                           "updatedAt":  "2025-08-14T13:00:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-FvhE",
                                           "createdAt":  "2025-08-14T16:53:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gusty",
                                           "body":  "I just wanted to say that after a second thought with a fresh mind I agree that it should implement `IAdditionOperators`.\nSame for `DateOnly` which should support addition of days.\n\nHowever, I still think in abstract terms, this rather than Monoid falls better in the concept of Affinity Group, which makes me think that static interfaces shouldn\u0027t be limited to numbers.\n\nAnd yes, (generic) range expressions is a good example of the benefit of this addition, at least for F#.",
                                           "updatedAt":  "2025-08-14T16:53:46Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "TimeSpan has all of the semantics of numbers, but none of the new interfaces",
        "labels":  [
                       "api-suggestion",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78934",
        "createdAt":  "2022-11-28T21:54:21Z",
        "number":  78934,
        "author":  "mattjohnsonpint",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1gZ8w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jrdodds",
                                            "createdAt":  "2023-10-14T21:13:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2024-01-29T18:05:06Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-26T10:40:36Z",
        "body":  "### Background and motivation\r\n\r\nVery commonly, a `DateTime` needs to be converted to a `DateTimeOffset` with regard to a specific time zone.  There is no built-in mechanism for doing so, and an implementation that handles all edge cases can be error prone.\r\n\r\nIndeed, [our own docs](https://learn.microsoft.com/dotnet/standard/datetime/resolve-ambiguous-times) for how to resolve ambiguous `DateTime` values has an error in that the example code doesn\u0027t account for `BaseUtcOffsetDelta`.  I\u0027ve reported that in https://github.com/dotnet/docs/issues/32773.  We also don\u0027t provide a single example for resolving both ambiguous *and invalid* values.\r\n\r\nIn general we don\u0027t make it easy to convert a `DateTime` to a `DateTimeOffset` for any other time zones than local or UTC.\r\n\r\nFor context, consider a form where the date and time of an event are collected.  Depending on design requirements, the associated time zone might also be collected on the form, or it might be derived from the location of the event, or inferred from the user creating it.  The best practice in this scenario is *not* to pre-convert everything to UTC - but rather to store the `DateTime` and time zone ID, then compute a `DateTimeOffset` or UTC equivalent when needed.\r\n\r\nAlso, I\u0027ve used an extension method for this in at least 5 separate StackOverflow answers for different scenarios.\r\n- [Getting a `DateTimeOffset` for today at a given time in a particular time zone](https://stackoverflow.com/a/74306764/634824)\r\n- [Resolving ambiguous `DateTime` values](https://stackoverflow.com/a/57961386/634824)\r\n- [Calculating durations correctly with `DateTime` values accounting for DST](https://stackoverflow.com/a/59866718/634824)\r\n- [Adding a day to a `DateTime` in a specific time zone](https://stackoverflow.com/a/59960087/634824)\r\n- [Scheduling a job to run in a given time zone accounting for DST](https://stackoverflow.com/a/58457953/634824)\r\n\r\nEach of those has additional scenario-specific code, but they all use the same `ToDateTimeOffset` extension method that accounts for invalid and ambiguous times, with regard to a specific time zone, and respects `DateTimeKind` properly as well.  I believe it should be baked in, and perhaps my implementation is suitable (or a good start).\r\n\r\nAlso note that in all these scenarios, the preference is to use the *daylight* time for both ambiguous and invalid resolution. The reason for this is that the daylight instance comes first sequentially.  This could be optional, but should be the default - as it is well established in scheduling systems where such operations are prevalent.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System;\r\n\r\npublic struct DateTime\r\n{\r\n    public DateTimeOffset ToDateTimeOffset(TimeZoneInfo timeZone);\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```csharp\r\nusing System.Globalization;\r\n\r\n// New York, USA (Eastern Time). EST = UTC-05:00, EDT = UTC-04:00\r\nTimeZoneInfo tz = TimeZoneInfo.FindSystemTimeZoneById(\"America/New_York\");\r\n\r\n// Simple case  (00:00 ET becomes 00:00 EST)\r\nDateTime dt1 = DateTime.ParseExact(\"2022-12-31T00:00:00\", \"s\", CultureInfo.InvariantCulture);\r\nDateTimeOffset dto1 = dt1.ToDateTimeOffset(tz);\r\nConsole.WriteLine(dto1.ToString(\"o\", CultureInfo.InvariantCulture)); // 2022-12-31T00:00:00.0000000-05:00\r\n\r\n// Example that resolves ambiguous time (1:30 ET becomes 1:30 EDT)\r\nDateTime dt2 = DateTime.ParseExact(\"2022-11-06T01:30:00\", \"s\", CultureInfo.InvariantCulture);\r\nDateTimeOffset dto2 = dt2.ToDateTimeOffset(tz);\r\nConsole.WriteLine(dto2.ToString(\"o\", CultureInfo.InvariantCulture)); // 2022-11-06T01:30:00.0000000-04:00\r\n\r\n// Example that resolves invalid time (2:30 ET becomes 3:30 EDT)\r\nDateTime dt3 = DateTime.ParseExact(\"2022-03-13T02:30:00\", \"s\", CultureInfo.InvariantCulture);\r\nDateTimeOffset dto3 = dt3.ToDateTimeOffset(tz);\r\nConsole.WriteLine(dto3.ToString(\"o\", CultureInfo.InvariantCulture)); // 2022-03-13T03:30:00.0000000-04:00\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nThis is more verbose, but would do the same and keep it off the `DateTime` object.\r\n\r\n```csharp\r\nnamespace System;\r\n\r\npublic class TimeZoneInfo\r\n{\r\n    public static DateTimeOffset ConvertDateTimeToDateTimeOffset(DateTime dateTime, TimeZoneInfo timeZone);\r\n}\r\n```\r\n\r\nOr it could be a static method on `DateTimeOffset`:\r\n\r\n```csharp\r\nnamespace System;\r\n\r\npublic struct DateTimeOffset\r\n{\r\n    public static DateTimeOffset FromDateTime(DateTime dateTime, TimeZoneInfo timeZone);\r\n}\r\n```\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcjKXtw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PQzia",
                                           "createdAt":  "2022-11-28T21:54:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-11-28T21:54:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PQzkC",
                                           "createdAt":  "2022-11-28T21:54:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "@tarekgh ",
                                           "updatedAt":  "2022-11-28T21:54:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PQ4a-",
                                           "createdAt":  "2022-11-28T22:15:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "For consideration, here is the extension method I\u0027ve been using and suggesting to others.  The actual implementation could deviate from this, but would need to handle the same cases outlined.\r\n\r\n```csharp\r\npublic static DateTimeOffset ToDateTimeOffset(this DateTime dt, TimeZoneInfo tz)\r\n{\r\n    if (dt.Kind != DateTimeKind.Unspecified)\r\n    {\r\n        // Handle UTC or Local kinds (regular and hidden 4th kind)\r\n        DateTimeOffset dto = new DateTimeOffset(dt.ToUniversalTime(), TimeSpan.Zero);\r\n        return TimeZoneInfo.ConvertTime(dto, tz);\r\n    }\r\n\r\n    if (tz.IsAmbiguousTime(dt))\r\n    {\r\n        // Prefer the daylight offset, because it comes first sequentially (1:30 ET becomes 1:30 EDT)\r\n        TimeSpan[] offsets = tz.GetAmbiguousTimeOffsets(dt);\r\n        TimeSpan offset = offsets[0] \u003e offsets[1] ? offsets[0] : offsets[1];\r\n        return new DateTimeOffset(dt, offset);\r\n    }\r\n\r\n    if (tz.IsInvalidTime(dt))\r\n    {\r\n        // Advance by the gap, and return with the daylight offset  (2:30 ET becomes 3:30 EDT)\r\n        TimeSpan[] offsets = { tz.GetUtcOffset(dt.AddDays(-1)), tz.GetUtcOffset(dt.AddDays(1)) };\r\n        TimeSpan gap = offsets[1] - offsets[0];\r\n        return new DateTimeOffset(dt.Add(gap), offsets[1]);\r\n    }\r\n\r\n    // Simple case\r\n    return new DateTimeOffset(dt, tz.GetUtcOffset(dt));\r\n}\r\n```",
                                           "updatedAt":  "2022-11-28T22:15:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PWeML",
                                           "createdAt":  "2022-11-29T20:54:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "Alternative name: `WithOffsetForTimeZone`",
                                           "updatedAt":  "2022-11-29T20:54:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pF-Iu",
                                           "createdAt":  "2023-10-14T20:30:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "Another example use case: https://stackoverflow.com/a/77294370/634824",
                                           "updatedAt":  "2023-10-14T20:30:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yKOBC",
                                           "createdAt":  "2024-01-29T18:02:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODUhsGw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2024-01-29T18:11:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "@tarekgh @danmoseley - Can we get some eyes on this for .NET 9?  It\u0027s very much needed, and there is demand for it, as evidenced by the StackOverflow links above.  Thanks.",
                                           "updatedAt":  "2024-01-29T18:02:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yKTge",
                                           "createdAt":  "2024-01-29T18:16:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "I also just added another alternative API to the top, as it could be a factory method on `DateTimeOffset`.\r\n\r\nI was also thinking, with any of these, it might be worth having two methods - one that takes a `TimeZoneInfo` for the scenarios proposed, and one that takes a `TimeSpan` for fixed offsets.  In other words:\r\n\r\n```csharp\r\nnamespace System;\r\n\r\npublic struct DateTimeOffset\r\n{\r\n    public static DateTimeOffset FromDateTime(DateTime dateTime, TimeZoneInfo timeZone);\r\n    public static DateTimeOffset FromDateTime(DateTime dateTime, TimeSpan offset);\r\n}\r\n```\r\n",
                                           "updatedAt":  "2024-01-29T18:16:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yKXjB",
                                           "createdAt":  "2024-01-29T18:27:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODUiX0w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mattjohnsonpint",
                                                                               "createdAt":  "2024-01-29T19:35:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  ".... we really need to get our own `DateTimeZoned` type....\r\n",
                                           "updatedAt":  "2024-01-29T18:27:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yMpe3",
                                           "createdAt":  "2024-01-30T01:52:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e  public static DateTimeOffset FromDateTime(DateTime dateTime, TimeSpan offset);\r\n\r\nThis will look very weird because DateTimeOffset already have a constructor which takes DateTime and TimeSpan offset. \r\n\r\nI am leaning to the original proposal but I want to give more control for the user on the behavior. What do you think about:\r\n\r\n```C#\r\n\r\n// Method defined in DateTime type.\r\npublic static DateTimeOffset ToDateTimeOffset(TimeZoneInfo tz = TimeZoneInfo.Local, bool useDaylightOffsetWhenAmbiguous = true, bool throwWhenInvalid = false)\r\n```\r\n\r\n",
                                           "updatedAt":  "2024-01-31T18:04:02Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[API Proposal]: DateTime.ToDateTimeOffset(TimeZoneInfo)",
        "labels":  [
                       "api-suggestion",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79105",
        "createdAt":  "2022-12-01T19:16:13Z",
        "number":  79105,
        "author":  "timmydo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-02-16T04:45:29Z",
        "body":  "I recently ran into two separate bugs related to time handling in our code and thought roslyn analyzers might be able to assist.\r\n\r\nThe two instances were:\r\n\r\n`DateTimeOffset.Parse(\"2020-01-02\").ToString(...)`\r\nand\r\n`if (DateTimeOffset.TryParse(expiryString, out var expiry) \u0026\u0026 now \u003c expiry) // expiry is a utc YYYY-MM-DD date`\r\n\r\nin both of these usages, I should have used something like `DateTimeOffset.TryParse(expiryString, null, System.Globalization.DateTimeStyles.AssumeUniversal, out var expiry)`\r\n\r\nI see this as similar to requiring explicit usage of culture objects in string comparisons. Is there an analyzer that could recommend the version of the function with the explicit default behavior request like we have for string comparison functions?\r\n\r\nSemi-related #43956",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVWJLOg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5PhsdI",
                                           "createdAt":  "2022-12-01T19:16:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-12-01T19:16:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5PihAv",
                                           "createdAt":  "2022-12-01T21:09:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCwivjg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "timmydo",
                                                                               "createdAt":  "2022-12-01T21:26:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e I see this as similar to requiring explicit usage of culture objects in string comparisons.\r\n\r\nYes, especially for one surprising reason - at least one culture uses a `YYYY-DD-MM` format.\r\n\r\n\u003e in both of these usages, I should have used something like \r\n\r\nYou should be using \r\n```cs\r\nDateTimeOffset.TryParse(expiryString, DateTimeFormatInfo.InvariantInfo, out var expiry)\r\n```\r\n... which is explicitly using a culture.",
                                           "updatedAt":  "2022-12-01T21:09:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pil5K",
                                           "createdAt":  "2022-12-01T21:28:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timmydo",
                                           "body":  "Well, I\u0027m glad my attempt at a fix is wrong if it makes the case for an analyzer stronger :)",
                                           "updatedAt":  "2022-12-01T21:28:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VVMz9",
                                           "createdAt":  "2023-02-15T16:13:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Actually, if you previously know the format of the date string you should use `[Try]ParseExact` instead of `[Try]Parse`.\r\n\r\n`[Try]Parse` is useful only if having date strings which you don\u0027t know the actual format and try to parse to get something from it. Recommending Invariant culture or anything else here can break other user cases. We need to think more how we can write this analyzer to address the bad usages and allow the legitimate usage in same time.",
                                           "updatedAt":  "2023-02-15T16:13:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VYks6",
                                           "createdAt":  "2023-02-16T04:45:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timmydo",
                                           "body":  "I don\u0027t think you should recommend invariant culture--you just need to recommend using an API where the culture is explicitly specified, similar to how string comparison API analyzers recommend you specify the culture explicitly.",
                                           "updatedAt":  "2023-02-16T04:45:29Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Roslyn analyzers for bug-prone usage of DateTime/DateTimeOffset",
        "labels":  [
                       "code-analyzer",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80549",
        "createdAt":  "2023-01-12T14:46:33Z",
        "number":  80549,
        "author":  "StefanBertels",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-09-08T21:17:28Z",
        "body":  "### Description\r\n\r\nUpgrading to .NET 7.0 results in (small) DateTime errors when adding seconds (double), probably introduced by https://github.com/dotnet/runtime/pull/73198.\r\n\r\nWhile it\u0027s clear that this cannot be precise for every value it should be precise for values within some range (including the attached example which works flawless in .NET 6.0).\r\n\r\n### Reproduction Steps\r\n\r\n```\r\n[Fact]\r\nvoid DateTimeAddSecondsRegression()\r\n{\r\n    var dt = DateTime.Parse(\"2012-09-08T01:22:27.249\");\r\n    \r\n    Assert.Equal(dt, dt.Date.AddTicks(Convert.ToInt64(dt.TimeOfDay.TotalSeconds * TimeSpan.TicksPerSecond)));\r\n    Assert.Equal(dt, dt.Date.AddSeconds(dt.TimeOfDay.TotalSeconds)); // fails in .NET7\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nTest should be successful every time.\r\n\r\n### Actual behavior\r\n\r\nTest fails for .NET 7.0 (while successful for .NET 6.0).\r\n\r\n### Regression?\r\n\r\nYes\r\n\r\n### Known Workarounds\r\n\r\nWorkaround: Avoid AddSeconds() method and use your own calculation using ticks.\r\n\r\n### Configuration\r\n\r\n* dotnet 7.0.101\r\n* Windows 10 x64\r\n* Bug is in DateTime.cs (seems to be independent of OS)\r\n\r\n\r\n### Other information\r\n\r\nhttps://github.com/dotnet/runtime/blob/2335269/src/libraries/System.Private.CoreLib/src/System/DateTime.cs#L862",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZg6TMQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5SSR-0",
                                           "createdAt":  "2023-01-12T15:06:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "According to #66815 it\u0027s the .NET 6 behavior that was considered the bug.",
                                           "updatedAt":  "2023-01-12T15:06:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SSqpQ",
                                           "createdAt":  "2023-01-12T16:05:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCylseQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2023-01-13T07:49:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Right. The root issue here is you\u0027re expecting `double` to work like `decimal`. Where-as `double` is a binary-based floating-point type and can only accurately represent numbers that are multiples of powers of 2 and within the precision range of the type.\r\n\r\nIn the case of `dt.TimeOfDay`, the `Ticks` is an integer value of `49_472_490_000`. `TicksPerSecond` is also an exact integral of `10_000_000`. However, `TotalSeconds` returns a `double` and since `4947.249` is not exactly representable you actually get the nearest representable value which is `4947.24899999999979627318680286407470703125` (this displays in `ToString()` as `4947.249` but you can get the full precision by using `ToString(\"G42\")` in this case).\r\n\r\nThis initial imprecision means that when you call `AddSeconds` you\u0027re not actually asking for `49472490000` ticks to be added, but for `49472489999.9999979627318680286407470703125` ticks to be added.\r\n\r\nCorrectly handling all the edge cases so that the fractional ticks in the \"infinitely precise result\" given the \"exact represented input\" (that is the `0.9999979627318680286407470703125`) are allowed to round the final result up (from `49472489999` to `49472490000`)  is quite complex and expensive. Doing so would add a non-trivial amount of overhead to these APIs and significantly decrease performance. There are much cheaper \"hacks\" that could make this particular case work, but it\u0027d be trading this \"off by one\" for a different set of \"off by one\" and it still wouldn\u0027t solve the scenarios where the requested `Add*(someDouble)` isn\u0027t doing what the user expected because of how double represents values.\r\n\r\n-- For reference the \"hack\" I mentioned above would be changing the implementation from:\r\n```csharp\r\nprivate DateTime AddUnits(double value, long maxUnitCount, long ticksPerUnit)\r\n{\r\n    if (Math.Abs(value) \u003e maxUnitCount)\r\n    {\r\n        ThrowAddOutOfRange();\r\n    }\r\n\r\n    double integralPart = Math.Truncate(value);\r\n    double fractionalPart = value - integralPart;\r\n    long ticks = (long)(integralPart) * ticksPerUnit;\r\n    ticks += (long)(fractionalPart * ticksPerUnit);\r\n\r\n    return AddTicks(ticks);\r\n}\r\n```\r\n\r\nTo something like:\r\n```csharp\r\nprivate DateTime AddUnits(double value, long maxUnitCount, long ticksPerUnit)\r\n{\r\n    if (Math.Abs(value) \u003e maxUnitCount)\r\n    {\r\n        ThrowAddOutOfRange();\r\n    }\r\n\r\n    double integralPart = Math.Truncate(value);\r\n    double fractionalPart = value - integralPart;\r\n    long ticks = (long)(integralPart) * ticksPerUnit;\r\n    ticks += (long)(Math.Round(fractionalPart * ticksPerUnit));    // Alternatively, for older hardware: `fractionalPart *= ticksPerUnit; ticks += (fractionalPart \u003e= 0.5) ? 1 : 0`\r\n\r\n    return AddTicks(ticks);\r\n}\r\n```\r\n\r\nBut, this would still be roughly 8 cycles more expensive per operation (about 30% slower) and would have various other edge cases that would still be incorrect.",
                                           "updatedAt":  "2023-01-12T16:05:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SS9Bv",
                                           "createdAt":  "2023-01-12T16:41:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StefanBertels",
                                           "body":  "Of course precision errors for some (more extreme) double values is inevitable when converting to long (and vice versa). But I think math rules should apply here -- including round.\r\n\r\nThis value fails, too:\r\n\r\n`DateTime.Parse(\"2023-01-12T00:00:01.2Z\")`\r\n\r\nI don\u0027t know what implementation of rounding is the fastest one, but I don\u0027t think this is really ok.",
                                           "updatedAt":  "2023-01-12T16:41:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SS-zH",
                                           "createdAt":  "2023-01-12T16:47:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCylpkg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2023-01-13T07:34:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "As mentioned, the cheapest \"fix\" here will make the `Add*()` methods (except `AddTicks`) around 30% slower and still won\u0027t be correct for all cases.\r\n\r\nThis is a considerable cost increase and it is ultimately up to the area owners (CC. @tarekgh) on if that is acceptable.",
                                           "updatedAt":  "2023-01-12T16:47:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mDoEw",
                                           "createdAt":  "2023-09-08T21:11:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "\u003e Right. The root issue here is you\u0027re expecting `double` to work like `decimal`.\r\n\r\nI agree. But then why isn\u0027t there an overload of `TimeSpan.FromSeconds` that takes a `decimal`?",
                                           "updatedAt":  "2023-09-08T21:11:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mDpMx",
                                           "createdAt":  "2023-09-08T21:16:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Neme12",
                                           "body":  "Oh, I see the issue here is that all of the `TimeSpan.Total*` properties return a `double`, which can\u0027t be changed to `decimal` :(",
                                           "updatedAt":  "2023-09-08T21:17:28Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "DateTime.AddSeconds(double) precision error",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81672",
        "createdAt":  "2023-02-06T03:03:08Z",
        "number":  81672,
        "author":  "clement911",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-02-08T01:56:05Z",
        "body":  "### Description\r\n\r\nFor some timezones, at specific times, the UTC offset behaves illogically.\r\n\r\n### Reproduction Steps\r\n\r\nWith .NET 7\r\n\r\n```csharp\r\nvar utc = DateTimeOffset.Parse(\"2014-12-31T14:30:00Z\");\r\nvar tz = TimeZoneInfo.FindSystemTimeZoneById(\"North Korea Standard Time\");\r\nConsole.WriteLine(TimeZoneInfo.ConvertTime(utc, tz));\r\nConsole.WriteLine(TimeZoneInfo.ConvertTime(utc.AddMinutes(30), tz));\r\nConsole.WriteLine(TimeZoneInfo.ConvertTime(utc.AddMinutes(60), tz));\r\nConsole.Read();\r\n\r\n```\r\n\r\n### Expected behavior\r\n\r\nThe utc offset shouldn\u0027t change twice within the span of hour\r\n\r\n### Actual behavior\r\n\r\nThe utc offset changes twice within the span of hour\r\n\r\nOutput:\r\n```\r\n31/12/2014 11:30:00 PM +09:00\r\n31/12/2014 11:30:00 PM +08:30\r\n1/01/2015 12:30:00 AM +09:00\r\n```\r\n\r\n### Regression?\r\n\r\nNot sure\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 7, windows 11\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVL-AYA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5UkgDs",
                                           "createdAt":  "2023-02-06T10:28:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "The (most likely relevant) [official North Korean time zone change](https://en.wikipedia.org/wiki/Time_in_North_Korea) was from +0900 to +0830 on 2015-08-15, and from +0830 to +0900 on 2018-05-04 (both times giving less than two weeks notification of the change).  So the observed behavior is really wrong.\r\n\r\n\u003eThe utc offset shouldn\u0027t change twice within the span of hour\r\n\r\nWhile this specific instance is a bug of some sort, UTC offsets are decided by national governments.  Changing the offset multiple times in an hour is a valid (if confusing) thing to do. \u003cbr\u003e\r\nThere\u0027s also nothing \"special\" about an hour in relation to UTC offsets, other than the fact that _most_ offsets (and DST, when applicable) are in hour increments.  Some offsets are +30min, as was the case here.  There are some that use +45min.  And there is/was a zone that used a +30min DST change.",
                                           "updatedAt":  "2023-02-06T10:28:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UoJZa",
                                           "createdAt":  "2023-02-06T21:44:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "clement911",
                                           "body":  "@Clockwork-Muse \r\n\r\n\u003e Changing the offset multiple times in an hour is a valid (if confusing) thing to do.\r\n\r\nOk, so maybe it\u0027s technically valid and I didn\u0027t describe the root problem correctly, but there is a bug nonetheless.\r\n\r\nWe found several more timezones that exhibit a similar behaviour. That is, they change the UTC offset at one moment, and then revert it 1 hour later. It always happens on December 31st, which I find very suspicious.\r\n\r\nSee the following script showing 4 more occurrences, but there are a few more exhibiting the same weird behaviour.\r\n\r\n```csharp\r\nstring tzName = \"Sao Tome Standard Time\";\r\nvar utc = DateTimeOffset.Parse(\"2018-12-31T23:00:00Z\");\r\nvar tz = TimeZoneInfo.FindSystemTimeZoneById(tzName);\r\nConsole.WriteLine(TimeZoneInfo.ConvertTime(utc, tz));\r\nConsole.WriteLine(TimeZoneInfo.ConvertTime(utc.AddMinutes(60), tz));\r\nConsole.WriteLine(TimeZoneInfo.ConvertTime(utc.AddMinutes(120), tz));\r\nConsole.WriteLine();\r\n\r\ntzName = \"Altai Standard Time\";\r\nutc = DateTimeOffset.Parse(\"2013-12-31T16:00:00Z\");\r\ntz = TimeZoneInfo.FindSystemTimeZoneById(tzName);\r\nConsole.WriteLine(TimeZoneInfo.ConvertTime(utc, tz));\r\nConsole.WriteLine(TimeZoneInfo.ConvertTime(utc.AddMinutes(60), tz));\r\nConsole.WriteLine(TimeZoneInfo.ConvertTime(utc.AddMinutes(120), tz));\r\nConsole.WriteLine();\r\n\r\ntzName = \"Saratov Standard Time\";\r\nutc = DateTimeOffset.Parse(\"2013-12-31T19:00:00Z\");\r\ntz = TimeZoneInfo.FindSystemTimeZoneById(tzName);\r\nConsole.WriteLine(TimeZoneInfo.ConvertTime(utc, tz));\r\nConsole.WriteLine(TimeZoneInfo.ConvertTime(utc.AddMinutes(60), tz));\r\nConsole.WriteLine(TimeZoneInfo.ConvertTime(utc.AddMinutes(120), tz));\r\nConsole.WriteLine();\r\n\r\ntzName = \"Volgograd Standard Time\";\r\nutc = DateTimeOffset.Parse(\"2018-12-31T19:00:00Z\");\r\ntz = TimeZoneInfo.FindSystemTimeZoneById(tzName);\r\nConsole.WriteLine(TimeZoneInfo.ConvertTime(utc, tz));\r\nConsole.WriteLine(TimeZoneInfo.ConvertTime(utc.AddMinutes(60), tz));\r\nConsole.WriteLine(TimeZoneInfo.ConvertTime(utc.AddMinutes(120), tz));\r\nConsole.WriteLine();\r\n\r\nConsole.Read();\r\n```\r\n\r\nOutput!\r\n```\r\n31/12/2018 11:00:00 PM +00:00\r\n1/01/2019 1:00:00 AM +01:00\r\n1/01/2019 1:00:00 AM +00:00\r\n\r\n31/12/2013 11:00:00 PM +07:00\r\n31/12/2013 11:00:00 PM +06:00\r\n1/01/2014 1:00:00 AM +07:00\r\n\r\n31/12/2013 11:00:00 PM +04:00\r\n31/12/2013 11:00:00 PM +03:00\r\n1/01/2014 1:00:00 AM +04:00\r\n\r\n31/12/2018 11:00:00 PM +04:00\r\n31/12/2018 11:00:00 PM +03:00\r\n1/01/2019 1:00:00 AM +04:00\r\n```",
                                           "updatedAt":  "2023-02-06T21:45:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Uo_S-",
                                           "createdAt":  "2023-02-07T01:19:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "Agreed that there\u0027s some sort of bug.\r\nThis seems to be a Windows-only issue, so is either something in the base data or their specific format (Windows is.... special here).\r\n\r\nMy initial first guess would be that it\u0027s mishandling cases where the base offset for the timezone changes at some point during the year, and no DST, given that seems to be happening for those years for those timezones.  I believe the Windows data format and/or `TimeZoneInfo` may have some holes in this area.",
                                           "updatedAt":  "2023-02-07T01:19:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Utf65",
                                           "createdAt":  "2023-02-07T17:55:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "FWIW I see the same behavior on .NETCore 3.1 and 6.0, so this doesn\u0027t appear to be a regression.\r\n\r\n```\r\nC:\\scratch\\timeZone\u003eC:\\scratch\\timeZone\\bin\\Debug\\netcoreapp3.1\\timeZone.exe\r\n12/31/2014 11:30:00 PM +09:00\r\n12/31/2014 11:30:00 PM +08:30\r\n1/1/2015 12:30:00 AM +09:00\r\n\r\nC:\\scratch\\timeZone\u003eC:\\scratch\\timeZone\\bin\\Debug\\net6.0\\timeZone.exe\r\n12/31/2014 11:30:00 PM +09:00\r\n12/31/2014 11:30:00 PM +08:30\r\n1/1/2015 12:30:00 AM +09:00\r\n\r\nC:\\scratch\\timeZone\u003eC:\\scratch\\timeZone\\bin\\Debug\\net7.0\\timeZone.exe\r\n12/31/2014 11:30:00 PM +09:00\r\n12/31/2014 11:30:00 PM +08:30\r\n1/1/2015 12:30:00 AM +09:00\r\n```",
                                           "updatedAt":  "2023-02-07T17:55:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ut1tK",
                                           "createdAt":  "2023-02-07T19:05:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "This seems a bug, \r\n\r\nAccording to the Windows data, we have the following `North Korea Standard Time` rule for year `2015`. \r\n\r\n```\r\nDateStart                  : 01/01/2015 00:00:00 (Unspecified)\r\nDateEnd                    : 12/31/2015 00:00:00 (Unspecified)\r\nDaylightDelta              : 00:30:00\r\nDaylightTransitionStart    : M:1, D:1, W:1, DoW:Thursday, Time:01/01/0001 00:00:00, FixedDate:False\r\nDaylightTransitionEnd      : M:8, D:1, W:2, DoW:Friday, Time:01/01/0001 23:59:59, FixedDate:False\r\nBaseUtcOffsetDelta         : -00:30:00\r\nNoDaylightTransitions      : False\r\n```\r\n\r\nThe problem is the daylight saving is not detected in the first half hour of the year.  Calling `tz.IsDaylightSavingTime(utc.AddMinutes(30))`  return false while it should be true. This is why you are seeing 30:00 minutes shift in the converted time. \r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2023-02-07T19:06:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Uv0Sq",
                                           "createdAt":  "2023-02-08T01:46:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "... North Korea doesn\u0027t (and didn\u0027t) observe DST.  This is a base offset change only.",
                                           "updatedAt":  "2023-02-08T01:46:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Uv4Bg",
                                           "createdAt":  "2023-02-08T01:56:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@Clockwork-Muse right but the issue is Windows TZ data cannot describe the base offset change during the year (in August 2015). It seems to me to work around the issue in the data, it created a rule with DST that starts in the beginning of the year and ends in August. ",
                                           "updatedAt":  "2023-02-08T01:56:04Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "TimeZoneInfo bug changes offset twice within 1 hour",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81890",
        "createdAt":  "2023-02-09T14:50:14Z",
        "number":  81890,
        "author":  "tipa",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-28T16:30:35Z",
        "body":  "### Description\r\n\r\nI am using `DateTime.Now`, `DateTimeOffset.Now` and `DateTime.Today` frequently in my app (I think many apps do).\r\nBeing aware that adding the timezone data to the DateTime/Offset structures comes with a performance penalty, I am trying to avoid them as much as possible and am using `DateTime.UtcNow` \u0026 `DateTimeOffset.UtcNow` instead. However, this is not always possible. On Android particularly, loading the time zone can significantly slow down startup performance and there has been work done before here to mitigate this problem: https://github.com/dotnet/runtime/issues/71004\r\n\r\n### Data\r\n\r\nUsing [this script](https://github.com/jonathanpeppers/maui-profiling/blob/main/scripts/profile.ps1) and an empty Android .NET7 project I did some startup benchmarks. I started with an empty .NET for Android template.\r\n\r\n1. Added `Task.Delay(400).Wait();` to simulate startup work - no other changes: 713 ms\r\n2. \\+ `_ = DateTime.Now` to the MainActivity: 793 ms\r\n3. \\+ `_ = Task.Run(() =\u003e _ = DateTime.Today);` to `MainApplication.OnCreate`: 714 ms\r\n\r\nTests were done on a Samsung A52.\r\nDemo project used: [AndroidApp.zip](https://github.com/dotnet/runtime/files/10698291/AndroidApp.zip)\r\n\r\n### Analysis\r\n\r\nThere is still a performance penalty (~70ms) when using timezone-dependent time during app startup. It can be mitigated by triggering the timezone info retrieval process early in the startup process on a different thread.\r\n\r\nWould it be possible to trigger this process automatically during app startup so the timezone information is available immediately the first `DateTimeOffset.Now` et al is called?\r\n\r\nAlso, if `DateTime.Today` is called, the timezone offset does not need to be known. It can be calculated very fast (~1-2ms) using Android APIs:\r\n```\r\nar cal = Java.Util.Calendar.Instance;\r\nvar today = new DateTime(\r\n    cal.Get(Java.Util.CalendarField.Year),\r\n    cal.Get(Java.Util.CalendarField.Month) + 1,\r\n    cal.Get(Java.Util.CalendarField.DayOfMonth));\r\n```\r\n\r\nWould it be possible to calculate \u0026 cache a `DateTime.Today`-placeholder using the code above and return it from `DateTime.Today`-calls it while the timezone file is loaded and parsed in the background? That way I could use a penalty-free `DateTime.Today` right away when starting the app.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVOfGPw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5U5VJK",
                                           "createdAt":  "2023-02-09T14:53:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "/cc @steveisok @mdh1418 ",
                                           "updatedAt":  "2023-02-09T14:53:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U54bt",
                                           "createdAt":  "2023-02-09T16:21:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nI am using `DateTime.Now`, `DateTimeOffset.Now` and `DateTime.Today` frequently in my app (I think many apps do).\r\nBeing aware that adding the timezone data to the DateTime/Offset structures comes with a performance penalty, I am trying to avoid them as much as possible and am using `DateTime.UtcNow` \u0026 `DateTimeOffset.UtcNow` instead. However, this is not always possible. On Android particularly, loading the time zone can significantly slow down startup performance and there has been work done before here to mitigate this problem: https://github.com/dotnet/runtime/issues/71004\r\n\r\n### Data\r\n\r\nUsing [this script](https://github.com/jonathanpeppers/maui-profiling/blob/main/scripts/profile.ps1) and an empty Android .NET7 project I did some startup benchmarks. I started with an empty .NET for Android template.\r\n\r\n1. Added `Task.Delay(400).Wait();` to simulate startup work - no other changes: 713 ms\r\n2. \\+ `_ = DateTime.Now` to the MainActivity: 793 ms\r\n3. \\+ `_ = Task.Run(() =\u003e _ = DateTime.Today);` to `MainApplication.OnCreate`: 714 ms\r\n\r\nTests were done on a Samsung A52.\r\nDemo project used: [AndroidApp.zip](https://github.com/dotnet/runtime/files/10698291/AndroidApp.zip)\r\n\r\n### Analysis\r\n\r\nThere is still a performance penalty (~70ms) when using timezone-dependent time during app startup. It can be mitigated by triggering the timezone info retrieval process early in the startup process on a different thread.\r\n\r\nWould it be possible to trigger this process automatically during app startup so the timezone information is available immediately the first `DateTimeOffset.Now` et al is called?\r\n\r\nAlso, if `DateTime.Today` is called, the timezone offset does not need to be known. It can be calculated very fast (~1-2ms) using Android APIs:\r\n```\r\nar cal = Java.Util.Calendar.Instance;\r\nvar today = new DateTime(\r\n    cal.Get(Java.Util.CalendarField.Year),\r\n    cal.Get(Java.Util.CalendarField.Month) + 1,\r\n    cal.Get(Java.Util.CalendarField.DayOfMonth));\r\n```\r\n\r\nWould it be possible to calculate \u0026 cache a `DateTime.Today`-placeholder using the code above and return it from `DateTime.Today`-calls it while the timezone file is loaded and parsed in the background? That way I could use a penalty-free `DateTime.Today` right away when starting the app.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etipa\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`tenet-performance`, `os-android`, `untriaged`, `area-System.DateTime`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-09T16:21:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U58Y_",
                                           "createdAt":  "2023-02-09T16:32:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e```csharp\r\n\u003e ar cal = Java.Util.Calendar.Instance;\r\n\u003e```\r\n\r\n:shudder:\r\n`java.util.Calendar`.  Ah, the memories.  You\u0027re even demonstrating why it shouldn\u0027t be used any more (needing to add 1 to the month).\r\n\r\nXamarin has a couple of packages from `java.time`, I wonder why they didn\u0027t finish stubbing it out?  If they\u0027d finished with the zone handling you could probably have used that instead....",
                                           "updatedAt":  "2023-02-09T16:32:28Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "DateTime.Now / DateTime.Today / ... impacts Android startup",
        "labels":  [
                       "tenet-performance",
                       "os-android",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88062",
        "createdAt":  "2023-06-26T19:54:08Z",
        "number":  88062,
        "author":  "Tyrrrz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAo3lw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IEvangelist",
                                            "createdAt":  "2023-06-26T19:58:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Giorgi",
                                            "createdAt":  "2023-06-26T20:10:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattjohnsonpint",
                                            "createdAt":  "2023-06-26T20:20:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "haefele",
                                            "createdAt":  "2023-06-26T20:43:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2023-06-26T21:49:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dreamescaper",
                                            "createdAt":  "2023-06-26T22:06:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "montyclt",
                                            "createdAt":  "2023-06-26T22:12:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2023-06-26T22:32:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AngelMunoz",
                                            "createdAt":  "2023-06-26T22:36:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tyrrrz",
                                            "createdAt":  "2023-06-26T22:40:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SeanKilleen",
                                            "createdAt":  "2023-06-26T23:28:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2023-06-27T06:27:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dev-in-disguise",
                                            "createdAt":  "2023-06-27T07:22:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pedoc",
                                            "createdAt":  "2023-06-28T08:07:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MadProbe",
                                            "createdAt":  "2023-06-29T10:52:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "myd7349",
                                            "createdAt":  "2023-07-03T02:44:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "devsko",
                                            "createdAt":  "2025-03-29T11:28:49Z"
                                        }
                                    ],
                          "totalCount":  17
                      },
        "updatedAt":  "2024-10-21T08:28:09Z",
        "body":  "### Background and motivation\r\n\r\nA lot of tools that work with time strings (e.g. [FFmpeg](https://ffmpeg.org)), as well as data formats (e.g. [SRT](https://en.wikipedia.org/wiki/SubRip#SubRip_file_format)), use the following format for consuming and rendering timestamps:\r\n\r\n```\r\nhh:mm:ss.fff\r\n```\r\n\r\nThis is pretty similar to .NET\u0027s built-in `c` format, except that the latter has a component for days too:\r\n\r\n```\r\n[d.]hh:mm:ss.fff\r\n```\r\n\r\nIt would be incredibly convenient to have a separate built-in format that works exactly like `c`, but instead of rendering days, it should just render the total number of hours, even if they exceed a full day.\r\n\r\nBecause there is no formatting token for rendering hours beyond 24, currently the only workaround is to do something like this:\r\n\r\n```csharp\r\nvar value = TimeSpan.FromHours(27.123);\r\n\r\nvar str =\r\n    Math.Floor(value.TotalHours).ToString(\"00\") + \u0027:\u0027 +\r\n    value.Minutes.ToString(\"00\") + \u0027:\u0027 +\r\n    value.Seconds.ToString(\"00\") + \u0027.\u0027 +\r\n    value.Milliseconds.ToString(\"000\");\r\n```\r\n\r\nThis is pretty cumbersome. You can, of course, create an extension method to clean it up here, but that wouldn\u0027t work so well in the equivalent parsing scenario:\r\n\r\n```csharp\r\nvar str = \"27:07:22.680\";\r\n\r\nvar match = Regex.Match(str, @\"(\\d\\d):(\\d\\d):(\\d\\d\\.\\d+)\");\r\nif (match.Success)\r\n{\r\n    var hours = int.Parse(totalDurationMatch.Groups[1].Value, CultureInfo.InvariantCulture);\r\n    var minutes = int.Parse(totalDurationMatch.Groups[2].Value, CultureInfo.InvariantCulture);\r\n    var seconds = double.Parse(totalDurationMatch.Groups[3].Value, CultureInfo.InvariantCulture);\r\n\r\n    var value =\r\n        TimeSpan.FromHours(hours) +\r\n        TimeSpan.FromMinutes(minutes) +\r\n        TimeSpan.FromSeconds(seconds);\r\n}\r\n```\r\n\r\n### API Proposal\r\n\r\nI suggest adding a new standard format, for example ~~`ch`~~ `C` (I don\u0027t really care how it\u0027s called):\r\n\r\n```csharp\r\nvar value = TimeSpan.FromHours(27.123);\r\nvar str = value.ToString(\"C\"); // 27:07:22.680\r\n```\r\n\r\nIt should also be supported in `TimeSpan.ParseExact(...)` and related methods:\r\n\r\n```csharp\r\nvar str = \"27:07:22.680\";\r\nvar value = TimeSpan.ParseExact(str, \"C\", null);\r\n// { Days: 1, Hours: 3, Minutes: 7, Seconds: 22, Milliseconds: 680 }\r\n```\r\n\r\n### API Usage\r\n\r\nSee above\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkJlcsg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5f2qk2",
                                           "createdAt":  "2023-06-26T20:06:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nA lot of tools that work with time strings (e.g. FFmpeg), as well as data formats (e.g. SRT), use the following format for rendering timestamps:\r\n\r\n```\r\nhh:mm:ss.fff\r\n```\r\n\r\nThis is pretty similar to .NET\u0027s built-in `c` format, except that the latter has a component for days too:\r\n\r\n```\r\n[d.]hh:mm:ss.fff\r\n```\r\n\r\nIt would be incredibly convenient to have a separate built-in format that works exactly like `c`, but instead of rendering days, it should just render the total number of hours, even if it\u0027s beyond 24 hours.\r\n\r\nThe current workaround is to do this:\r\n\r\n```csharp\r\nvar value = TimeSpan.FromHours(27.123);\r\n\r\nvar str =\r\n    Math.Floor(value.TotalHours).ToString(\"00\", formatProvider) + \u0027:\u0027 +\r\n    value.Minutes.ToString(\"00\", formatProvider) + \u0027:\u0027 +\r\n    value.Seconds.ToString(\"00\", formatProvider) + \u0027.\u0027 +\r\n    value.Milliseconds.ToString(\"000\", formatProvider);\r\n```\r\n\r\nThis is pretty cumbersome.\n\n### API Proposal\n\nI suggest adding a new standard format, for example `ch`:\r\n\r\n```csharp\r\nvar value = TimeSpan.FromHours(27.123);\r\nvar str = value.ToString(\"ch\"); // 27:07:22.680\r\n```\r\n\n\n### API Usage\n\nSee above\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTyrrrz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-System.DateTime`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-26T20:06:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5f2wQU",
                                           "createdAt":  "2023-06-26T20:20:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD3UppQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tyrrrz",
                                                                               "createdAt":  "2023-06-26T20:50:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "huoyaoyuan",
                                                                               "createdAt":  "2023-06-27T04:34:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2023-06-27T11:29:02Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "crozone",
                                                                               "createdAt":  "2024-10-21T08:03:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "I love this idea, but `ch` wouldn\u0027t work, because _standard_ format strings have to be a single character.  I propose capital `C` instead.  (There is already precedence for lower-case vs upper-case standard format strings.)  Or pick a new character completely.\r\n\r\n\r\nAlso, we\u0027d have to solve a few related issues:\r\n- We\u0027d need a _custom_ format specifier for just the hours component, so that one could compose strings such as `\"27:00\"` without the seconds or fractional seconds components.  I suggest `H` and `HH`, which would work similarly to `h` and `hh` but, would allow exceeding 24 hours.\r\n- We need to think through negative variations also.  There\u0027s currently no custom format specifier for the sign, and it\u0027s not included with either `h` or `hh`.  [The docs](https://learn.microsoft.com/dotnet/standard/base-types/custom-timespan-format-strings) currently call this out as a deficiency (in the second paragraph of the first blue \"Important\" box on the page).\r\n- It\u0027s currently impossible to correctly _parse_ a string with more than 24 hours.  `TimeSpan.Parse(\"24:00\")` fails outright.  `TimSpan.Parse(\"24:00:00\")` thinks that should be 24 _days_.  `TimeSpan.ParseExact` with any parameters such as `h` or `hh` in the hours component fails because hours can\u0027t exceed 24.\r\n\r\n",
                                           "updatedAt":  "2023-06-26T20:20:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5f5Cn_",
                                           "createdAt":  "2023-06-27T04:42:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC_MBxw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2023-06-27T11:29:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tyrrrz",
                                                                               "createdAt":  "2023-06-27T11:51:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Note: a simpler workaround can be: `$\"{(int)value.TotalHours}:{value:mm\\\\:ss\\\\.fff}\"`.",
                                           "updatedAt":  "2023-06-27T04:42:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5f9gli",
                                           "createdAt":  "2023-06-27T17:43:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kasperk81",
                                           "body":  "`$\"{(int)value.TotalHours:00}:{value:mm\\\\:ss\\\\.fff}\"` for desired padding\r\n\r\n\u003e FFmpeg\r\n\r\nsee https://trac.ffmpeg.org/wiki/FFprobeTips#Duration. ffmpeg and srt don\u0027t use the exact same format. if there is something beyond srt using their format, or anything beyond ffmpeg using _their_ (different) format, then by all means go for it, otherwise it looks too niche to assign a formatting character.",
                                           "updatedAt":  "2023-06-27T17:43:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gcLTA",
                                           "createdAt":  "2023-07-03T11:22:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tyrrrz",
                                           "body":  "\u003e see [trac.ffmpeg.org/wiki/FFprobeTips#Duration](https://trac.ffmpeg.org/wiki/FFprobeTips#Duration). ffmpeg and srt don\u0027t use the exact same format. if there is something beyond srt using their format, or anything beyond ffmpeg using _their_ (different) format, then by all means go for it, otherwise it looks too niche to assign a formatting character.\r\n\r\nIndeed, there are some subtle differences but they are generally negligible (for example, you can use both `,` and `.` in SRT to separate fractions). I think having a separate token for unbounded hours (e.g. `HHH`) would be nice to handle those things. But ultimately, I think even a standard format as described in the OP will be useful. ",
                                           "updatedAt":  "2023-07-03T11:22:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6QmVyy",
                                           "createdAt":  "2024-10-21T08:27:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "crozone",
                                           "body":  "While having the new specifier wouldn\u0027t hurt for the common usecase, I think a better overall solution would be to go ahead and fix custom TimeSpan format strings. Currently custom TimeSpan format strings cannot even represent any of the standard format strings which is a major shortcoming. Extending the custom format functionality would probably solve the need for any new standard format string specifiers.",
                                           "updatedAt":  "2024-10-21T08:28:09Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: `TimeSpan.ToString(\"c\")` alternative that doesn\u0027t render days",
        "labels":  [
                       "api-suggestion",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90269",
        "createdAt":  "2023-08-09T20:23:01Z",
        "number":  90269,
        "author":  "mdh1418",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-13T11:33:20Z",
        "body":  "### Description\n\nAndroid\u0027s system `tzdata` file containing detailing timezone information contains TimeZones that are considered \"backwards\" (aka legacy timezones) by [Iana\u0027s distribution](https://www.iana.org/time-zones). A number of these \"backwards\" timezones will result in TimeZoneInfo objects that have the same `DisplayName` yet different `Id`s as exemplified in https://github.com/dotnet/runtime/issues/63693.\r\n\r\n[The fix](https://github.com/dotnet/runtime/pull/64028) at the time was to leverage a `tzlookup.xml` file that had been shipped alongside the `tzdata` file starting from https://android.googlesource.com/platform/system/timezone/+/35467e1256656196572e77251683e349d8f1055a and regard the time zone ids within that file as \"non-backwards\" ids.\r\n\r\nHowever, it was [noted](https://github.com/dotnet/runtime/issues/81373) that not all supported versions of Android (API \u003e= 25) will contain that `tzlookup.xml`, so it\u0027s unclear how to prevent duplicate DisplayNames from occurring.\r\n\r\nThe ultimate question is, what is the expectation for the set of timezones that is returned as the system timezones? Should timezones that are considered \"backwards\" be omitted or should they be considered as supported.\r\n\r\nOption 1: Remove \"backward\" Ids that result in the duplicate DisplayNames\r\n\r\nOption 2: Make the duplicate DisplayNames more unique\r\n\r\nNote: The Ids within the `tzlookup.xml` file on Android list some TimeZone Ids that are considered \"backwards\" by the [Iana distribution](https://www.iana.org/time-zones), so currently on Android 26+, we are filtering out (because of #64028) part of the set of \"backwards\" Ids, rather than an all or nothing.\r\n\r\nNote: On Android Studio, using `java.util.TimeZone` and `org.threeten.bp.ZoneId` will not filter out any Ids, and will still retain the duplicate DisplayNames.\r\n\r\n\n\n### Reproduction Steps\n\nAndroid API 21-25\r\n``` C#\r\nforeach (var tz in TimeZoneInfo.GetSystemTimeZones())\r\n{\r\n    Console.WriteLine($\"ID: {tz.Id} | Display Name: {tz.DisplayName}\");\r\n}\r\n```\n\n### Expected behavior\n\nNot sure if backward timezones should be omitted or not.\n\n### Actual behavior\n\nAll timezones within tzdata are returned, with some having the same DisplayName\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvS7ccQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jqicQ",
                                           "createdAt":  "2023-08-09T20:23:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nAndroid\u0027s system `tzdata` file containing detailing timezone information contains TimeZones that are considered \"backwards\" (aka legacy timezones) by [Iana\u0027s distribution](https://www.iana.org/time-zones). A number of these \"backwards\" timezones will result in TimeZoneInfo objects that have the same `DisplayName` yet different `Id`s as exemplified in https://github.com/dotnet/runtime/issues/63693.\r\n\r\n[The fix](https://github.com/dotnet/runtime/pull/64028) at the time was to leverage a `tzlookup.xml` file that had been shipped alongside the `tzdata` file starting from https://android.googlesource.com/platform/system/timezone/+/35467e1256656196572e77251683e349d8f1055a and regard the time zone ids within that file as \"non-backwards\" ids.\r\n\r\nHowever, it was [noted](https://github.com/dotnet/runtime/issues/81373) that not all supported versions of Android (API \u003e= 25) will contain that `tzlookup.xml`, so it\u0027s unclear how to prevent duplicate DisplayNames from occurring.\r\n\r\nThe ultimate question is, what is the expectation for the set of timezones that is returned as the system timezones? Should timezones that are considered \"backwards\" be omitted or should they be considered as supported.\r\n\r\nOption 1: Remove \"backward\" Ids that result in the duplicate DisplayNames\r\n\r\nOption 2: Make the duplicate DisplayNames more unique\r\n\r\nNote: The Ids within the `tzlookup.xml` file on Android list some TimeZone Ids that are considered \"backwards\" by the [Iana distribution](https://www.iana.org/time-zones), so currently on Android 26+, we are filtering out (because of #64028) part of the set of \"backwards\" Ids, rather than an all or nothing.\r\n\r\nNote: On Android Studio, using `java.util.TimeZone` and `org.threeten.bp.ZoneId` will not filter out any Ids, and will still retain the duplicate DisplayNames.\r\n\r\n\n\n### Reproduction Steps\n\nAndroid API 21-25\r\n``` C#\r\nforeach (var tz in TimeZoneInfo.GetSystemTimeZones())\r\n{\r\n    Console.WriteLine($\"ID: {tz.Id} | Display Name: {tz.DisplayName}\");\r\n}\r\n```\n\n### Expected behavior\n\nNot sure if backward timezones should be omitted or not.\n\n### Actual behavior\n\nAll timezones within tzdata are returned, with some having the same DisplayName\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emdh1418\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.DateTime`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-09T20:23:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jqimG",
                                           "createdAt":  "2023-08-09T20:23:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nAndroid\u0027s system `tzdata` file containing detailing timezone information contains TimeZones that are considered \"backwards\" (aka legacy timezones) by [Iana\u0027s distribution](https://www.iana.org/time-zones). A number of these \"backwards\" timezones will result in TimeZoneInfo objects that have the same `DisplayName` yet different `Id`s as exemplified in https://github.com/dotnet/runtime/issues/63693.\r\n\r\n[The fix](https://github.com/dotnet/runtime/pull/64028) at the time was to leverage a `tzlookup.xml` file that had been shipped alongside the `tzdata` file starting from https://android.googlesource.com/platform/system/timezone/+/35467e1256656196572e77251683e349d8f1055a and regard the time zone ids within that file as \"non-backwards\" ids.\r\n\r\nHowever, it was [noted](https://github.com/dotnet/runtime/issues/81373) that not all supported versions of Android (API \u003e= 25) will contain that `tzlookup.xml`, so it\u0027s unclear how to prevent duplicate DisplayNames from occurring.\r\n\r\nThe ultimate question is, what is the expectation for the set of timezones that is returned as the system timezones? Should timezones that are considered \"backwards\" be omitted or should they be considered as supported.\r\n\r\nOption 1: Remove \"backward\" Ids that result in the duplicate DisplayNames\r\n\r\nOption 2: Make the duplicate DisplayNames more unique\r\n\r\nNote: The Ids within the `tzlookup.xml` file on Android list some TimeZone Ids that are considered \"backwards\" by the [Iana distribution](https://www.iana.org/time-zones), so currently on Android 26+, we are filtering out (because of #64028) part of the set of \"backwards\" Ids, rather than an all or nothing.\r\n\r\nNote: On Android Studio, using `java.util.TimeZone` and `org.threeten.bp.ZoneId` will not filter out any Ids, and will still retain the duplicate DisplayNames.\r\n\r\n\n\n### Reproduction Steps\n\nAndroid API 21-25\r\n``` C#\r\nforeach (var tz in TimeZoneInfo.GetSystemTimeZones())\r\n{\r\n    Console.WriteLine($\"ID: {tz.Id} | Display Name: {tz.DisplayName}\");\r\n}\r\n```\n\n### Expected behavior\n\nNot sure if backward timezones should be omitted or not.\n\n### Actual behavior\n\nAll timezones within tzdata are returned, with some having the same DisplayName\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emdh1418\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`os-android`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-09T20:23:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jqjLS",
                                           "createdAt":  "2023-08-09T20:25:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nAndroid\u0027s system `tzdata` file containing detailing timezone information contains TimeZones that are considered \"backwards\" (aka legacy timezones) by [Iana\u0027s distribution](https://www.iana.org/time-zones). A number of these \"backwards\" timezones will result in TimeZoneInfo objects that have the same `DisplayName` yet different `Id`s as exemplified in https://github.com/dotnet/runtime/issues/63693.\r\n\r\n[The fix](https://github.com/dotnet/runtime/pull/64028) at the time was to leverage a `tzlookup.xml` file that had been shipped alongside the `tzdata` file starting from https://android.googlesource.com/platform/system/timezone/+/35467e1256656196572e77251683e349d8f1055a and regard the time zone ids within that file as \"non-backwards\" ids.\r\n\r\nHowever, it was [noted](https://github.com/dotnet/runtime/issues/81373) that not all supported versions of Android (API \u003e= 25) will contain that `tzlookup.xml`, so it\u0027s unclear how to prevent duplicate DisplayNames from occurring.\r\n\r\nThe ultimate question is, what is the expectation for the set of timezones that is returned as the system timezones? Should timezones that are considered \"backwards\" be omitted or should they be considered as supported.\r\n\r\nOption 1: Remove \"backward\" Ids that result in the duplicate DisplayNames\r\n\r\nOption 2: Make the duplicate DisplayNames more unique\r\n\r\nNote: The Ids within the `tzlookup.xml` file on Android list some TimeZone Ids that are considered \"backwards\" by the [Iana distribution](https://www.iana.org/time-zones), so currently on Android 26+, we are filtering out (because of #64028) part of the set of \"backwards\" Ids, rather than an all or nothing.\r\n\r\nNote: On Android Studio, using `java.util.TimeZone` and `org.threeten.bp.ZoneId` will not filter out any Ids, and will still retain the duplicate DisplayNames.\r\n\r\n\n\n### Reproduction Steps\n\nAndroid API 21-25\r\n``` C#\r\nforeach (var tz in TimeZoneInfo.GetSystemTimeZones())\r\n{\r\n    Console.WriteLine($\"ID: {tz.Id} | Display Name: {tz.DisplayName}\");\r\n}\r\n```\n\n### Expected behavior\n\nNot sure if backward timezones should be omitted or not.\n\n### Actual behavior\n\nAll timezones within tzdata are returned, with some having the same DisplayName\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emdh1418\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`os-android`, `area-System.DateTime`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-09T20:25:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jqjf4",
                                           "createdAt":  "2023-08-09T20:26:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDONAQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mdh1418",
                                                                               "createdAt":  "2023-08-09T20:36:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@mdh1418 I returned the area tag because all issues in the runtime repo should have area tag.",
                                           "updatedAt":  "2023-08-09T20:26:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j2Mzk",
                                           "createdAt":  "2023-08-11T17:40:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "It\u0027s not clear to me what is right to filter. And android doesn\u0027t seem to even attempt, so my feeling is that we should return them all even though there are duplicate names.",
                                           "updatedAt":  "2023-08-11T17:40:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j2OG5",
                                           "createdAt":  "2023-08-11T17:46:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@steveisok usually the returned list is used in the UI which will be ugly to show duplicates to the user. Look at https://github.com/dotnet/runtime/issues/63693 for more details.",
                                           "updatedAt":  "2023-08-11T17:46:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j2Pq-",
                                           "createdAt":  "2023-08-11T17:53:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "I agree it would be better for the UI, but @mdh1418 has indicated that we are returning some time zones that are considered backwards. It\u0027s not clear to me yet if we have enough data to get it right. ",
                                           "updatedAt":  "2023-08-11T17:53:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j2Rn-",
                                           "createdAt":  "2023-08-11T18:01:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDa5Pw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "steveisok",
                                                                               "createdAt":  "2023-08-11T18:18:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "This issue is marked for .NET 9.0, so we\u0027ll have some time to investigate and decide the best action. We have some random thoughts which can be a good starting point to investigate. ",
                                           "updatedAt":  "2023-08-11T18:01:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66biuu",
                                           "createdAt":  "2025-07-28T15:31:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidnguyen-tech",
                                           "body":  "Hi, were there any follow-ups regarding which approach we\u0027re leaning toward?",
                                           "updatedAt":  "2025-07-28T15:31:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66b9iV",
                                           "createdAt":  "2025-07-28T15:54:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEcSKoQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidnguyen-tech",
                                                                               "createdAt":  "2025-07-29T07:25:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "https://github.com/dotnet/runtime/issues/63693#issuecomment-1015684872",
                                           "updatedAt":  "2025-07-28T15:54:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68i08z",
                                           "createdAt":  "2025-08-07T09:15:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidnguyen-tech",
                                           "body":  "After a discussion with Tarek, I started implementing detecting legacy timezones by using `getCanonicalTimeZoneID` function from `ICU` library.\n\nAfter defining the `getCanonicalTimeZoneID` function in `pal_icushim_internal.h` and `pal_icushim_internal_android.h`, I ran into issues when trying to call the function on CoreCLR Android.\n\nThe `getCanonicalTimeZoneID_ptr` variable is initialized properly (is not null) at the end of `GlobalizationNative_LoadICU` function in `pal_icushim.c`, where all function pointers to ICU functions are initialized.\n\nLater, we return back to managed code. From there, we invoke a native function that needs to call `getCanonicalTimeZoneID`. However, when we check for `getCanonicalTimeZoneID_ptr` in this native function, it is suddenly null.\n\nIn summary:\n1. in native code we get to a point where: `getCanonicalTimeZoneID_ptr != NULL`\n2. we get to managed code and call native code again\n3. back in native code: `getCanonicalTimeZoneID_ptr == NULL`\n\nOn Mono Android however, `getCanonicalTimeZoneID_ptr` remains initialized and we are able to call the `getCanonicalTimeZoneID` function.\n",
                                           "updatedAt":  "2025-08-07T12:26:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68rdwG",
                                           "createdAt":  "2025-08-07T19:44:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@akoeplinger do you know if the Android builds link statically to the ICU libs? if so, do you have a pointer to the used static lib `libicui18n.a` to check if `ucal_getCanonicalTimeZoneID` is defined there?",
                                           "updatedAt":  "2025-08-07T19:44:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68w60B",
                                           "createdAt":  "2025-08-08T08:07:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdlYyg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidnguyen-tech",
                                                                               "createdAt":  "2025-08-08T08:09:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "@tarekgh no, we use the same dlsym code as other TARGET_UNIX systems on Android to dynamically look up the functions.",
                                           "updatedAt":  "2025-08-08T08:07:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc682Z29",
                                           "createdAt":  "2025-08-08T15:54:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Thanks for confirming @akoeplinger ",
                                           "updatedAt":  "2025-08-08T15:54:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69LZor",
                                           "createdAt":  "2025-08-11T09:12:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidnguyen-tech",
                                           "body":  "Update:\n\n- When checking the function pointer by using `getCanonicalTimeZoneID`, which should be a macro that expands to `getCanonicalTimeZoneID_ptr`, I found that:\n  - `getCanonicalTimeZoneID != NULL` and `getCanonicalTimeZoneID_ptr == NULL`\n- @akoeplinger found that:\n  - installing the app via xharness, and running it in emulator\u0027s UI does *not* crash\n  - installing the app via Android Studio, and runningit via xharness  *does* crash\n- installing and running via xharness crashes on my machine, but not on @akoeplinger\u0027s machine.",
                                           "updatedAt":  "2025-08-11T09:12:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc69Ltxx",
                                           "createdAt":  "2025-08-11T09:38:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidnguyen-tech",
                                           "body":  "Created a draft PR to share my code changes: #118573",
                                           "updatedAt":  "2025-08-11T09:38:59Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "[Android][TimeZoneInfo] GetSystemTimeZones returns timezones leading to duplicate DisplayNames API 21-25",
        "labels":  [
                       "os-android",
                       "in-pr",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93216",
        "createdAt":  "2023-10-09T13:16:53Z",
        "number":  93216,
        "author":  "Yqwed",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-18T13:46:18Z",
        "body":  "This is a spin-off from https://github.com/mono/mono/pull/21682, as @mdh1418 suggested to do.\r\n\r\n tl;dr:\r\n1. As I understand, current implementation reads Android\u0027s tzdata directly. Here are few problems with that: neither its location nor its structure is documented or guaranteed. I don\u0027t know what .NET\u0027s API surface is, but _maybe_ ICU4C would suffice. Overall it endangers users as PR above illustrates.\r\n2. How does current .NET implementation handles [TZif4](https://www.ietf.org/archive/id/draft-murchison-rfc8536bis-07.html) files?\r\n3. Do you have tests like [this](https://android.googlesource.com/platform/libcore/+/refs/heads/main/luni/src/test/java/libcore/java/time/TimeApisConsistencyTest.java)? I think old Mono implementation would fail on `Asia/Gaza` as it has predefined transition up to 2086 (does not fit into 32-bit section of TZif ver. 1)\r\n4. We usually [make](https://r.android.com/2162196) tzdata changes early in the release cycle. Can you include Android beta builds into testing matrix?\r\n\r\nHappy to answer your questions!\r\n\r\nThanks,\r\nAlmaz",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObZ_zJg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ofQ9B",
                                           "createdAt":  "2023-10-09T13:34:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis is a spin-off from https://github.com/mono/mono/pull/21682, as @mdh1418 suggested to do.\r\n\r\n tl;dr:\r\n1. As I understand, current implementation reads Android\u0027s tzdata directly. Here are few problems with that: neither its location nor its structure is documented or guaranteed. I don\u0027t know what .NET\u0027s API surface is, but _maybe_ ICU4C would suffice. Overall it endangers users as PR above illustrates.\r\n2. How does current .NET implementation handles [TZif4](https://www.ietf.org/archive/id/draft-murchison-rfc8536bis-07.html) files?\r\n3. Do you have tests like [this](https://android.googlesource.com/platform/libcore/+/refs/heads/main/luni/src/test/java/libcore/java/time/TimeApisConsistencyTest.java)? I think old Mono implementation would fail on `Asia/Gaza` as it has predefined transition up to 2086 (does not fit into 32-bit section of TZif ver. 1)\r\n4. We usually [make](https://r.android.com/2162196) tzdata changes early in the release cycle. Can you include Android beta builds into testing matrix?\r\n\r\nHappy to answer your questions!\r\n\r\nThanks,\r\nAlmaz\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eYqwed\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-09T13:34:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ofRFy",
                                           "createdAt":  "2023-10-09T13:34:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis is a spin-off from https://github.com/mono/mono/pull/21682, as @mdh1418 suggested to do.\r\n\r\n tl;dr:\r\n1. As I understand, current implementation reads Android\u0027s tzdata directly. Here are few problems with that: neither its location nor its structure is documented or guaranteed. I don\u0027t know what .NET\u0027s API surface is, but _maybe_ ICU4C would suffice. Overall it endangers users as PR above illustrates.\r\n2. How does current .NET implementation handles [TZif4](https://www.ietf.org/archive/id/draft-murchison-rfc8536bis-07.html) files?\r\n3. Do you have tests like [this](https://android.googlesource.com/platform/libcore/+/refs/heads/main/luni/src/test/java/libcore/java/time/TimeApisConsistencyTest.java)? I think old Mono implementation would fail on `Asia/Gaza` as it has predefined transition up to 2086 (does not fit into 32-bit section of TZif ver. 1)\r\n4. We usually [make](https://r.android.com/2162196) tzdata changes early in the release cycle. Can you include Android beta builds into testing matrix?\r\n\r\nHappy to answer your questions!\r\n\r\nThanks,\r\nAlmaz\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eYqwed\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Globalization`, `os-android`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-09T13:34:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ofo1p",
                                           "createdAt":  "2023-10-09T14:30:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "Appreciate the feedback! I\u0027ll try to answer your questions to the best of my knowledge. \r\n\r\n\u003e 1. As I understand, current implementation reads Android\u0027s tzdata directly. Here are few problems with that: neither its location nor its structure is documented or guaranteed. I don\u0027t know what .NET\u0027s API surface is, but _maybe_ ICU4C would suffice. Overall it endangers users as PR above illustrates.\r\n\r\nUp until this point, we\u0027ve felt that was an acceptable risk reading from tzdata as it has the least impact on startup performance and I don\u0027t believe ICU4C covers everything. As an alternative, we could call the java API\u0027s via JNI, but I would like to avoid that unless it\u0027s absolutely necessary.\r\n\r\n\u003e 2. How does current .NET implementation handles [TZif4](https://www.ietf.org/archive/id/draft-murchison-rfc8536bis-07.html) files?\r\n\r\nIt appears we only support up to v3 and we will fall back to v1 in the case of a unsupported version https://github.com/dotnet/runtime/blob/a5461cbc8ed20e0981fd4e846a180f35b07dcc0a/src/libraries/System.Private.CoreLib/src/System/TimeZoneInfo.Unix.cs#L1324-L1327\r\n\r\n@tarekgh are there any plans on supporting v4?\r\n\r\n\u003e 3. Do you have tests like [this](https://android.googlesource.com/platform/libcore/+/refs/heads/main/luni/src/test/java/libcore/java/time/TimeApisConsistencyTest.java)? I think old Mono implementation would fail on `Asia/Gaza` as it has predefined transition up to 2086 (does not fit into 32-bit section of TZif ver. 1)\r\n\r\nThe way dotnet/runtime parses tzdata appears to be a bit more robust than what we had in mono/mono. I\u0027m not sure if `Asia/Gaza` is part of our test cases, but it would be interesting to try it and see if there\u0027s an issue.\r\n\r\nGood question re: the TimeApisConsistencyTest test. @tarekgh, would you happen to know if we have an equivalent.\r\n\r\n\u003e 4. We usually [make](https://r.android.com/2162196) tzdata changes early in the release cycle. Can you include Android beta builds into testing matrix?\r\n\r\nYes, we have the capability of adding different emulators to our CI. This is something we should do more aggressively. \r\n",
                                           "updatedAt":  "2023-10-09T14:30:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ofvRJ",
                                           "createdAt":  "2023-10-09T14:45:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Yqwed",
                                           "body":  "Thanks for quick answer!\r\n\r\n\u003e Up until this point, we\u0027ve felt that was an acceptable risk reading from tzdata as it has the least impact on startup performance and I don\u0027t believe ICU4C covers everything. As an alternative, we could call the java API\u0027s via JNI, but I would like to avoid that unless it\u0027s absolutely necessary.\r\n\r\nYeah, I understand why you took that path :) Like Java APIs, do you also need to know information about past and upcoming transitions?\r\n\r\n\u003e @tarekgh are there any plans on supporting v4?\r\n\r\nIt is available as a draft only, but AFAIU current zic [can produce TZif4](https://github.com/eggert/tz/blob/f390e94af3d604a8a73c4bf7e7bf3229de62940e/NEWS#L742) files. But we don\u0027t support it [either](http://cs/h/android/platform/superproject/main/+/main:external/icu/android_icu4j/libcore_bridge/src/java/com/android/i18n/timezone/ZoneInfoData.java?l=337). I think it\u0027s better to be vocal about such things, because otherwise it will take a while to find the root cause.\r\n\r\nI don\u0027t know whether it is a good idea to fallback to V1 - it has 32-bit data only and slim format skips it entirely, producing valid TZif file (that\u0027s exactly what happened in https://github.com/mono/mono/pull/21682). And even if it has 32-bit data we are getting closer to 2038, were it may not work correctly.\r\n\r\n\u003e Yes, we have the capability of adding different emulators to our CI. This is something we should do more aggressively.\r\n\r\nSGTM!\r\n",
                                           "updatedAt":  "2023-10-09T14:45:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ogTgz",
                                           "createdAt":  "2023-10-09T16:13:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis is a spin-off from https://github.com/mono/mono/pull/21682, as @mdh1418 suggested to do.\r\n\r\n tl;dr:\r\n1. As I understand, current implementation reads Android\u0027s tzdata directly. Here are few problems with that: neither its location nor its structure is documented or guaranteed. I don\u0027t know what .NET\u0027s API surface is, but _maybe_ ICU4C would suffice. Overall it endangers users as PR above illustrates.\r\n2. How does current .NET implementation handles [TZif4](https://www.ietf.org/archive/id/draft-murchison-rfc8536bis-07.html) files?\r\n3. Do you have tests like [this](https://android.googlesource.com/platform/libcore/+/refs/heads/main/luni/src/test/java/libcore/java/time/TimeApisConsistencyTest.java)? I think old Mono implementation would fail on `Asia/Gaza` as it has predefined transition up to 2086 (does not fit into 32-bit section of TZif ver. 1)\r\n4. We usually [make](https://r.android.com/2162196) tzdata changes early in the release cycle. Can you include Android beta builds into testing matrix?\r\n\r\nHappy to answer your questions!\r\n\r\nThanks,\r\nAlmaz\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eYqwed\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`os-android`, `area-System.DateTime`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-09T16:13:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ogcQZ",
                                           "createdAt":  "2023-10-09T16:40:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e It is available as a draft only, but AFAIU current zic [can produce TZif4](https://github.com/eggert/tz/blob/f390e94af3d604a8a73c4bf7e7bf3229de62940e/NEWS#L742) files. But we don\u0027t support it [either](http://cs/h/android/platform/superproject/main/+/main:external/icu/android_icu4j/libcore_bridge/src/java/com/android/i18n/timezone/ZoneInfoData.java?l=337). I think it\u0027s better to be vocal about such things, because otherwise it will take a while to find the root cause.\r\n\r\nI am seeing the draft is expired and it is not clear to me if this is approved spec now or just abandoned? It is not a good idea to take dependency on such expired draft till we have confirmation it is going to be supported. \r\n\r\n\u003e Good question re: the TimeApisConsistencyTest test. @tarekgh Tarek Mahmoud Sayed FTE, would you happen to know if we have an equivalent.\r\n\r\nThis test according to the comments there is testing different Java implementation when using ICU or when bionic. This is irrelevant to .NET as we don\u0027t use ICU anyway and only depend on reading the tzdata. We treat `Asia/Gaza` as any other time zone and not special casing it in any way. \r\n\r\n```\r\nOn Android, java.time is implemented using ICU4J, bionic and java.util.TimeZone read transitions\r\n * from tzdata file. These tests ensure that they have consistent view on what offset was on a given\r\n * time zone at a given time.\r\n```",
                                           "updatedAt":  "2023-10-09T16:40:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oghdZ",
                                           "createdAt":  "2023-10-09T16:57:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Yqwed",
                                           "body":  "\u003e I am seeing the draft is expired and it is not clear to me if this is approved spec now or just abandoned? It is not a good idea to take dependency on such expired draft till we have confirmation it is going to be supported.\r\n\r\nYes. What I am saying is that in the wild you might observe it with the relatively recent zic version.\r\n\r\n\u003e This test according to the comments there is testing different Java implementation when using ICU or when bionic. This is irrelevant to .NET as we don\u0027t use ICU anyway and only depend on reading the tzdata. We treat Asia/Gaza as any other time zone and not special casing it in any way.\r\n\r\nWhat I am suggesting is you can compare libc vs .NET. It might have caught https://github.com/mono/mono/pull/21682 if dates outside of 2038 were tested. I am mentioning `Asia/Gaza` because it observes DST, but due to the _way_ transitions are set they are pregenerated and there is no TZ string in its TZif files.",
                                           "updatedAt":  "2023-10-09T16:57:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ogp1N",
                                           "createdAt":  "2023-10-09T17:25:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e Yes. What I am saying is that in the wild you might observe it with the relatively recent zic version.\r\n\r\nare we aware of any product using zic generated files with v4? \r\n\r\n\u003e What I am suggesting is you can compare libc vs .NET. It might have caught https://github.com/mono/mono/pull/21682 if dates outside of 2038 were tested. I am mentioning Asia/Gaza because it observes DST, but due to the way transitions are set they are pregenerated and there is no TZ string in its TZif files.\r\n\r\nAre you interested in submitting a PR adding a test for that? If not, that is ok, we can try to add this test later. ",
                                           "updatedAt":  "2023-10-09T17:25:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ogtw3",
                                           "createdAt":  "2023-10-09T17:39:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Yqwed",
                                           "body":  "\u003e are we aware of any product using zic generated files with v4?\r\n\r\nMy point is that it\u0027s outside of your control and AFAIK no distro gives guarantees about TZif version of files under `/usr/share/zoneinfo` (i.e. it is not an API, unlike `libc`). I am not asking to support it, but suggesting to let user know when that happens, be it logging or throwing an exception instead of silently falling back to UTC,\r\n\r\n\u003e Are you interested in submitting a PR adding a test for that? If not, that is ok, we can try to add this test later.\r\n\r\nI have 0 knowledge of .NET/C# and being a googler does not help either :) It is not urgent, I am just raising awareness as it might affect users in the same way as the bug mentioned in https://github.com/dotnet/runtime/issues/93216#issue-1933048192 did and still does, as developers need to rebuild and republish their apps.",
                                           "updatedAt":  "2023-10-09T17:39:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ogvWG",
                                           "createdAt":  "2023-10-09T17:45:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "\u003e My point is that it\u0027s outside of your control and AFAIK no distro gives guarantees about TZif version of files under /usr/share/zoneinfo (i.e. it is not an API, unlike libc). I am not asking to support it, but suggesting to let user know when that happens, be it logging or throwing an exception instead of silently falling back to UTC,\r\n\r\nthrowing is not a good idea here as this can cause the whole app/service to crash. We are trying to be tolerant in such cases as apps can continue running if such issues arises. we may look at if we can either workaround the issue or log some info about  it when encountering it. \r\n\r\n\u003e I have 0 knowledge of .NET/C# and being a googler does not help either :) It is not urgent, I am just raising awareness as it might affect users in the same way as the bug mentioned in https://github.com/dotnet/runtime/issues/93216#issue-1933048192 did and still does, as developers need to rebuild and republish their apps.\r\n\r\nThanks for your help so far, we appreciate that. We can try later to look at this time zone and find out which dates/times are problematic to validate it. ",
                                           "updatedAt":  "2023-10-09T17:45:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5olyaJ",
                                           "createdAt":  "2023-10-10T08:49:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Yqwed",
                                           "body":  "\u003e throwing is not a good idea here as this can cause the whole app/service to crash. We are trying to be tolerant in such cases as apps can continue running if such issues arises. we may look at if we can either workaround the issue or log some info about it when encountering it.\r\n\r\nIt depends. By the time users notice that everything falls back to UTC it might be too [late](https://arstechnica.com/security/2023/08/windows-feature-that-resets-system-clocks-based-on-random-data-is-wreaking-havoc). Though logging definitely wouldn\u0027t hurt.",
                                           "updatedAt":  "2023-10-10T08:49:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5thyle",
                                           "createdAt":  "2023-12-03T19:22:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "uniquecorn",
                                           "body":  "Hi, I\u0027m not sure if this is the same issue but TimeZoneInfo.Local returns UTC time when set to Peru Standard Time on Android.",
                                           "updatedAt":  "2023-12-03T19:22:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5thzBp",
                                           "createdAt":  "2023-12-03T19:26:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@mdh1418 can you help investigating `Peru Standard Time` issue on Android?",
                                           "updatedAt":  "2023-12-03T19:26:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tnor9",
                                           "createdAt":  "2023-12-04T17:15:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mdh1418",
                                           "body":  "Hi @uniquecorn , could you provide more details regarding what dotnet sdk version is being used, whether an Android device or simulator is being used, what is the Android OS version, and any other information you think would be helpful for reproducing what you\u0027re seeing.\r\n\r\nBuilding a .NET 8 Android App on an Android emulator with API 33 with Time zone set to `GMT-05:00 Peru Standard Time` with the following\r\n```\r\n        Console.WriteLine($\"Local: {TimeZoneInfo.Local}\");\r\n        Console.WriteLine($\"UTC: {TimeZoneInfo.Utc}\");\r\n```\r\nI see\r\n```\r\n12-02 05:37:28.586 21088 21105 I DOTNET  : Local: (UTC-05:00) Peru Standard Time (Lima)\r\n12-02 05:37:28.586 21088 21105 I DOTNET  : UTC: (UTC) Coordinated Universal Time\r\n```",
                                           "updatedAt":  "2023-12-04T17:15:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tn_Mm",
                                           "createdAt":  "2023-12-04T18:09:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODOdAZA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mdh1418",
                                                                               "createdAt":  "2023-12-04T19:56:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "uniquecorn",
                                           "body":  "\u003e Hi @uniquecorn , could you provide more details regarding what dotnet sdk version is being used, whether an Android device or simulator is being used, what is the Android OS version, and any other information you think would be helpful for reproducing what you\u0027re seeing.\n\u003e \n\u003e \n\u003e \n\u003e Building a .NET 8 Android App on an Android emulator with API 33 with Time zone set to `GMT-05:00 Peru Standard Time` with the following\n\u003e \n\u003e ```\n\u003e \n\u003e         Console.WriteLine($\"Local: {TimeZoneInfo.Local}\");\n\u003e \n\u003e         Console.WriteLine($\"UTC: {TimeZoneInfo.Utc}\");\n\u003e \n\u003e ```\n\u003e \n\u003e I see\n\u003e \n\u003e ```\n\u003e \n\u003e 12-02 05:37:28.586 21088 21105 I DOTNET  : Local: (UTC-05:00) Peru Standard Time (Lima)\n\u003e \n\u003e 12-02 05:37:28.586 21088 21105 I DOTNET  : UTC: (UTC) Coordinated Universal Time\n\u003e \n\u003e ```\n\nSorry I didn\u0027t specify but I\u0027m using the dotnet implementation in Unity which I\u0027m not even sure of the version. I\u0027m also not sure about the device models, it was reported by multiple users of my app and when I checked debug logs for those users TimeZoneInfo.Local returns UTC. If the issue is not on your end then it\u0027s likely that Unity\u0027s dotnet is not updated with the Peru timezone. Thank you for your help though!",
                                           "updatedAt":  "2023-12-04T18:09:32Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "[Android] Timezone APIs on Android",
        "labels":  [
                       "os-android",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97622",
        "createdAt":  "2024-01-28T23:38:59Z",
        "number":  97622,
        "author":  "robloo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9NcqQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mrxx99",
                                            "createdAt":  "2024-02-02T00:06:38Z"
                                        },
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-07-30T18:08:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fitdev",
                                            "createdAt":  "2024-12-05T07:41:19Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-07-30T14:13:15Z",
        "body":  "### Background and motivation\r\n\r\n.NET now has many different DateTime types: `DateTime`, `DateTimeOffset`, `DateOnly`, etc. Each of these were added for good reasons.\r\n\r\n * `DateTime` : The original but fails to account for time zone offsets\r\n * `DateTimeOffset` : Accounts for only a numerical DateTimeOffset (not named IANA zones)\r\n * `DateOnly` : Simplified dates without worrying about time and timezone offsets complicating calculations\r\n * `TimeOnly` : Simplified again with only time-related components.\r\n\r\nBut there is one obvious gap. For UI programming IANA time zone or Windows ID time zones are required for user selection. It\u0027s not 1:1 to convert this to/from a numerical time zone offset which means `DateTimeOffset` can\u0027t be used in some cases as well. Then 3rd party libraries come into play to fill this gap.\r\n\r\nNow we have way too many Date/Time types to manage and no way to do it in a generic way. So my proposal is something like the `INumber` interface to bring all of this together.\r\n\r\nThe use cases are not only for backend code. But also for UI controls. For example UI frameworks can start writing generic Date/TimePickers and allow the app to define the type they need to work with. An `IDate` interface is perfect for this to support all known date/time types (since a DatePicker control only cares about the date-related components).\r\n\r\n### API Proposal\r\n\r\nI\u0027ll flesh this out when I have more time.\r\n\r\n```csharp\r\npublic interface IDate\r\n{\r\n  int Day;\r\n  int Month;\r\n  int Year;\r\n}\r\n\r\npublic interface IDateTime\r\n{\r\n  int Day;\r\n  int Month;\r\n  int Year;\r\n  int Hour;\r\n  int Minute;\r\n  int Second;\r\n}\r\n\r\npublic interface ITime\r\n{\r\n  int Hour;\r\n  int Minute;\r\n  int Second;\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\nTBD\r\n\r\n```csharp\r\n\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nIt needs to be discussed:\r\n\r\n 1. Whether to call these interfaces `IDateOnly` and `ITimeOnly` instead and model them almost entirely based on `DateOnly` and `TimeOnly`. Then `IDateTime` will simply be a union of the two interfaces.\r\n 2. The specific members to include in `ITimeOnly` are debatable. Should this be only high-level hours/minutes/seconds (all that usually needed for general-purpose or UI code) or should it include all members down to ticks. The answer is likely all members down to ticks. However, some 3rd party libraries may not support all these members. Therefore, there could be multiple levels to these interfaces like what was done for INumber. Basically `IBasicTimeOnly` with only hours/minutes/seconds and then an `ITimeOnly` that derives from that and includes everything.\r\n\r\n### Risks\r\n\r\nThis seems low risk to me as it is only abstracting common, shared properties already used in all the types.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhls7YQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5yEa7m",
                                           "createdAt":  "2024-01-28T23:39:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\n.NET now has many different DateTime types: `DateTime`, `DateTimeOffset`, `DateOnly`, etc. Each of these were added for good reasons.\r\n\r\n * `DateTime` : The original but fails to account for time zone offsets\r\n * `DateTimeOffset` : Accounts for only a numerical DateTimeOffset (not named IANA zones)\r\n * `DateOnly` : Simplified dates without worrying about time and timezone offsets calculating calculations\r\n * `TimeOnly` : Simplified again with only time components.\r\n\r\nBut there is one obvious gap. For UI programming IANA time zone or Windows ID time zones are required for user selection. It\u0027s not 1:1 to convert this to/from a numerical time zone offset which means `DateTimeOffset` can\u0027t be used in some cases as well. Then 3rd party libraries come into play to fill this gap.\r\n\r\nNow we have way too many Date/Time types to manage and no way to do it in a generic way. So my proposal is something like the new INumber interface to bring all of this together.\r\n\r\nThe use cases are not only for backend code. But also for UI controls. For example UI frameworks can start writing generic Date/TimePickers and allow the app to define the type they need to work with. An `IDate` interface is perfect for this to support all known date/time types (since a DatePicker control only cares about the date-related components).\n\n### API Proposal\n\nI\u0027ll flesh this out when I have more time.\r\n\r\n```csharp\r\npublic interface IDate\r\n{\r\n  int Day;\r\n  int Month;\r\n  int Year;\r\n}\r\n\r\npublic interface IDateTime\r\n{\r\n  int Day;\r\n  int Month;\r\n  int Year;\r\n  int Hour;\r\n  int Minute;\r\n  int Second;\r\n}\r\n\r\npublic interface ITime\r\n{\r\n  int Hour;\r\n  int Minute;\r\n  int Second;\r\n}\r\n```\r\n\n\n### API Usage\n\nTBD\r\n\r\n```csharp\r\n\r\n```\r\n\n\n### Alternative Designs\n\nIt needs to be discussed:\r\n\r\n 1. Whether to call these interfaces `IDateOnly` and `ITimeOnly` instead and model them almost entirely based on `DateOnly` and `TimeOnly`. Then `IDateTime` will simply be a union of the two interfaces.\r\n 2. The specific members to include in `ITimeOnly` are debatable. Should this be only high-level hours/minutes/seconds (all that usually needed for general-purpose or UI code) or should it include all members down to ticks. The answer is likely all members down to ticks. However, some 3rd party libraries may not support all these members. Therefore, there could be multiple levels to these interfaces like what was done for INumber. Basically `IBasicTimeOnly` with only hours/minutes/seconds and then an `ITimeOnly` that derives from that and includes everything.\n\n### Risks\n\nThis seems low risk to me as it is only abstracting common, shared properties already used in all the types.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erobloo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-System.DateTime`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-28T23:39:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yEfLU",
                                           "createdAt":  "2024-01-29T00:24:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Would something like nodatime be expected to expose it too?\n@mattjohnsonpint ",
                                           "updatedAt":  "2024-01-29T00:24:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yEfqk",
                                           "createdAt":  "2024-01-29T00:29:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "robloo",
                                           "body":  "@danmoseley Yes, I was thinking of NodaTime specifically when I mentioned 3rd party libraries.",
                                           "updatedAt":  "2024-01-29T00:29:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yJsxL",
                                           "createdAt":  "2024-01-29T16:49:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODsJw7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-01-30T19:12:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-30T18:08:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "What exactly is your scenario here? Can you describe the details of the problem you are trying to solve here and how the proposal will solve it? Having some code examples will help here. \r\n\r\nWe have exposed TimeProvider for time abstraction in general. ",
                                           "updatedAt":  "2024-01-29T16:54:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yJs8l",
                                           "createdAt":  "2024-01-29T16:50:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.",
                                           "updatedAt":  "2024-01-29T16:50:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yJ9nf",
                                           "createdAt":  "2024-01-29T17:22:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODsJxOw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "chrisoverzero",
                                                                               "createdAt":  "2024-01-30T19:53:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrxx99",
                                                                               "createdAt":  "2024-02-02T00:09:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dameng324",
                                                                               "createdAt":  "2024-02-21T02:23:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-30T18:09:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "robloo",
                                           "body":  "@tarekgh I\u0027m not sure why you immediately flagged this as needs authors attention. It also is unexpected that you don\u0027t recognize the utility of this. It seems obvious as explained above and the thinking is the same as `INumber`.\r\n\r\n\u003e What exactly is your scenario here? \r\n\r\nI explained the background of the scenario above. We have too many Date/Time types and it\u0027s difficult to manage the types in both backends and frontends in a general-purpose way.\r\n\r\nI would also advise you to speak internally with the team that developed the `INumber` interface. Their reasons for doing so are the same as I\u0027m proposing here.\r\n\r\n\u003e  Can you describe the details of the problem you are trying to solve here and how the proposal will solve it?\r\n\r\nYes, this originates here: https://github.com/AvaloniaUI/Avalonia/discussions/13480. In developing UI controls the underlying date/time type has become an issue. Old controls in WPF used `DateTime` new controls in WinUI use `DateTimeOffset`. However, each is only to select a date and really should be using `DateOnly` but that didn\u0027t exist until recently. This creates a problem for app developers that now need to manage two different types (`DateTime` or `DateTimeOffset`) as well as their nullability. We need to clean all of this up and just let the app developer specify the type they want to use. These controls can operate on anything (generally speaking) as long as it has Year/Month/Day components to increment/decrement.\r\n\r\nLong term you really need to remove DateTime, add a time zone ID component to DateTimeOffset and then use DateTimeOffset internally for all APIs. That will likely never happen though and is out of scope for this discussion.\r\n\r\n\u003e We have exposed TimeProvider for time abstraction in general.\r\n\r\nThis is irrelevant. I\u0027m not talking about providing time. I\u0027m talking about making general-purpose code that can edit/modify any date/time types. I was clear about that above.\r\n",
                                           "updatedAt":  "2024-01-29T17:22:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yKNLk",
                                           "createdAt":  "2024-01-29T18:00:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODz7nyA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "martincostello",
                                                                               "createdAt":  "2024-01-29T18:04:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-01-30T19:13:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-30T18:10:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2024-09-28T09:12:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "I was tagged, so I\u0027ll add my opinions. First, let\u0027s get a few things out of the way...\r\n\r\n\u003e Long term you really need to remove DateTime ... and then use DateTimeOffset internally for all APIs.\r\n\r\nThat would be a bad idea, and defeat the whole purpose of having distinct purpose-specific date/time types.  The whole reason `DateOnly` and `TimeOnly` were added is because there are many needs for having types that just handle one aspect or another.  Same with `DateTime` and `DateTimeOffset`. If `DateTime` were removed, then you\u0027d always have to have an offset, and would be unable to handle scenarios where an offset is not available or appropriate.\r\n\r\n\u003e ... add a time zone ID component to DateTimeOffset ...\r\n\r\nThis has been discussed before.  It would be called something like `ZonedDateTime` or `DateTimeZoned`, `DateTimeWithZone`, etc.  NodaTime has this, as do date/time libraries in other languages.  But as you say, it\u0027s not what this issue is about.\r\n\r\n\u003e ... the thinking is the same as `INumber`\r\n\r\nSorry, but I strongly disagree.  `INumber` is about supporting [generic math](https://learn.microsoft.com/dotnet/standard/generics/math), not UI binding.\r\n\r\nOK - now on to the discussion about the interfaces.  The main questions I have are, how do they actually solve the UI binding concern you described, and is it actually a real problem?  A date-time picker control needs to ultimately bind to or produce a date and time, while a date-only picker control ultimately needs to bind to or produce a date, etc.  An offset picker is quite different than a time zone ID picker, etc.  It seems to me that the problem manifests only if one is attempting to build a single control to handle all scenarios, rather than scenerio-specific controls to match their scenerio-specific types.\r\n\r\nEven if one wanted to support this, I\u0027m not convinced that an interface-centric approach truly solves the problem.  How does the control know what concrete type to construct? If it passes it back on an interface, will downstream code know how to handle it?  For example, I can see a problem where a control developer decides to use NodaTime but the consuming application doesn\u0027t.  If the date-picker constructs a NodaTime `LocalDate` and passes it back on an `IDate` interface, an exception would occur when the app receives it and tries to cast it to a `DateOnly`?  Even if the app used `IDate` throughout their models, what happens when a storage client such as SQL Client receives it? If knows nothing about NodaTime types, it won\u0027t be able to work with it unless its internals are also updated to recognize the `IDate` interface.\r\n\r\nIn general, I\u0027m not a fan of interfaces on value types anyway.  There\u0027s enough confusion as it stands trying to know when to use an interface or a concrete type for collections, but if folks start thinking they have to use `IDate` or `IDateTime` in their models, it\u0027s going to be even more confusing.\r\n\r\nThe rabbit hole is very deep here.\r\n\r\nI suggest rather than trying to cram interfaces into the date-time types, someone who is more saavy on UI binding than I am should suggest another way that UI controls could bind to various similar types to solve the original concern.",
                                           "updatedAt":  "2024-01-29T18:00:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yKYXF",
                                           "createdAt":  "2024-01-29T18:29:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-JrLg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrxx99",
                                                                               "createdAt":  "2024-02-02T00:15:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2024-12-09T08:37:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "robloo",
                                           "body":  "\u003e If DateTime were removed, then you\u0027d always have to have an offset, and would be unable to handle scenarios where an offset is not available or appropriate.\r\n\r\nOk, I\u0027ll give you that one in principle. In practice almost all code I\u0027ve seen really needs either DateOnly or a DateTimeOffset these days. DateTime does nothing but create complications even when used correctly. Anyway, I shouldn\u0027t have mentioned it as it\u0027s out of scope.\r\n\r\n\u003e\u003e... the thinking is the same as INumber\r\n\u003e\r\n\u003eSorry, but I strongly disagree. INumber is about supporting [generic math]\r\n\r\nYou misunderstand half of my point. Of course it is useful in UI control development but I was clear there are backend uses as well. For example internally in our code base there is a DateRange type with a Start/End member. This has to be duplicated for every single Date/Time type that it needs to operate with which should be unnecessary. So, just like `INumber` this class should ideally be `DateRange{T} : where T : IDateTime`. There are several other date and time calculations that could be similarly abstracted. So I disagree with your disagreement :)\r\n\r\n\u003e The main questions I have are, how do they actually solve the UI binding concern you described, and is it actually a real problem? A date-time picker control needs to ultimately bind to or produce a date and time, while a date-only picker control ultimately needs to bind to or produce a date, etc. \r\n\r\nI think you are missing my point here.\r\n\r\n - DatePicker / CalendarDatePicker controls should support working with any `IDateOnly` type (DateTime, DateTimeOffset, DateOnly). As you said they don\u0027t need to care about time.\r\n - TimePicker controls should support working with ITimeOnly types as well (DateTime, DateTimeOffset, TimeOnly, TimeSpan). Although the majority of the complexity arises from here. Time is the most complicated to consider.\r\n\r\nConcerning binding, these controls will choose an internal type to operate with and then copy values over to the bound type supporting the interface. Works just fine as long as we capture the necessary members in the interfaces.\r\n\r\n\u003e An offset picker is quite different than a time zone ID picker, etc. \r\n\r\nNo... time zone ID is out of scope. I was clear about that above. It isn\u0027t supported in these .NET types anyway... I\u0027m also fully aware of NodaTime.\r\n\r\n\u003e  It seems to me that the problem manifests only if one is attempting to build a single control to handle all scenarios, rather than scenerio-specific controls to match their scenerio-specific types.\r\n\r\nYes, EXACTLY, there is a lot of duplication to support all these types in BOTH control\u0027s (frontend) and backend (as I mentioned above). Anyone who has spent time developing related controls will see the benefits here.\r\n\r\n\u003e How does the control know what concrete type to construct?\r\n\r\ndefault(T)... then copy the memebers from the internal type used (it doesn\u0027t matter) to the the external SelectedDate/Time. As long as everyone implements IDateOnly (for example) this works.\r\n\r\n\u003e If the date-picker constructs a NodaTime LocalDate and passes it back on an IDate interface, an exception would occur when the app receives it and tries to cast it to a DateOnly?\r\n\r\nAgain, no, you are writing bad code if this happens. We have the type information passed to the control as a generic type argument. If you see my linked proposal about generic controls I\u0027m actually proposing something like `DatePicker{T}` so there is a concrete type defined for the corresponding `SelectedDate` property. I\u0027m not exposing these as `IDateOnly`. `where T : IDateOnly` is the constraint on the control itself.\r\n\r\nFor backend code (for example by `DateRange` example) this also isn\u0027t an issues. We only need access to the `IDateOnly` member information for the calculations.\r\n\r\n\u003e Even if the app used IDate throughout their models, what happens when a storage client such as SQL Client receives it? If knows nothing about NodaTime types, it won\u0027t be able to work with it unless its internals are also updated to recognize the IDate interface.\r\n\r\nYes, of course any backend code unaware of `IDateOnly` or `IDate` whatever it\u0027s called cannot effectively use it. Code must be updated to be aware of `IDateOnly` and it\u0027s intended ONLY for calculation purposes like `INumber`. You can\u0027t be passing this to a database without defining a concrete type. So while you recognize a limitation here you are also missing a point. I\u0027m proposing the same as what `INumber` allows.\r\n\r\n\u003e The rabbit hole is very deep here.\r\n\r\nNot as deep as you make it sound.\r\n\r\n\u003e I suggest rather than trying to cram interfaces into the date-time types, someone who is more saavy on UI binding than I am should suggest another way that UI controls could bind to various similar types to solve the original concern.\r\n\r\nDon\u0027t focus on only UI. That is the example used where this came up. It applies just as much to backend date calculation code.\r\n\r\n---\r\n\r\nEvery time I interact with the Microsoft team I feel I have to say please look big picture. Please see the larger vision here. If you look at the big picture to start it\u0027s clear the direction we need to go. We really need, at minimum, an `IDateOnly` interface that implements most members of `DateOnly` and then implement that interface on the following types: `DateTime`, `DateTimeOffset`, `DateOnly`. Doing that would solve the majority of the ask here and really isn\u0027t that difficult. I could do it myself.\r\n\r\n\r\n",
                                           "updatedAt":  "2024-01-29T18:29:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yKhbp",
                                           "createdAt":  "2024-01-29T18:53:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODVFbWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Mrxx99",
                                                                               "createdAt":  "2024-02-02T00:15:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "robloo",
                                           "body":  "Let me put this another way that is simplified for everyone. In a perfect OOP design (ignoring struct limations) we would have the following types (focusing only on dates for this example).\r\n\r\n * DateOnly\r\n * DateTime : DateOnly\r\n * DateTimeOffset : DateTime\r\n\r\nNote how each derives members from the previous while adding new functionality. Code (unless it need specific members) could be written to target the base type DateOnly and work with all types. We have an enormous amount of examples for general-purpose code targeting base types only.\r\n\r\nI\u0027m simply proposing an `IDateOnly` interface to effectively support this (analogous to `INumber`). This is both because we are working with structs and the types evolved organically not designed from the get-go with each other in mind.\r\n\r\nUse cases are:\r\n 1. Front-end development where only Date selection matters (most cases honestly)\r\n 2. Back-end date calculations where again only dates matter. This commonly includes things like IsBetween calculations with a Start/End date, etc...\r\n\r\n---\r\n\r\nNow if you expand that line of thinking from dates only in the example above to dates and times. You will also understand why I\u0027m proposing all three interfaces.",
                                           "updatedAt":  "2024-01-29T18:53:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yKvsq",
                                           "createdAt":  "2024-01-29T19:32:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODUtfmQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "robloo",
                                                                               "createdAt":  "2024-01-29T19:46:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-01-30T19:15:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "If this moves forward, my vote would be for `IDate` and `ITime` interfaces only.  `IDateOnly` is redundant wording IMHO, and no need for an `IDateTime` interface when `DateTime` can just implement both `IDate` and `ITime`.  I\u0027ll let others respond to the rest.  (FWIW, I left Microsoft a few years ago, and was never part of the core .NET team.)",
                                           "updatedAt":  "2024-01-29T19:32:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yK2AE",
                                           "createdAt":  "2024-01-29T19:49:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "robloo",
                                           "body":  "I agree IDateTime is redundant and it\u0027s not much more work to type both. IDateTime was only convenience.\n\nI thought IDateOnly would be more obvious since it\u0027s basically abstracting the members in DateOnly. I also agree it\u0027s redundant wording there too though and my personal preference is for IDate. Since we went with DateOnly instead of Date elsewhere it might need to follow for the original reasons and for consistency though.",
                                           "updatedAt":  "2024-01-29T19:49:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yK3CC",
                                           "createdAt":  "2024-01-29T19:52:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Windows10CE",
                                           "body":  "\u003e \u003e How does the control know what concrete type to construct?\r\n\u003e \r\n\u003e default(T)... then copy the memebers from the internal type used (it doesn\u0027t matter) to the the external SelectedDate/Time. As long as everyone implements IDateOnly (for example) this works.\r\n\r\nAll of the types being discussed here are currently `readonly struct`s, and as such cannot be copied into in this fashion. Are you also suggesting this should be changed? If you are not, this proposal probably needs to change to reflect that somehow, maybe by making the interface generic over TSelf with `With(Day/Month/Year/Hour/Minute/Second/etc)` methods that return TSelf, similar to INumber\u003cTSelf\u003e?",
                                           "updatedAt":  "2024-01-29T19:52:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yK5An",
                                           "createdAt":  "2024-01-29T19:57:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "robloo",
                                           "body":  "\u003e All of the types being discussed here are currently readonly structs, and as such cannot be copied into in this fashion. Are you also suggesting this should be changed? If you are not, this proposal probably needs to change to reflect that somehow, maybe by making the interface generic over TSelf with With(Day/Month/Year/Hour/Minute/Second/etc) methods that return TSelf, similar to INumber?\n\nAh yea, my mistake and that\u0027s an oversight. \n\nIn several cases it\u0027s only necessary for the interface to constrain a generic type argument to a class or method. The concrete type would still always be defined in usage and IDateOnly/IDate would be used read only... that said you are right.\n\nI will amend the proposal to require TSelf on the interfaces directly.\n\n\n",
                                           "updatedAt":  "2024-01-29T19:57:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yK6Xs",
                                           "createdAt":  "2024-01-29T20:01:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODUtf7A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "robloo",
                                                                               "createdAt":  "2024-01-29T20:18:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-01-30T19:16:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e Let me put this another way that is simplified for everyone. In a perfect OOP design (ignoring struct limations) we would have the following types (focusing only on dates for this example).\r\n\u003e \r\n\u003e * DateOnly\r\n\u003e * DateTime : DateOnly\r\n\u003e * DateTimeOffset : DateTime\r\n\u003e \r\n\u003e Note how each derives members from the previous while adding new functionality. Code (unless it need specific members) could be written to target the base type DateOnly and work with all types. \r\n\r\n... what about time-of-day?  eg, why no `TimeOnly` type in that hierarchy?\r\nAnd the answer shouldn\u0027t be \"because you can only extend one type\", because then the question just becomes \"Why didn\u0027t you choose time as the base type?\".\r\n\r\nThis violates the general principle of \"Prefer composition over inheritance\".  Note that date/time types have very little behavior comparatively, instead (almost) being purely dumb datatypes.\r\n",
                                           "updatedAt":  "2024-01-29T20:01:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yLA48",
                                           "createdAt":  "2024-01-29T20:17:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODsJ1NQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "chrisoverzero",
                                                                               "createdAt":  "2024-01-30T19:54:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-30T18:17:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "robloo",
                                           "body":  "@Clockwork-Muse Read the last part of the comment you quoted after the separator. IT WAS A SIMPLIFIED EXAMPLE. I mentioned this several times in the comment itself and it\u0027s also obvious in the issue description at the very top. Of course time is included in the discussion.\n\nIf at the end of the day we can only agree on date to be added I would take that by itself though as it\u0027s more useful.",
                                           "updatedAt":  "2024-01-29T20:17:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GWzth",
                                           "createdAt":  "2024-07-27T11:46:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ScarletKuro",
                                           "body":  "\u003e What exactly is your scenario here? Can you describe the details of the problem you are trying to solve here and how the proposal will solve it? Having some code examples will help here.\r\n\r\nOur use case is Blazor. We are working on MudBlazor and we have components like DatePicker and TimePicker. For example, with DatePickers, we want users to be able to use `DateTime`, `DateTimeOffset`, and `DateOnly`. Currently, this can be achieved in three ways:\r\n\r\n1. Create different variations of the component: `DatePickerDateOnly`, `DatePickerDateTime`, and `DatePickerDateTimeOffset`. This approach is too boilerplate.\r\n2. Use `object`, which requires a lot of casting and type checking.\r\n3. Use generics without any constraints, which is similar to using `object`.\r\n\r\nThe `INumber` interface works very well for us. For example, we use it with slider, allowing users to bind to any type that supports `INumber`.\r\n\r\nPerhaps if discriminated unions will make into the language it can be solved with it instead.",
                                           "updatedAt":  "2024-07-30T14:13:15Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "[API Proposal]: IDate, IDateTime, ITime Interfaces",
        "labels":  [
                       "api-suggestion",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100667",
        "createdAt":  "2024-04-05T11:42:43Z",
        "number":  100667,
        "author":  "mrpmorris",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-20T23:12:22Z",
        "body":  "### Description\r\n\r\nI have an instance of DateTimeOffset retrieve from an API. I now need to use this internally as a UTC `DateTime` to query against a SQL Server database column that has a type `datetime2(7)`.\r\n\r\nMy problem is that the date.Kind is set to `Unspecified`, so it is assumed to be in local time, and then the value is adjusted for the query.\r\n\r\nSo I find myself having to do this...\r\n```\r\nDateTime fromUtc = DateTime.SpecifyKind(query.From.ToUniversalTime().DateTime, DateTimeKind.Utc);\r\n```\r\n\r\nInstead of this\r\n```\r\nDateTime fromUtc = query.From.ToUniversalTime().DateTime;\r\n```\r\n\r\nWhich is something I cannot rely on other developers on the system remembering to do, and might not have reared its head if we hadn\u0027t got such excellent unit tests.....or the UK hadn\u0027t shifted into Daylight Savings this week :)\r\n\r\n### Reproduction Steps\r\n\r\nSee expected behaviour for unit tests.\r\n\r\n### Expected behavior\r\n\r\n```\r\npublic class DateTimeOffsetTests\r\n{\r\n    [Fact]\r\n    public void WhenConvertingToUniversalTime_ThenTheDateTimeShouldBeDateTimeKindUtc()\r\n    {\r\n        DateTimeOffset subject = DateTimeOffset.Parse(\"2024-04-01T12:34:56+10:00\").ToUniversalTime();\r\n        Assert.Equal(DateTimeKind.Utc, subject.DateTime.Kind);\r\n    }\r\n\r\n    [Fact]\r\n    public void WhenConvertingToLocalTime_ThenTheDateTimeShouldBeDateTimeKindLocal()\r\n    {\r\n        DateTimeOffset subject = DateTimeOffset.Parse(\"2024-04-01T12:34:56+10:00\").ToLocalTime();\r\n        Assert.Equal(DateTimeKind.Local, subject.DateTime.Kind);\r\n    }\r\n}\r\n```\r\n\r\n### Actual behavior\r\n\r\nThe DateTime returned always has `Kind == DateTimeKind.Unspecified`\r\n\r\n### Regression?\r\n\r\nIt seems it has always been this way.\r\n\r\n### Known Workarounds\r\n\r\nDateTime.SpecifyKind\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\nIf this cannot be done due to it being a breaking change, may I recommend DateTimeOffset has two new properties\r\n\r\n- public DateTime LocalDateTime =\u003e ...\r\n- public DateTime UniversalDateTime =\u003e ...\r\n\r\nThese could set the DateTime.Kind appropriately, and then ToLocalTime() and ToUniversalTime() could (optionally) be marked as obsolete.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeepm_g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc55oHUX",
                                           "createdAt":  "2024-04-05T20:12:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "This was deliberate, to avoid the property being out-of-sync with the offset.  \r\nNote that:\r\n - In many cases the `DateTime.Kind` would end up being `Unspecified` anyways (since in most cases it\u0027s going to not be local or UTC)\r\n - An offset of 0 might not actually be UTC (this would be more obvious if there was an equivalent `DateTimeZoned` type).\r\n\r\n\u003e If this cannot be done due to it being a breaking change, may I recommend DateTimeOffset has two new properties\r\n\r\nBreaking change, yes, but these properties already exist, eg: [`DateTimeOffset.UtcDateTime`](https://learn.microsoft.com/en-us/dotnet/api/system.datetimeoffset.utcdatetime?view=net-8.0)\r\n\r\n\u003e Which is something I cannot rely on other developers on the system remembering to do, and might not have reared its head if we hadn\u0027t got such excellent unit tests.....or the UK hadn\u0027t shifted into Daylight Savings this week :)\r\n\r\nThis implies your API server isn\u0027t running on UTC, which it should be (for safety reasons, as here).",
                                           "updatedAt":  "2024-04-05T20:12:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55qDBS",
                                           "createdAt":  "2024-04-06T12:10:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrpmorris",
                                           "body":  "@Clockwork-Muse When I do ToUniversalTime or ToLocalTime it adjusts the offset automatically in the result.\r\n\r\nAs far as I know, if you are in +00:00 and convert to UTC then it is equivalent, so it doesn\u0027t matter which it returns.\r\n\r\nMy dev machine isn\u0027t running in UTC, you are correct.\r\n\r\n\r\n",
                                           "updatedAt":  "2024-04-06T12:10:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55qnT1",
                                           "createdAt":  "2024-04-06T21:49:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e When I do ToUniversalTime or ToLocalTime it adjusts the offset automatically in the result.\r\n\r\nSure, but those methods are intended to return `DateTimeOffset`, not `DateTime`.  Instead of:\r\n```csharp\r\nDateTime fromUtc = DateTime.SpecifyKind(query.From.ToUniversalTime().DateTime, DateTimeKind.Utc);\r\n```\r\nYou only need:\r\n```csharp\r\nDateTime fromUtc = query.From.UtcDateTime;\r\n```\r\n\r\n\u003e My dev machine isn\u0027t running in UTC, you are correct.\r\n\r\nThe timezone of your dev (or any other) machine should be irrelevant.  If it\u0027s affecting test results in any way, you have bugs (in actual application, tests, or both) - API and other \"server\" applications should always explicitly specify the relevant timezone and culture for all operations (which aren\u0027t always UTC/invariant, if you\u0027re dealing with user-centric data), and not use the ambient machine/process culture.\r\n\r\nThe reason servers are traditionally set to UTC is for \"safety\" reasons, in case applications are **not** written correctly.  (And also because historically computers didn\u0027t really understand the concept of timezones)\r\n\r\nEnforcing the correct typing is something you\u0027re going to need to handle appropriately in your own org, likely with code reviews.  Especially in server applications `DateTimeKind`s `Local` and `Unspecified` are almost never useful; outright banning `DateTime` in most of your application is potentially viable, other than whatever small glue layers are required (as here).  If you\u0027re doing more involved date/time work (eg, a calendar/scheduling application), you will likely find NodaTime more ergonomic and useful/helpful.\r\n",
                                           "updatedAt":  "2024-04-06T21:49:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55rp27",
                                           "createdAt":  "2024-04-07T14:21:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrpmorris",
                                           "body":  "@Clockwork-Muse If DateTimeOffset is adjusting to UTC or Local time then its DateTime property should also reflect that.",
                                           "updatedAt":  "2024-04-07T14:21:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55sSD9",
                                           "createdAt":  "2024-04-07T23:54:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  " - As I said before, no, that\u0027s a major breaking change in behavior.  (Anything relying on it is probably already subtly broken, but changing it would likely break even correctly implemented stuff)\r\n - `Local` in particular is problematic, because if the timezone changes for any reason there\u0027s now a mismatch between the offset and the assumption of \"local\".  Note that this is made worse due to the fact that changes to the current timezone can come from any thread, so can be any part of your application can do this silently.  Have fun with that!\r\n\r\nFrom somebody who\u0027s thought a lot about date/time, `DateTimeKind` as a concept is fundamentally flawed, especially for server applications.  Except when necessary for legacy APIs, you\u0027re better off treating `DateTime` as if the `Kind` is always `Unspecified` - but in most cases you should be using `DateTimeOffset` and relying on the offset (or using NodaTime if doing work with future dates/scheduling).",
                                           "updatedAt":  "2024-04-07T23:54:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc552Zfj",
                                           "createdAt":  "2024-04-09T07:18:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mrpmorris",
                                           "body":  "I disagree, but I don\u0027t think arguing the point with you would be productive if you are not the person who gets to make the decision, no offence intended here at all.\r\n\r\nI have presented my argument as to why it is not a good implementation, and also suggested a non-breaking alternative to solve the problem.",
                                           "updatedAt":  "2024-04-09T07:18:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc556mb-",
                                           "createdAt":  "2024-04-09T15:01:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  ".... I\u0027ve been trying to point out to you that your proposed non-breaking alternative is already implemented.",
                                           "updatedAt":  "2024-04-09T15:01:57Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "DateTimeOffset - ToLocalTime().DateTime and ToUniversalTime().DateTime return wrong DateTimeKind",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101069",
        "createdAt":  "2024-04-15T17:17:29Z",
        "number":  101069,
        "author":  "universe83",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-20T17:33:13Z",
        "body":  "### Description\r\n\r\nOctober 26th, 2022, order from the Mexican Government, changes in time zones.\r\nhttps://techcommunity.microsoft.com/t5/daylight-saving-time-time-zone/mexico-2023-time-zone-updates-now-available/ba-p/3749684\r\n\r\nSystem.TimeZoneInfo.FindSystemTimeZoneById return wrong time zone info for the following IANA ids: \"America/Ojinaga\", \"America/Chihuahua\", \"America/Ciudad_Juarez\"\r\n\r\n### Reproduction Steps\r\n\r\n```C#\r\nnamespace ConsoleAppTest {\r\n    internal class Program {\r\n        static void Main(string[] args) {\r\n            Console.WriteLine($\"-- {GetTimeZone(\"America/Matamoros\")}\");\r\n            Console.WriteLine($\"-- {GetTimeZone(\"America/Ojinaga\")}\");\r\n            Console.WriteLine($\"-- {GetTimeZone(\"America/Monterrey\")}\");\r\n            Console.WriteLine($\"-- {GetTimeZone(\"America/Mexico_City\")}\");\r\n            Console.WriteLine($\"-- {GetTimeZone(\"America/Chihuahua\")}\");\r\n            Console.WriteLine($\"-- {GetTimeZone(\"America/Bahia_Banderas\")}\");\r\n            Console.WriteLine($\"-- {GetTimeZone(\"America/Merida\")}\");\r\n            Console.WriteLine($\"-- {GetTimeZone(\"America/Cancun\")}\");\r\n            try {\r\n                Console.WriteLine($\"-- {GetTimeZone(\"America/Ciudad_Juarez\")}\"); //New Zone\r\n            } catch (Exception e) { Console.WriteLine($\"-- {e}\"); }\r\n            Console.WriteLine($\"-- {GetTimeZone(\"America/Mazatlan\")}\");\r\n            Console.WriteLine($\"-- {GetTimeZone(\"America/Tijuana\")}\");\r\n            Console.WriteLine($\"-- {GetTimeZone(\"America/Hermosillo\")}\");\r\n        }\r\n        public static string GetTimeZone(string id) {\r\n            const string dateFormat = \"yyyy/MM/dd HH:mm\";\r\n            DateTime currentDateUTC = System.DateTime.UtcNow;\r\n            var timeZoneInfo = System.TimeZoneInfo.FindSystemTimeZoneById(id);\r\n            DateTime currentDateTimeZone = System.TimeZoneInfo.ConvertTimeFromUtc(currentDateUTC, timeZoneInfo);\r\n            return $\"currentDateUTC:{currentDateUTC.ToString(dateFormat)}, currentDateTimeZone:{currentDateTimeZone.ToString(dateFormat)}, TimeZoneIdentifier:{timeZoneInfo.Id}, WindowsTimeZoneId:{GetWindowsTimeZoneId(id)}, IsDaylightSavingTime:{timeZoneInfo.IsDaylightSavingTime(currentDateTimeZone)}, BaseUtcOffset:{timeZoneInfo.BaseUtcOffset}, TimeZoneUtcOffset:{timeZoneInfo.GetUtcOffset(currentDateUTC)}\";\r\n        }\r\n        public static string GetWindowsTimeZoneId(string ianaid) {\r\n            if (System.TimeZoneInfo.TryConvertIanaIdToWindowsId(ianaid, out string? winId)) {\r\n                return winId;\r\n            }\r\n            throw new System.TimeZoneNotFoundException($\"No Windows time zone found for IANA Id {ianaid}.\");\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n### Expected behavior\r\n\r\n- System.TimeZoneInfo.FindSystemTimeZoneById(\"America/Ojinaga\") should return time zone info for Windows Time Zone \"Central Standard Time\"\r\n- System.TimeZoneInfo.FindSystemTimeZoneById(\"America/Chihuahua\") should return time zone info for Windows Time Zone \"Central Standard Time (Mexico)\"\r\n- System.TimeZoneInfo.FindSystemTimeZoneById(\"America/Ciudad_Juarez\") should return time zone info for Windows Time Zone \"Mountain Standard Time\"\r\n\r\n\r\n### Actual behavior\r\n\r\n- System.TimeZoneInfo.FindSystemTimeZoneById(\"America/Ojinaga\") return time zone info for Windows Time Zone \"Mountain Standard Time\"\r\n- System.TimeZoneInfo.FindSystemTimeZoneById(\"America/Chihuahua\") return time zone info for Windows Time Zone \"Mountain Standard Time (Mexico)\"\r\n- System.TimeZoneInfo.FindSystemTimeZoneById(\"America/Ciudad_Juarez\") throws System.TimeZoneNotFoundException: The time zone ID \u0027America/Ciudad_Juarez\u0027 was not found on the local computer.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n- Which version of .NET is the code running on?: .NET 8\r\n- What OS and version, and what distro if applicable?: Windows 11 Pro 22631.3296\r\n- What is the architecture (x64, x86, ARM, ARM64)?: x64\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeqHyMA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc56ofIw",
                                           "createdAt":  "2024-04-15T17:17:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-15T17:17:54Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Wrong time zones México, System.TimeZoneInfo.FindSystemTimeZoneById",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101393",
        "createdAt":  "2024-04-22T18:07:35Z",
        "number":  101393,
        "author":  "alexandrehtrb",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC3bjDg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2024-04-22T22:42:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xor-el",
                                            "createdAt":  "2024-04-23T20:45:36Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-09-04T14:55:18Z",
        "body":  "### Background and motivation\r\n\r\nCurrently, it is difficult in .NET to compare equality of DateTime(Offset) when parts need to be ignored, such as milliseconds and seconds. Check this [Stack Overflow question](https://stackoverflow.com/questions/7028930/ignore-milliseconds-when-comparing-two-datetimes).\r\n\r\n### API Proposal\r\n\r\nSame for TimeSpan, DateTime and DateTimeOffset. `EqualsExact` would also have this overload, but considering TimeZoneOffset / DateTimeKind too.\r\n\r\n```csharp\r\nnamespace System;\r\n\r\npublic readonly struct DateTimeOffset\r\n{\r\n    public bool Equals(DateTimeOffset other, TimeSpan margin);\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar dt = DateTime.Parse(\"Wed, 21 Oct 2015 07:28:00 GMT\");\r\nTimeSpan margin1ms = TimeSpan.FromMilliseconds(1.0),\r\n         margin1s = TimeSpan.FromSeconds(1.0),\r\n         margin1min = TimeSpan.FromMinutes(1.0);\r\n\r\nif (DateTime.Now.Equals(dt, margin1ms))\r\n{\r\n  Console.WriteLine(\"Same date and time, up to milliseconds precision\");\r\n}\r\nelse if (DateTime.Now.Equals(dt, margin1s))\r\n{\r\n  Console.WriteLine(\"Same date and time, up to seconds precision\");\r\n}\r\nelse if (DateTime.Now.Equals(dt, margin1min))\r\n{\r\n  Console.WriteLine(\"Same date and time, up to minutes precision\");\r\n}\r\n```\r\n\r\n### Alternative Designs\r\n\r\nOpen for suggestions.\r\n\r\n### Risks\r\n\r\nI don\u0027t see any, at first sight.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOimrIvQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc57aRMA",
                                           "createdAt":  "2024-04-22T18:07:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-22T18:07:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57bRUW",
                                           "createdAt":  "2024-04-22T19:24:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfNvKg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "CooperMidnight",
                                                                               "createdAt":  "2024-04-23T11:25:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "I wonder if exposing some `DateTimeOffset.Truncate` method for this instead would make more sense.",
                                           "updatedAt":  "2024-04-22T19:24:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57bRV3",
                                           "createdAt":  "2024-04-22T19:24:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "...As a point of personal preference, date/time values should generally be considered equivalent to floating point (yes, it\u0027s generally exactly representable, but due to the measurement nature you can still end up with odd values).  This tends to make me want to encourage one of two general behaviors:\r\n - Explicit range comparisons and striding, especially for bucketing.  Instead of performing an equality comparison as here, in many cases it will be preferrable to construct ranges (of the form lower-bound inclusive, upper-bound exclusive), and checking whether a value is in that range.  Especially at larger units this is generally how the domain is actually being used (eg, bucketing for an hourly report) - and note that it works correctly for **all** units, including years.\r\n - Equals with an \"ulp\", as how floats are compared.  In some small number of cases (possibly only when dealing with smaller units), it may be more beneficial to compare with an ulp; consider that at smaller units especially there is a high likelihood the values you\u0027re interested in may be on the \"wrong side\" of the unit boundary.",
                                           "updatedAt":  "2024-04-22T19:24:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6A-SDw",
                                           "createdAt":  "2024-06-12T20:06:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexandrehtrb",
                                           "body":  "\u003e  checking whether a value is in that range\r\n\r\nI think this is already covered by today, isn\u0027t it? Like:\r\n\r\n```cs\r\nvar dt = DateTime.Parse(\"Wed, 21 Oct 2015 07:28:00 GMT\");\r\nbool isToday = DateTime.Today \u003c= dt \u0026\u0026 dt \u003c DateTime.Today.AddDays(1.0);\r\n```\r\n\r\n\u003e  Equals with an \"ulp\"\r\n\r\nIs an \"ulp\" an error margin? Then the API would be something like:\r\n\r\n```cs\r\npublic readonly struct DateTimeOffset\r\n{\r\n    public bool Equals(DateTimeOffset other, TimeSpan margin);\r\n}\r\n```\r\n\r\nI like this latter option too.",
                                           "updatedAt":  "2024-06-12T20:06:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BHA4L",
                                           "createdAt":  "2024-06-13T16:01:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "Yes... but I\u0027m hesitant to use a type that would exclude years or months, just on general principle.",
                                           "updatedAt":  "2024-06-13T16:01:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BjDaZ",
                                           "createdAt":  "2024-06-17T13:50:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexandrehtrb",
                                           "body":  "\u003e Yes... but I\u0027m hesitant to use a type that would exclude years or months, just on general principle.\r\n\r\nI think that using a `DateTimeComparison` enum would be a better option for most cases. If we use adopt a method with `TimeSpan margin`, the programmer would have to allocate this margin, which is more work for him / her; but if we adopt an enum, then no need for that. The enum also would solve the problem you mentioned - considering up to years, months, etc.",
                                           "updatedAt":  "2024-06-17T13:50:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BkA9j",
                                           "createdAt":  "2024-06-17T15:22:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "The problem is that the proposed enum is generally too coarse.  For instance, it doesn\u0027t allow for comparisons at a 10ms boundary... and that assumes that, especially at smaller measurements, truncation is the desired behavior.  For instance, the historical \"step\" of consumer computer clocks was ~15ms, and there wasn\u0027t much control over when the value was for.  Certain historical file times are limited to 2s precision.  Things like that.",
                                           "updatedAt":  "2024-06-17T15:22:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6BkG27",
                                           "createdAt":  "2024-06-17T15:32:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "What about providing both overloads @Clockwork-Muse ? The enum-based one for simpler, more common scenarios, and the `TimeSpan` one for more advanced, specific ones?",
                                           "updatedAt":  "2024-06-17T15:32:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Bmu4F",
                                           "createdAt":  "2024-06-17T20:59:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "The problem is that the \"more advanced\" one has different behavior.\r\n\r\nThe proposed one truncates and buckets to the specified (very coarse) precision.\r\nThe \"more advanced\" one actually does an absolute difference comparison (since the other value may be on the other side of the boundary).\r\n\r\nAgain, if the truncating/bucketing behavior is what you want, then from an application/domain design perspective probably you should be starting from the bucket (Eg, as if from an SQL calendar table) and stride the ranges.  Note that in the majority of such cases, you\u0027re going to have the bounds anyways (you\u0027re not going to be comparing two arbitrary precision values).\r\n\r\nIf you want \"close to\" values for arbitrary precision values, then you need an \"error range\", which means you need an absolute difference comparison, which this does not provide.\r\n\r\n\u003e the programmer would have to allocate this margin, which is more work for him / her; but if we adopt an enum, then no need for that.\r\n\r\nThis is mostly a non-issue.\r\n 1) The type is a struct, so there are no literal allocations (although there are constructor costs).\r\n 2) At scale, the value can be allocated outside a loop or as a readonly static value, so the call will look effectively identical, eg;\r\n```csharp\r\nsomeValue.Equals(other, TimeDifference.Within10Milliseconds);\r\n```",
                                           "updatedAt":  "2024-06-17T20:59:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B4HDp",
                                           "createdAt":  "2024-06-19T15:22:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexandrehtrb",
                                           "body":  "@Clockwork-Muse , what do you think of the proposal below? @julealgon said we can have both overloads.\r\n\r\n```cs\r\nnamespace System;\r\n\r\npublic enum DateTimeComparison\r\n{\r\n  UpToDate,\r\n  UpToHour,\r\n  UpToMinutes,\r\n  UpToSeconds,\r\n  UpToMilliseconds,\r\n  UpToMicroseconds,\r\n  UpToNanoseconds\r\n}\r\n\r\npublic readonly struct DateTimeOffset\r\n{\r\n    public bool Equals(DateTimeOffset other, DateTimeComparison comparisonType)\r\n    {\r\n        var thisTruncated = this.Truncate(comparisonType);\r\n        var otherTruncated = other.Truncate(comparisonType);\r\n        return thisTruncated == otherTruncated;\r\n    }\r\n\r\n    public bool Equals(DateTimeOffset other, TimeSpan margin)\r\n    {\r\n        var diffTicks = Math.Abs((this - other).Ticks);\r\n        var marginTicks = Math.Abs(margin.Ticks);\r\n        return diffTicks \u003c= marginTicks;\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2024-06-19T15:22:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B4lEA",
                                           "createdAt":  "2024-06-19T16:30:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "Potential benefits of a `Truncate` method aside (although I might prefer something that takes `TimeSpan` instead, since the enum might otherwise be too coarse), I feel like I\u0027m generally against a truncation comparison as an on-type equality comparison.  \r\n\r\nI think I would want to recommend some form of:\r\n - Perform the truncation outside the equals, then check the equality on the resulting value(s).\r\n - Implement [`EqualityComparer`](https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.equalitycomparer-1?view=net-8.0). \r\n\r\nThis is because a truncation comparison is essentially a \"lossy\" comparison (As opposed to the margin/ulp comparison)",
                                           "updatedAt":  "2024-06-19T16:30:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6B5ilN",
                                           "createdAt":  "2024-06-19T19:19:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexandrehtrb",
                                           "body":  "My opinion as a developer is that having a one-liner, straight-to-the-point method, is better for user experience, as I believe that in most cases this truncation would be used only for later comparison.\r\n\r\nWe can add a `\u003csummary\u003e` on the overload to inform users that it performs a lossy comparison.",
                                           "updatedAt":  "2024-06-19T19:19:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KM-uK",
                                           "createdAt":  "2024-08-29T19:05:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexandrehtrb",
                                           "body":  "@Clockwork-Muse , how about we go for both methods?\r\n\r\n```cs\r\npublic bool Equals(DateTimeOffset other, TimeSpan margin);\r\n\r\npublic bool Equals(DateTimeOffset other, DateTimeComparison comparisonType);\r\n```\r\n\r\nThe first one uses a margin. This is the equality check that xunit uses for [assertion](https://github.com/xunit/assert.xunit/blob/1b39b380a3d3ab50db1434ef33c216f1606391ae/EqualityAsserts.cs#L470).\r\n\r\nI still believe that the second one is a good option, so the users won\u0027t need to declare a `private static readonly TimeSpan timeMargin = TimeSpan.FromSeconds(1);` for equality checks. They can simply use an enum value.",
                                           "updatedAt":  "2024-08-29T19:05:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KOidg",
                                           "createdAt":  "2024-08-29T21:37:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e I still believe that the second one is a good option, so the users won\u0027t need to declare a `private static readonly TimeSpan timeMargin = TimeSpan.FromSeconds(1);` for equality checks. They can simply use an enum value.\r\n \r\n1. As I pointed out previously, the enum-based check isn\u0027t performing an ulp-like/margin comparison, which means the two methods have different behavior in the first place, which is potentially confusing.\r\n2. The primary thing I\u0027m trying to get across is that not having the truncation comparison method is a deliberate design choice to **force programmers to think** about their domain/algorithm.  Requiring the declaration and bucketing/striding behavior is in service to that.  It\u0027s meant to be in service to \"make the right thing easy, and the wrong thing hard\".\r\n\r\nThe fundamental problem is that truncation comparisons like the enum-based method would produce are almost always \"wrong\" from a domain design/algorithm/data perspective.  In almost all real cases I can think of, the programmer should be starting from a bucket/striding perspective, as that will most closely match what it is they\u0027re actually trying to accomplish.  Especially with the way the enum is designed.  If you can provide me a reasonable counter example I\u0027m willing to be proven wrong, however I imagine most of the cases you\u0027re thinking of a probably better served by the ulp comparison.",
                                           "updatedAt":  "2024-08-29T21:37:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KXc7P",
                                           "createdAt":  "2024-08-30T14:15:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexandrehtrb",
                                           "body":  "I think I understand what you mean.\r\n\r\n```cs\r\nvar dt1 = DateTimeOffset.Parse(\"2024-07-09T17:34:22.800000-03:00\");\r\nvar dt2 = DateTimeOffset.Parse(\"2024-07-09T17:34:23.100000-03:00\");\r\n\r\nbool truncateEquals = dt1.Equals(dt2, DateTimeComparison.UpToSeconds); // false\r\nbool marginEquals = dt1.Equals(dt2, TimeSpan.FromSeconds(1)); // true\r\n\r\n// we care for a 1s margin and there is a 300ms diff,\r\n// but the two methods return different values.\r\n```\r\n\r\nConsidering that, I agree that the margin method is better.\r\nBut, how about adding a `TimeSpan.OneSecond` constant? So people could simply type `dt1.Equals(dt2, TimeSpan.OneSecond)`. A constant for 1 minute would be good too.",
                                           "updatedAt":  "2024-08-30T14:15:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Kasi9",
                                           "createdAt":  "2024-08-30T20:03:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "1. I would recommend updating the proposal at the top with the ulp-based method.  (There\u0027s maybe a separate conversation about a new relative-offset type, which may make #72064 more attractive)\r\n2. I don\u0027t know that I\u0027d recommend additional `TimeSpan` constants, even for such a \"common\" one as `One` (the existence of `Zero` is a different special case).  Most of them are going to be too application-specific, and they\u0027re trivial to create when needed.  And in most cases, should be coming from parameters or application config anyways.",
                                           "updatedAt":  "2024-08-30T20:03:29Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "[API Proposal]: method overload `DateTimeOffset.Equals(DateTimeOffset other, TimeSpan margin)` ",
        "labels":  [
                       "api-suggestion",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103196",
        "createdAt":  "2024-06-08T07:19:51Z",
        "number":  103196,
        "author":  "filipnavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-06T19:34:43Z",
        "body":  "Steps to repro:\r\n- Set macOS time zone to \"Phoenix, AZ\" / \"Mountain Standard Time\"\r\n   \u003cimg width=\"465\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/1764393/a711695f-01f0-42c4-b028-3708f599f596\"\u003e\r\n- Verify that local time points to the correct time zone:\r\n```\r\n\u003e ls -l /etc/localtime \r\nlrwxr-xr-x  1 root  wheel  41 Jun  8 00:12 /etc/localtime -\u003e /var/db/timezone/zoneinfo/America/Phoenix\r\n```\r\n- Print `TimeZoneInfo.Local.Id` in .NET code\r\n\r\nActual result:\r\n- `TimeZoneInfo.Local.Id` reports `America/Creston`\r\n\r\nExpected result:\r\n- `TimeZoneInfo.Local.Id` reports `America/Phoenix`\r\n\r\nNotes:\r\n- `America/Creston` is a deprecated alias in TZ DB data",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh2wPOw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Af7BY",
                                           "createdAt":  "2024-06-08T07:20:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-08T07:20:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HbA87",
                                           "createdAt":  "2024-08-06T19:34:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "This is breaking interoperability of our product. We use the system time zones to create iCalendar data that are then sent to various 3rd-party servers. Some of those servers cannot handle the legacy time zone names correctly.",
                                           "updatedAt":  "2024-08-06T19:34:42Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Incorrect local time zone reported on macOS",
        "labels":  [
                       "os-mac-os-x",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104654",
        "createdAt":  "2024-07-10T08:07:04Z",
        "number":  104654,
        "author":  "Snaaio",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-19T11:17:03Z",
        "body":  "This was already solved for TimeProviderTaskExtensions Delay in #85326 (PR #90489). See the rationale there.\r\n\r\nI think this should be fixed for WaitAsync as well, because of the same rationale (and now also for consistency with Delay).\r\n\r\nTherefore I propose to change:\r\nhttps://github.com/dotnet/runtime/blob/cd9cc877d157684dd69ccc4d2cabaa60368b1524/src/libraries/Microsoft.Bcl.TimeProvider/src/System/Threading/Tasks/TimeProviderTaskExtensions.cs\r\n`public WaitAsyncState(CancellationToken cancellationToken) : base(TaskCreationOptions.RunContinuationsAsynchronously)`\r\nto:\r\n`public WaitAsyncState(CancellationToken cancellationToken)`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhXNUfQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6EUANY",
                                           "createdAt":  "2024-07-10T08:09:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Snaaio",
                                           "body":  "Tagging the people that were already involved in #85326: @egil @tarekgh @stephentoub ",
                                           "updatedAt":  "2024-07-10T08:09:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EZEbx",
                                           "createdAt":  "2024-07-10T18:21:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODp5BOA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2024-07-16T03:51:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "This issue is related to or a duplicate of https://github.com/dotnet/runtime/issues/92264. We previously investigated this and decided against making changes because, while altering it might help in some scenarios, it would cause problems in others. \r\n\r\nI suggest closing this issue. If you encounter any problems, we can recommend an appropriate workaround.\r\n\r\n@stephentoub let us know what you think. ",
                                           "updatedAt":  "2024-07-10T18:21:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Fbhuq",
                                           "createdAt":  "2024-07-19T07:55:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Snaaio",
                                           "body":  "Thanks for the info. Bit of a bummer, but understandable ;-)\r\n\r\nIs there a better workaround than having to `await Task.Yield()` (or even a small delay), preferably one that keeps tests deterministic? ",
                                           "updatedAt":  "2024-07-19T07:55:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Fc1R9",
                                           "createdAt":  "2024-07-19T11:17:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "What is your failing test? Could you please write your test case here? and why you are not preferring `await Task.Yield()`? or you are curious to know if there is any other workaround?",
                                           "updatedAt":  "2024-07-19T11:17:03Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Make TimeProviderTaskExtensions WaitAsync run continuations synchronously like Delay",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108712",
        "createdAt":  "2024-10-09T14:20:40Z",
        "number":  108712,
        "author":  "martincostello",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8Rh0A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-10-09T14:45:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JamieMagee",
                                            "createdAt":  "2024-10-09T16:00:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-10-09T16:34:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2024-10-30T12:48:47Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2024-10-09T16:07:09Z",
        "body":  "Inspired by comment in this issue: https://github.com/octokit/webhooks.net/pull/591#issuecomment-2402427465\n\n---\n\nIf code using [`DateTimeOffset.FromUnixTimeSeconds(long)`](https://apisof.net/catalog/3d3dccce19bb541a1347604c1e85f32c) passes a variable of type `int` to it, that value will be implicitly converted to a `long` and in most cases today will work just fine. However, that leaves the code susceptible to Year-2038 issues when a date is too far in the future to be represented as a 32-bit integer.\n\nFor literals or constants, this is likely fine, as maybe it\u0027s a hard-coded reference to a fixed point in time, but for code referencing a variable/property/etc. of type `int`, this might be a looming bug (e.g. deserializing a value from JSON to a POCO) that hints at a type mismatch that will fail at some point in the future.\n\nAn example of this is as referenced in the issue above:\n\n```csharp\nprivate static DateTimeOffset HandleNumber(Utf8JsonReader reader)\n    =\u003e DateTimeOffset.FromUnixTimeSeconds(reader.GetInt32());\n```\n\nThis bug could have been avoided with an analyzer that warned of the potential for overflow, which could have lead to the original author instead writing the following:\n\n```csharp\nprivate static DateTimeOffset HandleNumber(Utf8JsonReader reader)\n    =\u003e DateTimeOffset.FromUnixTimeSeconds(reader.GetInt64()); \n```\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjzN2rA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6PMw8l",
                                           "createdAt":  "2024-10-09T14:21:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-09T14:21:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6PM3as",
                                           "createdAt":  "2024-10-09T14:31:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TonyValenti",
                                           "body":  "Very good catch!",
                                           "updatedAt":  "2024-10-09T14:31:24Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[Analyzer Proposal] Warn when passing an int value to DateTimeOffset.FromUnixTimeSeconds()",
        "labels":  [
                       "code-analyzer",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109095",
        "createdAt":  "2024-10-22T01:49:32Z",
        "number":  109095,
        "author":  "crozone",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAo35g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-10-22T13:21:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2024-10-22T19:23:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2024-10-23T01:02:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "devsko",
                                            "createdAt":  "2025-03-29T11:37:43Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2024-10-23T11:59:15Z",
        "body":  "### Background and motivation\n\nCustom TimeSpan format strings have limitations which limit their practicality. Notably, it is currently impossible to express any of the Standard TimeSpan format strings as a Custom TimeSpan format string, the biggest limitation being that there is currently no way to express the negative sign for negative TimeSpans, a fact that is explicitly called out on the [docs page](https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-timespan-format-strings). The main shortcoming is that TimeSpan custom format strings do not support the section separator, unlike custom numeric format strings.\n\nThis limitation makes it difficult to build variations of the standard TimeSpan format strings. Instead, the user must resort to custom TimeSpan formatting code, which is cumbersome and incompatible with APIs that only accept format strings. For example, data annotations such as the [DisplayFormatAttribute](https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations.displayformatattribute?view=net-8.0).\n\nAdditionally, there is no way to express the `TimeSpan.Total*` properties of the `TimeSpan`, such as `TimeSpan.TotalHours`,  `TimeSpan.TotalMinutes`, or `TimeSpan.TotalSeconds`. This limits the flexibility of TimeSpan formatting since users do not always want the number of days to be shown (instead preferring total hours), or for simple use cases with small TimeSpan values, total seconds are often desirable.\n\nThese limitations are also motivating other issues such as https://github.com/dotnet/runtime/issues/88062 which suggests a new standard format specifier to workaround an issue that could be overcome with improved custom format string support.\n\n### API Proposal\n\nI suggest adding additional custom format specifiers:\n\n* `;`: The section separator, to allow defining sections with separate format strings for positive, negative, and zero TimeSpans. This would allow the user to easily dictate the behaviour of the positive and negative sign, and bring custom TimeSpan formats into parity with [Custom numeric format strings](https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-numeric-format-strings).\n* `H`: The number of whole hours in the time interval. This differs from \u0027h\u0027 in that it represents the total number of hours and can therefore be \u003e 24. It is equivalent to the absolute integer floor of `TimeSpan.TotalHours`.\n* `M`: The number of whole minutes in the time interval. This differs from \u0027m\u0027 in that it represents the total number of minutes and can therefore be \u003e 60. It is equivalent to the absolute integer floor of `TimeSpan.TotalMinutes`.\n* `S`: The number of whole seconds in the time interval. This differs from \u0027s\u0027 in that it represents the total number of seconds and can therefore be \u003e 60. It is equivalent to the absolute integer floor of `TimeSpan.TotalSeconds`.\n\nAdditionally, leading zero variations of the total hours, total minutes, and total seconds specifiers should be available:\n* `HH`, `HHH`, `HHHH`, ... -\u003e 00, 000, 0000, ...\n* `MM`, `MMM`, `MMMM`, ... -\u003e 00, 000, 0000, ...\n* `SS`, `SSS`, `SSSS`, ... -\u003e 00, 000, 0000, ...\n\n### API Usage\n\n```csharp\nvar exampleNegative = TimeSpan.FromHours(-27.12345);\nexampleNegative.ToString(\"+H:mm:ss.fff;-H:mm:ss.fff;H:mm:ss.fff\"); // -27:07:24.419\nexampleNegative.ToString(\"+M:ss.fff;-M:ss.fff;M:ss.fff\"); // -1627:22.680\nexampleNegative.ToString(\"+S.fff;-S.fff;S.fff\"); // -97644.419\n\nvar examplePositive = TimeSpan.FromHours(27.12345);\nexamplePositive.ToString(\"+H:mm:ss.fff;-H:mm:ss.fff;H:mm:ss.fff\"); // +27:07:24.419\nexamplePositive.ToString(\"+M:ss.fff;-M:ss.fff;M:ss.fff\"); // +1627:22.680\nexamplePositive.ToString(\"+S.fff;-S.fff;S.fff\"); // +97644.419\n\nvar exampleZero = TimeSpan.Zero;\nexampleZero.ToString(\"+H:mm:ss.fff;-H:mm:ss.fff;H:mm:ss.fff\"); // 0:00:00.000\nexampleZero.ToString(\"+M:ss.fff;-M:ss.fff;M:ss.fff\"); // 0:00.000\nexampleZero.ToString(\"+S.fff;-S.fff;S.fff\"); // 0.000\n```\n\n### Alternative Designs\n\nA dedicated format specifier for the `TimeSpan` sign could be used, instead of the section separator. However, the section separator has the following advantages:\n* Consistency with the existing behaviour in custom numeric format strings.\n* Flexibility in prepending a \u0027+\u0027 character for positive values.\n* Flexibility in formatting of the zero condition.\n\nAdditional format specifiers could be added for `TimeSpan.TotalMilliseconds`, `TimeSpan.TotalMicroseconds`, and `TimeSpan.Nanoseconds`:\n\n* A format specifier for `TimeSpan.TotalMilliseconds` has some obvious use cases, however it is unclear to me which letter should be used to represent it, since both \u0027f\u0027 and \u0027F\u0027 are already taken.\n\n* The usefulness of format specifiers for `TimeSpan.TotalMicroseconds` and `TimeSpan.Nanoseconds` is less clear to me, so I have omitted them.\n\n### Risks\n\nChanging the way that custom format strings are interpreted for `TimeSpan` is potentially breaking, however I believe that any un-escaped/unquoted use of `;`, `H`, `M`, `S` in a `TimeSpan` format string leads to the \"Input string was not in a correct format.\" `FormatException`, so the impact should be minimal.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkMvirQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6QuQws",
                                           "createdAt":  "2024-10-22T01:50:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-22T01:50:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Qy-Kt",
                                           "createdAt":  "2024-10-22T13:24:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "This is a limitation our software has encountered as well. Specifically, if the time remaining in a step is less than two hours, our specification is to format it as \"minutes:seconds\" (where `minutes` is between zero and 119). Due to the lack of a proper format string, we have to do string interpolation as `$\"{(int)ts.TotalMinutes}:{(int)ts.Seconds}\"`.",
                                           "updatedAt":  "2024-10-23T11:59:15Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[API Proposal]: Extend the functionality of `TimeSpan` custom format strings",
        "labels":  [
                       "api-suggestion",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109163",
        "createdAt":  "2024-10-23T20:14:09Z",
        "number":  109163,
        "author":  "filipnavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-24T19:46:16Z",
        "body":  "Microsoft.IdentityModel.Tokens recently added a dependency on Microsoft.Bcl.TimeProvider 8.0.1 which uncovered a publishing error. The package contains Microsoft.Bcl.TimeProvider.dll for .NET 8 that contains an ILLink.Substitutions.xml resource with the following content:\n\n```xml\n\u003clinker\u003e\n  \u003cassembly fullname=\"Microsoft.Bcl.TimeProvider\" feature=\"System.Resources.UseSystemResourceKeys\" featurevalue=\"true\"\u003e\n    \u003c!-- System.Resources.UseSystemResourceKeys removes resource strings and instead uses the resource key as the exception message --\u003e\n    \u003cresource name=\"FxResources.Microsoft.Bcl.TimeProvider.SR.resources\" action=\"remove\" /\u003e\n    \u003ctype fullname=\"System.SR\"\u003e\n      \u003cmethod signature=\"System.Boolean UsingResourceKeys()\" body=\"stub\" value=\"true\" /\u003e\n    \u003c/type\u003e\n  \u003c/assembly\u003e\n\u003c/linker\u003e\n```\n\nThere are, however, no other resources in the .dll and the script generates the following errors during publish:\n```\nresource ILLink.Substitutions.xml in Microsoft.Bcl.TimeProvider, Version=8.0.0.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51(5,6): error IL2008: Microsoft.Bcl.TimeProvider: Could not resolve type \u0027System.SR\u0027. [/Users/teamcity/actions-runner/_work/emclient/emclient/MailClient/MailClient.csproj::TargetFramework=net8.0-macos]\nresource ILLink.Substitutions.xml in Microsoft.Bcl.TimeProvider, Version=8.0.0.1, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51(4,6): error IL2040: Microsoft.Bcl.TimeProvider: Could not find embedded resource \u0027FxResources.Microsoft.Bcl.TimeProvider.SR.resources\u0027 to remove in assembly \u0027Microsoft.Bcl.TimeProvider\u0027. [/Users/teamcity/actions-\n```\n\nThis affects all the `net8.0-macos` / `net8.0-ios` builds because they run ILLink as part of the build process.\n\nIt seems that the 9.0.0-rc.2.24473.5 version of the package doesn\u0027t suffer from this authoring issue. Is it safe to migrate to the new version? What\u0027s the guidance for bumping the NuGet version number in transitive references? Should I suggest the Azure AD team (https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet) to bump the dependency to the 9.0.0-rc2 version? /cc @FuPingFranco",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkTWm_g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6RCfau",
                                           "createdAt":  "2024-10-23T20:14:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-resources\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-23T20:14:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RCf9h",
                                           "createdAt":  "2024-10-23T20:15:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-23T20:15:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RDCez",
                                           "createdAt":  "2024-10-23T21:25:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "... They shouldn\u0027t need that package for .NET 8+, since that\u0027s the compat package to enable `System.TimeProvider` on previous versions.  Probably `Microsoft.IdentityModel.Tokens` should condition the dependency.",
                                           "updatedAt":  "2024-10-23T21:25:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RDDv-",
                                           "createdAt":  "2024-10-23T21:29:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "Good point :-) I didn\u0027t realize they ship net8.0 and net9.0 assets.",
                                           "updatedAt":  "2024-10-23T21:29:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RNaBs",
                                           "createdAt":  "2024-10-24T19:45:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "I think it would be a good idea to set the property `GenerateResourcesSubstitutions` to `false` to avoid executing the target `GenerateResourcesSubstitutionFile` and insert the link file in the resources. In .NET we always type forwarding and down-levels doesn\u0027t need it anyway\n\n\n",
                                           "updatedAt":  "2024-10-24T19:45:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6RNab-",
                                           "createdAt":  "2024-10-24T19:46:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027linkable-framework\u0027: @eerhardt, @vitek-karas, @LakshanF, @sbomer, @joperezr, @marek-safar\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-10-24T19:46:15Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Microsoft.Bcl.TimeProvider 8.0.1 contains incorrect linker substitution resources",
        "labels":  [
                       "linkable-framework",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111146",
        "createdAt":  "2024-12-29T15:10:31Z",
        "number":  111146,
        "author":  "sherif-elmetainy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-01T08:00:25Z",
        "body":  "### Is there an existing issue for this?\n\n- [x] I have searched the existing issues\n\n### Describe the bug\n\nIn 2024, the Africa/Cairo daylight saving (summer time GMT+3) ended on midnight of Friday, November 1st 2024, where the clock was set back one hour to start the standard time (winter time GMT + 2). \n\nIn the below code, Offset should be 03:00:00 because on October 31 at 9AM it\u0027s still summer time. This is the case with the code executed on the server (Server Side Rendering). \nHowever, when the same code is executed on the client (Web Assembly), the Offset is 02:00:00. \n\n\n```razor \n@page \"/\"\n\n\u003cPageTitle\u003eHome\u003c/PageTitle\u003e\n\n\u003ch1\u003eHello, world!\u003c/h1\u003e\n\n\u003cp\u003eThe following should output 3:00:00. It does so when rendering from server. However, when client side webassembly code is loaded and takes over, it displays 2:00:00.\u003c/p\u003e\n@Offset \n\n\n@code\n{\n    private DateTimeOffset Date { get; set; } = new DateTimeOffset(2024, 10, 31, 9, 0, 0, TimeSpan.FromHours(3));\n    private TimeSpan Offset { get; set; }\n\n    protected override void OnInitialized()\n    {\n        var timezone = TimeZoneInfo.FindSystemTimeZoneById(\"Africa/Cairo\");\n        Offset = timezone.GetUtcOffset(Date.DateTime);\n        base.OnInitialized();\n    }\n}\n```\n\n\n\n### Expected Behavior\n\nThe code snippet in the description, the Offset value should be 3:00:00. It\u0027s actually 2:00:00 which is incorrect.\n\n### Steps To Reproduce\n\nThe repo https://github.com/sherif-elmetainy/EgyptTimeZoneBug has a minimalistic reproduction of the bug in the Home.razor file in the Client project.\n\nTo reproduce in another project create a razor page with the following code\n\n```razor\n@page \"/\"\n\n\u003cPageTitle\u003eHome\u003c/PageTitle\u003e\n\n@Offset \n\n\n@code\n{\n    private DateTimeOffset Date { get; set; } = new DateTimeOffset(2024, 10, 31, 9, 0, 0, TimeSpan.FromHours(3));\n    private TimeSpan Offset { get; set; }\n\n    protected override void OnInitialized()\n    {\n        var timezone = TimeZoneInfo.FindSystemTimeZoneById(\"Africa/Cairo\");\n        Offset = timezone.GetUtcOffset(Date.DateTime);\n        base.OnInitialized();\n    }\n}\n```\n\n\n\n### Exceptions (if any)\n\nThere are no exceptions thrown.\n\n### .NET Version\n\n9.0.101\n\n### Anything else?\n\nMicrosoft.AspNetCore.App 9.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\nMicrosoft Visual Studio Professional 2022 (64-bit) Version 17.12.3\nWindows 11 Version 24H2 (OS Build 26100.2605)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpQQz4w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Zem7x",
                                           "createdAt":  "2025-01-07T10:31:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-07T10:31:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Zem8L",
                                           "createdAt":  "2025-01-07T10:31:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-07T10:31:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Zih3G",
                                           "createdAt":  "2025-01-07T18:27:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-07T18:27:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZitYW",
                                           "createdAt":  "2025-01-07T18:56:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-07T18:56:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZitgI",
                                           "createdAt":  "2025-01-07T18:56:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@javiercn could you please add the milestone when triaging the issues? Thanks!",
                                           "updatedAt":  "2025-01-07T18:56:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6lBDPj",
                                           "createdAt":  "2025-04-01T08:00:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Probably the solution is to upgrade our timezone database that we are shipping.",
                                           "updatedAt":  "2025-04-01T08:00:24Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Blazor Webassembly: Wrong time zone information for Africa/Cairo Time zone",
        "labels":  [
                       "arch-wasm",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111847",
        "createdAt":  "2025-01-27T04:55:49Z",
        "number":  111847,
        "author":  "aetos382",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-25T01:55:56Z",
        "body":  "### Background and motivation\n\nIn many use cases, negative `TimeSpan` values are invalid, so you will want to make them an error during parameter validation.\nHowever, `Timeout.Infinite` is an exceptional case.\nIf you want to perform parameter validation like this, you will need to write boilerplate code like the following.\n\n```cs\nvoid Foo(TimeSpan value)\n{\n    if (value != Timeout.Infinite)\n    {\n        ArgumentOutOfRangeException.ThrowIfLessThan(value, TimeSpan.Zero);\n    }\n}\n```\n\nYou should not write this as follows.\nThis is because there are negative values that are larger than `Timeout.InfiniteTimeSpan`.\n\n```cs\nvoid Foo(TimeSpan value)\n{\n    ArgumentOutOfRangeException.ThrowIfLessThan(value, Timeout.InfiniteTimeSpan);\n\n    // Foo(TimeSpan.FromTicks(-1)) prints \"-00:00:00.0000001: Valid\".\n    Console.WriteLine($\"{value}: Valid\");\n}\n```\n\nAlso, `ArgumentOutOfRangeException.ThrowIfNegative` cannot be used when comparing with `Timeout.Zero` because `TimeSpan` does not implement `INumberBase\u003cT\u003e`.\nBut it is not a good idea to add a method specific to `TimeSpan` validation to the `ArgumentOutOfRangeException` class.\n\nAnd, .NET timers support timeout values in milliseconds, and the valid range is from `1` to `UInt32.MaxValue - 1` (`0xfffffffe`). `0xffffffff` is not valid because it is `Timeout.Infinite`.\nIt may be useful to have a method that checks whether or not the specified value is within this valid range.\nFor example, it can be used by someone implementing a class that uses timers internally and wants to check the range of values in the constructor.\n\nSo, we propose adding a validation methods to the `TimeSpan` class.\nUsing these methods will make the meaning of the code clearer and also help you avoid errors in value validation.\n\nIt may also be a good idea to provide an analyzer that recommends specifications for methods like this.\n\n### API Proposal\n\n```csharp\nnamespace System;\n\npublic struct TimeSpan\n{\n    // Throws `ArgumentOutOfRangeException` if the value is negative (even if it is `Timeout.InifiniteTimeSpan`).\n    public static void ThrowIfNegative(TimeSpan value, [CallerArgumentExpression] string? paramName = null);\n\n    // Throws `ArgumentOutOfRangeException` if the value is negative (except `Timeout.InifiniteTimeSpan`).\n    public static void ThrowIfNegativeExceptInfinite(TimeSpan value, [CallerArgumentExpression] string? paramName = null);\n\n    // Throws `ArgumentOutOfRangeException` if the value is negative or `TimeSpan.Zero` (even if it is `Timeout.InifiniteTimeSpan`).\n    public static void ThrowIfNegativeOrZero(TimeSpan value, [CallerArgumentExpression] string? paramName = null);\n\n    // Throws `ArgumentOutOfRangeException` if the value is negative or `TimeSpan.Zero` (except `Timeout.InifiniteTimeSpan`).\n    public static void ThrowIfNegativeOrZeroExceptInfinite(TimeSpan value, [CallerArgumentExpression] string? paramName = null);\n\n    // Throws ArgumentOutOfRangeException if the value is not between 1 and 4294967294ms.\n    public static void ThrowIfOutOfTimeoutRange(TimeSpan value, [CallerArgumentExpression] string? paramName = null);\n\n    // Throws ArgumentOutOfRangeException if the value is not between 0 and 4294967294ms.\n    public static void ThrowIfOutOfTimeoutRangeAllowsZero(TimeSpan value, [CallerArgumentExpression] string? paramName = null);\n\n    // Throws ArgumentOutOfRangeException if the value is not between 1 and 4294967295ms.\n    public static void ThrowIfOutOfTimeoutRangeAllowsInfinite(TimeSpan value, [CallerArgumentExpression] string? paramName = null);\n\n    // Throws ArgumentOutOfRangeException if the value is not between 0 and 4294967295ms.\n    public static void ThrowIfOutOfTimeoutRangeAllowsZeroAndInfinite(TimeSpan value, [CallerArgumentExpression] string? paramName = null);\n}\n```\n\n### API Usage\n\n```csharp\nvoid Foo(TimeSpan value)\n{\n    // `Foo(TimeSpan.FromTicks(-1))` will result in an error.\n    TimeSpan.ThrowIfNegativeExceptInfinite(value);\n}\n```\n\n### Alternative Designs\n\nThe timer itself can also have a method to check whether the value is within the valid range of the timer.\nSince some of the timer implementations in .NET eventually end up with the internal `TimerQueueTimer` class that implements `ITimer` interface, this method could also be a static method of `ITimer`.\nThe upper limit supported by the timer-related methods we have proposed is currently defined in the `MaxSupportedTimeout` field of the `System.Threading.Timer` class. The `ITimer` interface was introduced later, along with the `TimerProvider`.\n\n```cs\npublic interface ITimer\n{\n    // Throws ArgumentOutOfRangeException if the value is not between 1 and 4294967294ms.\n    public static void ThrowIfOutOfTimeoutRange(TimeSpan value, [CallerArgumentExpression] string? paramName = null);\n\n    // Throws ArgumentOutOfRangeException if the value is not between 0 and 4294967294ms.\n    public static void ThrowIfOutOfTimeoutRangeAllowsZero(TimeSpan value, [CallerArgumentExpression] string? paramName = null);\n\n    // Throws ArgumentOutOfRangeException if the value is not between 1 and 4294967295ms.\n    public static void ThrowIfOutOfTimeoutRangeAllowsInfinite(TimeSpan value, [CallerArgumentExpression] string? paramName = null);\n\n    // Throws ArgumentOutOfRangeException if the value is not between 0 and 4294967295ms.\n    public static void ThrowIfOutOfTimeoutRangeAllowsZeroAndInfinite(TimeSpan value, [CallerArgumentExpression] string? paramName = null);\n}\n```\n\n`System.Windows.Forms.Timer` and `System.Windows.Threading.DispatcherTimer` are implemented using the Win32 API `SetTimer` rather than `TimerQueueTimer`, and in this case the upper limit is different.\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOn8Ah_Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6b3Mzc",
                                           "createdAt":  "2025-01-27T06:27:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-27T06:27:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fRZa3",
                                           "createdAt":  "2025-02-20T17:09:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEaFPRw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "timcassell",
                                                                               "createdAt":  "2025-02-20T18:13:27Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aetos382",
                                                                               "createdAt":  "2025-02-21T06:43:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-07-10T12:04:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "LWChris",
                                           "body":  "I agree that `ArgumentOutOfRangeException` should not be cluttered with 8 methods, but it also doesn\u0027t look right that `TimeSpan` gets methods \"in case it\u0027s meant to be a timeout\", like `ThrowIfOutOfTimeoutRangeAllowsZeroAndInfinite` for example.\n\nAs I see you realized in your proposal, a TimeSpan of \"-1 ms\" is a perfectly valid negative time span without any special meaning, so `ThrowIfNegative` must throw for Timeout.InfiniteTimeSpan in a `TimeSpan` context but shouldn\u0027t in a `Timeout` context. That -1 ms is a sentinel value for `Timeout.Infinite` is only relevant in case `TimeSpan` is meant to be a timeout.\n\nHence you provided `ThrowIfOutOfTimeoutRange...` methods to cover both use cases.\n\nMy idea: wouldn\u0027t it make sense to add those methods to `Timeout`, since that\u0027s a static class anyway, currently without any use except for providing `Infinite` and `InfiniteTimeSpan`? This would solve the whole interpretation issue - if you want to use `TimeSpan` as is and don\u0027t care about its potential use as a timeout, you will not be bothered with the \"-1 ms\" sentinel value anomaly. But if you intend to use the `TimeSpan` as timeout, why not use `Timeout` to validate it:\n\n* `Timeout.ThrowIfInvalid(TimeSpan t)` \u0026rarr; throws if `t \u003c TimeSpan.Zero \u0026\u0026 t != Timeout.InfiniteTimeSpan`\n* `Timeout.ThrowIfInvalidOrInfinite(TimeSpan t)` \u0026rarr; throws if `t \u003c TimeSpan.Zero`\n* `Timeout.ThrowIfInvalidOrInfiniteOrZero(TimeSpan t)` \u0026rarr; throws if `t \u003c= TimeSpan.Zero`\n* `Timeout.ThrowIfInvalidOrZero(TimeSpan t)` \u0026rarr; throws if `t \u003c= TimeSpan.Zero \u0026\u0026 t != Timeout.InfiniteTimeSpan`",
                                           "updatedAt":  "2025-02-21T10:17:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fXB39",
                                           "createdAt":  "2025-02-21T06:44:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aetos382",
                                           "body":  "Putting them in the `Timeout` class is a good idea!",
                                           "updatedAt":  "2025-02-21T06:44:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fa03v",
                                           "createdAt":  "2025-02-21T13:52:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "@LWChris `TimeSpan` values don\u0027t always represent \"timeouts\" conceptually. Putting the guard methods on the `Timeout` class would be too inflexible in that sense (it would be misleading/confusing to use in places where the value is not meant to be used as a timeout, but still needs similar validations).",
                                           "updatedAt":  "2025-02-21T13:52:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fdL0B",
                                           "createdAt":  "2025-02-21T18:09:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LWChris",
                                           "body":  "@julealgon I think you misunderstood my intentions, since your arguments are precisely the reason why I suggested to put the validations I mentioned in `Timeout`.\n\nTo clarify, I did not say anything about \"normal\" validations for `TimeSpan`. I\u0027d suggest to add overloads to `ArgumentOutOfRangeException`, such as `ThrowIfNegative(TimeSpan t)` that throws if `t \u003c TimeSpan.Zero`, i.e. including `Timeout.InfiniteTimeSpan`.\n\nBut for cases where a `TimeSpan` is a timeout, those wouldn\u0027t be very useful. The validations in `Timeout` are precisely meant to cover that. Most notably, all negative values for `TimeSpan` are considered invalid, with the exception of \"-1 ms\", which is considered to be \"Positive Infinity\".",
                                           "updatedAt":  "2025-02-21T18:09:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fdd3u",
                                           "createdAt":  "2025-02-21T18:49:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e [@julealgon](https://github.com/julealgon) I think you misunderstood my intentions\n\nAs I re-read your post again @LWChris , I absolutely did, my bad. \n\nThe only contention point I have now with your proposal is the inconsistency factor: some guard methods in exception classes, and some other guard methods in types that are not exception types (like `Timeout`). I\u0027m not a big fan of the inconsistency itself, even if I do like where you were coming from conceptually.\n\nWhich to me highlights a flaw with the original concept of having guard methods be called from the exception types themselves: that idea will not scale as we keep adding more and more validations such as this, as you well put it that the relationship is not really 1:1 between the exception type and the type of validation being performed (i.e. a \"timeout\" is more specific than a \"timespan\").\n\nUnfortunately, I assume the ship has sailed now and that design will not be changed anymore (i.e. guard methods on exception types).\n\nMy personal take is that this (guard methods) should be _completely_ redesigned as proper language-level contracts, but of course that is a much larger ask and doesn\u0027t seem to be a priority for Microsoft (most contract-related issues are in the backlog for several years at this point without much movement if at all).\n\nOn another note, I could also argue that it would be preferred to have a dedicated type to represent timeouts that are backed by a `TimeSpan` value, and have those common validation rules embedded into that type (at construction or parsing time). Again, unfortunately, the language is not really designed to cleanly support these \"value types\" so I don\u0027t see that happening in the near future either.",
                                           "updatedAt":  "2025-02-21T18:49:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fdk3O",
                                           "createdAt":  "2025-02-21T19:05:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LWChris",
                                           "body":  "This is how a proposed solution would behave with `TimeSpan` overloads in `ArgumentOutOfRangeException` and \"specialized\" treatment of \"-1 ms\" within `Timeout`:\n\n![Image](https://github.com/user-attachments/assets/f29cc4d9-4c2e-4b81-b405-2ef6b0e06da5)\n\n\u003e The only contention point I have now with your proposal is the inconsistency factor: some guard methods in exception classes, and some other guard methods in types that are not exception types (like `Timeout`). I\u0027m not a big fan of the inconsistency itself, even if I do like where you were coming from conceptually.\n\nThe only solution for that would be to not use `Timeout` throwing `ArgumentOutOfRangeException`, but create a new `TimeoutArgumentOutOfRangeException`. That could even inherit `ArgumentOutOfRangeException` as far as I can tell. Additional benefit would be that we can also add `ThrowIfGreaterThan` that can throw for \"-1 ms\" which is another thing `ArgumentOutOfRangeException` couldn\u0027t handle well (-1 ms being greater than 10 seconds).",
                                           "updatedAt":  "2025-02-21T19:05:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fdvNt",
                                           "createdAt":  "2025-02-21T19:28:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e The only solution for that would be to not use `Timeout` throwing `ArgumentOutOfRangeException`, but create a new `TimeoutArgumentOutOfRangeException`. That could even inherit `ArgumentOutOfRangeException` as far as I can tell.\n\nWould that only serve to differentiate the source of the guard methods? If that\u0027s the case, I don\u0027t see it being approved. There would need to be a stronger need to create a brand-new exception type that would justify the type by itself IMHO.\n\n\u003e Additional benefit would be that we can also add `ThrowIfGreaterThan` that can throw for \"-1 ms\" which is another thing `ArgumentOutOfRangeException` couldn\u0027t handle well (-1 ms being greater than 10 seconds).\n\nTo be honest this `-1` nonsense should die in a fire. This is a remnant of old-style C programming where someone hacked their way into giving a special meaning to a magic number. This design should have no place in C# in my opinion. Yes, I do realize the boat has sailed on this as well (unfortunately), but a \"timeout\" should be a restricted discriminated union eventually (I hope one day this will be possible):\n```csharp\npublic type Timeout = TimeSpan t where t \u003e 0 | Infinite;\n```",
                                           "updatedAt":  "2025-02-21T19:28:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fos5Y",
                                           "createdAt":  "2025-02-24T12:15:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LWChris",
                                           "body":  "\u003e To be honest this `-1` nonsense should die in a fire. This is a remnant of old-style C programming where someone hacked their way into giving a special meaning to a magic number. This design should have no place in C# in my opinion. \n\nIn an idealist world you are right, but as always with languages that grow over time, the trouble began when someone decided to use `int` for milliseconds, and even using `TimeSpan` which allows nonsensical values like negative values but does not have an inherent unambiguous `Infinity` representation (like `double` has) was a second oversight. It\u0027s a bit like having `DateTime` since forever but `DateOnly` and `TimeOnly` only recently - a lot of code has been written that would\u0027ve been prettier if these things had been around already, and backwards compatibility with legacy code is a heck to deal with. But let\u0027s not draw focus away with how things _should_ be but most certainly _can not_, and rather focus on how things _could_ be. I think the framework missing validation for `TimeSpan` is really a white spot on the map, and I believe we can fix that in a satisfactory manner even _with_ the `Timeout.InfiniteTimeSpan` oddity around.",
                                           "updatedAt":  "2025-02-24T12:15:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fwCH9",
                                           "createdAt":  "2025-02-25T01:55:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aetos382",
                                           "body":  "Win32 synchronization APIs such as [Sleep](https://learn.microsoft.com/en-us/windows/win32/api/synchapi/nf-synchapi-sleep) have a timeout precision of only milliseconds, and the constant `INFINITE` is defined as `-1`.\nOn the other hand, in NTFS, file timestamps have a precision of 100ns, and the same is true for structures such as [FILETIME](https://learn.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-filetime) that represent time.\n\nIn .NET Framework, both the timeout and the current time are based on the same tick, but the precision of the value representing an infinite timeout has been left unchanged (presumably for native interoperability).",
                                           "updatedAt":  "2025-02-25T01:55:55Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "[API Proposal]: `TimeSpan` validation methods",
        "labels":  [
                       "api-suggestion",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112641",
        "createdAt":  "2025-02-17T23:08:27Z",
        "number":  112641,
        "author":  "jjsm-pci",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-17T23:45:46Z",
        "body":  "### Description\n\nWhen calling the `TimeZoneInfo.CreateCustomTimeZone` method overload that accepts the `disableDaylightSavingTime` parameter and then subsequently calling `TimeZoneInfo.ConvertTimeFromUtc` during a daylight savings timeframe it returns a DST adjusted time but shouldn\u0027t.\n\n### Reproduction Steps\n\n```\nTimeZoneInfo astTimeZone = TimeZoneInfo.FindSystemTimeZoneById(\"Atlantic Standard Time\");\n\nTimeZoneInfo astDstDisabledTimeZone = TimeZoneInfo.CreateCustomTimeZone(\n    astTimeZone.Id,\n    astTimeZone.BaseUtcOffset,\n    astTimeZone.DisplayName,\n    astTimeZone.StandardName,\n    astTimeZone.DaylightName,\n    astTimeZone.GetAdjustmentRules(),\n    true);\n\nConsole.WriteLine(\"AST with DST Enabled (UTC-3): \" + TimeZoneInfo.ConvertTimeFromUtc(DateTime.Parse(\"4/1/2025 12:00:00\"), astTimeZone));\nConsole.WriteLine(\"AST with DST Disabled (UTC-4): \" + TimeZoneInfo.ConvertTimeFromUtc(DateTime.Parse(\"4/1/2025 12:00:00\"), astDstDisabledTimeZone));\n```\n\n### Expected behavior\n\nAST with DST Enabled (UTC-3): 4/1/2025 9:00:00 AM\nAST with DST Disabled (UTC-4): 4/1/2025 8:00:00 AM\n\n### Actual behavior\n\nAST with DST Enabled (UTC-3): 4/1/2025 9:00:00 AM\nAST with DST Disabled (UTC-4): 4/1/2025 **9:00:00 AM**\n\n### Regression?\n\nWhen run with `.Net Framework 4.7.2` it produces the expected output.\n\nI also tested on `.Net Core 3.1` and `.Net 5` through `.Net 9` and they all have the bug.\n\n### Known Workarounds\n\nPass `null` for the `adjustmentRules` parameter.\n\n### Configuration\n\n- Which version of .NET is the code running on? **.Net 9**\n- What OS and version, and what distro if applicable? **Windows 11**\n- What is the architecture (x64, x86, ARM, ARM64)? **x64**\n- Do you know whether it is specific to that configuration? **I don\u0027t**\n\n### Other information\n\nPossibly in the [CreateCustomTimeZone](https://github.com/dotnet/runtime/blob/1d1bf92fcf43aa6981804dc53c5174445069c9e4/src/libraries/System.Private.CoreLib/src/System/TimeZoneInfo.cs#L1071C1-L1096C10) function. If DST is enabled and there are adjustment rules it clones them. However, if DST is disabled it just passes through the rules to the `TimeZoneInfo` constructor. Though maybe it should be discarding the adjustment rules in `TimeZoneInfo` constructor itself to cover more use cases.\n\nI presume discarding of the rules is the itended implemention based on the [documentation](https://learn.microsoft.com/en-us/dotnet/api/system.timezoneinfo.createcustomtimezone?view=net-9.0).\n\n**disableDaylightSavingTime** Boolean\n`true` to discard any daylight saving time-related information present in `adjustmentRules` with the new object; otherwise, `false`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnsySPQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ezJI9",
                                           "createdAt":  "2025-02-17T23:08:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-17T23:08:59Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "TimeZoneInfo.CreateCustomTimeZone Not Obeying disableDaylightSavingTime Parameter",
        "labels":  [
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113033",
        "createdAt":  "2025-03-01T18:09:08Z",
        "number":  113033,
        "author":  "jscarle",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODD5e8g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2025-03-02T03:23:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ahmadweera",
                                            "createdAt":  "2025-03-03T18:54:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RChoppick",
                                            "createdAt":  "2025-03-03T18:55:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "achyzh",
                                            "createdAt":  "2025-03-03T18:56:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "msamborski-orbis",
                                            "createdAt":  "2025-03-03T18:59:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cfoster-orbis",
                                            "createdAt":  "2025-03-03T19:02:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alakhana-orbis",
                                            "createdAt":  "2025-03-03T19:19:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zhelezniakAIM",
                                            "createdAt":  "2025-03-04T08:52:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SDasilvaOrbis",
                                            "createdAt":  "2025-03-05T18:17:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OronDF343",
                                            "createdAt":  "2025-05-21T16:11:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dreamescaper",
                                            "createdAt":  "2025-06-05T13:50:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rampaa",
                                            "createdAt":  "2025-06-05T16:46:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Svish",
                                            "createdAt":  "2025-06-11T13:28:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "ufcpp",
                                            "createdAt":  "2025-06-12T07:58:17Z"
                                        },
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "En3Tho",
                                            "createdAt":  "2025-06-14T11:11:44Z"
                                        }
                                    ],
                          "totalCount":  15
                      },
        "updatedAt":  "2025-06-14T20:49:45Z",
        "body":  "## Background and Motivation\n\nAlmost every project I\u0027ve worked on, from small personal projects to large enterprise ones, ends up with various extension methods designed to make date and time manipulation more concise and less repetitive. Many of these are born out of inconsistencies and/or shortcomings of the current API surface on the five core date and time types: `DateTime`, `DateTimeOffset`, `DateOnly`, `TimeOnly`, and `TimeSpan`. Specifically, `DateOnly` and `TimeOnly` do not feel like first class citizens next to `DateTime` and `DateTimeOffset`.\n\nIn an ecosystem where version after version, compiler and syntax changes have been consitently made to reduce the amount of syntax needed to create types (ie: collection expressions), I feel like these core system types have not been given the same amount of attention. Yet date and time manipulation is probably one of the most common operations and omni present in almost every single project a .NET developer will be involved in.\n\n## Proposed API\nTo avoid creating a large amount of issues that are all centered around the same background and motivation, I opted instead on creating a list of proposed APIs with additional notes where appropriate. I have tried to group them as best as I can.\n\n### Missing APIs for consistency\n\n#### 1) DateTimeOffset.FromDateTime(DateTime dateTime) static method\n- `DateOnly` and `TimeOnly` both already expose `FromDateTime()`.\n- A `DateTime` can already be cast into a `DateTimeOffset`.\n\n#### 2) DateTime.FromDateTimeOffset() static method\n- There is already a constructor overload on `DateTimeOffset` which supports a `DateTime`.\n- With proposal 1, `DateTimeOffset` would also expose the similar `FromDateTime()`.\n\n#### 3) dateTime.ToDateTimeOffset(TimeSpan offset) instance method\n- There is already a constructor overload on `DateTimeOffset` which supports a `DateTime` and `TimeSpan`.\n- `DateOnly` instances already expose the similar `ToDateTime`.\n\n#### 4) DateTimeOffset.Today and DateOnly.Today  property\n- `DateTimeOffset` already exposes `Now` and `UtcNow` like `DateTime`.\n- `DateTime` already exposes `Today`.\n\n#### 5) TimeOnly.Now and TimeOnly.UtcNow property\n- `DateTime` and `DateTimeOffset` already expose `Now` and `UtcNow`.\n\n#### 6) timeOnly.AddSeconds(double value), timeOnly.AddMilliseconds(double value), timeOnly.AddMicroseconds(double value), and timeOnly.AddTicks(long value) instance method\n- `DateTime` and `DateTimeOffset` instances both already expose `AddSeconds()`, `AddMilliseconds()`, `AddMicroseconds()`, and `AddTicks()`.\n\n#### 7) DateOnly.FromDateTimeOffset(DateTimeOffset dateTimeOffset) and TimeOnly.FromDateTimeOffset(DateTimeOffset dateTimeOffset) static methods\n- `DateOnly` and `TimeOnly` both already expose `FromDateTime()`.\n\n#### 8) DateTime.FromDateOnly(DateOnly dateOnly) and DateTimeOffset.FromDateOnly(DateOnly dateOnly) static methods\n- `DateOnly` and `TimeOnly` both already expose `FromDateTime()`.\n\n#### 9) dateTime.ToDateOnly() instance method\n- `DateOnly` instances already expose `ToDateTime()`.\n\n#### 10) dateTimeOffset.ToDateOnly() instance method\n- `DateOnly` instances already expose `ToDateTime()`.\n- With proposal 9, `DateTime` instances would also expose `ToDateOnly()`.\n\n#### 11) dateOnly.ToDateTimeOffset() and dateOnly.ToDateTimeOffset(TimeSpan offset) instance methods\n- `DateOnly` instances already expose `ToDateTime()`.\n- With proposal 9 and 10, `DateTime` instances would also expose `ToDateOnly()` and `DateTimeOffset` instances would also expose `.ToDateOnly()`.\n\n#### 12) dateTime.ToTimeOnly() and dateTimeOffset.ToTimeOnly() instance methods\n- `DateOnly` instances already expose `ToDateTime()`.\n- With proposal 9, 10, and 11, `DateTime` instances would also expose `ToDateOnly()`, `DateTimeOffset` instances would also expose `.ToDateOnly()`, and `DateOnly` instances would also expose `.ToDateTimeOffset()`.\n\n#### 13) Implicit cast from DateOnly instances to DateTimeOffset instances\n- `DateTime` instances already implicitly cast to `DateTimeOffset`.\n\n### Expanding Today API\n\n#### 14) DateTime.UtcToday, DateTimeOffset.UtcToday, DateOnly.UtcToday\n- `DateTime` and `DateTimeOffset` already expose the properties `Now` and `UtcNow`, this would be natural pairing to the already exposed `Today` property.\n- With proposal 4, both `DateTimeOffset` and `DateOnly` would also expose `Today`.\n\n### New Substract APIs\n\n#### 15) Substract instance method variants of Add to DateTime, DateTimeOffset, DateOnly, and TimeOnly\n- Add the `SubstractYears(int value)` instance method to `DateTime`, `DateTimeOffset`, and `DateOnly`.\n- Add the `SubstractMonths(int value)` instance method to `DateTime`, `DateTimeOffset`, and `DateOnly`.\n- Add the `SubstractDays(double value)` instance method to `DateTime`, `DateTimeOffset`, and `SubstractDays(int value)` instance method `DateOnly`.\n- Add the `SubstractHours(double value)` instance method to `DateTime`, `DateTimeOffset`, and `TimeOnly`.\n- Add the `SubstractMinutes(double value)` instance method to `DateTime`, `DateTimeOffset`, and `TimeOnly`.\n- Add the `SubstractSeconds(double value)` instance method to `DateTime`, `DateTimeOffset`, and `TimeOnly`.\n- Add the `SubstractMilliseconds(double value)` instance method to `DateTime`, `DateTimeOffset`, and `TimeOnly`.\n- Add the `SubstractMicroseconds(double value)` instance method to `DateTime`, `DateTimeOffset`, and `TimeOnly`.\n- Add the `SubstractTicks(long value)` instance method to `DateTime`, `DateTimeOffset`, and `TimeOnly`.\n\n### Expand TimeSpan API\n\n~~16) `TimeSpan.FromYears(int value)` and `TimeSpan.FromMonths(int value)` static methods~~\n- ~~`TimeSpan` already exposes all other `From` methods.~~\n\n#### 17) `TimeSpan.Add` variants and `TimeSpan.Substract` variants\n- Adding the AddYears(), AddMonths(), AddDays(), AddHours(), AddMinutes(), AddSeconds(), AddMilliseconds(), AddMicroseconds(), AddTicks() instance methods would avoid needing to create an intermediate TimeSpan to manipulate an existing TimeSpan.\n- Also in the same vein, adding the instance methods from proposal 15.\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsTdRpg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6gefue",
                                           "createdAt":  "2025-03-01T18:09:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-01T18:09:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6geinl",
                                           "createdAt":  "2025-03-01T18:40:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e * Add the `SubstractDays(double value)` instance method to `DateTime`, `DateTimeOffset`, and `DateOnly`.\n\nThere is DateOnly.AddDays(Int32) but no DateOnly.AddDays(Double), so I don\u0027t think there should be DateOnly.SubtractDays(Double) either.",
                                           "updatedAt":  "2025-03-01T18:40:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gei0B",
                                           "createdAt":  "2025-03-01T18:42:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\u003e 16) `TimeSpan.FromYears(int value)` and `TimeSpan.FromMonths(int value)` static methods\n\nNot feasible because years and months do not have a constant number of days and thus not a constant number of ticks either.",
                                           "updatedAt":  "2025-03-01T18:42:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gekCX",
                                           "createdAt":  "2025-03-01T18:57:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jscarle",
                                           "body":  "\u003e \u003e * Add the `SubstractDays(double value)` instance method to `DateTime`, `DateTimeOffset`, and `DateOnly`.\n\u003e \n\u003e There is DateOnly.AddDays(Int32) but no DateOnly.AddDays(Double), so I don\u0027t think there should be DateOnly.SubtractDays(Double) either.\n\nI adjusted the overload.",
                                           "updatedAt":  "2025-03-01T18:57:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gekDZ",
                                           "createdAt":  "2025-03-01T18:57:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jscarle",
                                           "body":  "\u003e \u003e 16. `TimeSpan.FromYears(int value)` and `TimeSpan.FromMonths(int value)` static methods\n\u003e \n\u003e Not feasible because years and months do not have a constant number of days and thus not a constant number of ticks either.\n\nMakes sense. Withdrawn.",
                                           "updatedAt":  "2025-03-01T18:57:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gev-n",
                                           "createdAt":  "2025-03-01T20:56:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e \u003e 16. `TimeSpan.FromYears(int value)` and `TimeSpan.FromMonths(int value)` static methods\n\u003e \n\u003e Not feasible because years and months do not have a constant number of days and thus not a constant number of ticks either.\n\nStrictly speaking days don\u0027t either, but that only happens every ~18 months or so (and support is spotty in programming for leap seconds even then)\n\n\u003chr /\u003e\nIf you\u0027re going to be working with date/time extensively, you may want to look at NodaTime",
                                           "updatedAt":  "2025-03-01T20:56:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gfNsc",
                                           "createdAt":  "2025-03-02T03:28:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "I agree with the premise behind this proposal. When I try to do things right (like record a calibration date with a `DateOnly`), I’m forced to jump through a few hoops just to do the math I want. Especially `DateTimeOffset`; if I try to do date time correct using `TimeProvider`, I’m “encouraged” by the lacking API surface to abandon my attempt and use a normal `DateTime`.\n\nNodaTime, while the “correct” approach to many date/time problems, is complete overkill for those who don’t need to work with dates that often.",
                                           "updatedAt":  "2025-03-02T03:28:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ggcKR",
                                           "createdAt":  "2025-03-02T18:55:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOETCbSQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-03-02T19:23:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ahmadweera",
                                                                               "createdAt":  "2025-03-03T18:54:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RChoppick",
                                                                               "createdAt":  "2025-03-03T18:56:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "zhelezniakAIM",
                                                                               "createdAt":  "2025-03-04T09:07:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "h3xds1nz",
                                                                               "createdAt":  "2025-03-06T16:28:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "OronDF343",
                                                                               "createdAt":  "2025-05-21T16:26:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "jscarle",
                                           "body":  "\u003e NodaTime, while the “correct” approach to many date/time problems, is complete overkill for those who don’t need to work with dates that often.\n\nThat\u0027s sort of the spirit of this request. We shouldn\u0027t have to resort to using NodaTime unless we\u0027re doing more involved date/time manipulations. The issue at the moment is that the current API surface is inconsistent and lacking with DateOnly and TimeOnly especially feeling like forgotten types.",
                                           "updatedAt":  "2025-03-02T18:55:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vavQI",
                                           "createdAt":  "2025-06-05T07:11:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEVdlFw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Dreamescaper",
                                                                               "createdAt":  "2025-06-05T13:46:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e Substract instance method variants of Add to DateTime, DateTimeOffset, DateOnly, and TimeOnly\n\nRather than introduce SubstractYears, SubtractMonths etc., subtracting two DateOnly instances should simply yield a [Period-like type](https://nodatime.org/3.1.x/api/NodaTime.Period.html) (see #54400, #72064).",
                                           "updatedAt":  "2025-06-05T07:11:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vf_HL",
                                           "createdAt":  "2025-06-05T13:39:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "Isn\u0027t that just `TimeSpan`?",
                                           "updatedAt":  "2025-06-05T13:39:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vimUV",
                                           "createdAt":  "2025-06-05T15:55:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e \u003e Substract instance method variants of Add to DateTime, DateTimeOffset, DateOnly, and TimeOnly\n\u003e \n\u003e Rather than introduce SubstractYears, SubtractMonths etc., subtracting two DateOnly instances should simply yield a [Period-like type](https://nodatime.org/3.1.x/api/NodaTime.Period.html) (see [#54400](https://github.com/dotnet/runtime/issues/54400), [#72064](https://github.com/dotnet/runtime/issues/72064)).\n\nThese are two different types of operations.\n\nSubtracting years/months/days/new `Period` type would result in a new `Date(etc)` instance.\nSubtracting two `Date(etc)` instances would yield a `Period` type",
                                           "updatedAt":  "2025-06-05T15:55:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vio-H",
                                           "createdAt":  "2025-06-05T15:59:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The suggested overloads that take `double` should be very carefully considered as there are a lot of pitfalls (both perf and accuracy) with the existing `double` overloads.\n\nIt is typically better to only use the newer overloads that take and deal with integer amounts instead.",
                                           "updatedAt":  "2025-06-05T15:59:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6virSB",
                                           "createdAt":  "2025-06-05T16:02:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e Isn\u0027t that just `TimeSpan`?\n\nNo.\n`TimeSpan` is an \"absolute\" difference type (exact number of [fractional] seconds between two points).\nA `Period` type is almost always a \"relative\" type - A month difference between two dates can (and usually will) have different number of days.",
                                           "updatedAt":  "2025-06-05T16:02:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6vlGNK",
                                           "createdAt":  "2025-06-05T19:02:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "\"DateOnly + Period\" and \"DateOnly - Period\" arithmetic would be OK, but \"DateOnly - DateOnly\" returning Period seems surprising and error-prone; it could return a period like \"1 month plus 29 days\" when the application really needs \"60 days\" or \"2 months minus 2 days\" in subsequent arithmetic.\n\nIf there are practical uses for a Period-returning subtraction (perhaps for display purposes only, with no intention to do further arithmetic with the Period?), then I\u0027d prefer making it a named static function rather than an operator.  That way it would be obvious what type it\u0027s going to return, and one could add more parameters to control how to distribute the duration between months and days.",
                                           "updatedAt":  "2025-06-05T19:02:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wl7Ay",
                                           "createdAt":  "2025-06-11T13:32:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEWkjJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jscarle",
                                                                               "createdAt":  "2025-06-13T20:44:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Svish",
                                           "body":  "Yes, please allow me to just write `DateOnly.Today` instead of the annoying `DateOnly.FromDateTime(DateTime.Today)`.",
                                           "updatedAt":  "2025-06-11T13:32:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wuKEO",
                                           "createdAt":  "2025-06-12T03:00:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEWkjRw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Svish",
                                                                               "createdAt":  "2025-06-12T07:23:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "omariom",
                                                                               "createdAt":  "2025-06-12T23:39:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "jscarle",
                                                                               "createdAt":  "2025-06-13T20:44:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e Yes, please allow me to just write `DateOnly.Today` instead of the annoying `DateOnly.FromDateTime(DateTime.Today)`.\n\nStrictly speaking, you shouldn\u0027t be doing either.\n\nIn almost all cases, you should be using a [`TimeProvider`](https://learn.microsoft.com/en-us/dotnet/api/system.timeprovider?view=net-9.0) instead of any of the static creation methods.  This means you should be constructing \"today\" values via\n```csharp\nvar today = DateOnly.FromDateTime(timeProviderInstance.GetLocalNow().DateTime);\n// Or with a hypothetical DateTimeOffset version\nvar today = DateOnly.FromDateTime(timeProviderInstance.GetLocalNow());\n```\n\nI\u0027m generally against adding additional static creation methods, specifically because it\u0027s better to discourage their use altogether, and instead [to encourage the use of [`TimeProvider` for testability and similar reasons](https://learn.microsoft.com/en-us/dotnet/standard/datetime/timeprovider-overview).",
                                           "updatedAt":  "2025-06-12T03:00:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6wwr2V",
                                           "createdAt":  "2025-06-12T08:01:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ufcpp",
                                           "body":  "I oppose this proposal dut to time zone dependency, especially [`Today`](https://github.com/dotnet/runtime/issues/53498).",
                                           "updatedAt":  "2025-06-12T08:01:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xF3Hu",
                                           "createdAt":  "2025-06-13T17:43:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nvmkpk",
                                           "body":  "For `#4` I would prefer adding `GetLocalToday` and `GetUtcToday` to `TimeProvider` class instead that returns `DateOnly` (it should have had them from day 1). I use my own extension methods at the moment.\n\nI also would like to propose deprecation of `Today`, `Now` and `UtcNow` properties from `DateTime` and `DateTimeOffset` and encourage using `TimeProvider`. Mark them deprecated but keep them forever (or may be remove them completely in .net 15 or .net 20).",
                                           "updatedAt":  "2025-06-13T17:43:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xGCOl",
                                           "createdAt":  "2025-06-13T18:03:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEWkjbQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jscarle",
                                                                               "createdAt":  "2025-06-13T20:45:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Svish",
                                           "body":  "What\u0027s the value of using the much more complicated TimeProvider, if I do not care about faking it for tests? ",
                                           "updatedAt":  "2025-06-13T18:03:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xKBR-",
                                           "createdAt":  "2025-06-14T03:13:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nvmkpk",
                                           "body":  "\u003e What\u0027s the value of using the much more complicated TimeProvider, if I do not care about faking it for tests? \n\nIt is not much more complicated. In my opinion, getting current date and time from the system clock doesn\u0027t belong to the structure itself. The structure should just provide the storage and the value should come from another class like what WPF has with `Color` and `Colors`, `SystemColors` etc.",
                                           "updatedAt":  "2025-06-14T03:13:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xMRPt",
                                           "createdAt":  "2025-06-14T14:08:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jscarle",
                                           "body":  "\u003e \u003e What\u0027s the value of using the much more complicated TimeProvider, if I do not care about faking it for tests?\n\u003e \n\u003e It is not much more complicated. In my opinion, getting current date and time from the system clock doesn\u0027t belong to the structure itself. The structure should just provide the storage and the value should come from another class like what WPF has with `Color` and `Colors`, `SystemColors` etc.\n\nI think you\u0027re confusing \"Best Practice\" with class design. Regardless whether it\u0027s good or bad practice to use TimeProvider or not, does not change the fact that the classes do expose Date and Time. DateTime.Now, DateTime.UtcNow, and DateTime.Today are not going to go away, nor are people going to stop using them, just because TimeProvider now exists. I, for one, don\u0027t care to use it, nor do I need to in 99% of my day to day work. I do, however, use DateTime and DateOnly very frequently. The fact that TimeProvider may be the _better_ approach does not negate the need for a consistent API between DateTime, DateTimeOffset, DateOnly, and TimeOnly.",
                                           "updatedAt":  "2025-06-14T14:08:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xN1Gm",
                                           "createdAt":  "2025-06-14T20:49:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "\u003e What\u0027s the value of using the much more complicated TimeProvider, if I do not care about faking it for tests?\n\nThe entire point is being able to more reliably control what would normally be ambient context of the system.  The primary benefit is for testing, but you can do all sorts of things with it;\n - Have two separate clocks that tick at different rates\n - Have clocks running in different timezones (or even just in a timezone when running on a system that shouldn\u0027t have one, like server applications).\n - Have clocks use a different source-of-truth for time (Eg, explicit NTP process, GPS system, external service call for specific business calendar days, etc)\n \nIt\u0027s there for the same reason `CultureInfo` exists.",
                                           "updatedAt":  "2025-06-14T20:49:45Z"
                                       }
                                   ],
                         "totalCount":  22
                     },
        "title":  "Expand API surface for DateTime, DateTimeOffset, DateOnly, TimeOnly, and TimeSpan",
        "labels":  [
                       "api-suggestion",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114476",
        "createdAt":  "2025-04-10T07:31:53Z",
        "number":  114476,
        "author":  "michaelamaura",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBDcww==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "DerAlbertCom",
                                            "createdAt":  "2025-04-10T07:40:36Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-04-19T22:33:49Z",
        "body":  "### Description\n\nAfter updating the OS-level time zone database (tzdb) to reflect Paraguay’s permanent switch to UTC-3, .NET `TimeZoneInfo` incorrectly treats historically invalid times as valid and returns conflicting UTC offsets. \n\nParaguay switched to DST exactly \"before midnight\", thus skipping midnight:\n* Prior to the tz db update, `tz.IsInvalidTime(new DateTime(2024, 10, 6, 0, 0, 0))` was true.\n* After the tz db update, `tz.IsInvalidTime(new DateTime(2024, 10, 6, 0, 0, 0))` is false.\n\nAlso for historical dates `tz.IsInvalidTime` should return correct results to ensure correctness. Since there are also discussions about abolishing DST in the US and EU, we should also ensure that historical calculations there won\u0027t be affected by future timezone updates.\n\nImpact:\n* Data Integrity: Historical dates are incorrectly validated, leading to errors in scheduling, auditing, or compliance.\n* ~Offset Mismatches: DateTime and DateTimeOffset yield conflicting UTC offsets for the same logical time.~ (Edit: not reproducible)\n\n\n### Reproduction Steps\n\n```C#\nusing System;\n\t\t\t\t\t\npublic class Program\n{\n\tpublic static void Main()\n\t{\n\t\tvar tz = TimeZoneInfo.FindSystemTimeZoneById(\"America/Asuncion\");\n\t\tvar shouldBeInvalid = new DateTime(2024, 10, 6, 0, 0, 0);\n\t\t\n                // as a bonus show how offsets are handled incorrectly when passing invalid dates to tz.GetUtcOffset\n\t\tvar utcOffsetFromDateTime = tz.GetUtcOffset(shouldBeInvalid);\n\t\tvar dateTimeOffset = new DateTimeOffset(shouldBeInvalid, utcOffsetFromDateTime);\n\t\tvar utcOffsetFromDateTimeOffset = tz.GetUtcOffset(shouldBeInvalid);\n\t\t\n\t\tConsole.WriteLine($\"Invalid: {tz.IsInvalidTime(shouldBeInvalid)}\");\n\t\tConsole.WriteLine($\"UtcOffset: {utcOffsetFromDateTime}\");\n\t\tConsole.WriteLine($\"UtcOffset: {utcOffsetFromDateTimeOffset}\");\n\t}\n}\n```\n\n### Expected behavior\n\nShould print (still does no .NET fiddle as of writing this issue https://dotnetfiddle.net/Ws9LR7):\n\n```\nInvalid: True\nUtcOffset: -04:00:00\nUtcOffset: -04:00:00\n```\n\n### Actual behavior\n\nOn azure build agent with ubuntu-latest (agent version \u00274.253.0\u0027 , i.e. Ubuntu 24.04 with tzdata=2025b-0ubuntu0.24.04) it will print:\n\n```\nInvalid: True\nUtcOffset: -04:00:00\nUtcOffset: -03:00:00\n```\n\n### Regression?\n\nWorks still on .NET fiddle and did work on Azure build agent version `20250323.1.0` (i.e. Ubuntu 24.04 with tzdata=2024a-2ubuntu1)\n\n### Known Workarounds\n\n* use NodaTime\n* use the inconsistency between `GetUtcOffset(DateTime)` and `GetUtcOffset(DateTimeOffset)` to determine whether a time is invalid\n\n### Configuration\n\nReproducible on Azure build agents \"ubuntu-latest\", agent version \"4.253.0\".\n\n### Other information\n\nChanges to tzdb probably affecting this: https://github.com/eggert/tz/commit/486e1e890e68d52f9236b2b354484463f57ec692",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp-WSNw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6mZ9N4",
                                           "createdAt":  "2025-04-10T07:32:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-10T07:32:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mmuAd",
                                           "createdAt":  "2025-04-10T21:06:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@michaelamaura I have tried running the code on Ubuntu `25.04` using the latest `tzdata` package version 2025 and I am seeing the result.\n\n```\ndpkg -l | grep tzdata\nii  tzdata                              2025b-1ubuntu1                             all          time zone and daylight-saving time data\n\n~/test# dotnet run\nInvalid: False\nUtcOffset: -03:00:00\nUtcOffset: -03:00:00\n```\n\n`Invalid: False` Looks wrong and will be interesting to investigate.\n\n```\n~/test# zdump -v America/Asuncion\n\nAmerica/Asuncion  Sun Mar 24 02:59:59 2024 UT = Sat Mar 23 23:59:59 2024 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 24 03:00:00 2024 UT = Sat Mar 23 23:00:00 2024 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  6 03:59:59 2024 UT = Sat Oct  5 23:59:59 2024 -04 isdst=0 gmtoff=-14400   \u003c\u003c\u003c\u003c\u003c\u003c When the transition starts  \nAmerica/Asuncion  Sun Oct  6 04:00:00 2024 UT = Sun Oct  6 01:00:00 2024 -03 isdst=1 gmtoff=-10800   \u003c\u003c\u003c\u003c\u003c\u003c \nAmerica/Asuncion  Tue Oct 15 02:59:59 2024 UT = Mon Oct 14 23:59:59 2024 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Tue Oct 15 03:00:00 2024 UT = Tue Oct 15 00:00:00 2024 -03 isdst=0 gmtoff=-10800\n```\n\nFor `GetUtcOffset()` we don\u0027t throw on invalid time there, instead we just return the value of the BaseUtcOffset which is `-3:00:00`.\n\nCould you please run the following commands on your machine that show the problem and send the results to know what is going on there?\n\n```\ndpkg -l | grep tzdata\n\nzdump -v America/Asuncion\n```\n\nI guess somehow you have wrong installed `tzdata` package.\n",
                                           "updatedAt":  "2025-04-10T21:38:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mmuN5",
                                           "createdAt":  "2025-04-10T21:06:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "This issue has been marked `needs-author-action` and may be missing some important information.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-10T21:06:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mrUFZ",
                                           "createdAt":  "2025-04-11T09:36:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaelamaura",
                                           "body":  "Regarding the offset inconsistency, I was not able to reproduce it any more. Sorry for that.\n\nThe issue with `IsInvalidTime` persists however.\n\nI ran the commands anyway. The build agent is a Ubuntu 24.04.2:\n\n```\n~/# dpkg -l | grep tzdata\nii  tzdata                             2025b-0ubuntu0.24.04                          all          time zone and daylight-saving time data\nii  tzdata-legacy                      2025b-0ubuntu0.24.04                          all          time zone data for TAI minus ten seconds\n```\n\n```\n~/# zdump -v America/Asuncion\nAmerica/Asuncion  -9223372036854775808 = NULL\nAmerica/Asuncion  -9223372036854689408 = NULL\nAmerica/Asuncion  Sun Oct  7 03:59:59 2012 UT = Sat Oct  6 23:59:59 2012 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  7 04:00:00 2012 UT = Sun Oct  7 01:00:00 2012 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 24 02:59:59 2013 UT = Sat Mar 23 23:59:59 2013 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 24 03:00:00 2013 UT = Sat Mar 23 23:00:00 2013 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  6 03:59:59 2013 UT = Sat Oct  5 23:59:59 2013 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  6 04:00:00 2013 UT = Sun Oct  6 01:00:00 2013 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 23 02:59:59 2014 UT = Sat Mar 22 23:59:59 2014 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 23 03:00:00 2014 UT = Sat Mar 22 23:00:00 2014 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  5 03:59:59 2014 UT = Sat Oct  4 23:59:59 2014 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  5 04:00:00 2014 UT = Sun Oct  5 01:00:00 2014 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 22 02:59:59 2015 UT = Sat Mar 21 23:59:59 2015 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 22 03:00:00 2015 UT = Sat Mar 21 23:00:00 2015 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  4 03:59:59 2015 UT = Sat Oct  3 23:59:59 2015 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  4 04:00:00 2015 UT = Sun Oct  4 01:00:00 2015 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 27 02:59:59 2016 UT = Sat Mar 26 23:59:59 2016 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 27 03:00:00 2016 UT = Sat Mar 26 23:00:00 2016 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  2 03:59:59 2016 UT = Sat Oct  1 23:59:59 2016 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  2 04:00:00 2016 UT = Sun Oct  2 01:00:00 2016 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 26 02:59:59 2017 UT = Sat Mar 25 23:59:59 2017 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 26 03:00:00 2017 UT = Sat Mar 25 23:00:00 2017 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  1 03:59:59 2017 UT = Sat Sep 30 23:59:59 2017 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  1 04:00:00 2017 UT = Sun Oct  1 01:00:00 2017 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 25 02:59:59 2018 UT = Sat Mar 24 23:59:59 2018 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 25 03:00:00 2018 UT = Sat Mar 24 23:00:00 2018 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  7 03:59:59 2018 UT = Sat Oct  6 23:59:59 2018 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  7 04:00:00 2018 UT = Sun Oct  7 01:00:00 2018 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 24 02:59:59 2019 UT = Sat Mar 23 23:59:59 2019 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 24 03:00:00 2019 UT = Sat Mar 23 23:00:00 2019 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  6 03:59:59 2019 UT = Sat Oct  5 23:59:59 2019 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  6 04:00:00 2019 UT = Sun Oct  6 01:00:00 2019 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 22 02:59:59 2020 UT = Sat Mar 21 23:59:59 2020 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 22 03:00:00 2020 UT = Sat Mar 21 23:00:00 2020 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  4 03:59:59 2020 UT = Sat Oct  3 23:59:59 2020 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  4 04:00:00 2020 UT = Sun Oct  4 01:00:00 2020 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 28 02:59:59 2021 UT = Sat Mar 27 23:59:59 2021 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 28 03:00:00 2021 UT = Sat Mar 27 23:00:00 2021 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  3 03:59:59 2021 UT = Sat Oct  2 23:59:59 2021 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  3 04:00:00 2021 UT = Sun Oct  3 01:00:00 2021 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 27 02:59:59 2022 UT = Sat Mar 26 23:59:59 2022 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 27 03:00:00 2022 UT = Sat Mar 26 23:00:00 2022 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  2 03:59:59 2022 UT = Sat Oct  1 23:59:59 2022 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  2 04:00:00 2022 UT = Sun Oct  2 01:00:00 2022 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 26 02:59:59 2023 UT = Sat Mar 25 23:59:59 2023 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 26 03:00:00 2023 UT = Sat Mar 25 23:00:00 2023 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  1 03:59:59 2023 UT = Sat Sep 30 23:59:59 2023 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  1 04:00:00 2023 UT = Sun Oct  1 01:00:00 2023 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 24 02:59:59 2024 UT = Sat Mar 23 23:59:59 2024 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 24 03:00:00 2024 UT = Sat Mar 23 23:00:00 2024 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  6 03:59:59 2024 UT = Sat Oct  5 23:59:59 2024 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  6 04:00:00 2024 UT = Sun Oct  6 01:00:00 2024 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Tue Oct 15 02:59:59 2024 UT = Mon Oct 14 23:59:59 2024 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Tue Oct 15 03:00:00 2024 UT = Tue Oct 15 00:00:00 2024 -03 isdst=0 gmtoff=-10800\nAmerica/Asuncion  9223372036854689407 = NULL\nAmerica/Asuncion  9223372036854775807 = NULL\n```",
                                           "updatedAt":  "2025-04-11T09:39:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mrsNI",
                                           "createdAt":  "2025-04-11T10:11:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaelamaura",
                                           "body":  "### Running with tzdata=2024a-2ubuntu1: works as it should\n\nJust downgraded the tzdata \n\n```\nsudo apt install -y tzdata=2024a-2ubuntu1 --allow-downgrades\n```\n\nAnd ran the program again:\n\n```\nInvalid: True\nUtcOffset: -04:00:00\nUtcOffset: -04:00:00\n```\n\nSo I can confirm it\u0027s working as it should with 2024a-2ubuntu1\n\n```\nzdump -v  America/Asuncion\n\n...\nAmerica/Asuncion  Sun Mar 26 03:00:00 2023 UT = Sat Mar 25 23:00:00 2023 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  1 03:59:59 2023 UT = Sat Sep 30 23:59:59 2023 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  1 04:00:00 2023 UT = Sun Oct  1 01:00:00 2023 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 24 02:59:59 2024 UT = Sat Mar 23 23:59:59 2024 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 24 03:00:00 2024 UT = Sat Mar 23 23:00:00 2024 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  6 03:59:59 2024 UT = Sat Oct  5 23:59:59 2024 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  6 04:00:00 2024 UT = Sun Oct  6 01:00:00 2024 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 23 02:59:59 2025 UT = Sat Mar 22 23:59:59 2025 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Sun Mar 23 03:00:00 2025 UT = Sat Mar 22 23:00:00 2025 -04 isdst=0 gmtoff=-14400\nAmerica/Asuncion  Sun Oct  5 03:59:59 2025 UT = Sat Oct  4 23:59:59 2025 -04 isdst=0 gmtoff=-14400\n...\n```",
                                           "updatedAt":  "2025-04-11T10:11:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mvOT1",
                                           "createdAt":  "2025-04-11T16:23:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Thanks @michaelamaura for the info. \n\n\u003e The issue with IsInvalidTime persists however.\n\nYes, looks it is corner case showing a bug in the calculation done in https://github.com/dotnet/runtime/blob/20b579bdbb6d8f11af41014d540c82f1d832de61/src/libraries/System.Private.CoreLib/src/System/TimeZoneInfo.cs#L1344. Comparing `2024a-2ubuntu1` to `2025b-0ubuntu0` looks the following two rules causing the difference. The other rules in the same year are similar. Anyway, this needs to be investigated.\n\n```\nAmerica/Asuncion  Tue Oct 15 02:59:59 2024 UT = Mon Oct 14 23:59:59 2024 -03 isdst=1 gmtoff=-10800\nAmerica/Asuncion  Tue Oct 15 03:00:00 2024 UT = Tue Oct 15 00:00:00 2024 -03 isdst=0 gmtoff=-10800\n```",
                                           "updatedAt":  "2025-04-11T16:23:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6n26JO",
                                           "createdAt":  "2025-04-18T21:01:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaelamaura",
                                           "body":  "## Cause of issue in `GetIsInvalidTime`?\n\nTo me it seems like an issue here:\n\nhttps://github.com/dotnet/runtime/blob/20b579bdbb6d8f11af41014d540c82f1d832de61/src/libraries/System.Private.CoreLib/src/System/TimeZoneInfo.cs#L1781-L1799\n\nThe comments `/* FUTURE: + rule.StandardDelta; */` and `/* FUTURE: - rule.StandardDelta; */` are a giveaway (and have there been since ages). Because these are exactly the places that would need to be adjusted - additional to a few other ones.\n\nAt the moment `GetIsInvalidTime` just is ignoring changes of `BaseUtcOffset`.\n\nTo me it also looks like we would need to know the `BaseUtcOffset` from the next and/or previous `AdjustmentRule` in this place to decide whether there is an invalid time.\n\n## Analyzation of Differences between  `2025b-0ubuntu0.24.04` and `2024a-2ubuntu1`\n\nI also had a look at how .NET is interpreting the timezone data, as to exclude we have an issue there. So I just wrote a simple program to output the `AdjustmentRule`s:\n\n```c#\npublic static class AdjustmentRuleExtensions\n{\n    [UnsafeAccessor(UnsafeAccessorKind.Field, Name = \"_noDaylightTransitions\")]\n    public static extern ref bool NoDaylightTransitions(this TimeZoneInfo.AdjustmentRule @this);\n\n    public static string ToFormattedString(this TimeZoneInfo.AdjustmentRule rule)\n    {\n        return $\"DateStart: {rule.DateStart:yyyy-MM-dd}, \" +\n               $\"DateEnd: {rule.DateEnd:yyyy-MM-dd}, \" +\n               $\"DaylightDelta: {rule.DaylightDelta}, \" +\n               $\"BaseUtcOffsetDelta: {rule.BaseUtcOffsetDelta}, \" +\n               $\"NoDaylightTransitions: {NoDaylightTransitions(rule)}, \" +\n               $\"DaylightTransitionStart: {TransitionTimeToString(rule.DaylightTransitionStart)}, \" +\n               $\"DaylightTransitionEnd: {TransitionTimeToString(rule.DaylightTransitionEnd)}\";\n    }\n\n    private static string TransitionTimeToString(this TimeZoneInfo.TransitionTime tt)\n    {\n        // For fixed-date rules\n        if (tt.IsFixedDateRule)\n        {\n            // Example: \"Month: 3, Day: 15, TimeOfDay: 02:00:00\"\n            return $\"Month: {tt.Month:00}, Day: {tt.Day:00}, TimeOfDay: {tt.TimeOfDay:HH:mm:ss.FFF}\";\n        }\n        else\n        {\n            // Example: \"Month: 3, Week: 2, DayOfWeek: Sunday, TimeOfDay: 02:00:00\"\n            return $\"Month: {tt.Month:00}, Week: {tt.Week}, DayOfWeek: {tt.DayOfWeek}, TimeOfDay: {tt.TimeOfDay:HH:mm:ss.FFF}\";\n        }\n    }\n}\n```\n\n```c#\nforeach (var rule in TimeZoneInfo.FindSystemTimeZoneById(\"America/Asuncion\").GetAdjustmentRules()\n             .Where(r =\u003e r.DateStart.Year is \u003e= 2023 and \u003c= 2025))\n{\n    Console.WriteLine(rule.ToFormattedString());\n}\n```\n\nThe output with `2025b-0ubuntu0.24.04 ` will be:\n\n```\nDateStart: 2023-01-01, DateEnd: 2023-03-25, DaylightDelta: 00:00:00, BaseUtcOffsetDelta: 00:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 01, Day: 01, TimeOfDay: 00:00:00, DaylightTransitionEnd: Month: 03, Day: 25, TimeOfDay: 23:59:59.999\nDateStart: 2023-03-26, DateEnd: 2023-10-01, DaylightDelta: 00:00:00, BaseUtcOffsetDelta: -01:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 03, Day: 26, TimeOfDay: 00:00:00, DaylightTransitionEnd: Month: 10, Day: 01, TimeOfDay: 00:59:59.999\nDateStart: 2023-10-01, DateEnd: 2023-12-31, DaylightDelta: 00:00:00, BaseUtcOffsetDelta: 00:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 10, Day: 01, TimeOfDay: 01:00:00, DaylightTransitionEnd: Month: 12, Day: 31, TimeOfDay: 23:59:59.999\nDateStart: 2024-01-01, DateEnd: 2024-03-23, DaylightDelta: 00:00:00, BaseUtcOffsetDelta: 00:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 01, Day: 01, TimeOfDay: 00:00:00, DaylightTransitionEnd: Month: 03, Day: 23, TimeOfDay: 23:59:59.999\nDateStart: 2024-03-24, DateEnd: 2024-10-06, DaylightDelta: 00:00:00, BaseUtcOffsetDelta: -01:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 03, Day: 24, TimeOfDay: 00:00:00, DaylightTransitionEnd: Month: 10, Day: 06, TimeOfDay: 00:59:59.999\nDateStart: 2024-10-06, DateEnd: 2024-10-14, DaylightDelta: 00:00:00, BaseUtcOffsetDelta: 00:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 10, Day: 06, TimeOfDay: 01:00:00, DaylightTransitionEnd: Month: 10, Day: 14, TimeOfDay: 23:59:59.999\n```\n\nWith `2024a-2ubuntu1` it will be:\n\n```\nDateStart: 2023-01-01, DateEnd: 2023-03-25, DaylightDelta: 01:00:00, BaseUtcOffsetDelta: 00:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 01, Day: 01, TimeOfDay: 00:00:00, DaylightTransitionEnd: Month: 03, Day: 25, TimeOfDay: 23:59:59.999\nDateStart: 2023-10-01, DateEnd: 2023-12-31, DaylightDelta: 01:00:00, BaseUtcOffsetDelta: 00:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 10, Day: 01, TimeOfDay: 00:00:00, DaylightTransitionEnd: Month: 12, Day: 31, TimeOfDay: 23:59:59.999\nDateStart: 2024-01-01, DateEnd: 2024-03-23, DaylightDelta: 01:00:00, BaseUtcOffsetDelta: 00:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 01, Day: 01, TimeOfDay: 00:00:00, DaylightTransitionEnd: Month: 03, Day: 23, TimeOfDay: 23:59:59.999\nDateStart: 2024-10-06, DateEnd: 2024-12-31, DaylightDelta: 01:00:00, BaseUtcOffsetDelta: 00:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 10, Day: 06, TimeOfDay: 00:00:00, DaylightTransitionEnd: Month: 12, Day: 31, TimeOfDay: 23:59:59.999\nDateStart: 2025-01-01, DateEnd: 2025-03-22, DaylightDelta: 01:00:00, BaseUtcOffsetDelta: 00:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 01, Day: 01, TimeOfDay: 00:00:00, DaylightTransitionEnd: Month: 03, Day: 22, TimeOfDay: 23:59:59.999\nDateStart: 2025-10-05, DateEnd: 2025-12-31, DaylightDelta: 01:00:00, BaseUtcOffsetDelta: 00:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 10, Day: 05, TimeOfDay: 00:00:00, DaylightTransitionEnd: Month: 12, Day: 31, TimeOfDay: 23:59:59.999\n```\n\nSo, with the old tzdata we will not have any `BaseUtcOffsetDelta` changes. With the new tzdata, all clock changes are handled using the `BaseUtcOffsetDelta` - which is ignored by the code in `TimeZoneInfo`.\n\n### Investigating the time change in Portugal 1995\n\nThe following program:\n\n```c#\nvar portugalChange1995At1 = new DateTime(1995, 3, 26, 1, 0, 0);\nConsole.WriteLine(\n    $\"IsInvalidTime({portugalChange1995At1:yyyy-MM-dd\u0027T\u0027HH:mm:ss}): {portugalTz.IsInvalidTime(portugalChange1995At1)}\");\nvar portugalChange1995At2 = new DateTime(1995, 3, 26, 2, 0, 0);\nConsole.WriteLine(\n    $\"IsInvalidTime({portugalChange1995At2:yyyy-MM-dd\u0027T\u0027HH:mm:ss}): {portugalTz.IsInvalidTime(portugalChange1995At2)}\");\nvar portugalChange1995At3 = new DateTime(1995, 3, 26, 3, 0, 0);\nConsole.WriteLine(\n    $\"IsInvalidTime({portugalChange1995At3:yyyy-MM-dd\u0027T\u0027HH:mm:ss}): {portugalTz.IsInvalidTime(portugalChange1995At3)}\");\n```\n\nWill print:\n\n```\nIsInvalidTime(1995-03-26T01:00:00): False\nIsInvalidTime(1995-03-26T02:00:00): True\nIsInvalidTime(1995-03-26T03:00:00): True\n```\n\nThe latter one is wrong, since the clocks were set forward for only one hour: https://www.timeanddate.com/time/change/portugal?year=1995\n\nThe issue is similar to Paraguay, since Portugal switched from UTC+1 to UTC+0 as default offset in 1996 (after having switch the reverse way in 1992). Thus the daylightDelta alone is not enough to determine whether a time is invalid.\n\n\nThe following program:\n\n```c#\nvar portugalTz = TimeZoneInfo.FindSystemTimeZoneById(\"Europe/Lisbon\");\n\nforeach (var rule in portugalTz.GetAdjustmentRules()\n             .Where(r =\u003e r.DateStart.Year is \u003e= 1995 and \u003c= 1997))\n{\n    Console.WriteLine(rule.ToFormattedString());\n}\n```\n\nwill print:\n\n```\nDateStart: 1995-01-01, DateEnd: 1995-03-26, DaylightDelta: 00:00:00, BaseUtcOffsetDelta: 01:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 01, Day: 01, TimeOfDay: 00:00:00, DaylightTransitionEnd: Month: 03, Day: 26, TimeOfDay: 00:59:59.999\nDateStart: 1995-03-26, DateEnd: 1995-09-24, DaylightDelta: 02:00:00, BaseUtcOffsetDelta: 00:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 03, Day: 26, TimeOfDay: 01:00:00, DaylightTransitionEnd: Month: 09, Day: 24, TimeOfDay: 02:59:59.999\nDateStart: 1995-09-24, DateEnd: 1995-12-31, DaylightDelta: 00:00:00, BaseUtcOffsetDelta: 01:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 09, Day: 24, TimeOfDay: 01:00:00, DaylightTransitionEnd: Month: 12, Day: 31, TimeOfDay: 23:59:59.999\nDateStart: 1996-01-01, DateEnd: 1996-03-31, DaylightDelta: 00:00:00, BaseUtcOffsetDelta: 01:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 01, Day: 01, TimeOfDay: 00:00:00, DaylightTransitionEnd: Month: 03, Day: 31, TimeOfDay: 00:59:59.999\nDateStart: 1996-03-31, DateEnd: 1996-10-27, DaylightDelta: 01:00:00, BaseUtcOffsetDelta: 00:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 03, Day: 31, TimeOfDay: 01:00:00, DaylightTransitionEnd: Month: 10, Day: 27, TimeOfDay: 01:59:59.999\nDateStart: 1997-03-30, DateEnd: 1997-10-26, DaylightDelta: 01:00:00, BaseUtcOffsetDelta: 00:00:00, NoDaylightTransitions: False, DaylightTransitionStart: Month: 03, Day: 30, TimeOfDay: 01:00:00, DaylightTransitionEnd: Month: 10, Day: 26, TimeOfDay: 01:59:59.999\n```\n\nIt\u0027s a bit funny though, that .NET defines `DaylightDelta` as 02:00 for the DST time in 1995, but the `BaseUtcOffsetDelta` as 00:00. You could argue that this is clearly wrong for this time since the `DaylightDelta`  has always been 01:00 in Portugal, but the UTC offset has changed.\n\nI did not investigate the parsing of the tzdate so far - but since the `BaseUtcOffsetDelta` would need to be taken into account anyway this also seems unnecessary for the bug regarding the `IsInvalidTIme`.",
                                           "updatedAt":  "2025-04-18T21:40:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6n5ZI3",
                                           "createdAt":  "2025-04-19T19:39:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaelamaura",
                                           "body":  "## Similar issue in `TimeZoneInfo.IsAmbiguousTime`\n\nPortugal has switched its UTC offset twice in the 1990ies:\n\n* in 1992 from UTC+0 to UTC+1 (WET to CET)\n* in 1996 back from UTC+1 to UTC+0 (CET to WET)\n\nSo, additional to the example above, the following snippet should print `false`, but it does print `true`:\n\n```c#\nvar portugalChangeIn1992 = new DateTime(1992, 9, 27, 1, 30, 0);\nConsole.WriteLine(\n    $\"IsAmbiguousTime({portugalChangeIn1992:yyyy-MM-dd\u0027T\u0027HH:mm:ss}): {portugalTz.IsAmbiguousTime(portugalChangeIn1992)}\");\n```\n\nI created a repository with Unit test cases here: https://github.com/michaelamaura/dotnet-timezoneinfo-fix\n",
                                           "updatedAt":  "2025-04-19T22:33:48Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  ".NET TimeZoneInfo fails to recognize historical invalid times after 2025 tzdb update for America/Asuncion",
        "labels":  [
                       "bug",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114543",
        "createdAt":  "2025-04-11T14:23:58Z",
        "number":  114543,
        "author":  "AOne-T",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-11T23:25:25Z",
        "body":  "### Description\n\nOur app have a method to return a localized list of time zones (simplified):\n```C#\n        public IActionResult GetAllTimeZone(string lang = \"\") {\n            var reqCult = CultureInfo.GetCultureInfo(lang);\n            CultureInfo.CurrentUICulture = reqCult;\n            CultureInfo.CurrentCulture = reqCult;\n            CultureInfo.DefaultThreadCurrentUICulture = reqCult;\n            CultureInfo.DefaultThreadCurrentCulture = reqCult;\n\n            TimeZoneInfo.ClearCachedData();\n            return _mapper.Map\u003cTimeZoneInfoDto[]\u003e(TimeZoneInfo.GetSystemTimeZones());\n        }\n```\nWe were using .net 6.0 in docker (Linux)\nCalling it with \"en\", \"de\", \"zh\" produced expected results.\n\nHowever when we upgraded to .net 8.0 the same code broke. It now produces always the same results not respecting `CultureInfo.CurrentUICulture`.\n\n### Reproduction Steps\n\nCreate minimal api project with one method that returns `TimeZoneInfo.GetSystemTimeZones()` as described earlier\n\n### Expected behavior\n\nList of timezones with localized display names\n\n### Actual behavior\n\nList of timezones with display names of the OS locale. When running in container it returns always English names. On dev machine it uses the OS locale.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nDev machine\ndotnet SDK\n Version:           8.0.115\n Commit:            9c0387c3ea\n\nEnvironment:\n OS Name:     ubuntu\n OS Version:  24.04\n OS Platform: Linux\n RID:         ubuntu.24.04-x64\n Base Path:   /usr/lib/dotnet/sdk/8.0.115/\n\nHost:\n  Version:      8.0.15\n  Architecture: x64\n  Commit:       50c4cb9fc3\n\n.NET SDKs installed:\n  6.0.136 [/usr/lib/dotnet/sdk]\n  8.0.115 [/usr/lib/dotnet/sdk]\n\n.NET runtimes installed:\n  Microsoft.AspNetCore.App 6.0.36 [/usr/lib/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.AspNetCore.App 8.0.15 [/usr/lib/dotnet/shared/Microsoft.AspNetCore.App]\n  Microsoft.NETCore.App 6.0.36 [/usr/lib/dotnet/shared/Microsoft.NETCore.App]\n  Microsoft.NETCore.App 8.0.15 [/usr/lib/dotnet/shared/Microsoft.NETCore.App]\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpskwLg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6muBMU",
                                           "createdAt":  "2025-04-11T14:28:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-globalization\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-11T14:28:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6myTAu",
                                           "createdAt":  "2025-04-11T23:25:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-11T23:25:24Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "TimeZoneInfo.GetSystemTimeZones() doesn\u0027t support localized display names",
        "labels":  [
                       "regression-from-last-release",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115279",
        "createdAt":  "2025-05-04T13:48:44Z",
        "number":  115279,
        "author":  "jnyrup",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCJvig==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "HighPerfDotNet",
                                            "createdAt":  "2025-05-04T16:44:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TickThunder",
                                            "createdAt":  "2025-05-05T03:38:51Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "nneeoo",
                                            "createdAt":  "2025-05-05T06:05:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ShreyasJejurkar",
                                            "createdAt":  "2025-05-05T06:08:19Z"
                                        },
                                        {
                                            "content":  "ROCKET",
                                            "user":  "ShreyasJejurkar",
                                            "createdAt":  "2025-05-05T06:08:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cassioneri",
                                            "createdAt":  "2025-05-08T05:46:49Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-05-19T14:09:04Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\n\n### Description\nIn [Lightning Talk: Saturday Is Coming Faster - Part 1](https://www.youtube.com/watch?v=64mTEXnSnZs) and [Lightning Talk: Saturday Is Coming Faster -P art 2](https://www.youtube.com/watch?v=bnVkWEjRNeI) @cassioneri presents a way to optimize `% 7` for C++\u0027s `weekday::weekday{year_month_day}` function.\nThe same micro-optimization seems to be applicable for C#\u0027s [`DateTime.DayOfWeek`](https://github.com/dotnet/runtime/blob/4a75beabb6b218ced9626c466206b32b299e304a/src/libraries/System.Private.CoreLib/src/System/DateTime.cs#L1435), [`DateOnly.DayOfWeek`](https://github.com/dotnet/runtime/blob/4a75beabb6b218ced9626c466206b32b299e304a/src/libraries/System.Private.CoreLib/src/System/DateOnly.cs#L101) and possibly other places in `Calendar.cs` and `ISOWeek.cs` using `% 7`.\n\nIn short: For the range of \"days since epoch\" between `DateTime.MinValue` and `DateTime.MaxValue` we can replace `% 7` with this method.\n```cs\nprivate static uint FastMod7(uint n)\n{\n    Debug.Assert(n \u003c 178_956_973);\n    return 613_566_757 * n \u003e\u003e 29;\n}\n```\n\nIf we implement this fast path in `DayOfWeek2`, we can similarly to the talk, proof this works by simply enumerating all days between `DateTime.MinValue` and `DateTime.MaxValue`.\n\n```cs\npublic DayOfWeek DayOfWeek2 =\u003e (DayOfWeek)FastMod7((uint)(UTicks / TimeSpan.TicksPerDay) + 1);\n\nprivate static uint FastMod7(uint n)\n{\n    Debug.Assert(n \u003c 178_956_973);\n    return 613_566_757 * n \u003e\u003e 29;\n}\n```\n\n```cs\nfor (var ticks = DateTime.MinValue.Ticks; ticks \u003c= DateTime.MaxValue.Ticks; ticks += TimeSpan.TicksPerDay)\n{\n    var d = new MyDateTime(ticks);\n    Debug.Assert(d.DayOfWeek == d.DayOfWeek2);\n}\n```\n\nI tried micro benchmarking this and it shows a 5% improvement and a 14 B code size reduction.\n\n```\nBenchmarkDotNet v0.14.1-nightly.20250503.223, Windows 11 (10.0.26100.3775)\nUnknown processor\n.NET SDK 10.0.100-preview.3.25201.16\n  [Host]     : .NET 10.0.0 (10.0.25.17105), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\n  DefaultJob : .NET 10.0.0 (10.0.25.17105), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\n```\n\n| Method     | Mean      | Error     | StdDev    | Ratio | RatioSD | Code Size |\n|----------- |----------:|----------:|----------:|------:|--------:|----------:|\n| DayOfWeek  | 0.2111 ns | 0.0015 ns | 0.0013 ns |  1.00 |    0.01 |      63 B |\n| DayOfWeek2 | 0.2010 ns | 0.0039 ns | 0.0035 ns |  0.95 |    0.02 |      49 B |\n\n\u003cdetails\u003e\n\u003csummary\u003easm\u003c/summary\u003e\n\n## .NET 10.0.0 (10.0.25.17105), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\n```assembly\n; WeekDayBenchmark0.DayOfWeek()\n       mov       rdx,[rcx+8]\n       mov       rax,3FFFFFFFFFFFFFFF\n       and       rdx,rax\n       mov       rcx,28B8FFC778816079\n       mov       rax,rdx\n       mul       rcx\n       shr       rdx,25\n       lea       ecx,[rdx+1]\n       mov       rdx,2492492492492493\n       mov       eax,ecx\n       mul       rdx\n       imul      eax,edx,7\n       sub       ecx,eax\n       mov       eax,ecx\n       ret\n; Total bytes of code 63\n```\n\n## .NET 10.0.0 (10.0.25.17105), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\n```assembly\n; WeekDayBenchmark0.DayOfWeek2()\n       mov       rdx,[rcx+8]\n       mov       rax,3FFFFFFFFFFFFFFF\n       and       rdx,rax\n       mov       rcx,28B8FFC778816079\n       mov       rax,rdx\n       mul       rcx\n       shr       rdx,25\n       inc       edx\n       imul      eax,edx,24924925\n       shr       eax,1D\n       ret\n; Total bytes of code 49\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eBenchmark code\u003c/summary\u003e\n\n```cs\nusing BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Running;\nusing System.Diagnostics;\nusing System;\n\nBenchmarkRunner.Run\u003cWeekDayBenchmark\u003e();\n\n[DisassemblyDiagnoser]\npublic class WeekDayBenchmark\n{\n    public MyDateTime MyDateTime0 { get; set; }\n\n    [GlobalSetup]\n    public void GlobalSetup()\n    {\n        MyDateTime0 = new MyDateTime(DateTime.MaxValue.Ticks);\n    }\n\n    [Benchmark(Baseline = true)]\n    public DayOfWeek DayOfWeek() =\u003e MyDateTime0.DayOfWeek;\n\n    [Benchmark]\n    public DayOfWeek DayOfWeek2() =\u003e MyDateTime0.DayOfWeek2;\n}\n\npublic readonly partial struct MyDateTime\n{\n    private const ulong TicksMask = 0x3FFFFFFFFFFFFFFF;\n\n    internal readonly ulong _dateData;\n\n    public MyDateTime(long ticks)\n    {\n        _dateData = (ulong)ticks;\n    }\n\n    private ulong UTicks =\u003e _dateData \u0026 TicksMask;\n\n    public DayOfWeek DayOfWeek =\u003e (DayOfWeek)(((uint)(UTicks / TimeSpan.TicksPerDay) + 1) % 7);\n\n    public DayOfWeek DayOfWeek2 =\u003e (DayOfWeek)FastMod7((uint)(UTicks / TimeSpan.TicksPerDay) + 1);\n\n    private static uint FastMod7(uint n)\n    {\n        Debug.Assert(n \u003c 178_956_973);\n        return 613_566_757 * n \u003e\u003e 29;\n    }\n}\n```\n\n\u003c/details\u003e\n\nIs this something that would be worth pursuing in the BCL or is it either not worth the complexity, should be handled by the JIT or something else?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrFPdzQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6p907V",
                                           "createdAt":  "2025-05-05T16:30:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERRVvQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cassioneri",
                                                                               "createdAt":  "2025-05-08T05:46:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@jnyrup thanks for pointing at that. Are you interested in submitting a PR? doing quick search, here are the places can be updated. \n\n```\nSystem.Private.CoreLib\\src\\System\\DateOnly.cs:        public DayOfWeek DayOfWeek =\u003e (DayOfWeek)((_dayNumber + 1) % 7);\nSystem.Private.CoreLib\\src\\System\\DateTime.cs:        public DayOfWeek DayOfWeek =\u003e (DayOfWeek)(((uint)(UTicks / TimeSpan.TicksPerDay) + 1) % 7);\nSystem.Private.CoreLib\\src\\System\\Globalization\\Calendar.cs:            int dayForJan1 = (int)GetDayOfWeek(time) - (dayOfYear % 7);\nSystem.Private.CoreLib\\src\\System\\Globalization\\Calendar.cs:            int offset = (dayForJan1 - firstDayOfWeek + 14) % 7;\nSystem.Private.CoreLib\\src\\System\\Globalization\\Calendar.cs:            dayForJan1 = (int)GetDayOfWeek(time) - (dayOfYear % 7);\nSystem.Private.CoreLib\\src\\System\\Globalization\\Calendar.cs:            offset = (firstDayOfWeek - dayForJan1 + 14) % 7;\nSystem.Private.CoreLib\\src\\System\\Globalization\\Calendar.cs:            int dayOfWeekOfFirstOfYear = (int)GetDayOfWeek(MinSupportedDateTime) - dayOfYear % 7;\nSystem.Private.CoreLib\\src\\System\\Globalization\\Calendar.cs:            int offset = (firstDayOfWeek + 7 - dayOfWeekOfFirstOfYear) % 7;\nSystem.Private.CoreLib\\src\\System\\Globalization\\Calendar.cs:            int dayOfWeekOfFirstOfPreviousYear = dayOfWeekOfFirstOfYear - 1 - (daysInYearBeforeMinSupportedYear % 7);\nSystem.Private.CoreLib\\src\\System\\Globalization\\Calendar.cs:            int daysInInitialPartialWeek = (firstDayOfWeek - dayOfWeekOfFirstOfPreviousYear + 14) % 7;\nSystem.Private.CoreLib\\src\\System\\Globalization\\ISOWeek.cs:                return (y + (y / 4) - cent + cent / 4) % 7;\n```\n",
                                           "updatedAt":  "2025-05-05T16:30:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6p-fov",
                                           "createdAt":  "2025-05-05T17:25:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "This likely isn\u0027t something that can be easily handled by the JIT due to the required range knowledge.\n\nHowever, it\u0027s notably also only saving around 2 cycles (changing out a 3+1 cycle `imul+sub` for a 1+1 cycle `shr+inc`), for code that is more magic and less understandable.\n\nThe benchmark notably also gave more standard deviation and couldn\u0027t accurately measure the difference. It\u0027s reporting both as take 1 cycle on a 5GHz computer, so you likely need to modify the benchmark code to be more comprehensive and such that it takes considerably more time than the accuracy of the underlying hardware timer (you need to be spending at least 100-300ns per iteration for realistic measurements, as that is roughly what the underlying high performance counter API for the OS will return).\n\nA more comprehensive benchmark should give a better measurement of the differences, but there\u0027s still the consideration of how that can impact maintainability of the code long term for something that\u0027s saving less cycles than a branch mispredict or L1 cache (non-missed) access and is extremely unlikely to be the bottleneck in a real app.\n\n-- CC. @EgorBo, @jkotas since I think this touches a bit around the realm of \"unsafe\" code. It\u0027s not memory unsafe, but it is an optimization that relies on certain invariants in the code for a very minor perf increase",
                                           "updatedAt":  "2025-05-05T17:25:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6p-_Q1",
                                           "createdAt":  "2025-05-05T17:55:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERRVwg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2025-05-05T18:26:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cassioneri",
                                                                               "createdAt":  "2025-05-08T05:47:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkotas",
                                           "body":  "We have other existing places in DateTime code that depend on similar tricks, e.g.: https://github.com/dotnet/runtime/blob/86949c2fc8866bb56d320c8f12d501f6034336d7/src/libraries/System.Private.CoreLib/src/System/DateTime.cs#L1355-L1374\n\nI do not see a problem with it as long as long we have sufficient test coverage. These tricks do not invalidate type or memory safety that the unsafe code is concerned with.",
                                           "updatedAt":  "2025-05-18T16:57:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qO2e8",
                                           "createdAt":  "2025-05-06T21:19:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cassioneri",
                                           "body":  "@tannergooding :\n\n\u003e This likely isn\u0027t something that can be easily handled by the JIT due to the required range knowledge.\n\nYou\u0027re right that the exact optimisation shown in my talk doesn\u0027t work for all `uint` values so the JIT can\u0027t use it as it is. However, as I mention therein, we can increase the range of applicability by using a similar constant with more bits. For 64-bits, that is, using the `ulong` constant ceil(2^64 / 7), the optimisation works for all `uint` values. Indeed, here is an exhaustive test:\n\nhttps://godbolt.org/z/oEMrxKfY5\n\n(It takes just a few seconds to run.) I could calculate the sharp upper bound for the range of validity but I\u0027m a bit lazy right now 😬. It certainly doesn\u0027t cover the whole range of `ulong` values.\n\n\u003e However, it\u0027s notably also only saving around 2 cycles (changing out a 3+1 cycle imul+sub for a 1+1 cycle shr+inc),\n\nI disagree that we\u0027re replacing `imul` + `sub` with `shr` +` inc`. As you can see in the same link above, the instructions to get `n % 7` are:\n```\n       mov      rdx, 0x2492492492492493\n       mov      eax, edi\n       mul      rdx:rax, rdx\n       imul     eax, edx, 7\n       sub      edi, eax\n       mov      eax, edi\n```\nwhereas for the optimised version they are:\n```\n       mov      eax, edi\n       mov      rcx, 0x2492492492492493\n       imul     rax, rcx\n       shr      rax, 61\n```\nNotice that we save one `mul` amongst other instructions. I hope this helps.",
                                           "updatedAt":  "2025-05-06T21:19:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qPBJ6",
                                           "createdAt":  "2025-05-06T21:33:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e I disagree that we\u0027re replacing imul + sub with shr + inc. As you can see in the same link above, the instructions to get n % 7 are:\n\nRegister to register moves are not fixed, they are dependent on inlining, surrounding code, and other factors. They are also zero-cost and handled by the register renamer on most CPUs from the past 20ish plus years\n\nImmediate to register moves are likewise optimized and often elided by the CPU\n\nThe instructions here with real cost are mul, Imul, sub, and shr; which comprise the difference between the two. The example just above is for 64-bit and so the codegen is slightly different from 32-bit\n\nA more comprehensive benchmark is needed, at minimum, because the numbers given in the original post aren’t accurate. They cannot be accurate because they are showing less than a cycle for the entire operation and less than a cycle of difference between them.",
                                           "updatedAt":  "2025-05-06T21:33:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qPVhn",
                                           "createdAt":  "2025-05-06T21:46:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "Noting that inaccurate measurements are not your fault here, it’s a known issue I’ve got tracked against BDN as https://github.com/dotnet/BenchmarkDotNet/issues/1802\n\nThis has to do both with how it tries to measure empty method overhead and due to general imprecision introduced by measuring very small methods, which leads to inherent noise.\n\nYou really need to have larger test cases for accurate measurement of the relative change involved",
                                           "updatedAt":  "2025-05-06T21:46:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qPxSZ",
                                           "createdAt":  "2025-05-06T22:25:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cassioneri",
                                           "body":  "@tannergooding I agree (almost 100%) with you on the `mov` instructions. My main point is that we save one `mul` (which you didn\u0027t mention) and, contrarily to your statement, there\u0027s no `inc` in the diff.\n\nI also agree that better benchmarks are needed. (Note that I didn\u0027t write them.)",
                                           "updatedAt":  "2025-05-06T22:25:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qQDfY",
                                           "createdAt":  "2025-05-06T22:39:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The inc exists in the full DayOfWeek2 sample, which is relevant. We do not optimize based solely on the improvement to a leaf method, we optimize based on the end to end real world usage as it impacts public APis that devs will consume\n\n32x32=32 mul is 3 cycles. 32x32=64 mul is 4 cycles. 64x64=64 mul is 3-4 cycles on modern CPUs but on slightly older it is upwards of 10 cycles. 64x64=128 is similar. 64-bit mul also tends to be port restricted\n\nMul is much cheaper than divide, which is why most compilers optimize to these patterns. But most do not do the kind of transform being suggested here because the range restriction is required for it to be more optimal and even then it’s only 1-2 cycles faster\n\nIf there is a benchmark showing the additional complexity is worth the 1-2 cycle difference, then it’s worth further discussion on whether or not we want to take it",
                                           "updatedAt":  "2025-05-06T22:39:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qeQE_",
                                           "createdAt":  "2025-05-07T19:51:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERRV1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cassioneri",
                                                                               "createdAt":  "2025-05-08T05:47:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jnyrup",
                                           "body":  "Thanks for all the input.\n\nHere\u0027s an updated benchmark where I\u0027m looping over `DayOfWeek` 10\u0027000 times.\n\n```\nBenchmarkDotNet v0.14.1-nightly.20250503.223, Windows 11 (10.0.26100.3775)\nUnknown processor\n.NET SDK 10.0.100-preview.3.25201.16\n  [Host]     : .NET 10.0.0 (10.0.25.17105), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\n  DefaultJob : .NET 10.0.0 (10.0.25.17105), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\n```\n\n| Method     | Mean      | Error     | StdDev    | Ratio | Code Size |\n|----------- |----------:|----------:|----------:|------:|----------:|\n| DayOfWeek  | 0.9915 ns | 0.0017 ns | 0.0016 ns |  1.00 |      87 B |\n| DayOfWeek2 | 0.6833 ns | 0.0031 ns | 0.0029 ns |  0.69 |      75 B |\n\n```\n// * Detailed results *\nWeekDayBenchmark.DayOfWeek: DefaultJob\nRuntime = .NET 10.0.0 (10.0.25.17105), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI; GC = Concurrent Workstation\nMean = 0.992 ns, StdErr = 0.000 ns (0.04%), N = 15, StdDev = 0.002 ns\nMin = 0.989 ns, Q1 = 0.990 ns, Median = 0.991 ns, Q3 = 0.992 ns, Max = 0.995 ns\nIQR = 0.002 ns, LowerFence = 0.987 ns, UpperFence = 0.996 ns\nConfidenceInterval = [0.990 ns; 0.993 ns] (CI 99.9%), Margin = 0.002 ns (0.18% of Mean)\nSkewness = 0.55, Kurtosis = 2.55, MValue = 2\n-------------------- Histogram --------------------\n[0.988 ns ; 0.996 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n\nWeekDayBenchmark.DayOfWeek2: DefaultJob\nRuntime = .NET 10.0.0 (10.0.25.17105), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI; GC = Concurrent Workstation\nMean = 0.683 ns, StdErr = 0.001 ns (0.11%), N = 15, StdDev = 0.003 ns\nMin = 0.679 ns, Q1 = 0.681 ns, Median = 0.683 ns, Q3 = 0.685 ns, Max = 0.690 ns\nIQR = 0.004 ns, LowerFence = 0.675 ns, UpperFence = 0.691 ns\nConfidenceInterval = [0.680 ns; 0.686 ns] (CI 99.9%), Margin = 0.003 ns (0.45% of Mean)\nSkewness = 0.52, Kurtosis = 2.35, MValue = 2\n-------------------- Histogram --------------------\n[0.677 ns ; 0.691 ns) | @@@@@@@@@@@@@@@\n---------------------------------------------------\n```\n\n\u003cdetails\u003e\n\u003csummary\u003easm\u003c/summary\u003e\n\n## .NET 10.0.0 (10.0.25.17105), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\n```assembly\n; WeekDayBenchmark.DayOfWeek()\n       xor       r8d,r8d\n       mov       rcx,[rcx+8]\n       mov       r10d,2710\nM00_L00:\n       mov       rdx,rcx\n       mov       rax,3FFFFFFFFFFFFFFF\n       and       rdx,rax\n       mov       r9,28B8FFC778816079\n       mov       rax,rdx\n       mul       r9\n       shr       rdx,25\n       lea       r9d,[rdx+1]\n       mov       rdx,2492492492492493\n       mov       eax,r9d\n       mul       rdx\n       imul      eax,edx,7\n       sub       r9d,eax\n       add       r8d,r9d\n       dec       r10d\n       jne       short M00_L00\n       mov       eax,r8d\n       ret\n; Total bytes of code 87\n```\n\n## .NET 10.0.0 (10.0.25.17105), X64 RyuJIT AVX-512F+CD+BW+DQ+VL+VBMI\n```assembly\n; WeekDayBenchmark.DayOfWeek2()\n       xor       r8d,r8d\n       mov       rcx,[rcx+8]\n       mov       r10d,2710\n       nop       dword ptr [rax]\nM00_L00:\n       mov       rdx,rcx\n       mov       rax,3FFFFFFFFFFFFFFF\n       and       rdx,rax\n       mov       r9,28B8FFC778816079\n       mov       rax,rdx\n       mul       r9\n       shr       rdx,25\n       inc       edx\n       imul      eax,edx,24924925\n       shr       eax,1D\n       add       r8d,eax\n       dec       r10d\n       jne       short M00_L00\n       mov       eax,r8d\n       ret\n; Total bytes of code 75\n```\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n\u003csummary\u003eBenchmark code\u003c/summary\u003e\n\n```cs\nusing BenchmarkDotNet.Attributes;\nusing BenchmarkDotNet.Running;\nusing System.Diagnostics;\nusing System;\n\nBenchmarkRunner.Run\u003cWeekDayBenchmark\u003e();\n\n[ReturnValueValidator]\n[DisassemblyDiagnoser]\npublic class WeekDayBenchmark\n{\n    public MyDateTime Value { get; set; }\n\n    [GlobalSetup]\n    public void GlobalSetup()\n    {\n        Value = new MyDateTime(DateTime.MaxValue.Ticks);\n    }\n\n    const int OperationsPerInvoke = 10_000;\n\n    [Benchmark(Baseline = true, OperationsPerInvoke = OperationsPerInvoke)]\n    public int DayOfWeek()\n    {\n        int d = default;\n        for (int i = 0; i \u003c OperationsPerInvoke; i++)\n        {\n            d += (int)Value.DayOfWeek;\n        }\n\n        return d;\n    }\n\n    [Benchmark(OperationsPerInvoke = OperationsPerInvoke)]\n    public int DayOfWeek2()\n    {\n        int d = default;\n        for (int i = 0; i \u003c OperationsPerInvoke; i++)\n        {\n            d += (int)Value.DayOfWeek2;\n        }\n\n        return d;\n    }\n}\n\npublic readonly partial struct MyDateTime\n{\n    private const ulong TicksMask = 0x3FFFFFFFFFFFFFFF;\n\n    internal readonly ulong _dateData;\n\n    public MyDateTime(long ticks)\n    {\n        _dateData = (ulong)ticks;\n    }\n\n    private ulong UTicks =\u003e _dateData \u0026 TicksMask;\n\n    public DayOfWeek DayOfWeek =\u003e (DayOfWeek)(((uint)(UTicks / TimeSpan.TicksPerDay) + 1) % 7);\n\n    public DayOfWeek DayOfWeek2 =\u003e (DayOfWeek)FastMod7((uint)(UTicks / TimeSpan.TicksPerDay) + 1);\n\n    private static uint FastMod7(uint n)\n    {\n        Debug.Assert(n \u003c 178_956_973);\n        return 613_566_757 * n \u003e\u003e 29;\n    }\n}\n```\n\n\u003c/details\u003e",
                                           "updatedAt":  "2025-05-07T19:51:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qf1Oy",
                                           "createdAt":  "2025-05-07T21:49:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERzNtw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sfiruch",
                                                                               "createdAt":  "2025-05-12T19:03:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "cassioneri",
                                           "body":  "@jnyrup Wonderful results. IMHO, 31% gain in performance isn\u0027t bad at all. Also, thank you for your interest in my work.\n\n@tannergooding Yes, you\u0027re right that the `inc` doesn\u0027t exist in current code and is a novelty of the proposed change. \nThis instruction comes from the addition to 1 in `DayOfWeek2`. However, this addition is also present in `DayOfWeek`:\n```\npublic DayOfWeek DayOfWeek2 =\u003e (DayOfWeek)FastMod7((uint)(UTicks / TimeSpan.TicksPerDay) + 1);\n//                                                                               v       ^                  \npublic DayOfWeek DayOfWeek =\u003e (DayOfWeek)(((uint)(UTicks / TimeSpan.TicksPerDay) + 1) % 7);\n```\nAlthough the `inc` is not in the assembly of `DayOfWeek`, the addition did not disappear from there. The line `lea r9d,[rdx+1]` serves to the exact same purpose. Therefore, instead of saying this:\n\n\u003e changing out a 3+1 cycle imul+sub for a 1+1 cycle shr+inc\n\nIt would be more correct to say\n\n\u003e changing out a (some number) cycle imul+sub+lea for a (some number) cycle shr+inc\n\n\u003e But most do not do the kind of transform being suggested here because the range restriction is required for it to be more optimal\n\nI previously showed (here again: https://godbolt.org/z/oEMrxKfY5) a function `fast_mod7(uint n)` that returns `n % 7` for ALL possible values of `n`. Therefore, there\u0027s no range restriction and it\u0027s not true that most compilers don\u0027t use this algorithm because it has a restriction. (It has not!)\n\nI believe that a more plausible explanation why this algorithm is not implemented by compilers is that compiler writers don\u0027t know about it. Similarly, I believe, most compiler writers don\u0027t know about a certain algorithm for divisibility checks. The exceptions are GCC and LLVM which, circa 2019, moved away from the algorithm that others still use. They use a beautiful algorithm based on the truncated 2-adic expansion of `1 / C` (where `C` is a constant divisor). Yes, more magic numbers! Here is an example: https://godbolt.org/z/143fh3Kf7. Compare newer versions of GCC and Clang with older ones and msvc. (C# JIT compiler is similar to msvc in that perspective.)\n\nAlthough I think that @jnyrup did a great job here, ideally, compilers writers would use the algorithm in `fast_mod7(uint n)` to get `n % 7` .  This would benefit anyone who writes `n % 7` (when `n` is `uint`) and `DayOfWeek` could be left just as it is. This algorithm, by the way, can be generalised for any divisor that is a Mersenne number (3, 7, 15, ...).",
                                           "updatedAt":  "2025-05-07T21:55:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qf35Q",
                                           "createdAt":  "2025-05-07T21:55:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "@jnyrup thanks!\n\nThis matches (roughly) what I see locally on my `x64 Desktop: Ryzen 7950X` (which averaged 5.2 GHz for the duration of the benchmark):\n| Method     | Mean      | Error     | StdDev    | Ratio | Code Size |\n|----------- |----------:|----------:|----------:|------:|----------:|\n| DayOfWeek  | 0.9138 ns | 0.0166 ns | 0.0204 ns |  1.00 |      87 B |\n| DayOfWeek2 | 0.6291 ns | 0.0055 ns | 0.0052 ns |  0.69 |      75 B |\n\nThese numbers are for a `x64 Server: Xeon 8370C` (averaged 3.4 GHz):\n| Method     | Mean     | Error     | StdDev    | Ratio | Code Size |\n|----------- |---------:|----------:|----------:|------:|----------:|\n| DayOfWeek  | 1.219 ns | 0.0082 ns | 0.0077 ns |  1.00 |      87 B |\n| DayOfWeek2 | 1.038 ns | 0.0021 ns | 0.0019 ns |  0.85 |      75 B |\n\nThese numbers are for a `x64 Laptop: Core i9-11900H` (averaged 4.2 GHz):\n| Method     | Mean     | Error     | StdDev    | Ratio | Code Size |\n|----------- |---------:|----------:|----------:|------:|----------:|\n| DayOfWeek  | 0.9363 ns | 0.0186 ns | 0.0273 ns |  1.00 |      87 B |\n| DayOfWeek2 | 0.7741 ns | 0.0151 ns | 0.0141 ns |  0.83 |      75 B |\n\nThese numbers are for a `Arm64 DevBox: Snapdragon Compute` (averaged 2.9 GHz):\n| Method     | Mean     | Error     | StdDev    | Ratio |\n|----------- |---------:|----------:|----------:|------:|\n| DayOfWeek  | 2.381 ns | 0.0048 ns | 0.0045 ns |  1.00 |\n| DayOfWeek2 | 1.403 ns | 0.0016 ns | 0.0013 ns |  0.59 |\n\n----\n\nIn all cases, this represents about `0.6-2.8 cycles` (with the Arm64 dev box being the biggest and the Intel x64 Server being the least) of difference on average \n\nMy personal opinion is that it is not worth chasing after these types of `1-3 cycle` improvements when the cost is making the code less readable/maintainble, particularly not in methods that are unlikely to be the hot spot for an application. This is 15-40%, but not all percents are created equal. Saving 40% on something taking 1-2 nanoseconds means nothing in contrast to a a branch mispredict taking 4-10 nanoseconds, a cache miss taking 10 nanoseconds, a network request taking 1-200 milliseconds, etc. In this case, you\u0027d need approx. 666.7 million invocations to save 1 second of compute, 10.7 million invocations to save 16ms (1/60th of a second), and 13 invocations to save the cost of 1 branch mispredict on a modern machine. \n\nThe likelyhood that `DayOfWeek` is being used to this degree, is a bottleneck to your application, and is the thing that a user would need to optimize to hit any performance goals is likely very slim. This type of savings is almost certainly going to be lost in the general \"noise\" or \"variance\" that your system has, even just due to the CPU speed fluctuating due to power management and maintaining thermal temperatures.\n\nHowever, I\u0027d defer to @tarekgh on if it\u0027s something they\u0027d like to take for DateTime and to drive forward.",
                                           "updatedAt":  "2025-05-07T21:55:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qf6Ir",
                                           "createdAt":  "2025-05-07T22:00:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOERP6fA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "quixoticaxis",
                                                                               "createdAt":  "2025-05-08T00:33:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "\u003e This is 15-40%, but not all percents are created equal. Saving 40% on something taking 1-2 nanoseconds means nothing in contrast to a ...\n\nThat is to say. While this microbenchmark may be 30%, in a real world application this is likely to trend towards 0%, as it is not likely to be the hot spot and show up on any real world profile.\n\nIf there are real world workloads that this would impact, then having them presented would be beneficial and can help ensure the right decision is made.",
                                           "updatedAt":  "2025-05-07T22:00:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qge2g",
                                           "createdAt":  "2025-05-07T23:01:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEfUeYg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2025-05-07T23:18:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "quixoticaxis",
                                                                               "createdAt":  "2025-05-08T00:33:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "h3xds1nz",
                                                                               "createdAt":  "2025-05-08T07:48:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cassioneri",
                                                                               "createdAt":  "2025-05-08T07:48:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sfiruch",
                                                                               "createdAt":  "2025-05-12T19:05:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ArminShoeibi",
                                                                               "createdAt":  "2025-08-22T21:12:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Thanks all for the feedback and detailed analysis. \n\nWhile I agree that the performance gained in these scenarios isn\u0027t significant, I believe introducing a helper method like FastMod7, along with a detailed comment explaining its purpose, would improve code readability. I don\u0027t anticipate this part of the code will need further changes (similar to the DateTime other optimizations), so I’d be fine with someone submitting a PR if they\u0027re interested.",
                                           "updatedAt":  "2025-05-07T23:01:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sMKhp",
                                           "createdAt":  "2025-05-18T09:02:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "skyoxZ",
                                           "body":  "The hex of the magic number 613_566_757 in this issue is 0x24924925. And I found this magic hex there by accident:\nhttps://github.com/dotnet/runtime/blob/beb14c143947346cf9c09ca056a0cee7fcc72108/src/coreclr/jit/utils.cpp\n\nI don\u0027t know what it means.",
                                           "updatedAt":  "2025-05-18T09:02:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sMWuR",
                                           "createdAt":  "2025-05-18T10:53:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cassioneri",
                                           "body":  "@skyoxZ I explained the algorithm and, in particular, the magic number in my talks. Links at the very top of the original post.",
                                           "updatedAt":  "2025-05-18T10:53:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sM24U",
                                           "createdAt":  "2025-05-18T15:24:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "quixoticaxis",
                                           "body":  "```\n//------------------------------------------------------------------------\n// GetUnsignedMagic: Generates a magic number and shift amount for the magic\n// number unsigned division optimization.\n//\n// Arguments:\n//    d     - The divisor\n//    add   - Pointer to a flag indicating the kind of code to generate\n//    shift - Pointer to the shift value to be returned\n//\n// Returns:\n//    The magic number.\n//\n// Notes:\n//    This code is adapted from _The_PowerPC_Compiler_Writer\u0027s_Guide_, pages 57-58.\n//    The paper is based on \"Division by invariant integers using multiplication\"\n//    by Torbjorn Granlund and Peter L. Montgomery in PLDI 94\n```\nIt\u0027s written in `utils.cpp`.\n\nBtw, is creation of a static `FastModHelper` viable?\nSomething like\n```csharp\nstatic class FastModHelper\n{\n    public static int FastMod3(int n);\n    public static long FastMod3(long n);\n    /* … */\n    public static int FastMod12(int n);\n    public static long FastMod12(long n);\n}\n```",
                                           "updatedAt":  "2025-05-18T15:24:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sQsZ9",
                                           "createdAt":  "2025-05-19T08:11:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vladd",
                                           "body":  "@quixoticaxis shouldn’t this optimization be automatically applied by the jitter? ",
                                           "updatedAt":  "2025-05-19T08:11:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sT9P9",
                                           "createdAt":  "2025-05-19T12:55:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "quixoticaxis",
                                           "body":  "\u003e @quixoticaxis shouldn’t this optimization be automatically applied by the jitter? \n\nIdk, but I doubt it: jit would need to prove range of the argument.\nAlso see [this comment](https://github.com/dotnet/runtime/issues/115279#issuecomment-2851732015).",
                                           "updatedAt":  "2025-05-19T12:57:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sUs3Z",
                                           "createdAt":  "2025-05-19T13:49:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cassioneri",
                                           "body":  "@quixoticaxis \n\n\u003e Idk, but I doubt it: jit would need to prove range of the argument.\n\nAs I said before, this is not true. The JIT doesn\u0027t need to check the range, it suffices to check the input type: if it\u0027s `uint` (not `ulong`), then it can use this algorithm: \n\nhttps://godbolt.org/z/a69aPE4xz\n\nThis link compares the result of the proposed algorithm against built-in n % 7 for **ALL** `uint` values. They all give the same result. Please open the link and tell me if I\u0027m wrong.\n\n",
                                           "updatedAt":  "2025-05-19T13:49:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sU93N",
                                           "createdAt":  "2025-05-19T14:08:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "quixoticaxis",
                                           "body":  "\u003e [@quixoticaxis](https://github.com/quixoticaxis)\n\u003e \n\u003e \u003e Idk, but I doubt it: jit would need to prove range of the argument.\n\u003e \n\u003e As I said before, this is not true.\n\nGiven that the question was addressed at me personally for some reason, I assumed the question was about the _signed_ helper above.",
                                           "updatedAt":  "2025-05-19T14:09:03Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "Optimization of modulo 7 in `DateTime.DayOfWeek`",
        "labels":  [
                       "tenet-performance",
                       "help wanted",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117061",
        "createdAt":  "2025-06-26T17:43:20Z",
        "number":  117061,
        "author":  "TheBrambleShark",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-27T15:34:07Z",
        "body":  "### Background and motivation\n\nThis proposal covers the following types:\n\n- DateTime\n- DateTimeOffset\n- DateOnly\n- TimeOnly\n- TimeSpan\n\nMany of these types today implement features exposed by the System.Numerics library, but this functionality cannot be identified by looking at the type\u0027s interfaces.\n\nAs an example of where I ran into this in the wild, I have a configuration library that extends Microsoft.Extensions.Configuration. This library implements some standard features like model verification. The following method was originally constrained to `INumber\u003cTNumber\u003e`, but I wanted to make this support a broader range of types. The type parameter name and documentation has not yet been updated to match.\n\n```cs\n/// \u003csummary\u003e\n/// Validates the provided \u003cparamref name=\"entity\"/\u003e to ensure it is not null and is between\n/// \u003cparamref name=\"minValue\"/\u003e and \u003cparamref name=\"maxValue\"/\u003e.\n/// \u003c/summary\u003e\n/// \u003ctypeparam name=\"TNumber\"\u003eThe underlying numeric type.\u003c/typeparam\u003e\n/// \u003cparam name=\"entity\"\u003eThe entity to compare.\u003c/param\u003e\n/// \u003cparam name=\"minValue\"\u003eThe inclusive minimum value.\u003c/param\u003e\n/// \u003cparam name=\"maxValue\"\u003eThe exclusive maximum value.\u003c/param\u003e\n/// \u003cparam name=\"name\"\u003eThe name of the parameter to validate.\u003c/param\u003e\nprotected void ValidateWithinRange\u003cTNumber\u003e\n(\n    TNumber? entity,\n    TNumber? minValue = null,\n    TNumber? maxValue = null,\n    [CallerArgumentExpression(nameof(entity))] string? name = null)\n    where TNumber : struct, IComparisonOperators\u003cTNumber, TNumber, bool\u003e, IMinMaxValue\u003cTNumber\u003e\n{\n    if (ValidateNotNull(entity, name))\n    {\n        minValue ??= TNumber.MinValue;\n        maxValue ??= TNumber.MaxValue;\n\n        if (entity \u003e= minValue \u0026\u0026 entity.Value \u003c maxValue)\n        {\n            return;\n        }\n\n        // TODO: Avoid null suppressions.\n        Errors.Add(GetValueOutOfRangeError(name!, entity.ToString()!, minValue.ToString()!, maxValue.ToString()!));\n    }\n}\n```\n\nThis method should be usable like this:\n```cs\nValidateWithinRange(config.Age, 18, 120); // Ensures the Age value is between 18 and 120 (exclusive)\n```\n\nI would expect to also be able to do the same thing for DateTime. This type has the comparison operators used in the validation method as well as `MinValue` and `MaxValue` fields:\n\n```cs\nValidateWithinRange(config.Birthday, DateTime.Today.AddYears(-18), DateTime.Today.AddYears(120));\n// Error: DateTime does not implement IMinMaxValue\u003cDateTime\u003e\n// Error: DateTime does not implement IComparisonOperators\u003cDateTime, DateTime, bool\u003e\n```\n\nTo work around this, I need to either create overloads which specifically cover the Date and Time types, or I need to change my approach to use `IComparable\u003cT\u003e` and either not allow nullable min/max values or I need to reflect the fields.\n\n### API Proposal\n\nI would like to propose that we implement the following interfaces on each of these types, as appropriate (for instance, some support addition operators with the same types and some are different types, like DateTime + TimeSpan):\n\n- IAdditionOperators\u003cTSelf, TOther, TResult\u003e\n- IComparisonOperators\u003cTSelf, TSelf, bool\u003e\n- IEqualityOperators\u003cTSelf, TSelf, bool\u003e\n- IMinMaxValue\u003cTSelf\u003e[^1]\n- ISubtractionOperators\u003cTSelf, TOther, TResult\u003e\n\nBecause these types already satisfy the requirements imposed by these interfaces, there should not be any sort of code changes to the types other than adding the appropriate interfaces.\n\n[^1]: The older types, DateTime, DateTimeOffset, and TimeSpan use fields for `MinValue` and `MaxValue`. This conflicts with `IMinMaxValue\u003cTSelf\u003e` as this type specifies readonly properties of the same name.\n\n\n\n### API Usage\n\n```csharp\npublic static bool IsGreaterThan\u003cTValue\u003e(TValue actualValue, TValue minValue)\n    where TValue : IComparisonOperators\u003cTValue, TValue, bool\u003e\n{\n    return actualValue \u003e minValue;\n}\n\n// elsewhere\n\nif (IsGreaterThan(DateTime.Today.AddYears(-18), user.Birthday)\n{\n    // User is older than 18!\n}\n```\n\n\n### Alternative Designs\n\nCurrently the only workaround for comparison tests like these are to:\n\n- Reflect the operators (in the case of the API Usage example, we would reflect the `op_GreaterThan` method and manually invoke it).\n- Special case overloads for each of the Date/Time types - one of the problems these interfaces were designed to eliminate in the first place.\n\n### Risks\n\nFor all types, this should be a binary breaking change as the shape of the structs are changing. I expect existing code should recompile without issue.\n\n~~The only issue I forsee is related to the `MinValue` and `MaxValue` fields on the older types. Converting these to properties would need a recompile, but in most cases, the code itself should remain unchanged:~~\n\n```cs\nDateTime maxValue = DateTime.MaxValue; // Doesn\u0027t matter if MaxValue is a field or Property.\n```\n\n~~There may be other cases where the difference between a field and property matter more and this would require code changes to facilitate the change. I only expect this to come up in reflection scenarios, but there may be other situations I\u0027m not considering.~~\n\nEdit 2025-06-27: As pointed out by @KalleOlaviNiemitalo, the property/field name collision issue can be resolved with explicit interface implementations. I would like to propose this be the route we take to resolve this conflict.\n\n```cs\npublic readonly struct TimeSpan : IComparable, IComparable\u003cTimeSpan\u003e, IEquatable\u003cTimeSpan\u003e, IParsable\u003cTimeSpan\u003e, ISpanFormattable, ISpanParsable\u003cTimeSpan\u003e, IUtf8SpanFormattable, IMinMaxValue\u003cTimeSpan\u003e\n{\n    public static readonly TimeSpan MaxValue = new TimeSpan(MaxTicks);\n    public static readonly TimeSpan MinValue = new TimeSpan(MinTicks);\n\n    static TimeSpan IMinMaxValue\u003cTimeSpan\u003e.MaxValue =\u003e MaxValue;\n    static TimeSpan IMinMaxValue\u003cTimeSpan\u003e.MinValue =\u003e MinValue;\n}\n```\n}",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOs51OfQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6zXkXr",
                                           "createdAt":  "2025-06-26T17:45:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheBrambleShark",
                                           "body":  "If explicit code samples of the changes are needed for the API proposal, let me know and I will add them. Given the similarity between the changes and that, for the most part, the only changes are adding the interfaces, I elected to describe that rather than represent it visually.",
                                           "updatedAt":  "2025-06-26T17:45:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6zXkkL",
                                           "createdAt":  "2025-06-26T17:45:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheBrambleShark",
                                           "body":  "CC @tannergooding ",
                                           "updatedAt":  "2025-06-26T17:45:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6zYDVj",
                                           "createdAt":  "2025-06-26T18:21:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-26T18:21:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6zkWL_",
                                           "createdAt":  "2025-06-27T11:16:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEYO9CQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "TheBrambleShark",
                                                                               "createdAt":  "2025-06-27T15:13:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "The conflict between fields and properties can be solved with explicit interface implementation. [SharpLab](https://sharplab.io/#v2:CYLg1APgAgzABFATHAwnECCMA6AcgVwFsBTAJwEsBjAZ2wEkBZcgOwYEMAPANTYBt9iAHhQA+OAG8AsACg4chPCiYAbHFLE2wAPbNeAT1RwmzHv2JwAvHGbEA7qgAUASgDcM+Qqyr1mnfsPs3HwCltZ2jq7u8lFySqpoSnhEZFS0jCyBpgLCItjGWeYWYjb2KM5usvJxhokEJBQ09MaZwUKieZwFlsXhZZHSAL5AA===):\n\n```csharp\npublic class C : System.Numerics.IMinMaxValue\u003cC\u003e {\n    public static readonly C MinValue = new C();\n    public static readonly C MaxValue = new C();\n    \n    static C System.Numerics.IMinMaxValue\u003cC\u003e.MinValue =\u003e new C();\n    static C System.Numerics.IMinMaxValue\u003cC\u003e.MaxValue =\u003e new C();\n}\n```\n",
                                           "updatedAt":  "2025-06-27T11:16:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6znU59",
                                           "createdAt":  "2025-06-27T15:16:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheBrambleShark",
                                           "body":  "\u003e The conflict between fields and properties can be solved with explicit interface implementation. [SharpLab](https://sharplab.io/#v2:CYLg1APgAgzABFATHAwnECCMA6AcgVwFsBTAJwEsBjAZ2wEkBZcgOwYEMAPANTYBt9iAHhQA+OAG8AsACg4chPCiYAbHFLE2wAPbNeAT1RwmzHv2JwAvHGbEA7qgAUASgDcM+Qqyr1mnfsPs3HwCltZ2jq7u8lFySqpoSnhEZFS0jCyBpgLCItjGWeYWYjb2KM5usvJxhokEJBQ09MaZwUKieZwFlsXhZZHSAL5AA===):\n\u003e \n\u003e public class C : System.Numerics.IMinMaxValue\u003cC\u003e {\n\u003e     public static readonly C MinValue = new C();\n\u003e     public static readonly C MaxValue = new C();\n\u003e     \n\u003e     static C System.Numerics.IMinMaxValue\u003cC\u003e.MinValue =\u003e new C();\n\u003e     static C System.Numerics.IMinMaxValue\u003cC\u003e.MaxValue =\u003e new C();\n\u003e }\n\nThis is an excellent solution. Not sure why I didn\u0027t think of that when I wrote my post initially. Explicit interface implementations are not something I use super commonly, which probably contributed to the oversight.",
                                           "updatedAt":  "2025-06-27T15:16:53Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[API Proposal]: Add System.Numerics Interfaces to Date/Time Types.",
        "labels":  [
                       "api-suggestion",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117422",
        "createdAt":  "2025-07-08T15:37:22Z",
        "number":  117422,
        "author":  "vcsjones",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T18:20:52Z",
        "body":  "`System.Tests.TimeZoneInfoTests.NoBackwardTimeZones` fails on macOS 26 preview 3\n\n```plain\nAssert.Equal() Failure: Values differ\nExpected: 419\nActual:   418\n  Stack Trace:\n  /Users/vcsjones/Projects/runtime/src/libraries/System.Runtime/tests/System.Runtime.Tests/System/TimeZoneInfoTests.cs(2749,0): at System.Tests.TimeZoneInfoTests.NoBackwardTimeZones()\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtcK2Sw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc61wrZL",
                                           "createdAt":  "2025-07-08T15:37:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-08T15:37:48Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "NoBackwardTimeZones fails on macOS 26 Preview 3",
        "labels":  [
                       "area-System.DateTime",
                       "os-macos-tahoe (macOS26)"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117731",
        "createdAt":  "2025-07-16T18:59:30Z",
        "number":  117731,
        "author":  "tarekgh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:04:09Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1096605\nBuild error leg or test failing: System.Tests.TimeZoneInfoTests.NoBackwardTimeZones\nPull request: https://github.com/dotnet/runtime/pull/117630\n\n```\n07-16 11:57:57.303 28828 28920 I DOTNET  : 1) \t[FAIL] System.Tests.TimeZoneInfoTests.NoBackwardTimeZones   Test name: System.Tests.TimeZoneInfoTests.NoBackwardTimeZones\n07-16 11:57:57.303 28828 28920 I DOTNET  :    Assembly:  [System.Runtime.Tests, Version=10.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51]\n07-16 11:57:57.303 28828 28920 I DOTNET  :    Exception messages: Assert.Equal() Failure: Values differ\n07-16 11:57:57.303 28828 28920 I DOTNET  : Expected: 596\n07-16 11:57:57.303 28828 28920 I DOTNET  : Actual:   450   Exception stack traces:    at System.Tests.TimeZoneInfoTests.NoBackwardTimeZones()\n07-16 11:57:57.303 28828 28920 I DOTNET  :    at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\n07-16 11:57:57.303 28828 28920 I DOTNET  :    at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\n```\n\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"Exception stack traces:    at System.Tests.TimeZoneInfoTests.NoBackwardTimeZones()\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\n\u003c!-- Known issue validation start --\u003e\n ### Known issue validation\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1096605\n**Error message validated:** `[Exception stack traces:    at System.Tests.TimeZoneInfoTests.NoBackwardTimeZones()`]\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\n**Validation performed at:** 7/16/2025 7:00:02 PM UTC\n\u003c!-- Known issue validation end --\u003e\n\u003c!--Known issue error report start --\u003e\n\n### Report\n\n|Build|Definition|Test|Pull Request|\n|---|---|---|---|\n|[1096605](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1096605)|dotnet/runtime|[System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1096605\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=29973950\u0026resultId=109494)|dotnet/runtime#117630|\n#### Summary\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\n|---|---|---|\n|1|1|1|\n\u003c!--Known issue error report end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOt8BqcQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc63k-SF",
                                           "createdAt":  "2025-07-16T19:00:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-16T19:00:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63k-aJ",
                                           "createdAt":  "2025-07-16T19:00:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-16T19:00:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63lEAX",
                                           "createdAt":  "2025-07-16T19:08:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "@matouskozak if this flakes, it might be something weird with a specific device or devices.",
                                           "updatedAt":  "2025-07-16T19:08:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63lXne",
                                           "createdAt":  "2025-07-16T19:36:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdRVpw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "davidnguyen-tech",
                                                                               "createdAt":  "2025-08-06T07:37:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "This looks that OS\u0027s are getting new TZ data. Look at https://github.com/dotnet/runtime/issues/117422 which is reported on macOS 26 Preview 3.",
                                           "updatedAt":  "2025-07-16T19:36:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63wGpx",
                                           "createdAt":  "2025-07-17T06:56:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "\u003e [@matouskozak](https://github.com/matouskozak) if this flakes, it might be something weird with a specific device or devices.\n\nIndeed, I looked into the history, and it is only failing on `DNCENGWIN-140` device since 2025-07-10 https://dev.azure.com/dnceng-public/public/_build/results?buildId=1091157\u0026view=results (only on PRs).",
                                           "updatedAt":  "2025-07-17T06:56:43Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "TimeZoneInfoTests.NoBackwardTimeZones tests are failing on Android",
        "labels":  [
                       "disabled-test",
                       "os-android",
                       "Known Build Error",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117903",
        "createdAt":  "2025-07-21T23:12:41Z",
        "number":  117903,
        "author":  "tarekgh",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:04:13Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1101363\nBuild error leg or test failing: System.Tests.TimeZoneInfoTests.Platform_TimeZoneNames\nPull request: https://github.com/dotnet/runtime/pull/117873\n\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=1101363\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=30146292\u0026resultId=108183\u0026paneView=dotnet-dnceng.dnceng-build-release-tasks.helix-test-information-tab\n\n```Xml\n      \u003ctest name=\"System.Tests.TimeZoneInfoTests.Platform_TimeZoneNames(tzi: (UTC+10:00) Australian Eastern Time (Sydney), displayName: \\\u0026quot;(UTC+10:00) Eastern Australia Time (Sydney)\\\u0026quot;, alternativeDisplayName: null, standardName: \\\u0026quot;Australian Eastern Standard Time\\\u0026quot;, daylightName: \\\u0026quot;Australian Eastern Daylight Time\\\u0026quot;, alternativeDaylightName: null)\" type=\"System.Tests.TimeZoneInfoTests\" method=\"Platform_TimeZoneNames\" time=\"0.0006074\" result=\"Fail\"\u003e\n        \u003cfailure exception-type=\"Xunit.Sdk.TrueException\"\u003e\n          \u003cmessage\u003e\u003c![CDATA[Display Name: Neither \u0027(UTC+10:00) Eastern Australia Time (Sydney)\u0027 nor \u0027\u0027 equal to \u0027(UTC+10:00) Australian Eastern Time (Sydney)\u0027]]\u003e\u003c/message\u003e\n          \u003cstack-trace\u003e\u003c![CDATA[   at System.Tests.TimeZoneInfoTests.Platform_TimeZoneNames(TimeZoneInfo tzi, String displayName, String alternativeDisplayName, String standardName, String daylightName, String alternativeDaylightName) in /_/src/libraries/System.Runtime/tests/System.Runtime.Tests/System/TimeZoneInfoTests.cs:line 151\n   at System.Object.InvokeStub_TimeZoneInfoTests.Platform_TimeZoneNames(Object , Span`1 )\n   at System.Reflection.MethodBaseInvoker.InvokeWithManyArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]\u003e\u003c/stack-trace\u003e\n        \u003c/failure\u003e\n      \u003c/test\u003e\n```\n\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"Display Name: Neither \u0027(UTC+10:00) Eastern Australia Time (Sydney)\u0027 nor \u0027\u0027 equal to \u0027(UTC+10:00) Australian Eastern Time (Sydney)\u0027\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\n\u003c!-- Known issue validation start --\u003e\n ### Known issue validation\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1101363\n**Error message validated:** `[Display Name: Neither \u0027(UTC+10:00) Eastern Australia Time (Sydney)\u0027 nor \u0027\u0027 equal to \u0027(UTC+10:00) Australian Eastern Time (Sydney)\u0027`]\n**Result validation:** :x: Known issue did not match with the provided build.\n**Validation performed at:** 7/21/2025 11:13:19 PM UTC\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1146546](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146546)|dotnet/runtime|[System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1146546\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31639316\u0026resultId=181986)||\r\n|[1145614](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145614)|dotnet/runtime|[System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1145614\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31606600\u0026resultId=182750)||\r\n|[1131360](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131360)|dotnet/runtime|[System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1131360\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31125750\u0026resultId=180519)||\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|3|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw9hxRQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc64w8jR",
                                           "createdAt":  "2025-07-21T23:17:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "CC @matouskozak ",
                                           "updatedAt":  "2025-07-21T23:17:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc642xSb",
                                           "createdAt":  "2025-07-22T07:05:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "I see that it is happening on release/9.0-staging as well and I\u0027m not aware of any globalization changes backported to .NET 9 from our side. @kotlarmilos are you aware of any Android OS updates going on? ",
                                           "updatedAt":  "2025-07-22T07:05:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64352n",
                                           "createdAt":  "2025-07-22T08:35:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kotlarmilos",
                                           "body":  "No, I am not aware of any Android OS updates.",
                                           "updatedAt":  "2025-07-22T08:35:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6474Ap",
                                           "createdAt":  "2025-07-22T13:24:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbmW-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2025-07-22T15:51:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2025-07-23T09:39:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "it\u0027s possible that something updated ICU/TZ data on the devices, e.g. through Google Play",
                                           "updatedAt":  "2025-07-22T13:24:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64_Grt",
                                           "createdAt":  "2025-07-22T15:52:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Usually we get the TZ display names from ICU, so @akoeplinger highly likely be correct. ",
                                           "updatedAt":  "2025-07-22T15:52:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68hI5E",
                                           "createdAt":  "2025-08-07T07:10:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "matouskozak",
                                           "body":  "The test got modified in  https://github.com/dotnet/runtime/pull/118329",
                                           "updatedAt":  "2025-08-07T07:10:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-RpMQ",
                                           "createdAt":  "2025-08-15T17:47:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEei_zQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2025-08-17T13:35:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jozkee",
                                           "body":  "I just hit this in 8.0: https://github.com/dotnet/runtime/pull/118763#issuecomment-3192294884",
                                           "updatedAt":  "2025-08-15T17:47:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6-RxGW",
                                           "createdAt":  "2025-08-15T18:03:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEei_zg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matouskozak",
                                                                               "createdAt":  "2025-08-17T13:35:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "cc @matouskozak ",
                                           "updatedAt":  "2025-08-15T18:03:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Du_ST",
                                           "createdAt":  "2025-09-12T06:22:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Another occurrence in https://github.com/dotnet/runtime/pull/119523",
                                           "updatedAt":  "2025-09-12T06:22:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7D2HFF",
                                           "createdAt":  "2025-09-12T15:32:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@matouskozak could you please port the fix https://github.com/dotnet/runtime/pull/118329 to the servicing branches?",
                                           "updatedAt":  "2025-09-12T15:32:05Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "[release/8.0] TimeZoneInfoTests.Platform_TimeZoneNames failing on Android",
        "labels":  [
                       "os-android",
                       "Known Build Error",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118375",
        "createdAt":  "2025-08-05T04:44:52Z",
        "number":  118375,
        "author":  "carlreinke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-06T17:50:20Z",
        "body":  "### Background and motivation\n\nCurrently there is a [complicated dance](https://learn.microsoft.com/en-us/dotnet/standard/datetime/resolve-ambiguous-times) required to resolve ambiguous `DateTime` conversions.\n\n### API Proposal\n\n```csharp\nnamespace System;\n\npublic partial class TimeZoneInfo\n{\n    /// \u003csummary\u003e\n    /// Converts the time in a specified time zone to Coordinated Universal Time (UTC).\n    /// \u003c/summary\u003e\n    /// \u003cparam name=\"dateTime\"\u003eThe date and time to convert.\u003c/param\u003e\n    /// \u003cparam name=\"sourceTimeZone\"\u003eThe time zone of \u003cparamref name=\"dateTime\"/\u003e.\u003c/param\u003e\n    /// \u003cparam name=\"isDaylightSavingTime\"\u003eIf the conversion of \u003cparamref name=\"dateTime\"/\u003e to\n    ///     UTC is ambiguous due to daylight saving time, perform the conversion assuming that\n    ///     daylight saving time is either in effect if the value is \u003csee langword=\"true\"/\u003e or\n    ///     not in effect if the value is \u003csee langword=\"false\"/\u003e.  If the conversion of\n    ///     \u003cparamref name=\"dateTime\"/\u003e to UTC is not ambiguous then the value must match\n    ///     \u003csee cref=\"TimeZoneInfo.IsDaylightSavingTime(DateTime)\"/\u003e.\u003c/param\u003e\n    /// \u003creturns\u003eThe Coordinated Universal Time (UTC) that corresponds to\n    ///     \u003cparamref name=\"dateTime\"/\u003e.\u003c/returns\u003e\n    /// \u003cexception cref=\"ArgumentNullException\"\u003e\u003cparamref name=\"sourceTimeZone\"/\u003e is\n    ///     \u003csee langword=\"null\"/\u003e.\u003c/exception\u003e\n    /// \u003cexception cref=\"ArgumentException\"\u003e\u003cparamref name=\"dateTime\"/\u003e is invalid in\n    ///     \u003cparamref name=\"sourceTimeZone\"/\u003e.\u003c/exception\u003e\n    /// \u003cexception cref=\"ArgumentException\"\u003eThe kind of \u003cparamref name=\"dateTime\"/\u003e is\n    ///     \u003csee cref=\"DateTimeKind.Utc\"/\u003e and \u003cparamref name=\"sourceTimeZone\"/\u003e is not\n    ///     \u003csee cref=\"TimeZoneInfo.Utc\"/\u003e.\u003c/exception\u003e\n    /// \u003cexception cref=\"ArgumentException\"\u003eThe kind of \u003cparamref name=\"dateTime\"/\u003e is\n    ///     \u003csee cref=\"DateTimeKind.Local\"/\u003e and \u003cparamref name=\"sourceTimeZone\"/\u003e is not\n    ///     \u003csee cref=\"TimeZoneInfo.Local\"/\u003e.\u003c/exception\u003e\n    /// \u003cexception cref=\"ArgumentException\"\u003eThe conversion of \u003cparamref name=\"dateTime\"/\u003e is not\n    ///     ambiguous due to daylight saving time and \u003cparamref name=\"isDaylightSavingTime\"/\u003e\n    ///     does not match \u003csee cref=\"TimeZoneInfo.IsDaylightSavingTime(DateTime)\"/\u003e.\n    ///     \u003c/exception\u003e\n    public static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo sourceTimeZone, bool isDaylightSavingTime);\n\n    // Existing:\n    // public static DateTime ConvertTimeToUtc(DateTime dateTime);\n    // public static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo sourceTimeZone);\n}\n```\n\n\n### API Usage\n\n```csharp\nvar tz = TimeZoneInfo.FindSystemTimeZoneById(\"Mountain Standard Time\");\nvar dt1 = TimeZoneInfo.ConvertTimeToUtc(new DateTime(2025, 11, 2, 1, 0, 0, DateTimeKind.Unspecified), tz, true);\nvar dt2 = TimeZoneInfo.ConvertTimeToUtc(new DateTime(2025, 11, 2, 1, 0, 0, DateTimeKind.Unspecified), tz, false);\nConsole.WriteLine(dt1.ToString(\"o\"));  // Writes \"2025-11-02T07:00:00.0000000Z\".\nConsole.WriteLine(dt2.ToString(\"o\"));  // Writes \"2025-11-02T08:00:00.0000000Z\".\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvGfY8A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc678yiT",
                                           "createdAt":  "2025-08-05T04:45:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-05T04:45:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68MTqT",
                                           "createdAt":  "2025-08-06T04:17:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "Note that by default `ConverTimeToUtc(...)` (and similar methods) assumes standard time should be in effect for ambiguous times (ignoring invalid times, since you \"shouldn\u0027t\" have those).\n\nAs specified, the current design is impossible to use correctly, due to the requirement to match the rules in effect.  What you\u0027re really looking for is something equivalent to NodaTime\u0027s `ZoneLocalMappingResolver`s, as used in their [`DateTimeLocal.InZone(...)`](https://nodatime.org/3.2.x/api/NodaTime.LocalDateTime.html#NodaTime_LocalDateTime_InZone_NodaTime_DateTimeZone_NodaTime_TimeZones_ZoneLocalMappingResolver_) (whether implemented as a delegate or an enum or whatever), to control the behavior in those rare cases.",
                                           "updatedAt":  "2025-08-06T04:17:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68MVew",
                                           "createdAt":  "2025-08-06T04:22:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlreinke",
                                           "body":  "It\u0027s not impossible to use correctly.  If `TimeZoneInfo.IsAmbiguousTime` returns `true` you can pass in either `false` or `true` for `isDaylightSavingTime`.  If it returns `false`, you pass in the value returned from `TimeZoneInfo.IsDaylightSavingTime` (or just use the existing overload of `TimeZoneInfo.ConvertTimeToUtc` without the parameter).",
                                           "updatedAt":  "2025-08-06T06:35:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68Zy1r",
                                           "createdAt":  "2025-08-06T16:49:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  "Yeah, that\u0027s what I mean; that\u0027s too much \"overhead\", and requires that the caller perform checks that the method is required to perform itself (for error checking at minimum, never mind for implementation reasons).  That\u0027s an API smell (even ignoring the smell of a boolean parameter).\n\nAn API to fill this hole would be something along the lines of\n```csharp\npublic static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo sourceTimeZone, ZoneResolver resolver);\n\n[Flags] // Although some options are exclusive...\npublic enum ZoneResolver\n{\n    // Handles valid times\n    AssumeStandard,\n    AssumeDaylight,\n    // Handles invalid times\n    // Skips the \"distance\" of the gap from the value, not to the \"first\" valid time.  Eg, 1:30 becomes 2:30, not 2:00\n    SkipToValidTime,\n    // Same as above, but in reverse\n    RetreatToValidTime\n}\n```\n... then you just call it on whatever value you happen to have and it works, without the caller having to check anything about the value beforehand.",
                                           "updatedAt":  "2025-08-06T16:49:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68Z9jw",
                                           "createdAt":  "2025-08-06T17:05:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlreinke",
                                           "body":  "I\u0027m quite happy with the API as proposed, and I think it fits with how the rest of the `TimeZoneInfo` API works.\n\nI have implemented this method in an application and successfully used it for converting local, potentiality ambiguous timestamps provided by a user.  It\u0027s just irritating that I had to implement and test it myself.",
                                           "updatedAt":  "2025-08-06T17:50:20Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[API Proposal]: Resolve time conversion that is ambiguous due to DST",
        "labels":  [
                       "api-suggestion",
                       "area-System.DateTime"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118915",
        "createdAt":  "2025-08-20T08:14:40Z",
        "number":  118915,
        "author":  "yukawa",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-21T02:40:09Z",
        "body":  "### Description\n\nWhen Windows time zone registry entries specify different offsets for consecutive two years, `TimeZoneInfo.ConvertTimeFromUtc()` and `SystemTimeToTzSpecificLocalTimeEx` Win32 API do not seem to agree on how to address such offset changes around the year boundary.\n\nIn \"Volgograd Standard Time\" time zone,  UTC 2020-12-31 20:30:00 is resolved to\n * 2020-12-31 23:30:00 with `SystemTimeToTzSpecificLocalTimeEx` Win32 API\n * 2021-01-01 00:30:00 with `TimeZoneInfo.ConvertTimeFromUtc`\n\n\n### Reproduction Steps\n\n```csharp\n\nusing System.Runtime.InteropServices;\n\n[StructLayout(LayoutKind.Sequential)]\npublic struct SYSTEMTIME\n{\n    public ushort wYear;\n    public ushort wMonth;\n    public ushort wDayOfWeek;\n    public ushort wDay;\n    public ushort wHour;\n    public ushort wMinute;\n    public ushort wSecond;\n    public ushort wMilliseconds;\n}\n\n[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\npublic struct TIME_ZONE_INFORMATION\n{\n    public int Bias;\n    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]\n    public string StandardName;\n    public SYSTEMTIME StandardStart;\n    public int StandardBias;\n    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]\n    public string DaylightName;\n    public SYSTEMTIME DaylightStart;\n    public int DaylightBias;\n}\n\n[StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]\npublic struct DYNAMIC_TIME_ZONE_INFORMATION\n{\n    public TIME_ZONE_INFORMATION TimeZoneInformation;\n    [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]\n    public string TimeZoneKeyName;\n    bool DynamicDaylightTimeDisabled;\n}\n\npublic class TimeZoneInfoHelper\n{\n    [DllImport(\"advapi32.dll\", CharSet = CharSet.Unicode)]\n    public static extern int EnumDynamicTimeZoneInformation(\n        uint index,\n        out DYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation);\n\n    [DllImport(\"kernel32.dll\", CharSet = CharSet.Unicode)]\n    [return: MarshalAs(UnmanagedType.Bool)]\n    public static extern bool SystemTimeToTzSpecificLocalTimeEx(\n        ref DYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation,\n        ref SYSTEMTIME lpUniversalTime,\n        out SYSTEMTIME lpLocalTime);\n\n    public static bool GetDynamicTimeZoneInformation(\n        string timeZoneId,\n        out DYNAMIC_TIME_ZONE_INFORMATION dynamicTimeZoneInfo)\n    {\n        dynamicTimeZoneInfo = new DYNAMIC_TIME_ZONE_INFORMATION();\n        for (uint index = 0; true; index++)\n        {\n            if (EnumDynamicTimeZoneInformation(index, out dynamicTimeZoneInfo) != 0)\n            {\n                return false;\n            }\n            if (dynamicTimeZoneInfo.TimeZoneKeyName == timeZoneId)\n            {\n                return true;\n            }\n        }\n    }\n\n    public static bool SystemTimeToTzSpecificLocalTimeEx(\n        DYNAMIC_TIME_ZONE_INFORMATION info,\n        DateTime utcTime,\n        out DateTime localTime)\n    {\n        localTime = new DateTime();\n        SYSTEMTIME systemTime = new SYSTEMTIME\n        {\n            wYear = (ushort)utcTime.Year,\n            wMonth = (ushort)utcTime.Month,\n            wDayOfWeek = 0,\n            wDay = (ushort)utcTime.Day,\n            wHour = (ushort)utcTime.Hour,\n            wMinute = (ushort)utcTime.Minute,\n            wSecond = (ushort)utcTime.Second,\n            wMilliseconds = (ushort)utcTime.Millisecond,\n        };\n        SYSTEMTIME tmpLocalTime;\n        if (!SystemTimeToTzSpecificLocalTimeEx(ref info, ref systemTime, out tmpLocalTime))\n        {\n            return false;\n        }\n        localTime = new DateTime(tmpLocalTime.wYear, tmpLocalTime.wMonth, tmpLocalTime.wDay,\n                         tmpLocalTime.wHour, tmpLocalTime.wMinute, tmpLocalTime.wSecond,\n                         tmpLocalTime.wMilliseconds, DateTimeKind.Local);\n        return true;\n    }\n}\n\nclass Program\n{\n    static void VerifyTimeZoneInfo(string tzId, IEnumerable\u003cDateTime\u003e utcTimes)\n    {\n        Console.WriteLine($\"Verify UTC to Local time conversions in \\\"{tzId}\\\".\");\n        var tz = TimeZoneInfo.FindSystemTimeZoneById(tzId);\n        var tzInfo = new DYNAMIC_TIME_ZONE_INFORMATION();\n\n        if (!TimeZoneInfoHelper.GetDynamicTimeZoneInformation(tzId, out tzInfo))\n        {\n            throw new Exception($\"Failed to get dynamic time zone information for {tzId}\");\n        }\n        foreach (var utcTime in utcTimes)\n        {\n            var localDotnet = TimeZoneInfo.ConvertTimeFromUtc(DateTime.SpecifyKind(utcTime, DateTimeKind.Unspecified), tz);\n            DateTime localWin32;\n            if (!TimeZoneInfoHelper.SystemTimeToTzSpecificLocalTimeEx(tzInfo, utcTime, out localWin32))\n            {\n                Console.WriteLine($\"Failed to convert UTC time {utcTime} to local time in {tzId}\");\n            }\n            Console.WriteLine($\"UTC:{utcTime} -\u003e Win32:{localWin32} -- .NET:{localDotnet}\");\n        }\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine($\"Environment.OSVersion.Version: {Environment.OSVersion.Version}\");\n        Console.WriteLine($\"RuntimeInformation.FrameworkDescription.: {RuntimeInformation.FrameworkDescription}\");\n        var utcTimes = new DateTime[]\n        {\n            new DateTime(2019, 12, 31, 19, 0, 0, DateTimeKind.Utc),\n            new DateTime(2019, 12, 31, 19, 30, 0, DateTimeKind.Utc),\n            new DateTime(2019, 12, 31, 20, 0, 0, DateTimeKind.Utc),\n            new DateTime(2019, 12, 31, 20, 30, 0, DateTimeKind.Utc),\n            new DateTime(2019, 12, 31, 21, 0, 0, DateTimeKind.Utc),\n            new DateTime(2019, 12, 31, 21, 30, 0, DateTimeKind.Utc),\n            new DateTime(2019, 12, 31, 22, 0, 0, DateTimeKind.Utc),\n            new DateTime(2020, 12, 31, 19, 0, 0, DateTimeKind.Utc),\n            new DateTime(2020, 12, 31, 19, 30, 0, DateTimeKind.Utc),\n            new DateTime(2020, 12, 31, 20, 0, 0, DateTimeKind.Utc),\n            new DateTime(2020, 12, 31, 20, 30, 0, DateTimeKind.Utc),\n            new DateTime(2020, 12, 31, 21, 0, 0, DateTimeKind.Utc),\n            new DateTime(2020, 12, 31, 21, 30, 0, DateTimeKind.Utc),\n            new DateTime(2020, 12, 31, 22, 0, 0, DateTimeKind.Utc),\n        };\n        VerifyTimeZoneInfo(\"Volgograd Standard Time\", utcTimes);\n    }\n}\n```\n\n\n### Expected behavior\n\nIt\u0027s a bit hard to say which behavior is correct, as the source time zone data in Win32 registry does not look to be intentional. That said, it would be nice if both `TimeZoneInfo.ConvertTimeFromUtc()` and `SystemTimeToTzSpecificLocalTimeEx` behave in the same manner when the same data source is used.\n\n### Actual behavior\n\n```\nEnvironment.OSVersion.Version: 10.0.26100.0\nRuntimeInformation.FrameworkDescription.: .NET 9.0.8\nVerify UTC to Local time conversions in \"Volgograd Standard Time\".\nUTC:2019/12/31 19:00:00 -\u003e Win32:2019/12/31 23:00:00 -- .NET:2019/12/31 23:00:00\nUTC:2019/12/31 19:30:00 -\u003e Win32:2019/12/31 23:30:00 -- .NET:2019/12/31 23:30:00\nUTC:2019/12/31 20:00:00 -\u003e Win32:2020/01/01 1:00:00 -- .NET:2020/01/01 0:00:00\nUTC:2019/12/31 20:30:00 -\u003e Win32:2020/01/01 1:30:00 -- .NET:2020/01/01 0:30:00\nUTC:2019/12/31 21:00:00 -\u003e Win32:2020/01/01 2:00:00 -- .NET:2020/01/01 2:00:00\nUTC:2019/12/31 21:30:00 -\u003e Win32:2020/01/01 2:30:00 -- .NET:2020/01/01 2:30:00\nUTC:2019/12/31 22:00:00 -\u003e Win32:2020/01/01 3:00:00 -- .NET:2020/01/01 3:00:00\nUTC:2020/12/31 19:00:00 -\u003e Win32:2020/12/31 23:00:00 -- .NET:2020/12/31 23:00:00\nUTC:2020/12/31 19:30:00 -\u003e Win32:2020/12/31 23:30:00 -- .NET:2020/12/31 23:30:00\nUTC:2020/12/31 20:00:00 -\u003e Win32:2020/12/31 23:00:00 -- .NET:2021/01/01 0:00:00\nUTC:2020/12/31 20:30:00 -\u003e Win32:2020/12/31 23:30:00 -- .NET:2021/01/01 0:30:00\nUTC:2020/12/31 21:00:00 -\u003e Win32:2021/01/01 0:00:00 -- .NET:2021/01/01 0:00:00\nUTC:2020/12/31 21:30:00 -\u003e Win32:2021/01/01 0:30:00 -- .NET:2021/01/01 0:30:00\nUTC:2020/12/31 22:00:00 -\u003e Win32:2021/01/01 1:00:00 -- .NET:2021/01/01 1:00:00\n```\n\n\n### Regression?\n\nHaven\u0027t checked.\n\n### Known Workarounds\n\n* Use P/Invoke to call `SystemTimeToTzSpecificLocalTimeEx` if the consistency with OS behavior is critical.\n* Use IANA database (e.g. with Noda Time) if the data accuracy is critical and the consistency with OS is not so important.\n\n### Configuration\n\n* OS: Windows 11 24H2\n* .NET 9.0.8\n* `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones\\TzVersion`: 0x7e70010\n\n### Other information\n\nI\u0027m mostly sure that there is a data issue in Windows Time Zone database regarding 2020 Time zone updates for Volgograd.\nhttps://techcommunity.microsoft.com/blog/dstblog/2020-time-zone-updates-for-volgograd-russia-now-available/2234995\n\n * `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Time Zones\\TzVersion`: 0x7e70010\n * Time Zone ID: `Volgograd Standard Time`\n\n|Year|Bias|StandardBias|DaylightBias|DaylightStart |StandardStart |\n|----|----|------------|------------|--------------|--------------|\n|2015|-180|           0|         -60|           N/A|         N/A |\n|2016|-180|           0|         -60|           N/A|         N/A |\n|2017|-180|           0|         -60|           N/A|         N/A |\n|2018|-240|           0|          60|01-01 00:00:00|10-05 02:00:00|\n|2019|-240|           0|         -60|           N/A|         N/A |\n|2020|-240|           0|         -60|01-01 00:00:00|12-05 02:00:00|\n|2021|-180|           0|         -60|           N/A|         N/A |\n\nAs you can see, UTC-offsets are not the same in the following period, which do not look to be intentional.\n\n * 2019-12-31 23:59:59 -\u003e 2020-1-1 00:00:00\n * 2020-12-31 23:59:59 -\u003e 2021-1-1 00:00:00",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvwUDTw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6_BQNP",
                                           "createdAt":  "2025-08-20T08:15:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-datetime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-20T08:15:31Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Inconsistency between TimeZoneInfo.ConvertTimeFromUtc and SystemTimeToTzSpecificLocalTimeEx API around year boundaries",
        "labels":  [
                       "area-System.DateTime"
                   ]
    }
]
