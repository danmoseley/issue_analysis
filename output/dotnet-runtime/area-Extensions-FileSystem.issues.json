[
    {
        "url":  "https://github.com/dotnet/runtime/issues/36412",
        "createdAt":  "2018-12-13T06:14:42Z",
        "number":  36412,
        "author":  "TylerLeonhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxGS9w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "keyboardDrummer",
                                            "createdAt":  "2023-07-04T13:24:07Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-07T17:37:37Z",
        "body":  "### Describe the bug\r\n\r\nI\u0027m receiving a `System.UnauthorizedAccessException` while using the `Microsoft.Extensions.FileSystemGlobbing`. I need some way to catch this exception and continue the File search.\r\n\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Using version \u00272.2.0\u0027 of package \u0027Microsoft.Extensions.FileSystemGlobbing\u0027\r\n2. Run this code:\r\n\r\n```csharp\r\nusing System;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing Microsoft.Extensions.FileSystemGlobbing;\r\nusing Microsoft.Extensions.FileSystemGlobbing.Abstractions;\r\n\r\nnamespace testProj\r\n{\r\n    class Program\r\n    {\r\n        public static void Main(string[] args)\r\n        {\r\n            Matcher matcher = new Matcher().AddInclude(@\"**/*.*\");\r\n\r\n            PatternMatchingResult result = matcher.Execute(new DirectoryInfoWrapper(new DirectoryInfo(\"/\")));\r\n\r\n            foreach (var item in result.Files)\r\n            {\r\n                Console.WriteLine(item);\r\n                System.Threading.Thread.Sleep(100);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n4. See error:\r\n\r\n```\r\nException has occurred: CLR/System.UnauthorizedAccessException\r\nAn unhandled exception of type \u0027System.UnauthorizedAccessException\u0027 occurred in System.IO.FileSystem.dll: \u0027Access to the path \u0027/usr/sbin/authserver\u0027 is denied.\u0027\r\n Inner exceptions found, see $exception in variables window for more details.\r\n Innermost exception \t System.IO.IOException : Permission denied\r\n```\r\n\r\n### Expected behavior\r\nI would expect some way to catch these errors and continue searching.\r\n\r\n### Additional context\r\n\r\nInclude the output of `dotnet --info`:\r\n```\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.403/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  2.1.403 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMgr5Gw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMjYyMDQ3NQ==",
                                           "createdAt":  "2020-10-20T06:17:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBUD0kA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2020-10-20T13:19:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jozkee",
                                           "body":  "I think that if you do a recursive search, you should not be blocked by the files that you don\u0027t have access to, they should be only ignored.\r\n\r\nThe problem with the current code is here, `EnumerateFileSystemInfos(string, SearchOption)` does not support ignoring inaccessible files: \r\nhttps://github.com/dotnet/runtime/blob/3cf8d43713c6ee188486459d988db0af0d7596c6/src/libraries/Microsoft.Extensions.FileSystemGlobbing/src/Abstractions/DirectoryInfoWrapper.cs#L38\r\n\r\nThe scenario could be easily enable if we could use the `EnumerateFileSystemInfos` overload that takes `EnumerableOptions` and then you pass options with `IgnoreInaccessible` set to `true`. The concern is that such API is not available for NS2.0 which is the version that FileSystemGlobbing targets.\r\n\r\ncc @carlossanlop @maryamariyan ",
                                           "updatedAt":  "2020-10-20T06:22:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMzAwNTc0NA==",
                                           "createdAt":  "2020-10-20T17:02:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TylerLeonhardt",
                                           "body":  "Yeah my product is a NS2.0 lib as well so I would appreciate the support there :) ",
                                           "updatedAt":  "2020-10-20T17:02:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzOTU3OTkzMQ==",
                                           "createdAt":  "2021-05-12T08:32:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPzZ6Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "andrewmd5",
                                                                               "createdAt":  "2023-12-16T07:27:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "dhhoang",
                                           "body":  "+1 on this issue",
                                           "updatedAt":  "2021-05-12T08:32:36Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "No way to handle UnauthorizedAccessException ",
        "labels":  [
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36406",
        "createdAt":  "2019-06-03T22:22:56Z",
        "number":  36406,
        "author":  "carlossanlop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-22T19:28:46Z",
        "body":  "_From @patrick-blanc on Thursday, May 16, 2019 1:29:06 PM_\r\n\r\nGetting unhandled exception **from System.Private.CoreLib**\r\n\r\n\u003e System.ArgumentOutOfRangeException\r\n\u003e   HResult=0x80131502\r\n\u003e   Message=startIndex cannot be larger than length of string.\r\n\u003e Parameter name: startIndex\r\n\u003e   Source=System.Private.CoreLib\r\n\u003e   StackTrace:\r\n\u003e    at System.String.Substring(Int32 startIndex, Int32 length)\r\n\u003e    at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(String fullPath)\r\n\u003e    at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(Object sender, RenamedEventArgs e)\r\n\u003e    at System.IO.FileSystemWatcher.NotifyRenameEventArgs(WatcherChangeTypes action, String name, String oldName)\r\n\u003e    at System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(Byte[] buffer)\r\n\u003e    at System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* overlappedPointer)\r\n\u003e    at System.Threading._IOCompletionCallback.PerformIOCompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pOVERLAP)\r\n\r\nMy console application (running on windows machine) try to run \"npm install\" command in different task on different folders. \r\n\r\nSometimes, I get the exception sometimes not. I am not using any FileWatcher in my console application. So my question is why did I get this exception from .net core. Is a .net core console app using by default a file watcher ? Anyone to help me to get rid of that exception.\r\n\r\nHere is information from dotnet --info\r\n```\r\n\r\n\u003e .NET Core SDK (reflecting any global.json):\r\n\u003e  Version:   2.2.204\r\n\u003e  Commit:    8757db13ec\r\n\u003e \r\n\u003e Runtime Environment:\r\n\u003e  OS Name:     Windows\r\n\u003e  OS Version:  10.0.17134\r\n\u003e  OS Platform: Windows\r\n\u003e  RID:         win10-x64\r\n\u003e  Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.204\\\r\n\u003e \r\n\u003e Host (useful for support):\r\n\u003e   Version: 2.2.5\r\n\u003e   Commit:  0a3c9209c0\r\n\u003e \r\n\u003e .NET Core SDKs installed:\r\n\u003e   2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n\u003e   2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n\u003e   2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n\u003e   2.2.204 [C:\\Program Files\\dotnet\\sdk]\r\n\u003e \r\n\u003e .NET Core runtimes installed:\r\n\u003e   Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n\u003e   Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n\u003e   Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n\u003e   Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n\u003e   Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\u003e   Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\u003e   Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\u003e   Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n\u003e   Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\u003e   Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\u003e   Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\u003e   Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\nI see a thread related to same exception on aspnetcore (1 year ago) : #https://github.com/aspnet/AspNetCore/issues/2536\r\n\r\nit seems it has been fixed in release 2.0.1 of Microsoft.Extensions.FileProviders.Physical, as I am using .net core 2.2 I don\u0027t think it\u0027s related. As said before I am not creating any FileWatcher. My code is basically checking if directory exists (like node_modules) if not it run a process (cmd) and run the npm install.\r\n\r\nNotice that I find strange that PhysicalFilesWatcher.OnRenamed is throwing an exception on System.String.Substring(Int32 startIndex, Int32 length) because OnRenamed does not use this method but is using System.String.Substring(Int32 startIndex)\r\n\r\nThanks for your help\r\nany hints would be greatly appreciated\r\n\r\n_Copied from original issue: dotnet/corefx#37707_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKro17w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODQ0ODM5OA==",
                                           "createdAt":  "2019-06-03T22:22:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "_From @patrick-blanc on Tuesday, May 21, 2019 10:31:29 AM_\r\n\r\nAfter investigations, we found that problem seems to be related to this commands.\r\n\r\n```csharp\r\n.AddJsonFile(\"appsettings.json\", false, true)\r\n```\r\nBy settings true for reload on change (that was a mistake done by c/c code), a file system watched is created but not only on the appsettings file. The file system start check the entire files in all folders, subfolders. This produce a memory leak done by the FileSystemWatcher that was taking memory and memory each time a npm install was done by a child process of the console app.\r\n\r\nTo fix it I just set the reloadOnChange to false. It does not create any watcher then and no memory problem at least.\r\n```csharp\r\n.AddJsonFile(\"appsettings.json\", false, false)\r\n```",
                                           "updatedAt":  "2019-06-03T22:22:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5ODQ0ODQwMw==",
                                           "createdAt":  "2019-06-03T22:22:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "_From @JeremyKuhne on Monday, June 3, 2019 9:09:38 PM_\r\n\r\nThis should be in https://github.com/aspnet/Extensions. @karelz do you have write access to transfer this or know who does?\r\n\r\n`Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange` should be hardened for the reported call stack.",
                                           "updatedAt":  "2019-06-03T22:22:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMjg2MDU0OQ==",
                                           "createdAt":  "2019-06-17T21:37:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "\u003e Notice that I find strange that PhysicalFilesWatcher.OnRenamed is throwing an exception on System.String.Substring(Int32 startIndex, Int32 length) because OnRenamed does not use this method but is using System.String.Substring(Int32 startIndex)\r\n\r\nThis is probably due to inlining. `Substring(Int32)` just calls straight in to `Substring(Int32, Int32)` so it\u0027s probably getting inlined.\r\n\r\nCan you clarify what you were doing in the file system when this changed? Were you moving files in or out of the project directory? I do see a possible case where this exception could be thrown but it would only be if a file was moved out of the directory.\r\n\r\nThis is something we should consider hardening for. Basically, my hunch is that if you have a file under the watched directory and then move it *outside* the watched directory, to a location with a shorter base path, then the [`Substring` call](https://github.com/aspnet/Extensions/blob/642b9263abe16ba1cd038f27c8cb4661763ff5bb/src/FileProviders/Physical/src/PhysicalFilesWatcher.cs#L307) could fail like this since we assume the path is prefixed by the root directory.",
                                           "updatedAt":  "2019-06-17T21:37:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNTU1NzM1OA==",
                                           "createdAt":  "2020-05-08T00:04:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "As part of the migration of components from dotnet/extensions to dotnet/runtime (https://github.com/aspnet/Announcements/issues/411) we will be bulk closing some of the older issues. If you are still interested in having this issue addressed, just comment and the issue will be automatically reactivated (even if you aren\u0027t the author). When you do that, I\u0027ll page the team to come take a look. If you\u0027ve moved on or workaround the issue and no longer need this change, just ignore this and the issue will be closed in **7 days**.\n\nIf you know that the issue affects a package that has moved to a different repo, please consider re-opening the issue in that repo. If you\u0027re unsure, that\u0027s OK, someone from the team can help!",
                                           "updatedAt":  "2020-05-08T00:04:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNzAyMzg5Mg==",
                                           "createdAt":  "2020-05-11T23:44:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  " @patrick-blanc your issue was moved to this repo. Can you please help answer @anurse\u0027s questions?",
                                           "updatedAt":  "2020-05-11T23:44:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNzAyMzkxMQ==",
                                           "createdAt":  "2020-05-11T23:44:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Paging @dotnet/extensions-migration ! This issue has been revived from staleness. Please take a look and route to the appropriate repository.",
                                           "updatedAt":  "2020-05-11T23:44:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMzU0NDIzOA==",
                                           "createdAt":  "2020-05-25T12:18:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dlyz",
                                           "body":  "There is some new information about this issue.\r\n\r\n1. It can be reproduced (see [gist](https://gist.github.com/dlyz/e971d79b37c3450ec9ef7f40f824cdde)).\r\n2. Required preconditions to reproduce it: parallel renames of physical files (at least two threads), a non-empty directory with a name of length 1 (directory \u0027a\u0027 in gist), working PhysicalFilesWatcher.\r\n3. Exceptions with one-letter-directory-names is not a true cause, it just a consequence of the real bug, which does not produce any exceptions without one-letter-directory-names, but the behavior is still incorrect.\r\n4. The real problem is [here](https://github.com/dotnet/runtime/blob/bd6cbe3642f51d70839912a6a666e5de747ad581/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFilesWatcher.cs#L268): sometimes e.FullPath or e.OldFullPath can not be detected and corresponding property contains root path with the trailing slash (strange undocumented api behavior?). Then `substring` will cut off one excess char and `combine` will produce incorrect path.\r\n5. The real real problem is [here](https://github.com/dotnet/runtime/blob/d0e22812943f358b438f1e379ccf99027d34789e/src/libraries/System.IO.FileSystem.Watcher/src/System/IO/FileSystemWatcher.Win32.cs#L253), because this code can not correctly work with mixed rename events in the buffer and the resulting behavior for this case is not obvious at all.\r\n\r\n",
                                           "updatedAt":  "2020-05-25T12:18:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMDcwMTI3MQ==",
                                           "createdAt":  "2020-10-16T23:55:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "@patrick-blanc @dlyz I recently fixed a bug in `ParseEventBufferAndNotifyForEach`, although that issue is not exactly the same, I wonder if the actual fix may have made the underlying `FileSystemWatcher` more stable and ended up getting rid of this problem. https://github.com/dotnet/runtime/pull/42419\r\n\r\n- Did your repro occur when attempting to monitor files over the network by any chance?\r\n- Can you please try to repro with 5.0 see if the issue is still happening?\r\n\r\n",
                                           "updatedAt":  "2020-10-16T23:55:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNDU5NzM2OQ==",
                                           "createdAt":  "2020-10-22T16:06:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "\u003e It can be reproduced (see gist).\r\n\r\n@carlossanlop the gist linked from @dlyz still gives a repro with net5.0 and latest packages.",
                                           "updatedAt":  "2020-10-22T16:06:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNjg0NjU3NQ==",
                                           "createdAt":  "2020-10-26T21:57:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Next step is probably to run the repo while logging what https://github.com/dotnet/runtime/blob/d0e22812943f358b438f1e379ccf99027d34789e/src/libraries/System.IO.FileSystem.Watcher/src/System/IO/FileSystemWatcher.Win32.cs#L253\r\nis receiving and in what order, specifically the rename events. Perhaps the OS is giving us these events in an unexpected ordering.",
                                           "updatedAt":  "2020-10-26T21:57:47Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  ".Net Core 2.2 console application : System.Private.CoreLib System.ArgumentOutOfRangeException (FileSystemWatcher)",
        "labels":  [
                       "bug",
                       "help wanted",
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42036",
        "createdAt":  "2020-04-10T18:00:53Z",
        "number":  42036,
        "author":  "rynowak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-09T07:04:06Z",
        "body":  "Related to dotnet/aspnetcore#20488 \r\n\r\nI did some investigation about some startup cost of the filewatching we set up by default. What I found may shock you. In the case that I\u0027m measuring on macOS - the impact of first call to `IFileProvider.Watch()` is 100ms in wall clock time.\r\n\r\n## Background\r\n\r\nSome background... \r\n\r\nOne of the features of `IFileProvider` is that it implements globbing in a non-OS-native way. So `IFileProvider` implements file system globbing `/**/*.cshtml` which is separate from what the underlying OS does. `IFileProvider` also implements file-watching, and since you have mix globbing (not implemented by the OS) and file watching (implemented by the OS) it uses a big hammer to implement this.  When `Watch` is called, `IFileProvider` will watch the entire directory hierarchy it has access to, and will do the filtering of notifications based on the globbing feature.\r\n\r\nOn windows watching a directory tree maps directly to the Win32 API FindFirstChangeNotification or ReadDirectoryChanges. So watching a directory and it\u0027s subdirectories is implemented by the OS directly, and it takes one call from .NET -\u003e native to set this up.\r\n\r\nOn Linux, there isn\u0027t an API for recursive subdirectory watching, the filewatcher code has to walk the directory hierarchy and register a watch on each subdirectory.\r\n\r\nOn macOS there *is* an API for recursive file watching. So it\u0027s not totally clear why it\u0027s taking 100ms. \r\n\r\n### How I\u0027m measuring\r\n\r\nI wrote the following test code:\r\n\r\n```C#\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.AspNetCore.Hosting;\r\nusing Microsoft.Extensions.Configuration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Extensions.FileProviders;\r\nusing Microsoft.Extensions.Hosting;\r\nusing Microsoft.Extensions.Logging;\r\n\r\nnamespace startupexperiment\r\n{\r\n    public class Program\r\n    {\r\n        public static async Task Main(string[] args)\r\n        {\r\n            if (args.Contains(\"--empty\"))\r\n            {\r\n                var stopwatch = Stopwatch.StartNew();\r\n                using (var host = CreateEmptyHostBuilder(args).Build())\r\n                {\r\n                    await host.StartAsync();\r\n                    Console.WriteLine($\"Empty Elapsed: {stopwatch.ElapsedMilliseconds}ms\");\r\n\r\n                    await host.StopAsync();\r\n                }\r\n            }\r\n            else if (args.Contains(\"--watch\"))\r\n            {\r\n                var stopwatch = Stopwatch.StartNew();\r\n                using (var host = CreateEmptyHostBuilder(args).Build())\r\n                {\r\n                    await host.StartAsync();\r\n                    var provider = host.Services.GetRequiredService\u003cIHostEnvironment\u003e().ContentRootFileProvider;\r\n                    provider.Watch(\"appsettings.json\");\r\n                    Console.WriteLine($\"Manual Elapsed: {stopwatch.ElapsedMilliseconds}ms\");\r\n\r\n                    await host.StopAsync();\r\n                }\r\n            }\r\n            else if (args.Contains(\"--manual\"))\r\n            {\r\n                var stopwatch = Stopwatch.StartNew();\r\n                using (var host = CreateEmptyHostBuilder(args).Build())\r\n                {\r\n                    await host.StartAsync();\r\n                    var provider = host.Services.GetRequiredService\u003cIHostEnvironment\u003e().ContentRootFileProvider;\r\n\r\n                    var watcher = new FileSystemWatcher(((PhysicalFileProvider)provider).Root, \"appsettings.json\");\r\n                    watcher.EnableRaisingEvents = true;\r\n\r\n                    Console.WriteLine($\"Manual Elapsed: {stopwatch.ElapsedMilliseconds}ms\");\r\n\r\n                    await host.StopAsync();\r\n                }\r\n            }\r\n            else\r\n            {\r\n                var stopwatch = Stopwatch.StartNew();\r\n                using (var host = CreateHostBuilderDefault(args).Build())\r\n                {\r\n                    await host.StartAsync();\r\n                    Console.WriteLine($\"Default Elapsed: {stopwatch.ElapsedMilliseconds}ms\");\r\n\r\n                    await host.StopAsync();\r\n                }\r\n            }\r\n        }\r\n\r\n        public static IHostBuilder CreateHostBuilderDefault(string[] args) =\u003e\r\n            Host.CreateDefaultBuilder(args)\r\n                .ConfigureWebHostDefaults(webBuilder =\u003e\r\n                {\r\n                    webBuilder.UseStartup\u003cStartup\u003e();\r\n                });\r\n\r\n        public static IHostBuilder CreateEmptyHostBuilder(string[] args) =\u003e\r\n            new HostBuilder().ConfigureWebHostDefaults(webBuilder =\u003e\r\n            {\r\n                webBuilder.UseStartup\u003cStartup\u003e();\r\n            });\r\n    }\r\n}\r\n\r\n```\r\n\r\nPublishing this with `-c Release` and then running it repeatedly yields pretty consistent results with a variation of about ~10ms. This is measured with the MVC template, which has some files to watch. Note that I\u0027m doing a publish so that we\u0027re measuring all of the files that *need* to be in the app\u0027s output, not measuring `obj/`.\r\n\r\nResults on macOS\r\n\r\n| **Scenario** | Approx Time (ms) | Description                                                     |\r\n|--------------|------------------|-----------------------------------------------------------------|\r\n| **Default**  | 410 ms           | Uses CreateDefaultHost (default experience users get)           |\r\n| **--watch**  | 365 ms           | Uses new HostBuilder() and a single call to IFileProvider.Watch |\r\n| **--manual** | 365 ms           | Uses new HostBuilder() and FileSystemWatcher                    |\r\n| **--empty**  | 275 ms           | Uses new HostBuilder() no configuration files or file watching  |\r\n\r\n## Next Steps\r\n\r\nMy next step here is to retake these measurements on Linux. We care a little bit more about Linux as a production scenario.\r\n\r\nI can measure that this is pretty slow on macOS, but it\u0027s not slow for the reasons I expected. Using `FileSystemWatcher` and `IFileProvider.Watch` had the same result.\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKchXGg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MjYyMTY2Ng==",
                                           "createdAt":  "2020-07-01T20:08:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianEdwards",
                                           "body":  "Related issue in the runtime RE swapping to newer Linux API that could improve this dotnet/runtime#30495",
                                           "updatedAt":  "2020-07-01T20:08:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4OTgxNjM4Mw==",
                                           "createdAt":  "2020-09-09T20:54:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @maryamariyan\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-09T20:54:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4OTgxOTMyOA==",
                                           "createdAt":  "2020-09-09T21:00:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-09T21:00:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Nzg1MDI0Nw==",
                                           "createdAt":  "2020-09-23T18:32:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "\u003e My next step here is to retake these measurements on Linux. We care a little bit more about Linux as a production scenario.\r\n\r\n@rynowak did you get a chance to also do the same measurements on linux?",
                                           "updatedAt":  "2020-09-23T18:32:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMDk5NTM1NA==",
                                           "createdAt":  "2020-09-29T21:16:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rynowak",
                                           "body":  "Newp. ",
                                           "updatedAt":  "2020-09-29T21:16:46Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Using FileWatcher on non-windows has a very large impact on startup time",
        "labels":  [
                       "tenet-performance",
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/35128",
        "createdAt":  "2020-04-16T19:33:26Z",
        "number":  35128,
        "author":  "mchandler-manticore",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODL1Q3Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "onionhammer",
                                            "createdAt":  "2020-10-29T21:27:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MaxHorstmann",
                                            "createdAt":  "2021-05-13T15:27:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alex-jitbit",
                                            "createdAt":  "2022-01-24T15:37:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "1k-off",
                                            "createdAt":  "2022-02-02T12:36:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "oiBio",
                                            "createdAt":  "2022-04-14T15:02:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MarvinKlein1508",
                                            "createdAt":  "2022-07-27T06:33:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0x6DD8",
                                            "createdAt":  "2022-07-30T22:21:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "johanbenschop",
                                            "createdAt":  "2022-09-29T08:27:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ericraider33",
                                            "createdAt":  "2022-11-08T16:02:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gldfdp",
                                            "createdAt":  "2022-11-09T13:08:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "7702244",
                                            "createdAt":  "2023-02-10T14:33:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matthiashuygelentillit",
                                            "createdAt":  "2024-04-23T10:37:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pregress",
                                            "createdAt":  "2024-04-23T10:37:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andysterland",
                                            "createdAt":  "2024-09-20T22:52:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ricsv",
                                            "createdAt":  "2024-10-17T12:25:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "git-hub-user",
                                            "createdAt":  "2024-12-05T08:14:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AhmedZaki99",
                                            "createdAt":  "2025-08-19T19:52:36Z"
                                        }
                                    ],
                          "totalCount":  17
                      },
        "updatedAt":  "2025-05-13T09:38:55Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nMy team ran into an issue where we develop on windows with case insensitive file system and returning static files using lower case links but when deploying on linux (case sensitive file system) in docker the same links no longer worked as the files had camel case on disk\r\n\r\n### Describe the solution you\u0027d like\r\nAdd a boolean value to StaticFileOptions to enable static files to resolve files on disk ignoring file system case thus having the same behavior on windows and linux.\r\n\r\n### Additional context\r\nExample file: /wwwroot/MyTestFile.txt\r\nLink http://localhost/mytestfile.txt works on windows doesnt work on linux\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOq2i1Hg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNDg3NTU1NA==",
                                           "createdAt":  "2020-04-16T20:23:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "The file lookup is managed by the IFileProvider implemented by PhysicalFileProvider in this example.\r\nhttps://github.com/dotnet/runtime/blob/master/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFileProvider.cs\r\n\r\nCase in-sensitivity isn\u0027t something StaticFiles can fake from the top down, you\u0027d need this option on the underlying file APIs first.\r\n\r\nRecommend transferring this to Runtime.",
                                           "updatedAt":  "2020-04-16T20:24:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNTQ0NTA4OQ==",
                                           "createdAt":  "2020-04-17T20:17:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "analogrelay",
                                           "body":  "Transferring this to runtime. The change that would be needed here is to have a case-insensitive mode to file providers.\r\n\r\nHaving said that, we already know there are case-sensitive file systems in use (Linux, as you noted) and making the file providers case-insensitive even when on a case-sensitive file system is very tricky and disruptive.",
                                           "updatedAt":  "2020-04-17T20:17:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxNTQ0NTI1NA==",
                                           "createdAt":  "2020-04-17T20:17:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-04-17T20:17:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjI5NTg2MA==",
                                           "createdAt":  "2020-07-09T18:57:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBTyquA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2020-10-16T23:19:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "It\u0027s not clear what the API request is here.  Can you make a formal API request?\r\n\r\nAlso, keep in mind that even on windows you can now make the file system case-sensitive so the value of such a feature here might be diminished.\r\n",
                                           "updatedAt":  "2020-07-09T18:57:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1OTY2NzY1MA==",
                                           "createdAt":  "2020-07-16T20:55:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBo-Nkg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gimlichael",
                                                                               "createdAt":  "2021-04-28T23:39:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "I\u0027m not going to back this at all, but in fact this is to my eyes a very clear item. API surface is something like `bool ForceCaseInsensitive {get;set;} = false;` Trying to provide case insensitive APIs in general is very hard for lots of obvious reasons, but it\u0027s easy enough to do on a pure reader. Or maybe `ForceLowerCase` is better; hard to tell.",
                                           "updatedAt":  "2020-07-16T20:55:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMDY5MzM0Ng==",
                                           "createdAt":  "2020-10-16T23:18:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "We have issues tracking this request on dotnet/runtime repo already: https://github.com/dotnet/runtime/issues/23871, https://github.com/dotnet/runtime/issues/14321, https://github.com/dotnet/runtime/issues/17873\r\n\r\n@Tratcher what is the underlying API that would end up calling a new API that allows for checking case sensitivity?",
                                           "updatedAt":  "2020-10-16T23:18:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMDY5NjYxMg==",
                                           "createdAt":  "2020-10-16T23:32:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "Here:\r\nhttps://github.com/dotnet/runtime/blob/75090807267d3a06c9ad806c6d33e773f69675bc/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFileProvider.cs#L243-L265\r\n\r\nCase sensitivity would be a new option on the PhysicalFileProvider, and it would use that when creating a new FileInfo.\r\n\r\nAlso here when listing the contents of directories:\r\nhttps://github.com/dotnet/runtime/blob/75090807267d3a06c9ad806c6d33e773f69675bc/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFileProvider.cs#L307\r\nhttps://github.com/dotnet/runtime/blob/75090807267d3a06c9ad806c6d33e773f69675bc/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/Internal/PhysicalDirectoryContents.cs#L61",
                                           "updatedAt":  "2020-10-16T23:32:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMDY5ODE2OQ==",
                                           "createdAt":  "2020-10-16T23:39:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "Seems like a new API addition for System.IO. \r\n\r\ncc: @carlossanlop @Jozkee ",
                                           "updatedAt":  "2020-10-16T23:39:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HTl-K",
                                           "createdAt":  "2022-07-27T06:31:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamianGuth",
                                           "body":  "Any new information here?",
                                           "updatedAt":  "2022-07-27T06:31:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HVfV6",
                                           "createdAt":  "2022-07-27T14:12:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MarvinKlein1508",
                                           "body":  "We came across this in our application as well. Any update on this would be appreciated",
                                           "updatedAt":  "2022-07-27T14:12:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5He6-I",
                                           "createdAt":  "2022-07-29T13:29:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "0x6DD8",
                                           "body":  "Yeah, any update on this would help a lot...",
                                           "updatedAt":  "2022-07-29T13:29:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HfJmI",
                                           "createdAt":  "2022-07-29T14:09:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@MarvinKlein1508 , @0x6DD8 An implementation of static file provider is about 600 lines of mostly boilerplate code; maybe less in truly modern C#.",
                                           "updatedAt":  "2022-07-29T14:09:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U_bCt",
                                           "createdAt":  "2023-02-10T14:49:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "7702244",
                                           "body":  "After 3 years, there is still no solution for linux?",
                                           "updatedAt":  "2023-02-10T14:49:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U_qUR",
                                           "createdAt":  "2023-02-10T15:32:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Is there a proposal?",
                                           "updatedAt":  "2023-02-10T15:32:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U_riW",
                                           "createdAt":  "2023-02-10T15:35:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@davidfowl : That\u0027s trivial.",
                                           "updatedAt":  "2023-02-10T15:35:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U_vB0",
                                           "createdAt":  "2023-02-10T15:43:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@jhudsoncedaron Did you send a pull request with the solution?",
                                           "updatedAt":  "2023-02-10T15:43:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U_vfl",
                                           "createdAt":  "2023-02-10T15:45:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@davidfowl That\u0027s a different question. I\u0027m not going to lift a finger unless it\u0027s approved first. A proposal is trivial. Getting a PR approved for a request that isn\u0027t approved first is not.",
                                           "updatedAt":  "2023-02-10T15:45:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U_yGY",
                                           "createdAt":  "2023-02-10T15:53:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I guess I missed the proposal. I re-read this a couple of times and I see [this suggestion](https://github.com/dotnet/runtime/issues/35128#issuecomment-659667650) but I don\u0027t know what the end to end proposal is for this feature. How would it work?",
                                           "updatedAt":  "2023-02-10T15:53:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U_ziN",
                                           "createdAt":  "2023-02-10T15:57:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "It\u0027s pretty clear that OP wants to develop on Windows and run the output on Linux. So you run the directory descent piecewise matching case insensitive by matching the output of directory enumeration. It would be easier if I could use my own libraries because System.IO.Directory is pretty bad; but that\u0027s a different problem.",
                                           "updatedAt":  "2023-02-10T15:57:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U_6mA",
                                           "createdAt":  "2023-02-10T16:20:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "So the file provider enumerates the entire directory tree up front? If not, what happens in GetFileInfo?",
                                           "updatedAt":  "2023-02-10T16:20:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U_8MB",
                                           "createdAt":  "2023-02-10T16:25:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "\"So the file provider enumerates the entire directory tree up front?\"\r\n\r\nIf it were my codebase that\u0027s how I\u0027d do it; but that\u0027s because I know I can just not handle updates to the tree while running. If that\u0027s not going to work out for you gotta do the piecewise descent and resolve in GetFileInfo. This isn\u0027t too expensive on the server. samba gets away with it all the time.\r\n\r\nNow that you know what a proposal looks like you can decide whether you want it or not.",
                                           "updatedAt":  "2023-02-10T16:26:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U_-vo",
                                           "createdAt":  "2023-02-10T16:35:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "I\u0027m just trying to understand your idea, so I\u0027m trying to piece it together from the clues you are dropping. So the idea is the enumerate and cache the files in a case insensitive set? Did I miss something? What about file changes?",
                                           "updatedAt":  "2023-02-10T16:35:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5U__dn",
                                           "createdAt":  "2023-02-10T16:37:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "I think you missed nothing.\r\n\r\n\"What about file changes?\" If you have to handle this you can\u0027t cache. I simply don\u0027t have the toolset to know. I solved this problem by case normalization at build time and I am already using my own provider due to a bug that was closed wontfix so there it will remain.\r\n\r\nCase insensitive file open is an exercise that should take an hour to solve.",
                                           "updatedAt":  "2023-02-10T16:39:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VAEPi",
                                           "createdAt":  "2023-02-10T16:54:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "OK, I\u0027ll leave this open, and I\u0027m still confused as to what your concrete proposal is for this.",
                                           "updatedAt":  "2023-02-10T16:54:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VBJQi",
                                           "createdAt":  "2023-02-10T21:24:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC3F5aA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Jaykul",
                                                                               "createdAt":  "2023-03-02T18:23:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jhudsoncedaron",
                                                                               "createdAt":  "2023-03-02T18:28:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Tratcher",
                                           "body":  "It sounds like we\u0027d have to recursively enumerate directories along the path and do a manual case-insensitive search at each level for a match. That can get very expensive per request, especially if the folder structure is deep or folders contain many files. Performance wise this seems untenable for more than a few files without cache + refresh.\r\n\r\nFor what it\u0027s worth, this whole solution could be built into a custom version of PhysicalFileProvider, it wouldn\u0027t require any changes from StaticFiles.",
                                           "updatedAt":  "2023-02-10T21:24:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5WkP5b",
                                           "createdAt":  "2023-03-02T18:27:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Jaykul",
                                           "body":  "What if, instead of \"case insensitive\" you made it transform everything to lowercase?  \r\nThat is: the files needs to all be lowercase (but that\u0027s something \"we\" control).\r\nThen the client/user can use any case they want in the URL, and you just transform it to lowercase before doing a file lookup?",
                                           "updatedAt":  "2023-03-02T18:27:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iMGRl",
                                           "createdAt":  "2023-07-24T07:10:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kevin-osborne",
                                           "body":  "I was able to solve for this issue using https://github.com/XiaoFaye/CaseInsensitiveStaticFile",
                                           "updatedAt":  "2023-07-24T07:10:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p-GjG",
                                           "createdAt":  "2023-10-24T19:25:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "urza",
                                           "body":  "I run into this issue as well, dockerizing asp.net core app that was previously running on Windows Server IIS, now having issues with case sensitive paths in static files, I would welcome some bool option to treat paths for static files as case insensitive.",
                                           "updatedAt":  "2023-10-24T19:25:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fVSYR",
                                           "createdAt":  "2025-02-21T01:53:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kludgy4",
                                           "body":  "Please fix this",
                                           "updatedAt":  "2025-02-21T01:53:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fX0fz",
                                           "createdAt":  "2025-02-21T07:47:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "oiBio",
                                           "body":  "I would love to see a native implementation. For now, we are solving the problem by checking for inconsistent filenames during development. Instead of using `app.UseStaticFiles()`, we use this extension, which throws an exception while debugging.\n\n```\n/// \u003csummary\u003e\n/// Adds static file handling with case sensitivity check in development mode\n/// Gets the default StaticFileOptions and configures them\n/// \u003c/summary\u003e\n/// \u003cparam name=\"app\"\u003e\u003c/param\u003e\n/// \u003creturns\u003e\u003c/returns\u003e\npublic static IApplicationBuilder UseCustomStaticFiles(this IApplicationBuilder app, IWebHostEnvironment env)\n{\n    var option = app.ApplicationServices.GetRequiredService\u003cIOptions\u003cStaticFileOptions\u003e\u003e().Value;\n    var currentFileProvider = option.FileProvider \n                            ?? env.WebRootFileProvider; // This will typically be used... Looks for static files in wwwRoot folder.\n    \n    if (currentFileProvider == null) \n    {\n        throw new InvalidOperationException(\"No file provider was defined.\");\n    }\n\n    option.FileProvider = currentFileProvider;\n\n    if (env.IsDevelopment())\n    {\n        // In development mode, throw an exception if capitalization doesn\u0027t match\n        // This is important because Windows is case-insensitive, but Linux (Docker containers) has problems loading files\n        // Therefore, check if the name/request matches and throw an exception...\n        // Code from: https://stackoverflow.com/questions/50096995/make-asp-net-core-server-kestrel-case-sensitive-on-windows\n        option.OnPrepareResponse = x =\u003e\n        {\n            var fileInfo = x.File.PhysicalPath.AsFile();\n            if (fileInfo?.Exists != true)\n                return;\n                \n            var requested = x.Context.Request.Path.Value;\n            if (requested.IsNullOrEmpty())\n                return;\n\n            if (Path.GetFileName(requested).Length != fileInfo.Name.Length)\n            {\n                // This case occasionally occurs in the development environment in connection with Scoped CSS.\n                // Request is for Component.css but fileInfo returns Component.\u003cRANDOMBUILDNUMBER\u003e.css\n                // In such a case, simply don\u0027t check for matching cases\n                return;\n            }\n\n            if (requested.StartsWith(\"/_content/\"))\n            {\n                var index = requested.IndexOf(\u0027/\u0027, 10);\n                requested = requested.Substring(index);\n            }\n\n            var onDisk = fileInfo.GetExactFullName().Replace(\"\\\\\", \"/\");\n            if (!onDisk.EndsWith(requested))\n            {\n                throw new Exception(\"The requested file has incorrect casing and will fail on Linux servers.\" +\n                    Environment.NewLine + \"Requested:\" + requested + Environment.NewLine +\n                    \"On disk: \" + onDisk.Substring(onDisk.Length - requested.Length, requested.Length));\n            }\n        };\n    }\n\n    return app.UseStaticFiles(option);\n}\n```",
                                           "updatedAt":  "2025-02-21T07:47:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6raLUe",
                                           "createdAt":  "2025-05-13T09:38:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEazB0g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "fgauna12",
                                                                               "createdAt":  "2025-07-16T14:34:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jerbersoft",
                                           "body":  "I also have this issue right now. I am developing mainly on a Windows machine and deploying to a docker container running Linux. The static files get served correctly in my local machines (Windows, WSL2, OSX) but when deployed to a docker container running Linux, in AWS, the static file URLs must be case-sensitive. We had a lot of hair-pulling done but didn\u0027t help.",
                                           "updatedAt":  "2025-05-13T09:38:54Z"
                                       }
                                   ],
                         "totalCount":  31
                     },
        "title":  "UseStaticFiles should provide a case insensitive option in StaticFileOptions",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43900",
        "createdAt":  "2020-10-27T18:01:55Z",
        "number":  43900,
        "author":  "carlossanlop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-12T11:58:31Z",
        "body":  "Area owners: @maryamariyan @carlossanlop @Jozkee \r\n\r\nThe APIs in the list below are missing some or all of their documentation. Please add the missing documentation directly in triple slash comments in source. We will make sure it gets ported to dotnet-api-docs after it\u0027s merged.\r\n\r\nMake sure to follow the documentation guidelines defined in the dotnet-api-docs wiki:\r\nhttps://github.com/dotnet/dotnet-api-docs/wiki\r\n\r\nAlso please add me as a PR reviewer.\r\n\r\nCommunity contributions are welcome.\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eMicrosoft.Extensions.FileProviders\u003c/summary\u003e\r\n\r\n  DocId | Summary | Parameters | TypeParameters | ReturnValue | Source File Path | Docs URL\r\n  -- | -- | -- | -- | -- | -- | --\r\n  Microsoft.Extensions.FileProviders.Physical namespace | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/ns-Microsoft.Extensions.FileProviders.Physical.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileProviders.Physical?branch=master\r\n  Microsoft.Extensions.FileProviders.Composite namespace | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/ns-Microsoft.Extensions.FileProviders.Composite.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileProviders.Composite?branch=master\r\n  Microsoft.Extensions.FileProviders namespace | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/ns-Microsoft.Extensions.FileProviders.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileProviders?branch=master\r\n  M:Microsoft.Extensions.FileProviders.NullFileProvider.#ctor | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/Microsoft.Extensions.FileProviders/NullFileProvider.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileProviders.NullFileProvider.-ctor?branch=master\r\n  M:Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.#ctor | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/Microsoft.Extensions.FileProviders/NotFoundDirectoryContents.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileProviders.NotFoundDirectoryContents.-ctor?branch=master\r\n  M:Microsoft.Extensions.FileProviders.FileSystemInfoHelper.#ctor | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/Microsoft.Extensions.FileProviders/FileSystemInfoHelper.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileProviders.FileSystemInfoHelper.-ctor?branch=master\r\n\r\n\u003c/details\u003e\r\n\r\nNotes:\r\n\r\n- The namespaces need to be documented directly in dotnet-api-docs.\r\n- Some of the APIs are obsolete, so I\u0027ll let area owners decide if they want to still document them or skip them. If you opt for documenting them, please do it directly in dotnet-api-docs.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtrDd9Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMjY2MDU2OA==",
                                           "createdAt":  "2020-11-05T21:38:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-11-05T21:38:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4Mjg0NDg1OQ==",
                                           "createdAt":  "2021-02-21T11:49:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheMaximum",
                                           "body":  "I\u0027m looking to add comments to the mentioned constructors, however at the moment they do not exist. I added them in  https://github.com/TheMaximum/runtime/commit/f8fa633ef397f95a8f8bcd4ed62f47a6cead87c4, however I\u0027ve got a few questions about it.\r\n\r\nIn my commit, I\u0027ve created a private constructor for ``NotFoundDirectoryContents``, as it is used as a Singleton. I couldn\u0027t find places where it is constructed except for the ``Singleton`` property in the class itself. Is this the right course of action, or should the class be allowed to be constructed elsewhere (bypassing the singleton), @maryamariyan?\r\n\r\nhttps://github.com/dotnet/runtime/blob/a350bc6e0896d2869e4028fdafb94588e3fe0867/src/libraries/Microsoft.Extensions.FileProviders.Abstractions/src/NotFoundDirectoryContents.cs#L10-L18\r\n\r\nAdding the constructor for ``NullFileProvider`` seems pretty straight-forward (?).\r\n\r\n``FileSystemInfoHelper`` is a static class and as such cannot have instance constructors, could you indicate why it shows up in the documentation and how to proceed, @carlossanlop?",
                                           "updatedAt":  "2021-02-21T20:40:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MjkyNjg3MQ==",
                                           "createdAt":  "2021-02-21T21:08:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBgzs2Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TheMaximum",
                                                                               "createdAt":  "2021-02-21T21:23:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "The FileSystemInfoHelper doc page says it applies only to \".NET Platform Extensions\t1.0, 1.1\". The class is public and not static in the following, which I think is the 1.1 source code: \u003chttps://github.com/aspnet/FileSystem/blob/rel/1.1.0/src/Microsoft.Extensions.FileProviders.Physical/FileSystemInfoHelper.cs\u003e\n\nI guess these old branches aren\u0027t worth servicing for the sake of documenting a class that is not even public nowadays.",
                                           "updatedAt":  "2021-02-21T21:08:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MjkyOTU3OQ==",
                                           "createdAt":  "2021-02-21T21:26:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheMaximum",
                                           "body":  "I hadn\u0027t noticed it just being 1.0 and 1.1, I just looked into the code... thanks @KalleOlaviNiemitalo!\r\nDon\u0027t know if you want to add it in for the older version (and if so, where should that be done), @carlossanlop ?",
                                           "updatedAt":  "2021-02-21T21:26:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc62sN31",
                                           "createdAt":  "2025-07-12T10:35:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "_In reply to \u003chttps://github.com/dotnet/runtime/issues/43900#issuecomment-782844859\u003e:_\n\nThe [NotFoundDirectoryContents source code](https://github.com/dotnet/runtime/blob/5535e31a712343a63f5d7d796cd874e563e5ac14/src/libraries/Microsoft.Extensions.FileProviders.Abstractions/src/NotFoundDirectoryContents.cs) does not define any constructors, and that causes the C# compiler to generate a public parameterless constructor, which is also shown in the source code for the reference assembly:\n\n\u003chttps://github.com/dotnet/runtime/blob/5535e31a712343a63f5d7d796cd874e563e5ac14/src/libraries/Microsoft.Extensions.FileProviders.Abstractions/ref/Microsoft.Extensions.FileProviders.Abstractions.cs#L31\u003e\n\nTo preserve the API when adding XML documentation for this constructor, it should be defined as public.\n\nMaking the constructor private would be a breaking API change.  AFAIK, there is no API proposal for such, and I don\u0027t think one would be approved.",
                                           "updatedAt":  "2025-07-12T11:58:31Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "API documentation debt - Microsoft.Extensions.FileProvider",
        "labels":  [
                       "documentation",
                       "help wanted",
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43908",
        "createdAt":  "2020-10-27T19:14:28Z",
        "number":  43908,
        "author":  "carlossanlop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-18T14:47:31Z",
        "body":  "Area owners: @maryamariyan @carlossanlop @Jozkee \r\n\r\nThe APIs in the list below are missing some or all of their documentation. Please add the missing documentation directly in triple slash comments in source. We will make sure it gets ported to dotnet-api-docs after it\u0027s merged.\r\n\r\nMake sure to follow the documentation guidelines defined in the dotnet-api-docs wiki:\r\nhttps://github.com/dotnet/dotnet-api-docs/wiki\r\n\r\nAlso please add me as a PR reviewer.\r\n\r\nCommunity contributions are welcome.\r\n\r\n\u003cdetails\u003e\r\n  \u003csummary\u003eMicrosoft.Extensions.FileSystemGlobbing\u003c/summary\u003e\r\n\r\n  DocId | Summary | Parameters | TypeParameters | ReturnValue | Source File Path | Docs URL\r\n  -- | -- | -- | -- | -- | -- | -- \r\n  Microsoft.Extensions.FileSystemGlobbing namespace | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/ns-Microsoft.Extensions.FileSystemGlobbing.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileSystemGlobbing?branch=master\r\n  Microsoft.Extensions.FileSystemGlobbing.Abstractions namespace | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/ns-Microsoft.Extensions.FileSystemGlobbing.Abstractions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileSystemGlobbing.Abstractions?branch=master\r\n  M:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase.#ctor | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/Microsoft.Extensions.FileSystemGlobbing.Abstractions/DirectoryInfoBase.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoBase.-ctor?branch=master\r\n  M:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper.EnumerateFileSystemInfos | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/Microsoft.Extensions.FileSystemGlobbing.Abstractions/DirectoryInfoWrapper.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper.EnumerateFileSystemInfos?branch=master\r\n  M:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper.GetFile(System.String) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/Microsoft.Extensions.FileSystemGlobbing.Abstractions/DirectoryInfoWrapper.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper.GetFile?branch=master\r\n  M:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoBase.#ctor | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/Microsoft.Extensions.FileSystemGlobbing.Abstractions/FileInfoBase.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileInfoBase.-ctor?branch=master\r\n  M:Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileSystemInfoBase.#ctor | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/Microsoft.Extensions.FileSystemGlobbing.Abstractions/FileSystemInfoBase.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileSystemGlobbing.Abstractions.FileSystemInfoBase.-ctor?branch=master\r\n  M:Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.EnumerateFileSystemInfos | Missing | NA | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/Microsoft.Extensions.FileSystemGlobbing/InMemoryDirectoryInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.EnumerateFileSystemInfos?branch=master\r\n  M:Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.GetDirectory(System.String) | Missing | Missing | NA | Missing | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/Microsoft.Extensions.FileSystemGlobbing/InMemoryDirectoryInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.GetDirectory?branch=master\r\n  P:Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper.Name | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/Microsoft.Extensions.FileSystemGlobbing.Abstractions/DirectoryInfoWrapper.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper.Name?branch=master\r\n  P:Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.FullName | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/Microsoft.Extensions.FileSystemGlobbing/InMemoryDirectoryInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.FullName?branch=master\r\n  P:Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.Name | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/Microsoft.Extensions.FileSystemGlobbing/InMemoryDirectoryInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.Name?branch=master\r\n  P:Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.ParentDirectory | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/Microsoft.Extensions.FileSystemGlobbing/InMemoryDirectoryInfo.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.ParentDirectory?branch=master\r\n  T:Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions | Missing | NA | NA | NA | https://github.com/dotnet/dotnet-api-docs/blob/master/xml/Microsoft.Extensions.FileSystemGlobbing/MatcherExtensions.xml | https://review.docs.microsoft.com/en-us/dotnet/api/Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions?branch=master\r\n\r\n\u003c/details\u003e\r\n\r\nNotes:\r\n\r\n- The namespaces need to be documented directly in dotnet-api-docs.\r\n- Some of the APIs are obsolete, so I\u0027ll let area owners decide if they want to still document them or skip them. If you opt for documenting them, please do it directly in dotnet-api-docs.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONPMERg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMjY2MDg0MA==",
                                           "createdAt":  "2020-11-05T21:38:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-11-05T21:38:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc408wRG",
                                           "createdAt":  "2021-07-28T14:10:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "I\u0027ve moved it to 7.0 as I simply don\u0027t see us having time to finish it for 6.0. Please feel free to send a PR and prove me wrong ;)",
                                           "updatedAt":  "2021-07-28T14:10:50Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "API documentation debt - Microsoft.Extensions.FileSystemGlobbing",
        "labels":  [
                       "documentation",
                       "help wanted",
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44673",
        "createdAt":  "2020-11-14T00:22:20Z",
        "number":  44673,
        "author":  "ericstj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCaCqrg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hlovdal",
                                            "createdAt":  "2022-04-27T09:29:49Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-11-22T19:23:12Z",
        "body":  "### Description\r\n\r\nWhen disposing a PhysicalFilesWatcher or PhysicalFileProvider, the encapsulated Timer will be disposed but Dispose may return while the Timer\u0027s handler is still running.  The result is that events may occur from these types after they\u0027ve been disposed. \r\n\r\nIn order to enable people to wait for the timer to be completely suspended we may want to add an IAsyncDisposable implementation to call the Timer\u0027s DisposeAsync, which waits for the Timer to quiesce.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLGKurw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNzA5NzU1NQ==",
                                           "createdAt":  "2020-11-14T00:22:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging @maryamariyan as subscribers to this area.\nSee info in area-owners.md if you want to be subscribed.\u003cdetails\u003e\n  \u003csummary\u003eIssue Details\u003c/summary\u003e\n  \u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eDescription:\u003c/th\u003e\n    \u003ctd\u003e\n\n### Description\r\n\r\nWhen disposing a PhysicalFilesWatcher or PhysicalFileProvider, the encapsulated Timer will be disposed but Dispose may return while the Timer\u0027s handler is still running.  The result is that events may occur from these types after they\u0027ve been disposed. \r\n\r\nIn order to enable people to wait for the timer to be completely suspended we may want to add an IAsyncDisposable implementation to call the Timer\u0027s DisposeAsync, which waits for the Timer to quiesce.\r\n\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eericstj\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-FileSystem`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003c/table\u003e\n  \u003c/details\u003e",
                                           "updatedAt":  "2020-11-14T00:22:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MDI3NDM4Mw==",
                                           "createdAt":  "2020-12-08T00:51:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marusyk",
                                           "body":  "I\u0027ll try to prepare a PR for this",
                                           "updatedAt":  "2020-12-08T00:51:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MjE1NzMzMw==",
                                           "createdAt":  "2020-12-10T00:44:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marusyk",
                                           "body":  "The Microsoft.Extensions.FileProviders.Physical project is target to `netstandard2.0;net461`\r\nThe ` IAsyncDisposable` is only available in .NET Standard 2.1!\r\nCan we point this to 2.1?",
                                           "updatedAt":  "2020-12-10T00:44:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MjcyNDEzMg==",
                                           "createdAt":  "2020-12-10T18:54:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maryamariyan",
                                           "body":  "\u003e The IAsyncDisposable is only available in .NET Standard 2.1!\r\n\r\nFor ns2.0 build, you could use the [Microsoft.Bcl.AsyncInterfaces](https://www.nuget.org/packages/Microsoft.Bcl.AsyncInterfaces/) package.\r\n\r\ncc: @safern ",
                                           "updatedAt":  "2020-12-10T18:55:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MzkyNjQ3OA==",
                                           "createdAt":  "2020-12-13T00:34:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Marusyk",
                                           "body":  "@maryamariyan but Timer from `netstandard2.0` doesn\u0027t contain `DisposeAsync` method",
                                           "updatedAt":  "2020-12-13T00:34:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NDY2NDc1MQ==",
                                           "createdAt":  "2020-12-14T19:38:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBZ8nsg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Marusyk",
                                                                               "createdAt":  "2020-12-14T23:22:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "safern",
                                           "body":  "@Marusyk then it seems like we can add a `netstandard2.1` target to the project and if def the code? ",
                                           "updatedAt":  "2020-12-14T19:38:40Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Add IAsyncDisposable to PhysicalFilesWatcher and PhysicalFileProvider",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48602",
        "createdAt":  "2021-02-22T16:54:51Z",
        "number":  48602,
        "author":  "ericstj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5S_Bw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hlovdal",
                                            "createdAt":  "2022-04-27T09:23:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bart-vmware",
                                            "createdAt":  "2024-07-11T12:47:57Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-07-09T07:10:41Z",
        "body":  "### Description\r\n\r\nRelated to https://github.com/dotnet/runtime/issues/17111\r\n\r\nWe have a polling implementation as a mode of https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.fileproviders.physical.physicalfileswatcher?view=dotnet-plat-ext-5.0 when pollForChanges is set true.\r\n\r\nFor this to actually be useful (and raise events like a normal file watcher) you also need  to set `UseActivePolling`: \r\nhttps://github.com/dotnet/runtime/blob/8a52f1e948b6f22f418817ec1068f07b8dae2aa5/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFilesWatcher.cs#L109\r\n\r\nWhich can only be set by the `UseActivePolling` in the PhysicalFileProvider:\r\nhttps://github.com/dotnet/runtime/blob/8a52f1e948b6f22f418817ec1068f07b8dae2aa5/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFileProvider.cs#L163-L169\r\n\r\nIn addition the PhysicalFilesWatcher requires things like a `FileSystemWatcher` which is irrelevant when polling, fails to watch full paths which is also an unnecessary limitation if you don\u0027t have a \"watch\" tied to a root path, and is coupled to `Physical` implementation, which it need not be, and could interact through the FileSystem abstractions themselves (either `IFileProvider`, or `IFileInfo`/`IDirectoryContents`)\r\n\r\nIn addition to this, the current `PollingFileChangeToken` are `PollingWildCardChangeToken` are somewhat crippled as they can only poll and cannnot be easily made to raise events (we kept everything internal).\r\n\r\nRelated: https://github.com/dotnet/runtime/issues/36091",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLrODJw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4MzUxNjQ1NQ==",
                                           "createdAt":  "2021-02-22T16:54:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nRelated to https://github.com/dotnet/runtime/issues/17111\r\n\r\nWe have a polling implementation as a mode of https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.fileproviders.physical.physicalfileswatcher?view=dotnet-plat-ext-5.0 when pollForChanges is set true.\r\n\r\nFor this to actually be useful (and raise events like a normal file watcher) you also need  to set `UseActivePolling`: \r\nhttps://github.com/dotnet/runtime/blob/8a52f1e948b6f22f418817ec1068f07b8dae2aa5/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFilesWatcher.cs#L109\r\n\r\nWhich can only be set by the `UseActivePolling` in the PhysicalFileProvider:\r\nhttps://github.com/dotnet/runtime/blob/8a52f1e948b6f22f418817ec1068f07b8dae2aa5/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFileProvider.cs#L163-L169\r\n\r\nIn addition the PhysicalFilesWatcher requires things like a `FileSystemWatcher` which is irrelevant when polling, fails to watch full paths which is also an unnecessary limitation if you don\u0027t have a \"watch\" tied to a root path, and is coupled to `Physical` implementation, which it need not be, and could interact through the FileSystem abstractions themselves (either `IFileProvider`, or `IFileInfo`/`IDirectoryContents`)\r\n\r\nIn addition to this, the current `PollingFileChangeToken` are `PollingWildCardChangeToken` are somewhat crippled as they can only poll and cannnot be easily made to raise events (we kept everything internal).\r\n\r\nRelated: https://github.com/dotnet/runtime/issues/36091\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eericstj\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-FileSystem`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-22T16:54:57Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Split polling functionality from PhysicalFilesWatcher into a separate type",
        "labels":  [
                       "help wanted",
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53715",
        "createdAt":  "2021-06-03T18:23:53Z",
        "number":  53715,
        "author":  "ipostanogov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-12-04T20:52:44Z",
        "body":  "\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003e\r\n\r\n### Describe the bug\r\nUsing `Host.CreateDefaultBuilder` while having many files with slow metadata access leads to the slow startup. \r\n\r\n### To Reproduce\r\n\u003c!--\r\nWe ❤ code! Point us to a minimalistic repro project hosted in a GitHub repo.\r\nFor a repro project, create a new ASP.NET Core project using the template of your your choice, apply the minimum required code to result in the issue you\u0027re observing.\r\n\r\nWe will close this issue if:\r\n- the repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- if we will not be able to repro the behavior you\u0027re reporting\r\n--\u003e\r\n\r\nThe easiest way to show the problem is to use a remote filesystem, e. g. s3fs.\r\n\r\n1. Run a new minio server with default credentials\r\n```\r\ndocker run -p 9000:9000 minio/minio server /data\r\n```\r\n2. Create an auth file\r\n```\r\necho minioadmin:minioadmin \u003e ~/.passwd-s3fs\r\nchmod 600 ~/.passwd-s3fs\r\n```\r\n3. Mount s3fs\r\n```\r\nmkdir mount\r\ns3fs -d -f minioadmin $(pwd)/mount -o passwd_file=~.passwd-s3fs -o allow_other -o url=http://127.0.0.1:9000 -o use_path_request_style\r\n```\r\n4. Add some data\r\n```\r\ncd mount\r\ndd if=/dev/random bs=102400 count=4000 | split -b 102400 -d -a 5\r\ncd ..\r\n```\r\n5. Run the aspnet-sample\r\n```\r\ndocker run -it --rm --mount type=bind,source=$(pwd)/mount,target=/app/data --name aspnetcore_sample mcr.microsoft.com/dotnet/samples:aspnetapp\r\n```\r\n6. Sample starts slowly. Looking at the output from s3fs running in foreground, one can see requests for the metadata for all files. \r\n\r\nHere is the hottest CallTree from the `dotnet-trace`\r\n```\r\nName\r\n ROOT\r\n+ Process64 Process(1) (1) Args: \r\n + (Non-Activities)\r\n  + Threads\r\n   + Thread (1)\r\n    + module REDACTED \u003c\u003cREDACTED!Program.Main\u003e\u003e\r\n     + module Microsoft.Extensions.Hosting \u003c\u003cMicrosoft.Extensions.Hosting!HostBuilder.Build\u003e\u003e\r\n      + module Microsoft.Extensions.Configuration \u003c\u003cMicrosoft.Extensions.Configuration!ConfigurationBuilder.Build\u003e\u003e\r\n       + module Microsoft.Extensions.Configuration.Json \u003c\u003cMicrosoft.Extensions.Configuration.Json!JsonConfigurationSource.Build\u003e\u003e\r\n        + module Microsoft.Extensions.Configuration.FileExtensions \u003c\u003cMicrosoft.Extensions.Configuration.FileExtensions!Microsoft.Extensions.Configuration.FileConfigurationProvider..ctor(class Microsoft.Extensions.Configuration.FileConfigurationSource)\u003e\u003e\r\n         + module Microsoft.Extensions.Primitives \u003c\u003cMicrosoft.Extensions.Primitives!ChangeToken.OnChange\u003e\u003e\r\n          + module Microsoft.Extensions.Configuration.FileExtensions \u003c\u003cMicrosoft.Extensions.Configuration.FileExtensions!Microsoft.Extensions.Configuration.FileConfigurationProvider.\u003c.ctor\u003eb__1_0()\u003e\u003e\r\n           + module Microsoft.Extensions.FileProviders.Physical \u003c\u003cMicrosoft.Extensions.FileProviders.Physical!PhysicalFileProvider.Watch\u003e\u003e\r\n            + module System.IO.FileSystem.Watcher \u003c\u003cSystem.IO.FileSystem.Watcher!FileSystemWatcher.set_EnableRaisingEvents\u003e\u003e\r\n             + module System.IO.FileSystem \u003c\u003cSystem.IO.FileSystem!Directory.InternalEnumeratePaths\u003e\u003e\r\n              + CPU_TIME\r\n\r\n```\r\n\r\n\u003c!--### Exceptions (if any)\r\nInclude the exception you get when facing this issue\r\n\r\n### Further technical details\r\n- ASP.NET Core version\r\n- Include the output of `dotnet --info`\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version\r\n--\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObaPJ2w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDQ0OTkyNA==",
                                           "createdAt":  "2021-06-04T07:44:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @safern\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003e\r\n\r\n### Describe the bug\r\nUsing `Host.CreateDefaultBuilder` while having many files with slow metadata access leads to the slow startup. \r\n\r\n### To Reproduce\r\n\u003c!--\r\nWe ❤ code! Point us to a minimalistic repro project hosted in a GitHub repo.\r\nFor a repro project, create a new ASP.NET Core project using the template of your your choice, apply the minimum required code to result in the issue you\u0027re observing.\r\n\r\nWe will close this issue if:\r\n- the repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- if we will not be able to repro the behavior you\u0027re reporting\r\n--\u003e\r\n\r\nThe easiest way to show the problem is to use a remote filesystem, e. g. s3fs.\r\n\r\n1. Run a new minio server with default credentials\r\n```\r\ndocker run -p 9000:9000 minio/minio server /data\r\n```\r\n2. Create an auth file\r\n```\r\necho minioadmin:minioadmin \u003e ~/.passwd-s3fs\r\nchmod 600 ~/.passwd-s3fs\r\n```\r\n3. Mount s3fs\r\n```\r\nmkdir mount\r\ns3fs -d -f minioadmin $(pwd)/mount -o passwd_file=~.passwd-s3fs -o allow_other -o url=http://127.0.0.1:9000 -o use_path_request_style\r\n```\r\n4. Add some data\r\n```\r\ncd mount\r\ndd if=/dev/random bs=102400 count=4000 | split -b 102400 -d -a 5\r\ncd ..\r\n```\r\n5. Run the aspnet-sample\r\n```\r\ndocker run -it --rm --mount type=bind,source=$(pwd)/mount,target=/app/data --name aspnetcore_sample mcr.microsoft.com/dotnet/samples:aspnetapp\r\n```\r\n6. Sample starts slowly. Looking at the output from s3fs running in foreground, one can see requests for the metadata for all files. \r\n\r\nHere is the hottest CallTree from the `dotnet-trace`\r\n```\r\nName\r\n ROOT\r\n+ Process64 Process(1) (1) Args: \r\n + (Non-Activities)\r\n  + Threads\r\n   + Thread (1)\r\n    + module REDACTED \u003c\u003cREDACTED!Program.Main\u003e\u003e\r\n     + module Microsoft.Extensions.Hosting \u003c\u003cMicrosoft.Extensions.Hosting!HostBuilder.Build\u003e\u003e\r\n      + module Microsoft.Extensions.Configuration \u003c\u003cMicrosoft.Extensions.Configuration!ConfigurationBuilder.Build\u003e\u003e\r\n       + module Microsoft.Extensions.Configuration.Json \u003c\u003cMicrosoft.Extensions.Configuration.Json!JsonConfigurationSource.Build\u003e\u003e\r\n        + module Microsoft.Extensions.Configuration.FileExtensions \u003c\u003cMicrosoft.Extensions.Configuration.FileExtensions!Microsoft.Extensions.Configuration.FileConfigurationProvider..ctor(class Microsoft.Extensions.Configuration.FileConfigurationSource)\u003e\u003e\r\n         + module Microsoft.Extensions.Primitives \u003c\u003cMicrosoft.Extensions.Primitives!ChangeToken.OnChange\u003e\u003e\r\n          + module Microsoft.Extensions.Configuration.FileExtensions \u003c\u003cMicrosoft.Extensions.Configuration.FileExtensions!Microsoft.Extensions.Configuration.FileConfigurationProvider.\u003c.ctor\u003eb__1_0()\u003e\u003e\r\n           + module Microsoft.Extensions.FileProviders.Physical \u003c\u003cMicrosoft.Extensions.FileProviders.Physical!PhysicalFileProvider.Watch\u003e\u003e\r\n            + module System.IO.FileSystem.Watcher \u003c\u003cSystem.IO.FileSystem.Watcher!FileSystemWatcher.set_EnableRaisingEvents\u003e\u003e\r\n             + module System.IO.FileSystem \u003c\u003cSystem.IO.FileSystem!Directory.InternalEnumeratePaths\u003e\u003e\r\n              + CPU_TIME\r\n\r\n```\r\n\r\n\u003c!--### Exceptions (if any)\r\nInclude the exception you get when facing this issue\r\n\r\n### Further technical details\r\n- ASP.NET Core version\r\n- Include the output of `dotnet --info`\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version\r\n--\u003e\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eipostanogov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Configuration`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-04T07:44:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDQ1NTgzNQ==",
                                           "createdAt":  "2021-06-04T07:52:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBtiNTQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maryamariyan",
                                                                               "createdAt":  "2021-06-05T20:52:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "This is because the `PhysicalFileProvider` includes subdirectories which causes an enumeration. Try setting DOTNET_USE_POLLING_FILE_WATCHER=1, that should help things (especially in a container).\r\n\r\nI wonder if we can lazily enable sub directories watching based on the paths being watched.",
                                           "updatedAt":  "2021-06-04T07:52:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NDQ4NTcyOQ==",
                                           "createdAt":  "2021-06-04T08:38:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ipostanogov",
                                           "body":  "Maybe `AddJsonFile` should pass the original `path` as a [Filter](https://docs.microsoft.com/en-us/dotnet/api/system.io.filesystemwatcher.filter?view=net-5.0#remarks) value?\r\n\r\n\u003e To watch a specific file, set the Filter property to the file name.\r\n\r\nNote: haven\u0027t checked whether it would prevent the enumeration. Maybe it is just an event filter. ",
                                           "updatedAt":  "2021-06-04T08:38:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5to8iB",
                                           "createdAt":  "2023-12-04T20:47:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODOdvOw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mjrousos",
                                                                               "createdAt":  "2023-12-04T21:56:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "The problem here is that `PhysicalFileWatcher` hardcodes `IncludeSubDirectories`: \r\nhttps://github.com/dotnet/runtime/blob/99877a1c6f255de7762f425bb12ad4d9749dcf96/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFilesWatcher.cs#L99\r\n\r\nFilters don\u0027t help as those are only applied after the watcher is first set up.\r\n\r\nThere\u0027s no option plumbed from `PhysicalFileProvider`|`PhysicalFileWatcher` that tells the watcher not to watch subdirectories.\r\n\r\nThe usage of the file provider here would benefit from some functionality to tell it *not* to include subdirectories:\r\nhttps://github.com/dotnet/runtime/blob/99877a1c6f255de7762f425bb12ad4d9749dcf96/src/libraries/Microsoft.Extensions.Configuration.FileExtensions/src/FileConfigurationSource.cs#L92-L97\r\n\r\nBut no API exists on `PhysicalFileProvider`.  We should expose the ability to request a non-recursive watcher in Microsoft.Extensions.FileProviders.Physical -- then use it here in configuration.",
                                           "updatedAt":  "2023-12-04T20:52:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5to8nb",
                                           "createdAt":  "2023-12-04T20:47:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\r\n\r\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\r\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\r\n\r\n--\u003e\r\n\r\n### Describe the bug\r\nUsing `Host.CreateDefaultBuilder` while having many files with slow metadata access leads to the slow startup. \r\n\r\n### To Reproduce\r\n\u003c!--\r\nWe ❤ code! Point us to a minimalistic repro project hosted in a GitHub repo.\r\nFor a repro project, create a new ASP.NET Core project using the template of your your choice, apply the minimum required code to result in the issue you\u0027re observing.\r\n\r\nWe will close this issue if:\r\n- the repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\r\n- if we will not be able to repro the behavior you\u0027re reporting\r\n--\u003e\r\n\r\nThe easiest way to show the problem is to use a remote filesystem, e. g. s3fs.\r\n\r\n1. Run a new minio server with default credentials\r\n```\r\ndocker run -p 9000:9000 minio/minio server /data\r\n```\r\n2. Create an auth file\r\n```\r\necho minioadmin:minioadmin \u003e ~/.passwd-s3fs\r\nchmod 600 ~/.passwd-s3fs\r\n```\r\n3. Mount s3fs\r\n```\r\nmkdir mount\r\ns3fs -d -f minioadmin $(pwd)/mount -o passwd_file=~.passwd-s3fs -o allow_other -o url=http://127.0.0.1:9000 -o use_path_request_style\r\n```\r\n4. Add some data\r\n```\r\ncd mount\r\ndd if=/dev/random bs=102400 count=4000 | split -b 102400 -d -a 5\r\ncd ..\r\n```\r\n5. Run the aspnet-sample\r\n```\r\ndocker run -it --rm --mount type=bind,source=$(pwd)/mount,target=/app/data --name aspnetcore_sample mcr.microsoft.com/dotnet/samples:aspnetapp\r\n```\r\n6. Sample starts slowly. Looking at the output from s3fs running in foreground, one can see requests for the metadata for all files. \r\n\r\nHere is the hottest CallTree from the `dotnet-trace`\r\n```\r\nName\r\n ROOT\r\n+ Process64 Process(1) (1) Args: \r\n + (Non-Activities)\r\n  + Threads\r\n   + Thread (1)\r\n    + module REDACTED \u003c\u003cREDACTED!Program.Main\u003e\u003e\r\n     + module Microsoft.Extensions.Hosting \u003c\u003cMicrosoft.Extensions.Hosting!HostBuilder.Build\u003e\u003e\r\n      + module Microsoft.Extensions.Configuration \u003c\u003cMicrosoft.Extensions.Configuration!ConfigurationBuilder.Build\u003e\u003e\r\n       + module Microsoft.Extensions.Configuration.Json \u003c\u003cMicrosoft.Extensions.Configuration.Json!JsonConfigurationSource.Build\u003e\u003e\r\n        + module Microsoft.Extensions.Configuration.FileExtensions \u003c\u003cMicrosoft.Extensions.Configuration.FileExtensions!Microsoft.Extensions.Configuration.FileConfigurationProvider..ctor(class Microsoft.Extensions.Configuration.FileConfigurationSource)\u003e\u003e\r\n         + module Microsoft.Extensions.Primitives \u003c\u003cMicrosoft.Extensions.Primitives!ChangeToken.OnChange\u003e\u003e\r\n          + module Microsoft.Extensions.Configuration.FileExtensions \u003c\u003cMicrosoft.Extensions.Configuration.FileExtensions!Microsoft.Extensions.Configuration.FileConfigurationProvider.\u003c.ctor\u003eb__1_0()\u003e\u003e\r\n           + module Microsoft.Extensions.FileProviders.Physical \u003c\u003cMicrosoft.Extensions.FileProviders.Physical!PhysicalFileProvider.Watch\u003e\u003e\r\n            + module System.IO.FileSystem.Watcher \u003c\u003cSystem.IO.FileSystem.Watcher!FileSystemWatcher.set_EnableRaisingEvents\u003e\u003e\r\n             + module System.IO.FileSystem \u003c\u003cSystem.IO.FileSystem!Directory.InternalEnumeratePaths\u003e\u003e\r\n              + CPU_TIME\r\n\r\n```\r\n\r\n\u003c!--### Exceptions (if any)\r\nInclude the exception you get when facing this issue\r\n\r\n### Further technical details\r\n- ASP.NET Core version\r\n- Include the output of `dotnet --info`\r\n- The IDE (VS / VS Code/ VS4Mac) you\u0027re running on, and its version\r\n--\u003e\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eipostanogov\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-FileSystem`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-04T20:47:52Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "config.AddJsonFile(reloadOnChange: true) leads to unwanted file enumeration",
        "labels":  [
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57518",
        "createdAt":  "2021-08-16T18:42:07Z",
        "number":  57518,
        "author":  "maxkoshevoi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-17T14:40:53Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\nThis is a blanket issue for all `!` operations that were added in https://github.com/dotnet/runtime/pull/57409\r\nThey should be removed or reviewed.\r\n\r\nLeft to be fixed/reviewed:\r\n- [ ] `PhysicalFileProvider.FileWatcher` `LazyInitializer.EnsureInitialized`. Possible fix - remove `_fileWatcherInitialized` field.\r\n- [ ] `PollingFileChangeToken` and `PollingWildCardChangeToken` `IChangeToken.RegisterChangeCallback`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONaoG5A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41oNun",
                                           "createdAt":  "2021-08-16T18:42:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-08-16T18:42:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41qgbk",
                                           "createdAt":  "2021-08-17T14:13:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @maryamariyan, @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n* What behavior are you seeing, and what behavior would you expect?\r\n  --\u003e\r\n\r\nThis is a blanket issue for all `!` operations that were added in https://github.com/dotnet/runtime/pull/57409\r\nThey should be removed or reviewed.\r\n\r\nLeft to be fixed/reviewed:\r\n- [ ] `PhysicalFileProvider.FileWatcher` `LazyInitializer.EnsureInitialized`. Possible fix - remove `_fileWatcherInitialized` field.\r\n- [ ] `PollingFileChangeToken` and `PollingWildCardChangeToken` `IChangeToken.RegisterChangeCallback`\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emaxkoshevoi\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-FileSystem`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-17T14:13:30Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Remove `!` from `Microsoft.Extensions.FileProviders.Physical`",
        "labels":  [
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/62333",
        "createdAt":  "2021-12-03T14:34:31Z",
        "number":  62333,
        "author":  "Danielku15",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODABUKw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "np-13",
                                            "createdAt":  "2022-01-19T12:24:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jzebedee",
                                            "createdAt":  "2023-05-24T21:32:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "petrzjunior",
                                            "createdAt":  "2023-07-17T14:52:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SWB54",
                                            "createdAt":  "2024-09-17T22:03:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "carkar",
                                            "createdAt":  "2025-03-13T00:20:30Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-01-22T17:26:37Z",
        "body":  "### Description\n\nFileSystemGlobbing only works with relative paths, if you supply absolute paths, they are not matched. This is problematic if you allow users to supply files through commandline to your application. As a user you would expect you can specify absolute paths, relative paths (both optionally with globbing). \n\n### Reproduction Steps\n\n```cs\r\nvar dllMatcher = new Matcher();\r\ndllMatcher.AddInclude(\"C:\\\\Windows\\\\*.exe\"); // absolute\r\ndllMatcher.AddInclude(\"*.exe\"); // relative\r\nvar results = dllMatcher.Execute(new DirectoryInfoWrapper(new DirectoryInfo(Environment.CurrentDirectory)));\r\n// results does not contain anything from C:\\Windows\r\n```\r\n\r\n\n\n### Expected behavior\n\nWhen patterns are specifying absolute paths, it should match results outside the given base directory. \n\n### Actual behavior\n\nOnly files within the given base directory are considered as candidates and therefore any absolute file paths supplied, are not included in the result. \n\n### Regression?\n\nUnknown.\n\n### Known Workarounds\n\nNo known one. \n\n### Configuration\n\n_Which version of .NET is the code running on?_\r\n.net 6.0\r\n\r\n_What OS and version, and what distro if applicable?_\r\nEdition\tWindows 10 Enterprise\r\nVersion\t20H2\r\nInstalled on\t‎25.‎09.‎2020\r\nOS build\t19042.1348\r\nExperience\tWindows Feature Experience Pack 120.2212.3920.0\r\n\r\n_What is the architecture (x64, x86, ARM, ARM64)?_\r\nx64\r\n\r\n_Do you know whether it is specific to that configuration?_\r\nNo it is not.\r\n\r\n_If you\u0027re using Blazor, which web browser(s) do you see this issue in?_\r\nNot applicable.\n\n### Other information\n\nIt might imply a security risk to allow globbing outside the base path so there might be a need for a setting. \r\n\r\nFrom what I\u0027ve seen the logic in the globbing is:\r\n\r\n1. Enumerate candidates from the input directory\r\n2. Match them against the globbing patterns. \r\n\r\nThis is likely where we need to extend/adapt the logic in a way that respects potentially global paths. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOO4DaYw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc46vplD",
                                           "createdAt":  "2021-12-03T14:34:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nFileSystemGlobbing only works with relative paths, if you supply absolute paths, they are not matched. This is problematic if you allow users to supply files through commandline to your application. As a user you would expect you can specify absolute paths, relative paths (both optionally with globbing). \n\n### Reproduction Steps\n\n```cs\r\nvar dllMatcher = new Matcher();\r\ndllMatcher.AddInclude(\"C:\\\\Windows\\\\*.exe\"); // absolute\r\ndllMatcher.AddInclude(\"*.exe\"); // relative\r\nvar results = dllMatcher.Execute(new DirectoryInfoWrapper(new DirectoryInfo(Environment.CurrentDirectory)));\r\n// results does not contain anything from C:\\Windows\r\n```\r\n\r\n\n\n### Expected behavior\n\nWhen patterns are specifying absolute paths, it should match results outside the given base directory. \n\n### Actual behavior\n\nOnly files within the given base directory are considered as candidates and therefore any absolute file paths supplied, are not included in the result. \n\n### Regression?\n\nUnknown.\n\n### Known Workarounds\n\nNo known one. \n\n### Configuration\n\n_Which version of .NET is the code running on?_\r\n.net 6.0\r\n\r\n_What OS and version, and what distro if applicable?_\r\nEdition\tWindows 10 Enterprise\r\nVersion\t20H2\r\nInstalled on\t‎25.‎09.‎2020\r\nOS build\t19042.1348\r\nExperience\tWindows Feature Experience Pack 120.2212.3920.0\r\n\r\n_What is the architecture (x64, x86, ARM, ARM64)?_\r\nx64\r\n\r\n_Do you know whether it is specific to that configuration?_\r\nNo it is not.\r\n\r\n_If you\u0027re using Blazor, which web browser(s) do you see this issue in?_\r\nNot applicable.\n\n### Other information\n\nIt might imply a security risk to allow globbing outside the base path so there might be a need for a setting. \r\n\r\nFrom what I\u0027ve seen the logic in the globbing is:\r\n\r\n1. Enumerate candidates from the input directory\r\n2. Match them against the globbing patterns. \r\n\r\nThis is likely where we need to extend/adapt the logic in a way that respects potentially global paths. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDanielku15\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-03T14:34:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46wBRb",
                                           "createdAt":  "2021-12-03T16:42:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem, @maryamariyan\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nFileSystemGlobbing only works with relative paths, if you supply absolute paths, they are not matched. This is problematic if you allow users to supply files through commandline to your application. As a user you would expect you can specify absolute paths, relative paths (both optionally with globbing). \n\n### Reproduction Steps\n\n```cs\r\nvar dllMatcher = new Matcher();\r\ndllMatcher.AddInclude(\"C:\\\\Windows\\\\*.exe\"); // absolute\r\ndllMatcher.AddInclude(\"*.exe\"); // relative\r\nvar results = dllMatcher.Execute(new DirectoryInfoWrapper(new DirectoryInfo(Environment.CurrentDirectory)));\r\n// results does not contain anything from C:\\Windows\r\n```\r\n\r\n\n\n### Expected behavior\n\nWhen patterns are specifying absolute paths, it should match results outside the given base directory. \n\n### Actual behavior\n\nOnly files within the given base directory are considered as candidates and therefore any absolute file paths supplied, are not included in the result. \n\n### Regression?\n\nUnknown.\n\n### Known Workarounds\n\nNo known one. \n\n### Configuration\n\n_Which version of .NET is the code running on?_\r\n.net 6.0\r\n\r\n_What OS and version, and what distro if applicable?_\r\nEdition\tWindows 10 Enterprise\r\nVersion\t20H2\r\nInstalled on\t‎25.‎09.‎2020\r\nOS build\t19042.1348\r\nExperience\tWindows Feature Experience Pack 120.2212.3920.0\r\n\r\n_What is the architecture (x64, x86, ARM, ARM64)?_\r\nx64\r\n\r\n_Do you know whether it is specific to that configuration?_\r\nNo it is not.\r\n\r\n_If you\u0027re using Blazor, which web browser(s) do you see this issue in?_\r\nNot applicable.\n\n### Other information\n\nIt might imply a security risk to allow globbing outside the base path so there might be a need for a setting. \r\n\r\nFrom what I\u0027ve seen the logic in the globbing is:\r\n\r\n1. Enumerate candidates from the input directory\r\n2. Match them against the globbing patterns. \r\n\r\nThis is likely where we need to extend/adapt the logic in a way that respects potentially global paths. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDanielku15\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-FileSystem`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-12-03T16:42:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc467dKt",
                                           "createdAt":  "2021-12-08T09:58:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "cc @Jozkee ",
                                           "updatedAt":  "2021-12-08T09:58:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47gM6i",
                                           "createdAt":  "2021-12-20T21:52:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "I agree it should match absolute paths\r\n\r\n\u003e When patterns are specifying absolute paths, it should match results outside the given base directory.\r\n\r\nThis sounds to me like a dynamic scope that increments if a rooted path is used as a pattern. Not sure if we want to add support for that, instead I would suggest that users need to reason about the required scope and use that as the \"base\" in `matcher.Match()`.\r\n",
                                           "updatedAt":  "2021-12-20T21:52:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47gNpj",
                                           "createdAt":  "2021-12-20T21:58:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCKj_zA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2021-12-21T12:31:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "np-13",
                                                                               "createdAt":  "2022-01-19T12:25:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jozkee",
                                           "body":  "Regarding the described issue, the code is only reading the first segment in the pattern, not sure why.\r\nhttps://github.com/dotnet/runtime/blob/192db36c1233bee44a2611853d987748ad4c3dd6/src/libraries/Microsoft.Extensions.FileSystemGlobbing/src/Internal/PatternContexts/PatternContextLinearInclude.cs#L28-L31\r\n\r\nI changed it to read all segments:\r\n```cs\r\nwhile (true)\r\n{\r\n    onDeclare(Pattern.Segments[Frame.SegmentIndex], IsLastSegment());\r\n    if (Frame.SegmentIndex == Pattern.Segments.Count - 1)\r\n    {\r\n        break;\r\n    }\r\n    Frame.SegmentIndex++;\r\n}\r\n```\r\nThat fixed the reported issue but other cases started to fail. I will need to take a deeper look.",
                                           "updatedAt":  "2021-12-20T21:58:12Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "FileSystemGlobbing does not support specifying absolute paths. ",
        "labels":  [
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65829",
        "createdAt":  "2022-02-24T06:59:51Z",
        "number":  65829,
        "author":  "radical",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-09T10:22:14Z",
        "body":  "CI job: `Libraries Test Run release coreclr windows x64 Debug`\r\n[Build](https://dev.azure.com/dnceng/public/_build/results?buildId=1629705\u0026view=logs\u0026jobId=55b384d0-d6b0-5894-fd8a-d754d713246e\u0026j=55b384d0-d6b0-5894-fd8a-d754d713246e\u0026t=8dcacd81-cb5e-5ac9-93e5-c3f19b19e19b), and [log](https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-65162-merge-4d006287659e43dc84/Microsoft.Extensions.FileProviders.Physical.Tests/1/console.8480d94d.log?sv=2019-07-07\u0026se=2022-03-16T05%3A08%3A22Z\u0026sr=c\u0026sp=rl\u0026sig=UPBc1otTa2upNUrA4CwpPp3bPIadG8q8YQ9iz%2Fy2HDU%3D):\r\n\r\n```\r\n  Starting:    Microsoft.Extensions.FileProviders.Physical.Tests (parallel test collections = on, max threads = 2)\r\nUnhandled exception. System.IO.DirectoryNotFoundException: Could not find a part of the path \u0027C:\\h\\w\\9CF8088B\\t\\PhysicalFileProviderTests_reta1kxb.2gc\\UsePollingFileWatcher_UseActivePolling_HasChanged_SymbolicLink_TargetChanged_93_6cb2b695\\UsePollingFileWatcher_UseActivePolling_HasChanged_SymbolicLink_TargetChanged_94_fbd68958\u0027.\r\n   at System.IO.FileSystem.GetFindData(String fullPath, Boolean isDirectory, Boolean ignoreAccessDenied, WIN32_FIND_DATA\u0026 findData)\r\n   at System.IO.FileSystem.GetFinalLinkTarget(String linkPath, Boolean isDirectory)\r\n   at System.IO.FileSystem.ResolveLinkTarget(String linkPath, Boolean returnFinalTarget, Boolean isDirectory)\r\n   at System.IO.FileSystemInfo.ResolveLinkTarget(Boolean returnFinalTarget)\r\n   at Microsoft.Extensions.FileProviders.Physical.FileSystemInfoHelper.GetFileLinkTargetLastWriteTimeUtc(FileInfo fileInfo) in /_/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/Internal/FileSystemInfoHelper.cs:line 56\r\n   at Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.GetLastWriteTimeUtc() in /_/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PollingFileChangeToken.cs:line 58\r\n   at Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.get_HasChanged() in /_/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PollingFileChangeToken.cs:line 103\r\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.RaiseChangeEvents(Object state) in /_/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFilesWatcher.cs:line 472\r\n   at System.Threading.TimerQueueTimer.Fire(Boolean isThreadPool)\r\n   at System.Threading.TimerQueue.FireNextTimers()\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPo7ilw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-juKX",
                                           "createdAt":  "2022-02-24T06:59:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCI job: `Libraries Test Run release coreclr windows x64 Debug`\r\n[Build](https://dev.azure.com/dnceng/public/_build/results?buildId=1629705\u0026view=logs\u0026jobId=55b384d0-d6b0-5894-fd8a-d754d713246e\u0026j=55b384d0-d6b0-5894-fd8a-d754d713246e\u0026t=8dcacd81-cb5e-5ac9-93e5-c3f19b19e19b), and [log](https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-65162-merge-4d006287659e43dc84/Microsoft.Extensions.FileProviders.Physical.Tests/1/console.8480d94d.log?sv=2019-07-07\u0026se=2022-03-16T05%3A08%3A22Z\u0026sr=c\u0026sp=rl\u0026sig=UPBc1otTa2upNUrA4CwpPp3bPIadG8q8YQ9iz%2Fy2HDU%3D):\r\n\r\n```\r\n  Starting:    Microsoft.Extensions.FileProviders.Physical.Tests (parallel test collections = on, max threads = 2)\r\nUnhandled exception. System.IO.DirectoryNotFoundException: Could not find a part of the path \u0027C:\\h\\w\\9CF8088B\\t\\PhysicalFileProviderTests_reta1kxb.2gc\\UsePollingFileWatcher_UseActivePolling_HasChanged_SymbolicLink_TargetChanged_93_6cb2b695\\UsePollingFileWatcher_UseActivePolling_HasChanged_SymbolicLink_TargetChanged_94_fbd68958\u0027.\r\n   at System.IO.FileSystem.GetFindData(String fullPath, Boolean isDirectory, Boolean ignoreAccessDenied, WIN32_FIND_DATA\u0026 findData)\r\n   at System.IO.FileSystem.GetFinalLinkTarget(String linkPath, Boolean isDirectory)\r\n   at System.IO.FileSystem.ResolveLinkTarget(String linkPath, Boolean returnFinalTarget, Boolean isDirectory)\r\n   at System.IO.FileSystemInfo.ResolveLinkTarget(Boolean returnFinalTarget)\r\n   at Microsoft.Extensions.FileProviders.Physical.FileSystemInfoHelper.GetFileLinkTargetLastWriteTimeUtc(FileInfo fileInfo) in /_/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/Internal/FileSystemInfoHelper.cs:line 56\r\n   at Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.GetLastWriteTimeUtc() in /_/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PollingFileChangeToken.cs:line 58\r\n   at Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.get_HasChanged() in /_/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PollingFileChangeToken.cs:line 103\r\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.RaiseChangeEvents(Object state) in /_/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFilesWatcher.cs:line 472\r\n   at System.Threading.TimerQueueTimer.Fire(Boolean isThreadPool)\r\n   at System.Threading.TimerQueue.FireNextTimers()\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eradical\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-FileSystem`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-24T06:59:57Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "`Microsoft.Extensions.FileProviders.Physical.Tests` failing with `Unhandled exception. System.IO.DirectoryNotFoundException`",
        "labels":  [
                       "test-failure",
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71386",
        "createdAt":  "2022-06-28T15:23:13Z",
        "number":  71386,
        "author":  "Cnicehs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-01T19:31:59Z",
        "body":  "### Description\r\n\r\nwhen using `AddJsonFile(\"./api.json\", true, true)` it will not fire onChange event but using `AddJsonFile(\"api.json\", true, true)` it will fire\r\n\r\n### Reproduction Steps\r\n\r\n```c#\r\nvar builder = new ConfigurationBuilder();\r\nConfigBuilder = builder.AddJsonFile(\"./api.json\", true, true).Build();\r\nChangeToken.OnChange(() =\u003e ConfigBuilder.GetReloadToken(), () =\u003e\r\n{\r\n     Console.WriteLine(\"Reload\");\r\n});\r\n```\r\n\r\n### Expected behavior\r\n\r\nboth \"./api.json\" and \"api.json\" can fire onChange event\r\n\r\n### Actual behavior\r\n\r\nit seems like in `PhysicalFilesWatcher.ReportChangeForMatchedEntries` the `_filePathTokenLookup` save \"./api.json\" as key but try to match with \"api.json\"\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.net6.0\r\nMicrosoft.Extensions.Hosting 7.0.0-preview.5.22301.12\r\nMicrosoft.Extensions.Primitives 7.0.0-preview.5.22301.12\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSc8gog==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Fq37v",
                                           "createdAt":  "2022-06-28T15:23:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-primitives\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nwhen using AddJsonFile(\"./api.json\", true, true) it will not fire onChange event but using AddJsonFile(\"api.json\", true, true) it will fire\n\n### Reproduction Steps\n\nvar builder = new ConfigurationBuilder();\r\nConfigBuilder = builder.AddJsonFile(\"./api.json\", true, true).Build();\r\nChangeToken.OnChange(() =\u003e ConfigBuilder.GetReloadToken(), () =\u003e\r\n{\r\n     Console.WriteLine(\"Reload\");\r\n});\n\n### Expected behavior\n\nboth \"./api.json\" and \"api.json\" can fire onChange event\n\n### Actual behavior\n\nit seems like in PhysicalFilesWatcher.ReportChangeForMatchedEntries the _filePathTokenLookup save \"./api.json\" as key but try to match with \"api.json\"\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.net6.0\r\nMicrosoft.Extensions.Hosting 7.0.0-preview.5.22301.12\r\nMicrosoft.Extensions.Primitives 7.0.0-preview.5.22301.12\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCnicehs\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-Primitives`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-28T15:23:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JzyCi",
                                           "createdAt":  "2022-09-06T15:29:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nwhen using `AddJsonFile(\"./api.json\", true, true)` it will not fire onChange event but using `AddJsonFile(\"api.json\", true, true)` it will fire\r\n\r\n### Reproduction Steps\r\n\r\n```c#\r\nvar builder = new ConfigurationBuilder();\r\nConfigBuilder = builder.AddJsonFile(\"./api.json\", true, true).Build();\r\nChangeToken.OnChange(() =\u003e ConfigBuilder.GetReloadToken(), () =\u003e\r\n{\r\n     Console.WriteLine(\"Reload\");\r\n});\r\n```\r\n\r\n### Expected behavior\r\n\r\nboth \"./api.json\" and \"api.json\" can fire onChange event\r\n\r\n### Actual behavior\r\n\r\nit seems like in `PhysicalFilesWatcher.ReportChangeForMatchedEntries` the `_filePathTokenLookup` save \"./api.json\" as key but try to match with \"api.json\"\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.net6.0\r\nMicrosoft.Extensions.Hosting 7.0.0-preview.5.22301.12\r\nMicrosoft.Extensions.Primitives 7.0.0-preview.5.22301.12\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCnicehs\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`bug`, `help wanted`, `area-Extensions-FileSystem`, `in-pr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-06T15:29:52Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ConfigurationBuilder.AddJsonFile can\u0027t fire OnChange event using relative paths",
        "labels":  [
                       "bug",
                       "help wanted",
                       "area-Extensions-FileSystem",
                       "in-pr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82406",
        "createdAt":  "2023-02-20T18:04:34Z",
        "number":  82406,
        "author":  "Gnbrkm41",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBLgXw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pinkfloydx33",
                                            "createdAt":  "2023-02-20T20:22:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maxkagamine",
                                            "createdAt":  "2024-08-12T13:20:02Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rbeurskens",
                                            "createdAt":  "2025-04-14T13:09:18Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2023-02-21T20:58:58Z",
        "body":  "### Background and motivation\r\n\r\nCurrently `Microsoft.Extensions.FileSystemGlobbing` only has support for wildcard that matches anything between 0 and infinite times - there is not a wildcard character that matches only once.\r\n\r\nThis is problematic if you wanted to match files that have a certain character in a certain position. The particular problem I want to solve is that I have a bunch of files that are named as an arbitrary n-digit ID, and I want to only match files that have a \u002710\u0027 in the 5~6th position, so for example:\r\n```\r\n10000000\r\n01000000\r\n00100000\r\n00010000\r\n00001000\r\n00000100\r\n```\r\n\r\nHere I would only want the 5th entry (000010) to match, however with the current implementation the closest you can get would be to specify `*10*` as the pattern - but this also returns all other entries as well, so you\u0027d need extra code to actually filter out what you want. This is annoying as I\u0027d rather not want extra bits of code (or have to look for other libraries when something really close is there).\r\n\r\nIt honestly surprised me that such functionality does not exist - even the most basic Command Prompt in Windows has support for `?` as something that matches only a single character, and there\u0027s a few APIs in .NET that does something similar such as `DirectoryInfo.EnumerateFiles`. [Wikipedia, as another example, lists `?` as one of \"the most common wildcards\"](https://en.wikipedia.org/wiki/Glob_(programming)).\r\n\r\n### API Proposal\r\n\r\nThere is no changes in the API surface (as in new overloads / adding attributes etc). Rather, this involves a change in how the `Microsoft.Extensions.FileSystemGlobbing.Matcher` interprets the include / exclude patterns added by `AddInclude` and `AddExclude` methods, by adding a new special-treated character.\r\n\r\nCurrently, it appears that only `/`, `*` and `**` are specially treated when interpreting the patterns. My proposal is to add `?` to the list of special-treated characters - when inside a pattern, it would indicate \"match any single character\" (excluding none).\r\n\r\nWhy question mark: Most (if not all?) tools that accept `glob` patterns uses `?` as the single-character wildcard. Furthermore, it cannot be used in a file name in Windows - which makes it a good candidate as changing how patterns are recognised would be a breaking change.\r\n\r\n### API Usage\r\n\r\nThe usage for making the above example work:\r\n`matcher.AddInclude(\"????10\")`\r\n\r\n### Alternative Designs\r\n\r\nWhile not strictly in scope of this issue, globbing tools / libraries sometimes have other extra features (\"metacharacters\") when it comes to globbing, such as:\r\n\r\n`[abc]` (matches any character between a, b, and c)\r\n`[a-z]` (matches any character in the a-z range)\r\n`[!a-z]` (matches any character not in the a-z range)\r\n`*.{txt,json}` or  (matches any files that has an extension of txt or json)\r\n\r\n\r\n### Risks\r\n\r\nOn *nix OSes, it appears that `?` is totally valid in file names, so this would be a breaking change. However, that problem also exists with `*` and I\u0027m not sure how common of a problem that would be, both in file names with question marks \u0026 usages where people try to match literal `?` with `FileSystemGlobbing`.\r\n\r\nOne possible way to work around this would be to add ways to escape asterisks by doing `\\\\*` - `\\\\` won\u0027t match anything anyway. Or we could make `\\\\*` the wildcard... but it\u0027s ugly and super counterintuitive.\r\n\r\nIf we\u0027re really worried about this breaking change... we could alternatively provide an overload that accepts an enum flag for selecting matching modes. As an added benefit, this would allow us to expand the globbing library much further without breaking existing codes, such as the ones listed in alternative designs. I might open an issue about exactly that separately, however if possible I do believe `?` should be supported out of the box without passing any other flags.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVcauxg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5VsN34",
                                           "createdAt":  "2023-02-20T23:07:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nCurrently `Microsoft.Extensions.FileSystemGlobbing` only has support for wildcard that matches anything between 0 and infinite times - there is not a wildcard character that matches only once.\r\n\r\nThis is problematic if you wanted to match files that have a certain character in a certain position. The particular problem I want to solve is that I have a bunch of files that are named as an arbitrary n-digit ID, and I want to only match files that have a \u002710\u0027 in the 5~6th position, so for example:\r\n```\r\n10000000\r\n01000000\r\n00100000\r\n00010000\r\n00001000\r\n00000100\r\n```\r\n\r\nHere I would only want the 5th entry (000010) to match, however with the current implementation the closest you can get would be to specify `*10*` as the pattern - but this also returns all other entries as well, so you\u0027d need extra code to actually filter out what you want. This is annoying as I\u0027d rather not want extra bits of code (or have to look for other libraries when something really close is there).\r\n\r\nIt honestly surprised me that such functionality does not exist - even the most basic Command Prompt in Windows has support for `?` as something that matches only a single character, and there\u0027s a few APIs in .NET that does something similar such as `DirectoryInfo.EnumerateFiles`. [Wikipedia, as another example, lists `?` as one of \"the most common wildcards\"](https://en.wikipedia.org/wiki/Glob_(programming)).\r\n\r\n### API Proposal\r\n\r\nThere is no changes in the API surface (as in new overloads / adding attributes etc). Rather, this involves a change in how the `Microsoft.Extensions.FileSystemGlobbing.Matcher` interprets the include / exclude patterns added by `AddInclude` and `AddExclude` methods, by adding a new special-treated character.\r\n\r\nCurrently, it appears that only `/`, `*` and `**` are specially treated when interpreting the patterns. My proposal is to add `?` to the list of special-treated characters - when inside a pattern, it would indicate \"match any single character\" (excluding none).\r\n\r\nWhy question mark: Most (if not all?) tools that accept `glob` patterns uses `?` as the single-character wildcard. Furthermore, it cannot be used in a file name in Windows - which makes it a good candidate as changing how patterns are recognised would be a breaking change.\r\n\r\n### API Usage\r\n\r\nThe usage for making the above example work:\r\n`matcher.AddInclude(\"????10\")`\r\n\r\n### Alternative Designs\r\n\r\nWhile not strictly in scope of this issue, globbing tools / libraries sometimes have other extra features (\"metacharacters\") when it comes to globbing, such as:\r\n\r\n`[abc]` (matches any character between a, b, and c)\r\n`[a-z]` (matches any character in the a-z range)\r\n`[!a-z]` (matches any character not in the a-z range)\r\n`*.{txt,json}` or  (matches any files that has an extension of txt or json)\r\n\r\n\r\n### Risks\r\n\r\nOn *nix OSes, it appears that `?` is totally valid in file names, so this would be a breaking change. However, that problem also exists with `*` and I\u0027m not sure how common of a problem that would be, both in file names with question marks \u0026 usages where people try to match literal `?` with `FileSystemGlobbing`.\r\n\r\nOne possible way to work around this would be to add ways to escape asterisks by doing `\\\\*` - `\\\\` won\u0027t match anything anyway. Or we could make `\\\\*` the wildcard... but it\u0027s ugly and super counterintuitive.\r\n\r\nIf we\u0027re really worried about this breaking change... we could alternatively provide an overload that accepts an enum flag for selecting matching modes. As an added benefit, this would allow us to expand the globbing library much further without breaking existing codes, such as the ones listed in alternative designs. I might open an issue about exactly that separately, however if possible I do believe `?` should be supported out of the box without passing any other flags.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eGnbrkm41\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-Extensions-FileSystem`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-20T23:07:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Vxq7G",
                                           "createdAt":  "2023-02-21T20:58:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "This should be considered for https://github.com/dotnet/runtime/issues/21362.",
                                           "updatedAt":  "2023-02-21T20:58:29Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Support single character wildcard in Microsoft.Extensions.FileSystemGlobbing",
        "labels":  [
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88596",
        "createdAt":  "2023-07-10T11:00:42Z",
        "number":  88596,
        "author":  "keyboardDrummer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-18T15:44:35Z",
        "body":  "### Description\r\n\r\n```c#\r\nvar attempt1 = new InMemoryDirectoryInfo(@\"\", new[] { @\"C:\\my\\happy\\path\" }); // crashes because the root is empty\r\n```\r\n\r\n```c#\r\nvar attempt2 = new InMemoryDirectoryInfo(@\"C:\\\", new[] { @\"C:\\my\\happy\\path\" });\r\nvar l = attempt2.EnumerateFileSystemInfos().ToList(); // returns \"my\\\" instead of \"C:\\\", so any matcher that starts with C:\\ cannot be used with this\r\nvar matcher = new Matcher();\r\nmatcher.AddInclude(@\"C:\\my\\happy\\path\");\r\nDebug.Assert(matcher.Execute(attempt2).HasMatches) // fails\r\n```\r\n\r\n### Reproduction Steps\r\n\r\nSee description\r\n\r\n### Expected behavior\r\n\r\nI expect there to be a way to use absolute paths on Windows in combination with `Matcher` and `InMemoryDirectoryInfo`\r\n\r\n### Actual behavior\r\n\r\nSee description\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nI have to use paths relative to the root of the filesystem\r\n\r\n```c#\r\nvar attempt3 = new InMemoryDirectoryInfo(@\"C:\\\", new[] { @\"my\\happy\\path\" });\r\nvar matcher = new Matcher();\r\nmatcher.AddInclude(@\"my\\happy\\path\");\r\nDebug.Assert(matcher.Execute(attempt3).HasMatches) // passes\r\n```\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\nI expect that allowing `InMemoryDirectoryInfo` to take an empty root is required to resolve this issue.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYlAFag==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5hFEO2",
                                           "createdAt":  "2023-07-10T11:01:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\n```c#\r\nvar attempt1 = new InMemoryDirectoryInfo(@\"\", new[] { @\"C:\\my\\happy\\path\" }); // crashes because the root is empty\r\n```\r\n\r\n```\r\nvar attempt2 = new InMemoryDirectoryInfo(@\"C:\\\", new[] { @\"C:\\my\\happy\\path\" });\r\nvar l = attempt2.EnumerateFileSystemInfos().ToList(); // returns \"my\\\" instead of \"C:\\\", so any matcher that starts with C:\\ cannot be used with this\r\nvar matcher = new Matcher();\r\nmatcher.AddInclude(@\"C:\\my\\happy\\path\");\r\nDebug.Assert(matcher.Execute(attempt2).HasMatches) // fails\r\n```\n\n### Reproduction Steps\n\nSee description\n\n### Expected behavior\n\nI expect there to be a way to use absolute paths on Windows in combination with `Matcher` and `InMemoryDirectoryInfo`\n\n### Actual behavior\n\nSee description\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nI have to use paths relative to the root of the filesystem\r\n\r\n```c#\r\nvar attempt2 = new InMemoryDirectoryInfo(@\"C:\\\", new[] { @\"my\\happy\\path\" });\r\nvar matcher = new Matcher();\r\nmatcher.AddInclude(@\"my\\happy\\path\");\r\nDebug.Assert(matcher.Execute(attempt2).HasMatches) // passes\r\n```\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekeyboardDrummer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-10T11:01:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hHFJj",
                                           "createdAt":  "2023-07-10T15:58:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\n```c#\r\nvar attempt1 = new InMemoryDirectoryInfo(@\"\", new[] { @\"C:\\my\\happy\\path\" }); // crashes because the root is empty\r\n```\r\n\r\n```c#\r\nvar attempt2 = new InMemoryDirectoryInfo(@\"C:\\\", new[] { @\"C:\\my\\happy\\path\" });\r\nvar l = attempt2.EnumerateFileSystemInfos().ToList(); // returns \"my\\\" instead of \"C:\\\", so any matcher that starts with C:\\ cannot be used with this\r\nvar matcher = new Matcher();\r\nmatcher.AddInclude(@\"C:\\my\\happy\\path\");\r\nDebug.Assert(matcher.Execute(attempt2).HasMatches) // fails\r\n```\r\n\r\n### Reproduction Steps\r\n\r\nSee description\r\n\r\n### Expected behavior\r\n\r\nI expect there to be a way to use absolute paths on Windows in combination with `Matcher` and `InMemoryDirectoryInfo`\r\n\r\n### Actual behavior\r\n\r\nSee description\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nI have to use paths relative to the root of the filesystem\r\n\r\n```c#\r\nvar attempt3 = new InMemoryDirectoryInfo(@\"C:\\\", new[] { @\"my\\happy\\path\" });\r\nvar matcher = new Matcher();\r\nmatcher.AddInclude(@\"my\\happy\\path\");\r\nDebug.Assert(matcher.Execute(attempt3).HasMatches) // passes\r\n```\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\nI expect that allowing `InMemoryDirectoryInfo` to take an empty root is required to resolve this issue.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekeyboardDrummer\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-FileSystem`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-10T15:58:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iQ3So",
                                           "createdAt":  "2023-07-24T20:46:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "This looks like a duplicate of https://github.com/dotnet/runtime/issues/50648.",
                                           "updatedAt":  "2023-07-24T20:46:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iUAVq",
                                           "createdAt":  "2023-07-25T08:56:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "keyboardDrummer",
                                           "body":  "\u003e This looks like a duplicate of #50648.\r\n\r\nI don\u0027t think it is. Another way to phrase this issue is that `InMemoryDirectoryInfo` does not support having multiple drives in it. My problem isn\u0027t that, but that it is unable to include the drive letter in the paths it returns, and my matchers do include the drive letter.\r\n\r\nMy perspective is that it would be simplest to consider the drive letter part of a Windows path as another directory, but `InMemoryDirectoryInfo` doesn\u0027t allow that.",
                                           "updatedAt":  "2023-07-25T08:56:12Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "InMemoryDirectoryInfo does not work with absolute paths on Windows",
        "labels":  [
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88659",
        "createdAt":  "2023-07-11T12:45:17Z",
        "number":  88659,
        "author":  "munichmule",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-31T18:11:51Z",
        "body":  "### Description\r\n\r\nHi Guys, \r\n\r\nAm I supposed to keep a reference to PhysicalFileProvider to make watcher and change token alive? As far as I can see, whenever it gets disposed, the [watcher is being disposed too](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFileProvider.cs#L217). \r\n\r\nThis looks weird because using change token from `PhysicalFileProvider.Watch()` is the recommended way to add file cache dependency in netcore. This means that in addition to providing a change token for cache entry, I have to manually maintain lifecycle of all corresponding file providers.\r\n\r\nI would expect change token to keep a reference to a watcher/provider needed for its work.\r\n\r\nSee the code example below:\r\n\r\n```\r\nusing Microsoft.Extensions.FileProviders;\r\nusing Microsoft.Extensions.Primitives;\r\nusing Polly;\r\nusing Xunit.Abstractions;\r\n\r\nnamespace SandboxTest;\r\n\r\npublic class FileSystemWatcherTest\r\n{\r\n    private readonly ITestOutputHelper _output;\r\n\r\n    public FileSystemWatcherTest(ITestOutputHelper output)\r\n    {\r\n        _output = output;\r\n    }\r\n\r\n    [Fact]\r\n    public async Task Test()\r\n    {\r\n        var filename = \"filename.txt\";\r\n        var (folder, file) = await CreateFile(filename);\r\n        var changeToken = WatchFile(folder, filename);\r\n\r\n        var changed = false;\r\n        changeToken.RegisterChangeCallback(_ =\u003e changed = true, default);\r\n        \r\n        // GC will collect PhysicalFileProvider instance and dispose watcher/timer etc\r\n        GC.Collect();\r\n        GC.WaitForPendingFinalizers();\r\n        GC.Collect();\r\n\r\n        await File.WriteAllTextAsync(file, \"modified\");\r\n\r\n        Policy\r\n            .Handle\u003cException\u003e()\r\n            .WaitAndRetry(5, _ =\u003e\r\n            {\r\n                var interval = TimeSpan.FromSeconds(5);\r\n                _output.WriteLine($\"Wait {interval} more.\");\r\n                return interval;\r\n            })\r\n            .Execute(() =\u003e Assert.True(changed));\r\n    }\r\n\r\n    private IChangeToken WatchFile(string folder, string filename)\r\n    {\r\n        var provider = new PhysicalFileProvider(folder)\r\n        {\r\n            UsePollingFileWatcher = true,\r\n            UseActivePolling = true\r\n        };\r\n        var changeToken = provider.Watch(filename);\r\n        return changeToken;\r\n    }\r\n\r\n    private async Task\u003c(string folder, string file)\u003e CreateFile(string filename)\r\n    {\r\n        var folder = Path.GetTempPath();\r\n        var file = Path.Combine(folder, filename);\r\n        await File.WriteAllTextAsync(file, \"created\");\r\n        return (folder, file);\r\n    }\r\n}\r\n```\r\n\r\n### Reproduction Steps\r\n\r\n1. Use PhysicalFileProvder to get a file change token\r\n2. Use file change token for some file change-tracking (cache invalidation etc)\r\n3. Forget to keep a reference to PhysicalFilePrivider so it gets garbage-collected/disposed\r\n4. No change tracking works even change token is alive\r\n\r\n### Expected behavior\r\n\r\nChangeToken should keep refs to services used for change tracking internally, so dev doesn\u0027t have to maintain a separate cache of watchers etc.\r\n\r\n### Actual behavior\r\n\r\nChangeToken stops working because PhysicalFileWatcher gets garbage-collected/disposed.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYaEKDg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5hNFSk",
                                           "createdAt":  "2023-07-11T13:19:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nHi Guys, \r\n\r\nAm I supposed to keep a reference to PhysicalFileProvider to make watcher and change token alive? As far as I can see, whenever it gets disposed, the [watcher is being disposed too](https://github.com/dotnet/runtime/blob/main/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFileProvider.cs#L217). \r\n\r\nThis looks weird because using change token from `PhysicalFileProvider.Watch()` is the recommended way to add file cache dependency in netcore. This means that in addition to providing a change token for cache entry, I have to manually maintain lifecycle of all corresponding file providers.\r\n\r\nI would expect change token to keep a reference to a watcher/provider needed for its work.\r\n\r\nSee the code example below:\r\n\r\n```\r\nusing Microsoft.Extensions.FileProviders;\r\nusing Microsoft.Extensions.Primitives;\r\nusing Polly;\r\nusing Xunit.Abstractions;\r\n\r\nnamespace SandboxTest;\r\n\r\npublic class FileSystemWatcherTest\r\n{\r\n    private readonly ITestOutputHelper _output;\r\n\r\n    public FileSystemWatcherTest(ITestOutputHelper output)\r\n    {\r\n        _output = output;\r\n    }\r\n\r\n    [Fact]\r\n    public async Task Test()\r\n    {\r\n        var filename = \"filename.txt\";\r\n        var (folder, file) = await CreateFile(filename);\r\n        var changeToken = WatchFile(folder, filename);\r\n\r\n        var changed = false;\r\n        changeToken.RegisterChangeCallback(_ =\u003e changed = true, default);\r\n        \r\n        // GC will collect PhysicalFileProvider instance and dispose watcher/timer etc\r\n        GC.Collect();\r\n        GC.WaitForPendingFinalizers();\r\n        GC.Collect();\r\n\r\n        await File.WriteAllTextAsync(file, \"modified\");\r\n\r\n        Policy\r\n            .Handle\u003cException\u003e()\r\n            .WaitAndRetry(5, _ =\u003e\r\n            {\r\n                var interval = TimeSpan.FromSeconds(5);\r\n                _output.WriteLine($\"Wait {interval} more.\");\r\n                return interval;\r\n            })\r\n            .Execute(() =\u003e Assert.True(changed));\r\n    }\r\n\r\n    private IChangeToken WatchFile(string folder, string filename)\r\n    {\r\n        var provider = new PhysicalFileProvider(folder)\r\n        {\r\n            UsePollingFileWatcher = true,\r\n            UseActivePolling = true\r\n        };\r\n        var changeToken = provider.Watch(filename);\r\n        return changeToken;\r\n    }\r\n\r\n    private async Task\u003c(string folder, string file)\u003e CreateFile(string filename)\r\n    {\r\n        var folder = Path.GetTempPath();\r\n        var file = Path.Combine(folder, filename);\r\n        await File.WriteAllTextAsync(file, \"created\");\r\n        return (folder, file);\r\n    }\r\n}\r\n```\r\n\r\n### Reproduction Steps\r\n\r\n1. Use PhysicalFileProvder to get a file change token\r\n2. Use file change token for some file change-tracking (cache invalidation etc)\r\n3. Forget to keep a reference to PhysicalFilePrivider so it gets garbage-collected/disposed\r\n4. No change tracking works even change token is alive\r\n\r\n### Expected behavior\r\n\r\nChangeToken should keep refs to services used for change tracking internally, so dev doesn\u0027t have to maintain a separate cache of watchers etc.\r\n\r\n### Actual behavior\r\n\r\nChangeToken stops working because PhysicalFileWatcher gets garbage-collected/disposed.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eh15ter\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-FileSystem`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-11T13:19:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hoQoO",
                                           "createdAt":  "2023-07-17T11:32:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "\u003e Am I supposed to keep a reference to PhysicalFileProvider to make watcher and change token alive?\r\n\r\nI would expect the answer to be yes, but let\u0027s ask GC Team to be 100% sure @dotnet/gc ",
                                           "updatedAt":  "2023-07-17T11:32:32Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "FileWatcher gets garbage-collected while it is being used",
        "labels":  [
                       "question",
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95631",
        "createdAt":  "2023-12-05T12:13:57Z",
        "number":  95631,
        "author":  "georg-jung",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_6itw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joel-jeremy",
                                            "createdAt":  "2023-12-12T18:16:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "swh-cb",
                                            "createdAt":  "2025-03-10T21:28:00Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-30T12:29:44Z",
        "body":  "### Description\r\n\r\nI use `Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher` in polling mode. If polling fails with an IOException, it takes the process down as the exception is thrown on a thread pool thread where it can not be catched.\r\n\r\nRelated: #71003 #72462\r\nReading the related issues, it seems like @Jozkee is the right one to tag :-)\r\ncc: @danmoseley\r\n\r\n### Stacktrace\r\n\r\n```\r\nUnhandled exception. System.IO.IOException: Host is down : \u0027/mnt/smbshare\u0027\r\n   at System.IO.Enumeration.FileSystemEnumerator`1.Init()\r\n   at System.IO.DirectoryInfo.InternalEnumerateInfos(String path, String searchPattern, SearchTarget searchTarget, EnumerationOptions options)\r\n   at Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper.EnumerateFileSystemInfos()+MoveNext()\r\n   at System.Collections.Generic.List`1.AddRange(IEnumerable`1 collection)\r\n   at Microsoft.Extensions.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String parentRelativePath)\r\n   at Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken.CalculateChanges()\r\n   at Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken.get_HasChanged()\r\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.RaiseChangeEvents(Object state)\r\n   at System.Threading.TimerQueueTimer.Fire(Boolean isThreadPool)\r\n   at System.Threading.TimerQueue.FireNextTimers()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\n```\r\n\r\n### Details of my setup/environment\r\n\r\n\u003e I don\u0027t think this issue is related to my setup/environment, just adding for completeness \u0026 reproducibility.\r\n\r\nMy code runs inside an ubuntu-chiseled-based docker container. On the unix container host, I have a CIFS mount defined in `/etc/fstab` like this:\r\n\r\n```\r\n//smbhost/smbshare$ /mnt/smbshare cifs credentials=/etc/smbcredentials_smbshare,iocharset=utf8,rw,file_mode=0777,dir_mode=0777 0 0\r\n```\r\n\r\nThis mount is then further passed to the container:\r\n```docker-compose\r\nworker:\r\n  image: somecorp.azurecr.io/some-worker:latest\r\n  read_only: true\r\n  cap_drop:\r\n    - ALL\r\n  security_opt:\r\n    - no-new-privileges:true\r\n  environment:\r\n    - DOTNET_USE_POLLING_FILE_WATCHER=1\r\n  volumes:\r\n    - /mnt/smbshare:/mnt/smbshare:Z\r\n```\r\n\r\nThe mounted volume is only available at specific times though (say, 9 to 5 but not at night). Thus it will predictably go down and when it does it takes my worker process with it.\r\n\r\n### Reproduction Steps\r\n\r\nCreation of my PhysicalFilesWatcher is quite straight forward:\r\n\r\n```csharp\r\n_fileProvider = new PhysicalFileProvider(directoryToWatch);\r\n_disposable = ChangeToken.OnChange(\r\n    () =\u003e _fileProvider.Watch(\"**/*\"),\r\n    () =\u003e\r\n    {\r\n        // Do something\r\n    });\r\n```\r\n\r\nI have `DOTNET_USE_POLLING_FILE_WATCHER=1`set.\r\n\r\nPoint this PhysicalFilesWatcher to a path that becomes unavailable, in my case the host of a mounted network file system goes down. On the next poll, the process stops forcefully.\r\n\r\n### Expected behavior\r\n\r\nPhysicalFilesWatcher does not throw any uncatchable exceptions.\r\n\r\nOne of:\r\n* IOExceptions are catched, like @danmoseley [suggested](https://github.com/dotnet/runtime/issues/71003#issuecomment-1181927888) but in all relevant places\r\n* There is an event or a similar interception possibility that can be used to handle these exceptions.\r\n\r\n### Actual behavior\r\n\r\nPhysicalFilesWatcher takes processes down because it throws uncatchable exceptions.\r\n\r\n### Regression?\r\n\r\nI don\u0027t think this is a regression.\r\n\r\n### Known Workarounds\r\n\r\nOnly: Don\u0027t use PhysicalFilesWatcher.\r\n\r\n### Configuration\r\n\r\n`docker container run --rm --entrypoint dotnet my-worker:latest --info`\r\n```\r\nHost:\r\n  Version:      8.0.0\r\n  Architecture: x64\r\n  Commit:       5535e31a71\r\n  RID:          linux-x64\r\n\r\n.NET SDKs installed:\r\n  No SDKs were found.\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 8.0.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 8.0.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nOther architectures found:\r\n  None\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n```\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuuz1pw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ttoNW",
                                           "createdAt":  "2023-12-05T12:14:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI use `Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher` in polling mode. If polling fails with an IOException, it takes the process down as the exception is thrown on a thread pool thread where it can not be catched.\r\n\r\nRelated: #71003 #72462\r\nReading the related issues, it seems @Jozkee is the right one to tag :-)\r\ncc: @danmoseley\r\n\r\n### Stacktrace\r\n\r\n```\r\nUnhandled exception. System.IO.IOException: Host is down : \u0027/mnt/smbshare\u0027\r\n   at System.IO.Enumeration.FileSystemEnumerator`1.Init()\r\n   at System.IO.DirectoryInfo.InternalEnumerateInfos(String path, String searchPattern, SearchTarget searchTarget, EnumerationOptions options)\r\n   at Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper.EnumerateFileSystemInfos()+MoveNext()\r\n   at System.Collections.Generic.List`1.AddRange(IEnumerable`1 collection)\r\n   at Microsoft.Extensions.FileSystemGlobbing.Internal.MatcherContext.Match(DirectoryInfoBase directory, String parentRelativePath)\r\n   at Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken.CalculateChanges()\r\n   at Microsoft.Extensions.FileProviders.Physical.PollingWildCardChangeToken.get_HasChanged()\r\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.RaiseChangeEvents(Object state)\r\n   at System.Threading.TimerQueueTimer.Fire(Boolean isThreadPool)\r\n   at System.Threading.TimerQueue.FireNextTimers()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\n```\r\n\r\n### Details of my setup/environment\r\n\r\n\u003e I don\u0027t think this issue is related to my setup/environment, just adding for completeness \u0026 reproducibility.\r\n\r\nMy code runs inside an ubuntu-chiseled-based docker container. On the unix container host, I have a CIFS mount defined in `/etc/fstab` like this:\r\n\r\n```\r\n//smbhost/smbshare$ /mnt/smbshare cifs credentials=/etc/smbcredentials_smbshare,iocharset=utf8,rw,file_mode=0777,dir_mode=0777 0 0\r\n```\r\n\r\nThis mount is then further passed to the container:\r\n```docker-compose\r\nworker:\r\n  image: somecorp.azurecr.io/some-worker:latest\r\n  read_only: true\r\n  cap_drop:\r\n    - ALL\r\n  security_opt:\r\n    - no-new-privileges:true\r\n  environment:\r\n    - DOTNET_USE_POLLING_FILE_WATCHER=1\r\n  volumes:\r\n    - /mnt/smbshare:/mnt/smbshare:Z\r\n```\r\n\r\nThe mounted volume is only available at specific times though (say, 9 to 5 but not at night). Thus it will predictably go down and when it does it takes my worker process with it.\n\n### Reproduction Steps\n\nCreation of my PhysicalFilesWatcher is quite straight forward:\r\n\r\n```csharp\r\n_fileProvider = new PhysicalFileProvider(directoryToWatch);\r\n_disposable = ChangeToken.OnChange(\r\n    () =\u003e _fileProvider.Watch(\"**/*\"),\r\n    () =\u003e\r\n    {\r\n        // Do something\r\n    });\r\n```\r\n\r\nI have `DOTNET_USE_POLLING_FILE_WATCHER=1`set.\r\n\r\nPoint this PhysicalFilesWatcher to a path that becomes unavailable, in my case the host of a mounted network file system goes down. On the next poll, the process stops forcefully.\n\n### Expected behavior\n\nPhysicalFilesWatcher does not throw any uncatchable exceptions.\r\n\r\nOne of:\r\n* IOExceptions are catched, like @danmoseley [suggested](https://github.com/dotnet/runtime/issues/71003#issuecomment-1181927888) but in all relevant places\r\n* There is an event or a similar interception possibility that can be used to handle these exceptions.\n\n### Actual behavior\n\nPhysicalFilesWatcher takes processes down because it throws uncatchable exceptions.\n\n### Regression?\n\nI don\u0027t think this is a regression.\n\n### Known Workarounds\n\nOnly: Don\u0027t use PhysicalFilesWatcher.\n\n### Configuration\n\n`docker container run --rm --entrypoint dotnet my-worker:latest --info`\r\n```\r\nHost:\r\n  Version:      8.0.0\r\n  Architecture: x64\r\n  Commit:       5535e31a71\r\n  RID:          linux-x64\r\n\r\n.NET SDKs installed:\r\n  No SDKs were found.\r\n\r\n.NET runtimes installed:\r\n  Microsoft.AspNetCore.App 8.0.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 8.0.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nOther architectures found:\r\n  None\r\n\r\nEnvironment variables:\r\n  Not set\r\n\r\nglobal.json file:\r\n  Not found\r\n```\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003egeorg-jung\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Extensions-FileSystem`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-05T12:14:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tvXzE",
                                           "createdAt":  "2023-12-05T16:22:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I don\u0027t have (or don\u0027t remember) context, but is there already an established pattern in file watcher for exceptions on its threadpool threads? If so any interest in offering a PR applying it in this path?",
                                           "updatedAt":  "2023-12-05T16:22:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uFLnE",
                                           "createdAt":  "2023-12-08T09:30:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODPV1wA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joel-jeremy",
                                                                               "createdAt":  "2023-12-12T18:13:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "georg-jung",
                                           "body":  "Sorry for the delay. I don\u0027t think there is a very clear established pattern. \r\n\r\n### FileSystemWatcher\r\n\r\nIf `PhysicalFileWatcher` uses the FileSystemWatcher backend, it handles the [`FileSystemWatcher.Error Event`](https://learn.microsoft.com/en-us/dotnet/api/system.io.filesystemwatcher.error), which\u0027s docs read (emphasis mine):\r\n\r\n\u003e This event is raised whenever something prevents the [FileSystemWatcher](https://learn.microsoft.com/en-us/dotnet/api/system.io.filesystemwatcher?view=net-8.0) object from monitoring changes. For example, if the object is *monitoring changes in a remote directory and the connection to that directory is lost*, the [Error](https://learn.microsoft.com/en-us/dotnet/api/system.io.filesystemwatcher.error?view=net-8.0#system-io-filesystemwatcher-error) event is raised.\r\n\r\nIn that case, [the listeners will be notified](https://github.com/dotnet/runtime/blob/d7375b05ff2588884a4d2f4374d41cdbb9f07d27/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFilesWatcher.cs#L327-L334):\r\n\r\n```csharp\r\nprivate void OnError(object sender, ErrorEventArgs e)\r\n{\r\n    // Notify all cache entries on error.\r\n    foreach (string path in _filePathTokenLookup.Keys)\r\n    {\r\n        ReportChangeForMatchedEntries(path);\r\n    }\r\n}\r\n```\r\n\r\n### Polling\r\n\r\nThe polling implementations `PollingWildCardChangeToken.cs` and `PollingFileChangeToken.cs` do however not contain any try-catch blocks at all.\r\n\r\n### How to proceed\r\n\r\nFrom the top of my head there are multiple options:\r\n* Make `PollingWildCardChangeToken` and `PollingFileChangeToken` signal on error. They are public types though and if they are not used in the context of `PhysicalFileWatcher`, errors can be catched when `get`ing the `HasChanged` property\u0027s value.\r\n* Add some OnError mechanism to `PollingWildCardChangeToken` and `PollingFileChangeToken`. This would be a new public API though.\r\n* Just have a try-catch-block in `PhysicalFilesWatcher` [where it polls the tokens](https://github.com/dotnet/runtime/blob/d7375b05ff2588884a4d2f4374d41cdbb9f07d27/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFilesWatcher.cs#L478). This would get the polling behaviour in line with `FileSystemWatcher`-backed instances. It also wouldn\u0027t add/change any public API surface. It also wouldn\u0027t change any public API\u0027s behaviour - except from not taking down processes due to uncatchable exceptions on the thread pool - and signalling  the listeners instead.\r\n\r\nThus the third option seems to be preferrable to me. It also seems like an almost non-invasive change (any chance to get this in a servicing release?) to me.\r\n\r\nI\u0027d be happy to create a PR when we agree on how to proceed 👍.",
                                           "updatedAt":  "2023-12-08T09:30:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ua_N9",
                                           "createdAt":  "2023-12-12T18:15:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEce4-A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "georg-jung",
                                                                               "createdAt":  "2023-12-12T18:16:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sbs-dev1",
                                                                               "createdAt":  "2025-07-30T12:25:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "joel-jeremy",
                                           "body":  "+1 to this. I have also encountered the same problem there is currently no way to recover when the connection to the remote directory is lost.  ",
                                           "updatedAt":  "2023-12-12T18:15:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5urUIt",
                                           "createdAt":  "2023-12-14T22:44:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "\u003e If PhysicalFileWatcher uses the FileSystemWatcher backend, it handles the FileSystemWatcher.Error Event\r\n\r\nThere are also uncaught exceptions on FSW when certain folders can\u0027t be enumerated, see callstack in https://github.com/dotnet/runtime/issues/91879.",
                                           "updatedAt":  "2023-12-14T22:44:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5urZlO",
                                           "createdAt":  "2023-12-14T22:53:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "There\u0027s a 4th option, `DirectoryInfoWrapper` uses `_directoryInfo.EnumerateFileSystemInfos(\"*\", SearchOption.TopDirectoryOnly)` that doesn\u0027t enable [`EnumerationOptions.IgnoreInaccessible`](https://learn.microsoft.com/dotnet/api/system.io.enumerationoptions.ignoreinaccessible). I would expect that using such option could fix this case.\r\n\r\nHowever, it\u0027s been historically annoying to deal with unexpected exception in `RaiseChangeEvents`: \r\n* The issues you linked.\r\n* https://github.com/dotnet/runtime/issues/41737\r\n* https://github.com/dotnet/runtime/issues/65829\r\n\r\nWrapping the whole method body in a try-catch could also be best if its safe to do so.",
                                           "updatedAt":  "2023-12-14T22:54:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uuIpk",
                                           "createdAt":  "2023-12-15T09:54:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "georg-jung",
                                           "body":  "Judging from it\u0027s docs alone I don\u0027t think using `IgnoreInaccessible` would fix cases where a network share goes down:\r\n\r\n\u003e Gets or sets a value that indicates whether to skip files or directories when access is denied (for example, [UnauthorizedAccessException](https://learn.microsoft.com/en-us/dotnet/api/system.unauthorizedaccessexception?view=net-8.0) or [SecurityException](https://learn.microsoft.com/en-us/dotnet/api/system.security.securityexception?view=net-8.0)).\r\n\r\nLooking at [it\u0027s source](https://github.com/dotnet/runtime/blob/99cfd79e7c8e8d42bc2c55f6662d64c74cbe8428/src/libraries/System.Private.CoreLib/src/System/IO/Enumeration/FileSystemEnumerator.Unix.cs#L65) I\u0027m unsure for which cases `EBADF` stands. The explicit \"Host is down\" message in my original stack trace could however indicate the internal error code is rather [`Error_EHOSTDOWN`](https://github.com/dotnet/runtime/blob/99cfd79e7c8e8d42bc2c55f6662d64c74cbe8428/src/native/libs/Common/pal_error_common.h#L116C19-L116C19). Which means, if I understand it correctly, option 4 wouldn\u0027t fix this issue.",
                                           "updatedAt":  "2023-12-15T09:54:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5uxQTR",
                                           "createdAt":  "2023-12-15T19:45:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "I see, unless we modify `IgnoreInaccessible` on Linux, option 4 won\u0027t work. @georg-jung would you like to explore option 3 and send a PR?",
                                           "updatedAt":  "2023-12-15T19:45:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc667PWn",
                                           "createdAt":  "2025-07-30T12:29:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sbs-dev1",
                                           "body":  "Any updates on this issue? We are observing a few similar crashes and see no way of recovering from it while using the current active polling functionality.",
                                           "updatedAt":  "2025-07-30T12:29:44Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.RaiseChangeEvents throws uncatchable IOException on thread pool thread",
        "labels":  [
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96300",
        "createdAt":  "2023-12-25T00:48:15Z",
        "number":  96300,
        "author":  "thompson-tomo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-03T02:45:46Z",
        "body":  "## Is there an existing issue for this?\nI have searched the existing issues but can\u0027t find one\n\n## Is your feature request related to a problem? Please describe the problem. \nI would like that when I call the file provider methods that where appropriate a metric is recorded with corresponding metadata as described below.\n\n## Describe the solution you\u0027d like\nFor instance the following actions should produce metrics with the action able to filtered:\n- reading (access)\n- update (change)\n- write (creation)\n- delete (deletion)\n- info\n\nAdditional filters Can be applied based on file/folder\n\n## Additional context\nNo response",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOb2HeFQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5vYd4V",
                                           "createdAt":  "2023-12-25T02:53:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Is there an existing issue for this?\nI have searched the existing issues but can\u0027t find one\n\n## Is your feature request related to a problem? Please describe the problem. \nI would like that when I call the file provider methods that where appropriate a metric is recorded with corresponding metadata.\n\n## Describe the solution you\u0027d like\nFor instance the following should produce metrics:\n- reading (access)\n- update (change)\n- write (creation)\n- delete (deletion)\n- info\n\n## Additional context\nNo response\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ethompson-tomo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-FileSystem`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-25T02:53:58Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "File Providers should produce metrics/events",
        "labels":  [
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97333",
        "createdAt":  "2024-01-22T17:58:19Z",
        "number":  97333,
        "author":  "StefanBertels",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-28T06:27:39Z",
        "body":  "### Description\r\n\r\nWhen using patterns like `a*\\b*\\c*.ext` the results contain stems with increasing length, containing parts of previous results.\r\n\r\n### Reproduction Steps\r\n\r\n```\r\nvar matcher = new Microsoft.Extensions.FileSystemGlobbing.Matcher(StringComparison.OrdinalIgnoreCase);\r\nmatcher.AddInclude(@\"sys*\\1*\\*.dll\");\r\nmatcher.AddExclude(@\"systemtemp\");\r\nmatcher.AddExclude(@\"systemtemp\\*\");\r\nvar result = matcher.Execute(new Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper(new DirectoryInfo(@\"c:\\windows\")));\r\nforeach (var element in result.Files.Take(7)) // just output first 7 lines\r\n{\r\n    Console.WriteLine(element.Stem + \" =\u003e \" + element.Path);\r\n}\r\n```\r\n\r\nMy hard disk contains these files:\r\n\r\n```\r\nC:\\Windows\\System32\\1028\\VsGraphicsResources.dll\r\nC:\\Windows\\System32\\1028\\vsjitdebuggerui.dll\r\nC:\\Windows\\System32\\1029\\VsGraphicsResources.dll\r\nC:\\Windows\\System32\\1029\\vsjitdebuggerui.dll\r\nC:\\Windows\\System32\\1031\\VsGraphicsResources.dll\r\nC:\\Windows\\System32\\1031\\vsjitdebuggerui.dll\r\nC:\\Windows\\System32\\1033\\VsGraphicsResources.dll\r\nC:\\Windows\\System32\\1033\\vsjitdebuggerui.dll\r\n...\r\n```\r\n\r\n### Expected behavior\r\n\r\nOutput should look like\r\n\r\n```\r\nSystem32/1028/VsGraphicsResources.dll =\u003e System32/1028/VsGraphicsResources.dll\r\nSystem32/1028/vsjitdebuggerui.dll =\u003e System32/1028/vsjitdebuggerui.dll                                                               \r\nSystem32/1029/VsGraphicsResources.dll =\u003e System32/1029/VsGraphicsResources.dll                                                  \r\nSystem32/1029/vsjitdebuggerui.dll =\u003e System32/1029/vsjitdebuggerui.dll                                                          \r\nSystem32/1031/VsGraphicsResources.dll =\u003e System32/1031/VsGraphicsResources.dll                                             \r\nSystem32/1031/vsjitdebuggerui.dll =\u003e System32/1031/vsjitdebuggerui.dll                                                     \r\nSystem32/1033/VsGraphicsResources.dll =\u003e System32/1033/VsGraphicsResources.dll     \r\n```\r\n\r\n### Actual behavior\r\n\r\nOutput looks like\r\n\r\n```\r\nSystem32/1028/VsGraphicsResources.dll =\u003e System32/1028/VsGraphicsResources.dll\r\nSystem32/1028/vsjitdebuggerui.dll =\u003e System32/1028/vsjitdebuggerui.dll                                                               \r\nSystem32/1028/1029/VsGraphicsResources.dll =\u003e System32/1029/VsGraphicsResources.dll                                                  \r\nSystem32/1028/1029/vsjitdebuggerui.dll =\u003e System32/1029/vsjitdebuggerui.dll                                                          \r\nSystem32/1028/1029/1031/VsGraphicsResources.dll =\u003e System32/1031/VsGraphicsResources.dll                                             \r\nSystem32/1028/1029/1031/vsjitdebuggerui.dll =\u003e System32/1031/vsjitdebuggerui.dll                                                     \r\nSystem32/1028/1029/1031/1033/VsGraphicsResources.dll =\u003e System32/1033/VsGraphicsResources.dll     \r\n```\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 8.0.101\r\nWin 10 22H2 (OS Build 19045.3930)\r\nx64\r\nFilesystemGlobbing v8.0.0\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcYUlZQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5xhSVl",
                                           "createdAt":  "2024-01-22T18:16:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nWhen using patterns like `a*\\b*\\c*.ext` the results contain stems with increasing length, containing parts of previous results.\r\n\r\n### Reproduction Steps\r\n\r\n```\r\nvar matcher = new Microsoft.Extensions.FileSystemGlobbing.Matcher(StringComparison.OrdinalIgnoreCase);\r\nmatcher.AddInclude(@\"sys*\\1*\\*.dll\");\r\nmatcher.AddExclude(@\"systemtemp\");\r\nmatcher.AddExclude(@\"systemtemp\\*\");\r\nvar result = matcher.Execute(new Microsoft.Extensions.FileSystemGlobbing.Abstractions.DirectoryInfoWrapper(new DirectoryInfo(@\"c:\\windows\")));\r\nforeach (var element in result.Files.Take(7)) // just output first 7 lines\r\n{\r\n    Console.WriteLine(element.Stem + \" =\u003e \" + element.Path);\r\n}\r\n```\r\n\r\nMy hard disk contains these files:\r\n\r\n```\r\nC:\\Windows\\System32\\1028\\VsGraphicsResources.dll\r\nC:\\Windows\\System32\\1028\\vsjitdebuggerui.dll\r\nC:\\Windows\\System32\\1029\\VsGraphicsResources.dll\r\nC:\\Windows\\System32\\1029\\vsjitdebuggerui.dll\r\nC:\\Windows\\System32\\1031\\VsGraphicsResources.dll\r\nC:\\Windows\\System32\\1031\\vsjitdebuggerui.dll\r\nC:\\Windows\\System32\\1033\\VsGraphicsResources.dll\r\nC:\\Windows\\System32\\1033\\vsjitdebuggerui.dll\r\n...\r\n```\r\n\r\n### Expected behavior\r\n\r\nOutput should look like\r\n\r\n```\r\nSystem32/1028/VsGraphicsResources.dll =\u003e System32/1028/VsGraphicsResources.dll\r\nSystem32/1028/vsjitdebuggerui.dll =\u003e System32/1028/vsjitdebuggerui.dll                                                               \r\nSystem32/1029/VsGraphicsResources.dll =\u003e System32/1029/VsGraphicsResources.dll                                                  \r\nSystem32/1029/vsjitdebuggerui.dll =\u003e System32/1029/vsjitdebuggerui.dll                                                          \r\nSystem32/1031/VsGraphicsResources.dll =\u003e System32/1031/VsGraphicsResources.dll                                             \r\nSystem32/1031/vsjitdebuggerui.dll =\u003e System32/1031/vsjitdebuggerui.dll                                                     \r\nSystem32/1033/VsGraphicsResources.dll =\u003e System32/1033/VsGraphicsResources.dll     \r\n```\r\n\r\n### Actual behavior\r\n\r\nOutput looks like\r\n\r\n```\r\nSystem32/1028/VsGraphicsResources.dll =\u003e System32/1028/VsGraphicsResources.dll\r\nSystem32/1028/vsjitdebuggerui.dll =\u003e System32/1028/vsjitdebuggerui.dll                                                               \r\nSystem32/1028/1029/VsGraphicsResources.dll =\u003e System32/1029/VsGraphicsResources.dll                                                  \r\nSystem32/1028/1029/vsjitdebuggerui.dll =\u003e System32/1029/vsjitdebuggerui.dll                                                          \r\nSystem32/1028/1029/1031/VsGraphicsResources.dll =\u003e System32/1031/VsGraphicsResources.dll                                             \r\nSystem32/1028/1029/1031/vsjitdebuggerui.dll =\u003e System32/1031/vsjitdebuggerui.dll                                                     \r\nSystem32/1028/1029/1031/1033/VsGraphicsResources.dll =\u003e System32/1033/VsGraphicsResources.dll     \r\n```\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n.NET 8.0.101\r\nWin 10 22H2 (OS Build 19045.3930)\r\nx64\r\nFilesystemGlobbing v8.0.0\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eStefanBertels\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-Extensions-FileSystem`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-22T18:16:09Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "FileSystemGlobbingMatcher produces wrong stems",
        "labels":  [
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99406",
        "createdAt":  "2024-03-07T12:22:52Z",
        "number":  99406,
        "author":  "1009058470",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-09T02:36:06Z",
        "body":  "### Description\n\nI am follow [this](https://blog.maartenballiauw.be/post/2021/05/25/running-a-net-application-as-a-service-on-linux-with-systemd.html) to build a unix service, but when i to kill them and start them sometimes, it also give a error like this Error: No space left on device, and then i try to increase the fs.inotify to a bigger number, it not show that error, but another thing appear that is the very slowly to exec Host.CreateDefaultBuilder(args) .ConfigureServices((hostContext, services) =\u003e { services.AddHostedService\u003cT\u003e(); }).UseSystemd().StartAsync()\r\nI wirte a timer in StartAsync like this\r\n\r\n        public override Task StartAsync(CancellationToken cancellationToken)\r\n        {\r\n            Console.WriteLine(\"call image worker start\");\r\n            Task.Factory.StartNew(CallImageAction, cancellationToken, TaskCreationOptions.LongRunning, TaskScheduler.Default);\r\n            return base.StartAsync(cancellationToken);\r\n        }\r\nCallImageAction is a function to run a timer\r\n\r\nI run them as service like this `systemctl start xxx.service` and then it run warn `no space left on device` and i find this in linux \r\n`“By default, Linux only allocates 8192 watches for inotify, which is ridiculously low. And when it runs out, the error is also No space left on device, which may be confusing if you aren\u0027t explicitly looking for this issue.”`\r\n\r\nSo i change the `fs.inotify.max_user_watches = 8192` in `/etc/sysctl.conf`\r\nand then i rerun the service and then the worker do not run \n\n### Reproduction Steps\n\nchange the `fs.inotify.max_user_watches = 8192` in `/etc/sysctl.conf`\r\nand then i rerun the service and then the worker do not run \n\n### Expected behavior\n\nwhen change the  `fs.inotify.max_user_watches = 8192` in `/etc/sysctl.conf` and make the program as a linux service, it can run the service\n\n### Actual behavior\n\nit seem it do not run the real worker in `StartAsync` in `BackgroundService`\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbdNDw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc52SLpZ",
                                           "createdAt":  "2024-03-07T21:07:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "\u003e change the fs.inotify.max_user_watches = 8192 in /etc/sysctl.conf\r\n\r\nIsn\u0027t this an environmental issue? In other words, not a bug in the library.",
                                           "updatedAt":  "2024-03-07T21:07:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52U-GX",
                                           "createdAt":  "2024-03-08T07:49:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "1009058470",
                                           "body":  "\u003e \u003e change the fs.inotify.max_user_watches = 8192 in /etc/sysctl.conf\r\n\u003e \r\n\u003e Isn\u0027t this an environmental issue? In other words, not a bug in the library.\r\n\r\nwell, if change that, the program can not be run, it seem it will have a long time in running something in start the ` Microsoft.Extensions.Hosting.BackgroundService`",
                                           "updatedAt":  "2024-03-08T07:49:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52VDA4",
                                           "createdAt":  "2024-03-08T08:05:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "1009058470",
                                           "body":  "it seems it run a long time on `Host.CreateDefaultBuilder(args)\r\n                            .ConfigureServices((hostContext, services) =\u003e\r\n                            {\r\n                                services.AddHostedService\u003cT\u003e();\r\n                            }).UseSystemd().StartAsync();`",
                                           "updatedAt":  "2024-03-08T08:05:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56-UzG",
                                           "createdAt":  "2024-04-18T06:59:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "1009058470",
                                           "body":  "When i try to using a `dotnet-stack` to view them stack and i find this \r\n```\r\nThread (0x63D11):\r\n  [Native Frames]\r\n  System.Private.CoreLib!System.Threading.Thread.Sleep(int32)\r\n  CallImageServer!CallImageServer.CallImageMain.Main(class System.String[])\r\n\r\n**Thread (0x63D1D):\r\n  [Native Frames]\r\n  System.IO.FileSystem.Watcher!System.IO.FileSystemWatcher+RunningInstance.TryReadEvent(value class NotifyEvent\u0026)\r\n  System.IO.FileSystem.Watcher!System.IO.FileSystemWatcher+RunningInstance.ProcessEvents()\r\n  System.IO.FileSystem.Watcher!System.IO.FileSystemWatcher+RunningInstance+\u003c\u003ec.\u003cStart\u003eb__14_0(class System.Object)\r\n  System.Private.CoreLib!System.Threading.Tasks.Task.InnerInvoke()\r\n  System.Private.CoreLib!System.Threading.Tasks.Task+\u003c\u003ec.\u003c.cctor\u003eb__277_0(class System.Object)\r\n  System.Private.CoreLib!System.Threading.ExecutionContext.RunInternal(class System.Threading.ExecutionContext,class System.Threading.ContextCallback,class System.Object)**\r\n  System.Private.CoreLib!System.Threading.Tasks.Task.ExecuteWithThreadLocal(class System.Threading.Tasks.Task\u0026,class System.Threading.Thread)\r\n  System.Private.CoreLib!System.Threading.Tasks.Task.ExecuteEntryUnsafe(class System.Threading.Thread)\r\n  System.Private.CoreLib!System.Threading.Tasks.ThreadPoolTaskScheduler+\u003c\u003ec.\u003c.cctor\u003eb__10_0(class System.Object)\r\n  System.Private.CoreLib!System.Threading.ThreadHelper.ThreadStart_Context(class System.Object)\r\n  System.Private.CoreLib!System.Threading.ExecutionContext.RunInternal(class System.Threading.ExecutionContext,class System.Threading.ContextCallback,class System.Object)\r\n  System.Private.CoreLib!System.Threading.ThreadHelper.ThreadStart(class System.Object)\r\n\r\nThread (0x63D1E):\r\n  [Native Frames]\r\n  System.Private.CoreLib!System.Threading.SemaphoreSlim.WaitUntilCountOrTimeout(int32,unsigned int32,value class System.Threading.CancellationToken)\r\n  System.Private.CoreLib!System.Threading.SemaphoreSlim.Wait(int32,value class System.Threading.CancellationToken)\r\n  System.Collections.Concurrent!System.Collections.Concurrent.BlockingCollection`1[Microsoft.Extensions.Logging.Console.LogMessageEntry].TryTakeWithNoTimeValidation(!0\u0026,int32,value class System.Threading.CancellationToken,class System.Threading.CancellationTokenSource)\r\n  System.Collections.Concurrent!System.Collections.Concurrent.BlockingCollection`1+\u003cGetConsumingEnumerable\u003ed__68[Microsoft.Extensions.Logging.Console.LogMessageEntry].MoveNext()\r\n  Microsoft.Extensions.Logging.Console!Microsoft.Extensions.Logging.Console.ConsoleLoggerProcessor.ProcessLogQueue()\r\n  System.Private.CoreLib!System.Threading.ThreadHelper.ThreadStart_Context(class System.Object)\r\n  System.Private.CoreLib!System.Threading.ExecutionContext.RunInternal(class System.Threading.ExecutionContext,class System.Threading.ContextCallback,class System.Object)\r\n  System.Private.CoreLib!System.Threading.ThreadHelper.ThreadStart()\r\n\r\nThread (0x63DFB):\r\n  [Native Frames]\r\n  System.Net.Sockets!System.Net.Sockets.SocketAsyncEngine.EventLoop()\r\n  System.Net.Sockets!System.Net.Sockets.SocketAsyncEngine+\u003c\u003ec.\u003c.ctor\u003eb__14_0(class System.Object)\r\n  System.Private.CoreLib!System.Threading.ThreadHelper.ThreadStart(class System.Object)\r\n\r\nThread (0x63DFC):\r\n  [Native Frames]\r\n  System.Net.Sockets!System.Net.Sockets.SocketPal.TryCompleteAccept(class System.Net.Sockets.SafeSocketHandle,unsigned int8[],int32\u0026,int\u0026,value class System.Net.Sockets.SocketError\u0026)\r\n  System.Net.Sockets!System.Net.Sockets.SocketAsyncContext.Accept(unsigned int8[],int32\u0026,int\u0026)\r\n  System.Net.Sockets!System.Net.Sockets.SocketPal.Accept(class System.Net.Sockets.SafeSocketHandle,unsigned int8[],int32\u0026,class System.Net.Sockets.SafeSocketHandle\u0026)\r\n  System.Net.Sockets!System.Net.Sockets.Socket.Accept()\r\n  System.Net.Sockets!System.Net.Sockets.TcpListener.AcceptTcpClient()\r\n  TcpServer!TcpServer.TcpFileServer.ConnectAndListenAndSendFiles()\r\n  System.Private.CoreLib!System.Threading.ThreadHelper.ThreadStart_Context(class System.Object)\r\n  System.Private.CoreLib!System.Threading.ExecutionContext.RunInternal(class System.Threading.ExecutionContext,class System.Threading.ContextCallback,class System.Object)\r\n  System.Private.CoreLib!System.Threading.ThreadHelper.ThreadStart()\r\n```\r\n\r\nMaybe is that `FileSystemWatcher` to cause this?",
                                           "updatedAt":  "2024-04-18T06:59:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FueOX",
                                           "createdAt":  "2024-07-22T18:20:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-22T18:20:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dt00P",
                                           "createdAt":  "2025-02-09T02:35:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGd1wg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "1009058470",
                                                                               "createdAt":  "2025-02-15T06:58:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "I do not expect our team to be able to investigate this ourselves. I\u0027m marking it as https://github.com/dotnet/runtime/labels/help%20wanted to invite further investigation and root cause analysis.",
                                           "updatedAt":  "2025-02-09T02:35:56Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Linux Platform All net version area-Extensions-Hosting  `Microsoft.Extensions.Hosting.Systemd`",
        "labels":  [
                       "help wanted",
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99691",
        "createdAt":  "2024-03-13T14:35:09Z",
        "number":  99691,
        "author":  "grantparker77",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-21T21:33:56Z",
        "body":  "### Description\r\n\r\nInMemoryDirectoryInfo does not work with the \"..\" pattern.  DirectoryInfoWrapper, however, works as expected.  I believe the problem is that the FullName does not get normalized in the private constructor when called with normalized=true and thefore has a trailing \"..\".\r\n\r\n### Reproduction Steps\r\n\r\n```\r\n/*\r\n * - C:\\\r\n *     - Folder1\r\n *         - File1.txt\r\n *     - Folder2\r\n *         - File2.txt\r\n */\r\n\r\n// Initialize\r\nvar rootDir = \"C:/Folder1\";\r\nvar matcher = new Matcher();\r\nmatcher.AddInclude(\"../Folder2/**\");\r\n\r\n// Test #1 - GOOD\r\nvar result = matcher.Execute(new DirectoryInfoWrapper(new DirectoryInfo(rootDir)));\r\nDebug.Assert(result.HasMatches); // \u003c== Good\r\n\r\n// Test #2 - BAD\r\nresult = matcher.Execute(new InMemoryDirectoryInfo(rootDir, new[] { \"C:/Folder1/File1.txt\", \"C:/Folder2/File2.txt\" }));\r\nDebug.Assert(result.HasMatches); // \u003c== Bad\r\n```\r\n\r\n### Expected behavior\r\n\r\nInMemoryDirectoryInfo should work with \"..\" pattern.\r\n\r\n### Actual behavior\r\n\r\nInMemoryDirectoryInfo  does not work with the \"..\" pattern.  DirectoryInfoWrapper, however, works as expected.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nThis is a hacky workaround I came up with.  Use at your on risk.\r\n\r\n```\r\n/// \u003csummary\u003e\r\n/// The InMemoryDirectoryInfo does not handle \"..\" correctly because the FullName does not get normalized\r\n/// when calling the private constructor with normalized = true. For exammple, the path looks like\r\n/// \"C:\\Path1\\Path2\\..\" when it should have been transformed into \"C:\\Path1\".  I have reported this bug\r\n/// here:  https://github.com/dotnet/runtime/issues/99691.\r\n/// \u003c/summary\u003e\r\ninternal class InMemoryDirectoryInfoBugFix : InMemoryDirectoryInfo\r\n{\r\n    private static readonly FieldInfo _filesField = typeof(InMemoryDirectoryInfo).GetField(\"_files\", BindingFlags.Instance | BindingFlags.NonPublic)!;\r\n\r\n    public InMemoryDirectoryInfoBugFix(string rootDir, IEnumerable\u003cstring\u003e? files)\r\n        : base(rootDir, files)\r\n    {\r\n    }\r\n\r\n    private InMemoryDirectoryInfoBugFix(DirectoryInfoBase parentDirectory)\r\n        : this(parentDirectory.FullName, null)\r\n    {\r\n        // Set here instead of passing above to avoid re-normalization of the file paths.\r\n        _filesField.SetValue(this, _filesField.GetValue(parentDirectory));\r\n    }\r\n\r\n    public override DirectoryInfoBase? ParentDirectory\r\n        =\u003e base.ParentDirectory is { } parent ? new InMemoryDirectoryInfoBugFix(parent) : null;\r\n\r\n    public override IEnumerable\u003cFileSystemInfoBase\u003e EnumerateFileSystemInfos()\r\n        =\u003e base.EnumerateFileSystemInfos().Select(x =\u003e x is InMemoryDirectoryInfo dir ? new InMemoryDirectoryInfoBugFix(dir) : x);\r\n\r\n    public override DirectoryInfoBase GetDirectory(string path)\r\n        =\u003e new InMemoryDirectoryInfoBugFix(base.GetDirectory(path));\r\n}\r\n```\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOduJerg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc524l6u",
                                           "createdAt":  "2024-03-13T14:35:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-13T14:35:26Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo does not work with the \"..\" pattern.",
        "labels":  [
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100872",
        "createdAt":  "2024-04-10T16:41:47Z",
        "number":  100872,
        "author":  "CodeBlanch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-03T01:57:36Z",
        "body":  "I\u0027m working with a user reporting a bug in OpenTelemetry .NET. It seems some file system change is triggering an `IConfiguration` reload which is manifesting a bug in OpenTelemetry causing some resources to be created (background threads) which aren\u0027t ever used or cleaned up. We\u0027re fixing that bug in OpenTelemetry but so far we haven\u0027t been able to figure out why that configuration reload is firing.\r\n\r\nIn the call stack we see:\r\n\r\n```\r\nMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher..cctor.AnonymousMethod__43_0(object state) Line 29\tC#\r\n```\r\n\r\n* User is on .NET 6.\r\n* User is calling `Host.CreateDefaultBuilder(args)` to create their host.\r\n* User isn\u0027t using any `appSettings.json` files.\r\n\r\nI\u0027m wondering if we could add some `EventSource` info/verbose logging inside `PhysicalFilesWatcher` to help troubleshoot issues in the future.\r\n\r\nOTel issue: https://github.com/open-telemetry/opentelemetry-dotnet/issues/5513\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eMore of the stack trace\u003c/summary\u003e\r\n\r\n```\r\n        ...user portion removed...\r\n \tMicrosoft.Extensions.Options.dll!Microsoft.Extensions.Options.ConfigureNamedOptions\u003cSystem.__Canon\u003e.Configure(string name, System.__Canon options) Line 49\tC#\r\n \tMicrosoft.Extensions.Options.dll!Microsoft.Extensions.Options.OptionsFactory\u003cOpenTelemetry.Logs.OpenTelemetryLoggerOptions\u003e.Create(string name) Line 87\tC#\r\n \tMicrosoft.Extensions.Options.dll!Microsoft.Extensions.Options.OptionsMonitor\u003cOpenTelemetry.Logs.OpenTelemetryLoggerOptions\u003e.Get.AnonymousMethod__10_0(string name, Microsoft.Extensions.Options.IOptionsFactory\u003cOpenTelemetry.Logs.OpenTelemetryLoggerOptions\u003e factory) Line 94\tC#\r\n \tMicrosoft.Extensions.Options.dll!Microsoft.Extensions.Options.OptionsCache\u003cSystem.__Canon\u003e.GetOrAdd.AnonymousMethod__2() Line 68\tC#\r\n \tSystem.Private.CoreLib.dll!System.Lazy\u003cOpenTelemetry.Logs.OpenTelemetryLoggerOptions\u003e.ViaFactory(System.Threading.LazyThreadSafetyMode mode) Line 321\tC#\r\n \tSystem.Private.CoreLib.dll!System.Lazy\u003cOpenTelemetry.Logs.OpenTelemetryLoggerOptions\u003e.ExecutionAndPublication(System.LazyHelper executionAndPublication, bool useDefaultConstructor) Line 345\tC#\r\n \tSystem.Private.CoreLib.dll!System.Lazy\u003cOpenTelemetry.Logs.OpenTelemetryLoggerOptions\u003e.CreateValue() Line 433\tC#\r\n \tSystem.Private.CoreLib.dll!System.Lazy\u003cSystem.__Canon\u003e.Value.get() Line 505\tC#\r\n \tMicrosoft.Extensions.Options.dll!Microsoft.Extensions.Options.OptionsCache\u003cOpenTelemetry.Logs.OpenTelemetryLoggerOptions\u003e.GetOrAdd\u003cMicrosoft.Extensions.Options.IOptionsFactory\u003cOpenTelemetry.Logs.OpenTelemetryLoggerOptions\u003e\u003e(string name, System.Func\u003cstring, Microsoft.Extensions.Options.IOptionsFactory\u003cOpenTelemetry.Logs.OpenTelemetryLoggerOptions\u003e, OpenTelemetry.Logs.OpenTelemetryLoggerOptions\u003e createOptions, Microsoft.Extensions.Options.IOptionsFactory\u003cOpenTelemetry.Logs.OpenTelemetryLoggerOptions\u003e factoryArgument) Line 66\tC#\r\n \tMicrosoft.Extensions.Options.dll!Microsoft.Extensions.Options.OptionsMonitor\u003cOpenTelemetry.Logs.OpenTelemetryLoggerOptions\u003e.Get(string name) Line 94\tC#\r\n \tMicrosoft.Extensions.Options.dll!Microsoft.Extensions.Options.OptionsMonitor\u003cOpenTelemetry.Logs.OpenTelemetryLoggerOptions\u003e.InvokeChanged(string name) Line 68\tC#\r\n \tMicrosoft.Extensions.Primitives.dll!Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration\u003cstring\u003e.OnChangeTokenFired() Line 87\tC#\r\n \tMicrosoft.Extensions.Primitives.dll!Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration\u003cstring\u003e.RegisterChangeTokenCallback.AnonymousMethod__7_0(object s) Line 103\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.Invoke(System.Delegate d, object state, System.Threading.CancellationTokenSource source) Line 902\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.CallbackNode.ExecuteCallback.AnonymousMethod__9_0(object s) Line 1139\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) Line 183\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.CallbackNode.ExecuteCallback() Line 1141\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.ExecuteCallbackHandlers(bool throwOnFirstException) Line 722\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.NotifyCancellation(bool throwOnFirstException) Line 639\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.Cancel() Line 221\tC#\r\n \tMicrosoft.Extensions.Configuration.dll!Microsoft.Extensions.Configuration.ConfigurationReloadToken.OnReload() Line 41\tC#\r\n \tMicrosoft.Extensions.Configuration.dll!Microsoft.Extensions.Configuration.ConfigurationRoot.RaiseChanged() Line 93\tC#\r\n \tMicrosoft.Extensions.Primitives.dll!Microsoft.Extensions.Primitives.ChangeToken.OnChange.AnonymousMethod__0_0(System.Action callback) Line 32\tC#\r\n \tMicrosoft.Extensions.Primitives.dll!Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration\u003cSystem.Action\u003e.OnChangeTokenFired() Line 87\tC#\r\n \tMicrosoft.Extensions.Primitives.dll!Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration\u003cSystem.Action\u003e.RegisterChangeTokenCallback.AnonymousMethod__7_0(object s) Line 103\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.Invoke(System.Delegate d, object state, System.Threading.CancellationTokenSource source) Line 902\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.CallbackNode.ExecuteCallback.AnonymousMethod__9_0(object s) Line 1139\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) Line 183\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.CallbackNode.ExecuteCallback() Line 1141\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.ExecuteCallbackHandlers(bool throwOnFirstException) Line 722\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.NotifyCancellation(bool throwOnFirstException) Line 639\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.Cancel() Line 221\tC#\r\n \tMicrosoft.Extensions.Configuration.dll!Microsoft.Extensions.Configuration.ConfigurationReloadToken.OnReload() Line 41\tC#\r\n \tMicrosoft.Extensions.Configuration.dll!Microsoft.Extensions.Configuration.ConfigurationRoot.RaiseChanged() Line 93\tC#\r\n \tMicrosoft.Extensions.Primitives.dll!Microsoft.Extensions.Primitives.ChangeToken.OnChange.AnonymousMethod__0_0(System.Action callback) Line 32\tC#\r\n \tMicrosoft.Extensions.Primitives.dll!Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration\u003cSystem.Action\u003e.OnChangeTokenFired() Line 87\tC#\r\n \tMicrosoft.Extensions.Primitives.dll!Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration\u003cSystem.Action\u003e.RegisterChangeTokenCallback.AnonymousMethod__7_0(object s) Line 103\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.Invoke(System.Delegate d, object state, System.Threading.CancellationTokenSource source) Line 902\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.CallbackNode.ExecuteCallback.AnonymousMethod__9_0(object s) Line 1139\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) Line 183\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.CallbackNode.ExecuteCallback() Line 1141\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.ExecuteCallbackHandlers(bool throwOnFirstException) Line 722\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.NotifyCancellation(bool throwOnFirstException) Line 639\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.Cancel() Line 221\tC#\r\n \tMicrosoft.Extensions.Configuration.dll!Microsoft.Extensions.Configuration.ConfigurationReloadToken.OnReload() Line 41\tC#\r\n \tMicrosoft.Extensions.Configuration.dll!Microsoft.Extensions.Configuration.ConfigurationProvider.OnReload() Line 118\tC#\r\n \tMicrosoft.Extensions.Configuration.FileExtensions.dll!Microsoft.Extensions.Configuration.FileConfigurationProvider.Load(bool reload) Line 113\tC#\r\n \tMicrosoft.Extensions.Configuration.FileExtensions.dll!Microsoft.Extensions.Configuration.FileConfigurationProvider..ctor.AnonymousMethod__1_1() Line 40\tC#\r\n \tMicrosoft.Extensions.Primitives.dll!Microsoft.Extensions.Primitives.ChangeToken.OnChange.AnonymousMethod__0_0(System.Action callback) Line 32\tC#\r\n \tMicrosoft.Extensions.Primitives.dll!Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration\u003cSystem.Action\u003e.OnChangeTokenFired() Line 87\tC#\r\n \tMicrosoft.Extensions.Primitives.dll!Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration\u003cSystem.Action\u003e.RegisterChangeTokenCallback.AnonymousMethod__7_0(object s) Line 103\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.Invoke(System.Delegate d, object state, System.Threading.CancellationTokenSource source) Line 902\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.CallbackNode.ExecuteCallback() Line 1141\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.ExecuteCallbackHandlers(bool throwOnFirstException) Line 722\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.NotifyCancellation(bool throwOnFirstException) Line 639\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.CancellationTokenSource.Cancel() Line 221\tC#\r\n\u003e\tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher..cctor.AnonymousMethod__43_0(object state) Line 29\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.InnerInvoke() Line 2397\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.Tasks.Task..cctor.AnonymousMethod__272_0(object obj) Line 2376\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread threadPoolThread, System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state) Line 268\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot, System.Threading.Thread threadPoolThread) Line 2337\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread threadPoolThread) Line 2277\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.ThreadPoolWorkQueue.Dispatch() Line 790\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart() Line 63\tC#\r\n \tSystem.Private.CoreLib.dll!System.Threading.Thread.StartCallback() Line 106\tC#\r\n \t[Native to Managed Transition]\t\r\n```\r\n\u003c/details\u003e\r\n\r\n/cc @tarekgh",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOg2vyig==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Da_KK",
                                           "createdAt":  "2024-07-03T01:57:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "That method you are seeing seems to be spawned when a change token matches a path reported by the underlying FileSystemWatcher. I wonder if its possible that the PhysicalFilesWatcher is being disposed before the thread finish execution, not sure if that would cause problems. \r\nWhat\u0027s the error message?\r\nDo you have a consoleapp repro?",
                                           "updatedAt":  "2024-07-03T01:57:27Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "PhysicalFilesWatcher: Log file/path triggering a change notification",
        "labels":  [
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104823",
        "createdAt":  "2024-07-12T19:56:53Z",
        "number":  104823,
        "author":  "carlossanlop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T03:01:48Z",
        "body":  "## Build Information\r\n\r\nBuild: https://dev.azure.com/dnceng-public/public/public%20Team/_build/results?buildId=737840\r\nBuild error leg or test failing: `Libraries Test Run release coreclr windows x64 Debug` - `Microsoft.Extensions.FileProviders.Physical.Tests`\r\n\r\n## Error Message\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\" : [\r\n    \"System.UnauthorizedAccessException: Access to the path\",\r\n    \"PhysicalFilesWatcher.cs\"\r\n  ],\r\n  \"BuildRetry\" : false,\r\n  \"ExcludeConsoleLog\" : false\r\n}\r\n```\r\n\r\n- PR: https://github.com/dotnet/runtime/pull/104748\r\n- Queue: `Libraries Test Run release coreclr windows x64 Debug`\r\n- Job result: https://dev.azure.com/dnceng-public/public/_build/results?buildId=737840\u0026view=logs\u0026j=cb131f87-d5af-5ecc-6e5f-6dc86994859c\u0026t=76503e0a-8c41-542c-43da-63a4758a95b0\r\n- Log file: https://helixre107v0xd1eu3ibi6ka.blob.core.windows.net/dotnet-runtime-refs-pull-104748-merge-8ea65ffd74cf4a6f89/Microsoft.Extensions.FileProviders.Physical.Tests/1/console.bad6be3c.log?helixlogtype=result\r\n- Output:\r\n```\r\n===========================================================================================================\r\n\r\nC:\\h\\w\\BADD098E\\w\\B26B0998\\e\u003e\"C:\\h\\w\\BADD098E\\p\\dotnet.exe\" exec --runtimeconfig Microsoft.Extensions.FileProviders.Physical.Tests.runtimeconfig.json --depsfile Microsoft.Extensions.FileProviders.Physical.Tests.deps.json xunit.console.dll Microsoft.Extensions.FileProviders.Physical.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing  \r\n  Discovering: Microsoft.Extensions.FileProviders.Physical.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  Microsoft.Extensions.FileProviders.Physical.Tests (found 83 of 92 test cases)\r\n  Starting:    Microsoft.Extensions.FileProviders.Physical.Tests (parallel test collections = on, max threads = 2)\r\nUnhandled exception. System.UnauthorizedAccessException: Access to the path \u0027C:\\h\\w\\BADD098E\\t\\x3dfgyya.35z\\2visikrv.aco\u0027 is denied.\r\n   at System.IO.FileSystem.GetFinalLinkTarget(String linkPath, Boolean isDirectory) in /_/src/libraries/System.Private.CoreLib/src/System/IO/FileSystem.Windows.cs:line 585\r\n   at System.IO.FileSystem.ResolveLinkTarget(String linkPath, Boolean returnFinalTarget, Boolean isDirectory) in /_/src/libraries/System.Private.CoreLib/src/System/IO/FileSystem.Windows.cs:line 422\r\n   at System.IO.FileSystemInfo.ResolveLinkTarget(Boolean returnFinalTarget) in /_/src/libraries/System.Private.CoreLib/src/System/IO/FileSystemInfo.cs:line 170\r\n   at Microsoft.Extensions.FileProviders.Physical.FileSystemInfoHelper.GetFileLinkTargetLastWriteTimeUtc(FileInfo fileInfo) in /_/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/Internal/FileSystemInfoHelper.cs:line 56\r\n   at Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.GetLastWriteTimeUtc() in /_/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PollingFileChangeToken.cs:line 57\r\n   at Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.get_HasChanged() in /_/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PollingFileChangeToken.cs:line 101\r\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.RaiseChangeEvents(Object state) in /_/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFilesWatcher.cs:line 476\r\n   at System.Threading.TimerQueueTimer.Fire(Boolean isThreadPool) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Timer.cs:line 673\r\n   at System.Threading.TimerQueue.FireNextTimers() in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Timer.cs:line 326\r\n----- end Thu 07/11/2024 19:06:54.62 ----- exit code -532462766 ----------------------------------------------------------\r\n```\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhVJV2Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Esh1V",
                                           "createdAt":  "2024-07-12T19:57:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-12T19:57:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FUk43",
                                           "createdAt":  "2024-07-18T14:44:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-18T14:44:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6FUlXZ",
                                           "createdAt":  "2024-07-18T14:45:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "We have not touched this area in 6.0, so it must be some kind of rare flakiness. I am moving it to future for now.",
                                           "updatedAt":  "2024-07-18T14:45:41Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[6.0] Microsoft.Extensions.FileProviders.Physical.Tests failing to access a symlink used by PhysicalFilesWatcher",
        "labels":  [
                       "test-failure",
                       "os-windows",
                       "arch-x64",
                       "runtime-coreclr",
                       "area-Extensions-FileSystem",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107700",
        "createdAt":  "2024-09-11T17:52:50Z",
        "number":  107700,
        "author":  "genriquez",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-09T02:32:09Z",
        "body":  "### Description\r\n\r\nI\u0027ve come across an error situations where background tasks are left with unhandled/unobserved task exceptions when using `reloadOnChange: true` while using filesystem watcher (instead of polling). This happens after the config file and its containing folder are deleted.\r\n\r\nWe use dispatcher/unhandled/unobserved exception handlers to do bug reporting and terminate the application in a safe manner whenever possible. Currently there is no way to hook into any kind of callback to handle these exceptions and prevent them from bubbling up in background.\r\n\r\n### Reproduction Steps\r\n\r\nI\u0027ve created a small repro case. You can just run them with `dotnet run MSConfigCrashTests.csproj` and some basic console logging while happen showing the state of the config loaded, and what handlers were triggered:\r\n\r\n[repro-delete-fswatcher.zip](https://github.com/user-attachments/files/16967463/repro-delete-fswatcher.zip)\r\n\r\n\r\n\r\n### Expected behavior\r\n\r\nBackground exceptions should not be left to bubble up as UnobservedTaskExceptions. If not by default, at least there should be a way to hook a handler and prevent the exception from bubbling up, like load exceptions can be handled (see attached project):\r\n\r\n[update-fswatcher.zip](https://github.com/user-attachments/files/16967623/update-fswatcher.zip)\r\n\r\n### Actual behavior\r\n\r\nBackground exceptions trigger the `TaskScheduler.UnobservedTaskException` handler with no other way of handling them. The exception is as follows:\r\n\r\n```\r\nSystem.AggregateException: A Task\u0027s exception(s) were not observed either by Waiting on the Task or accessing its Exception property. As a result, the unobserved exception was rethrown by the finalizer thread. (One or more errors occurred. (Error reading the C:\\Users\\XXX\\AppData\\Local\\Temp\\testdir\\ directory.))\r\n ---\u003e System.AggregateException: One or more errors occurred. (Error reading the C:\\Users\\XXX\\AppData\\Local\\Temp\\testdir\\ directory.)\r\n ---\u003e System.IO.FileNotFoundException: Error reading the C:\\Users\\XXX\\AppData\\Local\\Temp\\testdir\\ directory.\r\n   at System.IO.FileSystemWatcher.StartRaisingEvents()\r\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.TryEnableFileSystemWatcher()\r\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(String filter)\r\n   at Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(String filter)\r\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.\u003c.ctor\u003eb__1_0()\r\n   at Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration`1.OnChangeTokenFired()\r\n   at Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration`1.\u003c\u003ec.\u003cRegisterChangeTokenCallback\u003eb__7_0(Object s)\r\n   at System.Threading.CancellationTokenSource.Invoke(Delegate d, Object state, CancellationTokenSource source)\r\n   at System.Threading.CancellationTokenSource.Register(Delegate callback, Object stateForCallback, SynchronizationContext syncContext, ExecutionContext executionContext)\r\n   at System.Threading.CancellationToken.Register(Delegate callback, Object state, Boolean useSynchronizationContext, Boolean useExecutionContext)\r\n   at System.Threading.CancellationToken.UnsafeRegister(Action`1 callback, Object state)\r\n   at Microsoft.Extensions.Internal.ChangeCallbackRegistrar.UnsafeRegisterChangeCallback[T](Action`1 callback, Object state, CancellationToken token, Action`1 onFailure, T onFailureState)\r\n   at Microsoft.Extensions.Primitives.CancellationChangeToken.RegisterChangeCallback(Action`1 callback, Object state)\r\n   at Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration`1.RegisterChangeTokenCallback(IChangeToken token)\r\n   at Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration`1.OnChangeTokenFired()\r\n   at Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration`1.\u003c\u003ec.\u003cRegisterChangeTokenCallback\u003eb__7_0(Object s)\r\n   at System.Threading.CancellationTokenSource.Invoke(Delegate d, Object state, CancellationTokenSource source)\r\n   at System.Threading.CancellationTokenSource.ExecuteCallbackHandlers(Boolean throwOnFirstException)\r\n   --- End of inner exception stack trace ---\r\n   at System.Threading.CancellationTokenSource.ExecuteCallbackHandlers(Boolean throwOnFirstException)\r\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.\u003c\u003ec.\u003c.cctor\u003eb__43_0(Object state)\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location ---\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task\u0026 currentTaskSlot, Thread threadPoolThread)\r\n   --- End of inner exception stack trace ---\r\n```\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\nTwo options:\r\n- Using polling with active polling seems to bypass this.\r\n- Wrapping the FileProvider so `Watch(string)` returns a wrapped `IChangeToken` that wraps actions passed to `RegisterChangeCallback(Action\u003cobject?\u003e,object?)` to add a try/catch.\r\n\r\n### Configuration\r\n\r\n``` \r\n$ dotnet --version\r\n8.0.200\r\n```\r\n\r\nRepro project is net6. Still repros if changed to net8.\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbdIkA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6LwNwF",
                                           "createdAt":  "2024-09-11T20:47:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-11T20:47:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LwPok",
                                           "createdAt":  "2024-09-11T20:52:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-11T20:52:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dt0iQ",
                                           "createdAt":  "2025-02-09T02:32:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Thank you for the detailed report and repro, @genriquez. I\u0027ve marked this as https://github.com/dotnet/runtime/labels/help%20wanted as I do not expect our team to be able to get to this during .NET 10.",
                                           "updatedAt":  "2025-02-09T02:32:08Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Microsoft.Extensions.Configuration.Json leaves unobserved task exceptions in background tasks when using reloadOnChange:true",
        "labels":  [
                       "help wanted",
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110969",
        "createdAt":  "2024-12-27T16:04:42Z",
        "number":  110969,
        "author":  "tradem",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-09T01:44:43Z",
        "body":  "### Background and motivation\n\nCurrently, PhysicalFileProvider provides a configurable file modification detector via PhysicalFilesWatcher wrapped by FilesystemWatcher and offers a polling feature on request (either by API or via environment variables).\n\nUnfortunately, IChangeToken hides file path information of the actual file changes to API user/client code. While information hiding is a quite common design technique, file path information may become quite useful for API users, especially when polling is the only option available to achieve modification tracking/observation and a fallback to a custom implementation based on (good-old) FilesystemWatcher is not an option.\n\nPlease consider to either enhance IPollingChangeToken to expose (physical) FileInfo or provide an extra IChangeToken which exposes file paths for all behaviors implemented in PhysicalFilesWatcher.\n\n### API Proposal\n\n```csharp\nnamespace Microsoft.Extensions.FileProviders.Physical\n{\n  \n    public class PollingFileChangeToken : IPollingChangeToken\n    {\n        private readonly FileInfo _fileInfo;\n        private DateTime _previousWriteTimeUtc;\n        private DateTime _lastCheckedTimeUtc;\n        private bool _hasChanged;\n        private CancellationTokenSource? _tokenSource;\n        private CancellationChangeToken? _changeToken;\n\n        public PollingFileChangeToken(FileInfo fileInfo)\n        {\n            _fileInfo = fileInfo;\n            _previousWriteTimeUtc = GetLastWriteTimeUtc();\n        }\n\n\n      public IFileInfo FileInfo =\u003e __fileInfo ;\n\n  }\n```\n\n\n### API Usage\n\n```csharp\n  PhysicalFileProviderfileProvider = new (Directory.GetCurrentDirectory());\n  CompositeChangeToken token = fileProvider.Watch(_fileFilter) as CompositeChangeToken ;\n  ConcurrentQueue\u003cIFileInfo\u003e changeList = new ();\n\n   token.RegisterChangeCallback(state =\u003e \n   {\n         IFileInfo[] modifcationList =  token.ChangeTokens\n                                             .Cast\u003cPollingFileChangeToken\u003e()\n                                             .Select(token =\u003e token.FileInfo )\n                                             .ToArray();\n   } , default);\n```\n\n**Drawback**: This approch might not be perfomant. Neither it provides an elegant solution.\n\n### Alternative Designs\n\nAlternativly please consider to extract polling feature as an independent (refactored/extracted) `PollingFilesystemWatcher` which offfers either  customized `IChangeToken` or Rx.NET support if  changing information hiding policy here violates `IChangeToken`  concept or any  SOLID principle , I might have missed in my orginal propoals (due to lack of insight and/or overview of your orginal design consideration and usage).\n\n```csharp\nnamespace Microsoft.Extensions.FileProviders.Physical\n{\n    /// \u003csummary\u003e\n    /// Watches a physical file system for changes and triggers events on\n    /// \u003csee cref=\"IChangeToken\" /\u003e when files are created, change, renamed, or deleted.\n    /// \u003c/summary\u003e\n    public class PhysicalFilesWatcher : IDisposable\n    {\n        \n          public IObserable\u003cIFileInfo\u003e WhenFileSystemEntryChange()  \n        \n    }\n```\n\nOr \n\n```csharp\nnamespace Microsoft.Extensions.FileProviders\n{\n    public interface IFileChangeToken : IChangeToken\n    {\n\n        public IFileInfo RootPath { get; }\n\n        IDisposable RegisterChangeCallback(Action\u003cIFileInfo?\u003e callback, object? state);\n\n    }\n}\n \n\n\nnamespace Microsoft.Extensions.FileProviders.Physical\n{\n   \n\n   /// \u003csummary\u003e\n    /// Watches a physical file system for changes and triggers events on\n    /// \u003csee cref=\"IChangeToken\" /\u003e when files are created, change, renamed, or deleted.\n    /// \u003c/summary\u003e\n    public class PhysicalFilesWatcher : IDisposable\n    {\n        \n          public IFileChangeToken  Start()  \n        \n    }\n```\n\nMIght Pick up some ideas already discussed in #17111 \n\n### Risks\n\n- Violation of information hiding policy or intended contracts\n- Violoation of even more SOLID principles by just exposing `IFileInfo` when extraction and adding another level of abstraction might offer a more plausbile and solid concept\n- API suggestion (currently) neither elegant nor performant\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbcGHw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Y0QEQ",
                                           "createdAt":  "2024-12-27T16:05:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-27T16:05:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZyfYv",
                                           "createdAt":  "2025-01-09T13:25:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-09T13:25:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZyioW",
                                           "createdAt":  "2025-01-09T13:31:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@jozkee PTAL when you are back",
                                           "updatedAt":  "2025-01-09T13:31:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dtwYf",
                                           "createdAt":  "2025-02-09T01:44:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "This request looks reasonable, but I do not expect we\u0027ll be able to address it during .NET 10. Keeping it in the Future milestone.",
                                           "updatedAt":  "2025-02-09T01:44:38Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]:  Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher should expose modified files (Alternative where standalone FilesystemWatcher won\u0027t work)",
        "labels":  [
                       "api-suggestion",
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113855",
        "createdAt":  "2025-03-24T21:00:00Z",
        "number":  113855,
        "author":  "StephenCleary",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-13T21:12:42Z",
        "body":  "### Description\n\n.NET 9 app will fail to start when running as a systemd service; this appears to be a problem with `FileSystemWatcher` (for watching the json config files).\n\n### Reproduction Steps\n\nWithin WSL:\n\n```\nmkdir SystemdRepro \u0026\u0026 cd SystemdRepro\ndotnet new worker\ndotnet add package Microsoft.Extensions.Hosting.Systemd\ndotnet build\n```\n\nThen create the file `repro.service` with the following content (you will need to adjust the `User` and `ExecStart` lines):\n\n```\n[Unit]\nDescription=repro\nAfter=network.target\nStartLimitIntervalSec=0\n\n[Service]\nType=simple\nUser=stephen\nExecStart=/mnt/d/Code/SystemdRepro/bin/Debug/net9.0/SystemdRepro\n\n[Install]\nWantedBy=multi-user.target\n```\n\nThen start the service and observe the logs:\n\n```\nsudo cp repro.service /etc/systemd/system \u0026\u0026 sudo systemctl daemon-reload\nsudo systemctl start repro.service\njournalctl -u repro.service -o cat | cat\n```\n\n### Expected behavior\n\nService does not crash.\n\n### Actual behavior\n\nService crashes with these logs:\n\n```\nStarted repro.service - repro.\nStack overflow.\nRepeated 174575 times:\n--------------------------------\n   at System.IO.FileSystemWatcher+RunningInstance+WatchedDirectory.Write(System.Text.StringBuilder, Boolean)\n--------------------------------\n   at System.IO.FileSystemWatcher+RunningInstance+WatchedDirectory.GetPath(Boolean, System.String)\n   at System.IO.FileSystemWatcher+RunningInstance.AddDirectoryWatchUnlocked(WatchedDirectory, System.String)\n   at System.IO.FileSystemWatcher+RunningInstance.AddDirectoryWatchUnlocked(WatchedDirectory, System.String)\n   at System.IO.FileSystemWatcher+RunningInstance.AddDirectoryWatchUnlocked(WatchedDirectory, System.String)\n   at System.IO.FileSystemWatcher+RunningInstance.AddDirectoryWatchUnlocked(WatchedDirectory, System.String)\n   at System.IO.FileSystemWatcher.StartRaisingEvents()\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.TryEnableFileSystemWatcher()\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(System.String)\n   at Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.\u003c.ctor\u003eb__1_0()\n   at Microsoft.Extensions.Primitives.ChangeToken+ChangeTokenRegistration`1[[System.__Canon, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]..ctor(System.Func`1\u003cMicrosoft.Extensions.Primitives.IChangeToken\u003e, System.Action`1\u003cSystem.__Canon\u003e, System.__Canon)\n   at Microsoft.Extensions.Primitives.ChangeToken.OnChange(System.Func`1\u003cMicrosoft.Extensions.Primitives.IChangeToken\u003e, System.Action)\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider..ctor(Microsoft.Extensions.Configuration.FileConfigurationSource)\n   at Microsoft.Extensions.Configuration.Json.JsonConfigurationProvider..ctor(Microsoft.Extensions.Configuration.Json.JsonConfigurationSource)\n   at Microsoft.Extensions.Configuration.Json.JsonConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)\n   at Microsoft.Extensions.Configuration.ConfigurationManager.AddSource(Microsoft.Extensions.Configuration.IConfigurationSource)\n   at Microsoft.Extensions.Configuration.ConfigurationManager+ConfigurationSources.Add(Microsoft.Extensions.Configuration.IConfigurationSource)\n   at Microsoft.Extensions.Configuration.ConfigurationManager.Microsoft.Extensions.Configuration.IConfigurationBuilder.Add(Microsoft.Extensions.Configuration.IConfigurationSource)\n   at Microsoft.Extensions.Configuration.ConfigurationExtensions.Add[[System.__Canon, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Action`1\u003cSystem.__Canon\u003e)\n   at Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Action`1\u003cMicrosoft.Extensions.Configuration.Json.JsonConfigurationSource\u003e)\n   at Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, Microsoft.Extensions.FileProviders.IFileProvider, System.String, Boolean, Boolean)\n   at Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String, Boolean, Boolean)\n   at Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.ApplyDefaultAppConfiguration(Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String[])\n   at Microsoft.Extensions.Hosting.HostApplicationBuilder..ctor(Microsoft.Extensions.Hosting.HostApplicationBuilderSettings)\n   at Microsoft.Extensions.Hosting.HostApplicationBuilder..ctor(System.String[])\n   at Microsoft.Extensions.Hosting.Host.CreateApplicationBuilder(System.String[])\n   at Program.\u003cMain\u003e$(System.String[])\nrepro.service: Main process exited, code=dumped, status=6/ABRT\nrepro.service: Failed with result \u0027core-dump\u0027.\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nDisable reload-on-config-change:\n\n```\nvar config = new ConfigurationManager();\nconfig.AddInMemoryCollection(new Dictionary\u003cstring, string?\u003e() { [\"hostBuilder:reloadConfigOnChange\"] = \"false\" });\nvar builder = Host.CreateApplicationBuilder(new HostApplicationBuilderSettings\n{\n\tArgs = args,\n\tConfiguration = config,\n});\n```\n\n### Configuration\n\n(within WSL):\n\n```\n$ dotnet --version\n9.0.104\n$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 24.04.2 LTS\nRelease:        24.04\nCodename:       noble\n```\n\nArchitecture: x64\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw_PCdA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6j4EkD",
                                           "createdAt":  "2025-03-24T21:00:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-24T21:00:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j4Rls",
                                           "createdAt":  "2025-03-24T21:26:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@adamsitnik could you please have a look?\n\n@dotnet/area-extensions-filesystem",
                                           "updatedAt":  "2025-03-24T21:27:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kAb_R",
                                           "createdAt":  "2025-03-25T15:04:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Thanks, @StephenCleary. We\u0027ll try to repro it with the steps you provided, and then we\u0027ll need to figure out if this is a regression from .NET 8 as that will guide the investigation. If you can try .NET 8 and share if it works for you there or not, please let us know.",
                                           "updatedAt":  "2025-03-25T15:04:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kBIPJ",
                                           "createdAt":  "2025-03-25T15:59:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOELYHyQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StephenCleary",
                                                                               "createdAt":  "2025-03-25T16:11:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "I confirmed the repro, and I also found this is not a regression. It fails the same way in .NET 8. The only thing I changed in the repro steps were the `User` and `ExecStart` as @StephenCleary indicated, and my `ExecStart` path was _not_ a mounted drive from the host machine.\n\nWe will investigate from there.",
                                           "updatedAt":  "2025-03-25T15:59:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kBQat",
                                           "createdAt":  "2025-03-25T16:10:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOELYIRg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2025-03-25T16:11:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "StephenCleary",
                                           "body":  "I confirm this is not a regression. I wasn\u0027t sure if the mounted drive would be part of the problem so thanks for that (I actually mount my dev drive, which I know the official docs say not to do but it seems to work...). Repro details below:\n\nChanged my WSL setup to .NET 8: \n- Uninstalled all .NET SDKs and runtimes (`sudo apt remove --purge dotnet-runtime-* dotnet-sdk-*`).\n- Installed .NET 8.0 SDK (`sudo apt-get update \u0026\u0026 sudo apt-get install -y dotnet-sdk-8.0`).\n- In `SystemdRepro.csproj`, changed `TargetFramework` from `net9.0` to `net8.0`.\n- In `SystemdRepro.csproj`, changed `Microsoft.Extensions.Hosting` version from `9.0.3` to `8.0.1`.\n- In `SystemdRepro.csproj`, changed `Microsoft.Extensions.Hosting.Systemd` version from `9.0.3` to `8.0.1`.\n- In `repro.service`, changed `ExecPath` from `/mnt/d/Code/SystemdRepro/bin/Debug/net9.0/SystemdRepro` to `/mnt/d/Code/SystemdRepro/bin/Debug/net8.0/SystemdRepro`.\n\n`dotnet --version` now says `8.0.114`.\n\nAfter `dotnet build`, `sudo cp repro.service /etc/systemd/system \u0026\u0026 sudo systemctl daemon-reload`, and `sudo systemctl start repro.service`, then `journalctl -u repro.service -o cat | cat` shows the same error, just with a smaller number of recursive invocations before failure:\n\n```\nStarted repro.service - repro.\nStack overflow.\nRepeat 130834 times:\n--------------------------------\n   at System.IO.FileSystemWatcher+RunningInstance+WatchedDirectory.Write(System.Text.StringBuilder, Boolean)\n--------------------------------\n   at System.IO.FileSystemWatcher+RunningInstance+WatchedDirectory.GetPath(Boolean, System.String)\n   at System.IO.FileSystemWatcher+RunningInstance.AddDirectoryWatchUnlocked(WatchedDirectory, System.String)\n   at System.IO.FileSystemWatcher+RunningInstance.AddDirectoryWatchUnlocked(WatchedDirectory, System.String)\n   at System.IO.FileSystemWatcher+RunningInstance.AddDirectoryWatchUnlocked(WatchedDirectory, System.String)\n   at System.IO.FileSystemWatcher+RunningInstance.AddDirectoryWatchUnlocked(WatchedDirectory, System.String)\n   at System.IO.FileSystemWatcher.StartRaisingEvents()\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.TryEnableFileSystemWatcher()\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.CreateFileChangeToken(System.String)\n   at Microsoft.Extensions.FileProviders.PhysicalFileProvider.Watch(System.String)\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.\u003c.ctor\u003eb__1_0()\n   at Microsoft.Extensions.Primitives.ChangeToken+ChangeTokenRegistration`1[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]..ctor(System.Func`1\u003cMicrosoft.Extensions.Primitives.IChangeToken\u003e, System.Action`1\u003cSystem.__Canon\u003e, System.__Canon)\n   at Microsoft.Extensions.Primitives.ChangeToken.OnChange(System.Func`1\u003cMicrosoft.Extensions.Primitives.IChangeToken\u003e, System.Action)\n   at Microsoft.Extensions.Configuration.FileConfigurationProvider..ctor(Microsoft.Extensions.Configuration.FileConfigurationSource)\n   at Microsoft.Extensions.Configuration.Json.JsonConfigurationProvider..ctor(Microsoft.Extensions.Configuration.Json.JsonConfigurationSource)\n   at Microsoft.Extensions.Configuration.Json.JsonConfigurationSource.Build(Microsoft.Extensions.Configuration.IConfigurationBuilder)\n   at Microsoft.Extensions.Configuration.ConfigurationManager.AddSource(Microsoft.Extensions.Configuration.IConfigurationSource)\n   at Microsoft.Extensions.Configuration.ConfigurationManager+ConfigurationSources.Add(Microsoft.Extensions.Configuration.IConfigurationSource)\n   at Microsoft.Extensions.Configuration.ConfigurationManager.Microsoft.Extensions.Configuration.IConfigurationBuilder.Add(Microsoft.Extensions.Configuration.IConfigurationSource)\n   at Microsoft.Extensions.Configuration.ConfigurationExtensions.Add[[System.__Canon, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]](Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Action`1\u003cSystem.__Canon\u003e)\n   at Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.Action`1\u003cMicrosoft.Extensions.Configuration.Json.JsonConfigurationSource\u003e)\n   at Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, Microsoft.Extensions.FileProviders.IFileProvider, System.String, Boolean, Boolean)\n   at Microsoft.Extensions.Configuration.JsonConfigurationExtensions.AddJsonFile(Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String, Boolean, Boolean)\n   at Microsoft.Extensions.Hosting.HostingHostBuilderExtensions.ApplyDefaultAppConfiguration(Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.Configuration.IConfigurationBuilder, System.String[])\n   at Microsoft.Extensions.Hosting.HostApplicationBuilder..ctor(Microsoft.Extensions.Hosting.HostApplicationBuilderSettings)\n   at Microsoft.Extensions.Hosting.HostApplicationBuilder..ctor(System.String[])\n   at Microsoft.Extensions.Hosting.Host.CreateApplicationBuilder(System.String[])\n   at Program.\u003cMain\u003e$(System.String[])\nrepro.service: Main process exited, code=dumped, status=6/ABRT\nrepro.service: Failed with result \u0027core-dump\u0027.\n```\n\nSo, this same problem exists in .NET 8.0.",
                                           "updatedAt":  "2025-03-25T16:12:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kBTLs",
                                           "createdAt":  "2025-03-25T16:14:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenCleary",
                                           "body":  "P.S. I don\u0027t have a real-world case for this; I have yet to meet anyone actually using .NET in a systemd service (generally Docker is just easier). I just found this when coding up a demo for a talk on .NET background services.",
                                           "updatedAt":  "2025-03-25T16:14:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kClxM",
                                           "createdAt":  "2025-03-25T18:14:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOELgYuA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StephenCleary",
                                                                               "createdAt":  "2025-03-25T18:16:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2025-03-26T10:14:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Thank you, @StephenCleary. That context is super helpful and your detailed reproduction steps made this really easy to set up and confirm.\n\nGiven you don\u0027t have real-world impact on this, I\u0027m going to mark it as https://github.com/dotnet/runtime/labels/help%20wanted and put it into the Future milestone.",
                                           "updatedAt":  "2025-03-25T18:14:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kCn0A",
                                           "createdAt":  "2025-03-25T18:17:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOELjKNw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2025-03-26T15:07:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "StephenCleary",
                                           "body":  "Yes. If it\u0027s been broken that long and I\u0027m the first one to notice... then does it really need to be fixed?\n\nI default to 🔥 ",
                                           "updatedAt":  "2025-03-25T18:17:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kJOSu",
                                           "createdAt":  "2025-03-26T10:14:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "cc @tmds who might be interested in helping us",
                                           "updatedAt":  "2025-03-26T10:14:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kJlIV",
                                           "createdAt":  "2025-03-26T10:43:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e I don\u0027t have a real-world case for this; I have yet to meet anyone actually using .NET in a systemd service (generally Docker is just easier). I just found this when coding up a demo for a talk on .NET background services.\n\nI recommend containerizing the .NET app before running it as a systemd service: https://developers.redhat.com/articles/2023/01/17/how-deploy-net-apps-systemd-services-using-containers. And with [podman quadlets](https://www.redhat.com/en/blog/quadlet-podman), it\u0027s even simpler to deploy the container images than what is described in that article.\n\n\u003e @tmds who might be interested in helping us\n\nI will make some time to look at this in the next week(s).\n\n@StephenCleary setting `DOTNET_USE_POLLING_FILE_WATCHER=true` in your unit file might work around the issue.",
                                           "updatedAt":  "2025-03-26T10:43:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kXC1W",
                                           "createdAt":  "2025-03-27T10:19:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "I tried to reproduce the issue but it didn\u0027t fail for me:\n\n```\n$ systemctl status repro.service \n● repro.service - repro\n     Loaded: loaded (/etc/systemd/system/repro.service; disabled; preset: disabled)\n    Drop-In: /usr/lib/systemd/system/service.d\n             └─10-timeout-abort.conf, 50-keep-warm.conf\n     Active: active (running) since Thu 2025-03-27 11:02:17 CET; 10s ago\n Invocation: f422245e39224566bc1dd33dd086ba46\n   Main PID: 69012 (SystemdRepro)\n      Tasks: 11 (limit: 38043)\n     Memory: 169.4M (peak: 179M)\n        CPU: 3.685s\n     CGroup: /system.slice/repro.service\n             └─69012 /home/tmds/repos/SystemdRepro/bin/Debug/net9.0/SystemdRepro\n```\n\nThe app will try and watch the working directory for the application. I think in your case the working directory is `/` and you may be hitting this limitation:\n\nhttps://github.com/dotnet/runtime/blob/be6d8d01a848a1de0674e51c6d243b65404f2e0f/src/libraries/System.IO.FileSystem.Watcher/src/System/IO/FileSystemWatcher.Linux.cs#L944-L948\n\nTry adding `WorkingDirectory=/mnt/d/Code/SystemdRepro/bin/Debug/net9.0` to your unit file.",
                                           "updatedAt":  "2025-03-27T10:19:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kZO5T",
                                           "createdAt":  "2025-03-27T13:39:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e Try adding WorkingDirectory=/mnt/d/Code/SystemdRepro/bin/Debug/net9.0 to your unit file.\n\nOr, if you launch your app from `/` directly (without systemd) that should reproduce the issue.\n\n```\ncd /\n/mnt/d/Code/SystemdRepro/bin/Debug/net9.0/SystemdRepro\n```",
                                           "updatedAt":  "2025-03-27T13:48:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6knnvM",
                                           "createdAt":  "2025-03-28T16:25:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenCleary",
                                           "body":  "\u003e Try adding WorkingDirectory=/mnt/d/Code/SystemdRepro/bin/Debug/net9.0 to your unit file.\n\nI confirm this is also a workaround.",
                                           "updatedAt":  "2025-03-28T16:25:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6knz2V",
                                           "createdAt":  "2025-03-28T16:45:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e I confirm this is also a workaround\n\nAnd probably something you want to set to match where you want your application to be effectively watching for changes. \n\n@adamsitnik this issue is a limitation of the Linux watcher, see https://github.com/dotnet/runtime/issues/113855#issuecomment-2757504342. It occurs here because the app tries to watch the entire filesystem.",
                                           "updatedAt":  "2025-03-28T16:45:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mJMpE",
                                           "createdAt":  "2025-04-08T19:11:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "js6pak",
                                           "body":  "\u003e It occurs here because the app tries to watch the entire filesystem.\n\nIs there any reason for this? Couldn\u0027t it just watch the config file?",
                                           "updatedAt":  "2025-04-08T19:11:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mJl3M",
                                           "createdAt":  "2025-04-08T20:01:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e Is there any reason for this? Couldn\u0027t it just watch the config file?\n\nThis is implemented on top of the [IFileProvider](https://learn.microsoft.com/en-us/dotnet/api/microsoft.extensions.fileproviders.ifileprovider?view=net-9.0-pp) interface. The implementation in `PhysicalFilesWatcher` is so that it watches the entire base path and fires events for those that match the `Watch` method `filter` argument.\n\nIt could be made to work different, but that would require quite some work.\n\nAs I mentioned earlier, the application (as configured by the systemd unit) doesn\u0027t actually look for the config file in the right place. If you configure it to do so, the issue also disappears because the host no longer tries to watch the entire filesystem.",
                                           "updatedAt":  "2025-04-08T20:01:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nnOEW",
                                           "createdAt":  "2025-04-17T07:45:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mhartmair-cubido",
                                           "body":  "Instead of setting the working directory in systemd unit file, in code it worked as well:\n```cs\nvar builder = Host.CreateApplicationBuilder(new HostApplicationBuilderSettings()\n{\n    Args = args,\n    ContentRootPath = AppContext.BaseDirectory\n});\n```\n",
                                           "updatedAt":  "2025-04-17T07:45:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nno-a",
                                           "createdAt":  "2025-04-17T08:36:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "https://github.com/dotnet/runtime/issues/78789 is for improving visibility on the content root that gets used. \n\n@adamsitnik @jeffhandley can we close this issue?",
                                           "updatedAt":  "2025-04-17T08:36:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6obSpi",
                                           "createdAt":  "2025-04-23T23:08:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenCleary",
                                           "body":  "\u003e [#78789](https://github.com/dotnet/runtime/issues/78789) is for improving visibility on the content root that gets used.\n\u003e \n\u003e [@adamsitnik](https://github.com/adamsitnik) [@jeffhandley](https://github.com/jeffhandley) can we close this issue?\n\nI\u0027m all for improving visibility on the content root. But there\u0027s no documentation AFAIK that says that running with the filesystem root as the current directory is unsupported.",
                                           "updatedAt":  "2025-04-23T23:08:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ofrSi",
                                           "createdAt":  "2025-04-24T08:56:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "I think the limitations of `FileSystemWatcher` on Linux aren\u0027t to well documented. I assume users find answers on SO or issues like this one.\n\nFor this specific case, I don\u0027t think there is a documentation on systemd integration except for the [introduction blog post](https://devblogs.microsoft.com/dotnet/net-core-and-systemd/). Unfortunately it does not set a `WorkingDirectory` in the unit file.\n\nAlso, I don\u0027t understand the rationale for using the working dir as the default content root (https://github.com/dotnet/runtime/issues/78789#issuecomment-1448177977).",
                                           "updatedAt":  "2025-04-24T08:56:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sKRJZ",
                                           "createdAt":  "2025-05-17T12:56:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "FileSystemWatcher on Linux has a stack overflow when watching very deeply nested directories. That is documented in the code, with the remark that it is unlikely.\n\nIt happens here because the app unintentionally watches the entire filesystem, and maybe/probably also WSL does some mounts which causes there to be deeply nested directories.\n\nThe unintentional watching is due to systemd services defaulting to `/` when no working dir is set, and the generic host defaulting to the working dir for its content root (https://github.com/dotnet/runtime/issues/78789).\n\nThe only documentation for systemd integration is the [introduction blog post](https://devblogs.microsoft.com/dotnet/net-core-and-systemd/), which unfortunately does not set a WorkingDirectory in the unit file.\n\n@StephenCleary do you have a suggestion on what needs to happen to close this issue?",
                                           "updatedAt":  "2025-05-17T12:56:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sLPsn",
                                           "createdAt":  "2025-05-17T23:05:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenCleary",
                                           "body":  "Ideally FSW would be changed to not SO. If I understand correctly, it\u0027s being asked to watch a couple of json files, and it\u0027s not clear to me why it feels the need to traverse the entire file system, even if the root is the current directory.\n\nIf that\u0027s not feasible, then I\u0027d check what changed between the blog post and now. Presumably it used to work fine with / as the current directory. If that research results in some reasonable action to make it work again, then take that action.\n\nIf it\u0027s truly impossible to fix in code, then fix the code in the blog post and add a callout explaining what the code used to be and when and why it was changed.",
                                           "updatedAt":  "2025-05-17T23:05:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sTCZr",
                                           "createdAt":  "2025-05-19T11:32:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "\u003e Ideally FSW would be changed to not SO. If I understand correctly, it\u0027s being asked to watch a couple of json files, and it\u0027s not clear to me why it feels the need to traverse the entire file system, even if the root is the current directory.\n\nIf the app was looking for where the json files actually are, it wouldn\u0027t stack overflow.\n\nI agree the implementation can be more efficient.\nIt currently has the simplest implementation that is expected to work.\n\n\u003e If that\u0027s not feasible, then I\u0027d check what changed between the blog post and now. Presumably it used to work fine with / as the current directory. If that research results in some reasonable action to make it work again, then take that action.\n\nNothing changed. It happens on your system because it has deeply nested directory hierarchies, which is perhaps more likely with WSL.\n\n@glennc @adamsitnik @jeffhandley can we update https://devblogs.microsoft.com/dotnet/net-core-and-systemd/ so it includes a `WorkingDirectory` in the unit file? Applications that use the generic host need to have this set as it determines the default content root. Not setting it for a systemd unit may lead to this issue due to trying to watch the entire file system hierarchy.",
                                           "updatedAt":  "2025-05-19T11:32:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sTXx8",
                                           "createdAt":  "2025-05-19T12:04:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "js6pak",
                                           "body":  "\u003e I agree the implementation can be more efficient.\n\nCouldn\u0027t this issue be converted into one about making FileSystemWatcher watch only what was requested, not *literally everything* under it?",
                                           "updatedAt":  "2025-05-19T12:04:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sTlnC",
                                           "createdAt":  "2025-05-19T12:23:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmds",
                                           "body":  "We\u0027re also addressing why systemd .NET hosts end up using the wrong location as their content root.\n\nI\u0027ve hinted to some complexity in changing the implementation to watch only config files in https://github.com/dotnet/runtime/issues/113855#issuecomment-2787532236.\n\nThe issue could be re-purposed to track that.",
                                           "updatedAt":  "2025-05-19T12:23:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6scaps",
                                           "createdAt":  "2025-05-20T06:35:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "StephenCleary",
                                           "body":  "\u003e We\u0027re also addressing why systemd .NET hosts end up using the wrong location as their content root.\n\nIs it wrong?\n\nI\u0027m not familiar with systemd, but Win32 services have similar behavior: the OS starts them with their current directory set to the Windows or Windows system folder (I forget the exact details). This is unexpected but not wrong.",
                                           "updatedAt":  "2025-05-20T06:35:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sdNv_",
                                           "createdAt":  "2025-05-20T07:57:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEen_cQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StephenCleary",
                                                                               "createdAt":  "2025-08-18T12:10:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tmds",
                                           "body":  "The `FileSystemWatcher` is meant to detect changes on `appsettings.json` which exists at the app\u0027s content root.\n\nThe wrong location is being watched.",
                                           "updatedAt":  "2025-05-20T07:57:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7D88J0",
                                           "createdAt":  "2025-09-13T04:20:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sigseg1v",
                                           "body":  "\u003e I\u0027m not familiar with systemd, but Win32 services have similar behavior: the OS starts them with their current directory set to the Windows or Windows system folder (I forget the exact details). This is unexpected but not wrong.\n\nWindows appears to have some automatic mitigations for this:\nhttps://learn.microsoft.com/en-us/dotnet/core/compatibility/extensions/7.0/contentrootpath-hosted-app\n\nSpecifically, when a Windows Service starts in the system32 directory by default, it sets `ContentRootPath` to `AppContext.BaseDirectory` to avoid problems:\n\u003e Starting with .NET 7, when a hosted application is launched with the current directory set to the System special folder, it defaults the ContentRootPath property to [AppContext.BaseDirectory](https://learn.microsoft.com/en-us/dotnet/api/system.appcontext.basedirectory#system-appcontext-basedirectory).\n\nOn Linux with systemd, it appears this condition is narrowly missed, likely because systemd defaults to the `/` directory but `Environment.SpecialFolder.System` resolves to an empty string.\n\nShould there be a similar mitigation for systemd defaults as there is for Windows defaults?\n\nI\u0027d be happy to implement it if so. I could implement something in `HostingHostBuilderExtensions.ApplyDefaultHostConfiguration` alongside the current Windows detection, that detects when running as systemd (which it looks like there is already support for in the runtime), detects if the cwd is `/`, and then does the same mitigation that it applies for windows services.\n\nBased on https://github.com/dotnet/runtime/blob/main/docs/coding-guidelines/breaking-changes.md it looks like it would be in the category of _\"Bucket 3: Unlikely Grey Area. Change of behavior that customers could have depended on, but probably wouldn\u0027t.\"_. I can\u0027t really imagine a scenario where it would be correct to have `/` as the content root directory on systemd. If the team is ok with a change like that then let me know and I\u0027ll submit a PR.",
                                           "updatedAt":  "2025-09-13T21:12:42Z"
                                       }
                                   ],
                         "totalCount":  28
                     },
        "title":  "Stack overflow in FileSystemWatcher when running as systemd service",
        "labels":  [
                       "help wanted",
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113964",
        "createdAt":  "2025-03-27T13:42:35Z",
        "number":  113964,
        "author":  "znakeeye",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T02:21:30Z",
        "body":  "### Description\n\nVerified in `.NET 8`. In our application, we have an intermittent crash where `FileConfigurationProvider` throws an `IOException` when reloading the configuration file. This is easily reproducible by locking the file **immediately** after saving it, commonly performed by Antivirus software.\n\nE.g.: You will **not** be able to catch the exception using `LoadException`:\n```c#\nsource.ReloadOnChange = true;\nsource.ReloadDelay = 10000; // Give us some time to lock the file from some other process...\nsource.OnLoadException = OnLoadException; // NOT called\n```\n\nPlease have a look at [FileConfigurationProvider.cs(96)](https://github.com/dotnet/runtime/blob/c81f403737c412942222d13b2753881e62d1e6f7/src/libraries/Microsoft.Extensions.Configuration.FileExtensions/src/FileConfigurationProvider.cs#L96). The mistake is obvious. Opening of the stream **should be inside** the `try` block!\n\n```c#\nusing Stream stream = OpenRead(file); // Outside try block! \ntry\n{\n    Load(stream);\n}\n```\n\nException details\n-------------------\n```\nSystem.AggregateException: A Task\u0027s exception(s) were not observed either by Waiting on the Task or accessing its Exception property. As a result, the unobserved exception was rethrown by the finalizer thread. (One or more errors occurred. (The process cannot access the file \u0027C:\\Foo\\settings.json\u0027 because it is being used by another process.))\n ---\u003e System.AggregateException: One or more errors occurred. (The process cannot access the file \u0027C:\\Foo\\settings.json\u0027 because it is being used by another process.)\n \n ---\u003e System.IO.IOException: The process cannot access the file \u0027C:\\Foo\\settings.json\u0027 because it is being used by another process.\n \n   at Microsoft.Win32.SafeHandles.SafeFileHandle.CreateFile(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options)\n \n   at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\n \n   at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\n \n   at System.IO.Strategies.FileStreamHelpers.ChooseStrategyCore(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\n \n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, Int64 preallocationSize)\n \n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\n \n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.\u003cLoad\u003eg__OpenRead|6_0(IFileInfo fileInfo)\n \n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.Load(Boolean reload)\n \n   at Microsoft.Extensions.Configuration.FileConfigurationProvider.\u003c.ctor\u003eb__1_1()\n \n   at Microsoft.Extensions.Primitives.ChangeToken.\u003c\u003ec.\u003cOnChange\u003eb__0_0(Action callback)\n \n   at Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration`1.OnChangeTokenFired()\n \n   at Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration`1.\u003c\u003ec.\u003cRegisterChangeTokenCallback\u003eb__7_0(Object s)\n \n   at System.Threading.CancellationTokenSource.Invoke(Delegate d, Object state, CancellationTokenSource source)\n \n   at System.Threading.CancellationTokenSource.ExecuteCallbackHandlers(Boolean throwOnFirstException)\n \n   --- End of inner exception stack trace ---\n \n   at System.Threading.CancellationTokenSource.ExecuteCallbackHandlers(Boolean throwOnFirstException)\n \n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.\u003c\u003ec.\u003c.cctor\u003eb__43_0(Object state)\n \n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)\n \n--- End of stack trace from previous location ---\n \n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)\n \n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task\u0026 currentTaskSlot, Thread threadPoolThread)\n \n   --- End of inner exception stack trace ---\n```\n\n### Reproduction Steps\n\nRun attached sample project.\n\n[FileConfigurationProviderCrash.zip](https://github.com/user-attachments/files/19487362/FileConfigurationProviderCrash.zip)\n\n### Expected behavior\n\nThe attached sample project should not throw an `IOException`.\n\n### Actual behavior\n\n`IOException` is unhandled even though we tell the `FileConfigurationSource` to ignore exceptions.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpIdwEA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6kandE",
                                           "createdAt":  "2025-03-27T15:17:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-27T15:17:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ka1hJ",
                                           "createdAt":  "2025-03-27T15:35:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-27T15:35:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kbY-k",
                                           "createdAt":  "2025-03-27T16:22:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Although the Exception.Message claims \"the unobserved exception was rethrown by the finalizer thread\", .NET does not actually rethrow the exception; it just raises the TaskScheduler.UnobservedTaskException event.  Because your sample application does not handle this event, I don\u0027t see how the exception could crash the application.\n\n.NET Framework 4.5 and greater behave likewise, unless configured.  [Exceptions during unobserved processing in System.Threading.Tasks.Task no longer propagate on finalizer thread](https://learn.microsoft.com/en-us/dotnet/framework/migration-guide/runtime/4.5.x#exceptions-during-unobserved-processing-in-systemthreadingtaskstask-no-longer-propagate-on-finalizer-thread)",
                                           "updatedAt":  "2025-03-27T16:22:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kgBvj",
                                           "createdAt":  "2025-03-28T00:07:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "znakeeye",
                                           "body":  "The original exception was caught in a `WPF` application where the `UnobservedTaskException` is indeed handled.\n\nThe bug is pretty clear though. The intent of the `OnLoadException` is for the consumer to have a crack at the exception. Here, we see a case where an exception escapes this callback. I hope a fix will be considered for `.NET 10`.",
                                           "updatedAt":  "2025-03-28T00:07:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kh3AQ",
                                           "createdAt":  "2025-03-28T06:23:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Currently, if Load(Stream) throws, then Load(bool) catches the exception and wraps it in InvalidDataException.  If instead OpenRead(IFileInfo) throws, then I don\u0027t think InvalidDataException is appropriate.  So the OpenRead call shouldn\u0027t simply be moved into the same `try` statement.\n\nThere is also a bug in that the InvalidDataException message always uses `file.PhysicalPath` even when that is null; should fall back to `Source.Path` when there is invalid data in a non-physical file.",
                                           "updatedAt":  "2025-03-28T06:23:17Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Unhandled exception from FileConfigurationProvider when re-loading a locked file",
        "labels":  [
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114833",
        "createdAt":  "2025-04-19T15:57:42Z",
        "number":  114833,
        "author":  "Measurity",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-23T07:49:37Z",
        "body":  "## Issue\n\nIt\u0027s possible to have any file be used with `PhysicalFileProvider`, but they can\u0027t be watched for changes if the path isn\u0027t relative.\n\nNo errors are thrown with a rooted path, simply no watcher is listening for changes. Which means `IOptionsMonitor\u003cT\u003e` does not work as expected. \n\n## Code in question\n\nhttps://github.com/dotnet/runtime/blob/07f3e33da71e52fce0627aa8645fc9787b954672/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFileProvider.cs#L362-L363\n\nhttps://github.com/dotnet/runtime/blob/07f3e33da71e52fce0627aa8645fc9787b954672/src/libraries/Microsoft.Extensions.FileProviders.Physical/src/PhysicalFilesWatcher.cs#L134-L138\n\n## Workaround\n\nThe following extension method is what I use to add a custom config file, while having change detection working. See first comment for workaround.\n\n```cs\npublic static IConfigurationBuilder AddMyConfigFile\u003cTOptions\u003e(this IConfigurationBuilder configurationBuilder, string filePath, string configSectionPath = \"\", bool optional = true) where TOptions : class, new()\n{\n    ArgumentException.ThrowIfNullOrWhiteSpace(filePath);\n    string dirPath = Path.GetDirectoryName(filePath);\n    Directory.CreateDirectory(dirPath ?? throw new ArgumentException(nameof(filePath)));\n    if (!File.Exists(filePath))\n    {\n        MyConfig.CreateFile\u003cTOptions\u003e(filePath);\n    }\n\n    // Link the config to a relative path within the working directory so that IOptionsMonitor\u003cT\u003e works. See https://github.com/dotnet/runtime/issues/114833\n    try\n    {\n        FileInfo configFile = new(Path.GetFileName(filePath));\n        if (configFile.Exists \u0026\u0026 configFile.LinkTarget != null)\n        {\n            configFile.Delete();\n        }\n        configFile.CreateAsSymbolicLink(filePath);\n        // Fix targets to point to symbolic link instead.\n        dirPath = AppContext.BaseDirectory;\n        filePath = configFile.Name; // Now a relative path.\n    }\n    catch (IOException)\n    {\n        // ignored - config change detection isn\u0027t critical for server.\n    }\n\n    return configurationBuilder.Add(new MyConfigurationSource(filePath, configSectionPath, optional, new PhysicalFileProvider(dirPath)\n    {\n        UsePollingFileWatcher = true,\n        UseActivePolling = true\n    }));\n}\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp-Rk3g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6n5GTe",
                                           "createdAt":  "2025-04-19T15:58:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-19T15:58:14Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "IOptionsMonitor\u003cT\u003e does not work with rooted file paths, but PhysicalFileProvider itself does",
        "labels":  [
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116713",
        "createdAt":  "2025-06-16T19:55:19Z",
        "number":  116713,
        "author":  "simendsjo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-23T06:31:44Z",
        "body":  "### Description\n\nIt seems `FileConfigurationProvider` has some \"strange\" behavior related to reloadOnChange. I haven\u0027t investigated properly, but I have a simple testcase to trigger it.\n\nLooks like it traverse up the filesystem to the first existing folder, and then recursively `inotify_add_watch` everything it comes across.\nSo a file like `\"/doesntexist/appsettings.json\"` will add every file in the filesystem.\n\nI tested on Linux (GNU Guix System) with net8 and net9.\n\n```fsharp\nConfigurationBuilder()\n  .AddJsonFile(path = \"/doesntexist/appsettings.json\", optional = true, reloadOnChange = true)\n  .Build()\n```\n\n```\ninotify_add_watch(55, \"/\", IN_MODIFY|IN_ATTRIB|IN_MOVED_FROM|IN_MOVED_TO|IN_CREATE|IN_DELETE|IN_ONLYDIR|IN_EXCL_UNLINK) = 1\n...\nlstat(\"/gnu\", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\ninotify_add_watch(55, \"/gnu\", IN_MODIFY|IN_ATTRIB|IN_MOVED_FROM|IN_MOVED_TO|IN_CREATE|IN_DELETE|IN_ONLYDIR|IN_DONT_FOLLOW|IN_EXCL_UNLINK) = 2\n..\nlstat(\"/gnu/store\", {st_mode=S_IFDIR|S_ISVTX|0775, st_size=13279232, ...}) = 0\ninotify_add_watch(55, \"/gnu/store\", IN_MODIFY|IN_ATTRIB|IN_MOVED_FROM|IN_MOVED_TO|IN_CREATE|IN_DELETE|IN_ONLYDIR|IN_DONT_FOLLOW|IN_EXCL_UNLINK) = 3\n..\nlstat(\"/gnu/store/hbq0irhwfnc0f0gbff8rs1zjq3ljx985-fluidsynth-2.3.1\", {st_mode=S_IFDIR|0755, st_size=4096, ...}) = 0\ninotify_add_watch(55, \"/gnu/store/hbq0irhwfnc0f0gbff8rs1zjq3ljx985-fluidsynth-2.3.1\", IN_MODIFY|IN_ATTRIB|IN_MOVED_FROM|IN_MOVED_TO|IN_CREATE|IN_DELETE|IN_ONLYDIR|IN_DONT_FOLLOW|IN_EXCL_UNLINK) = 4\n```\n\n\n### Reproduction Steps\n\n```fsharp\nConfigurationBuilder()\n  .AddJsonFile(path = \"/doesntexist/appsettings.json\", optional = true, reloadOnChange = true)\n  .Build()\n```\n\n\n### Expected behavior\n\nIt doesn\u0027t find the optional file\n\n### Actual behavior\n\nIt adds inotify watch for every file in the file system\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nCheck for non-existing paths before adding the json...?\n\n### Configuration\n\nnet8 and net9 on GNU Guix System (Linux). x86_64.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOsaBV4w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6xig_w",
                                           "createdAt":  "2025-06-17T01:13:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-configuration\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-17T01:13:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xiwtr",
                                           "createdAt":  "2025-06-17T01:58:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-17T01:58:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xoFXj",
                                           "createdAt":  "2025-06-17T11:51:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simendsjo",
                                           "body":  "`FileConfigurationSource` has the following, which will traverse back to the first existing folder, in the case of `/doesntexist/appsettings.json`, `/`.\nIt thus runs `FileProvider = new PhysicalFileProvider(\"/\");`.\n\nThis in turn creates a file system wather `FileSystemWatcher(root)`, and probably with the recursive flag set.\n\nI guess it recurse down directories it doesn\u0027t find in order to detect that the missing directories is created?\nNevertheless, this behavior is problematic when the first existing directory contains a lot of files recursively.\n\n```csharp\npublic void ResolveFileProvider()\n{\n    if (FileProvider == null \u0026\u0026\n        !string.IsNullOrEmpty(Path) \u0026\u0026\n        System.IO.Path.IsPathRooted(Path))\n    {\n        string? directory = System.IO.Path.GetDirectoryName(Path);\n        string? pathToFile = System.IO.Path.GetFileName(Path);\n        while (!string.IsNullOrEmpty(directory) \u0026\u0026 !Directory.Exists(directory))\n        {\n            pathToFile = System.IO.Path.Combine(System.IO.Path.GetFileName(directory), pathToFile);\n            directory = System.IO.Path.GetDirectoryName(directory);\n        }\n        if (Directory.Exists(directory))\n        {\n            FileProvider = new PhysicalFileProvider(directory);\n            Path = pathToFile;\n        }\n    }\n}\n```\n",
                                           "updatedAt":  "2025-06-17T11:51:48Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "FileConfigurationProvider watches all files starting an first existing path; /foo/appsettings.json will listen on all files on the file system",
        "labels":  [
                       "area-Extensions-FileSystem"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119117",
        "createdAt":  "2025-08-26T21:39:32Z",
        "number":  119117,
        "author":  "MitchBodmer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-05T16:02:00Z",
        "body":  "### Description\n\nWhen using a root and the `InMemoryDirectoryInfo` to match files, the root is always matched case sensitively instead of respecting the configuration of the `Matcher`.\n\n### Reproduction Steps\n\nThis example program...\n```csharp\nusing Microsoft.Extensions.FileSystemGlobbing;\n\nMatcher matcher = new(StringComparison.OrdinalIgnoreCase);\nmatcher.AddInclude(@\"this\\casing\\\");\n\nforeach (var stem in\n         matcher.Match(\n             @\"C:\\root\\dir\\casing\\\",\n             [\n                 @\"C:\\root\\dir\\casing\\this\\casing\\MatchingCase\",\n                 @\"C:\\root\\dir\\casing\\this\\CASING\\PathMismatchingCase\",\n                 @\"C:\\root\\dir\\CASING\\this\\casing\\RootMismatchingCase\",\n                 @\"C:\\root\\dir\\CASING\\this\\CASING\\BothMismatchingCase\"\n             ]\n         ).Files.Select(filePatternMatch =\u003e filePatternMatch.Stem))\n{\n    Console.WriteLine(stem);\n}\n```\n...outputs...\n```\nMatchingCase\nPathMismatchingCase\n```\n\nbecause those are the only two options where the case of the root matches. This is unexpected because the `Matcher` is constructed with a `StringComparison.OrdinalIgnoreCase` comparison.\n\n### Expected behavior\n\nIf a `Matcher` is configured with a specific case sensitivity, that case sensitivity should also apply to roots.\n\n### Actual behavior\n\nNo matter the case sensitivity parameter, roots are always case sensitive.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\nI think the offending line is [here](https://github.com/dotnet/runtime/blob/a139bfe6cf327b43b7c749179321a2fa83e105ea/src/libraries/Microsoft.Extensions.FileSystemGlobbing/src/InMemoryDirectoryInfo.cs#L124).\n\nThe most obvious solution would be for the comparison to be passed to the `InMemoryDirectoryInfo` created in the `Match` call by adding a constructor that takes it. Then using that to match roots in the `InMemoryDirectoryInfo`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwj6jpw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7ARhtx",
                                           "createdAt":  "2025-08-26T21:41:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MitchBodmer",
                                           "body":  "@jeffhandley you might be interested in this one.",
                                           "updatedAt":  "2025-08-26T21:41:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7ATg0r",
                                           "createdAt":  "2025-08-27T01:08:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-extensions-filesystem\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-27T01:08:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AXtcQ",
                                           "createdAt":  "2025-08-27T09:20:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "@jozkee Please triage this issue.",
                                           "updatedAt":  "2025-08-27T09:20:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CPqOn",
                                           "createdAt":  "2025-09-05T16:01:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "We can consider this for 11.0.  Note that this would break \"bug compatibility\", the Microsoft.Extensions.* libraries are highly sensitive to changes and prone to breaking.",
                                           "updatedAt":  "2025-09-05T16:01:37Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "`Matcher` does not respect case insensitivity in root when using an `InMemoryDirectoryInfo`.",
        "labels":  [
                       "area-Extensions-FileSystem"
                   ]
    }
]
