[
    {
        "url":  "https://github.com/dotnet/runtime/issues/17446",
        "createdAt":  "2016-05-29T09:32:59Z",
        "number":  17446,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODFKnjg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "justinvp",
                                            "createdAt":  "2016-05-31T17:56:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ciplogic",
                                            "createdAt":  "2016-12-29T13:52:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "szehetner",
                                            "createdAt":  "2018-02-16T21:48:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "304NotModified",
                                            "createdAt":  "2018-08-24T20:00:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2019-04-11T19:48:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bricelam",
                                            "createdAt":  "2019-11-21T18:20:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danieldsmith",
                                            "createdAt":  "2020-06-22T04:14:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bounav",
                                            "createdAt":  "2020-10-12T09:42:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "B-Esmaili",
                                            "createdAt":  "2020-11-18T06:04:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ddimkovikj",
                                            "createdAt":  "2020-12-09T11:46:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gfoidl",
                                            "createdAt":  "2021-01-09T19:34:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KubaSzostak",
                                            "createdAt":  "2021-03-02T08:58:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DaEgi01",
                                            "createdAt":  "2021-05-23T09:45:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SommerEngineering",
                                            "createdAt":  "2021-10-08T09:39:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KristianWedberg",
                                            "createdAt":  "2021-11-22T09:58:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DaveSenn",
                                            "createdAt":  "2022-02-22T08:27:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MarioGruda",
                                            "createdAt":  "2022-10-13T15:33:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Giorgi",
                                            "createdAt":  "2022-11-03T09:33:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SoftStoneDevelop",
                                            "createdAt":  "2023-10-01T07:50:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xced",
                                            "createdAt":  "2024-02-17T21:45:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ranma42",
                                            "createdAt":  "2024-04-26T19:26:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DmitryMak",
                                            "createdAt":  "2024-05-27T03:51:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-05-29T18:16:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "edwardneal",
                                            "createdAt":  "2024-08-18T19:26:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MikeNicholls",
                                            "createdAt":  "2024-09-16T03:17:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "issue-dispenser",
                                            "createdAt":  "2024-09-30T03:13:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2025-03-12T14:30:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jungsooooo",
                                            "createdAt":  "2025-05-14T00:09:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "adamyakes",
                                            "createdAt":  "2025-06-30T14:08:50Z"
                                        }
                                    ],
                          "totalCount":  29
                      },
        "updatedAt":  "2025-03-23T02:07:19Z",
        "body":  "In the current ADO.NET API, writing a parameter to the database involves passing it through an object. This implies a boxing operation, which can create lots of garbage in a scenario where lots of value types (e.g. ints) are written to the database.\n\nA generic subclass of DbParameter could solve this, if properly implemented by providers.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOo6tmMA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyMzEzODgyMw==",
                                           "createdAt":  "2016-06-01T22:03:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEe_LEw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Belorus",
                                                                               "createdAt":  "2021-05-19T20:20:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "DaEgi01",
                                                                               "createdAt":  "2021-05-23T09:45:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "kronic",
                                                                               "createdAt":  "2021-08-27T21:52:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "DaveSenn",
                                                                               "createdAt":  "2022-02-22T08:27:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-03-12T14:30:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "jungsooooo",
                                                                               "createdAt":  "2025-05-14T00:11:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "gfoidl",
                                                                               "createdAt":  "2025-08-20T16:04:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Isn\u0027t the boxing overhead next to nothing compared to the fixed cost of making a SQL call? I cannot imagine this being an issue even for 1000 parameters.\n",
                                           "updatedAt":  "2016-06-01T22:03:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIyMzIwNDYwMg==",
                                           "createdAt":  "2016-06-02T06:15:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEJlQTw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-03-12T14:30:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "@GSPP I\u0027m definitely not talking about the overhead of allocating the memory and copying the value - i.e. the cost of the boxing operation itself. The problem is that boxing allocates an object on the heap, producing potentially large amounts of garbage. This garbage creates pressure on the GC, which can be a problem for some applications. Basically it\u0027s a different kind of overhead compared to making an SQL call.\n",
                                           "updatedAt":  "2016-06-02T06:15:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1OTg0MjI0Nw==",
                                           "createdAt":  "2016-11-10T23:49:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@roji (or anyone) can you provide more details what is your plan here?\n",
                                           "updatedAt":  "2016-11-10T23:49:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MDEwODI3NQ==",
                                           "createdAt":  "2016-11-12T07:57:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjwXeg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bounav",
                                                                               "createdAt":  "2020-10-12T09:43:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "B-Esmaili",
                                                                               "createdAt":  "2020-11-18T06:06:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KubaSzostak",
                                                                               "createdAt":  "2021-03-02T08:59:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DaEgi01",
                                                                               "createdAt":  "2021-05-23T09:45:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2021-10-08T09:38:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DaveSenn",
                                                                               "createdAt":  "2022-02-22T08:27:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2024-05-29T18:16:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "roji",
                                           "body":  "On the read side of things, there\u0027s `DbDataReader.GetFieldValue\u003cT\u003e()` allowing users to generically read values. This allows ADO.NET providers to provide an implementation that doesn\u0027t box value types - users can read ints without needless heap allocations.\n\nUnfortunately nothing like this exists on the write side - DbParameter has a object `Value` property, so writing ints via ADO.NET necessarily implies boxing. This could be resolved by having a generic `SqlParameter\u003cT\u003e`, whose `Value` would be of type T. This class could extend could inherit the non-generic `SqlParameter` for backwards compatibility. It would probably be a good idea to have an `IDbParameter\u003cT\u003e` interface which would be implemented by the provider-specific generic parameter classes (`SqlParameter\u003cT\u003e`, `NpgsqlParameter\u003cT\u003e`).\n\nIt would also be necessary to add `CreateParameter\u003cT\u003e()` to DbProviderFactory to allow portable creation of these new parameters.\n\nLet me know if this makes sense or if you\u0027d like more info.\n",
                                           "updatedAt":  "2016-11-12T07:57:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2MDEzMzI3Mw==",
                                           "createdAt":  "2016-11-12T16:49:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@saurabh500 @YoungGah is it sufficient info for you? Or do you need more details?\nIf we have enough of direction and you agree with it, please remove the \"needs more info\" and add \"up for grabs\" label.\n",
                                           "updatedAt":  "2016-11-12T16:49:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI2OTM2NDYwNw==",
                                           "createdAt":  "2016-12-27T18:34:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@saurabh500 @YoungGah thoughts?",
                                           "updatedAt":  "2016-12-27T18:34:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjQ4NzkwMA==",
                                           "createdAt":  "2017-07-02T12:05:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Can anybody take a look at this? It would be good to know if you guys see this somewhere on your roadmap etc.",
                                           "updatedAt":  "2017-07-02T12:05:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjUxMzY0OQ==",
                                           "createdAt":  "2017-07-02T20:01:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@saurabh500 @divega @corivera any opinion here? Can we at least set expectations / timeline when we will have time to look at it? Thanks!",
                                           "updatedAt":  "2017-07-02T20:01:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMzkwNTIxOA==",
                                           "createdAt":  "2017-07-09T07:55:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "@karelz @danmosemsft @saurabh500 @corivera I think we should remove the \"needs-more-info\" label and add \"up-for-grabs\". This sounds like a good idea to at least explore.  \r\n\r\n@roji it would be great if you could do some prototyping of this in Npgsql if you haven\u0027t already. I suspect it should be possible to do enough to asses the API and make some measurements of the impact without making the actual changes on `System.Data.Common`. If the change turns very positive results then we can take the next step. \r\n\r\nI am not sure about the `IDbParameter\u003cT\u003e` interface. The extensibility model of ADO.NET has been consistently based on class inheritance since .NET Framework 3.0. The existing interfaces are there only for compatibility so adding new interfaces would be strange. Unless there is really good reason I would try to stick to classes.\r\n\r\ncc @ajcvickers ",
                                           "updatedAt":  "2017-07-09T07:55:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMzkwNzQ3Ng==",
                                           "createdAt":  "2017-07-09T08:50:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@divega sounds good to me - feel free to make such labels changes yourself, as area expert/owner :)\r\n\r\nWhen you mark things \"up for grabs\", just please try to describe what is needed (next steps) \u0026 rough complexity / time investment - see [triage rules](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/issue-guide.md#triage-rules---simplified) for details. Thanks!",
                                           "updatedAt":  "2017-07-09T08:50:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNDM2MTQ5Nw==",
                                           "createdAt":  "2017-07-11T07:40:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "Marking as \"up for grabs\". In order to make progress on this issue we need to do some exploration to understand both the magnitude of the performance impact (e.g. how many allocations we can actually avoid and how that benefits performance) and how to best extend the API. See https://github.com/dotnet/corefx/issues/8955#issuecomment-260108275 and https://github.com/dotnet/corefx/issues/8955#issuecomment-313905218.",
                                           "updatedAt":  "2017-07-11T07:40:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNTQ4MjUwMw==",
                                           "createdAt":  "2017-07-14T22:26:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB9h3EQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2021-10-08T09:40:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "FYI I\u0027m working on implementing this within Npgsql, I\u0027ll be coming back with some info pretty soon.",
                                           "updatedAt":  "2017-07-14T22:26:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNjA0NDQ3Mw==",
                                           "createdAt":  "2017-07-18T12:09:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5io1Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "ajcvickers",
                                                                               "createdAt":  "2017-07-18T16:48:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "YohDeadfall",
                                                                               "createdAt":  "2018-05-02T20:38:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "itn3000",
                                                                               "createdAt":  "2018-05-10T04:11:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "304NotModified",
                                                                               "createdAt":  "2018-08-24T20:00:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kronic",
                                                                               "createdAt":  "2019-05-15T21:07:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bounav",
                                                                               "createdAt":  "2020-10-12T09:44:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antiufo",
                                                                               "createdAt":  "2021-05-03T17:07:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DaEgi01",
                                                                               "createdAt":  "2021-05-23T09:48:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2021-10-08T09:41:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "SommerEngineering",
                                                                               "createdAt":  "2021-10-08T09:41:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gmcelhanon",
                                                                               "createdAt":  "2023-04-10T16:36:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  11
                                                         },
                                           "author":  "roji",
                                           "body":  "OK, I\u0027ve done this in Npgsql (https://github.com/npgsql/npgsql/issues/1639). The question is now how to best add this to ADO.NET as a whole, to allow this to be used in a database-independent way.\r\n\r\n### General Benefits\r\n\r\n* Offers a strongly-typed, generic API (`TypedValue`) alongside the existing weakly-typed object-based API. Promotes type safety, is a more modern API, etc.\r\n* Avoids needless boxing when writing value types. Writing a parameter value to the database in Npgsql in now a zero-allocation operation (and in 3.3 ExecuteNonQuery as a whole will probably be zero allocation).\r\n\r\n### Adding to ADO.NET\r\n\r\nThis would consist of adding either a new `DbParameter\u003cT\u003e` abstract base class , inheriting from `DbParameter`, or an `IDbParameter\u003cT\u003e` (see discussion below).\r\n\r\nIn addition, `DbProviderFactory` would need to be fitted with a new `GetParameter\u003cT\u003e()` alongside the existing `GetParameter()` (a `GetParameter\u003cT\u003e(PermissionState)` may also be necessary). The default implementation of this method would return a shim wrapping the result of the provider\u0027s `GetParameter()`; this would allow providers not providing a real generic parameter implementation to continue working seamlessly.\r\n\r\n### Base classes vs. interfaces\r\n\r\nAs @divega [mentioned above](https://github.com/dotnet/corefx/issues/8955#issuecomment-314361497), ADO.NET APIs are based on base classes rather than interfaces. I worked in both directions for a while to explore what the API would look like, here are some points:\r\n\r\n#### Via base class (`DbParameter\u003cT\u003e`)\r\n\r\n* Does not allow for easy code sharing between `NpgsqlParameter\u003cT\u003e` and `NpgsqlParameter` - (substantial) logic has to be either duplicated or refactored out somehow.\r\n* An internal interface must be introduced to capture the common API between `NpgsqlParameter` and `NpgsqlParameter\u003cT\u003e`; this is necessary to allow internal provider code to continue working. This adds considerable clutter to the codebase and is cumbersome.\r\n* If any user-facing APIs exist which accept/return an `NpgsqlParameter`, these also have to be changed (or counterparts added) to accept/return an interface capturing the two parameter types. This interface would need to be distinct from the internal one from the previous point, to avoid exposing internal functionality (so we end up with `INpgsqlParameter` and `INpgsqlInternalParameter`).\r\n\r\n#### Via interface (`IDbParameter\u003cT\u003e`)\r\n\r\n* Allows the `NpgsqlParameter\u003cT\u003e` to inherit from `NpgsqlParameter`. Since both are parameter classes, there\u0027s likely to be a lot of shared code; if `NpgsqlParameter\u003cT\u003e` inherits `NpgsqlParameter` we only need to add the typed value property plus some minimal generic-specific handling.\r\n* In order for `IDbParameter\u003cT\u003e` to be useful, it must duplicate the API surface of `DbParameter`, otherwise the user can\u0027t manipulate things like `Size`, `Precision`.\r\n\r\n#### Conclusions\r\n\r\nFor provider codebase maintenance and sanity, I\u0027d really prefer it if `NpgsqlParameter\u003cT\u003e` could extend from `NpgsqlParameter`. However, the fact that `IDbParameter\u003cT\u003e` needs to duplicate the `DbParameter` API is problematic: it would make it impossible to add a method with a default implementation to `DbParameter`.\r\n\r\nOn the other hand, I hear that C# 8 will have [default interface methods](https://github.com/dotnet/csharplang/blob/master/proposals/default-interface-methods.md), so maybe it\u0027s not so bad :)\r\n\r\n",
                                           "updatedAt":  "2017-07-25T04:13:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxNjEyNjA2OA==",
                                           "createdAt":  "2017-07-18T16:49:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@roji Good stuff! /cc @anpete",
                                           "updatedAt":  "2017-07-18T16:49:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1ODcxMjMxMw==",
                                           "createdAt":  "2019-01-29T21:23:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "I saw this mentioned in the issue review earlier and thought it might be useful to provide some feedback since it isn\u0027t dead.\r\n\r\nI did some investigation on doing this with SqlClient because I wanted to try and remove the parameter box. It\u0027s messy and I\u0027m not sure how you would achieve it without having the parameter instance write the data into the tds buffer.. \r\n\r\nAt the moment the parameter is asked for it\u0027s value object (including any coercion) and that object is then written by the TdsParserStateObject which understands the layout of all the relevant types. Doing this without the object variable means you\u0027ve either got to have the correct storage location generated at runtime by non-generic code or you delegate the writing of bytes to the generic object which can avoid the variable. Asking the parameter to do it exposes the internals of the tds layer to the user layer or will force multiple allocation and copying between buffers, neither of which is a great idea.\r\n\r\nIt\u0027s worth doing but it seems difficult to implement practically at the moment. I also think it will flow new members into System.Data which may cause compatibility problems without care.",
                                           "updatedAt":  "2019-01-29T21:23:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1ODc1OTE3Ng==",
                                           "createdAt":  "2019-01-30T00:10:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@Wraith2 you\u0027re right that this isn\u0027t necessarily a trivial thing to do inside an ADO.NET provider, and can mean serious refactoring to actually avoid refactoring. The main idea here is to at least allow providers to do this API-wise - if they do it or not is a different question. The default implementation for this new generic API would in any case delegate to the existing non-generic API, in order to prevent breaking changes, so existing providers would simply continue to work.\r\n\r\nI don\u0027t know anything about the SqlClient internal implementation... Full generic parameter handling indeed means that writing has to be generic \"all the way down\", without passing through a non-generic layer (such as TdsParserStateObject?) which switches on the specific type etc. Definitely not trivial.",
                                           "updatedAt":  "2019-08-26T23:58:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1ODc2Mjg0Nw==",
                                           "createdAt":  "2019-01-30T00:27:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAiaZ4g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2019-01-30T01:33:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "\u003e Full generic parameter handling indeed means that writing has to be generi\r\n\r\nPossibly, at the very least it means that the thing writing the value had to be generic though the caller may not need to be aware of the exact type. It\u0027s well worth doing but it will be a big very complicated job.\r\n\r\n\u003e I don\u0027t know anything about the SqlClient internal implementation..\r\n\r\nIt\u0027s quite fun in there. Lots of history to learn 😁 ",
                                           "updatedAt":  "2019-01-30T00:27:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNjkwNzQzNw==",
                                           "createdAt":  "2019-09-01T10:44:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Note: one non-trivial issue to be resolved is how nulls are written - with the current non-generic DbParameter, nulls are represented via DBNull, but that\u0027s not possible with a generic `DbParameter\u003cT\u003e`.\r\n\r\nUnlike non-generic DbParameter, we could accept null values, but that would only work for reference types. We could introduce another property on `DbParameter\u003cT\u003e` to express this, and also have a `DbParameter\u003cT\u003e.Null` as a shortcut (although it should still be possible to mutate an existing parameter instance to make it express null).",
                                           "updatedAt":  "2019-09-01T10:44:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNjkxMDc1MQ==",
                                           "createdAt":  "2019-09-01T11:29:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "[edit] stuff to do with readers which wasn\u0027t relevant to parameters (https://github.com/dotnet/corefx/issues/27682#issuecomment-526928918).",
                                           "updatedAt":  "2019-09-01T15:42:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNjkyODM0NA==",
                                           "createdAt":  "2019-09-01T15:28:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@Wraith2 these is a very important thing that I really hope we get to improve for 5.0, but you\u0027re discussing nullability when reading values from a reader, whereas this issue is about the introduction of a generic parameter API which would avoid boxing when sending values to the database.\r\n\r\nThe issue of GetFieldValue nullability has been discussed in https://github.com/dotnet/corefx/issues/27682#issuecomment-436736787 - for now that issue seems like a good place to continue that conversation. Do you mind moving this comment over there?",
                                           "updatedAt":  "2019-09-01T15:28:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNjkyOTE4OQ==",
                                           "createdAt":  "2019-09-01T15:39:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "You\u0027re right. They\u0027re sort of linked in my thinking since they\u0027re about carrying two pieces for information, is it null and what is the value which is easy as a tuple on output but better modelled as two properties on input. Much better to separate the information out to `IsNullable`, `IsDBNull` and Value properties on `DbParameter\u003cT\u003e` which is what you were talking about and prompted my recollection.",
                                           "updatedAt":  "2019-09-01T15:39:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNjkyOTQzMA==",
                                           "createdAt":  "2019-09-01T15:42:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e They\u0027re sort of linked in my thinking since they\u0027re about carrying two pieces for information, is it null and what is the value which is easy as a tuple on output but better modelled as two properties on input.\r\n\r\nThey definitely are, and I can imagine a world where the same solution holds for both (i.e. https://github.com/dotnet/csharplang/issues/2194), but for now that doesn\u0027t seem like it would happen...\r\n\r\nPS have edited your comment above to link to the other issue. ",
                                           "updatedAt":  "2019-09-01T15:42:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNjkzODY4OA==",
                                           "createdAt":  "2019-09-01T17:34:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "I\u0027m not sure whether equating language null to DBNull is correct. I can\u0027t find a scenario where you need the distinction but the my instinct is to keep them separate. \r\n\r\nThere\u0027s also the possibility of using a separate type, so having `DbParameter\u003cT\u003e` which is explicitly not nullable and then `DbNullableParameter\u003cT\u003e : MDbParameter\u003cT\u003e, INullable` which allows them. ",
                                           "updatedAt":  "2019-09-01T17:34:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNjk1Nzk1Nw==",
                                           "createdAt":  "2019-09-01T22:15:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAvtWAg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2019-09-02T09:27:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e I\u0027m not sure whether equating language null to DBNull is correct. I can\u0027t find a scenario where you need the distinction but the my instinct is to keep them separate.\r\n\r\nI\u0027m not sure I see why... C# null maps to other nulls in other contexts (e.g. JSON serialization?), and apart from the problematic intersection of generics, value types and null, I think it would work quite well. If you have any concrete argument here I\u0027d love to hear it.\r\n\r\nSomewhat ironically, with the current non-generic DbParameter, mapping language null to database null works even better - since the parameter simply holds a object, it\u0027s always possible to simply set it to null. I\u0027d be curious to learn why historically DBNull was chosen to express null instead of language null; it\u0027s possibly useful in that it distinguishes an uninitialized parameter (which contains language null) from a parameter set to null (DBNull), but I\u0027m not sure of the actual importance of that (again, the C# language doesn\u0027t have that distinction and things seem to work out fine).\r\n\r\n\u003e There\u0027s also the possibility of using a separate type, so having DbParameter\u003cT\u003e which is explicitly not nullable and then DbNullableParameter\u003cT\u003e : MDbParameter\u003cT\u003e, INullable which allows them.\r\n\r\nWouldn\u0027t you have to solve the same question with DbNullableParameter, i.e. how to represent null when T is a value type? Having separate nullable and non-nullable parameter types would then be orthogonal to that question. In any case, is there any reason we need a non-nullable parameter type and a nullable parameter type? ADO.NET currently has a single nullable parameter type (DbParameter, where null is expressed via DBNull) and it seems to be working well.\r\n\r\nPS DbParameter actually has an [IsNullable property](https://docs.microsoft.com/en-us/dotnet/api/system.data.common.dbparameter.isnullable?view=netframework-4.8#System_Data_Common_DbParameter_IsNullable), which may resemble your distinction. I\u0027m not sure what it\u0027s actually used for though, it possibly only plays a role when using [the command builder](https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/generating-commands-with-commandbuilders).",
                                           "updatedAt":  "2019-09-01T22:15:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNjk2MDQ0NQ==",
                                           "createdAt":  "2019-09-01T22:57:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "\u003e Wouldn\u0027t you have to solve the same question with DbNullableParameter, i.e. how to represent null when T is a value type?\r\n\r\nNot really no. If IsDBNull the value is undefined so in storage terms it\u0027d be default(T) or the last value, doesn\u0027t matter since attempting to read it would be an error.\r\n\r\nFor some reason I see JSON null as a language null and think that the javascript null and c# null are compatible. I feel that DBNull is a data null which is distinct from a language null. As you pointed out you can use the difference to explicitly see the difference between not setting a value and setting it to be null. Not exactly convincing I agree but it comes from my quite direct dealings with data, I don\u0027t use orms.\r\n",
                                           "updatedAt":  "2019-09-01T22:57:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzA3NjY4OA==",
                                           "createdAt":  "2019-09-02T09:31:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBGv4ow==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2019-09-02T09:40:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2019-09-02T22:35:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kronic",
                                                                               "createdAt":  "2020-06-08T22:45:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "GSPP",
                                           "body":  "I have found a case where `DBNull` provides a distinction of cases: https://stackoverflow.com/questions/4488727/what-is-the-point-of-dbnull/4488758\r\n\r\nI consider `DBNull` to be an API design mistake. This `ExecuteScalar` situation could have been solved differently, for example by returning an object (or a struct) describing the result, or by throwing if no result set was returned. `DBNull` makes handling ADO.NET considerably harder. If its role can be reduced without hurting consistency too much then that\u0027s great.\r\n\r\nI have never seen a situation where the existence of `DBNull` was desirable.",
                                           "updatedAt":  "2019-09-02T09:31:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzA4MDc4MQ==",
                                           "createdAt":  "2019-09-02T09:43:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@GSPP thanks for linking to that question. FWIW I agree with you and Marc\u0027s response, and also think that DBNull was a mistake. But it actually doesn\u0027t matter that much, since once we move to generic type parameters DBNull simply becomes impossible anyway, so a different way to represent null on parameters must be found in any case. The same may be true also of a new API which would be an alternative to DbDataReader.GetFieldValue, if we choose to go down that path.",
                                           "updatedAt":  "2019-09-02T09:43:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzA5NjU1OQ==",
                                           "createdAt":  "2019-09-02T10:30:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAvtq0g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2019-09-02T10:44:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "That is a useful SO answer. We shouldn\u0027t add new uses of DBNull, i think we all agree on that.\r\n```csharp\r\npublic class DbParameter\u003cT\u003e\r\n{\r\n\tpublic bool IsAssigned { get;set; }\r\n\tpublic bool IsNullable { get;set; }\r\n\tpublic bool IsNull { get; set { if (value \u0026\u0026 !IsNullable) throw new InvalidOperationException() } )\r\n\tpublic T Value { \r\n\t\tget { if (IsNull) throw new InvalidOperationsException() }  \r\n\t\tset {\r\n\t\t\tIsAssigned=true;\r\n\t\t\tif (typeof(T).IsClass \u0026\u0026 value is null) // the only point of contention?\r\n\t\t\t{\r\n\t\t\t\tIsNull=true;\r\n\t\t\t}\r\n\t\t\t_value = value;\r\n\t\t} \r\n\t}\r\n}\r\n```",
                                           "updatedAt":  "2019-09-02T10:30:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzEwMDg1Nw==",
                                           "createdAt":  "2019-09-02T10:45:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "(just to set expectations - I personally am not going to start working on this right away, although I definitely intend to do this for 5.0)",
                                           "updatedAt":  "2019-09-02T10:45:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjAzNDE5OA==",
                                           "createdAt":  "2020-05-08T21:44:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBDqrYA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2020-05-08T22:22:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mldisibio",
                                           "body":  "Regarding the discussion around the purpose of DbNull, see also [this SO example](https://stackoverflow.com/a/8777776/458354)\r\n\r\nAs someone who has written an abstraction layer over ADO.Net providers (and now looking to extend it to Postgres via the npgsql library) `DbNull` is not only important for interpreting what you get back from a result, but what you send in as parameter values. I am familiar with how this works in particular with Sql Server, and was researching how it might apply to an abstraction over `NpgsqlParameter\u003cT\u003e` (hence I was led to this thread ). \r\n\r\nIf you want to tell Sql Server to set a column to an explicit `null`, you use `DbNull.Value` for the parameter value. \r\nBut if you happen to use the syntax in the example where you are referencing one or more columns via parameters (instead of leaving the columns out completely) and want Sql Server to use its (pre-declared) `DEFAULT` value for one or more of the colums to which the parameter refers, then you must set the parameter value to `null` and not to `DbNull`. \r\n\r\nSo indeed if an abstraction layer wants to take advantage of the `NpgsqlParameter\u003cT\u003e` it would also have to account for `null` and `Nullable\u003cT\u003e` semantics as well.",
                                           "updatedAt":  "2020-05-08T21:44:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjA0NTg0MQ==",
                                           "createdAt":  "2020-05-08T22:22:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Thanks for that info @mldisibio.",
                                           "updatedAt":  "2020-05-08T22:22:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NDM1NzYzMg==",
                                           "createdAt":  "2021-01-05T03:02:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pha3z",
                                           "body":  "Why doesn\u0027t IDbParameter offer SetString(), SetBoolean(), SetInt32(), ...etc  implementations?\r\nIDataReader works this way, so why isn\u0027t the pattern repeated to IDbParameter??\r\n\r\nSeems like a very easy-to-understand solution that would be backwards compatible with existing ado.net architecture.",
                                           "updatedAt":  "2021-01-05T03:02:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NDY5ODY4Mg==",
                                           "createdAt":  "2021-01-05T15:15:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@pha3z one big issue with that pattern, is that it creates a closed set of types that can be used with DbParameters - but different databases have very different supported types (e.g. PostgreSQL has a type for IP addresses). This is one reason why DbDataReader has a generic GetFieldValue which can return any type. A good solution for writing would do the same here.",
                                           "updatedAt":  "2021-01-05T15:15:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NTA1MDcxOQ==",
                                           "createdAt":  "2021-01-06T03:20:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pha3z",
                                           "body":  "@roji \r\n\r\nYes but the initial reasoning stated for DbParameterT was to avoid boxing.  To my knowledge, boxing is only relevant on value types.  PostgresSQL defines an IP Address type, sure, but is that relevant?  The dotnet type is what we\u0027re talking about passing into the parameter. What Npgsql does to translate the Dotnet type into the DbType is under-the-hood. Are there any database providers that support directly assigning dotnet value types *other than* the standard primitive types? \r\n\r\nI\u0027m not saying that a generic is something to be opposed.  Clearly its the right solution.  But this issue has been backlogged for years.  If the reason its backlogged is due to high refactoring requirements to support generics, then it seems like it would make more sense to add strongly typed primitives to cover 99% of use cases.\r\n\r\nPlease correct me if I am somehow completely off about the boxing issue.\r\n",
                                           "updatedAt":  "2021-01-06T03:20:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NTEzNTc3NA==",
                                           "createdAt":  "2021-01-06T07:30:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "\u003e Are there any database providers that support directly assigning dotnet value types other than the standard primitive types?\r\n\r\nYes. For example _FirebirdClient_.",
                                           "updatedAt":  "2021-01-06T07:30:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NTE1NjY0OA==",
                                           "createdAt":  "2021-01-06T08:21:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "\u003e  If the reason its backlogged is due to high refactoring requirements to support generics,\r\n\r\nI\u0027ve looked at it several times from the SqlClient perspective and the problem isn\u0027t simply adding a generic parameter it\u0027s all the internal logic that relies on the object type for coercion between the source type and destination type.",
                                           "updatedAt":  "2021-01-06T08:21:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NTI0NTI1MQ==",
                                           "createdAt":  "2021-01-06T11:26:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e Are there any database providers that support directly assigning dotnet value types other than the standard primitive types?\r\n\r\nYou\u0027re right the boxing is relevant on value types and that IPAddress is a value type, but we shouldn\u0027t make the assumption that there won\u0027t be a value type supported by some ADO.NET provider out there. Some good examples are the Npgsql support for NodaTime types (instead of the built-in BCL DateTime/TimeSpan), which are structs.\r\n\r\n\u003e  But this issue has been backlogged for years. If the reason its backlogged is due to high refactoring requirements to support generics, then it seems like it would make more sense to add strongly typed primitives to cover 99% of use cases.\r\n\r\nIt\u0027s true that this has been backlogged for quite a while, but I do think we should do it right when we do it - I\u0027m still hoping to get around to it for .NET 6. Default interface methods should actually simplify the design (see https://github.com/dotnet/runtime/issues/17446#issuecomment-316044473).",
                                           "updatedAt":  "2021-01-06T11:26:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NTM0OTg5NQ==",
                                           "createdAt":  "2021-01-06T15:01:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pha3z",
                                           "body":  "Ok all that makes sense. Thank you for the consideration! 👍 ",
                                           "updatedAt":  "2021-01-06T15:01:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iPQDr",
                                           "createdAt":  "2023-07-24T15:43:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Another reason for doing this is for the user to be able to provide a requested CLR type for an output parameter; see https://github.com/dotnet/SqlClient/issues/2092 for more details.",
                                           "updatedAt":  "2023-07-24T15:43:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-9xm_",
                                           "createdAt":  "2024-05-24T18:20:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DmitryMak",
                                           "body":  "\u003e On the read side of things, there\u0027s `DbDataReader.GetFieldValue\u003cT\u003e()` allowing users to generically read values. This allows ADO.NET providers to provide an implementation that doesn\u0027t box value types - users can read ints without needless heap allocations.\r\n\r\nRegarding the read side, `GetFieldValue\u003cT\u003e` is usually implemented with `return (T) (object)` so it must be boxing as well. \r\n\r\n[SQLite](https://github.com/Faithlife/System.Data.SQLite/blob/00487a0f976d3422e351d00f14ff337a5d938faa/src/System.Data.SQLite/SQLiteDataReader.cs#L537) and [MySql](https://github.com/mysql-net/MySqlConnector/blob/9efc679afa3d662fef2684adc89fe4152e272817/src/MySqlConnector/MySqlDataReader.cs#L375)\r\n```\r\npublic override T GetFieldValue\u003cT\u003e(int ordinal)\r\n{\r\n\t...\r\n\tif (typeof(T) == typeof(int))\r\n\t    return (T) (object) GetInt32(ordinal);  \u003c-- will generate IL: box [System.Runtime]System.Int32\r\n\t...\r\n\tif (typeof(T) == typeof(string))\r\n\t    return (T) (object) GetString(ordinal);\r\n\t...\r\n\treturn (T) GetValue(ordinal);\r\n}\r\n```\r\n\r\nDo you have examples of `DbDataReader.GetFieldValue\u003cT\u003e` implementations that don\u0027t box?",
                                           "updatedAt":  "2024-05-24T18:22:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-91rG",
                                           "createdAt":  "2024-05-24T18:31:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e Do you have examples of DbDataReader.GetFieldValue\u003cT\u003e implementations that don\u0027t box?\n\nYes, take a look at Npgsql.",
                                           "updatedAt":  "2024-05-24T18:31:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-93K-",
                                           "createdAt":  "2024-05-24T18:36:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjJdaA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2024-05-24T20:05:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "En3Tho",
                                           "body":  "@DmitryMak When running on CLR, patterns you\u0027ve shown are recognized by jit compiler and boxing is automatically removed.\n\nIt will still box on other runtimes like mono for example.\n\nIf you\u0027ve hit a pattern like that (generic method with typeof checks then box-unbox sequence) that still boxes then you should file an issue I guess.",
                                           "updatedAt":  "2024-05-24T18:36:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-93N5",
                                           "createdAt":  "2024-05-24T18:36:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODjJdYg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2024-05-24T20:04:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "```csharp\r\nif (typeof(T) == typeof(int))\r\n\t    return (T) (object) GetInt32(ordinal);\r\n```\r\nnote that this is a special pattern that the jit can recognise and optimize away. In the case where T is int casts would resolve to `(int)(object)intValue` and the jit can recognise the pattern will box and then unbox and optimize to just `intValue`. \r\nIn language terms it will box. When you run the code and the asm is produced it will probably not box (depending on debug/release, tier0/tier1, (d)PGO, etc). ",
                                           "updatedAt":  "2024-05-24T18:36:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5--dAv",
                                           "createdAt":  "2024-05-24T20:21:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DmitryMak",
                                           "body":  "@En3Tho and @Wraith2 is the `(T)(object)val` optimization documented anywhere? I only found it [here](https://github.com/dotnet/runtime/discussions/102480#discussion-6703340)",
                                           "updatedAt":  "2024-05-24T20:21:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hrZxE",
                                           "createdAt":  "2025-03-11T03:48:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ejball",
                                           "body":  "How about doing something similar to `DbDataReader.GetFieldValue\u003cT\u003e` with the existing (non-generic) `DbParameter` class?\n\n```csharp\npublic abstract class DbParameter : ...\n{\n    ...\n    public virtual bool IsNull =\u003e Value is null or DBNull;\n    public virtual Type? ValueType =\u003e Value?.GetType();\n    public virtual T GetValue\u003cT\u003e() =\u003e (T) Value;\n    public virtual void SetValue\u003cT\u003e(T value) =\u003e Value = value;\n}\n```\n\nAn optimized implementation could presumably use a discriminated union of 16 bytes to store a `Guid` or smaller without boxing.",
                                           "updatedAt":  "2025-03-12T13:17:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jYRql",
                                           "createdAt":  "2025-03-20T16:33:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKyMjg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "divega",
                                                                               "createdAt":  "2025-03-20T21:20:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mgravell",
                                           "body":  "I looked at this in parallel (coming from the Dapper angle); I\u0027d like to propose:\n\n``` diff\n  public abstract class DbCommand\n  {\n+      public virtual DbParameter CreateParameter\u003cT\u003e(T value)\n+      {\n+          var param = CreateParameter();\n+          param.Value = ((object?)value) ?? DBNull.Value;\n+          return param;\n+      }\n  }\n  public abstract class DbBatchCommand\n  {\n+      public virtual DbParameter CreateParameter\u003cT\u003e(T value)\n+      {\n+          var param = CreateParameter();\n+          param.Value = ((object?)value) ?? DBNull.Value;\n+          return param;\n+      }\n  }\n```\n\nThis is can then be overridden if providers want to, for example npgsql can do\n\n``` c#\npublic override DbParameter CreateParameter\u003cT\u003e(T value)\n  =\u003e new NpgsqlParameter\u003cT\u003e { TypedValue = value };\n```\n\nTaking the value as a parameter avoids the need to access `.Value`. I *do* wonder whether there should also be some new API on `DbParameter`, though, in particular I\u0027m thinking about reading `out`/`ref` values - maybe:\n\n``` diff\n  public abstract class DbParameter\n  {\n+      public virtual T GetValue\u003cT\u003e() =\u003e (T)Value;\n+      public virtual void SetValue\u003cT\u003e(T value) =\u003e Value = ((object?)value) ?? DBNull.Value;\n  }\n```\n\nwhich npgsql could override:\n\n``` c#\npublic override TValue GetValue\u003cTValue\u003e()\n{\n    if (typeof(T) == typeof(TValue))\n    {\n        var typed = TypedValue;\n        return Unsafe.As\u003cT, TValue\u003e(ref typed);\n    }\n    else\n    {\n        return base.GetValue\u003cTValue\u003e();\n    }\n}\npublic override void SetValue\u003cTValue\u003e(TValue value)\n{\n    if (typeof(T) == typeof(TValue))\n    {\n        TypedValue = Unsafe.As\u003cTValue, T\u003e(ref value);\n    }\n    else\n    {\n        base.SetValue\u003cTValue\u003e(value);\n    }\n}\n```",
                                           "updatedAt":  "2025-03-20T16:38:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jY3L4",
                                           "createdAt":  "2025-03-20T17:34:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "I like that surface area in general. I think we also need to have a new DbParameter property to tell is whether a strongly typed parameter has been set to null or not without needing to understand the value or its type. ",
                                           "updatedAt":  "2025-03-20T17:34:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6japl6",
                                           "createdAt":  "2025-03-20T21:12:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEKyMrA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "divega",
                                                                               "createdAt":  "2025-03-20T21:20:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mgravell",
                                           "body":  "Maybe just an `public virtual bool IsDbNull =\u003e Value is DBNull;` ?",
                                           "updatedAt":  "2025-03-20T21:12:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jbRsI",
                                           "createdAt":  "2025-03-20T22:52:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "If you had an int somehow not in a box then that would box it. The whole existence of DBNull is a .net 1.0 idea around everything being objects which the ecosystem as largely abandoned as the performance implications became clear. \n\nThe null-ness of a value is a separate piece of data from the value. You should only try to touch the value it is known to be not null. I won\u0027t object to having an IsDBNull function if that\u0027s what we want to call it but I do think that nullness needs to be separate from the value otherwise you end up needing to pick sentinal values which isn\u0027t sensible for things like int.",
                                           "updatedAt":  "2025-03-20T22:52:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jq2Yw",
                                           "createdAt":  "2025-03-22T23:46:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mgravell",
                                           "body":  "@Wraith2 the idea there is that a subclass like the existing `NpgsqlParameter\u003cT\u003e` would `override` this and provide whatever logic it has for null-ness, I.e. \"is my value currently coming from `TypedValue`? Then I\u0027m not null\". I\u0027m also assuming that the same subclass would check `.Value set` for `DBNull` and set that flag accordingly.",
                                           "updatedAt":  "2025-03-22T23:46:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jrCN3",
                                           "createdAt":  "2025-03-23T02:06:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOESAU-Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jungsooooo",
                                                                               "createdAt":  "2025-05-14T00:07:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "Sure. I get that. Imagine that we have:\n```csharp \npublic SqlParameter\u003cT\u003e : SqlParameter\n{\n\tpublic T TypedValue {get;set;}\n}\n```\nBy breaking back compat and unsealing the current SqlParameter. \nWe can\u0027t store the T in the existing `object` typed location because that might require a box so we\u0027re keeping it in a `T` or similar typed location that can store it without a box. So how do we tell it it\u0027s `Null`. For example an int has default value 0 so do we assume 0 means null? that isn\u0027t sensible because we know keeping 0\u0027s is very common. We can\u0027t compare int against DBNull without a box. \n\nIf we assume we have the base class Value location still available we could check if the base class object location contains a DBNull object but that feels pretty weird because we\u0027ll need additional logic to make sure that when we set TypedValue we unset base.Value.\n\nOr are you requiring that we link langauge null and db null as concepts? So if an `int` typed parameter needs to be nullable we enforce the use of `int?`. I\u0027m not a fan of that idea because the nulls are slightly conceptually different. In sql it\u0027s entirely possible to get a null value for a column defined as non-nullable by putting it on the right hand side of a left outer join.\n\nI\u0027d rather have:\n```csharp \npublic SqlParameter\u003cT\u003e : SqlParameter\n{\n\tpublic T TypedValue {get;set;}\n\tpublic bool IsDbNull {get;set;}\n}\n```\nbecause it \n - removes the need to use the base class value\n - doesn\u0027t link langauge and db null\n - removes the need to reserve an item in range for a null sentinel\n - allows a pattern where you don\u0027t touch Value or TypedValue if IsDbNull is true\n - follows the same sort of approach as DbReader where null check is separate from value check\n\nI\u0027d want to do something like:\n```csharp\n            using (var con = new SqlConnection(conStr))\n            using (var cmd = con.CreateCommand())\n            {\n                cmd.CommandType = System.Data.CommandType.StoredProcedure;\n                cmd.CommandText = \"sp_do_thing\";\n\n                var retval = cmd.CreateParameter();\n                retval.ParameterName = \"RETURN_VALUE\";\n                retval.Direction = ParameterDirection.ReturnValue;\n\n                var output = cmd.CreateTypedParameter\u003cint\u003e();\n\t\toutput.ParameterName = \"output\";\n                output.Direction = ParameterDirection.Output;\n                output.IsDbNull = true;\n\n                cmd.ExecuteNonQuery();\n\n                if (retval.Value != DBNull.Value)\n                {\n                    // do stuff\n                }\n\n                if (!output.IsDbNull)\n                {\n                    int importantValue = output.TypedValue;\n                }\n            }\n```",
                                           "updatedAt":  "2025-03-23T02:07:18Z"
                                       }
                                   ],
                         "totalCount":  51
                     },
        "title":  "API for writing parameters without boxing",
        "labels":  [
                       "enhancement",
                       "api-needs-work",
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/22109",
        "createdAt":  "2017-06-03T01:10:29Z",
        "number":  22109,
        "author":  "spudcud",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCz_jRw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "popisms",
                                            "createdAt":  "2017-06-10T00:40:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TimCohn",
                                            "createdAt":  "2017-08-01T13:15:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NicoBazan1",
                                            "createdAt":  "2018-07-31T22:39:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "daiplusplus",
                                            "createdAt":  "2018-09-17T20:20:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stuartstein777",
                                            "createdAt":  "2018-10-10T08:21:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Misiu",
                                            "createdAt":  "2018-10-16T08:45:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DenSmoke",
                                            "createdAt":  "2018-11-14T13:43:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marcoregueira",
                                            "createdAt":  "2018-11-26T09:41:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2019-04-16T07:50:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dfahlander",
                                            "createdAt":  "2019-06-10T14:03:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "djkong7",
                                            "createdAt":  "2019-07-01T20:26:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GitClickOk",
                                            "createdAt":  "2019-09-06T18:38:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "anthonyhollings",
                                            "createdAt":  "2019-09-11T01:26:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maxle5",
                                            "createdAt":  "2020-03-17T10:53:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mashengying",
                                            "createdAt":  "2020-03-20T09:44:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "strangeman375",
                                            "createdAt":  "2020-05-19T05:52:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ryan-carbon",
                                            "createdAt":  "2020-05-19T08:53:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elachlan",
                                            "createdAt":  "2020-06-21T04:42:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MgSam",
                                            "createdAt":  "2020-11-02T17:15:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ghosttie",
                                            "createdAt":  "2020-12-16T16:08:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ronnieoverby",
                                            "createdAt":  "2021-01-14T14:53:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kalatchev",
                                            "createdAt":  "2021-02-07T12:28:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jkdba",
                                            "createdAt":  "2021-06-14T20:33:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "wjrogers",
                                            "createdAt":  "2021-06-23T15:58:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WouterLeenders",
                                            "createdAt":  "2021-07-28T13:02:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austinw-fineart",
                                            "createdAt":  "2021-08-11T02:40:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DualBrain",
                                            "createdAt":  "2021-09-16T20:11:12Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pevans360",
                                            "createdAt":  "2021-12-31T16:47:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "avsorokin",
                                            "createdAt":  "2022-02-11T13:55:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "skurth",
                                            "createdAt":  "2022-09-11T13:49:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lukas-shawford",
                                            "createdAt":  "2022-10-29T02:54:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gumbarros",
                                            "createdAt":  "2023-03-29T20:42:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Vijay-Nirmal",
                                            "createdAt":  "2023-04-19T14:11:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "marcelgoldstein",
                                            "createdAt":  "2023-06-14T08:03:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "slang25",
                                            "createdAt":  "2023-08-01T19:31:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "manandre",
                                            "createdAt":  "2023-08-01T20:17:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bryanvam",
                                            "createdAt":  "2023-08-01T20:27:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jamezamm",
                                            "createdAt":  "2023-08-03T12:05:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Shane32",
                                            "createdAt":  "2023-08-16T21:05:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SeungHuLee",
                                            "createdAt":  "2023-08-19T17:36:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "astrassburg",
                                            "createdAt":  "2023-09-12T13:48:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "matherm-aboehm",
                                            "createdAt":  "2023-09-18T10:42:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MizardX",
                                            "createdAt":  "2023-10-13T08:37:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DRKV333",
                                            "createdAt":  "2023-10-27T10:55:22Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "aloraman",
                                            "createdAt":  "2023-10-28T11:59:55Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "RabbitFH",
                                            "createdAt":  "2023-10-31T01:29:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RabbitFH",
                                            "createdAt":  "2023-10-31T01:29:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pedoc",
                                            "createdAt":  "2023-10-31T01:32:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jimSampica",
                                            "createdAt":  "2023-10-31T15:48:39Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jgilbert2017",
                                            "createdAt":  "2023-11-14T23:06:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MatthiasBergen",
                                            "createdAt":  "2023-11-20T09:02:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tburi",
                                            "createdAt":  "2023-12-10T10:54:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pagefault",
                                            "createdAt":  "2023-12-18T14:47:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Mythicsoft",
                                            "createdAt":  "2024-01-05T16:56:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ttekampe",
                                            "createdAt":  "2024-01-17T14:30:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MrMikeJJ",
                                            "createdAt":  "2024-01-20T00:46:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DeluxeN87",
                                            "createdAt":  "2024-01-22T10:45:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "andreycha",
                                            "createdAt":  "2024-02-06T10:50:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "brendangooden",
                                            "createdAt":  "2024-02-06T20:52:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Halofreak1990",
                                            "createdAt":  "2024-02-09T10:18:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JNecker",
                                            "createdAt":  "2024-02-14T08:50:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ksmith97",
                                            "createdAt":  "2024-02-15T22:55:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "spenceclark",
                                            "createdAt":  "2024-02-28T10:42:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tasin5541",
                                            "createdAt":  "2024-03-07T12:09:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Trisped",
                                            "createdAt":  "2024-03-11T22:02:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "surfingbytes",
                                            "createdAt":  "2024-03-19T09:33:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "astaerk",
                                            "createdAt":  "2024-04-22T13:57:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "taylorchasewhite",
                                            "createdAt":  "2024-04-29T18:35:52Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "gumbarros",
                                            "createdAt":  "2024-04-30T11:52:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LucioPelinson",
                                            "createdAt":  "2024-04-30T12:14:24Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "LucioPelinson",
                                            "createdAt":  "2024-04-30T12:14:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "judahr",
                                            "createdAt":  "2024-05-15T12:19:04Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "Floyddotnet",
                                            "createdAt":  "2024-07-09T11:16:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bdrajer",
                                            "createdAt":  "2024-08-12T10:12:09Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "bdrajer",
                                            "createdAt":  "2024-08-12T10:12:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bouvierr",
                                            "createdAt":  "2024-08-19T17:04:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "arturonline",
                                            "createdAt":  "2024-10-01T11:19:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jmbryan4",
                                            "createdAt":  "2024-10-07T20:10:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "douggish",
                                            "createdAt":  "2024-11-06T21:16:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OronDF343",
                                            "createdAt":  "2025-02-25T16:01:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Homertax",
                                            "createdAt":  "2025-04-15T15:37:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kondelik",
                                            "createdAt":  "2025-04-22T08:40:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KirillKornienko",
                                            "createdAt":  "2025-05-13T21:56:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tauheedul",
                                            "createdAt":  "2025-05-22T09:26:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "StefanGreve",
                                            "createdAt":  "2025-06-04T19:10:35Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "StefanGreve",
                                            "createdAt":  "2025-06-04T19:10:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sohcah",
                                            "createdAt":  "2025-06-25T16:04:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Popsikill",
                                            "createdAt":  "2025-07-24T06:40:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "robert94p",
                                            "createdAt":  "2025-07-28T09:54:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "oconnor0",
                                            "createdAt":  "2025-08-12T21:38:39Z"
                                        }
                                    ],
                          "totalCount":  90
                      },
        "updatedAt":  "2025-06-14T21:41:43Z",
        "body":  "Core 2.0 preview 1 now supports SqlDataAdapter and DataTable which is great and the best way to fill a DataSet from a stored procedure is by using SqlDataAdapter.Fill(DataSet). This works perfectly when not used in an async environment. There is currently no way in Core or full .NET to do a FillAsync. Without a FillAsync which would take a single line of code now requires 20 lines of much more complicated code including using SqlDataReader.GetSchemaTable() which is currently broken preview 1. Based on other posts I believe it will be working in Preview 2 but have not seen a definitive on that.\r\n\r\nThis is not something for 2.0 but is a clear deficiency in truly being able to support a fully async back-end and would be a much needed improvement moving forward.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMXz90w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MTY4NDEyOA==",
                                           "createdAt":  "2018-01-30T18:14:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD3RzQw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "gumbarros",
                                                                               "createdAt":  "2024-10-20T22:42:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "saurabh500",
                                           "body":  "Moving to future because of lack of resources",
                                           "updatedAt":  "2018-01-30T18:14:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MTY4NDMwMw==",
                                           "createdAt":  "2018-01-30T18:14:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODf2DJQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gruski",
                                                                               "createdAt":  "2024-04-28T21:02:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "saurabh500",
                                           "body":  "Alternatively if someone from the community would like to drive this, the effort would be welcome.",
                                           "updatedAt":  "2018-01-30T18:14:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MTcwMzY0Mg==",
                                           "createdAt":  "2018-01-30T19:18:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "This needs a formal API proposal written up. @spudcud do you want to do this - updating your top post is clearest?\r\nSee https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md",
                                           "updatedAt":  "2018-01-30T19:18:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2MjAzNTkxMg==",
                                           "createdAt":  "2018-01-31T19:03:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOECBOJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "marcoregueira",
                                                                               "createdAt":  "2018-11-26T09:41:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2018-11-28T07:35:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "thesoftwarejedi",
                                                                               "createdAt":  "2019-01-14T15:46:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "brendangooden",
                                                                               "createdAt":  "2021-08-11T23:16:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gruski",
                                                                               "createdAt":  "2024-04-28T21:02:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BenoitRobet",
                                                                               "createdAt":  "2025-01-11T16:51:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "jonreis",
                                           "body":  "Not sure if this helps, but someone has implemented this.\r\n\r\nhttps://github.com/voloda/AsyncDataAdapter/blob/master/AsyncDataAdapter/DataAdapter.cs",
                                           "updatedAt":  "2018-01-31T19:03:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMDE1NDA5Nw==",
                                           "createdAt":  "2018-10-16T08:47:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODf2DLQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gruski",
                                                                               "createdAt":  "2024-04-28T21:02:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Misiu",
                                           "body":  "@danmosemsft any chance this can be added to Core 3.0?\r\nI\u0027ve added package suggested by @jonreis and it looks like it works fine 😄 Ideally this should be added into Core.",
                                           "updatedAt":  "2018-10-16T08:54:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MjAwMDkyOA==",
                                           "createdAt":  "2019-04-11T07:30:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODf2DLg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "snow-jallen",
                                                                               "createdAt":  "2022-08-05T16:39:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gruski",
                                                                               "createdAt":  "2024-04-28T21:02:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "effyteva",
                                           "body":  "+1 on this,\r\nPerhaps it about time to take care of it?",
                                           "updatedAt":  "2019-04-11T07:30:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MjAwNDI0OA==",
                                           "createdAt":  "2019-04-11T07:41:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODf2DMQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "snow-jallen",
                                                                               "createdAt":  "2022-08-05T16:39:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Gruski",
                                                                               "createdAt":  "2024-04-28T21:02:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Misiu",
                                           "body":  "@danmosemsft @saurabh500 any updates on this?",
                                           "updatedAt":  "2019-04-11T07:41:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MzAyMDAyNA==",
                                           "createdAt":  "2019-04-14T17:13:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODf2DMw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "snow-jallen",
                                                                               "createdAt":  "2022-08-05T16:39:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "Gruski",
                                                                               "createdAt":  "2024-04-28T21:02:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "brendanalexdr",
                                           "body":  "+1",
                                           "updatedAt":  "2019-04-14T17:13:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MzA0NTEwNw==",
                                           "createdAt":  "2019-04-14T19:21:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@saurabh500?",
                                           "updatedAt":  "2019-04-14T19:21:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MzA0NTMwNQ==",
                                           "createdAt":  "2019-04-14T19:22:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@divega ",
                                           "updatedAt":  "2019-04-14T19:22:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MzA2NTYwNw==",
                                           "createdAt":  "2019-04-14T22:56:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "Moving to out of System.Data.SqlClient and into System.Data because I believe the methods should be added to the base DbDataAdapter, before any provider implements it. \r\n\r\nI am also keeping this issue in the Future milestone because we need a much better understanding of its impact before we decide to pick it up and implement it in a specific release. For example:\r\n\r\n1. How many modern applications that take advantage of async would start using async APIs on DataSet/DataAdapter if they were available? Why don\u0027t they use other more modern data access technologies that already support async? I appreciate that a few people have voted for this issue and have been asking for updates on it. This adds up to a bit of data, but we need more, especially given that there are many other things in the backlog that seem to have much more demand. \r\n\r\n2. Is the main goal of using async in this case mainly achieving better scalability on the server or more responsiveness on the client?\r\n\r\n3. What other API that perform I/O does Fill use, that would need to become async in order for FillAsync to avoid every blocking?\r\n\r\n4. What about the async Update story for DataSet/DataTable? \r\n\r\nOn the flip side, If someone from the community wanted to drive this, I believe the API design part, and possibly the implementation of FillAsync on SqlClient, would be relatively simple. The job is mostly to duplicate the code of the sync version into async methods, and also make sure that all potentially blocking calls in the implementation use async APIs as well.\r\n\r\nFor the SqlCient implementation of Update, currently batching is internal and synchronous. I suspect it would make sense to leverage the new public batching APIs from https://github.com/dotnet/corefx/issues/35135 once they are in place. ",
                                           "updatedAt":  "2019-04-14T22:59:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MzA2NTc4MQ==",
                                           "createdAt":  "2019-04-14T22:59:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "cc @roji @ajcvickers ",
                                           "updatedAt":  "2019-04-14T22:59:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NDA0Mjk3NQ==",
                                           "createdAt":  "2019-04-17T11:21:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Similar to dotnet/corefx#35012, which adds missing async APIs elsewhere in ADO.NET.\r\n\r\nAdding these APIs in the System.Data base classes is probably easy enough (with them delegating by default to the sync APIs, as usual with ADO.NET), allowing providers to implement later.",
                                           "updatedAt":  "2019-04-17T11:21:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5MTc3MTU5Mw==",
                                           "createdAt":  "2019-05-13T10:42:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAog1Yw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2019-05-13T10:47:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "effyteva",
                                           "body":  "\u003e Similar to dotnet/corefx#35012, which adds missing async APIs elsewhere in ADO.NET.\r\n\u003e \r\n\u003e Adding these APIs in the System.Data base classes is probably easy enough (with them delegating by default to the sync APIs, as usual with ADO.NET), allowing providers to implement later.\r\n\r\nWould it help if I publish a PR for that? It seems pretty straightforward.\r\n\r\nEffy",
                                           "updatedAt":  "2019-05-13T10:42:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMDUyMzMzMQ==",
                                           "createdAt":  "2020-05-19T01:36:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODf2EVQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2020-05-20T07:16:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gruski",
                                                                               "createdAt":  "2024-04-28T21:08:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "uprightbass360",
                                           "body":  "Is this still under review?",
                                           "updatedAt":  "2020-05-19T01:36:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTI3NTM0NA==",
                                           "createdAt":  "2020-05-20T06:54:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@uprightbass360 this issue is currently in the backlog, which means we don\u0027t have immediate plans to implement it priority-wise. In general, investment in DbDataAdapter is mostly limited to maintenance at this point, but given enough user feedback we would definitely consider it. This could be a good issue for the community to look into.",
                                           "updatedAt":  "2020-05-20T06:54:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTI4Njk0Mw==",
                                           "createdAt":  "2020-05-20T07:19:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Misiu",
                                           "body":  "@maxle5 you added this feature to your fork. Any chance to create a PR?",
                                           "updatedAt":  "2020-05-20T07:19:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTMxNTU0NA==",
                                           "createdAt":  "2020-05-20T08:14:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "One small note - I haven\u0027t reviewed @maxle5\u0027s commit, but we\u0027d want to add async across *all* operations performed by DbDataAdapter, and not just for some (FillAsync). We don\u0027t want to end up with a type that only partially supports async.",
                                           "updatedAt":  "2020-05-20T08:14:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTMxODgzNg==",
                                           "createdAt":  "2020-05-20T08:20:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Misiu",
                                           "body":  "@roji I think @maxle5\u0027s commit creates all the necessary methods:\r\nhttps://github.com/maxle5/runtime/commit/5d1f61d6c6322d351cbb02069b04eed0c04d208f#diff-fbc8b4fa5b891e40cb60fd8fd075cc81R1236-R1240\r\nhttps://github.com/maxle5/runtime/commit/5d1f61d6c6322d351cbb02069b04eed0c04d208f#diff-fbc8b4fa5b891e40cb60fd8fd075cc81R1630-R1636\r\nhttps://github.com/maxle5/runtime/commit/5d1f61d6c6322d351cbb02069b04eed0c04d208f#diff-fbc8b4fa5b891e40cb60fd8fd075cc81R2044-R2056\r\nI haven\u0027t tried it, but it looks complete",
                                           "updatedAt":  "2020-05-20T08:20:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTM1MzU1NQ==",
                                           "createdAt":  "2020-05-20T09:20:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBEzR7g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2020-05-20T09:23:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "In that case a PR would be good to have!",
                                           "updatedAt":  "2020-05-20T09:20:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTM3MTAxMA==",
                                           "createdAt":  "2020-05-20T09:52:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBEz6sg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2020-05-20T10:47:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "maxle5",
                                           "body":  "@Misiu, @roji , I can definitely create a PR, I had just gotten side-tracked on a different project and never got around to it. I believe there is probably still some work required though; if someone could help point out what is missing, that would be great!",
                                           "updatedAt":  "2020-05-20T09:52:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTM4NjkxMg==",
                                           "createdAt":  "2020-05-20T10:23:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e In that case a PR would be good to have!\r\n\r\n@roji, we don\u0027t accept PRs for new APIs until those APIs have been reviewed and approved. Have these? I don\u0027t see a formal API proposal here. Thanks.",
                                           "updatedAt":  "2020-05-20T10:23:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTQwMDQxNw==",
                                           "createdAt":  "2020-05-20T10:51:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@stephentoub this is only about adding async counterparts to already-existing sync APIs on DbDataAdapter. But you\u0027re right of course... @maxle5, what we\u0027d need is an list of public APIs being added.",
                                           "updatedAt":  "2020-05-20T10:51:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMTQxNTc4MA==",
                                           "createdAt":  "2020-05-20T11:27:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOETKNhw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2020-07-02T06:44:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "clystian",
                                                                               "createdAt":  "2020-08-19T21:20:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "tauheedul",
                                                                               "createdAt":  "2025-05-22T09:46:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "maxle5",
                                           "body":  "**Full list of public APIs that were added** (async counterparts to already-existing sync APIs):\r\n\r\n```C#\r\nnamespace System.Data.Common\r\n{\r\n    public partial class DataAdapter\r\n    {\r\n        public virtual Task\u003cint\u003e FillAsync(DataSet dataSet);\r\n        protected virtual Task\u003cint\u003e FillAsync(DataSet dataSet, string srcTable, IDataReader dataReader, int startRecord, int maxRecords);\r\n        protected virtual Task\u003cint\u003e FillAsync(DataTable dataTable, IDataReader dataReader);\r\n        protected virtual Task\u003cint\u003e FillAsync(DataTable[] dataTables, IDataReader dataReader, int startRecord, int maxRecords);\r\n        public virtual Task\u003cDataTable[]\u003e FillSchemaAsync(DataSet dataSet, SchemaType schemaType);\r\n        protected virtual Task\u003cDataTable[]\u003e FillSchemaAsync(DataSet dataSet, SchemaType schemaType, string srcTable, IDataReader dataReader);\r\n        protected virtual Task\u003cDataTable\u003e FillSchemaAsync(DataTable dataTable, SchemaType schemaType, IDataReader dataReader);\r\n    }\r\n    public partial class DbDataAdapter\r\n    {\r\n        public override Task\u003cint\u003e FillAsync(DataSet dataSet);\r\n        public Task\u003cint\u003e FillAsync(DataSet dataSet, int startRecord, int maxRecords, string srcTable);\r\n        protected virtual Task\u003cint\u003e FillAsync(DataSet dataSet, int startRecord, int maxRecords, string srcTable, IDbCommand command, CommandBehavior behavior);\r\n        public Task\u003cint\u003e FillAsync(DataSet dataSet, string srcTable);\r\n        public Task\u003cint\u003e FillAsync(DataTable dataTable);\r\n        protected virtual Task\u003cint\u003e FillAsync(DataTable dataTable, IDbCommand command, CommandBehavior behavior);\r\n        protected virtual Task\u003cint\u003e FillAsync(DataTable[] dataTables, int startRecord, int maxRecords, IDbCommand command, CommandBehavior behavior);\r\n        public Task\u003cint\u003e FillAsync(int startRecord, int maxRecords, params DataTable[] dataTables);\r\n        public override Task\u003cDataTable[]\u003e FillSchemaAsync(DataSet dataSet, SchemaType schemaType);\r\n        protected virtual Task\u003cDataTable[]\u003e FillSchemaAsync(DataSet dataSet, SchemaType schemaType, IDbCommand command, string srcTable, CommandBehavior behavior);\r\n        public Task\u003cDataTable[]\u003e FillSchemaAsync(DataSet dataSet, SchemaType schemaType, string srcTable);\r\n        public Task\u003cDataTable\u003e FillSchemaAsync(DataTable dataTable, SchemaType schemaType);\r\n        protected virtual Task\u003cDataTable\u003e FillSchemaAsync(DataTable dataTable, SchemaType schemaType, IDbCommand command, CommandBehavior behavior);        \r\n    }\r\n    public partial interface IDbDataAdapter\r\n    {\r\n        Task PrepareAsync(CancellationToken cancellationToken);\r\n        Task\u003cint\u003e ExecuteNonQueryAsync();\r\n        Task\u003cIDataReader\u003e ExecuteReaderAsync();\r\n        Task\u003cIDataReader\u003e ExecuteReaderAsync(CommandBehavior behavior);\r\n        Task\u003cobject\u003e ExecuteScalarAsync();\r\n    }\r\n    public partial interface IDbDataAdapter\r\n    {\r\n        Task CloseAsync();\r\n        Task OpenAsync(CancellationToken cancellationToken);\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2020-06-04T18:29:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzOTAzMjE1OA==",
                                           "createdAt":  "2020-06-04T18:29:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBGaQ-w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2020-06-04T18:34:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "@roji we\u0027ll need you in the review, I\u0027ll send an invite",
                                           "updatedAt":  "2020-06-04T18:29:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NDk2MjY2OA==",
                                           "createdAt":  "2020-06-16T19:17:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "I\u0027ve temporarily removed the _ready for review_ label so that this doesn\u0027t show up in the backlog until we\u0027re ready to tackle it.",
                                           "updatedAt":  "2020-06-16T19:17:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NTA0ODM1MQ==",
                                           "createdAt":  "2020-06-16T22:42:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "Thanks!",
                                           "updatedAt":  "2020-06-16T22:42:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NzE5MjA0Mg==",
                                           "createdAt":  "2020-06-21T22:54:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elachlan",
                                           "body":  "This would be a really fantastic addition, since .Net already has async functions against DbCommand. It would round out this effort. Additionally, as .NET 5 merges both framework and core; There will be a lot of developers migrating applications. This feature gives a performance boost with little effort. I wrote a test based on an application I maintain, there was a 2.5x performance improvement.\r\n\r\nSo I am here advocating for this to be added to the API, so that the code written by the community can be merged and improved upon.\r\n\r\nThank you everyone for all your efforts.",
                                           "updatedAt":  "2020-06-21T22:54:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1Mjc1MzA3OQ==",
                                           "createdAt":  "2020-07-02T03:04:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBJKjOw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2020-07-02T06:44:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "elachlan",
                                           "body":  "What is the hold up on the API review for this? What additional information is required?\r\n\r\nA summarisation would be greatly appreciated.\r\n\r\nThanks!",
                                           "updatedAt":  "2020-07-02T03:05:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzI0OTg1OA==",
                                           "createdAt":  "2020-07-02T22:45:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@elachlan We\u0027re having some wider discussions around this area. It\u0027s looking like these won\u0027t be resolved in time to get this into .NET 5, but we\u0027re still considering doing it for .NET 6.",
                                           "updatedAt":  "2020-07-02T22:45:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzI1MDk1Ng==",
                                           "createdAt":  "2020-07-02T22:49:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elachlan",
                                           "body":  "@ajcvickers Thanks for the response. Is there an issue I can follow for those discussions or are they internal?",
                                           "updatedAt":  "2020-07-02T22:49:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzI1NDQ0NQ==",
                                           "createdAt":  "2020-07-02T23:05:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@elachlan Internal at the moment.",
                                           "updatedAt":  "2020-07-02T23:05:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzI1ODI4Mw==",
                                           "createdAt":  "2020-07-02T23:23:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1buig==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2020-07-03T10:57:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maxle5",
                                                                               "createdAt":  "2020-07-03T17:03:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wjvii",
                                                                               "createdAt":  "2020-11-29T21:56:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ernestopavonatc1b",
                                                                               "createdAt":  "2023-02-04T01:21:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "elachlan",
                                           "body":  "@ajcvickers Thank you for the explanation it is greatly appreciated. It helps developers and associated companies/organisations plan accordingly.\r\n\r\nIt\u0027s a shame we have to wait for November 2021 for something that seems essentially solved and has such a massive benefit. But I imagine it is not as simple as adding in the new methods.\r\n\r\nIf these changes are targeted at .NET 6, should we move this issue to that milestone?\r\n\r\nAgain, everyone\u0027s efforts are much appreciated.",
                                           "updatedAt":  "2020-07-02T23:23:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MzYyNTM3MA==",
                                           "createdAt":  "2020-07-03T17:06:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maxle5",
                                           "body":  "@ajcvickers I would love to have the opportunity to continue contributing to this issue (whether that is the current API proposal or a future one). Please let me know if there is anything I can do once the internal discussions have been had. Thanks.",
                                           "updatedAt":  "2020-07-03T17:06:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTY5MDY3Nw==",
                                           "createdAt":  "2020-07-29T14:15:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Misiu",
                                           "body":  "@ajcvickers won\u0027t there be anything between .NET 5 and .NET 6? Shame we must wait at least till November 2021 for this.\r\nThere are massive benefits from this.",
                                           "updatedAt":  "2020-07-29T14:15:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NTY5NDI5Mw==",
                                           "createdAt":  "2020-07-29T14:21:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBMEO3Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elachlan",
                                                                               "createdAt":  "2020-07-31T14:03:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "For everyone looking at this, we\u0027ll review this issue again when we do the planning for .NET 6 (everyone is currently focused on stabilizing the .NET 5 release). If it does go into .NET 6, this will show up in one of the previews for that release.",
                                           "updatedAt":  "2020-07-29T14:21:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NjE0NDgxNg==",
                                           "createdAt":  "2020-07-30T06:11:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Misiu",
                                           "body":  "@roji thanks for the update.\r\nI hope this does go into .NET 6.",
                                           "updatedAt":  "2020-07-30T06:11:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNTQ2NDA5MQ==",
                                           "createdAt":  "2020-11-29T21:54:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBYoJTw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "manandre",
                                                                               "createdAt":  "2020-11-29T22:03:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ChristineBoersen",
                                                                               "createdAt":  "2020-12-02T00:13:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maxle5",
                                                                               "createdAt":  "2020-12-02T12:02:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Misiu",
                                           "body":  "@roji I think it\u0027s time to get back to this. NET 5 is released. Can this be added to 6.0?",
                                           "updatedAt":  "2020-11-29T21:54:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNjkwNDU5NA==",
                                           "createdAt":  "2020-12-02T00:20:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBdLOJQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2021-01-21T07:58:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ChristineBoersen",
                                           "body":  "**_I\u0027d love to see it in the main release,_** \r\n\r\nFor now I\u0027m using  Vladimir Kloz\u0027s version **(Thanks Vlad!!!)** [https://github.com/voloda/AsyncDataAdapter/blob/master/AsyncDataAdapter/DataAdapter.cs](url)\r\n for my data adapter until this is available, since I only need it for fill/read to then use bulk copy async to get it back to sql.\r\n\r\nI\u0027m a week from going to testing for migration of our main application from framework to .NET 5.0 and can\u0027t wait a year :(\r\n",
                                           "updatedAt":  "2020-12-02T00:21:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NDQ1MjAwNw==",
                                           "createdAt":  "2021-01-21T07:54:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "Out of curiosity, wouldn\u0027t it make sense to also add `IAsyncDisposable` for data adapter?",
                                           "updatedAt":  "2021-01-21T07:54:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NDQ5MTExNg==",
                                           "createdAt":  "2021-01-21T09:08:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@cincuranet it doesn\u0027t implement IDisposable... what do you have in mind, which resources need to be disposed?",
                                           "updatedAt":  "2021-01-21T09:08:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NDQ5OTQzNw==",
                                           "createdAt":  "2021-01-21T09:23:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBdMJ6A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2021-01-21T09:48:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "\u003e it doesn\u0027t implement IDisposable\r\n\r\n`DbDataAdapter` \u003e `DataAdapter` \u003e `Component` \u003e `IDisposable`. I\u0027m asking because i.e. `DbConnection` shares similar path and it has explicit `IAsyncDisposable`. \r\n\r\n\u003e what do you have in mind, which resources need to be disposed?\r\n\r\nI was more about feature parity with i.e. `DbConnection` or `DbCommand`. But also, maybe [this](https://github.com/npgsql/npgsql/blob/main/src/Npgsql/NpgsqlDataAdapter.cs#L57) _select command_ should be disposed (in general, not sure whether `NpgsqlCommand` needs that). I have the same in `FbDataAdapter` (and disposing it). And given the `DbCommand` is `IAsyncDisposable` it makes sense to have it in `DbDataAdapter` as well.",
                                           "updatedAt":  "2021-01-21T09:23:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NDUxNjQ2OA==",
                                           "createdAt":  "2021-01-21T09:52:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBdPF_Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ajcvickers",
                                                                               "createdAt":  "2021-01-21T15:34:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "@cincuranet thanks, missed the Component path...\r\n\r\nHowever, the idea behind DbConnection implementing IAsyncDisposable, is that closing a (physical) connection can actually involve I/O, so there should be the possibility to do that operation asynchronously. DbDataAdapter, AFAICT, is just an adapter for filling DataSets, which doesn\u0027t itself correspond to any resource that would require I/O when closing.\r\n\r\nI\u0027d even go further to say that if DbDataAdapter hadn\u0027t been made to inherit from Component (a design choice I don\u0027t think we\u0027d have done today), it wouldn\u0027t have been made to implement IDisposable either...",
                                           "updatedAt":  "2021-01-21T09:52:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NDUyMDIxMA==",
                                           "createdAt":  "2021-01-21T09:58:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "\u003e I\u0027d even go further to say that if DbDataAdapter hadn\u0027t been made to inherit from Component (a design choice I don\u0027t think we\u0027d have done today), it wouldn\u0027t have been made to implement IDisposable either...\r\n\r\nYeah, but that ship has sailed (similarly to `Close` and `Dispose` on `DbConnection`). \r\n\r\nSo, if I understand it correctly, we\u0027re now not about having \"feature\" parity with \"sync\" API, rather introducing \"async\" API where it really makes sense, right?",
                                           "updatedAt":  "2021-01-21T09:58:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NDUzMjAwOQ==",
                                           "createdAt":  "2021-01-21T10:19:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBdPECA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bgrainger",
                                                                               "createdAt":  "2021-01-21T14:58:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ajcvickers",
                                                                               "createdAt":  "2021-01-21T15:31:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "roji",
                                           "body":  "Well, yeah - the idea isn\u0027t to systematically introduce IAsyncDisposable *everywhere* where IDisposable is implemented, but to do it where it makes sense. I don\u0027t think it\u0027s a matter of \"feature parity\"; in many cases it really does make sense to have IDisposable but not IAsyncDisposable. IAsyncDisposable really is intended for cases where disposing takes a long time (i.e. involves I/O/networking), whereas IDisposable covers various other cases.\r\n\r\nFor example, say some type has some native resource, or allocates unmanaged memory. These resources need to be freed when disposing (so IDisposable), but there\u0027s no reason for the type to implement IAsyncDisposable, because there\u0027s no async involved here whatsoever.",
                                           "updatedAt":  "2021-01-21T10:19:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NDcyNTgwMA==",
                                           "createdAt":  "2021-01-21T15:33:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBdPMyQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2021-01-21T15:44:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "We had the discussion some time ago about which Db... objects are really designed to be disposable, and which are disposable just because the inherit from Component. DbDataReader landed on the disposable side; DbDataAdapter landed on the other side.",
                                           "updatedAt":  "2021-01-21T15:33:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNDEyMzA5OQ==",
                                           "createdAt":  "2021-04-06T13:33:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daiplusplus",
                                           "body":  "@ChristineBoersen I\u0027ve built on Vlad\u0027s work and published my own fork which is fully async (Vlad\u0027s original code missed a few spots, and didn\u0027t use `ConfigureAwait(false)` throughout), and it targets .NET Standard 2.0 and it works under .NET Core 3.1 and 5.0 in my testing (and it supports `UpdateAsync` etc)\r\n\r\nhttps://www.nuget.org/packages/Jehoel.AsyncDataAdapter/\r\n\r\nhttps://github.com/Jehoel/AsyncDataAdapter/\r\n\r\nDiscussion (especially w.r.t. testing): https://github.com/dotnet/runtime/discussions/50402\r\n\r\n",
                                           "updatedAt":  "2021-04-06T13:33:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNDUwMTI0NA==",
                                           "createdAt":  "2021-04-06T23:40:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elachlan",
                                           "body":  "So last time there was discussion on this issue there was mentions of a possible inclusion in .NET 6.\n\nHas it been added to the planning? \n\nDoes the work done by Jehoel make that easier to merge? (Thanks Jehoel!)\n\nI\u0027d there still a need for an API change proposal?",
                                           "updatedAt":  "2021-04-06T23:40:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNDUxMDAyOA==",
                                           "createdAt":  "2021-04-07T00:07:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChristineBoersen",
                                           "body":  "I\u0027ll definitely have to take a look. :)\n\nThanks,\nChristine\n________________________________\nFrom: Dai ***@***.***\u003e\nSent: Tuesday, April 6, 2021 9:33:17 AM\nTo: dotnet/runtime ***@***.***\u003e\nCc: Christine Boersen ***@***.***\u003e; Mention ***@***.***\u003e\nSubject: Re: [dotnet/runtime] Consider adding FillAsync and async APIs on data adapters (#22109)\n\n\n@ChristineBoersen\u003chttps://github.com/ChristineBoersen\u003e I\u0027ve built on Vlad\u0027s work and published my own fork which is fully async (Vlad\u0027s original code missed a few spots, and didn\u0027t use ConfigureAwait(false) throughout), and it targets .NET Standard 2.0 and it works under .NET Core 3.1 and 5.0 in my testing (and it supports UpdateAsync etc)\n\nhttps://www.nuget.org/packages/Jehoel.AsyncDataAdapter/\n\nhttps://github.com/Jehoel/AsyncDataAdapter/\n\nDiscussion (especially w.r.t. testing): #50402\u003chttps://github.com/dotnet/runtime/discussions/50402\u003e\n\n—\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\u003chttps://github.com/dotnet/runtime/issues/22109#issuecomment-814123099\u003e, or unsubscribe\u003chttps://github.com/notifications/unsubscribe-auth/ADIK7XNY3XOYI7CWFYHU453THMER3ANCNFSM4NESDNLA\u003e.\n",
                                           "updatedAt":  "2021-04-07T00:07:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMDI3NTAyNw==",
                                           "createdAt":  "2021-04-30T18:17:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IVTore",
                                           "body":  "DbDataAdapter has a very versatile, **solution oriented** beautiful architecture.\r\nI am really waiting for FillAsync with fingers crossed. Thanks to all people involved.\r\nJumping and yelling in my mind (\"Why wait until .net 6.0?\")   XD    ",
                                           "updatedAt":  "2021-04-30T18:17:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzMDM5OTM4Ng==",
                                           "createdAt":  "2021-04-30T21:14:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBqKt0g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "daiplusplus",
                                                                               "createdAt":  "2021-05-10T04:46:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ChristineBoersen",
                                           "body":  "@Jehoel So far, so good with your modifications. :) Now we just need to get MS to bring it in to the dotnet codebase.\r\n\r\n:)",
                                           "updatedAt":  "2021-04-30T21:14:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNjE2NTAzNg==",
                                           "createdAt":  "2021-05-10T04:46:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daiplusplus",
                                           "body":  "@IVTore\r\n\r\n\u003e DbDataAdapter has a very versatile, **solution oriented** beautiful architecture.\r\n\u003e I am really waiting for FillAsync with fingers crossed. Thanks to all people involved.\r\n\u003e Jumping and yelling in my mind (\"Why wait until .net 6.0?\") XD\r\n\r\nHave you tried my version? https://github.com/dotnet/runtime/issues/22109#issuecomment-814123099 ",
                                           "updatedAt":  "2021-05-10T04:47:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2ODg4ODYwOQ==",
                                           "createdAt":  "2021-06-25T23:56:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOByYquQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ryan-carbon",
                                                                               "createdAt":  "2021-06-26T20:34:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "daiplusplus",
                                                                               "createdAt":  "2021-06-28T22:00:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ChristineBoersen",
                                                                               "createdAt":  "2021-07-13T22:37:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "elachlan",
                                           "body":  "@roji I know you are probably busy with the push for the next .NET 6 preview. Is it possible to get an update on this? Jehoel seems to have done a great job. Is it possible to revisit this for a .NET 6 preview? \r\n\r\nIs there something we can do as a community to help the process along? \r\n\r\nAs far as I see it we are waiting for an API review, but the \"api-ready-for-review\" label was removed because of the push for the release of .NET 5. It was never re-added and hence hasn\u0027t been reviewed.",
                                           "updatedAt":  "2021-06-25T23:56:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NTk3MTIzNw==",
                                           "createdAt":  "2021-07-07T22:17:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elachlan",
                                           "body":  "@danmoseley I have seen previously that there might be a requirement to have the API Proposal in the issue summary. Do we need to create a new issue specifically for the API Proposal?",
                                           "updatedAt":  "2021-07-07T22:17:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTM0ODIyMQ==",
                                           "createdAt":  "2021-07-13T19:36:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCDSPLw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elachlan",
                                                                               "createdAt":  "2021-07-13T22:00:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "ChristineBoersen",
                                                                               "createdAt":  "2021-07-13T22:37:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexeyshockov",
                                                                               "createdAt":  "2021-11-19T10:22:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "roji",
                                           "body":  "Everyone, apologies that this has taken so long to comment on this. I have moved this to milestone Future, which means it will not be done for the upcoming 6.0 release, but may happen for a later version.\r\n\r\nThe main point of difficulty here, is that DbDataAdapter works via the old System.Data interfaces (e.g. IDbCommand) rather than the base classes (e.g. DbCommand). These interfaces have no async methods, since until recently it would have been a breaking change to introduce them. Although default interface implementations (DIM) are now available, some possible issues with using them in the runtime must be fully mapped out first - this is still ongoing.\r\n\r\nThere\u0027s a good chance the DIM situation will be clarified for .NET 7, at which point we can take another look at this - although resourcing considerations will still apply, and this isn\u0027t an extremely high-priority issue given the number of votes, status of DbDataAdapter, etc. I\u0027d encourage new applications (and applications in need of async) to avoid DbDataAdapter, and to work with more modern data access technologies.\r\n\r\n",
                                           "updatedAt":  "2021-07-13T20:43:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTQwNTEwMg==",
                                           "createdAt":  "2021-07-13T21:09:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOByYnmg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "elachlan",
                                                                               "createdAt":  "2021-07-13T22:00:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ChristineBoersen",
                                                                               "createdAt":  "2021-07-13T22:29:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "daiplusplus",
                                           "body":  "@roji Would it be possible to “donate” my implementation back into .NET? I appreciate resource-limitations does extend to reviewing third-party contributions that introduce API changes.",
                                           "updatedAt":  "2021-07-13T21:09:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTQ0OTgzMQ==",
                                           "createdAt":  "2021-07-13T22:33:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChristineBoersen",
                                           "body":  "Many people are using frameworks other than EF Core, that are built on top of DBDataAdapter (and friends).\r\nHaving seen this pushed for 2 full versions now is very disappointing.\r\n\r\n@roji Is there anyway to take @Jehoel up on their offer so this may be put to bed finally, and incorporated in the main product as this has been outstanding for 4 years now?",
                                           "updatedAt":  "2021-07-13T22:33:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTQ3NTgxNg==",
                                           "createdAt":  "2021-07-13T23:44:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@Jehoel I don\u0027t think the implementation approach is the right fit for inclusion into .NET - though that doesn\u0027t mean the package isn\u0027t good... If it works, then it should definitely be considered by anyone needing async DbDataAdapter today. However, native support inside .NET should be done via the System.Data interfaces just like the sync path is implemented.",
                                           "updatedAt":  "2021-07-13T23:44:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTQ3NjUwMQ==",
                                           "createdAt":  "2021-07-13T23:46:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daiplusplus",
                                           "body":  "@roji Right - right, sorry, I didn\u0027t mean to suggest simply copy+pasting my implementation over. What I should have said was \"Can I build it for you, _properly_? Based on my experience from building my implementation I believe it would be a straightforward task.\"",
                                           "updatedAt":  "2021-07-13T23:46:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTQ3NzQ4MQ==",
                                           "createdAt":  "2021-07-13T23:49:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@Jehoel how do you propose to solve the lack of async APIs on the System.Data interfaces - such as IDbCommand - given that we can\u0027t use default interface implementations (see my comment above)? Changing DbDataAdapter to work on the base classes would break any driver not inheriting from them (aside from being quite a change for the sync path as well).",
                                           "updatedAt":  "2021-07-13T23:49:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTQ3ODU5OA==",
                                           "createdAt":  "2021-07-13T23:53:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daiplusplus",
                                           "body":  "@roji By introducing a separate new interface for the async methods, and build the default `virtual` implementation in `DataAdapter` and `DbDataAdapter` as an explicit interface implementation. The rest of the changes would be to refactor `DbDataAdapter`\u0027s internals to expose the shared sync-path logic to the async methods. I don\u0027t believe this approach would break any existing consumers.",
                                           "updatedAt":  "2021-07-13T23:53:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTQ4MjE3Ng==",
                                           "createdAt":  "2021-07-14T00:03:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e By introducing a separate new interface for the async methods [...]\r\n\r\nAssuming I\u0027m understanding you correctly, wouldn\u0027t that require all existing ADO.NET drivers to implement your new interface? In other words, SqlClient\u0027s SqlCommand would have to implement the new IAsyncDbCommand in order for any of this to work? That seems like a non-starter to me...\r\n\r\nWith default interface implementations, the DIM implementation for IDbCommand.ExecuteReaderAsync could check if `this` is a DbCommand, and if so, simply call the DbCommand.ExecuteReaderAsync implementation on it (it would throw if not). That seems like the ideal implementation - nothing needs to happen for providers which extend the base classes (which is most of them); but as stated above we need to wait pending some investigations on DIM in the runtime.",
                                           "updatedAt":  "2021-07-14T00:03:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTQ4ODk4MA==",
                                           "createdAt":  "2021-07-14T00:22:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daiplusplus",
                                           "body":  "\u003e  wouldn\u0027t that require all existing ADO.NET drivers to implement your new interface?\r\n\r\nThat depends on what new functionality the ADO.NET implementation actually needs to supply in order for async data adapters to work. From my experience writing my implementation I found it\u0027s largely unnecessary because the async logic can work with the existing async members of `DbDataReader`, `DbCommand` and `DbConnection` - the only added functionality that was provider-specific was support for batched `UPDATE/INSERT` commands which isn\u0027t a functional benefit, only a performance benefit. Additionally, an extensibility point could be added to allow users to _bring their own_ support for batching without having to wait for their ADO.NET provider to release an update.\r\n\r\n\u003e In other words, `SqlClient\u0027`s `SqlCommand` would have to implement the new `IAsyncDbCommand` in order for any of this to work? \r\n\r\n`DbCommand` already has those virtual async methods - all I\u0027m _really_ suggesting is something like this:\r\n\r\n```\r\n// New interface:\r\npublic interface IAsyncDbConnection : IDbConnection\r\n{\r\n    Task OpenAsync(CancellationToken cancellationToken);\r\n}\r\n\r\n// Adding a single explicit interface implementation that simply points to the existing DbConnection.OpenAsync method.\r\npublic class DbConnection : IAsyncDbConnection\r\n{\r\n    Task IAsyncDbConnection.OpenAsync(CancellationToken cancellationToken) =\u003e this.OpenAsync(cancellationToken);\r\n}\r\n\r\n// New interface:\r\npublic interface IAsyncDbCommand : IDbCommand\r\n{\r\n    Task\u003cDbDataReader\u003e ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);\r\n    Task\u003cint\u003e ExecuteNonQueryAsync(CancellationToken cancellationToken);\r\n    Task\u003cobject\u003e ExecuteScalarAsync(CancellationToken cancellationToken);\r\n}\r\n\r\n// Adding just these 3 explicit implementations to DbCommand, as with DbConnection the referenced methods already exist:\r\npublic class DbCommand : IAsyncDbCommand\r\n{\r\n    Task\u003cDbDataReader\u003e IAsyncDbCommand.ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken) =\u003e this.ExecuteDbDataReaderAsync(behavior, cancellationToken);\r\n\r\n    Task\u003cint\u003e ExecuteNonQueryAsync(CancellationToken cancellationToken) =\u003e this.ExecuteNonQueryAsync(cancellationToken);\r\n\r\n    Task\u003cobject\u003e IAsyncDbCommand.ExecuteScalarAsync(CommandBehavior behavior, CancellationToken cancellationToken) =\u003e this.ExecuteScalarAsync(cancellationToken);\r\n}\r\n\r\n// New interface:\r\npublic interface IAsyncDataAdapter : IDataAdapter\r\n{\r\n    Task\u003cint\u003e FillAsync(DataSet dataSet, CancellationToken cancellationToken);\r\n    Task\u003cint\u003e UpdateAsync(DataSet dataSet, CancellationToken cancellationToken);\r\n    Task\u003cDataTable[]\u003e FillSchemaAsync(DataSet dataSet, SchemaType schemaType, CancellationToken cancellationToken);\r\n}\r\n\r\n// New interface:\r\npublic interface IAsyncDbDataAdapter : IDbDataAdapter, IAsyncDataAdapter \r\n{\r\n}\r\n\r\n// This is where the internal refactoring would be, as well as adding an explicit implementation of the new interface `IAsyncDbDataAdapter` to avoid breaking any downstream consumers and subclasses:\r\npublic abstract class DbDataAdapter : IAsyncDbDataAdapter \r\n{\r\n    // But if a consumer wanted to use the async methods they only need to use their DbDataAdapter object (e.g. SqlDbDataAdapter) via the `IAsyncDbDataAdapter` interface.\r\n    // and if a subclass wants to expose their async methods they can do that too.\r\n\r\n    Task\u003cint\u003e IAsyncDbDataAdapter .FillAsync(DataSet dataSet, CancellationToken cancellationToken)\r\n    {\r\n        // TODO\r\n    }\r\n\r\n    Task\u003cint\u003e IAsyncDbDataAdapter .UpdateAsync(DataSet dataSet, CancellationToken cancellationToken)\r\n    {\r\n            // TODO\r\n    }\r\n\r\n    Task\u003cDataTable[]\u003e IAsyncDbDataAdapter .FillSchemaAsync(DataSet dataSet, SchemaType schemaType, CancellationToken cancellationToken)\r\n    {\r\n            // TODO\r\n    }\r\n}\r\n```\r\n\r\nUsage example, with existing ADO.NET providers:\r\n\r\n```\r\npublic async Task DoStuffAsync()\r\n{\r\n    using( SqlConnection c = new SqlConnection( ... ) )\r\n    using( SqlCommand cmd = c.CreateCommand() )\r\n    {\r\n        await c.OpenAsync();\r\n        \r\n        using( SqlDataAdapter da = new SqlDataAdapter( cmd ) )\r\n        {\r\n            IAsyncDbDataAdapter  ada = da;\r\n            await ada.FillAsync( ... );\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2021-07-14T00:32:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTU0NTI3Ng==",
                                           "createdAt":  "2021-07-14T02:54:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elachlan",
                                           "body":  "That approach would work for the wrapper I use.",
                                           "updatedAt":  "2021-07-14T02:54:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTU4NzExNA==",
                                           "createdAt":  "2021-07-14T04:57:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "\u003e Assuming I\u0027m understanding you correctly, wouldn\u0027t that require all existing ADO.NET drivers to implement your new interface? In other words, SqlClient\u0027s SqlCommand would have to implement the new IAsyncDbCommand in order for any of this to work? That seems like a non-starter to me...\r\n\r\nSeconded.",
                                           "updatedAt":  "2021-07-14T04:57:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTU4NzU5OA==",
                                           "createdAt":  "2021-07-14T04:59:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daiplusplus",
                                           "body":  "@cincuranet doesn\u0027t [my example](https://github.com/dotnet/runtime/issues/22109#issuecomment-879488980) demonstrate that that isn\u0027t the case?",
                                           "updatedAt":  "2021-07-14T04:59:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTYyMjM3OQ==",
                                           "createdAt":  "2021-07-14T06:14:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "\u003e @cincuranet doesn\u0027t my example demonstrate that that isn\u0027t the case?\r\n\r\nIn your example I see `IAsyncDbCommand` being implemented by `DbCommand`. Can you show example without `IAsyncDbCommand`?",
                                           "updatedAt":  "2021-07-14T06:14:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTYyNDE1OA==",
                                           "createdAt":  "2021-07-14T06:18:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "daiplusplus",
                                           "body":  "@cincuranet\r\n\r\n* `DbCommand` is the parent class of `SqlCommand` and also of most other ADO.NET providers\u0027 command classes.\r\n* `DbCommand` can be modified to implement a **new** interface (using explicit implementation) without breaking existing consumers. \r\n* The `IAsyncDbCommand` interface is my proposed **new** interface that would be introduced in the same patch. \r\n* The `IAsyncDbCommand` interface is used by my proposed `DbDataAdapter`\u0027s explicit implementation of `IAsyncDbDataAdapter` so it doesn\u0027t have a hard dependency on `DbCommand`.\r\n* Therefore this doesn\u0027t require any existing ADO.NET providers to implement the interface themselves because that\u0027s already done for them by `DbCommand`.\r\n* This approach does not use default interface implementations (\"DIM\").\r\n* This approach also does not modify any existing interface.\r\n* The only wart to this approach is requiring end-users to reference their `DbDataAdapter`  by interface due to its explicit-implementation - and that wart goes away once ADO.NET providers offer a non-explicit implementation, which is a trivial 1-line change for them to do.",
                                           "updatedAt":  "2021-07-14T06:23:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTYyNzAzMA==",
                                           "createdAt":  "2021-07-14T06:23:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBya73w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "daiplusplus",
                                                                               "createdAt":  "2021-07-14T06:26:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "ADO.NET is fucked up enough ([1]), I don\u0027t think adding new interfaces helps the situation. I think the implementation should be directly in `[I]DbDataAdapter`, etc.\r\n\r\nAnd given the \"legacy\" nature of data adapters, etc. I don\u0027t think rushing the implementation is needed.\r\n\r\n[1]: In fact I think .NET Core 1 missed the opportunity to clean this mess up. But that\u0027s another discussion.",
                                           "updatedAt":  "2021-07-14T06:25:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTgxNjY0MA==",
                                           "createdAt":  "2021-07-14T11:33:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@Jehoel what you propose may be possible, some more investigation is needed.\r\n\r\nHowever, I pretty much agree with what @cincuranet wrote above... Introducing an additional interface into ADO.NET just so that DbDataAdapter can work asynchronously does not make much sense to me, especially since DIM are available and we\u0027ll likely be able to use them here at some point. As @cincuranet wrote, we\u0027d be rushing this and ending up with a non-ideal implementation.\r\n\r\n\u003e The only wart to this approach is requiring end-users to reference their DbDataAdapter by interface due to its explicit-implementation - and that wart goes away once ADO.NET providers offer a non-explicit implementation, which is a trivial 1-line change for them to do.\r\n\r\nThat seems significant to me, and again, I don\u0027t expect (nor want to require) ADO.NET providers to make any changes in order for this to be well-supported.",
                                           "updatedAt":  "2021-07-14T11:33:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTg4OTE2OQ==",
                                           "createdAt":  "2021-07-14T13:24:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD9V1Yg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "daiplusplus",
                                                                               "createdAt":  "2021-07-14T13:25:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maxle5",
                                                                               "createdAt":  "2021-07-14T13:26:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2021-07-14T13:26:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ryan-carbon",
                                                                               "createdAt":  "2021-07-14T13:27:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AdamCaviness",
                                                                               "createdAt":  "2021-07-28T20:25:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "waylonflinn",
                                                                               "createdAt":  "2021-09-08T21:37:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BulGhost",
                                                                               "createdAt":  "2022-05-23T04:24:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "matherm-aboehm",
                                                                               "createdAt":  "2024-12-03T09:24:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "wjrogers",
                                           "body":  "\u003e I\u0027d encourage new applications (and applications in need of async) to avoid DbDataAdapter, and to work with more modern data access technologies.\r\n\r\n\u003e And given the \"legacy\" nature of data adapters, etc. I don\u0027t think rushing the implementation is needed.\r\n\r\nI have a modern application in which I use APIs like `DbConnection.GetSchema()` and `DbDataAdapter` to dynamically map input data to arbitrary database tables selected at runtime. For example, my application ingests CSV files and generates SQL select, insert, update, and delete commands for a corresponding database table, then uses `DbDataAdapter.Fill()` and `DbDataAdapter.Update()` to batch updates to the database. These APIs are the only ones left in my application that don\u0027t have async equivalents. Is there a .NET API that _isn\u0027t_ considered \"legacy\" that can do the same kind of low-level database access? \r\n\r\nWhat technologies, specifically, are you talking about when you recommend \"more modern data access technologies\"? Isn\u0027t ADO.NET still the only data access API that .NET has?",
                                           "updatedAt":  "2021-07-14T13:24:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTg5MTU4NA==",
                                           "createdAt":  "2021-07-14T13:27:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOByfKtQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "daiplusplus",
                                                                               "createdAt":  "2021-07-14T13:30:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2021-07-14T13:36:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ChristineBoersen",
                                                                               "createdAt":  "2021-07-14T14:20:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "ryan-carbon",
                                           "body":  "\u003e \u003e I\u0027d encourage new applications (and applications in need of async) to avoid DbDataAdapter, and to work with more modern data access technologies.\r\n\u003e \r\n\u003e \u003e And given the \"legacy\" nature of data adapters, etc. I don\u0027t think rushing the implementation is needed.\r\n\u003e \r\n\u003e I have a modern application in which I use APIs like `DbConnection.GetSchema()` and `DbDataAdapter` to dynamically map input data to arbitrary database tables selected at runtime. For example, my application ingests CSV files and generates SQL select, insert, update, and delete commands for a corresponding database table, then uses `DbDataAdapter.Fill()` and `DbDataAdapter.Update()` to batch updates to the database. These APIs are the only ones left in my application that don\u0027t have async equivalents. Is there a .NET API that _isn\u0027t_ considered \"legacy\" that can do the same kind of low-level database access?\r\n\u003e \r\n\u003e What technologies, specifically, are you talking about when you recommend \"more modern data access technologies\"? Isn\u0027t ADO.NET still the only data access API that .NET has?\r\n\r\nThis is the same use case I have and would also love to understand the recommended pattern here.",
                                           "updatedAt":  "2021-07-14T13:27:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTkwMTYyMQ==",
                                           "createdAt":  "2021-07-14T13:40:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCrtnLg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ChristineBoersen",
                                                                               "createdAt":  "2021-07-14T14:53:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "AdamCaviness",
                                                                               "createdAt":  "2021-07-28T20:28:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "MichelZ",
                                                                               "createdAt":  "2022-09-06T08:18:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "daiplusplus",
                                           "body":  "\u003e @roji I\u0027d encourage new applications (and applications in need of async) to avoid DbDataAdapter, and to work with more modern data access technologies.\r\n\r\nThere is no \"modern\" alternative to `DbDataAdapter` when you want to work with `DataTable` and `DataSet`. EF is very nice and I use it every day, but EF requires a defined data-model, `DataTable` does not.\r\n\r\nYes, `DataTable.Load` exists, however there is no async overload for that.\r\n\r\nAnd, somewhat amusingly, `DataTable.Load` **actually uses `DataAdapter.Fill`** (via `internal sealed class LoadAdapter`) internally.\r\n\r\n\u003e @roji  we\u0027d be rushing this and ending up with a non-ideal implementation.\r\n\r\nWhat, exactly, does an \"ideal\" implementation look like? Going by what changes I understand are in-store for the CLR I _don\u0027t_ see the breaking-behavior of Default Interface Implementations changing: the core CLR team seems to be headed in the opposite direction of enabling _extensions-everything_, but that\u0027s easily 2-3-4 years away. Please correct me if I\u0027m wrong, but I haven\u0027t heard any public news about improving the DIM situation in .NET 7.\r\n\r\nNone of that really surprises nor disappoints me - the only thing that I\u0027m frustrated by is that the _best excuse_ the BCL team has so far is \"we don\u0027t want to add new interfaces\". Why are more interfaces a bad thing? If we can\u0027t add new interfaces then _how_ is .NET supposed to evolve over-time in a non-breaking fashion?\r\n\r\n\u003e That seems significant to me, and again, I don\u0027t expect (nor want to require) ADO.NET providers to make any changes in order for this to be well-supported.\r\n\r\nThat argument doesn\u0027t follow from what I\u0027ve proposed. What I\u0027ve proposed _is the path_ to ensuring it\u0027s well-supported because ADO.NET providers can opt-in with a 1 line change at their end - if they don\u0027t make the change then they very likely already don\u0027t support async _anyway_ so nothing of value is lost.\r\n\r\n-------------\r\n\r\n(Off-topic:) I think the _best_ path forward is for the core .NET team to plan for and _allow_ moderately breaking changes in a regular release cycle (perhaps minor breaking changes in non-LTSB releases, and major breaking changes every 2 or 4 non-LTSB releases?) - otherwise we\u0027ll be carrying millstones for decades and the costs (and damage to the .NET ecosystem) won\u0027t be worth it. I make this point frequently because it\u0027s my biggest frustration with .NET... but hey, at least we\u0027re not Java.\r\n",
                                           "updatedAt":  "2021-07-14T14:27:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTk0NDg0MA==",
                                           "createdAt":  "2021-07-14T14:32:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChristineBoersen",
                                           "body":  "@Jehoel  @ryan-carbon  (snipping last reply from you both, which I emphatically agree with)\r\n\r\nIt sounds like we all have similar use cases on this. \r\n\r\nAlso, in my use case, we only use fill/getschema methods. We aren\u0027t using and of the CUD type methods through DataAdapter.\r\n\r\nSo... what is the \"recommended\", NON-EF approach to \r\n- Get Schema\r\n- Fill a Data Set\r\n\r\nWorst case, I\u0027d hypothesize I could just \r\n- Open a reader\r\n- Loop the recordsets returned from the reader \r\n  - Create a datatable per recordset manually (I need to confirm it works with zero rows, though from my recollection it does)\r\n     - **\u003cEDIT\u003e something like this may work**\r\n        SqlDataReader reader = command.ExecuteReader();\r\n        DataTable schemaTable = reader.GetSchemaTable();\r\n\r\n\r\n  - Loop the records and .newrow them for each row\r\n  - Add each datatable to the dataset\r\n \r\nAny thoughts for those most basic needs....\r\n",
                                           "updatedAt":  "2021-07-14T14:58:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTk1MzMzNQ==",
                                           "createdAt":  "2021-07-14T14:42:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e What, exactly, does an \"ideal\" implementation look like? Going by what changes I understand are in-store for the CLR I don\u0027t see the breaking-behavior of Default Interface Implementations changing: the core CLR team seems to be headed in the opposite direction of enabling extensions-everything, but that\u0027s easily 2-3-4 years away. Please correct me if I\u0027m wrong, but I haven\u0027t heard any public news about improving the DIM situation in .NET 7.\r\n\r\nI don\u0027t think there\u0027s any basis for saying that. I\u0027ve had internal conversations about the usage of DIM in the runtime, and the answer isn\u0027t no - it\u0027s that it still needs to be investigated. Extensions-everything isn\u0027t really an opposite direction to DIM, just a different one. Therefore, going ahead now with a sub-optimal implementation before there\u0027s a definite answer seems premature.\r\n\r\n\u003e\u003e That seems significant to me, and again, I don\u0027t expect (nor want to require) ADO.NET providers to make any changes in order for this to be well-supported.\r\n\u003e\r\n\u003e That argument doesn\u0027t follow from what I\u0027ve proposed. What I\u0027ve proposed is the path to ensuring it\u0027s well-supported because ADO.NET providers can opt-in with a 1 line change at their end - if they don\u0027t make the change then they very likely already don\u0027t support async anyway so nothing of value is lost.\r\n\r\nMany providers do already support async, but if I understand you correctly, you\u0027d be asking them to do an additional (1-line) change.\r\n\r\n\u003e (Off-topic:) I think the best path forward is for the core .NET team to plan for and allow moderately breaking changes in a regular release cycle [...]\r\n\r\nA new major version of .NET is released once per year, and breaking changes are allowed and introduced occasionally - when they\u0027re justified. The policy in the runtime is quite conservative - as it should be - but generally a bit less so in upper layers of the .NET stack (e.g. ASP.NET, EF Core). In any case, I don\u0027t think this is directly relevant to this discussion.\r\n",
                                           "updatedAt":  "2021-07-14T14:42:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTk1NzY2OA==",
                                           "createdAt":  "2021-07-14T14:48:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCIQp4A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pevans360",
                                                                               "createdAt":  "2021-12-31T17:22:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ChristineBoersen",
                                           "body":  "\u003e A new major version of .NET is released once per year, and breaking changes are allowed and introduced occasionally - when they\u0027re justified. The policy in the runtime is quite conservative - as it should be - but generally a bit less so in upper layers of the .NET stack (e.g. ASP.NET, EF Core). In any case, I don\u0027t think this is directly relevant to this discussion.\r\n\r\nRespectfully,\r\nWe\u0027ve been trying to get head-way on this for four + years, and was one reason we are JUST NOW converting our codebase to DotNetCore from framework (over the last 7 months so far). \r\n\r\nI know we can\u0027t be alone in this task being a stumbling block to adoption of DotNetCore.\r\n\r\n(And thankfully we can multi-target TFMs since some of the codebase must run on SQLCLR (i.e. framework), and conditional compiler statements is a godsend to force database access to go synchronous when under SQLCLR)",
                                           "updatedAt":  "2021-07-14T14:51:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTk2ODM2NA==",
                                           "createdAt":  "2021-07-14T15:01:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOByf_3Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "daiplusplus",
                                                                               "createdAt":  "2021-07-14T15:03:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ChristineBoersen",
                                                                               "createdAt":  "2021-07-14T15:04:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maxle5",
                                                                               "createdAt":  "2021-07-14T15:31:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "roji",
                                           "body":  "Everyone, I do understand the frustration, and I wish I could give better news. I do hope that we\u0027ll be able to resolve this for .NET 7 - with DIMs or via another mechanism.\r\n\r\nIn the meantime, it\u0027s important to understand that although DbDataAdapter is part of ADO.NET, it is an optional layer; you can do all you dynamic schema programming (e.g. filling a DataTable) directly with DbDataReader (that is pretty much what DbDataAdapter does internally). Another option is giving @Jehoel\u0027s [library](https://github.com/Jehoel/AsyncDataAdapter/) library a try.",
                                           "updatedAt":  "2021-07-14T15:01:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg4MTA2MjAwNw==",
                                           "createdAt":  "2021-07-15T22:58:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elachlan",
                                           "body":  "@Jehoel could it be written to be a set of extension methods or are there internal changes needed?",
                                           "updatedAt":  "2021-07-15T22:58:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40jL54",
                                           "createdAt":  "2021-07-16T18:31:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB3EvHQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elachlan",
                                                                               "createdAt":  "2021-08-19T20:59:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "daiplusplus",
                                           "body":  "@elachlan No: Async functionality cannot be added to `DbDataAdapter` through extension methods. This is because the necessary functionality is _not just_ not exposed through the type\u0027s API surface, but because it has huge monolithic methods that have deeply nested IO operations, and `internal` and non-virtual calls to other `System.Data` components, so huge chunks of my implementation are essentially lifted directly from the Reference Source and refactored around those IO boundaries.\r\n\r\n...that\u0027s why I suggested that the ADO.NET team could just refactor `DbDataAdapter` as an alternative to going all-in on their own async DataAdapter work, at least as a first-step.",
                                           "updatedAt":  "2021-07-16T18:34:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41xyWl",
                                           "createdAt":  "2021-08-19T21:04:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODf2E5Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2022-02-11T13:13:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "snow-jallen",
                                                                               "createdAt":  "2022-08-05T16:43:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gruski",
                                                                               "createdAt":  "2024-04-28T21:11:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "elachlan",
                                           "body":  "Now .NET 7 is in main, can we start on this?",
                                           "updatedAt":  "2021-08-19T21:04:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41zBM0",
                                           "createdAt":  "2021-08-20T09:33:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqGbbQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elachlan",
                                                                               "createdAt":  "2021-08-20T13:20:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2021-09-06T10:10:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "maxle5",
                                                                               "createdAt":  "2021-09-21T14:43:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "snow-jallen",
                                                                               "createdAt":  "2022-08-05T16:43:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "roji",
                                           "body":  "@elachlan the team is currently taken up by stabilizing the .NET 6.0 release, so it\u0027s unlikely there\u0027s going to be time to work on this or review community PRs. I\u0027d recommend holding off work until 6.0 is out (or at least until we branch for rc2).\r\n\r\nAlso, don\u0027t forget we still need an OK for using default interface implementation (DIM) - I\u0027ll try to push for a definite answer on this, but once again this won\u0027t happen in the next couple of months.",
                                           "updatedAt":  "2021-08-20T09:33:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46A49K",
                                           "createdAt":  "2021-11-18T22:07:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elachlan",
                                           "body":  "@roji Do you have an answer on using default interface implementation (DIM) in the runtime?",
                                           "updatedAt":  "2021-11-18T22:07:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46BaKy",
                                           "createdAt":  "2021-11-18T23:34:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqGbcg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elachlan",
                                                                               "createdAt":  "2021-11-18T23:43:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "MgSam",
                                                                               "createdAt":  "2021-12-09T21:37:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "snow-jallen",
                                                                               "createdAt":  "2022-08-05T16:43:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "roji",
                                           "body":  "@elachlan not yet.",
                                           "updatedAt":  "2021-11-18T23:34:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47zzXk",
                                           "createdAt":  "2021-12-31T18:54:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pevans360",
                                           "body":  "We have a dashboard application originally written with TableAdapters/DataSets/DataTables.  It\u0027s read-only and a user action may result in 20 or so queryies being run.  \r\n\r\nSix months ago we converted to EF Core which I think qualifies as a \"modern data access technology\".  Performance was noticeably slower than the TableAdapters (and unacceptable to management so it was never deployed).  We then converted to Dapper.  Response time dropped by about half from EF Core, but was still slower than the old TableAdapters.  Still unacceptable.  \r\n\r\nWe then set up a testbed and compared Dapper with .Net Core SqlDataAdapters for some of our common queries (Wish I had done this first).  The SqlDataAdapters run in roughly half the time of Dapper. \r\n\r\nCompounding the situation is the fact that tooling support for TableAdapters in Visual Studio seems to be getting wobbly: https://developercommunity.visualstudio.com/t/cannot-create-tableadapters-in-datasets-for-sql-se/1599525  So we have issues adding new functionality using the old technology.  \r\n\r\nWe are a \"database-first\" shop and performance is important.  The DataAdapters are a great match for our requirements.  Support for async would be worthwhile from my perspective.  ",
                                           "updatedAt":  "2022-01-04T00:06:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47zzmX",
                                           "createdAt":  "2021-12-31T19:01:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCIWEag==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ajcvickers",
                                                                               "createdAt":  "2022-01-03T10:32:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e Six months ago we converted to EF Core which I think qualifies as a \"modern data access technology\". Performance was noticeably slower than the TableAdapters (and unacceptable to management so it was never deployed). We then converted to Dapper. Response time dropped by about half from EF Core, but was still slower than the old TableAdapters. Still unacceptable.\r\n\u003e\r\n\u003e We then set up a testbed and compared Dapper with .Net Core SqlDataAdapters for some of our common queries (Wish I had done this first). The SqlDataAdapters run in roughly half the time of Dapper.\r\n\r\nWould you share your testbed? It\u0027s very hard to react to performance claims such as these without seeing the actual benchmarks. I can only say that the above has not been our experience; for example, EF Core 6.0 contains performance improvements which brought it to within a few percentage points compared to Dapper ([see this blog post](https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-6-0-preview-4-performance-edition/)). I\u0027d also be quite surprised if Dapper were half as fast as SqlDataAdapter for regular usage; one exception to this is efficient batching done internally by SqlDataAdapter which isn\u0027t otherwise available e.g. via SqlCommand/SqlDataReader - see [this issue](https://github.com/dotnet/SqlClient/issues/19) - but general performance outside of that should definitely not be like that.\r\n\r\nFinally, DataSet/DataTable/DataAdapter are a layer on top of SqlCommand/SqlDataReader. If what you\u0027re looking for is the absolute best performance, you should consider using those instead.\r\n\r\nBut regardless, I\u0027d be curious to see your benchmarks.",
                                           "updatedAt":  "2022-01-04T00:06:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc470hST",
                                           "createdAt":  "2022-01-01T21:50:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pevans360",
                                           "body":  "Thanks for the quick response.  Am preparing a shareable version of the Testbed project.  Will post again when it\u0027s ready.  Probably later today or tomorrow.  \r\n\r\nI read a number of blog posts on EF and Dapper performance before deciding to convert.  So I\u0027m more than a little surprised to be where I am on this.  ",
                                           "updatedAt":  "2022-01-04T00:06:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc473TV2",
                                           "createdAt":  "2022-01-03T20:55:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pevans360",
                                           "body":  "TLDR; I no longer think that the data access technology is causing the slow performance.  \r\n\r\nFirst, need to correct something.  The original testing was against the current system which is .Net 4.6.1 and uses .xsd TableAdapters (not new SQLDataAdapters).  \r\n\r\nAlso need to clarify that the test was from the perspective of the client - that is, the testbed was a web client (Angular) that could either call the current API (.Net 4.6.1/TableAdapter) or the new API (.Net Core 5/Dapper).  \r\n\r\nAfter running the tests again, the new API averaged being 28% slower than the current.  There was very little variance between the runs.  \r\n\r\nRealized that this is not a fair test of the data access techology since there\u0027s also a platform difference (.Net Core vs. 4.6.1) and we\u0027re measuring the entire request/response pipeline.  The slowdown could be due to something in .Net Core or our implementation.  \r\n\r\nSo, wrote a simple console application to call each of the data access technologies directly.  In this test, performance of EF Core, Dapper, SQLDataAdapter, and DataReader were all quite close.  Wrote an identical console app in 4.6.1 to compare the old TableAdapters - results were very close to the others.  \r\n\r\nIf data access isn\u0027t causing the slowdown, what is?  The other big difference in the new version of the API is that it\u0027s async top to bottom.  The old version is synchronous.  A typical request has to go through a controller, repository object, data series object, chart object, etc. all of which have awaits in the new version.  \r\n\r\nIt may be that, in this instance, the overhead involved in async outweighs the benefit (as suggested by the following  \r\nhttps://devblogs.microsoft.com/premier-developer/the-performance-characteristics-of-async-methods/)",
                                           "updatedAt":  "2022-01-04T00:06:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc473Urt",
                                           "createdAt":  "2022-01-03T21:06:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elachlan",
                                           "body":  "@pevans360 what version .NET are you using for the new API. There will be a lot of people really interested to find it slower. I suggest you test the raw API calls instead of via angular. I had a similar issue where a table page was loading very slow and the culprit was fontawesome and how it was adding the icons for a menu on each of the rows. Our first thought was that it was API related.",
                                           "updatedAt":  "2022-01-04T00:06:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc473WcP",
                                           "createdAt":  "2022-01-03T21:18:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCIaYOA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elachlan",
                                                                               "createdAt":  "2022-01-03T21:19:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "@pevans360 @elachlan I\u0027d suggest doing proper benchmarks with [BenchmarkDotNet](https://benchmarkdotnet.org), exercising only the pure data APIs in question and nothing else. Anything else is speculation at this point, including the idea that async has a significant impact here. Yes, async is known to be sometimes slightly slower in tight, non-concurrent workflows, but as thread-count increases async scales far better by not involving a large number of threads.\r\n\r\nIf you see significant unexpected gaps in performance, please open a separate issue posting both the results and the full benchmark code, and we can investigate further; it\u0027s better to leave this issue about what it is, specifically adding async APIs on data adapters.",
                                           "updatedAt":  "2022-01-04T00:06:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc473e8c",
                                           "createdAt":  "2022-01-03T22:26:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCIbHfA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "elachlan",
                                                                               "createdAt":  "2022-01-03T22:31:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2022-01-04T00:04:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "pevans360",
                                           "body":  "@roji Appreciate your feedback.  Am satisfied that my initial diagnosis of the performance issue was wrong.  With your help, at least I\u0027ve eliminated one possible cause.  \r\n@elachlan At this point, I would definitely _not_ draw the conclusion that .Net 5 is slower.  I have some additional work to do figuring this out.  ",
                                           "updatedAt":  "2022-01-04T00:05:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc473oIh",
                                           "createdAt":  "2022-01-04T00:05:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Great. I\u0027ll hide the above comments as off-topic to keep this already-long issue a bit shorter. Please don\u0027t hesitate to share any perf benchmarks/info in the future (preferably in a different issue).",
                                           "updatedAt":  "2022-01-04T00:05:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49wz27",
                                           "createdAt":  "2022-02-11T13:18:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Misiu",
                                           "body":  "@roji any updates?\r\n.NET 7 Preview 1 is almost released (https://github.com/dotnet/core/issues/7106), so is there a chance to have this issue added to .NET 7 milestone?",
                                           "updatedAt":  "2022-02-11T13:18:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49zUFk",
                                           "createdAt":  "2022-02-12T00:44:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD1Jihg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "slang25",
                                                                               "createdAt":  "2022-02-12T13:59:41Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2022-04-13T13:03:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "snow-jallen",
                                                                               "createdAt":  "2022-08-05T16:43:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichelZ",
                                                                               "createdAt":  "2022-09-06T08:19:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JNecker",
                                                                               "createdAt":  "2024-02-14T08:49:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bdrajer",
                                                                               "createdAt":  "2024-08-12T10:10:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bouvierr",
                                                                               "createdAt":  "2024-08-21T18:12:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jmbryan4",
                                                                               "createdAt":  "2024-10-07T20:12:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "daiplusplus",
                                           "body":  "Just bumping myself (sorry!) for awareness:\r\n\r\nFor those wanting something in the meanwhile, my `AsyncDataAdapter` is available on NuGet:\r\n\r\n* https://github.com/Jehoel/AsyncDataAdapter\r\n* https://www.nuget.org/packages/Jehoel.AsyncDataAdapter/\r\n* https://www.nuget.org/packages/Jehoel.AsyncDataAdapter.System.Data.SqlClient/\r\n* https://www.nuget.org/packages/Jehoel.AsyncDataAdapter.Microsoft.Data.SqlClient/\r\n\r\n",
                                           "updatedAt":  "2022-02-12T00:44:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BAQRP",
                                           "createdAt":  "2022-04-06T18:18:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODWsWXw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "snow-jallen",
                                                                               "createdAt":  "2022-08-05T16:43:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichelZ",
                                                                               "createdAt":  "2022-09-06T08:19:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "marcelgoldstein",
                                                                               "createdAt":  "2022-10-19T19:14:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JNecker",
                                                                               "createdAt":  "2024-02-14T08:49:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "coderb",
                                           "body":  "+1 for async version of `DataTable.Load()`",
                                           "updatedAt":  "2022-04-06T18:18:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RcCgz",
                                           "createdAt":  "2022-12-28T01:38:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODuyD5A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2022-12-31T03:41:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JNecker",
                                                                               "createdAt":  "2024-02-14T08:49:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bouvierr",
                                                                               "createdAt":  "2024-08-19T17:05:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "Welchen",
                                           "body":  "Any update on this? ",
                                           "updatedAt":  "2022-12-28T01:38:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RjHDr",
                                           "createdAt":  "2022-12-31T03:45:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Misiu",
                                           "body":  "So... Maybe .NET8? ",
                                           "updatedAt":  "2022-12-31T03:45:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RjIdw",
                                           "createdAt":  "2022-12-31T04:47:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChristineBoersen",
                                           "body":  "After 3 full versions, I doubt they will ever add it.\n________________________________\nFrom: Tomasz ***@***.***\u003e\nSent: Friday, December 30, 2022 10:45 PM\nTo: dotnet/runtime ***@***.***\u003e\nCc: Christine Boersen ***@***.***\u003e; Mention ***@***.***\u003e\nSubject: Re: [dotnet/runtime] Consider adding FillAsync and async APIs on data adapters (#22109)\n\n\nSo... Maybe .NET8?\n\n—\nReply to this email directly, view it on GitHub\u003chttps://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fdotnet%2Fruntime%2Fissues%2F22109%23issuecomment-1368158443\u0026data=05%7C01%7C%7C5f0eb16992e5498c36ca08daeae179d1%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C638080551428098800%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C\u0026sdata=1TjkVsCUt%2Bwac7s%2FmNNKFXK%2FkydbtoE4ldP8AZFwWIw%3D\u0026reserved=0\u003e, or unsubscribe\u003chttps://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FADIK7XK3FEK3ZLLWZ57AAZTWP6T57ANCNFSM4NESDNLA\u0026data=05%7C01%7C%7C5f0eb16992e5498c36ca08daeae179d1%7C84df9e7fe9f640afb435aaaaaaaaaaaa%7C1%7C0%7C638080551428098800%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C3000%7C%7C%7C\u0026sdata=%2FKdHhVVl9YU%2FAUGwgcu2OZ4Vl1kA2cp9WLUzkxtoUDw%3D\u0026reserved=0\u003e.\nYou are receiving this because you were mentioned.Message ID: ***@***.***\u003e\n",
                                           "updatedAt":  "2022-12-31T04:47:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c0F4U",
                                           "createdAt":  "2023-05-22T12:47:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pjenei",
                                           "body":  "\u003e @Jehoel @ryan-carbon (snipping last reply from you both, which I emphatically agree with)\r\n\u003e \r\n\u003e It sounds like we all have similar use cases on this.\r\n\u003e \r\n\u003e Also, in my use case, we only use fill/getschema methods. We aren\u0027t using and of the CUD type methods through DataAdapter.\r\n\u003e \r\n\u003e So... what is the \"recommended\", NON-EF approach to\r\n\u003e \r\n\u003e * Get Schema\r\n\u003e * Fill a Data Set\r\n\u003e \r\n\u003e Worst case, I\u0027d hypothesize I could just\r\n\u003e \r\n\u003e * Open a reader\r\n\u003e * Loop the recordsets returned from the reader\r\n\u003e   \r\n\u003e   * Create a datatable per recordset manually (I need to confirm it works with zero rows, though from my recollection it does)\r\n\u003e     \r\n\u003e     * ** something like this may work**\r\n\u003e       SqlDataReader reader = command.ExecuteReader();\r\n\u003e       DataTable schemaTable = reader.GetSchemaTable();\r\n\u003e   * Loop the records and .newrow them for each row\r\n\u003e   * Add each datatable to the dataset\r\n\u003e \r\n\u003e Any thoughts for those most basic needs....\r\n\r\n@ChristineBoersen I\u0027ve created a very-very basic solution for my problem, which is similar to yours: I just need to fill an empty DataSet with data from an already opened DataReader. You can create your own version based on this. The main differences from your requirements:\r\n\r\n- (You don\u0027t mention `IDataReader` but I have to make clear that my code depends on `DbDataReader` rather than `IDataReader`, because `IDataReader` does not have any async methods.)\r\n- No `DbDataAdapter` is involved, just a `DataSet` and a `DbDataReader`.\r\n- I use an ADO.NET provider that does not support multiple result sets, so I don\u0027t loop through result sets using `NextResultAsync()`. This also means I don\u0027t have to take care of adding multiple tables to the DataSet and their naming.\r\n- I don\u0027t use `GetSchemaTableAsync()` to get the detailed schema information. In my first version, I used it, but it was much slower than this one and I don\u0027t really need the detailed information. I can create the columns based on `GetName()` and `GetFieldType().`\r\n\r\n```c#\r\n    public static async Task FillAsync(this DataSet dataSet, DbDataReader dataReader, CancellationToken cancellationToken)\r\n    {\r\n      var dataTable = dataSet.Tables.Add(\"Table\");\r\n      for (int i = 0; i \u003c dataReader.FieldCount; i++)\r\n      {\r\n        var column = new DataColumn(dataReader.GetName(i), dataReader.GetFieldType(i));\r\n        dataTable.Columns.Add(column);\r\n      }\r\n\r\n      var values = new object[dataTable.Columns.Count];\r\n      dataTable.BeginLoadData();\r\n      while (await dataReader.ReadAsync(cancellationToken))\r\n      {\r\n        dataReader.GetValues(values);\r\n        dataTable.LoadDataRow(values, true);\r\n      }\r\n      dataTable.EndLoadData();\r\n    }\r\n```",
                                           "updatedAt":  "2023-05-22T12:55:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eyZpW",
                                           "createdAt":  "2023-06-14T01:01:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC95mXA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RabbitFH",
                                                                               "createdAt":  "2023-06-14T01:01:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "marcelgoldstein",
                                                                               "createdAt":  "2023-06-14T08:04:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "RabbitFH",
                                           "body":  "+1 async",
                                           "updatedAt":  "2023-06-14T01:01:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eycQk",
                                           "createdAt":  "2023-06-14T01:12:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvIDrg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Misiu",
                                                                               "createdAt":  "2023-06-27T13:09:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Vijay-Nirmal",
                                                                               "createdAt":  "2023-07-25T07:59:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bouvierr",
                                                                               "createdAt":  "2024-08-21T18:09:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "elachlan",
                                           "body":  "@roji You wrote:\r\n\r\n\u003e Also, don\u0027t forget we still need an OK for using default interface implementation (DIM) - I\u0027ll try to push for a definite answer on this, but once again this won\u0027t happen in the next couple of months.\r\n\r\nIt is two years later. Could we please get an answer on the DIM?",
                                           "updatedAt":  "2023-06-14T01:12:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5f7mQr",
                                           "createdAt":  "2023-06-27T13:01:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Rayzbam",
                                           "body":  "+1 async",
                                           "updatedAt":  "2023-08-01T20:37:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hkqNu",
                                           "createdAt":  "2023-07-16T06:59:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jamezamm",
                                           "body":  "+1 async",
                                           "updatedAt":  "2023-08-01T20:37:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5i_Y_g",
                                           "createdAt":  "2023-08-01T17:28:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gumbarros",
                                           "body":  "+1 async",
                                           "updatedAt":  "2023-08-01T20:37:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jAELd",
                                           "createdAt":  "2023-08-01T19:36:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEXflMA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ghosttie",
                                                                               "createdAt":  "2023-08-01T19:37:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "marcelgoldstein",
                                                                               "createdAt":  "2023-08-01T19:42:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bgrainger",
                                                                               "createdAt":  "2023-08-01T20:17:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gumbarros",
                                                                               "createdAt":  "2023-08-01T20:52:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ryan-carbon",
                                                                               "createdAt":  "2023-08-02T08:05:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "avsorokin",
                                                                               "createdAt":  "2024-03-08T12:30:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MrMikeJJ",
                                                                               "createdAt":  "2024-04-28T23:08:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "taylorchasewhite",
                                                                               "createdAt":  "2024-04-29T18:35:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "StefanGreve",
                                                                               "createdAt":  "2025-06-22T14:17:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  9
                                                         },
                                           "author":  "slang25",
                                           "body":  "![Stop](https://media3.giphy.com/media/3BL45MJDZABqg/giphy.gif)\r\n\r\nStop people, you\u0027re plus one-ing all wrong 😄 Scroll to the top and hit the thumbs-up on the opening post, and then optionally hit subscribe to hear about new developments (and hopefully not people saying \"+1 async\")",
                                           "updatedAt":  "2023-08-01T19:36:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qeKng",
                                           "createdAt":  "2023-10-31T01:30:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLepDw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "gumbarros",
                                                                               "createdAt":  "2023-10-31T12:33:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "bgrainger",
                                                                               "createdAt":  "2023-10-31T13:51:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "LAUGH",
                                                                               "user":  "divega",
                                                                               "createdAt":  "2023-10-31T15:41:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "RabbitFH",
                                           "body":  "+1 async ",
                                           "updatedAt":  "2023-10-31T01:30:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5r-dNc",
                                           "createdAt":  "2023-11-14T23:07:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODf_6Eg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "taylorchasewhite",
                                                                               "createdAt":  "2024-04-29T18:35:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gumbarros",
                                                                               "createdAt":  "2024-04-29T23:00:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jgilbert2017",
                                           "body":  ".net9 pretty please.",
                                           "updatedAt":  "2023-11-14T23:07:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52N_hH",
                                           "createdAt":  "2024-03-07T12:10:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Tasin5541",
                                           "body":  "Definitely need this for cases where EF Core is not good enough for maintaining SLA and have to end up using Stored Procedure with multiple datasets. ",
                                           "updatedAt":  "2024-03-07T12:10:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52OB27",
                                           "createdAt":  "2024-03-07T12:16:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@Tasin5541 and others, I recommend taking a look at Dapper.",
                                           "updatedAt":  "2024-03-07T12:16:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc58E4oj",
                                           "createdAt":  "2024-04-28T21:05:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gruski",
                                           "body":  "\u003e Why don\u0027t they use other more modern data access technologies?\r\n\r\nLike what? Non ORM direct SQL.",
                                           "updatedAt":  "2024-04-28T21:05:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VwAuM",
                                           "createdAt":  "2024-12-02T18:37:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOETKLvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "astaerk",
                                                                               "createdAt":  "2024-12-03T17:28:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "tauheedul",
                                                                               "createdAt":  "2025-05-22T09:43:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "gumbarros",
                                           "body":  "Sorry for messaging at the thread, it\u0027s possible of reviewing this PR again with a API proposal? \nhttps://github.com/dotnet/runtime/pull/36746\n\nThis issue seems very critical to me, there is no way to populate a DataTable completely asynchronously or any way to work with dynamic runtime data at EF Core. Any chance for .NET 10?\n",
                                           "updatedAt":  "2024-12-02T18:37:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6s4x5T",
                                           "createdAt":  "2025-05-22T09:39:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEThqoA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MrMikeJJ",
                                                                               "createdAt":  "2025-05-22T10:31:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Vijay-Nirmal",
                                                                               "createdAt":  "2025-05-24T07:54:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tauheedul",
                                           "body":  "The SqlDataAdapter FillAsync() should be updated to include a support for CancellationToken which cancels querying in the database and disconnects from the database after the specified elapsed period especially for large queries while the processing is being done at the database layer in SQL Server or while a DataSet is being populated in the application etc.\n\nI have an application using SqlDataAdapter with a Fill() command. The issue I have in the instance of the SQL Query returning a large dataset, the database is returning a large volume of records and is continuously querying. Extending the CommandTimeout value didn\u0027t exit the query after the period had elapsed. For example, the database was still querying the records for several hours during validation even when the SqlCommand.CommandTimeout value was less.\n\nSince there is no async functionality with a cancellation token parameter. I am using a tokenRegistration approach before the Fill(), but this is not as reliable.",
                                           "updatedAt":  "2025-05-22T10:26:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xLj7D",
                                           "createdAt":  "2025-06-14T10:24:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEYeMkw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "skurth",
                                                                               "createdAt":  "2025-06-30T11:12:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tauheedul",
                                           "body":  "Copied from prior thread because not relevant to SqlDataAdapter.Fill().\n\nAdd a SqlDataAdapter.FillAsync() that supports CancellationToken parameter that will exit large batches while filling dataset or datatable object.\n\n```csharp\n        /// \u003csummary\u003e\n        /// Asynchronously fills a DataTable with data from the source using the SelectCommand.\n        /// \u003c/summary\u003e\n        /// \u003cparam name=\"adapter\"\u003eThe data adapter to use for the fill operation.\u003c/param\u003e\n        /// \u003cparam name=\"dataTable\"\u003eThe DataTable to fill.\u003c/param\u003e\n        /// \u003cparam name=\"cancellationToken\"\u003eA CancellationToken to observe while waiting for the task to complete.\u003c/param\u003e\n        /// \u003creturns\u003eA task that represents the asynchronous operation. The task result contains the number of rows successfully added to the DataTable.\u003c/returns\u003e\n        /// \u003cexception cref=\"OperationCanceledException\"\u003eThe operation was cancelled via the cancellation token.\u003c/exception\u003e\n        public static Task\u003cint\u003e FillAsync(\n            this DbDataAdapter adapter, \n            DataTable dataTable, \n            CancellationToken cancellationToken = default);\n\n        /// \u003csummary\u003e\n        /// Asynchronously fills a DataSet with data from the source using the SelectCommand.\n        /// \u003c/summary\u003e\n        /// \u003cparam name=\"adapter\"\u003eThe data adapter to use for the fill operation.\u003c/param\u003e\n        /// \u003cparam name=\"dataSet\"\u003eThe DataSet to fill.\u003c/param\u003e\n        /// \u003cparam name=\"cancellationToken\"\u003eA CancellationToken to observe while waiting for the task to complete.\u003c/param\u003e\n        /// \u003creturns\u003eA task that represents the asynchronous operation. The task result contains the number of rows successfully added to the DataSet.\u003c/returns\u003e\n        /// \u003cexception cref=\"OperationCanceledException\"\u003eThe operation was cancelled via the cancellation token.\u003c/exception\u003e\n        public static Task\u003cint\u003e FillAsync(\n            this DbDataAdapter adapter, \n            DataSet dataSet, \n            CancellationToken cancellationToken = default);\n\n        /// \u003csummary\u003e\n        /// Asynchronously fills a specified table within a DataSet with data from the source using the SelectCommand.\n        /// \u003c/summary\u003e\n        /// \u003cparam name=\"adapter\"\u003eThe data adapter to use for the fill operation.\u003c/param\u003e\n        /// \u003cparam name=\"dataSet\"\u003eThe DataSet to fill.\u003c/param\u003e\n        /// \u003cparam name=\"srcTable\"\u003eThe name of the source table to use for table mapping.\u003c/param\u003e\n        /// \u003cparam name=\"cancellationToken\"\u003eA CancellationToken to observe while waiting for the task to complete.\u003c/param\u003e\n        /// \u003creturns\u003eA task that represents the asynchronous operation. The task result contains the number of rows successfully added to the DataSet.\u003c/returns\u003e\n        /// \u003cexception cref=\"OperationCanceledException\"\u003eThe operation was cancelled via the cancellation token.\u003c/exception\u003e\n        public static Task\u003cint\u003e FillAsync(\n            this DbDataAdapter adapter, \n            DataSet dataSet, \n            string srcTable, \n            CancellationToken cancellationToken = default);\n\n        // Additional overloads could be considered to match paging functionality, etc.\n    }\n``` \n\n- Inside the loop, before adding a row to the DataTable, it would check cancellationToken.ThrowIfCancellationRequested() or check cancellationToken.IsCancellationRequested and exit using sqlCommand.Cancel() if the database is querying before returning an exception. This ensures cancellation is respected even during the client-side population phase, which is a major improvement.\n\n### API Usage\n\n```csharp\nvar tokenSource = new CancellationTokenSource(TimeSpan.FromMinutes(1));\nint count = await adapter.FillAsync(table, tokenSource.Token);\n```",
                                           "updatedAt":  "2025-06-14T10:26:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xOEpA",
                                           "createdAt":  "2025-06-14T21:41:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEYeMjw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "skurth",
                                                                               "createdAt":  "2025-06-30T11:12:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ChristineBoersen",
                                           "body":  "Ill review this next week when back at the office. I agree we need to do what the request asked for (in general).\r\n\r\nTy for the help :)\r\n\r\nGet Outlook for Android\u003chttps://aka.ms/AAb9ysg\u003e\r\n________________________________\r\nFrom: Tauheedul ***@***.***\u003e\r\nSent: Saturday, June 14, 2025 6:25:20 AM\r\nTo: dotnet/runtime ***@***.***\u003e\r\nCc: Christine Boersen ***@***.***\u003e; Mention ***@***.***\u003e\r\nSubject: Re: [dotnet/runtime] Consider adding FillAsync and async APIs on data adapters (#22109)\r\n\r\n[https://avatars.githubusercontent.com/u/9335220?s=20\u0026v=4]tauheedul left a comment (dotnet/runtime#22109)\u003chttps://github.com/dotnet/runtime/issues/22109#issuecomment-2972597955\u003e\r\n\r\nCopied from prior thread. Update the SqlDataAdapter.FillAsync to support CancellationToken parameter that will exit large batches while filling dataset or datatable object.\r\n\r\n        /// \u003csummary\u003e\r\n        /// Asynchronously fills a DataTable with data from the source using the SelectCommand.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"adapter\"\u003eThe data adapter to use for the fill operation.\u003c/param\u003e\r\n        /// \u003cparam name=\"dataTable\"\u003eThe DataTable to fill.\u003c/param\u003e\r\n        /// \u003cparam name=\"cancellationToken\"\u003eA CancellationToken to observe while waiting for the task to complete.\u003c/param\u003e\r\n        /// \u003creturns\u003eA task that represents the asynchronous operation. The task result contains the number of rows successfully added to the DataTable.\u003c/returns\u003e\r\n        /// \u003cexception cref=\"OperationCanceledException\"\u003eThe operation was cancelled via the cancellation token.\u003c/exception\u003e\r\n        public static Task\u003cint\u003e FillAsync(\r\n            this DbDataAdapter adapter,\r\n            DataTable dataTable,\r\n            CancellationToken cancellationToken = default);\r\n\r\n        /// \u003csummary\u003e\r\n        /// Asynchronously fills a DataSet with data from the source using the SelectCommand.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"adapter\"\u003eThe data adapter to use for the fill operation.\u003c/param\u003e\r\n        /// \u003cparam name=\"dataSet\"\u003eThe DataSet to fill.\u003c/param\u003e\r\n        /// \u003cparam name=\"cancellationToken\"\u003eA CancellationToken to observe while waiting for the task to complete.\u003c/param\u003e\r\n        /// \u003creturns\u003eA task that represents the asynchronous operation. The task result contains the number of rows successfully added to the DataSet.\u003c/returns\u003e\r\n        /// \u003cexception cref=\"OperationCanceledException\"\u003eThe operation was cancelled via the cancellation token.\u003c/exception\u003e\r\n        public static Task\u003cint\u003e FillAsync(\r\n            this DbDataAdapter adapter,\r\n            DataSet dataSet,\r\n            CancellationToken cancellationToken = default);\r\n\r\n        /// \u003csummary\u003e\r\n        /// Asynchronously fills a specified table within a DataSet with data from the source using the SelectCommand.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"adapter\"\u003eThe data adapter to use for the fill operation.\u003c/param\u003e\r\n        /// \u003cparam name=\"dataSet\"\u003eThe DataSet to fill.\u003c/param\u003e\r\n        /// \u003cparam name=\"srcTable\"\u003eThe name of the source table to use for table mapping.\u003c/param\u003e\r\n        /// \u003cparam name=\"cancellationToken\"\u003eA CancellationToken to observe while waiting for the task to complete.\u003c/param\u003e\r\n        /// \u003creturns\u003eA task that represents the asynchronous operation. The task result contains the number of rows successfully added to the DataSet.\u003c/returns\u003e\r\n        /// \u003cexception cref=\"OperationCanceledException\"\u003eThe operation was cancelled via the cancellation token.\u003c/exception\u003e\r\n        public static Task\u003cint\u003e FillAsync(\r\n            this DbDataAdapter adapter,\r\n            DataSet dataSet,\r\n            string srcTable,\r\n            CancellationToken cancellationToken = default);\r\n\r\n        // Additional overloads could be considered to match paging functionality, etc.\r\n    }\r\n\r\n  *   Inside the loop, before adding a row to the DataTable, it would check cancellationToken.ThrowIfCancellationRequested() or check cancellationToken.IsCancellationRequested and exit using sqlCommand.Cancel() if the database is querying before returning an exception. This ensures cancellation is respected even during the client-side population phase, which is a major improvement.\r\n\r\nAPI Usage\r\n\r\nvar tokenSource = new CancellationTokenSource(TimeSpan.FromMinutes(1));\r\nint count = await adapter.FillAsync(table, tokenSource.Token);\r\n\r\n—\r\nReply to this email directly, view it on GitHub\u003chttps://github.com/dotnet/runtime/issues/22109#issuecomment-2972597955\u003e, or unsubscribe\u003chttps://github.com/notifications/unsubscribe-auth/ADIK7XOQF7DQXPGICSJJT3L3DP2BBAVCNFSM6AAAAABS4BW26OVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDSNZSGU4TOOJVGU\u003e.\r\nYou are receiving this because you were mentioned.Message ID: ***@***.***\u003e\r\n",
                                           "updatedAt":  "2025-06-14T21:41:43Z"
                                       }
                                   ],
                         "totalCount":  113
                     },
        "title":  "Consider adding FillAsync and async APIs on data adapters",
        "labels":  [
                       "enhancement",
                       "api-suggestion",
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/24441",
        "createdAt":  "2017-12-13T18:17:36Z",
        "number":  24441,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCBBvvQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bricelam",
                                            "createdAt":  "2020-06-23T17:54:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NinoFloris",
                                            "createdAt":  "2021-11-03T15:50:46Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2021-11-03T15:56:19Z",
        "body":  "The ADO.NET API includes two enums which specify database types: DbType for standard types and the provider-specific *DbType (SqlDbType, NpgsqlDbType, and so on). DbType allows for database-independent programming, providing a close list of \"universal\" data types that are expected to be supported in all databases (although some DbType values are clearly SqlServer-specific or at least inspired).\r\n\r\nOn the other hand, using an enum to specify a provider-specific data type seems like a poor API choice, and is not a good fit for databases with open type systems such as PostgreSQL. Here are some issues:\r\n\r\n* PostgreSQL allows new data types to be defined by extensions, and Npgsql 3.3 will allow external plugins to support those types. However, being an enum, NpgsqlDbType is totally un-extensible - it\u0027s a closed list that exists within Npgsql. A string name would allow users to specify PostgreSQL types that are totally unknown to Npgsql, but are supported by plugins.\r\n* PostgreSQL supports enum and composite types, where the user can define arbitrary data types. `NpgsqlDbType.Enum` and `NpgsqlDbType.Composite` are not sufficient, and must be combined with another value which specifies *which* enum or composite is meant.\r\n\r\nA simple way to fix the above is to add a string property to DbParameter, called `DataType` or `ColumnType`. This would allow the user to directly specify the name of the database type needed, without passing through an enum, similar to [how EF Core allows data types to be configured via an attribute or the fluent API](https://docs.microsoft.com/en-us/ef/core/modeling/relational/data-types).\r\n\r\nIt seems to make sense to add this property to DbParameter, without causing any issues to providers which don\u0027t support it. First, it makes sense for this to be on DbParameter rather than on individual providers\u0027 parameter classes - it would allow cross-database code to set the type name (even if the type names themselves are provider-specific). Providers which don\u0027t (yet) support this property would simply ignore it with no negative consequences, while providers that do can use it.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOTFylg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MTk2MTkxMQ==",
                                           "createdAt":  "2017-12-15T09:48:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "After opening this I learned of the existence of UdtTypeName in SqlClient, which is basically what I am asking for but as a standard ADO.NET feature (i.e. on DbParameter). I\u0027d also simplify the name to TypeName.",
                                           "updatedAt":  "2017-12-15T09:48:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1MzkyMjI3MQ==",
                                           "createdAt":  "2017-12-26T05:56:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "One more thought: `DataTypeName` might be a more consistent naming, as \"data type\" is already used in ADO.NET to refer to the database type (as opposed to CLR types), e.g. `DbDataReader.GetDataTypeName()`.",
                                           "updatedAt":  "2017-12-26T05:56:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2Mzk4MDUwNA==",
                                           "createdAt":  "2018-02-08T02:17:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "*System.Data Triage:* This looks like a good idea, although we are not going to implement it right away. Moving to Future. ",
                                           "updatedAt":  "2018-02-08T02:17:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45MXKW",
                                           "createdAt":  "2021-11-03T15:56:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCBFOsg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2021-11-03T21:22:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "NinoFloris",
                                           "body":  "Though generally I\u0027m of the opinion it\u0027s a pipe dream to try and abstract over your choice of database in almost all but the simplest cases. This sounds like a small addition for making ADO.NET a bit more useful as an RDBMS abstraction where there is less need for reflection or taking dependencies on specific providers to get \u0027uniform\u0027 behavior.",
                                           "updatedAt":  "2021-11-03T15:56:19Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "String-based way to specify datatypes on ADO.NET parameters",
        "labels":  [
                       "api-suggestion",
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/24856",
        "createdAt":  "2018-01-31T19:59:40Z",
        "number":  24856,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCTqjFw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ajcvickers",
                                            "createdAt":  "2018-01-31T20:30:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "saurabh500",
                                            "createdAt":  "2018-02-01T01:05:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MarioGruda",
                                            "createdAt":  "2018-03-19T22:36:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Rattenkrieg",
                                            "createdAt":  "2018-03-24T20:13:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "caleblloyd",
                                            "createdAt":  "2018-06-15T15:09:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2019-05-30T14:09:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "personball",
                                            "createdAt":  "2019-08-09T14:34:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tezizzm",
                                            "createdAt":  "2019-08-27T12:35:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ryan-morris",
                                            "createdAt":  "2019-10-31T21:41:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bricelam",
                                            "createdAt":  "2020-06-23T17:53:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mpanasiuk-apptio",
                                            "createdAt":  "2021-01-22T20:38:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Jure-BB",
                                            "createdAt":  "2022-03-18T16:41:44Z"
                                        }
                                    ],
                          "totalCount":  12
                      },
        "updatedAt":  "2023-08-13T13:51:32Z",
        "body":  "In today\u0027s ADO.NET, connection pooling is purely an internal concern of ADO providers - no pooling API is exposed to the user in any way. It seems to be an unwritten contract that providers are supposed to pool by default, and disable pooling if the `Pooling=false` connection string parameter is used. The following is a (too lengthy) analysis of possible directions to get the conversation started.\r\n\r\nDisadvantages of the current model\r\n----------------------------------------\r\n* Since the pool isn\u0027t exposed, `DbConnection.Open()` must look up the pool internally, keyed on the connection string. A naïve implementation using a dictionary would add a dictionary string lookup for each pooled open, which is a significant overhead.\r\n* Pooling has to be reimplemented (efficiently!) by each provider.\r\n* The provider-implemented pool is forced upon the user - not really possible to have competing pool implementations.\r\n* Since pooling is internal to the provider, DbConnection is typically a lightweight façade to a more heavyweight internal \"physical connection\" class. The relationship and bookkeeping between these two objects adds complexity (and possibly some perf hit). The DbConnection façade is also newed-up and disposed, adding a needless allocation.\r\n\r\nOption 1: An ADO.NET user-facing pool *API*\r\n--------------------------------------------------\r\nThe connection string lookup imposed by the internal pooling mechanism could be mitigating by adding a simple, user-facing API. User code would look something like this:\r\n\r\n```c#\r\nvar factory = DbProviderFactories.GetFactory(providerName);\r\nvar connFactory = factory.GetConnectionFactory(connectionString);\r\nusing (var conn = connFactory.GetConnection()) { ... }\r\n```\r\n\r\nRegarding the naming, instead of `GetConnectionFactory()`:\r\n* We could have `GetPool()`, although seems to imply that all providers implement pooling, but some shouldn\u0027t (e.g. in-memory DBs or sqlite)\r\n* We could have `GetDatabase()`, although databases and pools aren\u0027t the same thing (e.g. you can have multiple pools for the same database0.\r\n* Maybe `GetConnectionProvider()`?\r\n* ConnectionFactory is abstract enough that it could be used for other purposes (e.g. a wrapper of other connection factories which returns connections that allow interception of certain events, or whatever).\r\n* JDBC calls it `DataSource` which isn\u0027t too bad IMHO.\r\n\r\nOption 2: A *complete* pooling API (not just user facing)\r\n----------------------------------------------------------------\r\nThe above only provides a user-facing abstraction which allows avoiding the lookup (and possibly opens up possibility for composing connection provider), but the pool itself is still implemented by each provider. We could go further and provide a more complete abstraction that allows writing connection pools. This would allow pooling implementations which aren\u0027t connected to any specific provider (and which could be used with any provider). Users would be able to select a 3rd-party pooling implementation which fits their specific application needs, rather than being locked into a single, provider-implemented pool.\r\n\r\nThis mainly has to do with defining standard public APIs for communication between the ADO provider and the pool in use. For example, when a connection is returned to the pool its state may need to be reset in a provider-specific, the DbConnection would have to expose that API. There may be other things as well.\r\n\r\nIf we go down this route, we could also optionally provide a provider-independent, highly efficient connection pool that could be used instead of the providers\u0027 ones.\r\n\r\nComparison with JDBC\r\n-------------------------\r\nJDBC has had competing pool implementations for a very long time, which can be used with any JDBC database provider. A nice inspiration is https://brettwooldridge.github.io/HikariCP/, which claims to be the highest-performing pool implementation. The JDBC API includes several abstractions for manaing pooling (`ConnectionPoolDataSource`, `PooledConnection`), although more research is needed to understand exactly how the pooling model operates there.\r\n\r\nThings to keep in mind\r\n------------------------------\r\n* Connections enlisted in a TransactionScope and which are closed before the TransactionScope is disposed: they cannot be reused until the transaction commits/rolls back, and need to be returned if the user opens another connection with the same database and transaction to avoid escalation to a distributed transaction. This would all have some impact on the pooling.\r\n* Including/omitting authentication information in the key. When using \"integrated security\" the username can be omitted, I know SqlServer has some provisions for including that information alongside the connection string in the key.\r\n* Ability to include some arbitrary data on the pool. For example, Npgsql caches the password-less connection string on the pool (`Persist Security Info=false`). There could be other things.\r\n\r\n/cc @anpete @ajcvickers @divega @davidfowl \r\n\r\n*Edit by @roji 15/3*: Added \"things to keep in mind\" with some new points.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY-tSTQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2Mzk4MDE3OA==",
                                           "createdAt":  "2018-02-08T02:15:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "*System.Data Triage:* This looks like a good idea, although we are not going to implement it right away. Re option 2, we should consider providing an implicit connection pool that implements know best practices, e.g. to avoid locking and yield good performance, so that ADO.NET providers can reuse it. However that would probably either require defining a public type for the underlying connection object or having the pool be general purpose and not an ADO.NET thing.\r\n\r\nMoving to Future for now.",
                                           "updatedAt":  "2018-02-08T02:17:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1MzM0MzQzMQ==",
                                           "createdAt":  "2019-01-11T02:04:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Grauenwolf",
                                           "body":  "\u003e If we go down this route, we could also optionally provide a provider-independent, highly efficient connection pool that could be used instead of the providers\u0027 ones.\r\n\r\nThat sounds reasonable. \r\n\r\nBut I would like to point out a huge advantage of System.Data over JDBC is that we don\u0027t have to think about connection pooling. Things just work regardless of which database provider we use.\r\n\r\nSo compared to the other things on the list this is a very low priority item. ",
                                           "updatedAt":  "2019-01-11T02:04:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ1Mzc2Nzk5Ng==",
                                           "createdAt":  "2019-01-12T17:58:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAvVfQA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ajcvickers",
                                                                               "createdAt":  "2019-01-14T17:51:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2019-01-20T00:23:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tezizzm",
                                                                               "createdAt":  "2019-08-27T12:43:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "roji",
                                           "body":  "@Grauenwolf there\u0027s one more option that\u0027s not really listed above - provide a generic pool implementation suited to database connections, but without exposing it to the user. Providers would then be able to use that implementation instead of their current internal implementations, without any impact on how the user interacts with connections or with the provider (it would be a purely an internal implementation detail). This would still provide many of the advantages listed above - a single, highly-tuned and tested reusable implementation.\r\n\r\n\u003e But I would like to point out a huge advantage of System.Data over JDBC is that we don\u0027t have to think about connection pooling.\r\n\r\nHaving said that, I\u0027ve worked with JDBC in the past, and I can\u0027t say I understand why not thinking about connection pooling can be considered a \"huge advantage\"... Dealing with the pool seems to be a very minor detail that\u0027s taken care of in 1-2 lines of code... Can you explain what\u0027s bothersome in the JDBC approach?\r\n\r\n\u003e Things just work regardless of which database provider we use.\r\n\r\nIf you mean that you don\u0027t need to concern yourself with pooling, then that\u0027s true. However, precisely since every provider has its own pool implementation, things don\u0027t just work the same everywhere, as each provider has implementation differences (as well as tuning options and various knobs). Externalizing the pool would provide a consistent pooling experience regardless of provider. ",
                                           "updatedAt":  "2019-01-12T17:58:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MTYxMzQzNA==",
                                           "createdAt":  "2019-02-07T22:08:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAi84pg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2019-02-07T23:28:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bricelam",
                                           "body":  "The internal [System.Data.ProviderBase](https://referencesource.microsoft.com/#System.Data/System/Data/ProviderBase/DbConnectionInternal.cs,619e9f4f142f9998) namespace contains common pooling logic shared by Odbc, OleDb \u0026 SqlClient. It might be worth taking a look at.",
                                           "updatedAt":  "2019-02-07T22:09:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MTYzNDMxOQ==",
                                           "createdAt":  "2019-02-07T23:28:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Will do, thanks for the pointer @bricelam!",
                                           "updatedAt":  "2019-02-07T23:28:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j6uRQ",
                                           "createdAt":  "2023-08-13T12:02:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2023-08-13T12:02:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j61JN",
                                           "createdAt":  "2023-08-13T13:51:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "Pinging.",
                                           "updatedAt":  "2023-08-13T13:51:27Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Consider a better design for ADO.NET connection pooling",
        "labels":  [
                       "enhancement",
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/24899",
        "createdAt":  "2018-02-02T21:45:01Z",
        "number":  24899,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBri3g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nil4",
                                            "createdAt":  "2018-02-02T22:30:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Suchiman",
                                            "createdAt":  "2018-02-03T03:22:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YohDeadfall",
                                            "createdAt":  "2018-02-14T18:29:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "itn3000",
                                            "createdAt":  "2018-06-12T14:20:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2019-05-30T14:10:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xsoheilalizadeh",
                                            "createdAt":  "2020-02-05T20:02:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bricelam",
                                            "createdAt":  "2020-06-23T17:52:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rmja",
                                            "createdAt":  "2021-12-21T18:07:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "thomasouvre",
                                            "createdAt":  "2025-04-24T16:27:57Z"
                                        }
                                    ],
                          "totalCount":  9
                      },
        "updatedAt":  "2022-06-02T15:07:03Z",
        "body":  "DbDataReader includes a method which allow reading sliced binary data from the database: [GetBytes()](https://msdn.microsoft.com/en-us/library/system.data.common.dbdatareader.getbytes(v=vs.110).aspx).\r\n\r\nWith Span coming, it makes sense to add a similar method which simply return a ReadOnlySpan, that can slice the provider\u0027s internal buffer - this would provide a zero-copy way to get binary data out. A default implementation could be provided in DbDataReader which internally allocates the byte array and returns a ReadOnlySpan to it, but providers could override it to provide an efficient implementation.\r\n\r\nNote that the same isn\u0027t possible for char-based data ([GetChars()](https://msdn.microsoft.com/en-us/library/system.data.common.dbdatareader.getchars(v=vs.110).aspx)) because text decoding needs to be done by someone.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORD7vjQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2Mjg2Mjg1OA==",
                                           "createdAt":  "2018-02-03T23:00:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "It probably wouldn\u0027t return a Span but instead would copy into one. ",
                                           "updatedAt":  "2018-02-03T23:00:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2Mjg3MjQ2MQ==",
                                           "createdAt":  "2018-02-04T01:35:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOASTeEw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "divega",
                                                                               "createdAt":  "2018-02-06T02:10:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "@davidfowl part of the idea here is to allow getting the data without any copying. Unless `CommandBehavior.Sequential` is specified (the vast majority of cases), the user is supposed to be able to seek back and forth in the row, implying that it is already buffered internally in the provider. If this is indeed the case, a ReadOnlySpan can be used to slice the internal buffer and avoid any copying.\r\n\r\nTo argue against myself, it could be claimed that binary data is usually large and would there be used frequently with `CommandBehavior.Sequential`, in which case this optimization isn\u0027t possible (we don\u0027t necessarily have the entire data in memory). But we could always fall back to allocating internally and returning a Span to that.\r\n\r\nDon\u0027t get me wrong, the version you propose, which copies data into a Span is also needed - it\u0027s the same thing as the `GetBytes()` that\u0027s already in ADO but more general for Span.",
                                           "updatedAt":  "2018-02-04T01:35:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2Mzk3OTU0Nw==",
                                           "createdAt":  "2018-02-08T02:12:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "*System.Data Triage:* This looks like a good idea, although we are not going to implement it right away. Moving to Future. ",
                                           "updatedAt":  "2018-02-08T02:12:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjE3OTc5MQ==",
                                           "createdAt":  "2018-11-27T19:09:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODa2_4w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "divega",
                                                                               "createdAt":  "2018-11-28T06:46:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeangatto",
                                                                               "createdAt":  "2024-03-17T13:41:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "bricelam",
                                           "body":  "I bet you could enable this scenario using the existing `GetStream()` method--just return a span-optimized stream.\r\n``` csharp\r\nvar buffer = new Span\u003cbyte\u003e();\r\nreader.GetStream(ordinal).Read(span);\r\nvar bytes = buffer.Slice(dataOffset, length);\r\n```",
                                           "updatedAt":  "2018-11-27T19:09:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjM4NjUyNg==",
                                           "createdAt":  "2018-11-28T09:52:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@bricelam\r\n\r\n\u003e I bet you could enable this scenario using the existing GetStream() method--just return a span-optimized stream.\r\n\r\nUnless I\u0027m confused, this will still copy your data out from the driver\u0027s buffer and into the user-provided Span, in that sense it\u0027s very similar to @davidfowl\u0027s [suggestion above](https://github.com/dotnet/corefx/issues/26799#issuecomment-362862858).\r\n\r\nI was interested in thinking about getting a `ReadOnlySpan\u003cbyte\u003e` directly into the buffered memory in the driver. As I wrote above, I\u0027m not 100% convinced of how relevant this is, since binary data will tend to be long and therefore not necessarily buffered (that would probably depend on `CommandBehavior.Sequential` is specified or not).\r\n\r\nIf we\u0027re looking for a copying method, than I agree that doing it via the stream is probably best. On a somewhat unrelated note, this seems like a good example of why some sort of compliance testing suite would be helpful (#7810), so that missing support for this in a given provider could be discovered/flagged right away.",
                                           "updatedAt":  "2018-11-28T09:52:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MjQ2ODQxMg==",
                                           "createdAt":  "2018-11-28T14:36:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bgrainger",
                                           "body":  "\u003e so that missing support for this in a given provider could be discovered/flagged right away\r\n\r\nFor example, `MySqlDataReader.GetStream` in Oracle\u0027s Connector/NET [doesn\u0027t work](https://bugs.mysql.com/bug.php?id=93374).",
                                           "updatedAt":  "2018-11-28T14:36:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C5rw1",
                                           "createdAt":  "2022-05-10T13:44:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCcESHA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2022-05-10T14:00:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "bgrainger",
                                           "body":  "\u003e add a similar method which simply return a ReadOnlySpan, that can slice the provider\u0027s internal buffer\r\n\r\nI found myself wishing for a high-performance way to retrieve binary data from SQLite; a method like the one proposed that could return the results of [`sqlite3_column_blob`](https://www.sqlite.org/c3ref/column_blob.html) (which returns a pointer into SQLite\u0027s native memory) as a `ReadOnlySpan\u003cbyte\u003e` would be very useful.\r\n\r\nNote that SQLite introduces some complex lifetime issues, though:\r\n\r\n\u003e The pointers returned are valid until a type conversion occurs as described above, or until `sqlite3_step()` or `sqlite3_reset()` or `sqlite3_finalize()` is called. The memory space used to hold strings and BLOBs is freed automatically.\r\n\r\nThat means that the data returned by \"GetReadOnlySpan(ordinal)\" might only be valid until the very next column is read (if the method called to read that column requires a type conversion). (And of course it\u0027s invalidated if `DbDataReader.Read()` or `DbDataReader.Close()` is called.)",
                                           "updatedAt":  "2022-05-10T13:44:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C51-V",
                                           "createdAt":  "2022-05-10T14:17:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "The lifetime issues are indeed the tricky problem here...",
                                           "updatedAt":  "2022-05-10T14:17:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C86_g",
                                           "createdAt":  "2022-05-11T07:10:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "The span needs to be passed in. Take a look at all of the exiting APIs that deal with spans, they all have this pattern.",
                                           "updatedAt":  "2022-05-11T07:10:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C9LEe",
                                           "createdAt":  "2022-05-11T08:15:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@davidfowl we had this conversation above :) https://github.com/dotnet/runtime/issues/24899#issuecomment-362872461\r\n\r\nBut yeah, to develop this further... It\u0027s true that if the row is being streamed rather than buffered (CommandBehavior.SequentialAccess), it may make sense to allow users to pass in a (writable) Span, and to have the driver read into that directly. API-wise this is actually already possible via [GetBytes](https://docs.microsoft.com/en-us/dotnet/api/system.data.common.dbdatareader.getbytes?view=net-6.0#system-data-common-dbdatareader-getbytes(system-int32-system-int64-system-byte()-system-int32-system-int32))), and Npgsql actually implements it in a zero-copy way (when SequentialAccess is specified).\r\n\r\nWhat we could do is add an overload accepting a Span rather than byte[], for other memory types.",
                                           "updatedAt":  "2022-05-11T08:15:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C_VBy",
                                           "createdAt":  "2022-05-11T15:02:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Right, that would allow you to pass a stackalloced span. What happens if the buffer is too small today?",
                                           "updatedAt":  "2022-05-11T15:02:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C_dD3",
                                           "createdAt":  "2022-05-11T15:27:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bgrainger",
                                           "body":  "\u003e Npgsql actually implements it in a zero-copy way\r\n\r\nI may be misunderstanding what you\u0027re saying, but how does `NpgsqlDataReader.GetBytes(int, long, byte[], int, int)` fill the user\u0027s buffer (the third parameter) in a zero-copy way?",
                                           "updatedAt":  "2022-05-11T15:27:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5C_j3Y",
                                           "createdAt":  "2022-05-11T15:54:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCcVn2Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2022-05-11T17:48:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vonzshik",
                                           "body":  "\u003e I may be misunderstanding what you\u0027re saying, but how does NpgsqlDataReader.GetBytes(int, long, byte[], int, int) fill the user\u0027s buffer (the third parameter) in a zero-copy way?\r\n\r\n`NpgsqlDataReader.GetBytes(int, long, byte[], int, int)` calls [NpgsqlReadBuffer.Read](https://github.com/npgsql/npgsql/blob/94085b9af224578082e25ca1bff68983e53a0dba/src/Npgsql/Internal/NpgsqlReadBuffer.cs#L489), which reads directly into the provided buffer from the stream (that\u0027s true only if `CommandBehavior.SequentialAccess` is provided, because otherwise the entire row is buffered).",
                                           "updatedAt":  "2022-05-11T15:54:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5DADHE",
                                           "createdAt":  "2022-05-11T17:52:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e Right, that would allow you to pass a stackalloced span.\r\n\r\nYep.\r\n\r\n\u003e What happens if the buffer is too small today?\r\n\r\nGetBytes accepts parameters saying how many bytes to read, from which position in the column and where to put them in the buffer, so I don\u0027t think there\u0027s a problem (unless the user passes a length that\u0027s bigger than the buffer they themselves provided, in which case we throw).\r\n\r\nIf we added a Span overload, it would proabbly look something like:\r\n\r\n```c#\r\npublic virtual long GetBytes(int ordinal, long dataOffset, Span\u003cbytes\u003e span);\r\n```\r\n\r\nThis would allow reading different segments from the same binary column in different calls (the offset would need to always increment if streaming with SequentialAccess). Does this make sense and align with other APIs @davidfowl?\r\n",
                                           "updatedAt":  "2022-05-11T17:52:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5EPu-N",
                                           "createdAt":  "2022-06-02T15:07:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dmcnaughton-nbc",
                                           "body":  "Just wanted to add to this by highlighting the fact that the GetStream() call won\u0027t work for the RowVersion/Timestamp data type in MSSQL. So having a Span\u003cbyte\u003e based read operation on DbDataReader would reduce the need for a byte buffer when reading the RowVersion into something such as a single long value.",
                                           "updatedAt":  "2022-06-02T15:07:03Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "Span-based way to read binary data in ADO.NET",
        "labels":  [
                       "api-suggestion",
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/25022",
        "createdAt":  "2018-02-12T22:02:38Z",
        "number":  25022,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAovk8w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "FroggieFrog",
                                            "createdAt":  "2018-12-07T08:28:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MaxG117",
                                            "createdAt":  "2019-01-31T03:09:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austindrenski",
                                            "createdAt":  "2019-02-13T13:36:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dymo",
                                            "createdAt":  "2019-05-16T05:36:08Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2023-08-15T19:45:58Z",
        "body":  "In theory, parameter placeholders [are an entirely database-specific details](https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/configuring-parameters-and-parameter-data-types#working-with-parameter-placeholders) - there is no way to write a single SQL containing parameters, and then execute it on different databases.\r\n\r\nIn practice, it seems that most ADO.NET have aligned on the `@name` convention. This is quite a problem, since for databases which don\u0027t support it natively, the ADO.NET provider must parse and replace the `@name` placeholder with the one accepted by the database. For example, PostgreSQL uses positional placeholders ($1, $2...), which by the way are also specific to individual statements in a batch (parameters are per-statement, not per-batch).\r\n\r\nWe could design an API where the provider would generate the placeholder. This could be as simple as adding a `Placeholder` property on DbParameter, which each provider would implement as necessary. The user would then interpolate the placeholder into the CommandText. For positional placeholders, the logic would typically calculate the placeholder as the DbParameter is inserted into a DbParameterCollection, whereas for named placeholders the `ParameterName` would be returned.\r\n\r\nPS Parameter placeholder translation is one of two things forcing Npgsql to parse the CommandText - the other is the lack of a proper batching API (#3688), which requires to parse and split on semicolons.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZBqaIQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NTA3ODAyMA==",
                                           "createdAt":  "2018-02-12T22:02:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "/cc @divega @ajcvickers @saurabh500",
                                           "updatedAt":  "2018-02-12T22:02:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NTA4NTI2OQ==",
                                           "createdAt":  "2018-02-12T22:30:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "*System.Data Triage:* this seems to be a good idea. Once we prototype the API we can try using it in EF Core and other components that generate SQL.\r\n\r\nMoving to future.",
                                           "updatedAt":  "2018-02-12T22:30:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MTM4NTUxNg==",
                                           "createdAt":  "2019-02-07T11:40:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Note: this should take into account that some providers don\u0027t use placeholders, but rather render values literally into the command text (e.g. MySqlConnector in text mode, @bgrainger).",
                                           "updatedAt":  "2019-02-07T11:40:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MzIwMDg2MA==",
                                           "createdAt":  "2019-02-13T13:34:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAjPjsw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "austindrenski",
                                                                               "createdAt":  "2019-02-13T13:39:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "Continuing the above, there are three kinds of placeholders (not sure the naming is good):\r\n\r\n* Named placeholders: the user provides an arbitrary string name in the placeholder, and the same name is matched with `DbParameter.ParameterName` in the command\u0027s parameter list. Example: `@city` in SQL Server.\r\n* Explicit positional placeholders: the user provides a placeholder which includes the parameter\u0027s position in the parameter list. Since the placeholder contains an explicit position, it can be used more than once in the SQL, referring to the same parameter. Example: `$2` in PostgreSQL.\r\n* Implicit positional placeholders: the user provides a placeholder which doesn\u0027t include either a name or a position - the placeholder\u0027s position in the SQL implicitly indicates which parameter it corresponds to in the list. Referencing the same parameter twice from the SQL is impossible, and the parameter must be duplicated. Example: `?` in ODBC.\r\n\r\nOur API would need to somehow let consumers know whether placeholders are implicit or not, otherwise they can\u0027t know whether they can reuse the same placeholder or not.\r\n\r\n[Note the DataSourceInformation schema collection](https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/common-schema-collections) which has `ParameterMarkerFormat`, which provides some of the information here (i.e. we can know whether the placeholders are explicit or implicit). This could be useful for a backwards-compatibility shim (assuming it is well-implemented).\r\n\r\nFinally, even if placeholder generation is taken over by the provider, the user should still have the option of providing an arbitrary string name. If the database supports named placeholders, that name could be used (better for logging etc). If it doesn\u0027t, the name would be ignored.\r\n\r\n/cc @divega @ajcvickers @bricelam",
                                           "updatedAt":  "2019-02-13T13:34:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kGSNW",
                                           "createdAt":  "2023-08-15T18:01:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2023-08-15T18:01:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kGpoh",
                                           "createdAt":  "2023-08-15T19:16:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Keep this open for possible future work.",
                                           "updatedAt":  "2023-08-15T19:16:45Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "ADO.NET: Database-independent way to generate parameter placeholders",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/25297",
        "createdAt":  "2018-03-03T09:16:31Z",
        "number":  25297,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCu0a_A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "csrakowski",
                                            "createdAt":  "2018-03-03T09:34:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2018-03-03T11:23:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nil4",
                                            "createdAt":  "2018-03-03T16:08:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ilmax",
                                            "createdAt":  "2018-04-02T13:36:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "saurabh500",
                                            "createdAt":  "2018-04-07T18:20:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dario-l",
                                            "createdAt":  "2018-05-21T11:15:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mahara",
                                            "createdAt":  "2018-11-08T11:42:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "irowbin",
                                            "createdAt":  "2018-11-13T15:09:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yzorg",
                                            "createdAt":  "2018-11-13T19:43:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "OlegKarasik",
                                            "createdAt":  "2018-11-14T05:57:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bgrainger",
                                            "createdAt":  "2018-11-18T20:51:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nenadvicentic",
                                            "createdAt":  "2018-11-19T07:44:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AndriySvyryd",
                                            "createdAt":  "2019-02-01T01:22:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xsoheilalizadeh",
                                            "createdAt":  "2019-12-21T21:35:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MaximGurschi",
                                            "createdAt":  "2020-07-02T18:39:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TwentyFourMinutes",
                                            "createdAt":  "2020-07-29T13:22:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DanilovSoft",
                                            "createdAt":  "2020-10-31T09:28:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rmja",
                                            "createdAt":  "2021-10-12T07:01:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "swimmesberger",
                                            "createdAt":  "2022-11-20T10:38:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2023-03-11T11:26:04Z"
                                        }
                                    ],
                          "totalCount":  20
                      },
        "updatedAt":  "2025-01-07T19:51:34Z",
        "body":  "With https://github.com/dotnet/corefx/issues/27445 allowing elimination of allocations in asynchronously-executing async methods, we should look into adding ValueTask-returning counterparts to ADO.NET. This would potentially allow zero-allocation database access.\r\n\r\nHere are the current async methods:\r\n\r\n```c#\r\nTask DbConnection.OpenAsync(...);\r\n\r\nTask\u003cDbDataReader\u003e DbCommand.ExecuteReaderAsync(...);\r\nTask\u003cDbDataReader\u003e DbCommand.ExecuteDbDataReaderAsync(...);\r\nTask\u003cobject\u003e DbCommand.ExecuteScalarAsync(...);\r\nTask DbCommand.ExecuteNonQueryAsync(...);\r\n\r\nTask\u003cbool\u003e DbDataReader.ReadAsync(...);\r\nTask\u003cT\u003e DbDataReader.GetFieldValueAsync\u003cT\u003e(...);\r\nTask\u003cbool\u003e DbDataReader.IsDBNullAsync(...);\r\n```\r\n\r\nNotes:\r\n\r\n1. Naming the new methods is going to be complicated. Some parts of corefx are lucky in that they\u0027re introducing `ValueTask\u003cT\u003e` overloads along with `Span\u003cT\u003e` (e.g. Stream), but ADO.NET has no such upcoming parameter changes/additions. Since there can\u0027t be yet another overload that only differs on the return type, and the \"standard\" name with just the `Async` suffix is taken, we need to come up with a new naming pattern. \r\n\r\n2. There are some missing async methods in ADO.NET in general (e.g. `DbCommand.Prepare()`, `DbConnection.BeginTransactionAsync(...)`, `DbTransaction.CommitAsync(...)`...). These can be added directly with return value `ValueTask\u003cT\u003e` (covered by issue https://github.com/dotnet/corefx/issues/35012). Naming of these new methods should probably be decided in the context of whatever new naming pattern we use for the `ValueTask\u003cT\u003e` returning variants of the existing async methods. \r\n\r\n3. Also note that async APIs that return `Task` or `Task\u003cbool\u003e` (such as `ReadAsync()` and `IsDBNullAsync()`) can be implemented to return cached `Task\u003cT\u003e` instances when they complete synchronously to gain efficiency instead of adopting `ValueTask\u003cTResult\u003e`. This mitigates the need for `ValueTask\u003cT\u003e` returning variants for most APIs. Also, in terms of allocations, the advantage of `ValueTask\u003cT\u003e` is much greater the more fine grained the async methods are. \r\n\r\n4. Compatibility for providers: It seems desirable to offer a default implementation of the Task-based method that calls `AsTask()` on the `ValueTask\u003cTResult\u003e` instance returned by the new API, so that new providers don\u0027t need to implement the old `Task\u003cTResult\u003e` version of the API but instead only implement the more efficient `ValueTask\u003cTResult\u003e` version. It also seems good not to force existing providers to switch. \r\n---\r\n**Updated by @divega on 1/13/2019 to consolidate with https://github.com/dotnet/corefx/issues/15011.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmYFynw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MDEzNDAyMA==",
                                           "createdAt":  "2018-03-03T09:31:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "**System.Data Triage:** We should consider this, but since it isn’t for 2.1, moving to future.",
                                           "updatedAt":  "2018-03-03T15:32:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MDEzNDExMw==",
                                           "createdAt":  "2018-03-03T09:33:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Are any of these methods streaming? Would IAsyncEnumerable be interesting here?",
                                           "updatedAt":  "2018-03-03T09:33:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MDEzNDUyMQ==",
                                           "createdAt":  "2018-03-03T09:40:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "@davidfowl `DbDataReader.Read` is streaming. The current API does not resemble `IEnumerable` (possibly because it predates it :smile:), but the new API could use `IAsyncEnumerable` if the timing is good.\r\n\r\nSee this was mentioned on https://github.com/aspnet/DataAccessPerformance/issues/32.",
                                           "updatedAt":  "2018-11-08T22:18:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3MDEzNTU4Nw==",
                                           "createdAt":  "2018-03-03T10:00:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "DbDataReader implement IEnumerable, exposing rows as DbDataRecord. It\u0027s an old API (non-generic, sync-only), and the default implementation, which uses DbEnumerator, [is also pretty inefficient](https://github.com/dotnet/corefx/blob/master/src/System.Data.Common/src/System/Data/Common/DbEnumerator.cs#L53): it calls `DbDataReader.GetValues()`, which copies the row\u0027s values into an object[] (which gets allocated on each MoveNext()...).\r\n\r\nBut I actually don\u0027t really see a reason not to also have DbDataReader implement IAsyncEnumerable... It could provide a modern and efficient way to stream over the the rows of a resultset. Opened dotnet/corefx#27684 to track.",
                                           "updatedAt":  "2018-03-03T10:00:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzkxOTA0NQ==",
                                           "createdAt":  "2018-04-02T12:26:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "Is the allocation overhead really significant when opening a connection or executing a reader? Executing `select null` against SQL Server on the same machine over shared memory and using synchronous IO takes about 200us. This already is so much more than allocating a few objects and collecting them.\r\n\r\nAdding ValueTask versions for reading rows and fields might be valuable.",
                                           "updatedAt":  "2018-04-02T12:26:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NzkyMjkzNg==",
                                           "createdAt":  "2018-04-02T12:52:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOArVt2A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "saurabh500",
                                                                               "createdAt":  "2019-06-26T17:44:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "You\u0027re right that when `OpenAsync()` returns asynchronously (i.e. a physical open or wait), the memory overhead is probably negligible. For synchronous invocations (no I/O, pooled idle connection is returned) there is no memory overhead, since `OpenAsync()` returns a non-generic task which can be cached. So I agree this has more value for `DbDataReadet.Read()`.\r\n\r\nHowever, don\u0027t forget that ADO.NET is sometimes used to access databases like Sqlite, where the physical open can be much much faster (no networking), so it could be significant there.",
                                           "updatedAt":  "2018-04-02T16:13:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNjczNjc4Nw==",
                                           "createdAt":  "2018-11-07T18:54:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAmdUxg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "divega",
                                                                               "createdAt":  "2018-11-07T19:02:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nil4",
                                                                               "createdAt":  "2018-11-07T20:01:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "soerenBoisen",
                                                                               "createdAt":  "2019-02-15T10:53:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ViIvanov",
                                                                               "createdAt":  "2019-04-07T18:31:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "Grauenwolf",
                                           "body":  "ValueTask\u003cT\u003e DblDataReader.GetFieldValueAsync\u003cT\u003e(...);\r\nValueTask\u003cbool\u003e DbDataReader.IsDBNullAsync(...);\r\n\r\nIf we\u0027re going to touch this, we might as well fix the IsDBNull problem at the same time. Currently we need to make two calls, once to check for nulls and again to actually read the value. ~~When I profile my ORM, IsDBNull is often flagged as most expensive operation in aggregate.~~ (EDIT: this is no longer true.)\r\n\r\nWe can probably make it a lot more convenient ~~efficient~~ with methods such as \r\n\r\nValueTask\u003cT?\u003e DblDataReader.GetFieldValueOrNullAsync\u003cT\u003e(...);\r\n\r\n",
                                           "updatedAt":  "2018-11-08T08:46:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNjc5MjMwMw==",
                                           "createdAt":  "2018-11-07T21:56:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAeneag==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Grauenwolf",
                                                                               "createdAt":  "2018-11-08T08:46:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "Depending on the ADO.NET provider implementation, calling `IsDBNull()` separately from `GetFieldValue\u003cT\u003e()` isn\u0027t necessary a big perf problem (I\u0027m not sure it\u0027s the case with Npgsql). But introducing something like `GetFieldValueOrNull()` (and its async counterpart) would be a good idea regardless, if only for improving the API/usability.\r\n\r\nNote that using the async versions of these methods is probably a bad idea unless `CommandBehavior.SequentialAccess` is specified, since the entire row is pretty much guaranteed to be buffered in memory anyway...",
                                           "updatedAt":  "2018-11-07T21:56:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNjkxNjc0MA==",
                                           "createdAt":  "2018-11-08T08:45:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAeqc2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2018-11-08T08:47:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "divega",
                                                                               "createdAt":  "2018-11-08T23:05:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Grauenwolf",
                                           "body":  "You\u0027re right. When I last benchmarked it on .NET Framework a year or two ago it was a major issue. Now it\u0027s barely visible in the performance profiler. ",
                                           "updatedAt":  "2018-11-08T08:45:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNjkxNjg3MA==",
                                           "createdAt":  "2018-11-08T08:45:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Grauenwolf",
                                           "body":  "Still, it would be nice for those who are using ADO.NET directly to not have to write those checks. ",
                                           "updatedAt":  "2018-11-08T08:45:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNjkxNzY2MA==",
                                           "createdAt":  "2018-11-08T08:48:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAouV6A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Grauenwolf",
                                                                               "createdAt":  "2018-11-08T08:55:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kronic",
                                                                               "createdAt":  "2019-05-15T20:56:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "roji",
                                           "body":  "Absolutely, it would be great if ADO.NET got a bit of a face-lift in terms of API usability, regardless of any perf aspects...\r\n\r\nGood to know that perf-wise things are better, there have been a *lot* of changes in recent two years.",
                                           "updatedAt":  "2019-08-27T09:11:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNjk0NjU4Nw==",
                                           "createdAt":  "2018-11-08T10:25:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAen-5g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Grauenwolf",
                                                                               "createdAt":  "2018-11-08T11:17:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "GSPP",
                                           "body":  "If this [proposed deserialization API](https://github.com/dotnet/corefx/issues/28769) is implemented then the ADO.NET APIs will not be very chatty. There will be less of a need for `ValueTask`. `ValueTask` can be used internally.",
                                           "updatedAt":  "2018-11-08T10:25:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNzIxNDkyNw==",
                                           "createdAt":  "2018-11-09T01:14:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "@roji @Grauenwolf I would like us to track the idea of GetFieldValueOrNull[Async] as a separate issue. Would you like to create it?",
                                           "updatedAt":  "2018-11-09T05:03:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNzIyNzc2Nw==",
                                           "createdAt":  "2018-11-09T02:25:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Grauenwolf",
                                           "body":  "I haven\u0027t read the underlying code yet, so I think someone else would be better suited to proposing an API.",
                                           "updatedAt":  "2018-11-09T02:25:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNzI0NjE5Mw==",
                                           "createdAt":  "2018-11-09T04:26:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MgSam",
                                           "body":  "I vote against mixing `ValueTask` and `Task` return types arbitrarily based solely on the age of the method. `ValueTask` return types should only be highly targeted to methods likely to be called over and over. \r\n\r\nI do agree `BeginTransactionAsync` and `CommitTransactionAsync` are needed, though they should not be `ValueTask`.",
                                           "updatedAt":  "2018-11-09T04:26:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNzI1MTI0Ng==",
                                           "createdAt":  "2018-11-09T05:03:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "@Grauenwolf stating the problem with the current API would be enough. But no worries.",
                                           "updatedAt":  "2018-11-09T05:03:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNzI1MzY1Ng==",
                                           "createdAt":  "2018-11-09T05:21:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Grauenwolf",
                                           "body":  "I\u0027m ok with BeginTransactionAsync and CommitTransactionAsync not being ValueTask.\r\n\r\nReally it is only DBDataReader that I care regarding ValueTask because it is in a tight loop.",
                                           "updatedAt":  "2018-11-09T05:21:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3OTY2NTgxMg==",
                                           "createdAt":  "2019-04-03T21:28:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "@roji I wonder how this would look like now that we have a better understanding of the guidance re ValueTask\\\u003cT\u003e vs. Task\\\u003cT\u003e (from https://github.com/aspnet/EntityFrameworkCore/issues/15184).\r\n\r\nIt seems to me that only the API on DbDataReader is worth considering. \r\n\r\n ",
                                           "updatedAt":  "2019-04-03T21:28:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3OTY4NTEwMQ==",
                                           "createdAt":  "2019-04-03T22:43:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@divega I agree - for the execution APIs which never return synchronously, it doesn\u0027t make much sense to think about ValueTask. I will update the description soon to reflect this.\r\n\r\nThere\u0027s also dotnet/corefx#35012 (adding missing async methods, as opposed to ValueTask counterparts to existing async methods). It seems that proposal already follows the guidance - the only ValueTask-returning methods are `DisposeAsync()` (so coming from IAsyncDisposable) and `CloseAsync()`, which is almost identical to `DisposeAsync()`.",
                                           "updatedAt":  "2019-04-03T22:43:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3OTY4ODU1OA==",
                                           "createdAt":  "2019-04-03T22:59:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "@roji perhaps we should get everything we want from this issue copied into dotnet/corefx#35012 and bring that one to API review. I am saying this because the scope of this issue (#27682) is probably now small enough that it wouldn\u0027t affect the chances of dotnet/corefx#35012. I also think it helps have a more holistic view during the API review. ",
                                           "updatedAt":  "2019-04-03T23:02:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3OTY4OTg1Mg==",
                                           "createdAt":  "2019-04-03T23:05:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "Though there is still the naming problem :smile:",
                                           "updatedAt":  "2019-04-03T23:05:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3OTc2NTA3MQ==",
                                           "createdAt":  "2019-04-04T06:17:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Yeah, and for GetFieldValue there\u0027s also (in theory) still the question of better nullability handling (even though right now we don\u0027t seem to have anything better). That\u0027s why it may be good to handle them differently - I think dotnet/corefx#35012 can be brought to design review right away.",
                                           "updatedAt":  "2019-04-04T06:17:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3OTg0OTAwNA==",
                                           "createdAt":  "2019-04-04T10:52:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAmT0TQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2019-04-04T13:03:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "divega",
                                           "body":  "I added api-ready-for-review on dotnet/corefx#35012. Let\u0027s at least discuss the ValueTask\\\u003cbool\u003e version of ReadAsync there.",
                                           "updatedAt":  "2019-04-04T10:52:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3OTg4ODA1OQ==",
                                           "createdAt":  "2019-04-04T13:03:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@divega a small note after the recent discussions: ValueTask\\\u003cbool\u003e seems to be the same case as ValueTask, in that it provides no value for synchronous completion: Task\u003cbool\u003e is already cached (only two possible values). It may still make sense to add ValueTask\\\u003cbool\u003e overloads in case a provider ever decides to optimize the asynchronous completion case (via IValueTaskSource) - although at this point that seems pretty unlikely, given the effort required (see @stephentoub\u0027s comment quoted in https://github.com/aspnet/EntityFrameworkCore/issues/15184#issuecomment-478484271).\r\n\r\nWe could defer adding those APIs until an easier alternative is introduced (as is planned for some point) - since until then the ValueTask\\\u003cbool\u003e version will actually be a bit slower than the Task\u003cbool\u003e one (due to the overhead of the added layer etc.). What do you think?\r\n\r\nHowever, in any case we still have GetFieldValueAsync() which would benefit from an overload returning a ValueTask\\\u003cT\u003e.",
                                           "updatedAt":  "2019-04-04T21:03:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDA2NTI3Mg==",
                                           "createdAt":  "2019-04-04T21:11:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "Yes @roji, however DbDataReader.ReadAsync is exactly like IAsyncEnumerable\\\u003cT\u003e.MoveNextAsync, which is already optimized for the async completion case. I suspect someone willing to optimize it could reuse ManualResetValueTaskSourceCore\\\u003cTResult\u003e and duplicate the logic used to build async iterators.\r\n\r\nI am hoping that in the API review meeting we can get the right people to ask about this.",
                                           "updatedAt":  "2019-04-07T18:06:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDQ0OTU4NA==",
                                           "createdAt":  "2019-04-05T23:14:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@divega I\u0027ll try to investigate a bit how that works. But you\u0027re that in any case, even if today it\u0027s difficult to benefit from the async completion optimization, it may become easier in the future, and this specific API is definitely a place where that may make sense. As you say, raising this in the API review meeting would probably get us the answers we need.\r\n\r\nRegardless, I\u0027ll soon update the description to reflect this discussion.",
                                           "updatedAt":  "2019-04-05T23:14:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MTQwMzg3Ng==",
                                           "createdAt":  "2019-04-09T19:34:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "An argument can be made for providing the highest possible performance alternative (likely `ValueTask`): Who still uses raw ADO.NET these days? That is rare. Normally, people use an ORM or a thin wrapper such as Dapper. Inconvenient APIs are hidden from most callers.",
                                           "updatedAt":  "2019-04-09T19:34:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MTQwODU1OQ==",
                                           "createdAt":  "2019-04-09T19:48:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MgSam",
                                           "body":  "@GSPP Tons and tons of people still use ADO.NET. There are huge classes of developers that refuse to use anything that is not shipped with .NET. Not to mention all the legacy code out there.",
                                           "updatedAt":  "2019-04-09T19:48:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MTQwODkzNA==",
                                           "createdAt":  "2019-04-09T19:50:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@GSPP can you explain how your argument that users don\u0027t usually use ADO.NET directly relates to this issue? At least at this point it isn\u0027t really recommended to add APIs everywhere that return non-generic ValueTask, as it is very unlikely that this would help perf in any way (it would actually degrade perf in some cases compared to returning non-generic Task).\r\n\r\nThere\u0027s also a direction of thought about making ADO.NET more usable directly (as opposed to usable only via other layers).",
                                           "updatedAt":  "2019-04-09T19:50:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MTQ0NzA3Ng==",
                                           "createdAt":  "2019-04-09T21:27:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Grauenwolf",
                                           "body":  "Even those who use ORMs still need to drop down into ADO.NET for legacy databases, especially if they have stored procedures. ",
                                           "updatedAt":  "2019-04-09T21:27:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNjkyODkxOA==",
                                           "createdAt":  "2019-09-01T15:35:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAvuPQA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2019-09-02T13:19:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "I was thinking about this recently and had an idea. There are three main scenarios.\r\n\r\n1. The caller want to know if something is null but then acts directly on that knowledge. I\u0027s say this is rare and is covered by `IsDBNull[Async]`\r\n2. The caller knows by value of the query definition that the field will not be null and null appearing is an exceptional condition, this is covered by `Get*` and `GetFieldValue[Async]`\r\n3. The caller wants to know if something is null and if it isn\u0027t then get that value. At the moment you do `IsDBNull` followed immediately by `GetFieldValue`. This is the interesting case.\r\n\r\nEven when what you want is buffered locally you\u0027re calling two `Task\u003cT\u003e` returning methods and unless T is bool you\u0027re really going to have to allocate most of the time. Even if we could change this to `ValueTask\u003cT\u003e` it would still be two calls to ask about the same field. The usual sync pattern for this sort of thing would be `bool TryGetNotNullFieldValue\u003cT\u003e((string fieldname, out T value)` which if ok but that out parameter prevents it being converted to async. But! we have `ValueTuple`s now so we don\u0027t have to use the awkward pattern of having additional return parameters as out/ref. We can write `ValueTask(bool isNotNull, T value)\u003e GetNotNullFieldValue(Async\u003cT\u003e(string fieldname)` which is neatly async valuetasked and asks both relevant questions in a single call.\r\n\r\nYou\u0027d end up with callsites like this:\r\n```\r\nprivate static async Task Performance(string connectionStirng)\r\n{\r\n    using (var connection = new SqlConnection(connectionStirng))\r\n    using (var command = new SqlCommand(\"select id from table\",connection))\r\n    using (var reader = await command.ExecuteReaderAsync())\r\n    {\r\n        while (await reader.ReadAsync())\r\n        {\r\n            var valueTask = reader.GetNotNullFieldValueAsync\u003cint\u003e(\"id\");\r\n            var result = valueTask.IsCompletedSuccessfully ? valueTask.Result : await valueTask.ConfigureAwait(false);\r\n            if (result.isNotNull)\r\n            {\r\n                // use the value\r\n            }\r\n            else\r\n            {\r\n                // er...\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nAnd if you didn\u0027t care about the valuetask pattern you can just directly await the method and skip the task variable entirely. This way T should be annotatable with the nullability attributes so you don\u0027t have to escape when accessing `result.Value`. If you really want to go all-out it could return a struct type with bool operator overload so you can just do `if (result) { // use result.Value` Of course the function name sucks but that\u0027s because all the really good names are already taken, it\u0027d have to be something silly and overlong but we can pass that one up to the design review meeting to handle, they love spending hours trying to decide the best names for things 😁 ",
                                           "updatedAt":  "2019-09-01T15:35:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzE0NzA1Mw==",
                                           "createdAt":  "2019-09-02T13:23:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "The `ValueTask(bool isNotNull, T value)\u003e` idea is promising. It\u0027s also a functional API now. `out` is side-effecting and it does not compose as well as an expression. Making two calls (IsNull...) is much less nice than one call that returns exactly what you want.\r\n\r\nEssentially, ADO.NET wants an option type. This is what a SQL `NULL` is. It\u0027s almost exactly what `Nullable` provides except that `Nullable` is restricted to value types.\r\n\r\nProbably, this should be a custom struct with deconstruction support. `ValueTask` is not supposed to be in public APIs at this point (I agree with that. A custom struct is cleaner given the very high cleanliness requirements of the framework.).\r\n\r\nAs a side note, I see this (IMHO) design mistake a lot in the framework where people really wanted an option type but instead chose `bool TryGetX(out value)` or some other rather awkward pattern (such as two methods calls).\r\n\r\nMaybe .NET would benefit from an option type that is not restricted to value types. But since we don\u0027t have that we can give ADO.NET it\u0027s own fundamental option type.\r\n",
                                           "updatedAt":  "2019-09-02T13:24:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzE2NDM2Nw==",
                                           "createdAt":  "2019-09-02T14:18:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e ValueTask is not supposed to be in public APIs at this point\r\n\r\nHow do you mean? ValueTask is exposed in many public APIs (e.g. IAsyncDisposable.DisposeAsync, Stream.ReadAsync...). ",
                                           "updatedAt":  "2019-09-02T14:18:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzE2NTU4NA==",
                                           "createdAt":  "2019-09-02T14:22:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "There was resistance to using value tuples in public apis due to not having agreed naming guidance for them. I believe this was resolved by the design meetings a few months ago so it might be possible. I\u0027m fine with using a struct instead of a value tuple.",
                                           "updatedAt":  "2019-09-02T14:22:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzE3MTg5NQ==",
                                           "createdAt":  "2019-09-02T14:43:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Ah I see - I think there was some confusion between ValueTuple and ValueTask above.",
                                           "updatedAt":  "2019-09-02T14:43:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzE5MTAyOA==",
                                           "createdAt":  "2019-09-02T15:50:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Grauenwolf",
                                           "body":  "ValueTask is not supported by Visual Basic. Until that is addressed we should be hesitant about using it in public APIs.",
                                           "updatedAt":  "2019-09-02T15:50:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzE5MjU4MQ==",
                                           "createdAt":  "2019-09-02T15:56:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e ValueTask is not supported by Visual Basic.\r\n\r\nHow is it not supported?",
                                           "updatedAt":  "2019-09-02T15:56:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzIxNjUzOA==",
                                           "createdAt":  "2019-09-02T18:05:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Grauenwolf",
                                           "body":  "The docs just say no without going into details.\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.valuetask-1?view=netstandard-2.1",
                                           "updatedAt":  "2019-09-02T18:05:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzIxODE2MQ==",
                                           "createdAt":  "2019-09-02T18:17:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "\u003e ValueTask is not supposed to be in public APIs at this point\r\n\r\n=\u003e I meant value tuple.\r\n\r\nRegardless of whether it is allowed or not, I think it\u0027s wise most of the time to use a custom type. (This stance is for library code only, like .NET).",
                                           "updatedAt":  "2019-09-02T18:18:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzI3NjY1Mg==",
                                           "createdAt":  "2019-09-03T02:08:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e\u003e\u003e ValueTask is not supported by Visual Basic.\r\n\r\n\u003e\u003e How is it not supported?\r\n\r\n\u003e The docs just say no without going into details. https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.valuetask-1?view=netstandard-2.1\r\n\r\n@KathleenDollard, @jaredpar, what about `ValueTask`/`ValueTask\u003cT\u003e` isn\u0027t supported in Visual Basic?\r\n",
                                           "updatedAt":  "2019-09-03T02:08:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyODAwMDAyMQ==",
                                           "createdAt":  "2019-09-04T17:20:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "Visual Basic cannot define an async method which produces a `ValueTask / ValueTask\u003cT\u003e` but it can consume a `ValueTask / ValueTask\u003cT\u003e` using the `Await` operator.\r\n",
                                           "updatedAt":  "2019-09-04T17:21:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyODAwMzE0NA==",
                                           "createdAt":  "2019-09-04T17:29:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "VB didn’t get Task likes?",
                                           "updatedAt":  "2019-09-04T17:29:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyODAwNTI1NQ==",
                                           "createdAt":  "2019-09-04T17:35:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e VB didn’t get Task likes?\r\n\r\nCorrect. It is still limited to defining async methods that return `Task / Task\u003cT\u003e`. It can consume `ValueTask / ValueTask\u003cT\u003e`, or any other type that implements the awaiter pattern. \r\n\r\nhttps://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBsQDdhJiAligHwEkwAHAewRigAIBlAT1jjAFgAoEiq2x5sAHQAVABYI4EACa4AdgHNh0ANZQOABQCuwFLgDGNAMIpotAxxoWam7XpoBBKAxn6AYhucxc5GTQCyAChh7WiFlAEpgmlCoJXNLeLsAdwhcIJg4iwBRGUkaNw8vGQyaYusdfQcnV3ddT28/ACZAyIA1CBQNOGilCIcaNo6u5WKE5NSadPZ47Nz82sKOGcNjKCggA==",
                                           "updatedAt":  "2019-09-04T17:35:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyODAzMjUyMw==",
                                           "createdAt":  "2019-09-04T18:43:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Grauenwolf",
                                           "body":  "Do we need to ensure VB can be used to implement these interfaces/abstract classes?\n\nJonathan Allen\n619-933-8527\n\n________________________________\nFrom: Jared Parsons \u003cnotifications@github.com\u003e\nSent: Wednesday, September 4, 2019 1:36:26 PM\nTo: dotnet/corefx \u003ccorefx@noreply.github.com\u003e\nCc: Jonathan Allen \u003cgrauenwolf@gmail.com\u003e; Mention \u003cmention@noreply.github.com\u003e\nSubject: Re: [dotnet/corefx] Add ValueTask\u003cT\u003e returning async APIs to ADO.NET (#27682)\n\n\nVB didn’t get Task likes?\n\nCorrect. It is still limited to defining async methods that return Task / Task\u003cT\u003e. It can consume ValueTask / ValueTask\u003cT\u003e, or any other type that implements the awaiter pattern.\n\nhttps://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBsQDdhJiAligHwEkwAHAewRigAIBlAT1jjAFgAoEiq2x5sAHQAVABYI4EACa4AdgHNh0ANZQOABQCuwFLgDGNAMIpotAxxoWam7XpoBBKAxn6AYhucxc5GTQCyAChh7WiFlAEpgmlCoJXNLeLsAdwhcIJg4iwBRGUkaNw8vGQyaYusdfQcnV3ddT28/ACZAyIA1CBQNOGilCIcaNo6u5WKE5NSadPZ47Nz82sKOGcNjKCggA==\n\n—\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\u003chttps://github.com/dotnet/corefx/issues/27682?email_source=notifications\u0026email_token=ACRCUTMRMTTOYFUH6N7O7YLQH7WZVA5CNFSM4ETLMPM2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD54LRBY#issuecomment-528005255\u003e, or mute the thread\u003chttps://github.com/notifications/unsubscribe-auth/ACRCUTP65RC2X2J33RZ65WDQH7WZVANCNFSM4ETLMPMQ\u003e.\n",
                                           "updatedAt":  "2019-09-04T18:43:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyODAzOTcwNw==",
                                           "createdAt":  "2019-09-04T19:02:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "There is nothing preventing VB from implementing a member that has a `ValueTask` return type. VB just can\u0027t do it using the `Async` function style. If an `Async` style method was needed then a simple thunking approach can be used to put the logic in an `Async` style method and call that in a `ValueTask` returning method directly.\r\n",
                                           "updatedAt":  "2019-09-04T19:02:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyODA0NTc3MQ==",
                                           "createdAt":  "2019-09-04T19:19:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Grauenwolf",
                                           "body":  "Sounds reasonable to me. Not ideal, but how many database drivers are written in VB.\n\nJonathan Allen\n619-933-8527\n\n________________________________\nFrom: Jared Parsons \u003cnotifications@github.com\u003e\nSent: Wednesday, September 4, 2019 3:03:31 PM\nTo: dotnet/corefx \u003ccorefx@noreply.github.com\u003e\nCc: Jonathan Allen \u003cgrauenwolf@gmail.com\u003e; Mention \u003cmention@noreply.github.com\u003e\nSubject: Re: [dotnet/corefx] Add ValueTask\u003cT\u003e returning async APIs to ADO.NET (#27682)\n\n\nThere is nothing preventing VB from implementing a member that has a ValueTask return type. VB just can\u0027t do it using the Async function style. If an Async style method was needed then a simple thunking approach can be used to put the logic in an Async style method and call that in a ValueTask returning method directly.\n\n—\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\u003chttps://github.com/dotnet/corefx/issues/27682?email_source=notifications\u0026email_token=ACRCUTO7LSFO3PXMBUPD7WDQIABAHA5CNFSM4ETLMPM2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD54T6GY#issuecomment-528039707\u003e, or mute the thread\u003chttps://github.com/notifications/unsubscribe-auth/ACRCUTO4MCOXNNVCSRTU6XLQIABAHANCNFSM4ETLMPMQ\u003e.\n",
                                           "updatedAt":  "2019-09-04T19:19:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ymjpk",
                                           "createdAt":  "2024-12-23T20:11:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-23T20:11:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZaoBH",
                                           "createdAt":  "2025-01-06T20:44:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "This issue will now be closed since it had been marked `no-recent-activity` but received no further activity in the past 14 days. It is still possible to reopen or comment on the issue, but please note that the issue will be locked if it remains inactive for another 30 days.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-06T20:44:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZbZiZ",
                                           "createdAt":  "2025-01-06T23:20:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "I\u0027m not sure if we want this closed. It would be very useful to have ValueTask field value getters at least. We can make them provider specific if we need to but it would be preferable not to. The problem is naming. The name `GetFieldValueValueTaskAsync\u003cT\u003e` is clumsy and the best alternative I can come up with is `GetValueTask2Async\u003cT\u003e`",
                                           "updatedAt":  "2025-01-06T23:20:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZgXKf",
                                           "createdAt":  "2025-01-07T14:16:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Reopening to keep this on our radar... FWIW I think GetFieldValueAsync() is generally rarely needed, since it\u0027s mainly useful when CommandBehavior.SequentialAccess is specified (i.e. big rows being streamed); in the regular/default mode, the entire row is buffered anyway (and can be read in random order), so using the sync API (GetFieldValue) is perfectly fine.\n\nBut yeah, for sequential access mode we should indeed have a non-allocating API - which would ideally also improve the usability around nulls as well.",
                                           "updatedAt":  "2025-01-07T14:16:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZgzD0",
                                           "createdAt":  "2025-01-07T14:59:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "The knowledge you need to have to understand that using GetFieldValue is probably ok is quite high. Enabling users in async contexts to casually use `await GetFieldValue2Async` without exposing them to the current high costs of Task versions is desirable.",
                                           "updatedAt":  "2025-01-07T14:59:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZjEXK",
                                           "createdAt":  "2025-01-07T19:51:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Fair enough, though I wouldn\u0027t call the costs of Task allocations \"high\" for the typical application. In any case I agree this is a good thing to do.",
                                           "updatedAt":  "2025-01-07T19:51:33Z"
                                       }
                                   ],
                         "totalCount":  52
                     },
        "title":  "Add ValueTask\u003cT\u003e returning async APIs to ADO.NET",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/26085",
        "createdAt":  "2018-05-05T10:41:11Z",
        "number":  26085,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOB9zOVw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NMSAzulX",
                                            "createdAt":  "2018-05-05T12:02:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "yang-xiaodong",
                                            "createdAt":  "2018-05-05T12:36:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bgrainger",
                                            "createdAt":  "2018-05-05T13:40:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nsentinel",
                                            "createdAt":  "2019-04-18T14:49:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eglauko",
                                            "createdAt":  "2020-06-19T13:06:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bricelam",
                                            "createdAt":  "2020-06-23T17:52:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dittodhole",
                                            "createdAt":  "2021-10-11T16:34:32Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2021-08-09T13:17:37Z",
        "body":  "As part of PRs submitted by @liuhaoyang to add DiagnosticSource tracing support [to Npgsql](https://github.com/npgsql/npgsql/pull/1910) and [to MySqlConnector](https://github.com/mysql-net/MySqlConnector/pull/493), a conversation has started in https://github.com/npgsql/npgsql/pull/1910 about how this support should look like.\r\n\r\n[The DiagnosticSource docs](https://github.com/dotnet/corefx/blob/master/src/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md) set forth some clear guidelines and what to do and what not to do - have different listeners for different event categories (for efficient filtering), have short event name, etc. However, [as @bgrainger noted](https://github.com/npgsql/npgsql/pull/1910#issuecomment-386648692), looking at [the SqlClient implementation](https://github.com/dotnet/corefx/blob/20a54ede07347ac450fa3e203f4ffe6d589ee3eb/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlClientDiagnosticListenerExtensions.cs) doesn\u0027t seem to implement things in this way:\r\n\r\n* All SqlClient events are emitted under a single listener (SqlClientDiagnosticListener), rather than splitting them across different listeners for connection, command, transaction.\r\n* Event names are prefixed with `System.Data.SqlClient.` even though they\u0027re already scoped to the SqlClient listener, making long event names (the guidelines recommend \u003c 16 characters)\r\n* Event names are named Before/After rather than the recommended Start/Stop.\r\n\r\nThe first question is whether it makes sense for MySqlConnector and Npgsql to implement things differently than SqlClient, following the guidelines. This would mean less portable/coherent behavior across providers, but would be a better and more guidelines-conforming implementation.\r\n\r\nThe second question is what the backwards compatibility guarantees of DiagnosticSource listeners and event names are, and whether a change in SqlClient\u0027s DiagnosticSource implementation would make sense.\r\n\r\nNote also that [@bgrainger proposed](https://github.com/npgsql/npgsql/pull/1910#issuecomment-386429763) adding DiagnosticSource support by wrapping DbConnection/DbCommand/DbTransaction objects, rather than building in support into the drivers themselves. Apart from being truly pay-per-play, it would also allow getting events from providers which haven\u0027t implemented anything yet and may not do so. However, [a benchmark showed](https://github.com/npgsql/npgsql/pull/1910#issuecomment-386609661) that the overhead of DiagnosticsSource is extremely small when it isn\u0027t enabled (3.6ns per check), so we seem to be in agreement that it\u0027s worth building support into the provider rather than wrapping. It would be interesting to hear what you guys think.\r\n\r\nResources:\r\n* https://github.com/dotnet/runtime/blob/master/src/libraries/System.Diagnostics.DiagnosticSource/src/DiagnosticSourceUsersGuide.md",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLb7KCw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4Njc5NjQ3MQ==",
                                           "createdAt":  "2018-05-05T10:42:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "/cc @bgrainger @liuhaoyang @divega @ajcvickers",
                                           "updatedAt":  "2018-05-05T10:42:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4Njc5NzI1OQ==",
                                           "createdAt":  "2018-05-05T10:58:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAWKSWQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NMSAzulX",
                                                                               "createdAt":  "2018-05-05T12:02:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "liuhaoyang",
                                           "body":  "FYI @yuleyule66",
                                           "updatedAt":  "2018-05-05T10:58:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NjgxNTUyMw==",
                                           "createdAt":  "2018-05-05T16:01:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "divega",
                                           "body":  "Thanks for the heads up @roji.\r\n\r\nWe have talked about the possible benefits of having a standardized pattern for event names and categories across ADO.NET providers. Ideally a diagnostics tool listening would be able to identify at least the common events without having knowledge of specific providers. We also talked about the possibility of adding helpers in System.Data.Common to make this easier. \r\n\r\nSince you are doing/discussing this now, I think it would be great if you could come up with a good design that helps those goals, regardless of whether we add helpers in System.Data.Common now or whether you have a copy somewhere else. \r\n\r\nPersonally I don\u0027t think you need to align what you do with the diagnostics code in SqlClient for .NET Core if there are problems with it and if starting from scratch helps you come up with something better. Hopefully we can update SqlClient latter to align with whatever you come up with.\r\n\r\nBesides @ajcvickers, I abelieve @anpete, @avanderhoorn, @vancem and others here can help with feedback. \r\n",
                                           "updatedAt":  "2018-05-05T16:01:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4Njg0MjE1Ng==",
                                           "createdAt":  "2018-05-05T23:29:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bgrainger",
                                           "body":  "I started drafting some thoughts/proposal about ADO.NET DiagnosticSource events yesterday; sharing the document here in case it\u0027s useful: https://docs.google.com/document/d/1SKrW3uKQk8l9UOkGmaW_TjKk0qCm_lpZm5p5u69Zp4E/edit?usp=sharing\r\n\r\n(Google Docs for now, happy to move to Markdown if people think it\u0027s useful. DM me if you want editing rights.)",
                                           "updatedAt":  "2018-05-05T23:29:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4Njg4ODUzNw==",
                                           "createdAt":  "2018-05-06T15:41:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@bgrainger have made some comments, I think it may be a good idea to move the conversation here, to make it more accessible etc.",
                                           "updatedAt":  "2018-05-06T15:41:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM4NzIxODAzMQ==",
                                           "createdAt":  "2018-05-07T21:50:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAWoSjw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bgrainger",
                                                                               "createdAt":  "2018-05-07T22:18:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "yang-xiaodong",
                                                                               "createdAt":  "2018-05-08T03:43:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "divega",
                                                                               "createdAt":  "2018-05-08T06:18:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2018-05-16T16:08:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "vancem",
                                           "body":  "I would recommend that you create an markdown file for the spec in the ngpsql repo and submit it as a pull request (and put a link to it here).  It allows us to use line level pull request to give feedback, and it becomes a permanent document afterward (write it as if you were explaining how to use it to new users). \r\n\r\nAs @divega indicated, it is better to follow the guidelines than to try to be consistent with DiagnosticSources that predate the guidelines.  Realistically we will always have code that is not following best practices, but the less of it we have the better.   It still is reasonably early days.  \r\n\r\nNote that you have a choice on whether to pass the DbTransation and DbConnection as the object, or to pass some numeric ID.    The former works great IN the process, but the later is more useful OUTSIDE the process.   Generally it is probably better to send an ID, (and then you can add events to tell more about that ID as needed).   Also sending real objects can lead to abuse where code modifies the object during the event callback (bad, but we can\u0027t prevent it).  Using IDs makes this impossible.   \r\n\r\nI do believe you want to work with Activities.  They are the way of tracking intervals of time (and more importantly causality).  Ideally you would not need a OperationID in your event because Activities already do this.   (some redundancy is OK, especially if you have native code where activity tracking may not be perfect).  \r\n\r\n@brianrob \r\n\r\nWe are also updating the DiagnosticSource guidance see https://github.com/dotnet/corefx/pull/29552.",
                                           "updatedAt":  "2018-05-07T21:50:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NzQ3ODI4Mw==",
                                           "createdAt":  "2021-01-26T11:20:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Relevant:\r\n* https://github.com/open-telemetry/opentelemetry-dotnet/blob/master/src/OpenTelemetry.Instrumentation.SqlClient/README.md\r\n* https://github.com/open-telemetry/opentelemetry-specification/blob/master/specification/trace/semantic_conventions/database.md",
                                           "updatedAt":  "2021-01-26T11:23:24Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "DiagnosticSource listener/event names for SqlClient and other ADO providers",
        "labels":  [
                       "design-discussion",
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/26511",
        "createdAt":  "2018-06-15T17:15:27Z",
        "number":  26511,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBJ_og==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "benaadams",
                                            "createdAt":  "2018-06-15T17:49:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nil4",
                                            "createdAt":  "2018-06-15T18:36:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Brar",
                                            "createdAt":  "2018-06-15T18:48:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jnm2",
                                            "createdAt":  "2018-06-16T13:46:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bgribaudo",
                                            "createdAt":  "2018-08-17T19:08:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bricelam",
                                            "createdAt":  "2018-11-27T19:13:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2019-01-17T08:51:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TwentyFourMinutes",
                                            "createdAt":  "2020-07-29T13:23:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PoseidonEnergy",
                                            "createdAt":  "2022-07-19T18:29:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SoftStoneDevelop",
                                            "createdAt":  "2023-02-19T01:28:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Jure-BB",
                                            "createdAt":  "2024-07-26T17:04:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "edwardneal",
                                            "createdAt":  "2024-11-14T21:27:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rampaa",
                                            "createdAt":  "2025-04-13T17:36:57Z"
                                        }
                                    ],
                          "totalCount":  13
                      },
        "updatedAt":  "2024-12-24T09:11:26Z",
        "body":  "The DbCommand API currently has a non-generic `ExecuteScalar()` which returns an object. To modernize the API and promote better performing code, we can add `DbCommand.ExecuteScalar\u003cT\u003e()`. The default implementation would simply call `ExecuteReader()` and call `GetFieldValue\u003cT\u003e()`, providing a default implementation that would work on all providers.\r\n\r\nThe idea is to collect ideas for improving .NET data access APIs, not necessary to implement right away.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmKPdpg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NzcyMjIwNg==",
                                           "createdAt":  "2018-06-15T19:36:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAYBIeA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2018-06-16T14:20:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Brar",
                                           "body":  "When drafting an initial implementation for this i recognized that in cases where `T` is a value type, we don\u0027t have a way to signal that the query didn\u0027t return a value.\r\n\r\nFor `DbCommand.ExecuteScalar()` we currently have three alternatives to return:\r\n\r\n1. An instance of the actual object if we got one from the database\r\n2. `DBNull.Value` if the database returned `NULL`\r\n3. `null` if the database didn\u0027t even return a row\r\n\r\nFor `DbCommand.ExecuteScalar\u003cT\u003e()` this would be:\r\n\r\n1. An instance of the actual object if we got one from the database\r\n~~2. `DBNull.Value` if the database returned `NULL`~~ It can\u0027t be `DBNull.Value` as it wouldn\u0027t be compatible with `T`\r\n3. `default(T)` if the database didn\u0027t even return a row\r\n\r\nIn case of the 3rd option there is no way to tell the difference between `default(T)` and a perfectly valid value that was returned from the database.\r\n\r\nWe might need something like `bool DbCommand.TryExecuteScalar\u003cT\u003e(out T value)` to differentiate between \u0027no row was returned\u0027 and \u0027a row containing `NULL`was returned\u0027.\r\n\r\n",
                                           "updatedAt":  "2018-06-27T16:22:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NzcyNDQwMA==",
                                           "createdAt":  "2018-06-15T19:47:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Brar",
                                           "body":  "...and in case we want to provide an async API the next problem would be that async methods cannot have \u0027out\u0027 parameters.",
                                           "updatedAt":  "2018-06-15T19:47:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NzczMjEwNQ==",
                                           "createdAt":  "2018-06-15T20:22:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Agree that returning `default(T)` if no row was returned isn\u0027t a viable option. An alternative to `TryExecuteScalar` which is cumbersome would be to throw an exception; as a general rule users are aware of the query they are executing (and whether it returns a row or not).",
                                           "updatedAt":  "2018-06-15T20:25:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NzczMzk1Mw==",
                                           "createdAt":  "2018-06-15T20:31:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Brar",
                                           "body":  "\u003e An alternative to `TryExecuteScalar` which is cumbersome would be to throw an exception\r\n\r\nI think this would be the way to go.\r\nActually also for option 2 as `DbNull.Value` isn\u0027t compatible with `T`",
                                           "updatedAt":  "2018-06-15T20:31:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Nzc3NTgxNQ==",
                                           "createdAt":  "2018-06-16T01:09:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAYBG9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2018-06-16T13:47:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "divega",
                                           "body":  "I think the bool-Try pattern has become less cumbersome since we are now able to declare the output variable inline. My vote would be for having both Try and non-Try versions.",
                                           "updatedAt":  "2018-06-16T01:09:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MDYyMjEyNA==",
                                           "createdAt":  "2019-02-05T12:35:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAizohw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "divega",
                                                                               "createdAt":  "2019-02-06T01:54:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "@divega @ajcvickers this issue is very similar to the discussions we\u0027ve been having about an alternative to `DbDataReader.GetFieldValue\u003cT\u003e()`. If https://github.com/dotnet/csharplang/issues/2194 is done, then we can have a `T? ExecuteNullableScalar\u003cT\u003e()` alongside a `T ExecuteScalar\u003cT\u003e()` which throws.",
                                           "updatedAt":  "2019-02-05T12:35:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NzM2MjMxOQ==",
                                           "createdAt":  "2019-02-26T09:23:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "`(bool success, T value) = ExecuteScalar\u003cT\u003e()` ?",
                                           "updatedAt":  "2019-02-26T09:23:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NzM4NzQ2Mw==",
                                           "createdAt":  "2019-02-26T10:36:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@Wraith2 that\u0027s possible although pretty clunky to use, e.g. how to test if a value was returned and then use it... It seems better to have a `bool TryExecuteScalar\u003cT\u003e(out T result)`, which could be used as follows:\r\n\r\n```c#\r\nif (cmd.TryExecuteScalar(out var result)) {\r\n    // Do something with result\r\n}\r\n```\r\n\r\nHowever, the idea is to hold off a bit until the status of https://github.com/dotnet/csharplang/issues/2194 becomes clearer - if that issue makes it through we wouldn\u0027t really need these tricks. This also seems pretty non-urgent, as we\u0027re discussing what\u0027s basically a sugar method.",
                                           "updatedAt":  "2019-02-26T10:36:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5Njk1MjU1MA==",
                                           "createdAt":  "2019-05-29T14:08:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Note conversation happening in https://github.com/npgsql/npgsql/pull/1997#issuecomment-496926658",
                                           "updatedAt":  "2019-05-29T14:08:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5Njk5MTg0MA==",
                                           "createdAt":  "2019-05-29T15:40:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "\u003e * An instance of the actual object if we got one from the database\r\n\u003e * `DBNull.Value` if the database returned `NULL`\r\n\u003e * `null` if the database didn\u0027t even return a row\r\n\r\nAren\u0027t cases 2 and 3 really the same thing if you\u0027re expecting an instance of T, which is that they\u0027re not a T so whether it\u0027s null or DBNull.Value it should throw. If you want to use the tristate capability just use the non-generic overload. If users want performance they can pay the development time price for ensuring it is possible.\r\n\r\n",
                                           "updatedAt":  "2019-05-29T15:40:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzA3MTYxNg==",
                                           "createdAt":  "2019-05-29T19:11:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Returning `DBNull.Value` isn\u0027t possible because the method is generic and returns T.\r\n\r\nAside from that, I\u0027m not sure I see a conceptual reason for restricting the API from returning null. There are a lot of APIs out there which return a value or null (e.g. Dictionary\u0027s indexer); null really is an OK value to have in your database (or dictionary).\r\n\r\nIf we we get to a point where we tell people to use a non-generic API just to know whether there\u0027s a null, then IMHO our design isn\u0027t very good. Again, asking to know about nulls seems like a basic thing, and forcing people to go through a boxing, non-generic interface doesn\u0027t seem right.\r\n\r\nOnce again, if https://github.com/dotnet/csharplang/issues/2194 gets implemented, then we can simply return a T? and be done with it...\r\n\r\n\u003e If users want performance they can pay the development time price for ensuring it is possible.\r\n\r\nWhat are you referring to? Not using ExecuteScalar\u003cT\u003e and using DbDataReader instead?",
                                           "updatedAt":  "2019-05-29T19:11:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzA4NTc2Nw==",
                                           "createdAt":  "2019-05-29T19:55:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "Success is getting an instance of whatever T is, right? So what\u0027s failure? what does it mean to get a false back from the TryExecuteScalar\u003cT\u003e or whatever we end up with? \r\n\r\nIt\u0027s one of two things as enumerated above, either the query didn\u0027t return a result or it returned a database null result.  If you expect either of those things to be able to happen (and to be able to cope with them) you probably need to know which one it is and in that case you have to typecheck and null check which means any fast path we introduce is irrelevant to this case, it\u0027ll box and cast anyway.\r\n\r\nIf you don\u0027t expect either of those no-data cases to happen then you\u0027re always expecting to get back an instance of the type and in that case you can just call the new version and get a fast response or an exception if something violates the rules of \"will not return DBNull and will return a row\"\r\n\r\nIf you\u0027re a calling database providers you should know your result shape and rules, and if you do you can go faster using the new generic version. If you don\u0027t then you continue along the slow path we already have.",
                                           "updatedAt":  "2019-05-29T19:55:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzEwNjcyMw==",
                                           "createdAt":  "2019-05-29T20:58:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOApktig==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Wraith2",
                                                                               "createdAt":  "2019-05-29T21:27:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Brar",
                                           "body":  "The way I see It, the classic non generic API will stay around, so it can be used to fill in gaps of the generic API.\r\nThe new generic API is mostly about performance because it can\u0027t do much more than help you to avoid boxing.\r\nI envision three methods:\r\n1. the classic `object DbCommand.ExecuteScalar()`\r\n2. the new `T DbCommand.ExecuteScalar\u003cT\u003e()`\r\n3. the new `bool DbCommand.TryExecuteScalar\u003cT\u003e(out T value)`\r\n\r\nThey all have their place and serve different purposes:\r\n1. Use the classic API if you have no idea what you\u0027re going to get. It might return `null` if the query didn\u0027t return a row, it might return `DbNull.Value` if the query returned `NULL` and it might return an actual value. There\u0027s no way to avoid boxing or even return something else than `object` if you want to return `null`, `DbNull.Value` and a value type in the same field anyways.\r\n2. Use the simple generic `ExecuteScalar` method in cases where you know exactly that you will get a value that is not `DbNull.Value`. This method will throw an exception if your assertion is wrong (no row or `NULL` case) and this is probably what you\u0027d want.\r\n3. Use the `TryExecuteScalar` method if you expect a valid value from the database which might include `DbNull.Value`. You can still avoid boxing of value types and you also get to know if the query returned `NULL`. This method will still throw an exception if the query didn\u0027t return a row as this probably isn\u0027t what you\u0027d expect from a query anyways.",
                                           "updatedAt":  "2019-05-29T20:58:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzEwOTQyOQ==",
                                           "createdAt":  "2019-05-29T21:07:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Brar",
                                           "body":  "Also:\r\nBoth  new generic methods (2. and 3.) would obviously also throw on query results that are type-incompatible to `T`.",
                                           "updatedAt":  "2019-05-29T21:07:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzE1MDE3MQ==",
                                           "createdAt":  "2019-05-29T23:57:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "First, I\u0027m not necessarily completely against TryExecuteScalar(). My problem is that it\u0027s needlessly clunky when null values are possible, and that it gives no meaning to the Try* pattern. I also don\u0027t really understand the objection to a generic ExecuteScalar which would return `T?` (aside from [this current limitation](https://github.com/dotnet/csharplang/issues/2194) in C# 8 nullability, which should not be a deciding factor. Can you please explain why TryExecuteScalar() seems better to you?\r\n\r\n@Wraith2:\r\n\r\n\u003e So what\u0027s failure? what does it mean to get a false back from the TryExecuteScalar or whatever we end up with?\r\n\r\nThe fact that there isn\u0027t an obvious meaning for \"failure\" doesn\u0027t mean it\u0027s a free slot we can use to represent null. \r\n\r\n\u003e  If you expect either of those things to be able to happen (and to be able to cope with them) you probably need to know which one it is and in that case you have to typecheck and null check which means any fast path we introduce is irrelevant to this case, it\u0027ll box and cast anyway.\r\n\r\nI\u0027m not sure what you mean here - why does a null check mean something boxes or that a fast path is irrelevant? For example, let\u0027s say I read an int column that can contain nulls, why not receive an `int?` and check that for nullability? No boxing, very efficient - I don\u0027t see the issue...\r\n\r\n\u003e If you don\u0027t expect either of those no-data cases to happen [...]\r\n\r\nNull is not a no-data scenario - it\u0027s a valid value to have in your database and it should be easy to read and to check for it.\r\n\r\n\u003e If you\u0027re a calling database providers you should know your result shape and rules, and if you do you can go faster using the new generic version. If you don\u0027t then you continue along the slow path we already have.\r\n\r\nI again don\u0027t understand the point about result shape and rules. This is about reading nullable columns; the result shape *is* nullable. Nothing about that should mean that anyone needs to go slower.",
                                           "updatedAt":  "2019-05-29T23:57:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzE1MDcxNg==",
                                           "createdAt":  "2019-05-30T00:00:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@Brar I agree with most of what you say. Specifically, if you don\u0027t know the *type* of expected data (as opposed to its *nullability*), then you should be using the non-generic API. The same holds for DbDataReader, where you would call the non-generic `GetValue()` and not generic `GetFieldValue\u003cT\u003e()`.\r\n\r\nAs I wrote above, the only point where I have trouble is with TryExecuteScalar vs. ExecuteScalar that can return `T?`. I even agree that there\u0027s probably value in a version that throws on null, for cases where the user knows there should never be one.\r\n\r\n\u003e  Both new generic methods (2. and 3.) would obviously also throw on query results that are type-incompatible to T.\r\n\r\nAgreed.",
                                           "updatedAt":  "2019-05-30T00:00:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzE5NzMzMQ==",
                                           "createdAt":  "2019-05-30T04:24:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Brar",
                                           "body":  "\u003e I also don\u0027t really understand the objection to a generic ExecuteScalar which would return T?\r\n\r\nThere\u0027s no objection on my part aside from [this current limitation](https://github.com/dotnet/csharplang/issues/2194) in C# 8 nullability, which has to be a deciding factor unless we know for sure that the feature will come.",
                                           "updatedAt":  "2019-05-30T04:24:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzI1MzYyOQ==",
                                           "createdAt":  "2019-05-30T08:40:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e There\u0027s no objection on my part aside from this current limitation in C# 8 nullability, which has to be a deciding factor unless we know for sure that the feature will come.\r\n\r\nOK, thanks.\r\n\r\nIn that case, IMHO it makes sense to wait a bit and see how things develop on that side. At the end of the day, `ExecuteScalar\u003cT\u003e()` (and `TryExecuteScalar\u003cT\u003e()`) are only sugar - whatever they do can always be done by calling `ExecuteReader()` and `GetFieldValue\u003cT\u003e()`. This means it isn\u0027t urgent to figure this out right now - we can do so later when the language nullability picture clarifies...",
                                           "updatedAt":  "2019-05-30T08:47:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzMzODUxOA==",
                                           "createdAt":  "2019-05-30T13:56:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kronic",
                                           "body":  "You can add more methods\r\n```csharp\r\nValueTask\u003cT\u003e DbCommand.ExecuteScalarAsync\u003cT\u003e();\r\nValueTask\u003cT\u003e DbCommand.ExecuteScalarAsync\u003cT\u003e(CancellationToken);\r\n```",
                                           "updatedAt":  "2019-05-30T13:57:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzQyMDg5OQ==",
                                           "createdAt":  "2019-05-30T17:51:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@kronic at the moment we\u0027re discussing the general shape of the API - async version(s) would definitely get added once we stabilize. BTW I\u0027m not sure this is a good candidate for returning ValueTask as opposed to Task (pretty much always performs I/O, so never returns synchronously).",
                                           "updatedAt":  "2019-05-30T17:51:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzQyNjEyNQ==",
                                           "createdAt":  "2019-05-30T18:05:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kronic",
                                           "body":  "\u003e @kronic at the moment we\u0027re discussing the general shape of the API - async version(s) would definitely get added once we stabilize. BTW I\u0027m not sure this is a good candidate for returning ValueTask as opposed to Task (pretty much always performs I/O, so never returns synchronously).\r\n\r\n@roji This is wrong for example for Sqlite.",
                                           "updatedAt":  "2019-05-30T18:06:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzQ0MDkzMQ==",
                                           "createdAt":  "2019-05-30T18:45:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "SQLite us definitely an outlier here - almost all databases involve some sort of networking I/O; according to this logic every single method on the ADO.NET API would return ValueTask just so that it can be used with SQLite.\r\n\r\nThé claim can also be made that sqlite will still typically do I/O to complete the call, and so the overhead of Task is likely to be quite negligible.\r\n\r\nBut nothing is closed for discussion - in any case it seems premature to think about Task vs. ValueTask before having an agreed-upon API shape.",
                                           "updatedAt":  "2019-05-30T18:45:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzQ3MTQ2Mw==",
                                           "createdAt":  "2019-05-30T20:20:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bgrainger",
                                           "body":  "SQLite\u0027s lack of async I/O has always felt like a bug, not a feature, to me. Oracle\u0027s MySQL Connector/NET also [uses 100% synchronous I/O](https://bugs.mysql.com/bug.php?id=70111) but I don\u0027t think we should tailor the ADO.NET API to those providers\u0027 inability to perform async I/O.\r\n\r\n(I realise that the engineering effort required to support async I/O in SQLite and Connector/NET is very large and so they may both remain synchronous-only for a very long time, but it seems to me that the API should design for the standard/ideal case.)",
                                           "updatedAt":  "2019-05-30T20:20:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ5NzY5NjY4Mw==",
                                           "createdAt":  "2019-05-31T12:49:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@bgrainger I agree.\r\n\r\nFWIW for Sqlite doing async there would mean plumbing that through native, which indeed seems like a lot of effort/complexity with not that much necessary gain. Oracle\u0027s driver really has no excuse.",
                                           "updatedAt":  "2019-05-31T12:49:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Yo92m",
                                           "createdAt":  "2024-12-24T09:11:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Let\u0027s keep this open, especially given that the NRT annotations for ExecuteScalar make life a bit more difficult.",
                                           "updatedAt":  "2024-12-24T09:11:14Z"
                                       }
                                   ],
                         "totalCount":  25
                     },
        "title":  "Add generic DbCommand.ExecuteScalar\u003cT\u003e()",
        "labels":  [
                       "api-suggestion",
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/26728",
        "createdAt":  "2018-07-09T08:49:03Z",
        "number":  26728,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-04T12:12:09Z",
        "body":  "See https://github.com/dotnet/corert/issues/6065#issuecomment-403086890:\r\n\r\n`DataSet.WriteXml` will serialize a column such that `System.Guid` is reported as living in the `System.Private.CoreLib` assembly. This assembly only exists on CoreRT/CoreCLR (even CoreCLR, it depends on which version you\u0027re looking at). This assembly doesn\u0027t exist in the desktop CLR, for example. This makes the serialized `DataSet` not deserializable on a different version of the runtime.\r\n\r\nShould the serialization respect the `TypeForwardedFrom` attribute on `System.Guid` (that says the type used to live in `mscorlib`)? The deserialization aspect would be covered thanks to the `mscorlib` façade that ships with our runtimes and has the appropriate type forwards.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeWpZUA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MTk3NTc0Mw==",
                                           "createdAt":  "2020-02-04T15:52:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA-IfOA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "my-dev-92",
                                                                               "createdAt":  "2020-03-14T13:47:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kamal-asif",
                                           "body":  "Is there any workaround to read such XML back into DataSet in .net 4.7.1 where System.Private.CoreLib is missing? Alternatively any hack during the serialization to skip that assembly part for GUID?\r\n\r\n@MichalStrehovsky ",
                                           "updatedAt":  "2020-02-04T16:01:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODMxNDE2Mg==",
                                           "createdAt":  "2020-06-23T17:43:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@MichalStrehovsky Is this issue still relevant?",
                                           "updatedAt":  "2020-06-23T17:43:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODMyNTk3Ng==",
                                           "createdAt":  "2020-06-23T18:03:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalStrehovsky",
                                           "body":  "\u003e @MichalStrehovsky Is this issue still relevant?\r\n\r\nThe framework team moves types between assemblies for various reasons on each release and uses TypeForwardedFromAttribute for serializer\u0027s sake.\r\n\r\nI don\u0027t know much about DataSet or the XML writing functionality in it, but if it\u0027s like a serializer that is supposed to work across versions of .NET, I think it\u0027s relevant.\r\n\r\nThis was hit by a customer. I just filed it.",
                                           "updatedAt":  "2020-06-23T18:03:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pu47R",
                                           "createdAt":  "2023-10-21T19:19:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stelth240",
                                           "body":  "I am running into an issue related to this and was wondering what the status is for this. I am using the AMO .Net Core client library to create an Analysis Services Data Source View programmatically. The Data Source View is created using a DataSet schema, which is filled using the OleDbAdapter.FillSchema method.\r\n\r\nThis stores guid columns using the System.Private.CoreLib assembly rather than mscorlib, which is what SQL Server is expecting. This throws the \"Column requires a valid DataType\" exception when deserializing the schema. I may be able to loop through the columns and manually change the assembly reference, but I was checking if there is a more elegant solution available.\r\n\r\nHere is the stack trace I am receiving when trying to script out the Data Source View in SQL Server Management Studio:\r\n\r\n===================================\r\n\r\nDeserialization failed: Column requires a valid DataType. (Microsoft.AnalysisServices.Core)\r\n\r\n------------------------------\r\nProgram Location:\r\n\r\n   at Microsoft.AnalysisServices.DesignXmlReader.ReadRoot(Type type)\r\n   at Microsoft.AnalysisServices.DesignXmlReader.DeserializeComponent(IDesignerSerializationManager manager, XmlReader reader, Type root)\r\n   at Microsoft.AnalysisServices.JaXmlSerializer.DeserializeComponent(IDesignerSerializationManager manager, XmlReader reader, Type root)\r\n   at Microsoft.AnalysisServices.Core.AnalysisServicesClient.Discover(IMajorObject obj, ObjectExpansion expansion, JaXmlSerializer serializer)\r\n   at Microsoft.AnalysisServices.Core.Server.Refresh(IMajorObject obj, ObjectExpansion expansion)\r\n   at Microsoft.AnalysisServices.Core.Server.SendRefresh(IMajorObject obj, ObjectExpansion expansion)\r\n   at Microsoft.AnalysisServices.MajorObject.Refresh()\r\n   at Microsoft.AnalysisServices.MajorObject.get_Body()\r\n   at Microsoft.AnalysisServices.MajorObject.get_Description()\r\n\r\n===================================\r\n\r\nColumn requires a valid DataType. (System.Data)\r\n\r\n------------------------------\r\nProgram Location:\r\n\r\n   at System.Data.DataColumn.set_DataType(Type value)\r\n   at System.Data.XSDSchema.SetProperties(Object instance, XmlAttribute[] attrs)\r\n   at System.Data.XSDSchema.HandleElementColumn(XmlSchemaElement elem, DataTable table, Boolean isBase)\r\n   at System.Data.XSDSchema.HandleParticle(XmlSchemaParticle pt, DataTable table, ArrayList tableChildren, Boolean isBase)\r\n   at System.Data.XSDSchema.HandleComplexType(XmlSchemaComplexType ct, DataTable table, ArrayList tableChildren, Boolean isNillable)\r\n   at System.Data.XSDSchema.InstantiateTable(XmlSchemaElement node, XmlSchemaComplexType typeNode, Boolean isRef)\r\n   at System.Data.XSDSchema.HandleTable(XmlSchemaElement node)\r\n   at System.Data.XSDSchema.HandleDataSet(XmlSchemaElement node, Boolean isNewDataSet)\r\n   at System.Data.XSDSchema.LoadSchema(XmlSchemaSet schemaSet, DataSet ds)\r\n   at System.Data.DataSet.ReadXSDSchema(XmlReader reader, Boolean denyResolving)\r\n   at System.Data.DataSet.ReadXml(XmlReader reader, Boolean denyResolving)\r\n   at Microsoft.AnalysisServices.DesignXmlReader.ReadSpecialContent(Object obj)\r\n   at Microsoft.AnalysisServices.DesignXmlReader.ReadObjectContent(Object value, Type type, TypeMapping mapping)\r\n   at Microsoft.AnalysisServices.DesignXmlReader.ReadClassObject(Type type, MemberMapping mm)\r\n   at Microsoft.AnalysisServices.DesignXmlReader.ReadObject(Type proposedType, MemberMapping mm)\r\n   at Microsoft.AnalysisServices.DesignXmlReader.ReadStructContent(Object obj, StructMapping mapping)\r\n   at Microsoft.AnalysisServices.DesignXmlReader.ReadObjectContent(Object value, Type type, TypeMapping mapping)\r\n   at Microsoft.AnalysisServices.DesignXmlReader.ReadClassObject(Type type, MemberMapping mm)\r\n   at Microsoft.AnalysisServices.DesignXmlReader.ReadObject(Type proposedType, MemberMapping mm)\r\n   at Microsoft.AnalysisServices.DesignXmlReader.ReadRoot(Type type)",
                                           "updatedAt":  "2023-10-21T19:19:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55allQ",
                                           "createdAt":  "2024-04-04T12:12:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tho-scheller",
                                           "body":  "Just in case anyone is still having this issue, here is a hack to work around it. The following class overrides XmlTextWriter and can be used when calling DataSet.WriteXml. It simply removes the assembly name and everything else except the actual type name System.Guid, which allows both older any newer .Net versions to deserialize the XML again.\r\n\r\n```\r\nclass XmlWriterWithFixedGuidRef : XmlTextWriter\r\n{\r\n\tpublic XmlWriterWithFixedGuidRef(Stream w, Encoding encoding) : base(w, encoding) { }\r\n\tpublic XmlWriterWithFixedGuidRef(TextWriter w) : base(w) { }\r\n\tpublic XmlWriterWithFixedGuidRef(string filename, Encoding encoding) : base(filename, encoding) { }\r\n\r\n\tpublic override void WriteString(string text)\r\n\t{\r\n\t\tbase.WriteString(text.StartsWith(\"System.Guid,\") ? \"System.Guid\" : text);\r\n\t}\r\n}\r\n```",
                                           "updatedAt":  "2024-04-04T12:12:08Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Should DataSet.WriteXml respect TypeForwardedFromAttribute?",
        "labels":  [
                       "bug",
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/28135",
        "createdAt":  "2018-12-11T17:09:32Z",
        "number":  28135,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOB2EJZw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "szehetner",
                                            "createdAt":  "2018-12-13T13:15:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2018-12-13T20:39:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bgrainger",
                                            "createdAt":  "2019-02-01T04:31:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NickCraver",
                                            "createdAt":  "2019-03-21T18:29:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xsoheilalizadeh",
                                            "createdAt":  "2020-01-10T19:34:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2020-09-30T06:38:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aersam",
                                            "createdAt":  "2021-08-12T08:45:15Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2021-08-12T09:01:28Z",
        "body":  "https://github.com/dotnet/corefxlab/issues/2368 discusses directions and goals for future UTF-8 string support. Apart from a new `UTF8String` type (https://github.com/dotnet/corefx/issues/30503) which would obviate decoding when binary data is already in UTF8, there is also a first discussion on a perf-oriented UTF8 slice directly over binary data:\r\n\r\n\u003e We find ourselves with two conflicting goals. The first goal is performance above all else: fill a buffer with inbound network data, reinterpret_cast it as UTF-8 data, and operate on it. Network protocol stacks are the big consumer here. This can be achieved by providing UTF-8 manipulation methods which operate directly on spans, which has the added benefit of allowing the consumer to remain in full control of all memory allocations.\r\n\u003e [...]\r\n\u003e While Utf8String is useful for representing incoming UTF-8 data without the need for transcoding, it does still incur the cost of an allocation per instance. As part of this work we may want to consider making StringSlice or Utf8StringSlice first-class types in the framework. One could imagine these types as being thin wrappers (perhaps aliases?) for ReadOnlyMemory and ReadOnlyMemory along with most (but not all) of the instance methods on String and Utf8String.\r\n\r\nSomething like this could be exposed on DbDataReader, returning a string-like object that directly references the ADO.NET provider\u0027s internal buffer; this would allow users to do zero-allocation access on incoming strings from the database, with a potentially big perf impact.\r\n\r\nThe big issue is of course the lifespan of the returned slice object. Unless [`CommandBehavior.Sequential`](https://docs.microsoft.com/en-us/dotnet/api/system.data.commandbehavior?view=netframework-4.7.2) is specified, providers are already expected to buffer entire rows into memory. The lifetime of a string slice would therefore be until the next time `DbDataReader.Read()` is called, at which point the data in the buffer is potentially changed. This is somewhat dangerous and requires understanding from users, so this would definitely be an advanced, high-perf API only.\r\n\r\nNote the similarity with `DbDataReader.GetStream()` and `DbDataReader.GetTextReader()`, which are used to stream (large) binary and text data from the database. Although not formally specified, it is expected for the returned `Stream`/`TextReader` to be disposed as soon as the next row is read. It could be interesting to think of some sort of \"invalidatable slice\", where calling `DbDataReader.Read()` would invalidate any string slice returned on the previous row.\r\n\r\nSuch automatically-invalidated slices could be of interest as a safety measure anywhere where we\u0027re considering exposing slices to end users, where underlying data could change.\r\n\r\n/cc @GrabYourPitchforks @divega @ajcvickers ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONX5KdA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41fkp0",
                                           "createdAt":  "2021-08-12T09:01:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "See additional comments on lifecycle/async: https://github.com/dotnet/runtime/issues/57262#issuecomment-897468775\r\n",
                                           "updatedAt":  "2021-08-12T09:01:21Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "ADO.NET API for reading string data directly from the provider\u0027s internal buffer",
        "labels":  [
                       "enhancement",
                       "api-suggestion",
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30677",
        "createdAt":  "2019-08-26T15:07:58Z",
        "number":  30677,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDOWpg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mikependon",
                                            "createdAt":  "2020-02-12T14:52:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gcuatem",
                                            "createdAt":  "2020-02-19T00:02:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "leszekbochenek",
                                            "createdAt":  "2020-06-16T11:28:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chgl",
                                            "createdAt":  "2022-03-31T16:05:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ericoldre",
                                            "createdAt":  "2023-10-24T13:10:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "julealgon",
                                            "createdAt":  "2024-06-21T12:18:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2025-03-21T02:56:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rbgarcia",
                                            "createdAt":  "2025-06-03T19:02:27Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2024-06-21T08:40:46Z",
        "body":  "With more and more databases supporting JSON types natively, we should add Json to the DbType enum.\r\n\r\n/cc @divega @ajcvickers ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOghMcGg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6CCO87",
                                           "createdAt":  "2024-06-20T21:56:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "saurabh500",
                                           "body":  "@roji I am trying to understand how would a driver in ADO.net which already has support for JSON, work when DbType.Json is added? \r\nExisting drivers likely, already the CLR native type to some DbType \r\nWhat would be the guidance or path forward for them ? ",
                                           "updatedAt":  "2024-06-20T21:56:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CExwa",
                                           "createdAt":  "2024-06-21T08:40:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "On the write side, for Npgsql for example which already has NpgslqDbType.Jsonb (and NpgsqlDbType.Json), DbType.Json would simply be supported as an additional, provider-agnostic way to specify that a parameter should be sent as the JSON type (probably jsonb).\n\n\u003e Existing drivers likely, already the CLR native type to some DbType\n\nHere I\u0027m assuming you\u0027re referring to what happens when the user **reads** DbType after having set DbParameter.Value, right?\n\nSo first, the primary CLR type mapped to JSON is generally string, and reading DbType after setting Value to a string should already return DbType.String (rather than anything related to JSON), so for this common scenario I don\u0027t think there\u0027s a problem.\n\nBut there\u0027s indeed the case where the ADO.NET driver also supports JSON-specific types; for example, Npgsql allows you to read and write System.Text.Json types directly (e.g. JsonDocument), as a sugar to remove the burden of having to serialize/deserialize to string internally (note that the PG wire encoding for json/jsonb is just text, no internal binary format). If you assign e.g. JsonDocument to NpgsqlParameter.Value and then read DbType, you get object at the moment, since there\u0027s nothing else in that enum that fits. Changing that to return the new DbType.Json would indeed be a breaking change, but it\u0027s a minor one that I think we\u0027d definitely do it in Npgsql. Of course, that decision is up to each and every provider.\n\nWhat do you think, does that make sense (hopefully I understood your question)?",
                                           "updatedAt":  "2024-06-21T08:40:45Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add Json to System.Data.DbType",
        "labels":  [
                       "enhancement",
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/1034",
        "createdAt":  "2019-12-18T22:23:55Z",
        "number":  1034,
        "author":  "cmeyertons",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-01-03T08:45:28Z",
        "body":  "There a few performance tweaks that could really help reduce heap allocations / GC pressure during SqlBulkCopy on SqlDecimal:\r\n\r\nDuring SqlDecimal\u0027s construction, an int[] is created:\r\n\r\n```csharp\r\nint[] bits = decimal.GetBits(value);\r\n```\r\n\r\nIt would be great if `decimal` could expose a `GetBitsSpan` so this could be stack allocated.\r\n\r\nDuring multiple operations invoked by various operations, `uint[]` is created instead of stackalloc\u0027ed \r\n\r\nex:\r\n\r\n```csharp\r\nuint[] rguiData = new uint[4] { _data1, _data2, _data3, _data4 };\r\n```\r\n\r\nI\u0027m happy to create a fork/PR to help get this in.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmR3Kyg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzMwMzE2Mg==",
                                           "createdAt":  "2019-12-19T02:30:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I think it\u0027s fine to still open issues here but note that most Sqlclient work is now in https://github.com/dotnet/SqlClient and then they sometimes port back here.",
                                           "updatedAt":  "2019-12-19T02:30:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzMyOTM3Ng==",
                                           "createdAt":  "2019-12-19T04:39:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cmeyertons",
                                           "body":  "Thanks @danmosemsft, good to know. \r\n\r\nI thought it would be appropriate to create here as the SqlDecimal class is defined in this repo, not SqlClient. \r\n\r\nI also figured the idea to expose decimal.GetBitsSpan belonged here as well. \r\n\r\nShould I close this one and create one over there and they’ll create a PR into here? Just not sure of the correct process. \r\n\r\nApologies for any inconvenience and appreciate the help!",
                                           "updatedAt":  "2019-12-19T04:41:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzMzMjYzOQ==",
                                           "createdAt":  "2019-12-19T04:55:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Good point - let\u0027s leave it here and owners of this area can respond.",
                                           "updatedAt":  "2019-12-19T04:55:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzM5Njg3MA==",
                                           "createdAt":  "2019-12-19T08:54:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "It might be a good idea to spanify some of the other shared types in the same pass to provide everyone with allocation free paths where possible. It may also address some of the unpleasant hacks used by SqlClient in [SqlTypeWorkArounds](https://github.com/dotnet/runtime/blob/master/src/libraries/System.Data.SqlClient/src/System/Data/SqlTypes/SqlTypeWorkarounds.cs) \r\n\r\n/cc @roji  @bgrainger  @cheenamalhotra ",
                                           "updatedAt":  "2019-12-19T08:54:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzQzMzkxNw==",
                                           "createdAt":  "2019-12-19T10:35:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@cheenamalhotra @David-Engel has there already been a conversation about moving the \"SqlTypes\" (SqlInt32, SqlDecimal...) to https://github.com/dotnet/sqlclient? From a very cursory look, it seems like these do belong as part of SqlClient - no other ADO.NET provider uses them as far as I know. There are some references to SqlInt32 in DataColumn and other supporting infrastructure (System.Data.Filters), though I\u0027m not sure as to the extent of the dependency. \r\n\r\nIMHO we should understand if we can/should move these types to SqlClient before considering any changes in System.Data.Common.\r\n\r\n/cc @ajcvickers (any historical knowledge on this?)",
                                           "updatedAt":  "2019-12-19T10:35:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzQ0NzYzNg==",
                                           "createdAt":  "2019-12-19T11:16:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "I\u0027m surprised that no other providers use them, does everyone make their own versions?",
                                           "updatedAt":  "2019-12-19T11:16:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzQ4MDQ3Nw==",
                                           "createdAt":  "2019-12-19T13:02:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@Wraith2 I haven\u0027t thoroughly investigated these, but AFAIK these types are the SqlClient \"provider-specific types\". Npgsql does define some provider-specific types as well; for example, NpgsqlDateTime can represent a PostgreSQL timestamp, which has different precision and range than BCL DateTime. Since different databases have different characteristics for data types, I can\u0027t really see how something like SqlDateTime could ever be useful as a cross-database type (I also don\u0027t understand what SqlInt32 actually provides over .NET int...).\r\n\r\nSo to summarize, in my mental model, each provider can/should expose provider-specific types where their database type can\u0027t be properly represented with a built-in BCL type; these should follow the standard ADO.NET naming convention (SqlClient has SqlCommand, so it makes sense for it to also have SqlDateTime; Npgsql has NpgsqlCommand and NpgsqlDateTime).\r\n\r\nUnfortunately it seems that at some point the boundary between System.Data.Common and SqlClient got a bit blurry, which is why we\u0027re in this confusing situation.",
                                           "updatedAt":  "2019-12-19T13:02:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzU0OTQ1OQ==",
                                           "createdAt":  "2019-12-19T15:58:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cheenamalhotra",
                                           "body":  "Hi @roji \r\n\r\nWe have discussed about porting them to Microsoft.Data.SqlClient.SqlTypes namespace, but never planned to execute it due to it\u0027s impact and usage in existing client applications. But there are definitely no plans to move System.Data.SqlTypes out of System.Data.Common and change anything for System.Data.SqlClient driver.\r\n\r\nAnd, even if we plan to add them in Microsoft.Data.SqlClient.SqlTypes namespace someday, that wouldn\u0027t replace System.Data.SqlTypes as they\u0027ll continue to be used with System.Data.SqlClient, so fixing them here would be ideal IMO.\r\n",
                                           "updatedAt":  "2019-12-19T15:58:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzU0OTg3Nw==",
                                           "createdAt":  "2019-12-19T15:59:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bgrainger",
                                           "body":  "\u003e I also don\u0027t understand what SqlInt32 actually provides over .NET int...).\r\n\r\nMy (outsider\u0027s) understanding is that these types existed to represent nullable values (e.g., see [`SqlInt32.IsNull`](https://docs.microsoft.com/en-us/dotnet/api/system.data.sqltypes.sqlint32.isnull)) in .NET 1.0 (before `Nullable\u003cint\u003e`). They have lots of overloaded operators to implement nullable arithmetic, and `DataTable` has lots of hard-coded logic to handle them when evaluating data columns that are expressions. (This last part may make it difficult to move them out of System.Data.Common.)",
                                           "updatedAt":  "2019-12-19T15:59:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzU2NTMzNQ==",
                                           "createdAt":  "2019-12-19T16:37:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e (outsider\u0027s) understanding is that these types existed to represent nullable values (e.g., see SqlInt32.IsNull) in .NET 1.0 (before Nullable\u003cint\u003e).\r\n\r\nInteresting I didn\u0027t know that...\r\n\r\nI may have expressed myself badly... Of course there\u0027s no question of removing these types from System.Data.Common, as that would be a major breaking change (and System.Data.SqlClient would not work anymore at all). I was thinking only about whether these types should be copied across to Microsoft.Data.SqlClient, in which case M.D.SqlClient would use them and S.D.SqlClient would continue using the version in System.Data.Common; essentially doing the exact same thing with all other SqlClient-specific types. This would unfortunately mean another transition for (some) users of M.D.SqlClient, as applications using M.D.SqlClient still reference the SQL types from S.D.C and would need to change.\r\n\r\nOn the upside, this would cleanly bring everything SqlClient to where it belongs - M.D.SqlClient - and allow the SQL types to evolve at the right pace with the new SqlClient itself (rather than be bound to the BCL as before).\r\n\r\n\u003e DataTable has lots of hard-coded logic to handle them when evaluating data columns that are expressions. (This last part may make it difficult to move them out of System.Data.Common.)\r\n\r\nI agree that this could be the blocking factor here - we\u0027d need to investigate what the exact impact here would be.\r\n\r\n\u003e And, even if we plan to add them in Microsoft.Data.SqlClient.SqlTypes namespace someday, that wouldn\u0027t replace System.Data.SqlTypes as they\u0027ll continue to be used with System.Data.SqlClient, so fixing them here would be ideal IMO.\r\n\r\nRight, but in my mind the intention isn\u0027t to continue evolving System.Data.SqlClient - the proposals on SqlDecimal here aren\u0027t even bugfixes, only perf improvements.",
                                           "updatedAt":  "2019-12-19T16:37:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzY1MTg1NQ==",
                                           "createdAt":  "2019-12-19T20:32:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cheenamalhotra",
                                           "body":  "@roji \r\n\r\n\u003e but in my mind the intention isn\u0027t to continue evolving System.Data.SqlClient - the proposals on SqlDecimal here aren\u0027t even bugfixes, only perf improvements.\r\n\r\nCurrently the improvements will also apply to Microsoft.Data.SqlClient as we directly reference them too, so we\u0027re essentially improving both drivers. :)\r\n\r\nWhen we plan to add it to M.D.S (no near plans currently), that\u0027s when future improvements can be planned for M.D.S only.",
                                           "updatedAt":  "2019-12-19T20:32:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzY3NDU3Nw==",
                                           "createdAt":  "2019-12-19T20:59:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "I think we might have missed the point, the original post is about `decimal` not `SqlDecimal`, and there was/is an issue for adding span construct and get bytes with spans at https://github.com/dotnet/corefx/issues/35877 which just needs api surface finalizing and then going to review. I\u0027m not sure if the issue needs moving or recreating @danmosemsft",
                                           "updatedAt":  "2019-12-19T20:59:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzY3NzIyMg==",
                                           "createdAt":  "2019-12-19T21:07:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@Wraith2 it\u0027s true that the original post proposes to add `decimal.GetBitsSpan`, but there are also some other proposed optimizations (stackalloc?) which seem like they would affect SqlDecimal (although I may be wrong).\r\n\r\nIn any case, as it doesn\u0027t seem like these types are going to be moving any time soon, I guess it makes sense to optimize them here.",
                                           "updatedAt":  "2019-12-19T21:07:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODI2NzYxMQ==",
                                           "createdAt":  "2020-06-23T16:17:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@Wraith2 Did your PR linked above fix this issue?",
                                           "updatedAt":  "2020-06-23T16:17:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODI3ODY1Mw==",
                                           "createdAt":  "2020-06-23T16:37:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "SqlDecimal was improved but I didn\u0027t add a new api because it hasn\u0027t been proposed or reviewed. So no.\r\n\r\nI do think it would be helpful to review various SqlTypes members including SqlDecimal and ensure we have span enabled paths for use. Recently I found that SqlBinary has a similar lack of access and that can have significant memory costs.",
                                           "updatedAt":  "2020-06-23T16:37:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZHcrK",
                                           "createdAt":  "2025-01-03T08:45:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cmeyertons",
                                           "body":  "I think this one should stay open - its not a tremendous lift and carries a non-trivial performance benefit.  Maybe we can re-evaluate if underlying constraints have changed since 2019 when I opened this 😄 ",
                                           "updatedAt":  "2025-01-03T08:45:17Z"
                                       }
                                   ],
                         "totalCount":  16
                     },
        "title":  "SqlDecimal generates garbage during SqlBulkCopy",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38339",
        "createdAt":  "2020-06-24T15:25:11Z",
        "number":  38339,
        "author":  "NickCraver",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-27T10:42:04Z",
        "body":  "### Description\r\n\r\nWe have observed a large number of timers in our multi-tenant environment and have traced the vast majority (thousands vs. a few) to [`DbConnectionPool`, which has a cleanup timer](https://github.com/dotnet/corefx/blob/c68bc274ce95cb5eda143223942d6fd86a547a0d/src/System.Data.Odbc/src/Common/System/Data/ProviderBase/DbConnectionPool.cs#L127).\r\n\r\nWhile the general approach for pool cleanup (purging idle connections from the pool) per-pool is fine for things connecting to a single data source or only a few (likely the majority of cases), it doesn\u0027t scale well for hundreds, thousands, or hundreds of thousands of connection strings/pools. It creates a timer per active pool.\r\n\r\nOn Stack Overflow as an example we see ~400-600 timers at any given time and ~580 of them are this cleanup timer on connection pools. Or in the Teams case, it\u0027s much higher into thousands active at any given time.\r\n\r\nAdditionally, this makes debugging more difficult by nature. When looking at memory dumps and analyzing where your objects are rooted, the rather nasty effect of Timers being in a doubly-linked list is more than a little confusing and obfuscating by nature. I\u0027m not sure what the practical impact on _running_ timers this large list has, but it can\u0027t be a positive thing.\r\n\r\n\r\n### Regression?\r\n\r\nTo be clear, this isn\u0027t a new/recent regression. It\u0027s been this way for a very long time. We\u0027re just able to find some of these issues more easily since the migration to .NET Core.\r\n\r\n\r\n### Data\r\nHere are some examples from our infrastructure:\r\n![image](https://user-images.githubusercontent.com/454813/85583866-a1e19600-b60c-11ea-919c-4f5362e4e70e.png)\r\n![image](https://user-images.githubusercontent.com/454813/85583984-bb82dd80-b60c-11ea-9b7d-01d400de345b.png)\r\n\r\n\r\n### Proposal\r\n\r\nWe\u0027re trying something at Stack via reflection (a _lot_ of reflection) to null out these per-pool timers and instead, in a single timer, loop over all pools (ultimately rooted from `System.Data.SqlClient.SqlConnectionFactory.SingletonInstance` - the same is true with `Microsoft.Data.SqlClient`).\r\n\r\nThe approach isn\u0027t that complicated, but I wanted to propose an upstream of this into .NET itself. It\u0027s not _completely_ trivial since the instance we\u0027re rooting in to find all pools to loop over is in a client that ships side-by-side now, but maybe someone has ideas there. Or, if there are concerns with a single timer - what are they? Our current running assumption is that it was designing the current way to either a) allow flexibility in ways we don\u0027t need or understand, or b) scale of pools wasn\u0027t a design concern ages ago in this areas. ...or both.\r\n\r\nIs this something that would be welcomed upstream, if we can identify a good crawl point?\r\n\r\ncc @davidfowl @ajcvickers @mgravell @deanward81 @m0sa",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObO6rug==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODg5MDAyMw==",
                                           "createdAt":  "2020-06-24T15:25:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-06-24T15:25:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODk0MDQ5MQ==",
                                           "createdAt":  "2020-06-24T16:54:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "\u003e We have observed a large number of timers in our multi-tenant environment and have traced the vast majority (thousands vs. a few) to [`DbConnectionPool`, which has a cleanup timer](https://github.com/dotnet/corefx/blob/c68bc274ce95cb5eda143223942d6fd86a547a0d/src/System.Data.Odbc/src/Common/System/Data/ProviderBase/DbConnectionPool.cs#L127).\r\n\r\nThe link you mentioned links to the Odbc version but you probably want the SqlClient one which is in a different repo: https://github.com/dotnet/SqlClient/blob/5e943028d702cdc948263f96d60a5677860577f4/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/ProviderBase/DbConnectionPool.cs#L395",
                                           "updatedAt":  "2020-06-24T16:54:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0OTAzMzA1Nw==",
                                           "createdAt":  "2020-06-24T19:49:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NickCraver",
                                           "body":  "@akoeplinger That\u0027s the `Microsoft.Data.SqlClient` ;) It\u0027s weird because some stuff has forked - current repos vs. 3.1 we\u0027re currently on diverge a bit. But overall: it lives in `DbConnectionPool`. That seems to have been forked/duplicated in odd ways with the SqlClient moving out of band, though. I\u0027m not 100% sure we understand the current state TBH.",
                                           "updatedAt":  "2020-06-24T20:06:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDEzMTIyMg==",
                                           "createdAt":  "2020-06-26T11:31:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "FWIW Npgsql has the same timer-per-pool strategy when idle connection pruning is on, and I agree that it isn\u0027t ideal - a single global timer is likely the way to go. Off the top of my head I can\u0027t see any reason why a single timer couldn\u0027t do the same work just as well, I\u0027m guessing nobody thought of scaling to so many pools.\r\n\r\n@NickCraver out of curiosity, are you at ~500 pools because you\u0027re actually connecting to 500 different databases? Or is it other variations in the connection string to the same database? A bit of context may shed some light on other possible issues here.",
                                           "updatedAt":  "2020-06-26T11:31:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDEzMzE3NA==",
                                           "createdAt":  "2020-06-26T11:37:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "(opened https://github.com/npgsql/npgsql/issues/3043 to consider also for Npgsql)",
                                           "updatedAt":  "2020-06-26T11:37:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDEzNDI0Mw==",
                                           "createdAt":  "2020-06-26T11:40:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "NickCraver",
                                           "body":  "Indeed we\u0027re connecting to hundreds of databases or many thousands of schemas at once. All different connection strings, from the same app identity.\r\n\r\nWhile our crazy reflection method _kind of works_, in practice it doesn\u0027t do much for rolling loads. Because inactive pools themselves are culled, then they spin back up they get a new timer...until our next pass. If we moved the timer down though, it\u0027d solve that issue.\r\n\r\nHere\u0027s our approach using a single timer that roll every 5 minutes across all pools and a) nulls out the timer if present, or b) runs the cull if the timer is already null (to prevent double runs, we just null on \"first contact\"):\r\n\u003cimg width=\"876\" alt=\"Screen Shot 2020-06-26 at 7 37 04 AM\" src=\"https://user-images.githubusercontent.com/454813/85853076-e17cbf00-b77f-11ea-81b3-fc1323d9a6e8.png\"\u003e\r\n\u003cimg width=\"877\" alt=\"Screen Shot 2020-06-26 at 7 37 56 AM\" src=\"https://user-images.githubusercontent.com/454813/85853149-06713200-b780-11ea-960e-091a4d7238dd.png\"\u003e\r\n\r\nSo it has made a huge impact, but still a lot happening in the rolling workloads with idle pools scenario. I\u0027d think that\u0027s not uncommon for any high count multi-tenancy. If we moved to a shared timer, we\u0027d get the best of all words. We have currently contemplated `CreateCleanupTimer` with `return null` at runtime to workaround this, but would much, much rather see a framework change in this department :)",
                                           "updatedAt":  "2020-06-26T11:40:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDEzODUzOA==",
                                           "createdAt":  "2020-06-26T11:52:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@NickCraver I guess the thing I\u0027m not used to seeing is multi-tenancy that\u0027s implemented via changes in the connection string (may be some PG vs. SQL Server difference here).\r\n\r\nIn any case, assuming we\u0027re discussing SqlClient, DbConnectionPool has moved out of dotnet/runtime and into dotnet/sqlclient, so Microsoft.DataSqlClient has its own copy and can do what it wants there. So it probably makes sense to move this issue to dotnet/sqlclient, unless someone actually cares about making this improvement in the ODBC/OleDB drivers...",
                                           "updatedAt":  "2020-06-26T11:52:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDE3MTg1Ng==",
                                           "createdAt":  "2020-06-26T13:13:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBJDYKg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2020-07-01T08:53:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I\u0027m not sure what the practical impact on running timers this large list has, but it can\u0027t be a positive thing.\r\n\r\nOn .NET Core, I\u0027d expect the impact to be minimal. I\u0027ve seen apps with tens of thousands of timers, and while that can have a very measurable effect on .NET Framework (without opting in to some fixes), on .NET Core improvements we made in 2.1 and 3.0 make those issues largely go away, at least from what I\u0027ve seen. I\u0027d love to know if in practice you see otherwise, i.e. if you actually see measurable degradation in metrics other than timer count.",
                                           "updatedAt":  "2020-06-26T13:13:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDE3NDgzMA==",
                                           "createdAt":  "2020-06-26T13:19:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Brar",
                                           "body":  "\u003e I\u0027m not used to seeing is multi-tenancy that\u0027s implemented via changes in the connection string (may be some PG vs. SQL Server difference here)\r\n\r\n@roji I can totally imagine a multi-tenant application that uses one schema per tenant and implements this either via connecting as a different user (via `ALTER ROLE tenant1_user SET search_path TO tenant1_schema;`) or by using our new `Options` connection string parameter (\"Options=search_path=tenant1_schema\") which would both result in one pool per tenant.",
                                           "updatedAt":  "2020-06-26T13:19:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDE4MTkxMw==",
                                           "createdAt":  "2020-06-26T13:34:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBIqSHw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2020-06-26T14:11:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "NickCraver",
                                           "body":  "\u003e In any case, assuming we\u0027re discussing SqlClient, DbConnectionPool has moved out of dotnet/runtime and into dotnet/sqlclient, so Microsoft.DataSqlClient has its own copy and can do what it wants there. So it probably makes sense to move this issue to dotnet/sqlclient, unless someone actually cares about making this improvement in the ODBC/OleDB drivers...\r\n\r\nI can see this both ways, in 1) they\u0027re almost entirely just _copying_ all this - do we fork it? or 2) Put it in the base and everyone gets it. Though admittedly, it\u0027s 1 global timer per copy of the pooling code.\r\n\r\n\u003e I\u0027d love to know if in practice you see otherwise, i.e. if you actually see measurable degradation in metrics other than timer count.\r\n\r\nThe main problem has been debugging and GC rooting for sure. We have at any given time thousands of root paths because of those linked lists. I am not sure if this impacts GC cleanup time or not yet. We\u0027ve been live a day with reduced timers so we\u0027ll check on metrics but the problem we\u0027re trying to immediately solve is crazy roots. But, we figured this was an overall good change for all frameworks and couldn\u0027t picture a downside, hence the pitch. I\u0027ll dig into our overall metrics over the next few days (some things ramp up over time), but honestly it\u0027ll be ~1 week to compare minor difference and see much impact when it\u0027s not severe. I can say: there\u0027s no severe impact, but unsure of minor impact - I don\u0027t _expect_ it based on your comments :)",
                                           "updatedAt":  "2020-06-26T13:34:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1MDIzMzQyNg==",
                                           "createdAt":  "2020-06-26T15:13:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@brar\r\n\r\n\u003e @roji I can totally imagine a multi-tenant application that uses one schema per tenant and implements this either via connecting as a different user (via ALTER ROLE tenant1_user SET search_path TO tenant1_schema;) or by using our new Options connection string parameter (\"Options=search_path=tenant1_schema\") which would both result in one pool per tenant.\r\n\r\nSure, these are certainly possible. But regardless of this timer issue, it means you\u0027re creating extreme fragmentation in your pooling - which has a lot of perf consequences. If your security model is strict as to require connecting as different database users, then yeah, there\u0027s no alternative - but that\u0027s definitely not the case in most web apps where there aren\u0027t separate db users. Re doing it just to set search_path, at least in PG, considering that you can schema-qualify your tables in your queries, or set search_path after opening the connection, massively fragmenting your pooling in this way seems like a general anti-pattern to me...\r\n\r\n@NickCraver \r\n\r\n\u003e I can see this both ways, in 1) they\u0027re almost entirely just copying all this - do we fork it? or 2) Put it in the base and everyone gets it. Though admittedly, it\u0027s 1 global timer per copy of the pooling code.\r\n\r\nAFAICT DbConnectionPool has already been copied across to Microsoft.Data.SqlClient, so it\u0027s effectively already forked. So changes would have to happen in MS.Data.SqlClient, and then we could optionally think about doing the same in runtime - where it would only affect the old drivers, which I don\u0027t think makes a lot of sense at this point...",
                                           "updatedAt":  "2020-06-26T15:13:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5s7qu6",
                                           "createdAt":  "2023-11-27T10:42:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "m0sa",
                                           "body":  "Bump",
                                           "updatedAt":  "2023-11-27T10:42:03Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Proposal: Move DbConnectionPool timers into one timer",
        "labels":  [
                       "area-System.Data",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/39154",
        "createdAt":  "2020-07-12T08:38:08Z",
        "number":  39154,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-07T23:59:08Z",
        "body":  "The current API docs for System.Data async methods simply point to the sync method, and provide information on the default implementation (throw on cancellation, invoke the sync method...). We should instead have the full information on the method directly available on the async method, and provide any default implementation info in the remarks.\r\n\r\nExample method: [OpenAsync](https://docs.microsoft.com/en-us/dotnet/api/system.data.common.dbconnection.openasync?view=netcore-3.1#System_Data_Common_DbConnection_OpenAsync_System_Threading_CancellationToken_).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnZJVUA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NzE5MTk0OQ==",
                                           "createdAt":  "2020-07-12T08:38:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-07-12T08:38:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1ODMzNzI4OQ==",
                                           "createdAt":  "2020-07-14T18:22:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bgrainger",
                                           "body":  "@danmosemsft Can I be subscribed to `area-System.Data` issues?",
                                           "updatedAt":  "2020-07-14T18:22:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dklVQ",
                                           "createdAt":  "2025-02-07T17:54:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-07T17:54:43Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Clean up async API docs for System.Data",
        "labels":  [
                       "documentation",
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/40654",
        "createdAt":  "2020-08-11T11:43:48Z",
        "number":  40654,
        "author":  "MaceWindu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-03T08:24:53Z",
        "body":  "### Description\r\n\r\nCalling `OdbcDataReader.GetSchemaTable` for reader that contains blob column fails with OverflowException in 64-bit process.\r\n\r\nUsed driver: \"HDBODBC\" (SAP HANA ODBC driver)\r\nColumn types: `BLOB`, `CLOB`, `NCLOB`, `TEXT`\r\n\r\n### Configuration\r\n\r\nOS: Windows\r\nBitness: 64-bit process\r\nFramework: any\r\n\r\n### Regression?\r\n\r\nNot regression, but bug. Also fails for .net framework.\r\n\r\n### Other information\r\n```\r\nSystem.OverflowException\r\n  HResult=0x80131516\r\n  Message=Arithmetic operation resulted in an overflow.\r\n  Source=System.Data.Odbc\r\n  StackTrace:\r\n   at System.Data.Odbc.SQLLEN.op_Implicit(SQLLEN value)\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/1099238/89893403-8e988300-dbd8-11ea-8751-03b3b51080b4.png)\r\n![image](https://user-images.githubusercontent.com/1099238/89893423-9c4e0880-dbd8-11ea-8410-984abc440af2.png)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeTq8jA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MTg5NjM0Mg==",
                                           "createdAt":  "2020-08-11T11:43:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-11T11:43:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NDA3NjY3OQ==",
                                           "createdAt":  "2020-08-14T13:32:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@MaceWindu thanks for filing this. The team is now busy with stabilizing .NET 5.0 - we are unlikely to get around to this issue before the release. We\u0027ll definitely take a look at this at that point.\r\n\r\nI\u0027m completely unfamiliar with SAP HANA ODBC driver. To help us reproduce and effectively fix this, is there any way to submit a code sample that reproduces the error? If not, is it possible to reproduce this with another, more accessible ODBC driver (e.g. for SQL Server)?",
                                           "updatedAt":  "2020-08-14T13:32:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5n0Pff",
                                           "createdAt":  "2023-09-30T11:47:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bucweat",
                                           "body":  "Hi,\r\n\r\nSeeing similar issue with DuckDB. \r\n\r\nCode reference for code mentioned below: https://github.com/dotnet/runtime/blob/a2818c5728833ffc1988eb24b6648dc09554d19d/src/libraries/System.Data.Odbc/src/System/Data/Odbc/OdbcDataReader.cs#L2049\r\n\r\nBTW I\u0027m actually running .Net framework 4.8.1. The code is slightly different (from debugging symbols):\r\n\r\n```\r\narray[i].scale = (byte)(int)GetColAttribute(i, (ODBC32.SQL_DESC)5, ODBC32.SQL_COLUMN.SCALE, ODBC32.HANDLER.IGNORE);\r\n```\r\n\r\nWhen the driver is setting SQL_COLUMN_SCALE DuckDB is passing a Int32 value of -1. The System.Data.Odbc.SQLLEN _value returned from GetColAttribute() is 0x00000000ffffffff. There is a `(byte)(int)` cast before setting array[i].scale, but at least in my case that cast is not working and results in System.OverflowException. \r\n\r\nI\u0027ve yet to find a definitive source for what SQL_COLUMN_SCALE should be, however, I do believe that DuckDB should not be returning -1 given it is going into a variable of type `byte`.\r\n\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2023-09-30T11:47:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55OryM",
                                           "createdAt":  "2024-04-03T08:24:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "meiaestro",
                                           "body":  "We are getting the same error when trying to get column schema information for a SAP HANA database table:\r\n\r\nStacktrace:\r\n   at System.IntPtr.ToInt32()\r\n   at System.Data.Odbc.SQLLEN.op_Implicit(SQLLEN value)\r\n   at System.Data.Odbc.OdbcDataReader.BuildMetaDataInfo()\r\n   at System.Data.Odbc.OdbcDataReader.GetSchemaTable()\r\n   at System.Data.Common.DbDataReaderExtensions.GetColumnSchemaCompatibility(DbDataReader reader)\r\n   at System.Data.Common.DbDataReader.GetColumnSchemaAsync(CancellationToken cancellationToken)\r\n--- End of stack trace from previous location ---\r\n\r\nIt appears that the column causing the overflow exception is of type NCLOB with length int32.max = 2147483647.\r\n\r\nFor us a working workaround is to avoid \u0027GetColumnSchemaAsync\u0027 and calling \u0027GetName\u0027 and \u0027GetFieldType\u0027 for every column instead.",
                                           "updatedAt":  "2024-04-03T08:24:53Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[System.Data.Odbc] GetSchemaTable fails with OverflowException for x64 ODBC driver",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/41026",
        "createdAt":  "2020-08-19T12:49:31Z",
        "number":  41026,
        "author":  "cincuranet",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-21T08:15:03Z",
        "body":  "## Background and Motivation\r\n\r\n`DECFLOAT` datatype is quite common in databases nowadays and would make sense to add the \"support\" for it into `DbType` enum.\r\n\r\n## Proposed API\r\n\r\n```diff\r\npublic enum DbType\r\n{\r\n    AnsiString = 0,\r\n    Binary = 1,\r\n    Byte = 2,\r\n    Boolean = 3,\r\n    Currency = 4,\r\n    Date = 5,\r\n    DateTime = 6,\r\n    Decimal = 7,\r\n    Double = 8,\r\n    Guid = 9,\r\n    Int16 = 10,\r\n    Int32 = 11,\r\n    Int64 = 12,\r\n    Object = 13,\r\n    SByte = 14,\r\n    Single = 15,\r\n    String = 16,\r\n    Time = 17,\r\n    UInt16 = 18,\r\n    UInt32 = 19,\r\n    UInt64 = 20,\r\n    VarNumeric = 21,\r\n    AnsiStringFixedLength = 22,\r\n    StringFixedLength = 23,\r\n    Xml = 25,\r\n    DateTime2 = 26,\r\n    DateTimeOffset = 27,\r\n+    DecFloat16 = 28,\r\n+    DecFloat34 = 29,\r\n}\r\n```\r\n\r\n## Risks\r\n\r\nI believe this is a low risk change, as it\u0027s adding only new values to the end of the enum. The support is purely in the enum and ADO.NET providers can _then_ use the values as they wish/feel usable. For existing ADO.NET world nothing will change.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOo3lhZQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjMwMDEzMg==",
                                           "createdAt":  "2020-08-19T12:49:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-08-19T12:49:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NzQzNjAzMA==",
                                           "createdAt":  "2020-08-20T07:50:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "\u003e DECFLOAT datatype is quite common in databases nowadays\r\n\r\nIt is? Which databases support it?",
                                           "updatedAt":  "2020-08-20T07:51:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NzQzOTY5Ng==",
                                           "createdAt":  "2020-08-20T07:57:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "First of all it\u0027s part of SQL:2016 standard. I\u0027m aware of DB2 supporting it. Firebird 4 will/does support it. And I\u0027ve heard Postgres is going to get the support (@roji surely knows more).",
                                           "updatedAt":  "2020-08-20T07:57:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NzU0NjAwNg==",
                                           "createdAt":  "2020-08-20T11:18:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "Yeah, DECFLOAT seems to have made it into SQL:2016, and PostgreSQL indeed strives to conform as much as possible - but there\u0027s definitely no support as of now ([here\u0027s a relevant discussion](https://www.postgresql.org/message-id/CAEepm%3D1KZOPBKBLOD7g9D4Hr0QSyqBOZDNUBB6a9A3MAUaiuzQ%40mail.gmail.com)).\r\n\r\nGiven the very limited subset of databases which actually have this right now (DB2, Firebird), the value here seems a bit limited...",
                                           "updatedAt":  "2020-08-20T11:18:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NzYzNDI0MQ==",
                                           "createdAt":  "2020-08-20T12:27:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "The problem with `System.Data` is that it\u0027s part of the framework and because of that it only gets versioned on major releases. The branch for .net 5.0 has been made so any feature requests now can only ship in 6.0 or later. The change will never make it into desktop netfx. If you\u0027re the author of an ADO provider that supports desktop netfx then trying to use these new enum members would be difficult and costly in development terms. You\u0027re going to end up abstracting away the System defined enum and use your own. In general I think providers are best served by using their own type enum. \r\n\r\nI\u0027ve nothing against DECFLOAT despite never having heard of it. I do think that moving as much functionality as possible out of System.Data.* namespaces is probably a good idea and thus not continuing to use or extend this enum.",
                                           "updatedAt":  "2020-08-20T12:27:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NzYzOTE2Nw==",
                                           "createdAt":  "2020-08-20T12:37:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "I wish I could abstract away the usage of this enum, but i.e. [`DbParameter.DbType`](https://docs.microsoft.com/en-us/dotnet/api/system.data.common.dbparameter.dbtype?view=netcore-3.1#System_Data_Common_DbParameter_DbType) is using in public/developer-facing API. `FbParameter` has it\u0027s own `FbDbType` property, but still some \"abstract\" (i.e. OR mappers) code uses only what `DbParameter` offers.\r\n\r\nI considered the netfx case, but in this case, for me personally, falling back to `DbType.Object` on netfx would be reasonable trade-off, given with every passing day the netfx being more legacy.",
                                           "updatedAt":  "2020-08-20T12:37:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NzY1NDAzMw==",
                                           "createdAt":  "2020-08-20T13:08:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@Wraith2 it\u0027s true that it\u0027s probably too late to add anything into 5.0.\r\n\r\n\u003e The change will never make it into desktop netfx. If you\u0027re the author of an ADO provider that supports desktop netfx then trying to use these new enum members would be difficult and costly in development terms. You\u0027re going to end up abstracting away the System defined enum and use your own. In general I think providers are best served by using their own type enum.\r\n\r\nCan you provide more detail? It\u0027s quite simple for a provider to have some conditionally-compiled code handling new values of DbType, no? We already do this with methods which are added only in .NET Core, is there any additional complexity for enums that I\u0027m missing?\r\n\r\nI do think that the utility of a new DbType value is proportional to how many database providers are actually going to support it (and so DECFLOAT doesn\u0027t exactly shine). However, a DbType.Json is a good counter-example (https://github.com/dotnet/runtime/issues/30677) - lots of databases do support it, so why not add it?",
                                           "updatedAt":  "2020-08-20T13:08:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NzY1OTg2Mw==",
                                           "createdAt":  "2020-08-20T13:19:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBN9xiw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2020-08-20T14:13:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "\u003e I do think that the utility of a new DbType value is proportional to how many database providers are actually going to support it (and so DECFLOAT doesn\u0027t exactly shine). \r\n\r\nOn the other hand, adding value to enum seems fairly cheap, isn\u0027t it?\r\n\r\n\u003e However, a DbType.Json is a good counter-example (#30677) - lots of databases do support it, so why not add it?\r\n\r\nI absolutely second your opinion here.",
                                           "updatedAt":  "2020-08-20T13:19:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MjAwNjQxMg==",
                                           "createdAt":  "2020-08-27T15:03:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Given the excerpt from DbType docs:\r\n\u003cimg width=\"897\" alt=\"image\" src=\"https://user-images.githubusercontent.com/3840695/91459507-632bbe80-e88f-11ea-81ad-68e2dfbf710d.png\"\u003e\r\n\r\nIn the context, where `DecFloat16` and `DecFloat34` are intended to be used, do the existing `Double` and `Decimal` hold any particular (differentiating) meaning? If not, can they be used instead, respectively?",
                                           "updatedAt":  "2020-08-27T15:03:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4MjA2NDY3NQ==",
                                           "createdAt":  "2020-08-27T16:45:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "The i.e. `double` is binary floating point, while `decfloat` is decimal floating point. The range of `DECFLOAT(16)` is -9.999999999999999 x 10^384 to -1.0 x 10^-383 : 1.0 x 10^-383 to 9.999999999999999 x 10^384. That doesn\u0027t quite match. I would say it\u0027s a similar story to `DbType.DateTime` and `DbType.DateTime2` (at least how it\u0027s related to `SqlClient`).",
                                           "updatedAt":  "2020-08-27T16:45:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jeN1Y",
                                           "createdAt":  "2025-03-21T07:56:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cincuranet",
                                           "body":  "No cleanup.",
                                           "updatedAt":  "2025-03-21T07:56:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jeWFl",
                                           "createdAt":  "2025-03-21T08:15:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@cincuranet is it maybe better to close for now and revisit when more database support it? Because with the current database support - DB2 and Firebird only (no changes on the PG side) - I wouldn\u0027t see us doing this.",
                                           "updatedAt":  "2025-03-21T08:15:02Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "Support for DECFLOAT in System.Data.DbType",
        "labels":  [
                       "api-suggestion",
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42264",
        "createdAt":  "2020-09-15T17:52:53Z",
        "number":  42264,
        "author":  "mlh758",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-11-19T18:06:42Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\nThis seems to be related to #24148 in that the fix was the change `DriverManagerEncoding` in `/Library/Vertica/ODBC/lib/vertica.ini` to UTF-16 from the default of UTF-32. However, I opened a new issue because I\u0027m running this on MacOS and the error message when I run some code like this:\r\n\r\n```\r\nusing (OdbcConnection connection = new OdbcConnection(verticaConnection))\r\n{\r\n  connection.Open();\r\n}\r\n```\r\n\r\nis just:\r\n\r\n```\r\nERROR [H] [\r\n   at System.Data.Odbc.OdbcConnection.HandleError(OdbcHandle hrHandle, RetCode retcode)\r\n   ...\r\n```\r\n\r\nand the stack trace ends at the line for `Open()`. It\u0027s as if a large part of the error message gets truncated away.\r\n\r\n### Configuration\r\n\r\n\u003c!--\r\n* Which version of .NET is the code running on?\r\n* What OS and version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* Do you know whether it is specific to that configuration?\r\n  --\u003e\r\n\r\n```\r\nunixODBC 2.3.7\r\nDRIVERS............: /usr/local/etc/odbcinst.ini\r\nSYSTEM DATA SOURCES: /usr/local/etc/odbc.ini\r\nFILE DATA SOURCES..: /usr/local/etc/ODBCDataSources\r\nUSER DATA SOURCES..: /Users/mh039333/.odbc.ini\r\nSQLULEN Size.......: 8\r\nSQLLEN Size........: 8\r\nSQLSETPOSIROW Size.: 8\r\n```\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.1.401\r\n Commit:    39d17847db\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.15\r\n OS Platform: Darwin\r\n RID:         osx.10.15-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.1.401/\r\n\r\nHost (useful for support):\r\n  Version: 3.1.7\r\n  Commit:  fcfdef8d6b\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100 [/usr/local/share/dotnet/sdk]\r\n  3.1.401 [/usr/local/share/dotnet/sdk]\r\n```\r\n\r\n\r\n### Other information\r\n\r\nI am able to open a connection to Vertica using ODBC without modifying the vertica.ini to change encodings if I use Rust\u0027s `odbc = \"0.17.0\"` crate. Not related to the error message at hand, but I wanted to point out that another ODBC implementation doesn\u0027t seem to trip over the encoding this way.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOhKF1g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5Mjg3NzAxNg==",
                                           "createdAt":  "2020-09-15T17:53:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-15T17:53:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46EoXW",
                                           "createdAt":  "2021-11-19T18:06:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ttrias",
                                           "body":  "There are similar encoding issues and incomplete error messages when using the Filemaker ODBC driver via System.Data.Odbc.OdbcConnection.Open and unixODBC.  For the Mac, I know that things like Excel opt for iODBC over unixODBC, possibly because it handles character encoding more gracefully.  I\u0027ll grab a trace when I get a moment.",
                                           "updatedAt":  "2021-11-19T18:06:41Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Incomplete Error Message in System.Data.Odbc",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47968",
        "createdAt":  "2021-02-07T01:46:47Z",
        "number":  47968,
        "author":  "VincentBu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-04T14:21:46Z",
        "body":  "Run: [runtime 20210206.8](https://dev.azure.com/dnceng/public/_build/results?buildId=981759\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=30771648\u0026resultId=114463\u0026paneView=debug)\r\n\r\nFailed test: \r\n```\r\nnet6.0-Browser-Release-wasm-Mono_Release-wasmtestonbrowser-Ubuntu.1804.Amd64.Open\r\n\r\n  -System.Data.Tests.AppDomainsAndFormatInfo.Bug55978\r\n```\r\n\r\n**Error message:**\r\n```\r\nAssert.Equal() Failure\r\nExpected: 2\r\nActual:   3\r\n\r\n\r\nStack trace\r\n   at System.Data.Tests.AppDomainsAndFormatInfo.Bug55978()\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONTWKlw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDU3NDQ1MQ==",
                                           "createdAt":  "2021-02-07T01:46:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRun: [runtime 20210206.8](https://dev.azure.com/dnceng/public/_build/results?buildId=981759\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=30771648\u0026resultId=114463\u0026paneView=debug)\r\n\r\nFailed test: \r\n```\r\nnet6.0-Browser-Release-wasm-Mono_Release-wasmtestonbrowser-Ubuntu.1804.Amd64.Open\r\n\r\n  -System.Data.Tests.AppDomainsAndFormatInfo.Bug55978\r\n```\r\n\r\n**Error message:**\r\n```\r\nAssert.Equal() Failure\r\nExpected: 2\r\nActual:   3\r\n\r\n\r\nStack trace\r\n   at System.Data.Tests.AppDomainsAndFormatInfo.Bug55978()\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVincentBu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-x64`, `area-System.Data`, `os-linux`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-07T01:46:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODQwMzY3MA==",
                                           "createdAt":  "2021-02-12T19:26:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Also failed on browser-wasm in https://github.com/dotnet/runtime/pull/48181/, so I don\u0027t believe this is x64 specific.\r\n\r\nhttps://helix.dot.net/api/2019-06-17/jobs/05ea776a-fb59-4058-8691-82b19e0ca827/workitems/System.Data.Common.Tests/console\r\n\r\n```\r\n[17:03:32] info: Arguments: --run,WasmTestRunner.dll,System.Data.Common.Tests.dll,-notrait,category=IgnoreForCI,-notrait,category=OuterLoop,-notrait,category=failing\r\n[17:03:33] info: console.debug: MONO_WASM: Initializing mono runtime\r\n[17:03:33] info: console.debug: MONO_WASM: ICU data archive(s) loaded, disabling invariant mode\r\n[17:03:33] info: console.debug: mono_wasm_runtime_ready fe00e07a-5519-4dfe-b35a-f867dbaf2e28\r\n[17:03:33] info: Initializing.....\r\n[17:03:33] info: Discovering: System.Data.Common.Tests.dll (method display = ClassAndMethod, method display options = None)\r\n[17:03:34] info: Discovered:  System.Data.Common.Tests.dll (found 1787 of 1813 test cases)\r\n[17:03:34] info: Starting:    System.Data.Common.Tests.dll\r\n[17:03:37] fail: [FAIL] System.Data.Tests.AppDomainsAndFormatInfo.Bug55978\r\n[17:03:37] info: Assert.Equal() Failure\r\n[17:03:37] info: Expected: 2\r\n[17:03:37] info: Actual:   3\r\n[17:03:37] info:    at System.Data.Tests.AppDomainsAndFormatInfo.Bug55978()\r\n[17:03:37] info:    at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n[17:04:01] info: Finished:    System.Data.Common.Tests.dll\r\n[17:04:01] info: \r\n[17:04:01] info: === TEST EXECUTION SUMMARY ===\r\n[17:04:01] info: Total: 11692, Errors: 0, Failed: 1, Skipped: 10, Time: 26.736458s\r\n```",
                                           "updatedAt":  "2021-02-12T19:26:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxNjM5MDgyOQ==",
                                           "createdAt":  "2021-04-09T04:22:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Also failed in https://github.com/dotnet/runtime/pull/50951/checks?check_run_id=2300492544.",
                                           "updatedAt":  "2021-04-09T04:22:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNjQ1ODU3MQ==",
                                           "createdAt":  "2021-04-26T02:26:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VincentBu",
                                           "body":  "Failed again in [runtime 20210425.28](https://dev.azure.com/dnceng/public/_build/results?buildId=1106929\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=33794782\u0026resultId=121168\u0026paneView=debug)\r\n\r\nFailed test:\r\n```\r\nnet6.0-Browser-Release-wasm-Mono_Release-normal-Ubuntu.1804.Amd64.Open\r\n -System.Data.Tests.AppDomainsAndFormatInfo.Bug55978\r\n```\r\n\r\n**Error message:**\r\n```\r\nAssert.Equal() Failure\r\nExpected: 2\r\nActual:   3\r\n\r\n\r\nStack trace\r\n   at System.Data.Tests.AppDomainsAndFormatInfo.Bug55978()\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n```",
                                           "updatedAt":  "2021-04-26T02:26:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTI3MjUzNQ==",
                                           "createdAt":  "2021-07-13T17:33:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@eerhardt What\u0027s the appropriate action here? I don\u0027t believe we have touched this code in a long time, so it seems likely that if this has recently started failing, then this is due to some wider change.",
                                           "updatedAt":  "2021-07-13T17:33:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTI4NTQ0MA==",
                                           "createdAt":  "2021-07-13T17:54:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOByWefg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ajcvickers",
                                                                               "createdAt":  "2021-07-13T17:55:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "As far as I can tell, this is only failing on wasm, even though the label has `arch-x64`. I think that label is a mistake because the first instance of this failing says:\r\n\r\n```\r\nnet6.0-Browser-Release-wasm-Mono_Release-wasmtestonbrowser-Ubuntu.1804.Amd64.Open\r\n```\r\n\r\nI think it was running browser-wasm on an x64 machine. This is a wasm bug. Fixing the labels.",
                                           "updatedAt":  "2021-07-13T17:54:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTI4NTU5NA==",
                                           "createdAt":  "2021-07-13T17:54:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nRun: [runtime 20210206.8](https://dev.azure.com/dnceng/public/_build/results?buildId=981759\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=30771648\u0026resultId=114463\u0026paneView=debug)\r\n\r\nFailed test: \r\n```\r\nnet6.0-Browser-Release-wasm-Mono_Release-wasmtestonbrowser-Ubuntu.1804.Amd64.Open\r\n\r\n  -System.Data.Tests.AppDomainsAndFormatInfo.Bug55978\r\n```\r\n\r\n**Error message:**\r\n```\r\nAssert.Equal() Failure\r\nExpected: 2\r\nActual:   3\r\n\r\n\r\nStack trace\r\n   at System.Data.Tests.AppDomainsAndFormatInfo.Bug55978()\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVincentBu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Data`, `os-linux`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-13T17:54:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41Lnrl",
                                           "createdAt":  "2021-08-03T23:42:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "radical",
                                           "body":  "Failed again - https://dev.azure.com/dnceng/public/_build/results?buildId=1274300\u0026view=logs\u0026jobId=108d2c4a-8a62-5a58-8dad-8e1042acc93c\u0026j=108d2c4a-8a62-5a58-8dad-8e1042acc93c\u0026t=568f884b-cc12-5fd3-e7fe-790b5ac403f4 on https://github.com/dotnet/runtime/pull/56802/checks?check_run_id=3236115645\r\n\r\n@lewing do you think this needs to be looked at for 6.0? It has happened only [thrice in the last month](https://runfo.azurewebsites.net/search/tests/?q=started%3A%7E30+definition%3Aruntime+result%3Afailed+name%3A%22system.data.tests.appdomainsandformatinfo.bug55978%22). But since it\u0027s happening only on wasm, and is sporadic, I wonder if it might be hiding some weird bug.",
                                           "updatedAt":  "2021-08-03T23:42:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41L6k_",
                                           "createdAt":  "2021-08-04T02:42:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "The test has something to do with dates/times, so it\u0027s possible that it only fails at certain dates/times like at midnight etc.\r\n\r\n",
                                           "updatedAt":  "2021-08-04T02:42:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41NDXN",
                                           "createdAt":  "2021-08-04T12:24:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "@radical we could try improving test assertions so that it was clear how it is failing",
                                           "updatedAt":  "2021-08-04T12:24:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41NYqX",
                                           "createdAt":  "2021-08-04T14:21:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB1E-Dg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lewing",
                                                                               "createdAt":  "2021-08-04T14:30:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "radical",
                                           "body":  "Opened a PR that will dump some info when the test fails - https://github.com/dotnet/runtime/pull/56838",
                                           "updatedAt":  "2021-08-04T14:21:45Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "Test failed : System.Data.Tests.AppDomainsAndFormatInfo.Bug55978",
        "labels":  [
                       "arch-wasm",
                       "area-System.Data",
                       "os-linux"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48893",
        "createdAt":  "2021-02-25T07:35:28Z",
        "number":  48893,
        "author":  "Zheng-Li01",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-31T17:20:00Z",
        "body":  "* .NET Core Version: \r\n.NET 6.0.100-preview.3.21123.4\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nMissing the description for some properties \u0026 events of migrated DataSet, DirectorySearcher, DirectoryEntry, PerformanceCounte controls.\r\n\r\n**Expected behavior:**\r\nThere have the description for some properties \u0026 events of migrated DataSet control.\r\n\r\n**Minimal repro:**\r\n1. Extract the attached application([FraTestingNewIssue.zip](https://github.com/dotnet/winforms/files/6041197/FraTestingNewIssue.zip)).\r\n2. Open the Form1.cs[Deisgn], and select the dataSet1 control.\r\n3. Observe the description of CaseSensitive property in the property browser window.\r\n![image](https://user-images.githubusercontent.com/38325459/109118990-0a29de00-777f-11eb-8d45-2acdab0beed2.png)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONGtMZw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzU4Nzg2Nw==",
                                           "createdAt":  "2021-03-01T02:14:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RussKie",
                                           "body":  "These types belong to dotnet/runtime, and AFAIK the runtime does not maintain any attributes or is being localised.\r\n\r\nE.g. [.NET Framework version](https://referencesource.microsoft.com/#System.Data/fx/src/data/System/Data/DataSet.cs,667) vs [.NET version](https://github.com/dotnet/runtime/blob/56b2fa93da517e3812456d8909454020773a242a/src/libraries/System.Data.Common/src/System/Data/DataSet.cs#L725-L727)\r\n\r\nDeferring to respective owners to comment.",
                                           "updatedAt":  "2021-03-01T02:14:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzU4Nzk0Ng==",
                                           "createdAt":  "2021-03-01T02:15:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @safern\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n* .NET Core Version: \r\n.NET 6.0.100-preview.3.21123.4\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nMissing the description for some properties \u0026 events of migrated DataSet, DirectorySearcher, DirectoryEntry, PerformanceCounte controls.\r\n\r\n**Expected behavior:**\r\nThere have the description for some properties \u0026 events of migrated DataSet control.\r\n\r\n**Minimal repro:**\r\n1. Extract the attached application([FraTestingNewIssue.zip](https://github.com/dotnet/winforms/files/6041197/FraTestingNewIssue.zip)).\r\n2. Open the Form1.cs[Deisgn], and select the dataSet1 control.\r\n3. Observe the description of CaseSensitive property in the property browser window.\r\n![image](https://user-images.githubusercontent.com/38325459/109118990-0a29de00-777f-11eb-8d45-2acdab0beed2.png)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eZheng-Li01\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-01T02:15:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzU4ODA2Mg==",
                                           "createdAt":  "2021-03-01T02:15:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n* .NET Core Version: \r\n.NET 6.0.100-preview.3.21123.4\r\n\r\n* Have you experienced this same bug with .NET Framework?: \r\nNo\r\n\r\n**Problem description:**\r\nMissing the description for some properties \u0026 events of migrated DataSet, DirectorySearcher, DirectoryEntry, PerformanceCounte controls.\r\n\r\n**Expected behavior:**\r\nThere have the description for some properties \u0026 events of migrated DataSet control.\r\n\r\n**Minimal repro:**\r\n1. Extract the attached application([FraTestingNewIssue.zip](https://github.com/dotnet/winforms/files/6041197/FraTestingNewIssue.zip)).\r\n2. Open the Form1.cs[Deisgn], and select the dataSet1 control.\r\n3. Observe the description of CaseSensitive property in the property browser window.\r\n![image](https://user-images.githubusercontent.com/38325459/109118990-0a29de00-777f-11eb-8d45-2acdab0beed2.png)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eZheng-Li01\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.ComponentModel`, `area-System.Data`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-01T02:15:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTI5NTM2OQ==",
                                           "createdAt":  "2021-07-13T18:09:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@KlausLoeffelmann Any idea what might be going on here? We\u0027re not sure how the designer and the runtime interact in cases like this.",
                                           "updatedAt":  "2021-07-13T18:09:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTQ0NzE0Mw==",
                                           "createdAt":  "2021-07-13T22:27:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RussKie",
                                           "body":  "@ajcvickers this is due to the loss of this attribute: https://referencesource.microsoft.com/#System.Data/fx/src/data/System/Data/DataSet.cs,529",
                                           "updatedAt":  "2021-07-13T22:27:02Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Missing the description for some properties \u0026 events of migrated DataSet control",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49922",
        "createdAt":  "2021-03-20T03:11:01Z",
        "number":  49922,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-31T17:20:06Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity2.visualstudio.com/t/DatasetGetXml-har-changed-from-netcor/1272596)._\r\n\r\n---\r\nI am serializing/deserializing a DataSet. It fails after updating to net5.\r\n\r\nThere is a difference in the result from DataSet.GetXml() between the 2 versions\r\n\r\nExample:\r\n\r\nnetcore3.1 returns:\r\n\r\n```xml\r\n\u003cNewDataSet\u003e\r\n  \u003copening\u003e\r\n    \u003cAndelsforeningen_x0020_Skt._x0020_Pauls_x0020_Gade_x0020_8B xsi:type=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eKonto\u003c/Andelsforeningen_x0020_Skt._x0020_Pauls_x0020_Gade_x0020_8B\u003e\r\n    \u003cColumn7 xsi:type=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eIndled\u003c/Column7\u003e\r\n    \u003cColumn8 xsi:type=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eEft.p\u003c/Column8\u003e\r\n    \u003c_x0037_0.03.10 xsi:type=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eAdj\u003c/_x0037_0.03.10\u003e\r\n  \u003c/opening\u003e\r\n\u003c/NewDataSet\u003e\r\n```\r\n\r\nnet5 returns:\r\n\r\n```xml\r\n\u003cNewDataSet\u003e\r\n  \u003copening\u003e\r\n    \u003cAndelsforeningen_x0020_Skt._x0020_Pauls_x0020_Gade_x0020_8B xsi:type=\"xs:string\" xs:xmlns=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eKonto\u003c/Andelsforeningen_x0020_Skt._x0020_Pauls_x0020_Gade_x0020_8B\u003e\r\n    \u003cColumn7 xsi:type=\"xs:string\" xs:xmlns=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eIndled\u003c/Column7\u003e\r\n    \u003cColumn8 xsi:type=\"xs:string\" xs:xmlns=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eEft.p\u003c/Column8\u003e\r\n    \u003c_x0037_0.03.10 xsi:type=\"xs:string\" xs:xmlns=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eAdj\u003c/_x0037_0.03.10\u003e\r\n  \u003c/opening\u003e\r\n\u003c/NewDataSet\u003e\r\n```\r\n\r\nThere is an additional xs:xmlns=\"xs:string\" in each segment\r\n\r\nI load the xml string into a DataSet this way:\r\n\r\n```C#\r\nvar stringReader = new StringReader(xml);\r\nfullDataSet.ReadXml(stringReader);\r\n```\r\n\r\nIt still works fine with the old xml result, but the new which incudes the additional xs:xmlns=\"xs:string\" does load anything.\r\n\r\n---\r\n### Original Comments\r\n\r\n#### Feedback Bot on 12/1/2020, 00:23 AM: \r\n\r\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\r\n\r\n\r\n---\r\n### Original Solutions\r\n\r\n#### Kim Hansen solved on 11/30/2020, 06:50 AM, 0 votes: \r\n\r\n\u003cp\u003e[Workaround]\u003cbr\u003e\r\nThe xml from a DataSet is still changed, when writing to a file.\u003cbr\u003e\r\nBut it works, if You read that file into a DataSet again.\u003c/p\u003e\r\n\u003cp\u003eFirst write DataSet to xml-file\u003cbr\u003e\r\n\u003c/p\u003e\r\n\r\n```C#\r\nusing (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create))\r\n{\r\n    using (var xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode))\r\n    {\r\n        dataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);\r\n    }\r\n}\r\n```\r\n\u003cp\u003eThe read it again. This time it works.\u003cbr\u003e\r\n\u003c/p\u003e\r\n\r\n```C#\r\nusing (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open))\r\n{\r\n    using (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream))\r\n    {\r\n        newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);\r\n    }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONGjygQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzIzNDYxNQ==",
                                           "createdAt":  "2021-03-20T03:11:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @buyaa-n, @krwq\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity2.visualstudio.com/t/DatasetGetXml-har-changed-from-netcor/1272596)._\n\n---\nI am serializing/deserializing a DataSet. It fails after updating to net5.\n\nThere is a difference in the result from DataSet.GetXml() between the 2 versions\n\nExample:\n\nnetcore3.1 returns:\n\n\u003cNewDataSet\u003e\n  \u003copening\u003e\n    \u003cAndelsforeningen_x0020_Skt._x0020_Pauls_x0020_Gade_x0020_8B xsi:type=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eKonto\u003c/Andelsforeningen_x0020_Skt._x0020_Pauls_x0020_Gade_x0020_8B\u003e\n    \u003cColumn7 xsi:type=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eIndled\u003c/Column7\u003e\n    \u003cColumn8 xsi:type=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eEft.p\u003c/Column8\u003e\n    \u003c_x0037_0.03.10 xsi:type=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eAdj\u003c/_x0037_0.03.10\u003e\n  \u003c/opening\u003e\n\u003c/NewDataSet\u003e\n\nnet5 returns:\n\n\u003cNewDataSet\u003e\n  \u003copening\u003e\n    \u003cAndelsforeningen_x0020_Skt._x0020_Pauls_x0020_Gade_x0020_8B xsi:type=\"xs:string\" xs:xmlns=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eKonto\u003c/Andelsforeningen_x0020_Skt._x0020_Pauls_x0020_Gade_x0020_8B\u003e\n    \u003cColumn7 xsi:type=\"xs:string\" xs:xmlns=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eIndled\u003c/Column7\u003e\n    \u003cColumn8 xsi:type=\"xs:string\" xs:xmlns=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eEft.p\u003c/Column8\u003e\n    \u003c_x0037_0.03.10 xsi:type=\"xs:string\" xs:xmlns=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eAdj\u003c/_x0037_0.03.10\u003e\n  \u003c/opening\u003e\n\u003c/NewDataSet\u003e\n\nThere is an additional xs:xmlns=\"xs:string\" in each segment\n\nI load the xml string into a DataSet this way:\nvar stringReader = new StringReader(xml);\nfullDataSet.ReadXml(stringReader);\n\nIt still works fine with the old xml result, but the new which incudes the additional xs:xmlns=\"xs:string\" does load anything.\n\n---\n### Original Comments\n\n#### Feedback Bot on 12/1/2020, 00:23 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n\n---\n### Original Solutions\n\n#### Kim Hansen solved on 11/30/2020, 06:50 AM, 0 votes: \n\n\u003cp\u003e[Workaround]\u003cbr\u003e\nThe xml from a DataSet is still changed, when writing to a file.\u003cbr\u003e\nBut it works, if You read that file into a DataSet again.\u003c/p\u003e\n\u003cp\u003eFirst write DataSet to xml-file\u003cbr\u003e\nusing (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create))\u003cbr\u003e\n{\u003cbr\u003e\nusing (var xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode))\u003cbr\u003e\n{\u003cbr\u003e\ndataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003eThe read it again. This time it works.\u003cbr\u003e\nusing (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open))\u003cbr\u003e\n{\u003cbr\u003e\nusing (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream))\u003cbr\u003e\n{\u003cbr\u003e\nnewDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003c/p\u003e\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-20T03:11:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzI1NDQ3MA==",
                                           "createdAt":  "2021-03-20T05:38:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "+ @ajcvickers as System.Data owner",
                                           "updatedAt":  "2021-03-20T05:38:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwOTczMDUwNA==",
                                           "createdAt":  "2021-03-29T21:35:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity2.visualstudio.com/t/DatasetGetXml-har-changed-from-netcor/1272596)._\n\n---\nI am serializing/deserializing a DataSet. It fails after updating to net5.\n\nThere is a difference in the result from DataSet.GetXml() between the 2 versions\n\nExample:\n\nnetcore3.1 returns:\n\n\u003cNewDataSet\u003e\n  \u003copening\u003e\n    \u003cAndelsforeningen_x0020_Skt._x0020_Pauls_x0020_Gade_x0020_8B xsi:type=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eKonto\u003c/Andelsforeningen_x0020_Skt._x0020_Pauls_x0020_Gade_x0020_8B\u003e\n    \u003cColumn7 xsi:type=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eIndled\u003c/Column7\u003e\n    \u003cColumn8 xsi:type=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eEft.p\u003c/Column8\u003e\n    \u003c_x0037_0.03.10 xsi:type=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eAdj\u003c/_x0037_0.03.10\u003e\n  \u003c/opening\u003e\n\u003c/NewDataSet\u003e\n\nnet5 returns:\n\n\u003cNewDataSet\u003e\n  \u003copening\u003e\n    \u003cAndelsforeningen_x0020_Skt._x0020_Pauls_x0020_Gade_x0020_8B xsi:type=\"xs:string\" xs:xmlns=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eKonto\u003c/Andelsforeningen_x0020_Skt._x0020_Pauls_x0020_Gade_x0020_8B\u003e\n    \u003cColumn7 xsi:type=\"xs:string\" xs:xmlns=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eIndled\u003c/Column7\u003e\n    \u003cColumn8 xsi:type=\"xs:string\" xs:xmlns=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eEft.p\u003c/Column8\u003e\n    \u003c_x0037_0.03.10 xsi:type=\"xs:string\" xs:xmlns=\"xs:string\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\u003eAdj\u003c/_x0037_0.03.10\u003e\n  \u003c/opening\u003e\n\u003c/NewDataSet\u003e\n\nThere is an additional xs:xmlns=\"xs:string\" in each segment\n\nI load the xml string into a DataSet this way:\nvar stringReader = new StringReader(xml);\nfullDataSet.ReadXml(stringReader);\n\nIt still works fine with the old xml result, but the new which incudes the additional xs:xmlns=\"xs:string\" does load anything.\n\n---\n### Original Comments\n\n#### Feedback Bot on 12/1/2020, 00:23 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n\n---\n### Original Solutions\n\n#### Kim Hansen solved on 11/30/2020, 06:50 AM, 0 votes: \n\n\u003cp\u003e[Workaround]\u003cbr\u003e\nThe xml from a DataSet is still changed, when writing to a file.\u003cbr\u003e\nBut it works, if You read that file into a DataSet again.\u003c/p\u003e\n\u003cp\u003eFirst write DataSet to xml-file\u003cbr\u003e\nusing (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create))\u003cbr\u003e\n{\u003cbr\u003e\nusing (var xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode))\u003cbr\u003e\n{\u003cbr\u003e\ndataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003c/p\u003e\n\u003cp\u003eThe read it again. This time it works.\u003cbr\u003e\nusing (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open))\u003cbr\u003e\n{\u003cbr\u003e\nusing (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream))\u003cbr\u003e\n{\u003cbr\u003e\nnewDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);\u003cbr\u003e\n}\u003cbr\u003e\n}\u003c/p\u003e\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Data`, `area-System.Xml`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-29T21:35:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3OTI5MzA1Nw==",
                                           "createdAt":  "2021-07-13T18:06:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "Please post or attach the code that generates the data set.",
                                           "updatedAt":  "2021-07-13T18:06:03Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Dataset.GetXml() har changed from netcore3.1 to net5",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/51369",
        "createdAt":  "2021-04-16T09:19:42Z",
        "number":  51369,
        "author":  "radical",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-12T10:26:26Z",
        "body":  "[System.Data.Common.Tests](https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-48226-merge-aefda0fb1dc846088b/System.Data.Common.Tests/console.019086d7.log?sv=2019-07-07\u0026se=2021-05-06T05%3A54%3A59Z\u0026sr=c\u0026sp=rl\u0026sig=YzKcg6gONs0lcD0%2FuFKJbSnMTU6e%2F1f0HWmaDDwYAYQ%3D)\r\n\r\n```\r\nSystem.Data.Tests.XmlDataReaderTest.XmlLoadTest\r\n\r\nSystem.ArgumentException : Column requires a valid DataType.\r\n\r\n   at System.Data.DataColumn.set_DataType(Type value)\r\n   at System.Data.XSDSchema.SetProperties(Object instance, XmlAttribute[] attrs)\r\n   at System.Data.XSDSchema.HandleElementColumn(XmlSchemaElement elem, DataTable table, Boolean isBase)\r\n   at System.Data.XSDSchema.HandleParticle(XmlSchemaParticle pt, DataTable table, ArrayList tableChildren, Boolean isBase)\r\n   at System.Data.XSDSchema.HandleComplexType(XmlSchemaComplexType ct, DataTable table, ArrayList tableChildren, Boolean isNillable)\r\n   at System.Data.XSDSchema.InstantiateTable(XmlSchemaElement node, XmlSchemaComplexType typeNode, Boolean isRef)\r\n   at System.Data.XSDSchema.HandleTable(XmlSchemaElement node)\r\n   at System.Data.XSDSchema.HandleDataSet(XmlSchemaElement node, Boolean isNewDataSet)\r\n   at System.Data.XSDSchema.LoadSchema(XmlSchemaSet schemaSet, DataSet ds)\r\n   at System.Data.DataSet.ReadXSDSchema(XmlReader reader, Boolean denyResolving)\r\n   at System.Data.DataSet.ReadXmlSchema(XmlReader reader, Boolean denyResolving)\r\n   at System.Data.DataSet.ReadXmlSchema(TextReader reader)\r\n   at System.Data.Tests.XmlDataReaderTest.XmlLoadTest()\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]\u003e\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMSsRng==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMTA0Mjc3OA==",
                                           "createdAt":  "2021-04-16T09:19:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n[Log](https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-48226-merge-aefda0fb1dc846088b/System.Data.Common.Tests/console.019086d7.log?sv=2019-07-07\u0026se=2021-05-06T05%3A54%3A59Z\u0026sr=c\u0026sp=rl\u0026sig=YzKcg6gONs0lcD0%2FuFKJbSnMTU6e%2F1f0HWmaDDwYAYQ%3D)\r\n\r\n```\r\nSystem.Data.Tests.XmlDataReaderTest.XmlLoadTest\r\n\r\nSystem.ArgumentException : Column requires a valid DataType.\r\n\r\n   at System.Data.DataColumn.set_DataType(Type value)\r\n   at System.Data.XSDSchema.SetProperties(Object instance, XmlAttribute[] attrs)\r\n   at System.Data.XSDSchema.HandleElementColumn(XmlSchemaElement elem, DataTable table, Boolean isBase)\r\n   at System.Data.XSDSchema.HandleParticle(XmlSchemaParticle pt, DataTable table, ArrayList tableChildren, Boolean isBase)\r\n   at System.Data.XSDSchema.HandleComplexType(XmlSchemaComplexType ct, DataTable table, ArrayList tableChildren, Boolean isNillable)\r\n   at System.Data.XSDSchema.InstantiateTable(XmlSchemaElement node, XmlSchemaComplexType typeNode, Boolean isRef)\r\n   at System.Data.XSDSchema.HandleTable(XmlSchemaElement node)\r\n   at System.Data.XSDSchema.HandleDataSet(XmlSchemaElement node, Boolean isNewDataSet)\r\n   at System.Data.XSDSchema.LoadSchema(XmlSchemaSet schemaSet, DataSet ds)\r\n   at System.Data.DataSet.ReadXSDSchema(XmlReader reader, Boolean denyResolving)\r\n   at System.Data.DataSet.ReadXmlSchema(XmlReader reader, Boolean denyResolving)\r\n   at System.Data.DataSet.ReadXmlSchema(TextReader reader)\r\n   at System.Data.Tests.XmlDataReaderTest.XmlLoadTest()\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]\u003e\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eradical\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `disabled-test`, `trimming-for-aot`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-16T09:19:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMTA0MjgyNA==",
                                           "createdAt":  "2021-04-16T09:19:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n[Log](https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-48226-merge-aefda0fb1dc846088b/System.Data.Common.Tests/console.019086d7.log?sv=2019-07-07\u0026se=2021-05-06T05%3A54%3A59Z\u0026sr=c\u0026sp=rl\u0026sig=YzKcg6gONs0lcD0%2FuFKJbSnMTU6e%2F1f0HWmaDDwYAYQ%3D)\r\n\r\n```\r\nSystem.Data.Tests.XmlDataReaderTest.XmlLoadTest\r\n\r\nSystem.ArgumentException : Column requires a valid DataType.\r\n\r\n   at System.Data.DataColumn.set_DataType(Type value)\r\n   at System.Data.XSDSchema.SetProperties(Object instance, XmlAttribute[] attrs)\r\n   at System.Data.XSDSchema.HandleElementColumn(XmlSchemaElement elem, DataTable table, Boolean isBase)\r\n   at System.Data.XSDSchema.HandleParticle(XmlSchemaParticle pt, DataTable table, ArrayList tableChildren, Boolean isBase)\r\n   at System.Data.XSDSchema.HandleComplexType(XmlSchemaComplexType ct, DataTable table, ArrayList tableChildren, Boolean isNillable)\r\n   at System.Data.XSDSchema.InstantiateTable(XmlSchemaElement node, XmlSchemaComplexType typeNode, Boolean isRef)\r\n   at System.Data.XSDSchema.HandleTable(XmlSchemaElement node)\r\n   at System.Data.XSDSchema.HandleDataSet(XmlSchemaElement node, Boolean isNewDataSet)\r\n   at System.Data.XSDSchema.LoadSchema(XmlSchemaSet schemaSet, DataSet ds)\r\n   at System.Data.DataSet.ReadXSDSchema(XmlReader reader, Boolean denyResolving)\r\n   at System.Data.DataSet.ReadXmlSchema(XmlReader reader, Boolean denyResolving)\r\n   at System.Data.DataSet.ReadXmlSchema(TextReader reader)\r\n   at System.Data.Tests.XmlDataReaderTest.XmlLoadTest()\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]\u003e\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eradical\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Data`, `disabled-test`, `trimming-for-aot`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-04-16T09:19:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNDkwNjE0Mg==",
                                           "createdAt":  "2021-04-22T14:45:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "fyi @krwq - since you are addressing ILLink warnings in this assembly.",
                                           "updatedAt":  "2021-04-22T14:45:36Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[trimming] System.Data.Tests.XmlDataReaderTest.XmlLoadTest",
        "labels":  [
                       "arch-wasm",
                       "area-System.Data",
                       "disabled-test",
                       "os-ios",
                       "trimming-for-aot"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/74189",
        "createdAt":  "2021-06-11T15:52:19Z",
        "number":  74189,
        "author":  "andy1547",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7sLVQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stawr93",
                                            "createdAt":  "2021-08-09T17:22:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AvremelM",
                                            "createdAt":  "2024-10-09T14:40:56Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-09-06T14:21:14Z",
        "body":  "We\u0027re beginning the adventure of migrating a large .NET Framework 4.7.2 application (200+ projects) to .NET 5. The plan is to migrate as many projects as possible to .NET Standard 2.0 before jumping to .NET 5.\r\n\r\nA large quantity of our utility projects make an indirect reference to `DbProviderFactories` for fetching a database factory, \r\nunfortunately this class isn\u0027t available in .NET Standard 2.0. I understand that it was added in .NET Standard 2.1 with some additional programmatic methods for registering providers (as there was no equivalent of the machine.config provider configuration in .NET Core).\r\n\r\nWe could potentially migrate to the same consumption pattern as .NET Core, having the ability to register providers programmatically with `DbProviderFactories.RegisterFactory(string providerInvariantName, string factoryTypeAssemblyQualifiedName)` in .NET Framework projects. Any providers declared in machine.config / app.config would be ignored (only the programmatic registration would apply). \r\n\r\nIs there a workaround while we migrate our application to .NET 5?\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSMQgtw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5IuEeI",
                                           "createdAt":  "2021-08-09T17:24:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stawr93",
                                           "body":  "Encored same situation - wanna target .netstandard in a project that is using DbProviderFactories. It has been introduced in .netstandard 2.1, but at the moment we are unable to target it - we use sdk v2.1.402.\r\n\r\nLooking for some workaround.",
                                           "updatedAt":  "2021-08-09T17:24:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IuEeM",
                                           "createdAt":  "2021-11-25T03:43:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gumbarros",
                                           "body":  "@stawr93, I developed this workaround with some deep research. Credits to [RickStrahl / Westwind.Utilities](https://github.com/RickStrahl/Westwind.Utilities) for the assemblies part.\r\n\r\nHelper class:\r\n```csharp\r\npublic class ReflectionUtils\r\n    {\r\n\r\n        /// \u003csummary\u003e\r\n        /// Try to load an assembly into the application\u0027s app domain.\r\n        /// Loads by name first then checks for filename\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"assemblyName\"\u003eAssembly name or full path\u003c/param\u003e\r\n        /// \u003creturns\u003enull on failure\u003c/returns\u003e\r\n        public static Assembly LoadAssembly(string assemblyName)\r\n        {\r\n            Assembly assembly = Assembly.Load(assemblyName);\r\n            \r\n\r\n            if (assembly != null)\r\n                return assembly;\r\n\r\n            if (!File.Exists(assemblyName)) return null;\r\n            assembly = Assembly.LoadFrom(assemblyName);\r\n                \r\n            return assembly;\r\n        }\r\n\r\n        /// \u003csummary\u003e\r\n        /// Helper routine that looks up a type name and tries to retrieve the\r\n        /// full type reference using GetType() and if not found looking \r\n        /// in the actively executing assemblies and optionally loading\r\n        /// the specified assembly name.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"typeName\"\u003etype to load\u003c/param\u003e\r\n        /// \u003cparam name=\"assemblyName\"\u003e\r\n        /// Optional assembly name to load from if type cannot be loaded initially. \r\n        /// Use for lazy loading of assemblies without taking a type dependency.\r\n        /// \u003c/param\u003e\r\n        /// \u003creturns\u003enull\u003c/returns\u003e\r\n        public static Type GetTypeFromName(string typeName, string assemblyName)\r\n        {\r\n            var type = Type.GetType(typeName, false);\r\n            if (type != null)\r\n                return type;\r\n\r\n            var assemblies = AppDomain.CurrentDomain.GetAssemblies();\r\n            // try to find manually\r\n            foreach (Assembly asm in assemblies)\r\n            {\r\n                type = asm.GetType(typeName, false);\r\n\r\n                if (type != null)\r\n                    break;\r\n            }\r\n            if (type != null)\r\n                return type;\r\n\r\n            // see if we can load the assembly\r\n            if (string.IsNullOrEmpty(assemblyName)) return null;\r\n            var a = LoadAssembly(assemblyName);\r\n            if (a == null) return null;\r\n            type = Type.GetType(typeName, false);\r\n            return type;\r\n        }\r\n\r\n        /// \u003csummary\u003e\r\n        /// Overload for backwards compatibility which only tries to load\r\n        /// assemblies that are already loaded in memory.\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"typeName\"\u003e\u003c/param\u003e\r\n        /// \u003creturns\u003e\u003c/returns\u003e        \r\n        public static Type GetTypeFromName(string typeName)\r\n        {\r\n            return GetTypeFromName(typeName, null);\r\n        }\r\n\r\n        /// \u003csummary\u003e\r\n        /// Retrieves a value from  a static property by specifying a type full name and property\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"typeName\"\u003eFull type name (namespace.class)\u003c/param\u003e\r\n        /// \u003cparam name=\"property\"\u003eProperty to get value from\u003c/param\u003e\r\n        /// \u003creturns\u003e\u003c/returns\u003e\r\n        public static object GetStaticProperty(string typeName, string property)\r\n        {\r\n            Type type = GetTypeFromName(typeName);\r\n            return type == null ? null : GetStaticProperty(type, property);\r\n        }\r\n\r\n        /// \u003csummary\u003e\r\n        /// Returns a static property from a given type\r\n        /// \u003c/summary\u003e\r\n        /// \u003cparam name=\"type\"\u003eType instance for the static property\u003c/param\u003e\r\n        /// \u003cparam name=\"property\"\u003eProperty name as a string\u003c/param\u003e\r\n        /// \u003creturns\u003e\u003c/returns\u003e\r\n        public static object GetStaticProperty(Type type, string property)\r\n        {\r\n            object result;\r\n            try\r\n            {\r\n                result = type.InvokeMember(property, BindingFlags.Static | BindingFlags.Public | BindingFlags.GetField | BindingFlags.GetProperty, null, type, null);\r\n            }\r\n            catch\r\n            {\r\n                return null;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n```\r\nYou can use DbProviderFactories from this class:\r\n```csharp\r\npublic static class DataAccessProvider\r\n    {\r\n        public enum DataAccessProviderTypes\r\n        {\r\n            SqlServer,\r\n            SqLite,\r\n            MySql,\r\n            PostgreSql,\r\n\r\n#if NETFULL\r\n    OleDb,\r\n    SqlServerCompact\r\n#endif\r\n        }\r\n\r\n        public static DbProviderFactory GetDbProviderFactory(string dbProviderFactoryTypename, string assemblyName)\r\n        {\r\n            var instance = ReflectionUtils.GetStaticProperty(dbProviderFactoryTypename, \"Instance\");\r\n            if (instance == null)\r\n            {\r\n                var a = ReflectionUtils.LoadAssembly(assemblyName);\r\n                if (a != null)\r\n                    instance = ReflectionUtils.GetStaticProperty(dbProviderFactoryTypename, \"Instance\");\r\n            }\r\n\r\n            if (instance == null)\r\n                throw new InvalidOperationException(string.Format(\"ERROR\", dbProviderFactoryTypename));\r\n\r\n            return instance as DbProviderFactory;\r\n        }\r\n\r\n        public static DbProviderFactory GetDbProviderFactory(DataAccessProviderTypes type)\r\n        {\r\n            switch (type)\r\n            {\r\n                case DataAccessProviderTypes.SqlServer:\r\n                    return SqlClientFactory.Instance; // this library has a ref to SqlClient so this works\r\n                case DataAccessProviderTypes.SqLite:\r\n#if NETFULL\r\n        return GetDbProviderFactory(\"System.Data.SQLite.SQLiteFactory\", \"System.Data.SQLite\");\r\n#else\r\n                    return GetDbProviderFactory(\"Microsoft.Data.Sqlite.SqliteFactory\", \"Microsoft.Data.Sqlite\");\r\n#endif\r\n                case DataAccessProviderTypes.MySql:\r\n                    return GetDbProviderFactory(\"MySql.Data.MySqlClient.MySqlClientFactory\", \"MySql.Data\");\r\n                case DataAccessProviderTypes.PostgreSql:\r\n                    return GetDbProviderFactory(\"Npgsql.NpgsqlFactory\", \"Npgsql\");\r\n                default:\r\n#if NETFULL\r\n    case DataAccessProviderTypes.OleDb:\r\n        return System.Data.OleDb.OleDbFactory.Instance;\r\n    case DataAccessProviderTypes.SqlServerCompact:\r\n        return DbProviderFactories.GetFactory(\"System.Data.SqlServerCe.4.0\");                \r\n#endif\r\n\r\n                    throw new NotSupportedException($\"Not supported {type}\");\r\n            }\r\n        }\r\n    \r\n        public static DbProviderFactory GetDbProviderFactory(string providerName)\r\n        {\r\n#if NETFULL\r\n    return DbProviderFactories.GetFactory(providerName);\r\n#else\r\n            providerName = providerName.ToLower();\r\n\r\n            switch (providerName)\r\n            {\r\n                case \"system.data.sqlclient\":\r\n                    return GetDbProviderFactory(DataAccessProviderTypes.SqlServer);\r\n                case \"system.data.sqlite\":\r\n                case \"microsoft.data.sqlite\":\r\n                    return GetDbProviderFactory(DataAccessProviderTypes.SqLite);\r\n                case \"mysql.data.mysqlclient\":\r\n                case \"mysql.data\":\r\n                    return GetDbProviderFactory(DataAccessProviderTypes.MySql);\r\n                case \"npgsql\":\r\n                    return GetDbProviderFactory(DataAccessProviderTypes.PostgreSql);\r\n                default:\r\n                    throw new NotSupportedException($\"Not supported {providerName}\");\r\n#endif\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n\r\n",
                                           "updatedAt":  "2021-11-25T03:47:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IuEeP",
                                           "createdAt":  "2021-11-25T17:08:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "I know this issue is a bit old so my feedback here may be a little late, but if your end goal is to migrate to .NET 5, have you considered having these central libraries multi target (for example, net48 and net5.0) instead of forcing them down to .NET Standard? Usually .NET Standard is the right choice when all of the API you need is available, but when it\u0027s not, then multi targeting would be the recommended way. That way you can still consume the project on the .NET Framework side, as well as be ready to make the switch to .NET 5. The only downside of this approach, is that you may have some cases where you need to ifdef some sections of the code to fork between both implementations, but that is very likely to be much less work than the port to .NET Standard specially if there are some APIs that you need and aren\u0027t available. Just my 2 cents.",
                                           "updatedAt":  "2021-11-25T17:08:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IuEeQ",
                                           "createdAt":  "2022-08-18T22:25:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "Moving to dotnet/runtime as this is really an OOB request for .NET functionality, rather than a .NET Standard request (it\u0027s already in 2.1).",
                                           "updatedAt":  "2022-08-18T22:25:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IuEeW",
                                           "createdAt":  "2022-08-18T22:26:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-08-18T22:26:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IxCC3",
                                           "createdAt":  "2022-08-19T15:33:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe\u0027re beginning the adventure of migrating a large .NET Framework 4.7.2 application (200+ projects) to .NET 5. The plan is to migrate as many projects as possible to .NET Standard 2.0 before jumping to .NET 5.\r\n\r\nA large quantity of our utility projects make an indirect reference to `DbProviderFactories` for fetching a database factory, \r\nunfortunately this class isn\u0027t available in .NET Standard 2.0. I understand that it was added in .NET Standard 2.1 with some additional programmatic methods for registering providers (as there was no equivalent of the machine.config provider configuration in .NET Core).\r\n\r\nWe could potentially migrate to the same consumption pattern as .NET Core, having the ability to register providers programmatically with `DbProviderFactories.RegisterFactory(string providerInvariantName, string factoryTypeAssemblyQualifiedName)` in .NET Framework projects. Any providers declared in machine.config / app.config would be ignored (only the programmatic registration would apply). \r\n\r\nIs there a workaround while we migrate our application to .NET 5?\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eandy1547\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Data`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-19T15:33:58Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Provide DbProviderFactories as NuGet Package for .NET Standard 2.0",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57201",
        "createdAt":  "2021-08-11T11:14:38Z",
        "number":  57201,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-08-11T11:15:43Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/DataViewRowFilter-throws-exception-when/1444355)._\n\n---\n[severity:I\u0027m unable to use this version]\r\nHi, \n\nI have created a DataTable as shown below and used it as ItemsSource for a DataGrid. \n\n```\n           DataTable _employeeCollection = new DataTable();\n\n_employeeCollection.Columns.Add(\"S No\");\n            _employeeCollection.Columns.Add(\"Name\");\n            _employeeCollection.Columns.Add(\"Address\", typeof(Address));\n\nvar row = _employeeCollection.NewRow();\n            row[\"S No\"] = \"1\";\n            row[\"Name\"] = \"Nagarjuna\";\n\nvar addr = new Address()\n            {\n                HouseNo = \"26\",\n                Street = \"ArunReddy colony\",\n                Town = \"Chandanagar\",\n                State = \"AP\",\n                PinCode = \"500050\"\n            };\n\nrow[\"Address\"] = addr;\n\n_employeeCollection.Rows.Add(row);\n\nrow = _employeeCollection.NewRow();\n            row[\"S No\"] = \"2\";\n            row[\"Name\"] = \"Sridhar\";\n\naddr = new Address()\n            {\n                HouseNo = \"28\",\n                Street = \"ArunReddy colony\",\n                Town = \"Chandanagar\",\n                State = \"AP\",\n                PinCode = \"500050\"\n            };\n\nrow[\"Address\"] = addr;\n\n_employeeCollection.Rows.Add(row);\n        }\n\npublic class Address\n{\n    public string HouseNo { get; set; }\n    public string Street { get; set; }\n    public string Town { get; set; }\n    public string State { get; set; }\n    public string PinCode { get; set; }\n\npublic override string ToString()\n    {\n        return $\"House No {HouseNo}, Street {Street}, Town {Town}, State {State}, PinCode {PinCode}\";\n    }\n}\n\n```\n\nIn a button click, I have tried to apply RowFilter as shown below. \n\n```\n(this.dataGrid.ItemsSource as DataView). RowFilter = \"([Address] = \u0027House No 28, Street ArunReddy colony, Town Chandanagar, State AP, PinCode 500050\u0027)\";\n\n```\n\nIt throws exception as \"**System.Data.EvaluateException: \u0027Cannot perform \u0027=\u0027 operation on DataGridFilterIssue.Address and System.String.\u0027 **\"\n\nIs there any possibilities to resolve this exception without changing the type of the Address column as String and retaining as it is?\n\nThanks in advance. \n\nRegards,\nMohanram A.\n\n---\n### Original Comments\n\n#### Feedback Bot on 6/9/2021, 07:34 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### Viorel on 6/9/2021, 08:16 PM: \n\n\u003cp\u003eTo compare strings, try this expression:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e( \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.dataGrid.ItemsSource \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDataView\u003c/span\u003e ).RowFilter = \u003cspan class=\"hljs-string\"\u003e\"(Convert([Address], \u0027System.String\u0027) = \u0027House No 28, Street ArunReddy colony, Town Chandanagar, State AP, PinCode 500050\u0027)\"\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\n\n#### Feedback Bot on 8/11/2021, 00:11 PM: \n\n\u003cp\u003eThank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: \u003ca target=\u0027_blank\u0027 href=\"https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2019#faq\"\u003ehttps://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2019#faq\u003c/a\u003e. In case you need answers to common questions or need assisted support, be sure to use \u003ca target=\u0027_blank\u0027 href=\"https://visualstudio.microsoft.com/vs/support/\"\u003ehttps://visualstudio.microsoft.com/vs/support/\u003c/a\u003e. We’ll keep you posted on any updates to this feedback.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONXMrmg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41cyr1",
                                           "createdAt":  "2021-08-11T11:15:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-08-11T11:15:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41cyua",
                                           "createdAt":  "2021-08-11T11:15:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/DataViewRowFilter-throws-exception-when/1444355)._\n\n---\n[severity:I\u0027m unable to use this version]\r\nHi, \n\nI have created a DataTable as shown below and used it as ItemsSource for a DataGrid. \n\n```\n           DataTable _employeeCollection = new DataTable();\n\n_employeeCollection.Columns.Add(\"S No\");\n            _employeeCollection.Columns.Add(\"Name\");\n            _employeeCollection.Columns.Add(\"Address\", typeof(Address));\n\nvar row = _employeeCollection.NewRow();\n            row[\"S No\"] = \"1\";\n            row[\"Name\"] = \"Nagarjuna\";\n\nvar addr = new Address()\n            {\n                HouseNo = \"26\",\n                Street = \"ArunReddy colony\",\n                Town = \"Chandanagar\",\n                State = \"AP\",\n                PinCode = \"500050\"\n            };\n\nrow[\"Address\"] = addr;\n\n_employeeCollection.Rows.Add(row);\n\nrow = _employeeCollection.NewRow();\n            row[\"S No\"] = \"2\";\n            row[\"Name\"] = \"Sridhar\";\n\naddr = new Address()\n            {\n                HouseNo = \"28\",\n                Street = \"ArunReddy colony\",\n                Town = \"Chandanagar\",\n                State = \"AP\",\n                PinCode = \"500050\"\n            };\n\nrow[\"Address\"] = addr;\n\n_employeeCollection.Rows.Add(row);\n        }\n\npublic class Address\n{\n    public string HouseNo { get; set; }\n    public string Street { get; set; }\n    public string Town { get; set; }\n    public string State { get; set; }\n    public string PinCode { get; set; }\n\npublic override string ToString()\n    {\n        return $\"House No {HouseNo}, Street {Street}, Town {Town}, State {State}, PinCode {PinCode}\";\n    }\n}\n\n```\n\nIn a button click, I have tried to apply RowFilter as shown below. \n\n```\n(this.dataGrid.ItemsSource as DataView). RowFilter = \"([Address] = \u0027House No 28, Street ArunReddy colony, Town Chandanagar, State AP, PinCode 500050\u0027)\";\n\n```\n\nIt throws exception as \"**System.Data.EvaluateException: \u0027Cannot perform \u0027=\u0027 operation on DataGridFilterIssue.Address and System.String.\u0027 **\"\n\nIs there any possibilities to resolve this exception without changing the type of the Address column as String and retaining as it is?\n\nThanks in advance. \n\nRegards,\nMohanram A.\n\n---\n### Original Comments\n\n#### Feedback Bot on 6/9/2021, 07:34 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### Viorel on 6/9/2021, 08:16 PM: \n\n\u003cp\u003eTo compare strings, try this expression:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e( \u003cspan class=\"hljs-keyword\"\u003ethis\u003c/span\u003e.dataGrid.ItemsSource \u003cspan class=\"hljs-keyword\"\u003eas\u003c/span\u003e \u003cspan class=\"hljs-built_in\"\u003eDataView\u003c/span\u003e ).RowFilter = \u003cspan class=\"hljs-string\"\u003e\"(Convert([Address], \u0027System.String\u0027) = \u0027House No 28, Street ArunReddy colony, Town Chandanagar, State AP, PinCode 500050\u0027)\"\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\n\n#### Feedback Bot on 8/11/2021, 00:11 PM: \n\n\u003cp\u003eThank you for sharing your feedback! Our teams prioritize action on product issues with broad customer impact. See details at: \u003ca target=\u0027_blank\u0027 href=\"https://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2019#faq\"\u003ehttps://docs.microsoft.com/en-us/visualstudio/ide/report-a-problem?view=vs-2019#faq\u003c/a\u003e. In case you need answers to common questions or need assisted support, be sure to use \u003ca target=\u0027_blank\u0027 href=\"https://visualstudio.microsoft.com/vs/support/\"\u003ehttps://visualstudio.microsoft.com/vs/support/\u003c/a\u003e. We’ll keep you posted on any updates to this feedback.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Data`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-11T11:15:33Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "DataView.RowFilter throws exception when the type of the corresponding column is a custom class",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57206",
        "createdAt":  "2021-08-11T13:27:05Z",
        "number":  57206,
        "author":  "taozuhong",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCxjuWA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "madelson",
                                            "createdAt":  "2023-07-26T20:28:38Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-08-11T15:31:54Z",
        "body":  "### Background and motivation\r\n\r\nI\u0027m developing a database client tool with different drivers(ODBC/OLEDB/SQLite/SQLServer/etc),  I need to execute SQL to fetch data into Datagrid with the same method, so I need to create instances of DataAdapter and DbCommandBuilder,\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace System.Data.Common\r\n{\r\n     public interface IDbConnection : IDisposable\r\n     {\r\n          public virtual System.Data.Common.DbProviderFactory? Factory { get; }\r\n     }\r\n}\r\n``` \r\nor\r\n\r\n```C#\r\nnamespace System.Data.Common\r\n{\r\n      public abstract class DbConnection : System.ComponentModel.Component, IAsyncDisposable, IDisposable, System.Data.IDbConnection\r\n     {\r\n          public virtual System.Data.Common.DbProviderFactory? Factory { get; }\r\n     }\r\n}\r\n```   \r\n\r\n### API Usage\r\n\r\n```C#\r\n// Fancy the value\r\nvar adapter = m_connection.Factory.CreateDataAdapter();\r\nvar command = m_connection.CreateCommand();\r\ncommand .CommandText = sql;\r\nadapter.SelectCommand = command;\r\nadapter.Fill(table);\r\n```     \r\n\r\n```C#\r\npublic virtual async Task\u003cDataTable\u003e execute_as_model_async(string sql)\r\n{\r\n    DataTable table = new DataTable();\r\n\r\n    // log the sql\r\n    LoggingService.info(m_server_setting.uuid, \"SQL: {0}\", sql);\r\n    try {\r\n        var cmd = m_connection.CreateCommand();\r\n        cmd.CommandText = sql;\r\n        var reader = cmd.ExecuteReader();\r\n        DataAdapter adapter = new DataAdapter();\r\n    }\r\n    catch (Exception) {\r\n        throw;\r\n    }\r\n\r\n    LoggingService.info(m_server_setting.uuid, \"affected rows: {0}\", table.Rows.Count);\r\n\r\n    return table;\r\n}\r\n```\r\n\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONXYHWw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41dH3a",
                                           "createdAt":  "2021-08-11T13:27:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nI\u0027m developing a database client tool with different drivers(ODBC/OLEDB/SQLite/SQLServer/etc),  I need to execute SQL to fetch data into Datagrid with the same method, so I need to create instances of DataAdapter and DbCommandBuilder,\n\n### API Proposal\n\n```C#\r\nnamespace System.Data.Common\r\n{\r\n     public interface IDbConnection : IDisposable\r\n     {\r\n          public virtual System.Data.Common.DbProviderFactory? Factory { get; }\r\n     }\r\n}\r\n``` \r\nor\r\n\r\n```C#\r\nnamespace System.Data.Common\r\n{\r\n      public abstract class DbConnection : System.ComponentModel.Component, IAsyncDisposable, IDisposable, System.Data.IDbConnection\r\n     {\r\n          public virtual System.Data.Common.DbProviderFactory? Factory { get; }\r\n     }\r\n}\r\n```   \n\n### API Usage\n\n```C#\r\n// Fancy the value\r\nvar adapter = m_connection.Factory.CreateDataAdapter();\r\nvar command = m_connection.CreateCommand();\r\ncommand .CommandText = sql;\r\nadapter.SelectCommand = command;\r\nadapter.Fill(table);\r\n```     \r\n\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etaozuhong\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Data`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-11T13:27:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41daBE",
                                           "createdAt":  "2021-08-11T14:59:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@taozuhong when developing a database-agnostic tool/framework, you\u0027re typically supposed to start from a DbProviderFactory instance and create connections from there, rather than have an unknown DbConnection from somewhere. Could you provide a bit more context on your scenario?\r\n\r\nNote that changing a protected virtual method to public would be a breaking change which would affect all current ADO.NET providers out there.",
                                           "updatedAt":  "2021-08-11T14:59:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41da0y",
                                           "createdAt":  "2021-08-11T15:03:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODB53Wg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "taozuhong",
                                                                               "createdAt":  "2021-08-11T15:04:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "athinboy",
                                                                               "createdAt":  "2021-08-13T08:02:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2023-07-26T20:28:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@roji Interestingly, we requested this change be made about 8 years ago, but it was rejected at that time. EF6 uses this mechanism to obtain a factory from a given DbConnection, since typically applications use connections, not factories.",
                                           "updatedAt":  "2021-08-11T15:03:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41dbox",
                                           "createdAt":  "2021-08-11T15:07:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "taozuhong",
                                           "body":  "Yes, the connection is created first, then others.\r\n\r\nTo work with different database drivers,  I want to create DB objects(Command/DataAdapter/etc) from the connection, especially database-specific objects, or create them by hard code, it\u0027s awful for that.",
                                           "updatedAt":  "2021-08-11T15:12:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41deEr",
                                           "createdAt":  "2021-08-11T15:19:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@ajcvickers interesting - does it use reflection to get around the fact that it\u0027s protected?\r\n\r\n\u003e To work with different database drivers, I want to create DB objects(Command/DataAdapter/etc) from the connection, especially database-specific objects, or create them by hard code, it\u0027s awful for that.\r\n\r\nMy point above was that in these database-agnostic scenarios, the user is typically supposed to hand you the DbProviderFactory instance rather than a connection. But I can imagine some scenarios where this could be needed - the main issue is breaking change for going from protected -\u003e public...\r\n\r\nBTW note that DbConnection does have a CreateCommand method on it (but nothing to create DataAdapter IIRC).",
                                           "updatedAt":  "2021-08-11T15:19:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41deop",
                                           "createdAt":  "2021-08-11T15:22:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "\u003e My point above was that in these database-agnostic scenarios, the user is typically supposed to hand you the DbProviderFactory instance rather than a connection.\r\n\r\nThis might have been intended, but it\u0027s not the reality. Consider EF6 and EF Core, where you never give us a factory, but it is normal to new up a context with a connection.",
                                           "updatedAt":  "2021-08-11T15:22:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41dfyp",
                                           "createdAt":  "2021-08-11T15:28:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "taozuhong",
                                           "body":  "\u003e BTW note that DbConnection does have a CreateCommand method on it (but nothing to create DataAdapter IIRC).\r\n\r\nFor now, maybe the IDbConnection interface adds the public method  CreateDataAdapter() could solve my problem, but not yet support database-specific operations.\r\n\r\nI think that makes DbProviderFactory as a public member is the best solution.\r\n",
                                           "updatedAt":  "2021-08-11T15:28:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41dgdb",
                                           "createdAt":  "2021-08-11T15:31:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "@taozuhong It is too late to do anything here for .NET 6. We will review again for future releases.",
                                           "updatedAt":  "2021-08-11T15:31:54Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[API Proposal]: make DbConnection\u0027s member DbProviderFactory  as public member",
        "labels":  [
                       "api-suggestion",
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64438",
        "createdAt":  "2022-01-28T08:54:46Z",
        "number":  64438,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-02-02T18:47:41Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Connnection-issues-using-ODBCConnection-/1589446)._\n\n---\nI am cannot connect to a mainframe for query. I am using this code in VS2019 and it works with out issues.  When I use it in VS2022, I get connection error. \n\n```\n        private static readonly string _connectionString = WebConfigurationManager.ConnectionStrings[\"IDMS\"]. ConnectionString;\n\nusing (OdbcConnection connection = new OdbcConnection(_connectionString))\n                {\n                    OdbcCommand command = new OdbcCommand();\n                  \nconnection. Open();\n\n```\nIt throws the exception on  \"connection. Open();\n\n```\nExceptionMessage: \"ERROR [08S01] [CA][CA IDMS ODBC Driver][CA IDMS]DB001061 T0 C-4M387: DTS connect failed\\r\\nERROR [08S01] [CA][CA IDMS ODBC Driver][CA IDMS]DTS/DNS allocate failed\"\nExceptionType: \"System.Data.Odbc.OdbcException\"\nMessage: \"An error has occurred.\"\nStackTrace: \"   at System.Data.Odbc.OdbcConnection.HandleError(OdbcHandle hrHandle, RetCode retcode)\\r\\n   at System.Data.Odbc.OdbcConnectionOpen.. ctor(OdbcConnection outerConnection, OdbcConnectionString connectionOptions)\\r\\n   at System.Data.Odbc.OdbcConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningObject)\\r\\n   at System.Data.ProviderBase.DbConnectionFactory.CreateNonPooledConnection(DbConnection owningConnection, DbConnectionPoolGroup poolGroup, DbConnectionOptions userOptions)\\r\\n   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal\u0026 connection)\\r\\n   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\\r\\n   at System.Data.ProviderBase.DbConnectionInternal.OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory)\\r\\n   at System.Data.Odbc.OdbcConnection.Open()\\r\\n   at TestPortalAgency.Controllers.ClientAccountController.SearchClientByAccount(String account) in C:\\\\Users\\\\weinreichjn\\\\Source\\\\Workspaces\\\\TestPortalAgency\\\\TestPortalAgency\\\\Controllers\\\\ClientAccountController.cs:line 38\"\n```\n\n---\n### Original Comments\n\n#### Feedback Bot on 11/19/2021, 01:59 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPQsahw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49CTUE",
                                           "createdAt":  "2022-01-28T08:59:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Connnection-issues-using-ODBCConnection-/1589446)._\n\n---\nI am cannot connect to a mainframe for query. I am using this code in VS2019 and it works with out issues.  When I use it in VS2022, I get connection error. \n\n```\n        private static readonly string _connectionString = WebConfigurationManager.ConnectionStrings[\"IDMS\"]. ConnectionString;\n\nusing (OdbcConnection connection = new OdbcConnection(_connectionString))\n                {\n                    OdbcCommand command = new OdbcCommand();\n                  \nconnection. Open();\n\n```\nIt throws the exception on  \"connection. Open();\n\n```\nExceptionMessage: \"ERROR [08S01] [CA][CA IDMS ODBC Driver][CA IDMS]DB001061 T0 C-4M387: DTS connect failed\\r\\nERROR [08S01] [CA][CA IDMS ODBC Driver][CA IDMS]DTS/DNS allocate failed\"\nExceptionType: \"System.Data.Odbc.OdbcException\"\nMessage: \"An error has occurred.\"\nStackTrace: \"   at System.Data.Odbc.OdbcConnection.HandleError(OdbcHandle hrHandle, RetCode retcode)\\r\\n   at System.Data.Odbc.OdbcConnectionOpen.. ctor(OdbcConnection outerConnection, OdbcConnectionString connectionOptions)\\r\\n   at System.Data.Odbc.OdbcConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningObject)\\r\\n   at System.Data.ProviderBase.DbConnectionFactory.CreateNonPooledConnection(DbConnection owningConnection, DbConnectionPoolGroup poolGroup, DbConnectionOptions userOptions)\\r\\n   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal\u0026 connection)\\r\\n   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)\\r\\n   at System.Data.ProviderBase.DbConnectionInternal.OpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory)\\r\\n   at System.Data.Odbc.OdbcConnection.Open()\\r\\n   at TestPortalAgency.Controllers.ClientAccountController.SearchClientByAccount(String account) in C:\\\\Users\\\\weinreichjn\\\\Source\\\\Workspaces\\\\TestPortalAgency\\\\TestPortalAgency\\\\Controllers\\\\ClientAccountController.cs:line 38\"\n```\n\n---\n### Original Comments\n\n#### Feedback Bot on 11/19/2021, 01:59 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Data`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-28T08:59:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49CxqH",
                                           "createdAt":  "2022-01-28T11:44:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "This issue is lacking enough information for us to investigate, and seems related to the specific ODBC provider (CA IDMS?) rather than to the general ODBC support in .NET. The error mentions DNS, so I\u0027d look at the host address provider in case there\u0027s an issue there.",
                                           "updatedAt":  "2022-01-28T11:44:53Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Connnection issues using ODBCConnection to connect to IDMS in VS2022",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65140",
        "createdAt":  "2022-02-10T14:38:19Z",
        "number":  65140,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCOfDfA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ajcvickers",
                                            "createdAt":  "2022-02-14T12:04:48Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-15T19:28:50Z",
        "body":  "Following the obsoletion of SerializationFormat.Binary and putting it behind an appcontext switch in .NET 7.0 (#39289), we should remove the code paths which support it, and which contain BinaryFormatter usage.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOt0fbsQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49sM5e",
                                           "createdAt":  "2022-02-10T14:38:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFollowing the obsoletion of SerializationFormat.Binary and putting it behind an appcontext switch in .NET 7.0 (#39289), we should remove the code paths which support it, and which contain BinaryFormatter usage.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eroji\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eroji\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Data`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-10T14:38:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49sOjf",
                                           "createdAt":  "2022-02-10T14:44:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "cc: @GrabYourPitchforks ",
                                           "updatedAt":  "2022-02-10T14:44:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49yxxJ",
                                           "createdAt":  "2022-02-11T22:59:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "Is https://github.com/dotnet/runtime/pull/39397 what you\u0027re looking to do?",
                                           "updatedAt":  "2022-02-11T22:59:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc490rn5",
                                           "createdAt":  "2022-02-12T13:04:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@Wraith2 more or less, yeah - but with a more gradual approach. For .NET 7.0 I\u0027ve just merged #65139, which both obsoletes and adds a runtime check to throw - but still allows an appcontext switch to be used to opt into using SerializationFormat.Binary. This issue would remove the code entirely in .NET 8.0, so even the appcontext switch would no longer work.",
                                           "updatedAt":  "2022-02-12T13:04:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc490wBj",
                                           "createdAt":  "2022-02-12T14:19:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "Ok. I was just wondering if that one would have saved you from having to do all the work, seems not.",
                                           "updatedAt":  "2022-02-12T14:19:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63Q5RM",
                                           "createdAt":  "2025-07-15T17:47:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@jeffhandley  @adamsitnik - any thoughts if we moved this to 11.0?",
                                           "updatedAt":  "2025-07-15T17:47:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63RFtK",
                                           "createdAt":  "2025-07-15T17:55:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Totally acceptable to move this to 11.0.",
                                           "updatedAt":  "2025-07-15T17:55:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63R9ux",
                                           "createdAt":  "2025-07-15T18:32:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Frulfump",
                                           "body":  "How would you hit that code path in .NET 10? Isn\u0027t the BinaryFormatter implementation removed and you need to add a dependency to that unsafe package and add `EnableUnsafeBinaryFormatterSerialization=true`? ",
                                           "updatedAt":  "2025-07-15T18:32:04Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Remove DataSet/DataTable code paths for SerializationFormat.Binary",
        "labels":  [
                       "area-System.Data",
                       "binaryformatter-migration"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79580",
        "createdAt":  "2022-03-30T14:43:23Z",
        "number":  79580,
        "author":  "coderb",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-13T15:44:50Z",
        "body":  "### Is your feature request related to a problem? Please describe\n\n`DataView.RowFilter` does not allow a filter string with wildcards in the middle, eg `Name like \u0027%JOHN%SMITH%\u0027` is invalid.  This is documented behavior.\r\n\r\nIt would obviously be useful to allow these types of filter strings.  Perhaps they were excluded due to implementation difficulty?  It would seem like an easy to code solution could translate the filter string into a `Regex`  to perform the filter matching.\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.data.datacolumn.expression?view=net-6.0#system-data-datacolumn-expression\n\n### Describe the solution you\u0027d like and alternatives you\u0027ve considered\n\nNo API changes required, simply implement and update the documentation.\n\n### Will this feature affect UI controls?\n\nN/A",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUFL0jA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5QUvRK",
                                           "createdAt":  "2022-03-31T22:23:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dreddy-work",
                                           "body":  "Thanks @coderb for bringing this up. We would be happy to consider PR implementing this feature. ",
                                           "updatedAt":  "2022-03-31T22:23:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QUvRP",
                                           "createdAt":  "2022-05-05T04:35:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "This issue is now marked as \"up for grabs\", and we’re looking for a community volunteer to work on this issue. If we receive no interest in 120 days, we will close the issue. To learn more about how we handle feature requests, please see our [documentation](https://aka.ms/winforms/issue-lifecycle).\n\nHappy Coding!",
                                           "updatedAt":  "2022-05-05T04:35:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QUvRR",
                                           "createdAt":  "2022-12-12T00:37:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elachlan",
                                           "body":  "`System.Data.Dataview` is not a part of Winforms but .NET Runtime.\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.data.dataview?view=net-6.0\r\n\r\nThe issue should probably be moved to https://github.com/dotnet/runtime\r\n\r\n\r\n",
                                           "updatedAt":  "2022-12-12T00:37:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QUvRV",
                                           "createdAt":  "2022-12-13T00:49:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elachlan",
                                           "body":  "@merriemcgaw I think this should be in runtime and not winforms.",
                                           "updatedAt":  "2022-12-13T00:49:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QUvRa",
                                           "createdAt":  "2022-12-13T01:23:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dreddy-work",
                                           "body":  "Yep. Thank you.",
                                           "updatedAt":  "2022-12-13T01:23:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QUvSM",
                                           "createdAt":  "2022-12-13T01:23:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is your feature request related to a problem? Please describe\n\n`DataView.RowFilter` does not allow a filter string with wildcards in the middle, eg `Name like \u0027%JOHN%SMITH%\u0027` is invalid.  This is documented behavior.\r\n\r\nIt would obviously be useful to allow these types of filter strings.  Perhaps they were excluded due to implementation difficulty?  It would seem like an easy to code solution could translate the filter string into a `Regex`  to perform the filter matching.\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.data.datacolumn.expression?view=net-6.0#system-data-datacolumn-expression\n\n### Describe the solution you\u0027d like and alternatives you\u0027ve considered\n\nNo API changes required, simply implement and update the documentation.\n\n### Will this feature affect UI controls?\n\nN/A\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecoderb\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Data`, `help wanted`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-13T01:23:24Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Feature Request: Allow wildcards in the middle of DataView.RowFilter",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67908",
        "createdAt":  "2022-04-12T07:22:52Z",
        "number":  67908,
        "author":  "Zqasim132",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-06T09:55:57Z",
        "body":  "I want to get a SQL Server disconnection event notification in my Database Service which is built in .NET 6 with ADO.net.\r\nActually for now we are detecting the connections health or state by continuously executing a select query in a separate Thread after a specific time intervals.\r\nI want a behaviour like SignalR when server is shut down or if any network error occurs it gives an event notification on which we can perform some relevant actions.\r\nIs there any way to achieve this.\r\nThanks!\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQWOZhA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5BYMra",
                                           "createdAt":  "2022-04-12T15:16:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI want to get a SQL Server disconnection event notification in my Database Service which is built in .NET 6 with ADO.net.\r\nActually for now we are detecting the connections health or state by continuously executing a select query in a separate Thread after a specific time intervals.\r\nI want a behaviour like SignalR when server is shut down or if any network error occurs it gives an event notification on which we can perform some relevant actions.\r\nIs there any way to achieve this.\r\nThanks!\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eZqasim132\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Data`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-12T15:16:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BYMvV",
                                           "createdAt":  "2022-04-12T15:16:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "cc @ajcvickers ",
                                           "updatedAt":  "2022-04-12T15:16:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BY5mE",
                                           "createdAt":  "2022-04-12T18:21:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "Any ADO.NET that uses DbCommand as the base class will have the [StateChange](https://docs.microsoft.com/en-us/dotnet/api/system.data.common.dbconnection.statechange?view=net-6.0) event and _should_ (but not must) fire that event when the state changes. \r\n\r\nHowever it should be noted that the only real way to know if a connection is broken is to try to use it and see if fails, whether you do that or the system does that doesn\u0027t really matter but be aware that the state change event may be out of date if no-one has tried to use the connection and may then flip when you do try to use it.",
                                           "updatedAt":  "2022-04-12T20:35:33Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Getting the event Notification on Sql Server Disconnection in ADO.Net",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72086",
        "createdAt":  "2022-07-07T12:56:06Z",
        "number":  72086,
        "author":  "VasanthkumarDurairaj",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCmc7wA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lindexi",
                                            "createdAt":  "2022-07-08T00:28:37Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-09-06T14:23:26Z",
        "body":  "* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`) 3.1.0\r\n* Windows version: (`winver`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? If yes, please file the issue via the instructions [here](https://docs.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019). No\r\n* Security issues and bugs should be reported privately, learn more via our [responsible disclosure guidelines](https://github.com/dotnet/wpf/blob/main/README.md#reporting-security-issues-and-security-bugs).\r\n\r\n \u003c!-- Read https://github.com/dotnet/wpf/blob/main/Documentation/issue-guide.md --\u003e\r\n \r\n **Problem description:**\r\n When applying a large number of predicates(i,e) 195 predicate values to the RowFilter in DataView, it takes almost 7-10 secs to filter the records in the DataTable collection.\r\n \r\n Note: For a simple sample, we have created predicates for 195, but we have a case to set 10k predicates to RowFilter for DataView.\r\n As per suggestion from the developer community, we have split the predicate using brackets. But it takes more time to filter the records.\r\n Link-https://developercommunity.visualstudio.com/t/when-applying-filter-in-datatablecollection-stacko/1003602\r\n \r\n **Actual behavior:** \u003c!-- callstack for crashes / exceptions --\u003e\r\n It takes more time to filter the records in DataTable.\r\n \r\n **Expected behavior:**\r\n The filter should apply to the DataTable, without any delay.\r\n \r\n **Minimal repro:**\r\n1. Run the attached sample.\r\n2. Click the `ApplyFilter` button to filter the records.\r\n3.  Observe, that it takes more time to filter the records.\r\n\r\n[WPF_Sample.zip](https://github.com/dotnet/wpf/files/9063117/WPF_Sample.zip)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORojYQA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Gg2ea",
                                           "createdAt":  "2022-07-13T09:55:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-07-13T09:55:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gg5Cs",
                                           "createdAt":  "2022-07-08T07:38:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pchaurasia14",
                                           "body":  "@VasanthkumarDurairaj - Are you seeing this behavior in a console application as well?",
                                           "updatedAt":  "2022-07-08T07:38:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gg5Cv",
                                           "createdAt":  "2022-07-13T06:31:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VasanthkumarDurairaj",
                                           "body":  "Hi @pchaurasia14 \r\nWhile checking in the console application it takes 4 sec to set 195 predicates to RowFilter in DataTable, whereas in the windows application it takes 5-6 secs to apply filter. ",
                                           "updatedAt":  "2022-07-13T06:31:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GiGA5",
                                           "createdAt":  "2022-07-13T15:06:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`) 3.1.0\r\n* Windows version: (`winver`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? If yes, please file the issue via the instructions [here](https://docs.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019). No\r\n* Security issues and bugs should be reported privately, learn more via our [responsible disclosure guidelines](https://github.com/dotnet/wpf/blob/main/README.md#reporting-security-issues-and-security-bugs).\r\n\r\n \u003c!-- Read https://github.com/dotnet/wpf/blob/main/Documentation/issue-guide.md --\u003e\r\n \r\n **Problem description:**\r\n When applying a large number of predicates(i,e) 195 predicate values to the RowFilter in DataView, it takes almost 7-10 secs to filter the records in the DataTable collection.\r\n \r\n Note: For a simple sample, we have created predicates for 195, but we have a case to set 10k predicates to RowFilter for DataView.\r\n As per suggestion from the developer community, we have split the predicate using brackets. But it takes more time to filter the records.\r\n Link-https://developercommunity.visualstudio.com/t/when-applying-filter-in-datatablecollection-stacko/1003602\r\n \r\n **Actual behavior:** \u003c!-- callstack for crashes / exceptions --\u003e\r\n It takes more time to filter the records in DataTable.\r\n \r\n **Expected behavior:**\r\n The filter should apply to the DataTable, without any delay.\r\n \r\n **Minimal repro:**\r\n1. Run the attached sample.\r\n2. Click the `ApplyFilter` button to filter the records.\r\n3.  Observe, that it takes more time to filter the records.\r\n\r\n[WPF_Sample.zip](https://github.com/dotnet/wpf/files/9063117/WPF_Sample.zip)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVasanthkumarDurairaj\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003esinghashish-wpf\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Data`, `untriaged`, `investigate`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-13T15:06:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GiNhA",
                                           "createdAt":  "2022-07-13T15:32:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Clockwork-Muse",
                                           "body":  ".... regardless of whether this gets \"fixed\" or not, your actual problem is that you\u0027re using a poorly-performing design.\r\n\r\nYou\u0027re filtering based on individual ids; you should likely be using some alternate design to restrict the individual ids.  a LINQ `Join` operator may perform significantly better; if the `DataTable` isn\u0027t the original source of truth, you may be able to restrict the rows on initial load (if it\u0027s from an external database, pushing it into the initial query is likely to perform even better).\r\n\r\nThat\u0027s assuming you\u0027re actually dealing with individual ids (you\u0027ve identified specific customers at some point, and must refer back to this list).  If you\u0027re _finding_ them this way, and this is the result of some other selection process, using that as a filter instead is likely to perform better (new customers since some date, for instance).",
                                           "updatedAt":  "2022-07-13T15:32:43Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "When applying large number of predicates to the RowFilter in DataView, it causes performance issue.",
        "labels":  [
                       "investigate",
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76001",
        "createdAt":  "2022-09-22T04:24:39Z",
        "number":  76001,
        "author":  "viveknuna",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-22T15:24:02Z",
        "body":  "I am trying the evaluate an expression using DataTable, But it\u0027s throwing the below exception on line `var temp = dt.Compute(formula, filter);` I have followed [this](https://learn.microsoft.com/en-us/dotnet/api/system.data.datatable.compute?view=net-6.0) documentation but it didn\u0027t help me.\r\n\r\nCannot evaluate. Expression \u0027System.Data.NameNode\u0027 is not an aggregate\r\n\r\n```\r\nstring formula = \"(Column * 2)\";\r\nDataTable dt = new DataTable();\r\ndt.Columns.Add(\"Column\");\r\n\r\nstring filter = \"Column = 1\"\r\nvar temp = dt.Compute(formula, filter);\r\n```\r\nThe expected output is 2 here. I have followed [this](https://stackoverflow.com/a/12431343/6527049) answer. I am just avoiding using any external library. because I tried to Flee library but it\u0027s quite unstable.\r\n\r\nSo if you pass value 3 in place of 1 to this, then it should return 6.\r\n\r\n.net framework version: 4.7.2",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOStCfBg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Kxkmv",
                                           "createdAt":  "2022-09-22T04:24:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI am trying the evaluate an expression using DataTable, But it\u0027s throwing the below exception on line v`ar temp = dt.Compute(formula, filter);` I have followed [this](https://learn.microsoft.com/en-us/dotnet/api/system.data.datatable.compute?view=net-6.0) documentation but it didn\u0027t help me.\r\n\r\nCannot evaluate. Expression \u0027System.Data.NameNode\u0027 is not an aggregate\r\n\r\n```\r\nstring formula = \"(Column * 2)\";\r\nDataTable dt = new DataTable();\r\ndt.Columns.Add(\"Column\");\r\n\r\nstring filter = \"Column = 1\"\r\nvar temp = dt.Compute(formula, filter);\r\n```\r\nThe expected output is 2 here. I have followed [this](https://stackoverflow.com/a/12431343/6527049) answer. I am just avoiding using any external library. because I tried to Flee library but it\u0027s quite unstable.\r\n\r\nSo if you pass value 3 in place of 1 to this, then it should return 6.\r\n\r\n.net framework version: 4.7.2\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eviveknuna\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Data`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-22T04:24:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KzI6t",
                                           "createdAt":  "2022-09-22T11:56:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ajcvickers",
                                           "body":  "This issue is lacking enough information for us to be able to fully understand what is happening. Please attach a small, runnable project or post a small, runnable code listing that reproduces what you are seeing so that we can investigate.",
                                           "updatedAt":  "2022-09-22T11:56:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K0J8G",
                                           "createdAt":  "2022-09-22T15:23:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "viveknuna",
                                           "body":  "@ajcvickers  @roji Above is the complete code, I am again posting with the Main method so that you can just this to any application and reproduce it.\r\n\r\n```\r\n        static void Main(string[] args)\r\n        {\r\n            try\r\n            {\r\n                string formula = \"(Column * 2)\";\r\n                DataTable dt = new DataTable();\r\n                dt.Columns.Add(\"Column\");\r\n\r\n                string filter = \"Column = 1\";\r\n                var temp = dt.Compute(formula, filter);\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n\r\n            }\r\n        }\r\n```\r\n\r\nIn short, I am trying to evaluate a mathematical expression by using DataTable here. so (Column * 2) is an expression, so If the Column value is 3, it should return 6. The above is just an example. It could be a complex expression as well.\r\nYou can refer to [this ](https://stackoverflow.com/questions/12431286/calculate-result-from-a-string-expression-dynamically/12431343#12431343)question to understand \r\n\r\nThere are some libraries that already do this like Flee and NCalc. But I am avoiding using any external library.\r\n\r\nI have tried to use DataTable, but it\u0027s not working for me.\r\n\r\nIs there a way to do this using DataTable or any other way in C#?\r\n",
                                           "updatedAt":  "2022-09-22T15:24:02Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Cannot evaluate. Expression \u0027System.Data.NameNode\u0027 is not an aggregate",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78628",
        "createdAt":  "2022-11-21T11:22:47Z",
        "number":  78628,
        "author":  "VasilievSerg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCvcPrA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "EngincanV",
                                            "createdAt":  "2023-04-12T19:48:13Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-06-21T13:47:51Z",
        "body":  "Earlier, I found some places in .NET 7 where the order of arguments was incorrect. Here are the issues: #78306, #78212\r\n\r\nI found one more place. However, I\u0027m not sure whether this is an error or not. \r\n```csharp\r\n....\r\nDebug.Assert(ChildTable != null, \"On a DataSet, but not on Table. Bad state\");\r\nForeignKeyConstraint? constraint = ChildTable.Constraints.FindForeignKeyConstraint(ChildKey.ColumnsReference, ParentKey.ColumnsReference); // \u003c=\r\nconstraint?.CheckConstraint();\r\n....\r\n}\r\n```\r\n[Link to the sources](https://github.com/dotnet/runtime/blob/d099f075e45d2aa6007a22b71b45a08758559f80/src/libraries/System.Data.Common/src/System/Data/DataRelation.cs#L486)\r\n\r\nThe `FindForeignKeyConstraint` method\u0027s definition:\r\n```csharp\r\nForeignKeyConstraint? FindForeignKeyConstraint(DataColumn[] parentColumns, DataColumn[] childColumns)\r\n```\r\n[Link to the sources](https://github.com/dotnet/runtime/blob/d099f075e45d2aa6007a22b71b45a08758559f80/src/libraries/System.Data.Common/src/System/Data/ConstraintCollection.cs#L548)\r\n\r\nThe first parameter is `parentColumns` and the second one is `childColumns`. In the method call mentioned above the first argument is `ChildKey.ColumnsReference` and the second one is the `ParentKey.ColumnsReference`. \r\n\r\nSo, the arguments order is `Child...`, `Parent...` whereas the parameters order is `parent...`, `child...`. \r\n\r\nIs the reversed order of arguments an error, or is this code fragment correct?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTsqnYg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Oyqdi",
                                           "createdAt":  "2022-11-21T11:22:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nEarlier, I found some places in .NET 7 where the order of arguments was incorrect. Here are the issues: #78145, #78306, #78212\r\n\r\nI found one more place. However, I\u0027m not sure whether this is an error or not. \r\n```csharp\r\n....\r\nDebug.Assert(ChildTable != null, \"On a DataSet, but not on Table. Bad state\");\r\nForeignKeyConstraint? constraint = ChildTable.Constraints.FindForeignKeyConstraint(ChildKey.ColumnsReference, ParentKey.ColumnsReference); // \u003c=\r\nconstraint?.CheckConstraint();\r\n....\r\n}\r\n```\r\n[Link to the sources](https://github.com/dotnet/runtime/blob/d099f075e45d2aa6007a22b71b45a08758559f80/src/libraries/System.Data.Common/src/System/Data/DataRelation.cs#L486)\r\n\r\nThe `FindForeignKeyConstraint` method\u0027s definition:\r\n```csharp\r\nForeignKeyConstraint? FindForeignKeyConstraint(DataColumn[] parentColumns, DataColumn[] childColumns)\r\n```\r\n[Link to the sources](https://github.com/dotnet/runtime/blob/d099f075e45d2aa6007a22b71b45a08758559f80/src/libraries/System.Data.Common/src/System/Data/ConstraintCollection.cs#L548)\r\n\r\nThe first parameter is `parentColumns` and the second one is `childColumns`. In the method call mentioned above the first argument is `ChildKey.ColumnsReference` and the second one is the `ParentKey.ColumnsReference`. \r\n\r\nSo, the arguments order is `Child...`, `Parent...` whereas the parameters order is `parent...`, `child...`. \r\n\r\nIs the reversed order of arguments an error, or is this code fragment correct?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eVasilievSerg\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Data`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-21T11:22:53Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "DataRelation, possible incorrect order of arguments when calling `FindForeignKeyConstraint`",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83507",
        "createdAt":  "2023-03-16T11:28:15Z",
        "number":  83507,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-27T07:32:38Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/DataSetReadXml-reads-data-from-incorrec/10246283)._\n\n---\n[severity:It\u0027s more difficult to complete my work]\r\nWhen XML contains data representing non-existing tables, this data is not ignored, but instead loaded into existing table if the name of the column is the same.\n\nReproducer:\n\n```\nusing System.Data;\nusing System.Xml;\n\nDataTable table = new DataTable(\"table\");\ntable. Columns.Add(\"column1\");\ntable. Columns.Add(\"column2\");\nDataSet ds = new DataSet();\nds. Tables.Add(table);\n\nstring xml = @\"\n\n  \u003ctable\u003e\n    column2_data\n    \n        not_existing_table_data\n    \n    column1_data\n  \u003c/table\u003e\n\n\";\n\nXmlReader reader = XmlReader.Create(new StringReader(xml));\nds. ReadXml(reader);\n\nConsole.WriteLine(ds. GetXml());\n```\n\nActual output is:\n\n```\n\n  \u003ctable\u003e\n    not_existing_table_data\n    column2_data\n  \u003c/table\u003e\n\n```\n\nExpected output is:\n\n```\n\n  \u003ctable\u003e\n    column1_data\n    column2_data\n  \u003c/table\u003e\n\n```\n\nFrom the docs:\nIgnoreSchema\nIgnores any inline schema and reads data into the existing DataSet schema. **If any data does not match the existing schema, it is discarded** (including data from differing namespaces defined for the DataSet). If the data is a DiffGram, IgnoreSchema has the same functionality as DiffGram.\n\n---\n### Original Comments\n\n#### Feedback Bot on 1/6/2023, 02:34 AM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOV7macg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5XuZpy",
                                           "createdAt":  "2023-03-16T11:29:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/DataSetReadXml-reads-data-from-incorrec/10246283)._\n\n---\n[severity:It\u0027s more difficult to complete my work]\r\nWhen XML contains data representing non-existing tables, this data is not ignored, but instead loaded into existing table if the name of the column is the same.\n\nReproducer:\n\n```\nusing System.Data;\nusing System.Xml;\n\nDataTable table = new DataTable(\"table\");\ntable. Columns.Add(\"column1\");\ntable. Columns.Add(\"column2\");\nDataSet ds = new DataSet();\nds. Tables.Add(table);\n\nstring xml = @\"\n\n  \u003ctable\u003e\n    column2_data\n    \n        not_existing_table_data\n    \n    column1_data\n  \u003c/table\u003e\n\n\";\n\nXmlReader reader = XmlReader.Create(new StringReader(xml));\nds. ReadXml(reader);\n\nConsole.WriteLine(ds. GetXml());\n```\n\nActual output is:\n\n```\n\n  \u003ctable\u003e\n    not_existing_table_data\n    column2_data\n  \u003c/table\u003e\n\n```\n\nExpected output is:\n\n```\n\n  \u003ctable\u003e\n    column1_data\n    column2_data\n  \u003c/table\u003e\n\n```\n\nFrom the docs:\nIgnoreSchema\nIgnores any inline schema and reads data into the existing DataSet schema. **If any data does not match the existing schema, it is discarded** (including data from differing namespaces defined for the DataSet). If the data is a DiffGram, IgnoreSchema has the same functionality as DiffGram.\n\n---\n### Original Comments\n\n#### Feedback Bot on 1/6/2023, 02:34 AM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Data`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-16T11:29:42Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "DataSet.ReadXml reads data from incorrect tags",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90029",
        "createdAt":  "2023-08-04T15:21:25Z",
        "number":  90029,
        "author":  "Liwanglong987",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-24T16:05:04Z",
        "body":  "### Description\r\nI have no idea why there is no one report this issue.\r\nAs we know, use BeginLoadData could improve the speed of addition.\r\nWhen adding rows to a Bound DataTable, we usually use BeginLoadData. If this DataTable is empty before BeginLoadData, the speed is very quick. However, if it has any one exist before BeginLoadData, it will be slow.\r\n\r\n### Configuration\r\nAll versions included. Never changed from beginning.\r\n\r\n### Analysis\r\n\r\nI use reflex to test why this happened: AddRow -\u003eInsertRow -\u003eSetNewRecordWorker -\u003eRaiseRowChanged -\u003eRecordStateChanged -\u003eRecordStateChanged to raise DataView.ListChanged event. Whether to raise depends on DoListChanged which equals to (!_suspendEvents \u0026\u0026 _listeners.HasListeners \u0026\u0026 !_table.AreIndexEventsSuspended). \r\nIf BeginLoadData with a empty DataTable, _table.AreIndexEventsSuspended will be true and DoListChanged will be false. That\u0027s how it works. \r\n\r\nI think if we AddRow when BeginLoadData, DoListChanged should not be triggered even though DataTable is not empty.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOafMqcw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jScU6",
                                           "createdAt":  "2023-08-04T15:21:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\nI have no idea why there is no one report this issue.\r\nAs we know, use BeginLoadData could improve the speed of addition.\r\nWhen adding rows to a Bound DataTable, we usually use BeginLoadData. If this DataTable is empty before BeginLoadData, the speed is very quick. However, if it has any one exist before BeginLoadData, it will be slow.\r\n\r\n### Configuration\r\nAll versions included. Never changed from beginning.\r\n\r\n### Analysis\r\n\r\nI use reflex to test why this happened: AddRow -\u003eInsertRow -\u003eSetNewRecordWorker -\u003eRaiseRowChanged -\u003eRecordStateChanged -\u003eRecordStateChanged to raise DataView.ListChanged event. Whether to raise depends on DoListChanged which equals to (!_suspendEvents \u0026\u0026 _listeners.HasListeners \u0026\u0026 !_table.AreIndexEventsSuspended). \r\nIf BeginLoadData with a empty DataTable, _table.AreIndexEventsSuspended will be true and DoListChanged will be false. That\u0027s how it works. \r\n\r\nI think if we AddRow when BeginLoadData, DoListChanged should not be triggered even though DataTable is not empty.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLiwanglong987\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Data`, `tenet-performance`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-04T15:21:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jTCY7",
                                           "createdAt":  "2023-08-04T17:10:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@Liwanglong987 DataTable is no longer a recommended way to do data access (as opposed to DbDataReader, Dapper, EF Core or similar); as a result, we generally invest little time in it. Especially given that in this time period we devote most of our efforts on finishing up .NET and EF Core 8.0, it\u0027ll be a while before we\u0027re able to investigate this.\r\n\r\nHowever, in any case we\u0027re going to need some sort of code repro which actually shows this happening. Can you please put together a minimal [BenchmarkDotNet](https://benchmarkdotnet.org) benchmark which shows the adding being slow?",
                                           "updatedAt":  "2023-08-04T17:10:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jU7uy",
                                           "createdAt":  "2023-08-05T07:58:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Liwanglong987",
                                           "body":  "@roji \r\nHere is my demo. To run this demo, you have to change properties.\r\n1. target framework should add \"-windows\"\r\n2. set UseWindowsForms to true.\r\n\r\n**In addition, I don\u0027t know how to run in framework, they have same action.\r\n```\r\npublic class BenchmarkExample : Form\r\n{\r\n    private DataTable dataTable;\r\n    private DataGridView dataGridView1;\r\n\r\n    public BenchmarkExample()\r\n    {\r\n        InitializeComponent();        \r\n    }\r\n\r\n    [Benchmark]\r\n    public long AddRowToEmptyDataTable()\r\n    {\r\n        return AddRowToDataTable(0);\r\n    }\r\n\r\n    [Benchmark]\r\n    public long AddRowToUnEmptyDataTable()\r\n    {\r\n        return AddRowToDataTable(1);\r\n    }\r\n\r\n    private void InitializeComponent()\r\n    {\r\n        dataGridView1 = new DataGridView();\r\n        ((System.ComponentModel.ISupportInitialize)dataGridView1).BeginInit();\r\n       \r\n        SuspendLayout();\r\n        // \r\n        // dataGridView1\r\n        // \r\n        dataGridView1.ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize;\r\n        dataGridView1.Location = new Point(69, 67);\r\n        dataGridView1.Name = \"dataGridView1\";\r\n        dataGridView1.RowHeadersWidth = 82;\r\n        dataGridView1.RowTemplate.Height = 40;\r\n        dataGridView1.Size = new Size(480, 300);\r\n        dataGridView1.TabIndex = 0;\r\n        // \r\n        // BenchmarkExample\r\n        // \r\n        ClientSize = new Size(274, 229);\r\n        Controls.Add(dataGridView1);\r\n        Name = \"BenchmarkExample\";\r\n        ((System.ComponentModel.ISupportInitialize)dataGridView1).EndInit();\r\n        ResumeLayout(false);\r\n        dataTable = new DataTable\r\n        {\r\n            TableName = \"Test\"\r\n        };\r\n        dataTable.Columns.AddRange(new DataColumn[]\r\n        {\r\n            new DataColumn(\"Name\"),\r\n            new DataColumn(\"test1\"),\r\n            new DataColumn(\"test2\"),\r\n            new DataColumn(\"test3\"),\r\n            new DataColumn(\"test4\"),\r\n        });\r\n        dataGridView1.DataSource = dataTable;\r\n    }\r\n\r\n    private long AddRowToDataTable(int count)\r\n    {\r\n        dataTable.Clear();\r\n        for(int i = 0; i \u003c count; i++)\r\n        {\r\n            dataTable.Rows.Add(new object[] {\r\n                \"Test\",\r\n                \"Test\",\r\n                \"Test\",\r\n                \"Test\",\r\n                \"Test\",\r\n            });\r\n        }\r\n        Stopwatch stopwatch = new Stopwatch();\r\n        dataTable.BeginLoadData();\r\n        for(int i = 0; i \u003c 100000; i++)\r\n        {\r\n            dataTable.Rows.Add(new object[] {\r\n                \"Test\",\r\n                \"Test\",\r\n                \"Test\",\r\n                \"Test\",\r\n                \"Test\",\r\n            });\r\n        }\r\n        dataTable.EndLoadData();\r\n        stopwatch.Stop();\r\n        return stopwatch.ElapsedMilliseconds;\r\n    }\r\n}\r\n```",
                                           "updatedAt":  "2023-08-05T07:58:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jVBVP",
                                           "createdAt":  "2023-08-05T09:36:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "@Liwanglong987 your code is problematic in several ways:\r\n* You\u0027re only doing a single measurement, using Stopwatch. Reliable benchmarking requires perform the operation many times and measuring the results across all those runs. Measuring once produces completely skewed results, as there are various startup costs (e.g. JIT) that only happen in the first run, but not in subsequent runs. The BenchmarkDotNet package is there exactly to do that for you. It also uses more reliable means of measuring than Stopwatch.\r\n* Reliable benchmarking involves isolating the code in question from other stuff which may affect it. For example, a good benchmark should not be a Winforms app. Once again, BenchmarkDotNet produces a reliable console application which runs *exactly* your function, isolating it from any interference.\r\n* Just adding the [Benchmark] attribute on a method doesn\u0027t actually do anything.\r\n\r\nPlease take a good look at BenchmarkDotNet - the [getting started](https://benchmarkdotnet.org/articles/guides/getting-started.html) page is a good place to start - and please try to produce a similar program which compares the two methods.",
                                           "updatedAt":  "2023-08-05T09:36:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5p8ypz",
                                           "createdAt":  "2023-10-24T15:57:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Liwanglong987",
                                           "body":  "@roji  Sorry to reply so late. Busy work prevents me from learning BenchmarkDotNet. \r\nHere is my newest code which could reproduce this issue.\r\n\r\nSorry to say I haven\u0027t learned how to run for multiple runtimes. So I copy code in different projects and produced same result.\r\n\r\n```\r\nusing BenchmarkDotNet.Attributes;\r\nusing System.ComponentModel;\r\nusing System.Data;\r\n\r\nnamespace ConsoleAppBenchMark;\r\n\r\npublic class DataTableBenchMarkDemo\r\n{\r\n    [Params(100)]\r\n    public int AddedItemsCount { get; set; }\r\n\r\n    [Params(true, false)]\r\n    public bool bDoSomething { get; set; }\r\n\r\n    [Benchmark]\r\n    public void AddToEmptyDataTable()\r\n    {\r\n        var container = new UseDataTableAsSource(bDoSomething);\r\n        var dataTable = new DataTable();\r\n        dataTable.TableName = \"Test\";\r\n        container.Table = dataTable;\r\n        dataTable.Columns.AddRange(\r\n            new DataColumn[]\r\n            {\r\n                new DataColumn(\"Column1\"),\r\n                new DataColumn(\"Column2\"),\r\n                new DataColumn(\"Column3\"),\r\n                new DataColumn(\"Column4\"),\r\n            });\r\n        for(int i = 0; i \u003c AddedItemsCount; i++)\r\n        {\r\n            dataTable.Rows.Add(new object[] { \"item1\", \"item2\", \"item3\", \"item4\" });\r\n        }\r\n    }\r\n\r\n    [Benchmark]\r\n    public void AddToDataTableWithAnExist()\r\n    {\r\n        var container = new UseDataTableAsSource(bDoSomething);\r\n        var dataTable = new DataTable();\r\n        dataTable.TableName = \"Test\";\r\n        container.Table = dataTable;\r\n        dataTable.Columns.AddRange(\r\n            new DataColumn[]\r\n            {\r\n                new DataColumn(\"Column1\"),\r\n                new DataColumn(\"Column2\"),\r\n                new DataColumn(\"Column3\"),\r\n                new DataColumn(\"Column4\"),\r\n            });\r\n        dataTable.Rows.Add(new object[] { \"item1\", \"item2\", \"item3\", \"item4\" });\r\n        for(int i = 0; i \u003c AddedItemsCount - 1; i++)\r\n        {\r\n            dataTable.Rows.Add(new object[] { \"item1\", \"item2\", \"item3\", \"item4\" });\r\n        }\r\n    }\r\n\r\n    [Benchmark]\r\n    public void AddToEmptyDataTableWithBegin()\r\n    {\r\n        var container = new UseDataTableAsSource(bDoSomething);\r\n        var dataTable = new DataTable();\r\n        dataTable.TableName = \"Test\";\r\n        container.Table = dataTable;\r\n        dataTable.Columns.AddRange(\r\n            new DataColumn[]\r\n            {\r\n                new DataColumn(\"Column1\"),\r\n                new DataColumn(\"Column2\"),\r\n                new DataColumn(\"Column3\"),\r\n                new DataColumn(\"Column4\"),\r\n            });\r\n        dataTable.BeginLoadData();\r\n        for(int i = 0; i \u003c AddedItemsCount; i++)\r\n        {\r\n            dataTable.Rows.Add(new object[] { \"item1\", \"item2\", \"item3\", \"item4\" });\r\n        }\r\n        dataTable.EndLoadData();\r\n    }\r\n\r\n    [Benchmark]\r\n    //In my opinion, this function should action same as AddToEmptyDataTableWithBegin.\r\n    public void AddToExistDataTableWithBegin()\r\n    {\r\n        var container = new UseDataTableAsSource(bDoSomething);\r\n        var dataTable = new DataTable();\r\n        dataTable.TableName = \"Test\";\r\n        container.Table = dataTable;\r\n        dataTable.Columns.AddRange(\r\n            new DataColumn[]\r\n            {\r\n                new DataColumn(\"Column1\"),\r\n                new DataColumn(\"Column2\"),\r\n                new DataColumn(\"Column3\"),\r\n                new DataColumn(\"Column4\"),\r\n            });\r\n        dataTable.Rows.Add(new object[] { \"item1\", \"item2\", \"item3\", \"item4\" });\r\n        dataTable.BeginLoadData();\r\n        for(int i = 0; i \u003c AddedItemsCount - 1; i++)\r\n        {\r\n            dataTable.Rows.Add(new object[] { \"item1\", \"item2\", \"item3\", \"item4\" });\r\n        }\r\n        dataTable.EndLoadData();\r\n    }\r\n}\r\n\r\n\r\npublic class UseDataTableAsSource : DataView\r\n{\r\n    public UseDataTableAsSource(bool bSleep) { m_bSleep = bSleep; }\r\n    bool m_bSleep;\r\n    protected override void OnListChanged(ListChangedEventArgs e)\r\n    {\r\n        base.OnListChanged(e);\r\n        if(m_bSleep)\r\n        {\r\n            Thread.Sleep(5);\r\n        }\r\n    }\r\n}\r\n\r\n```",
                                           "updatedAt":  "2023-10-24T16:05:04Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "It\u0027s slow to add rows to Bound DataTable.",
        "labels":  [
                       "area-System.Data",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90151",
        "createdAt":  "2023-08-08T13:43:49Z",
        "number":  90151,
        "author":  "madelson",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-09-05T13:56:47Z",
        "body":  "### Background and motivation\r\n\r\nToday, ADO.NET provides 2 portable ways of counting the number of records affected by a SQL query or a batch with multiple SQL queries:\r\n```\r\nDbCommand.ExecuteNonQuery(); // returns int\r\nDbDataReader.RecordsAffected; // int\r\n```\r\n\r\nBecause both of these are `int`, large bulk operations can overflow. \r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Data.Common;\r\n\r\npublic class DbDataReader\r\n{\r\n    public virtual long RecordsAffected64 =\u003e throw new NotSupportedException(nameof(RecordsAffected64));\r\n    ...    \r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nusing DbCommand command = ...\r\nawait using DbDataReader reader = command.ExecuteReaderAsync();\r\nwhile (reader.NextResult()) { }\r\nConsole.WriteLine(reader.RecordsAffected64);\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nWe could add an overload of `ExecuteNonQuery()` that returns `long` instead of in or addition to the `DbDataReader` property, but this feels clunky given that the use-case is fairly narrow.\r\n\r\nThe default behavior is up for discussion as well. \r\n* I do not think it should default to just returning `RecordsAffected`, because this would lead to incorrect results in the case of overflow. However, this is an option.\r\n* It could return `long?` and default to returning `null`, where `null` indicates that the driver doesn\u0027t support computing the value\r\n* We could have a property somewhere to check whether this is supported (similar to `DbProviderFactory.CanCreateBatch`).\r\n\r\n### Risks\r\n\r\nIt\u0027s possible that some or even most providers have no way of implementing this capability under the hood. For example, looking briefly at the implementation of `SqlDataReader.RecordsAffected` it isn\u0027t clear to me whether the underlying technology supports 64-bit counting or not.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZbnHKQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jhMyQ",
                                           "createdAt":  "2023-08-08T13:43:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nToday, ADO.NET provides 2 portable ways of counting the number of records affected by a SQL query or a batch with multiple SQL queries:\r\n```\r\nDbCommand.ExecuteNonQuery(); // returns int\r\nDbDataReader.RecordsAffected; // int\r\n```\r\n\r\nBecause both of these are `int`, large bulk operations can overflow. \n\n### API Proposal\n\n```csharp\r\nnamespace System.Data.Common;\r\n\r\npublic class DbDataReader\r\n{\r\n    public virtual long RecordsAffected64 =\u003e throw new NotSupportedException(nameof(RecordsAffected64));\r\n    ...    \r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nusing DbCommand command = ...\r\nawait using DbDataReader reader = command.ExecuteReaderAsync();\r\nwhile (reader.NextResult()) { }\r\nConsole.WriteLine(reader.RecordsAffected64);\r\n```\r\n\n\n### Alternative Designs\n\nWe could add an overload of `ExecuteNonQuery()` that returns `long` instead of in or addition to the `DbDataReader` property, but this feels clunky given that the use-case is fairly narrow.\r\n\r\nThe default behavior is up for discussion as well. \r\n* I do not think it should default to just returning `RecordsAffected`, because this would lead to incorrect results in the case of overflow.\r\n* It could return `long?` and default to returning `null`, where `null` indicates that the driver doesn\u0027t support computing the value\r\n* We could have a property somewhere to check whether this is supported (similar to `DbProviderFactory.CanCreateBatch`).\n\n### Risks\n\nIt\u0027s possible that some or even most providers have no way of implementing this capability under the hood. For example, looking briefly at the implementation of `SqlDataReader.RecordsAffected` it isn\u0027t clear to me whether the underlying technology supports 64-bit counting or not.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emadelson\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Data`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-08T13:43:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jiCYo",
                                           "createdAt":  "2023-08-08T15:45:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDOarA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kronic",
                                                                               "createdAt":  "2023-08-08T16:34:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2023-08-09T21:11:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "roji",
                                           "body":  "FWIW Npgsql exposes a ulong `Rows` property for this reason (which probably means the proposed ADO.NET property should be ulong rather than long).\r\n\r\n\u003e I do not think it should default to just returning RecordsAffected, because this would lead to incorrect results in the case of overflow.\r\n\r\nHmm... It could be argued that this would be no worse than the current situation, where the int RecordsAffected is the only option anyway, and which may overflow (or may not, depending on the driver implementation - it may throw instead). In other words, either a driver supports the new property, overriding it to return the correct value, or it doesn\u0027t, in which case RecordsAffected already (possibly) overflows, so I don\u0027t think there\u0027s a reason to avoid the new property overflowing as well. This would obviate making the property nullable or introducing yet another capability property just to say whether the property is \"well\"-implemented.\r\n\r\nIn any case, I think doing something here does make sense, putting in the Future milestone to gather more feedback for now.",
                                           "updatedAt":  "2023-08-08T15:45:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jkILv",
                                           "createdAt":  "2023-08-08T22:48:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDOasg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2023-08-09T21:11:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "A -1 value can be used to signal that it isn\u0027t possible to know the row count. If you\u0027re streaming rows as they are found (firehose mode) then you only know the count once you\u0027re seen them all.\r\n\r\nIn general I\u0027d say adding a ulong Rows property or something similar would make sense. We\u0027ve extended the bulk copy row count to add a 64 bit counter in SqlClient so there\u0027s precedent and clear need.",
                                           "updatedAt":  "2023-08-08T22:48:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jqxDJ",
                                           "createdAt":  "2023-08-09T21:11:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madelson",
                                           "body":  "@Wraith2 in my case I can’t count the rows as I go since this is an insert or update query; I’m not bringing rows back to the client.\r\n\r\nrecordsAffected gives the number of rows changed in that case. Does that make sense? ",
                                           "updatedAt":  "2023-08-09T21:11:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jq71n",
                                           "createdAt":  "2023-08-09T21:47:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDSnkA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2023-08-10T10:53:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Wraith2",
                                           "body":  "Yes. I wasn\u0027t suggesting that you should count the rows i was just identifying that there has been a reason in the past that a `long` rather than `ulong` might be chosen. I think that it\u0027s so rare that `ulong is probably the better choice here.",
                                           "updatedAt":  "2023-08-09T21:47:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5js34n",
                                           "createdAt":  "2023-08-10T07:31:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODLn0kA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2023-08-10T10:51:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "anchurcn",
                                                                               "createdAt":  "2023-09-09T06:24:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kronic",
                                                                               "createdAt":  "2023-11-02T05:28:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "roji",
                                           "body":  "@Wraith2 you raise a good point with -1; IIRC that value is returned not just when the number of rows affected isn\u0027t yet known, but also when the statement is a SELECT (i.e. doesn\u0027t modify rows by definition. [From the DbDataReader.RecordsAffected docs](https://learn.microsoft.com/en-us/dotnet/api/system.data.common.dbdatareader.recordsaffected?view=net-7.0#system-data-common-dbdatareader-recordsaffected):\r\n\r\n\u003e The number of rows changed, inserted, or deleted. -1 for SELECT statements; 0 if no rows were affected or the statement failed.\r\n\r\nSo that could be a good reason to make the new property `ulong?`, with null fulfilling the same function as -1 for the existing 32-bit RecordsAffected. ",
                                           "updatedAt":  "2023-08-10T07:31:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5juAKh",
                                           "createdAt":  "2023-08-10T10:57:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madelson",
                                           "body":  "Agreed. -1 is also returned for things like `CREATE TABLE` and `WAITFOR` I believe.\r\n\r\nI like the idea of using `ulong?` with `null` indicating \"n/a\" vs. -1. I think it would be somewhat confusing if `RecordsAffected` returns -1 for `SELECT` and `RecordsAffected64` returns 0 (which presumably is what would need to happen if we used `ulong`).",
                                           "updatedAt":  "2023-08-10T10:57:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5juVsW",
                                           "createdAt":  "2023-08-10T12:05:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e and RecordsAffected64 returns 0\r\n\r\nNot sure that\u0027s possible - it wouldn\u0027t allow making the distinction between a non-updating statement (SELECT) and an updating statement (UPDATE/DELETE) that happened to not touch any rows because of the WHERE clause.",
                                           "updatedAt":  "2023-08-10T12:05:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ju_Fo",
                                           "createdAt":  "2023-08-10T13:49:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madelson",
                                           "body":  "@roji not sure I follow your comment.\r\n\r\nIf the data type is ulong (non nullable), then I don’t see how we’d differentiate between 0 and n/a. That seems undesirable.\r\n\r\nIf we use long or ulong? Instead, then we can differentiate, which seems preferable.\r\n\r\nDo you agree?",
                                           "updatedAt":  "2023-08-10T13:49:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jvKtQ",
                                           "createdAt":  "2023-08-10T14:15:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDUIbQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2023-08-10T14:34:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "Yeah, we\u0027re basically saying the same thing. `long` isn\u0027t a good option since we have at least one database where what\u0027s returned is an unsigned 64-bit type (even though long really \"should be enough\"). I think that leaves only `ulong?`.",
                                           "updatedAt":  "2023-08-10T14:15:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5luccp",
                                           "createdAt":  "2023-09-05T13:55:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODF0hng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "roji",
                                                                               "createdAt":  "2023-09-05T15:24:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2023-09-05T19:24:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "bgrainger",
                                           "body":  "\u003e we have at least one database where what\u0027s returned is an unsigned 64-bit type\r\n\r\nAt least two: MySQL\u0027s [OK packet](https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_basic_ok_packet.html) transmits `affected_rows` using a [`int\u003clenenc\u003e` type](https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_basic_dt_integers.html#sect_protocol_basic_dt_int_le) which supports unsigned integer values from 0 to 2⁶⁴-1.",
                                           "updatedAt":  "2023-09-05T13:56:47Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[API Proposal]: Support \u003e int.MaxValue records affected in ADO.NET",
        "labels":  [
                       "api-suggestion",
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90741",
        "createdAt":  "2023-08-17T14:54:01Z",
        "number":  90741,
        "author":  "Tim-Pohlmann",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCyOEiA==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "mary-georgiou-sonarsource",
                                            "createdAt":  "2023-08-25T15:00:22Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "gregory-paidis-sonarsource",
                                            "createdAt":  "2023-08-25T15:05:38Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "andrei-epure-sonarsource",
                                            "createdAt":  "2023-08-28T11:46:42Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-09-03T17:03:49Z",
        "body":  "### Description\r\n\r\nThe method SqlMoney.ToInt64 is always rounding up for negative values.\r\n\r\n### Reproduction Steps\r\n\r\n```\r\nusing System;\r\nusing System.Data.SqlTypes;\r\n\r\nConsole.WriteLine(SqlMoney.Parse(\"2.6\").ToInt64());     // 3\r\nConsole.WriteLine(SqlMoney.Parse(\"-2.6\").ToInt64());    // -2\r\n```\r\nOr in SharpLab: https://sharplab.io/#v2:C4LgTgrgdgNAJiA1AHwAICYCMBYAUKgBgAJVMA6AEQENgqyBlARwBsAVATwAcBTAZwG48eUgE4AFE2YBZAPZRu7MgAUqYXtzEAidGQBsmgJRlWMgJJRgugCxiDB/kUeOA9M6IBmYZnGTZ8xSpqGpoAtDr6RibmljZ2Dk6uRGFAA=\r\n\r\n### Expected behavior\r\n\r\n-2.6 will be rounded down to -3\r\n\r\n### Actual behavior\r\n\r\n-2.6 will be rounded up to -2\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nReproduced on current master commit:\r\nhttps://github.com/dotnet/runtime/commit/45acd380b37c9ee883070a70a2ef2cb7eca77683\r\n\r\n### Other information\r\n\r\nThe bug is caused by faulty logic here:\r\nhttps://github.com/dotnet/runtime/blob/45acd380b37c9ee883070a70a2ef2cb7eca77683/src/libraries/System.Data.Common/src/System/Data/SQLTypes/SQLMoney.cs#L150-L161\r\n`remainder` will be negative for negative values of `ret` and thus never be `\u003e= 5`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOicqluw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5kTVja",
                                           "createdAt":  "2023-08-17T18:46:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nThe method SqlMoney.ToInt64 is always rounding up for negative values.\r\n\r\n### Reproduction Steps\r\n\r\n```\r\nusing System;\r\nusing System.Data.SqlTypes;\r\n\r\nConsole.WriteLine(SqlMoney.Parse(\"2.6\").ToInt64());     // 3\r\nConsole.WriteLine(SqlMoney.Parse(\"-2.6\").ToInt64());    // -2\r\n```\r\nOr in SharpLab: https://sharplab.io/#v2:C4LgTgrgdgNAJiA1AHwAICYCMBYAUKgBgAJVMA6AEQENgqyBlARwBsAVATwAcBTAZwG48eUgE4AFE2YBZAPZRu7MgAUqYXtzEAidGQBsmgJRlWMgJJRgugCxiDB/kUeOA9M6IBmYZnGTZ8xSpqGpoAtDr6RibmljZ2Dk6uRGFAA=\r\n\r\n### Expected behavior\r\n\r\n-2.6 will be rounded down to -3\r\n\r\n### Actual behavior\r\n\r\n-2.6 will be rounded up to -2\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nReproduced on current master commit:\r\nhttps://github.com/dotnet/runtime/commit/45acd380b37c9ee883070a70a2ef2cb7eca77683\r\n\r\n### Other information\r\n\r\nThe bug is caused by faulty logic here:\r\nhttps://github.com/dotnet/runtime/blob/45acd380b37c9ee883070a70a2ef2cb7eca77683/src/libraries/System.Data.Common/src/System/Data/SQLTypes/SQLMoney.cs#L150-L161\r\n`remainder` will be negative for negative values of `ret` and thus never be `\u003e= 5`.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTim-Pohlmann\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Data`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-17T18:46:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kTckH",
                                           "createdAt":  "2023-08-17T19:09:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "/cc @David-Engel ",
                                           "updatedAt":  "2023-08-17T19:09:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JyqW7",
                                           "createdAt":  "2024-08-27T07:23:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODv_b4A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "David-Engel",
                                                                               "createdAt":  "2024-08-27T17:10:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Tim-Pohlmann",
                                                                               "createdAt":  "2024-08-28T07:02:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "roji",
                                           "body":  "@David-Engel @cheenamalhotra @saurabh500 ping, as far as I\u0027m aware this is a SqlClient support type only (see similar discussion in https://github.com/dotnet/runtime/issues/99507#issuecomment-2311685682).\n\nPutting in Future milestone.",
                                           "updatedAt":  "2024-08-27T07:23:24Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Rounding error in SqlMoney.ToInt64",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94391",
        "createdAt":  "2023-11-06T01:20:27Z",
        "number":  94391,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-21T13:56:53Z",
        "body":  "**Failed in:** [runtime-coreclr libraries-jitstress-random 20231104.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=460115\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=10389176\u0026resultId=134656\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-x86-CoreCLR_checked-jitstress_random_2-Windows.10.Amd64.Open\r\n    - System.Data.Tests.DataColumnCollectionTest2.Indexer2\r\n```\r\n\r\n**Error message:**\r\n```\r\nSystem.ArgumentNullException : Value cannot be null. (Parameter \u0027actual\u0027)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at System.Data.Tests.DataColumnCollectionTest2.Indexer2() in /_/src/libraries/System.Data.Common/tests/System/Data/DataColumnCollectionTest2.cs:line 662\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOau1Jvg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5q7Um-",
                                           "createdAt":  "2023-11-06T01:20:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n**Failed in:** [runtime-coreclr libraries-jitstress-random 20231104.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=460115\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=10389176\u0026resultId=134656\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-windows-Release-x86-CoreCLR_checked-jitstress_random_2-Windows.10.Amd64.Open\r\n    - System.Data.Tests.DataColumnCollectionTest2.Indexer2\r\n```\r\n\r\n**Error message:**\r\n```\r\nSystem.ArgumentNullException : Value cannot be null. (Parameter \u0027actual\u0027)\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at System.Data.Tests.DataColumnCollectionTest2.Indexer2() in /_/src/libraries/System.Data.Common/tests/System/Data/DataColumnCollectionTest2.cs:line 662\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\r\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ev-wenyuxu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-x86`, `area-System.Data`, `os-windows`, `JitStress`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-06T01:20:38Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Test failure System.Data.Tests.DataColumnCollectionTest2.Indexer2",
        "labels":  [
                       "arch-x86",
                       "area-System.Data",
                       "os-windows",
                       "JitStress"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95399",
        "createdAt":  "2023-11-29T12:49:08Z",
        "number":  95399,
        "author":  "ah1508",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-30T12:07:39Z",
        "body":  "### Problem description\r\n\r\nWhen using serialization isolation level, the call to `Commit` is sometime rejected (for example when sql state 40001). The transaction is then completed and must not be touched.\r\n\r\nHowever the usual way to handle transaction is:\r\n\r\n```csharp\r\nusing(DbConnection connection = new ...)\r\n{\r\n  await connection.OpenAsync();\r\n  using(DbTransaction tx = await connection.BeginTransactionAsync())\r\n  {\r\n    try\r\n    {\r\n      // do stuff with connection\r\n      await tx.CommitAsync();\r\n    }\r\n    catch(Exception e)\r\n    {\r\n      await tx.RollbackAsync();\r\n      throw;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nwhich can be improved: the call to `RollbackAsync` must be surrounded by a try/catch because it may throw an exception if transaction is already completed. How could the transaction be completed ? Because commit was called. How commit could fail ? Because of a serialization anomaly. So the catch clause must be written like this:\r\n\r\n```csharp\r\ntry   // no way to check if rollback should be called\r\n{\r\n  await tx.RollbackAsync();\r\n} catch {}\r\nthrow;\r\n```\r\nIt looks like a blind attempt to rollback.\r\n\r\n### Proposal\r\n\r\nSql Server and Postgresql implementation of `DbTransaction` have a boolean flag that incidates if the transaction is completed or not. This flag is named `IsZombied` in `SqlTransaction` and `IsCompleted` in `NpgsqlTransaction`. \r\n\r\nSee https://github.com/microsoft/referencesource/blob/master/System.Data/System/Data/SqlClient/SqlTransaction.cs#L87\r\n\r\nand https://github.com/npgsql/npgsql/blob/main/src/Npgsql/NpgsqlTransaction.cs#L45\r\n\r\nIt would be interesting to have the same information in the public API. It would allow something like this:\r\n\r\n```csharp\r\n    catch(Exception e)\r\n    {\r\n      if(!tx.IsCompleted)\r\n      {\r\n        await tx.RollbackAsync();\r\n        throw;\r\n      }\r\n    }\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObUsung==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5tMSk3",
                                           "createdAt":  "2023-11-29T12:49:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one area label.",
                                           "updatedAt":  "2023-11-29T12:49:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tMSk_",
                                           "createdAt":  "2023-11-29T13:51:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "If CommitAsync has failed (returned a failed task) and the transaction is considered complete, I suppose the transaction isn\u0027t holding any server-side resources (e.g. locks) any more; in effect, it has been rolled back already, even if the application isn\u0027t aware of that. Could RollbackAsync be changed so that it succeeds (once) in this situation?",
                                           "updatedAt":  "2023-11-29T13:51:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tMSlI",
                                           "createdAt":  "2023-11-29T13:53:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baronfel",
                                           "body":  "This is an API question so I\u0027m transferring to the Runtime repo. ",
                                           "updatedAt":  "2023-11-29T13:53:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tMSpU",
                                           "createdAt":  "2023-11-29T13:53:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Problem description\r\n\r\nWhen using serialization isolation level, the call to `Commit` is sometime rejected (for example when sql state 40001). The transaction is then completed and must not be touched.\r\n\r\nHowever the usual way to handle transaction is:\r\n\r\n```csharp\r\nusing(DbConnection connection = new ...)\r\n{\r\n  await connection.OpenAsync();\r\n  using(DbTransaction tx = await connection.BeginTransactionAsync())\r\n  {\r\n    try\r\n    {\r\n      // do stuff with connection\r\n      await tx.CommitAsync();\r\n    }\r\n    catch(Exception e)\r\n    {\r\n      await tx.RollbackAsync();\r\n      throw;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nwhich can be improved: the call to `RollbackAsync` must be surrounded by a try/catch because it may throw an exception if transaction is already completed. How could the transaction be completed ? Because commit was called. How commit could fail ? Because of a serialization anomaly. So the catch clause must be written like this:\r\n\r\n```csharp\r\ntry   // no way to check if rollback should be called\r\n{\r\n  await tx.RollbackAsync();\r\n} catch {}\r\nthrow;\r\n```\r\nIt looks like a blind attempt to rollback.\r\n\r\n### Proposal\r\n\r\nSql Server and Postgresql implementation of `DbTransaction` have a boolean flag that incidates if the transaction is completed or not. This flag is named `IsZombied` in `SqlTransaction` and `IsCompleted` in `NpgsqlTransaction`. \r\n\r\nSee https://github.com/microsoft/referencesource/blob/master/System.Data/System/Data/SqlClient/SqlTransaction.cs#L87\r\n\r\nand https://github.com/npgsql/npgsql/blob/main/src/Npgsql/NpgsqlTransaction.cs#L45\r\n\r\nIt would be interesting to have the same information in the public API. It would allow something like this:\r\n\r\n```csharp\r\n    catch(Exception e)\r\n    {\r\n      if(!tx.IsCompleted)\r\n      {\r\n        await tx.RollbackAsync();\r\n        throw;\r\n      }\r\n    }\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eah1508\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Transactions`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-29T13:53:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tMvTM",
                                           "createdAt":  "2023-11-29T14:57:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODN_a_w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Wraith2",
                                                                               "createdAt":  "2023-11-29T23:06:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e Sql Server and Postgresql implementation of DbTransaction have a boolean flag that incidates if the transaction is completed or not. \r\n\r\nIt\u0027s important to note that these are both internal. Users should (and generally are) tracking their state in their applications.\r\n\r\nRegardless, assuming we\u0027d add this; given that there are other ADO.NET providers without the proposed flag, what should be the default ADO.NET behavior? We can\u0027t introduce it as an abstract property since that would break all providers, and we can\u0027t just return true or false.\r\n\r\nAlso, the precise definition of \"completed\" may vary as there are various details around transaction handling that differs across databases. For example, I\u0027m not sure exactly what happens after an error - in PostgreSQL that places the transaction in an aborted state, and the user **must** perform a rollback in order to continue doing anything else. I\u0027m not sure what a public IsCompleted would/should be in that case.\r\n\r\n\u003e If CommitAsync has failed (returned a failed task) and the transaction is considered complete, I suppose the transaction isn\u0027t holding any server-side resources (e.g. locks) any more [...]\r\n\r\nThat\u0027s quite an assumption and probably not true in at least some databases. See my PostgreSQL example above, where  once an error occurs the transaction is placed in an \"aborted\" state, following which it must be rolled back before anything else can be done (I don\u0027t know whether server-side resources are held during that state or not).\r\n\r\n\u003e Could RollbackAsync be changed so that it succeeds (once) in this situation?\r\n\r\nThat\u0027s really asking individual ADO.NET providers (e.g. SqlClient, Npgsql) to change their behavior.",
                                           "updatedAt":  "2023-11-29T14:57:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tSRSw",
                                           "createdAt":  "2023-11-30T10:40:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ah1508",
                                           "body":  "Tracking the state in the application is possible but requires a custom flag that indicated if commit has been called or not. This flag (default value = false) becomes true just before call to `CommitAsync`, allowing to decide to rollback or not in the catch clause. But It is less expressive than reading a `IsCompleted` property on the transaction.\r\n\r\nRegarding the consistency of implementation across various db vendors, since `System.Transactions.Transaction` has a `TransactionCompleted` event, don\u0027t you think it is possible to have a consistent implementation of an `IsCompleted` flag ?\r\n\r\nRegarding backward compatibility: abstract property is indeed not an option. Non abstract but null by default (bool?) is not ideal either because it would stay there forever even after db vendors provide implementation. \r\n\r\nHow about a `TransactionState` property of type enum with `Unknown` or `Undefined` or `NotImplemented` as a possible value ? Then Db vendors could progressively override the property in their driver implementation, developer would just have to check if the ADO driver he uses implements this property or not so he knows if he rely on it. Another possibility is to not have this  `Unknown` or `Undefined` or `NotImplemented` choice but a default property implementation that throws an exception, here again the developer checks the doc of its ADO driver to know if he can use this property.",
                                           "updatedAt":  "2023-11-30T11:23:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tSyzl",
                                           "createdAt":  "2023-11-30T12:07:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "roji",
                                           "body":  "\u003e Regarding the consistency of implementation across various db vendors, since System.Transactions.Transaction has a TransactionCompleted event, don\u0027t you think it is possible to have a consistent implementation of an IsCompleted flag ?\r\n\r\nSystem.Transactions.Transaction is a different layer and can represent something quite different from a DbTransaction (e.g. an MSDTC 2PC distributed transaction). Note that DbTransaction doesn\u0027t have such an event.\r\n\r\n\u003e How about a TransactionState property of type enum with Unknown or Undefined or NotImplemented as a possible value ?\r\n\r\nSomething like a TransactionState enum could be a possible design, though we\u0027d have to carefully think about the design here. For instance, Unknown could indicate both that the driver doesn\u0027t support the feature, and that it does support it but really does not know the transaction state (e.g. because a network failure occured during commit.\r\n\r\nI\u0027ll put this in the Future milestone to think about and gather feedback. However, given that in most cases it\u0027s possible to simply track the state outside of the driver, the value here seems somewhat limited.\r\nThis could be a possible design.",
                                           "updatedAt":  "2023-11-30T12:07:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tSy6e",
                                           "createdAt":  "2023-11-30T12:07:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Problem description\r\n\r\nWhen using serialization isolation level, the call to `Commit` is sometime rejected (for example when sql state 40001). The transaction is then completed and must not be touched.\r\n\r\nHowever the usual way to handle transaction is:\r\n\r\n```csharp\r\nusing(DbConnection connection = new ...)\r\n{\r\n  await connection.OpenAsync();\r\n  using(DbTransaction tx = await connection.BeginTransactionAsync())\r\n  {\r\n    try\r\n    {\r\n      // do stuff with connection\r\n      await tx.CommitAsync();\r\n    }\r\n    catch(Exception e)\r\n    {\r\n      await tx.RollbackAsync();\r\n      throw;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nwhich can be improved: the call to `RollbackAsync` must be surrounded by a try/catch because it may throw an exception if transaction is already completed. How could the transaction be completed ? Because commit was called. How commit could fail ? Because of a serialization anomaly. So the catch clause must be written like this:\r\n\r\n```csharp\r\ntry   // no way to check if rollback should be called\r\n{\r\n  await tx.RollbackAsync();\r\n} catch {}\r\nthrow;\r\n```\r\nIt looks like a blind attempt to rollback.\r\n\r\n### Proposal\r\n\r\nSql Server and Postgresql implementation of `DbTransaction` have a boolean flag that incidates if the transaction is completed or not. This flag is named `IsZombied` in `SqlTransaction` and `IsCompleted` in `NpgsqlTransaction`. \r\n\r\nSee https://github.com/microsoft/referencesource/blob/master/System.Data/System/Data/SqlClient/SqlTransaction.cs#L87\r\n\r\nand https://github.com/npgsql/npgsql/blob/main/src/Npgsql/NpgsqlTransaction.cs#L45\r\n\r\nIt would be interesting to have the same information in the public API. It would allow something like this:\r\n\r\n```csharp\r\n    catch(Exception e)\r\n    {\r\n      if(!tx.IsCompleted)\r\n      {\r\n        await tx.RollbackAsync();\r\n        throw;\r\n      }\r\n    }\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eah1508\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Data`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-30T12:07:38Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Add IsCompleted flag to System.Data.Common.DbTransaction",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98903",
        "createdAt":  "2024-02-25T09:01:32Z",
        "number":  98903,
        "author":  "roji",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-4H9A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lilinus",
                                            "createdAt":  "2024-02-25T11:46:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dean-NC",
                                            "createdAt":  "2025-02-07T14:56:42Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-09T08:04:02Z",
        "body":  "[DbDataReader](https://learn.microsoft.com/en-us/dotnet/api/system.data.common.dbdatareader) currently implements non-generic IEnumerable only, with no default implement (abstract). Implementations typically return a [DbEnumerator](https://learn.microsoft.com/en-us/dotnet/api/system.data.common.dbenumerator) ([source](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Data.Common/src/System/Data/Common/DbEnumerator.cs)) instance, which exposes [DbDataRecords](https://learn.microsoft.com/en-us/dotnet/api/system.data.common.dbdatarecord?view=net-7.0) as the elements.\r\n\r\nThe problems with the current situation are:\r\n* The lack of a generic IEnumerable implementation\r\n* The lack of async enumeration support\r\n* DbDataRecord lacks an async field access API (`GetFieldValue\u003cT\u003e`, like on DbDataReader)\r\n    * It should be noted that DbDataRecord itself also lacks async access APIs. This probably makes sense, as it represents a record/row that has been fully loaded into memory, and no actual I/O is meant to take place when its columns are accessed.\r\n    * This also allows older DbDataRecord instances to be retained after new ones have been read via the same DbDataReader.\r\n    * If the user is interested in streaming column access, they can use DbDataReader directly, rather than going through IEnumerable/IAsyncEnumerable.\r\n\r\nIn an ideal world, we\u0027d make DbDataReader implement `IEnumerable\u003cDbDataRecord\u003e` and `IAsyncEnumerable\u003cDbDataRecord\u003e`; the default implementations for these would return an enumerator implementation from System.Data - either a DbEnumerator retro-fitted to work with DbDataReader and its async APIs (DbEnumerator currently works with IDataReader), or a new implementation.\r\n\r\nLeaving this issue open for now, to gather more user feedback, as we haven\u0027t seen much interest in this (but see previous discussion in #98890).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvPmi0g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc50_uns",
                                           "createdAt":  "2024-02-25T09:01:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n[DbDataReader](https://learn.microsoft.com/en-us/dotnet/api/system.data.common.dbdatareader) currently implements non-generic IEnumerable only, with no default implement (abstract). Implementations typically return a [DbEnumerator](https://learn.microsoft.com/en-us/dotnet/api/system.data.common.dbenumerator) ([source](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Data.Common/src/System/Data/Common/DbEnumerator.cs)) instance, which exposes [DbDataRecords](https://learn.microsoft.com/en-us/dotnet/api/system.data.common.dbdatarecord?view=net-7.0) as the elements.\r\n\r\nThe problems with the current situation are:\r\n* The lack of a generic IEnumerable implementation\r\n* The lack of async enumeration support\r\n* DbDataRecord lacks an async field access API (`GetFieldValue\u003cT\u003e`, like on DbDataReader)\r\n    * It should be noted that DbDataRecord itself also lacks async access APIs. This probably makes sense, as it represents a record/row that has been fully loaded into memory, and no actual I/O is meant to take place when its columns are accessed.\r\n    * This also allows older DbDataRecord instances to be retained after new ones have been read via the same DbDataReader.\r\n    * If the user is interested in streaming column access, they can use DbDataReader directly, rather than going through IEnumerable/IAsyncEnumerable.\r\n\r\nIn an ideal world, we\u0027d make DbDataReader implement `IEnumerable\u003cDbDataRecord\u003e` and `IAsyncEnumerable\u003cDbDataRecord\u003e`; the default implementations for these would return an enumerator implementation from System.Data - either a DbEnumerator retro-fitted to work with DbDataReader and its async APIs (DbEnumerator currently works with IDataReader), or a new implementation.\r\n\r\nLeaving this issue open for now, to gather more user feedback, as we haven\u0027t seen much interest in this (but see previous discussion in #98890).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eroji\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Data`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-25T09:01:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68-aLS",
                                           "createdAt":  "2025-08-09T08:04:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nahakyuu",
                                           "body":  "I am interested in this. When writing some dynamic queries, if the `IAsyncEnumerable` interface is implemented, it will be convenient to use `System.Linq.Async`",
                                           "updatedAt":  "2025-08-09T08:04:02Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Evolve the DbDataReader enumerability story",
        "labels":  [
                       "api-suggestion",
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103062",
        "createdAt":  "2024-06-05T02:59:40Z",
        "number":  103062,
        "author":  "carlossanlop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:01:27Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=697729\r\nBuild error leg or test failing: System.Data.Tests.DataTableReadXmlSchemaTest.XsdSchemaDeserializationIgnoresLocale\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": [\r\n    \"[Long Running Test] \u0027System.Data.Tests.DataTableReadXmlSchemaTest.XsdSchemaDeserializationIgnoresLocale\u0027\",\r\n    \"Command timed out, and was killed\"\r\n  ],\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n- Queue: `Libraries Test Run checked coreclr windows x64 Release`\r\n- Log: https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-103054-merge-6d0603a7a12d444696/System.Data.Common.Tests/1/console.ec99a4a3.log?helixlogtype=result\r\n- Output:\r\n```\r\n===========================================================================================================\r\n\r\nC:\\h\\w\\A45B097A\\w\\A2D00974\\e\u003e\"C:\\h\\w\\A45B097A\\p\\dotnet.exe\" exec --runtimeconfig System.Data.Common.Tests.runtimeconfig.json --depsfile System.Data.Common.Tests.deps.json xunit.console.dll System.Data.Common.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing  \r\n  Discovering: System.Data.Common.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Data.Common.Tests (found 1823 of 1825 test cases)\r\n  Starting:    System.Data.Common.Tests (parallel test collections = on [4 threads], stop on fail = off)\r\n   System.Data.Common.Tests: [Long Running Test] \u0027System.Data.Tests.DataTableReadXmlSchemaTest.XsdSchemaDeserializationIgnoresLocale\u0027, Elapsed: 00:02:43\r\n   System.Data.Common.Tests: [Long Running Test] \u0027System.Data.Tests.DataTableReadXmlSchemaTest.XsdSchemaDeserializationIgnoresLocale\u0027, Elapsed: 00:04:43\r\n   System.Data.Common.Tests: [Long Running Test] \u0027System.Data.Tests.DataTableReadXmlSchemaTest.XsdSchemaDeserializationIgnoresLocale\u0027, Elapsed: 00:06:43\r\n   System.Data.Common.Tests: [Long Running Test] \u0027System.Data.Tests.DataTableReadXmlSchemaTest.XsdSchemaDeserializationIgnoresLocale\u0027, Elapsed: 00:08:44\r\n   System.Data.Common.Tests: [Long Running Test] \u0027System.Data.Tests.DataTableReadXmlSchemaTest.XsdSchemaDeserializationIgnoresLocale\u0027, Elapsed: 00:10:44\r\n   System.Data.Common.Tests: [Long Running Test] \u0027System.Data.Tests.DataTableReadXmlSchemaTest.XsdSchemaDeserializationIgnoresLocale\u0027, Elapsed: 00:12:44\r\n   System.Data.Common.Tests: [Long Running Test] \u0027System.Data.Tests.DataTableReadXmlSchemaTest.XsdSchemaDeserializationIgnoresLocale\u0027, Elapsed: 00:14:44\r\n[\u0027System.Data.Common.Tests\u0027 END OF WORK ITEM LOG: Command timed out, and was killed]\r\n```\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=697729\r\n**Error message validated:** `[[Long Running Test] \u0027System.Data.Tests.DataTableReadXmlSchemaTest.XsdSchemaDeserializationIgnoresLocale\u0027 Command timed out, and was killed`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 6/5/2024 2:59:59 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkg6NEA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6AE42Q",
                                           "createdAt":  "2024-06-05T03:00:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-05T03:00:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6CGzPy",
                                           "createdAt":  "2024-06-21T14:04:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@bartonjs  - this is another BinaryFormatter related test. Assigning to you for tracking.\r\nhttps://github.com/dotnet/runtime/blob/65ef1101ddd8f45d61eb8be7f6d9ae5d4050c804/src/libraries/System.Data.Common/tests/System/Data/DataTableReadXmlSchemaTest.cs#L479\r\n\r\ncc @eiriktsarpalis \r\n",
                                           "updatedAt":  "2024-06-21T14:04:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ng1q9",
                                           "createdAt":  "2024-09-25T14:07:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@bartonjs - this is still marked for 9.0.0 -- please take a look and adjust milestone if necessary, or can we close the issue?",
                                           "updatedAt":  "2024-09-25T14:08:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SDo0Q",
                                           "createdAt":  "2024-10-31T17:23:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bartonjs",
                                           "body":  "BinaryFormatter can be missing, present-or-disabled, or present-and-enabled.  The only changes we did during 9 were to make it be missing by default, nothing that would have made a test be long running.",
                                           "updatedAt":  "2024-10-31T17:23:30Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "CI timeout in System.Data.Tests.DataTableReadXmlSchemaTest.XsdSchemaDeserializationIgnoresLocale",
        "labels":  [
                       "area-System.Data",
                       "os-windows",
                       "arch-x64",
                       "runtime-coreclr",
                       "Known Build Error"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110131",
        "createdAt":  "2024-11-25T05:58:30Z",
        "number":  110131,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-15T17:56:44Z",
        "body":  "**Failed in:** [runtime-coreclr libraries-jitstress2-jitstressregs 20241123.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=877433\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=22895726\u0026resultId=122486\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-windows-Release-arm64-jitstress2_jitstressregs8-Windows.11.Arm64.Open\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\n    - System.Data.Tests.DataSetTest.ReadWriteXml2\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ComplexElementAttributeTable1\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictSimpleComplexColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTable\nnet10.0-windows-Release-arm64-jitstress2_jitstressregs4-Windows.11.Arm64.Open\n    - System.Data.Tests.DataSetTest.ReadWriteXml2\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ComplexElementAttributeTable1\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictSimpleComplexColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTable\nnet10.0-linux-Release-arm64-jitstress2_jitstressregs0x80-(Ubuntu.2004.Arm64.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-20.04-helix-arm64v8\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\n    - System.Data.Tests.DataSetTest.ReadWriteXml2\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ComplexElementAttributeTable1\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictSimpleComplexColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTable\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\n```\n\n**Error message:**\n```\n Assert.Equal() Failure: Values differ\nExpected: 1\nActual:   0\n```\n\n**Stack trace:**\n```\n   at System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference() in /_/src/libraries/System.Data.Common/tests/System/Data/DataSetReadXmlSchemaTest.cs:line 124\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOn8EnaA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6U1CdK",
                                           "createdAt":  "2024-11-25T05:58:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @roji, @ajcvickers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-25T05:58:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VAg1r",
                                           "createdAt":  "2024-11-26T08:11:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20241124.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=878119\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=22924314\u0026resultId=121317\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-x64-jitstress2_tiered-Ubuntu.2204.Amd64.Open\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ComplexElementAttributeTable1\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictSimpleComplexColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTable\n    - System.Data.Tests.DataSetTest.ReadWriteXml2\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\nnet10.0-windows-Release-x64-jitstress2_tiered-Windows.10.Amd64.Open\n    - System.Data.Tests.DataSetTest.ReadWriteXml2\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ComplexElementAttributeTable1\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictSimpleComplexColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTable\nnet10.0-linux-Release-arm64-jitstress2-(Ubuntu.2004.Arm64.Open)Ubuntu.2004.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-20.04-helix-arm64v8\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ComplexElementAttributeTable1\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictSimpleComplexColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTable\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\n    - System.Data.Tests.DataSetTest.ReadWriteXml2\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\n```\n\n**Error message:**\n```\n Assert.Equal() Failure: Values differ\nExpected: 1\nActual:   0\n```\n\n**Stack trace:**\n```\n   at System.Data.Tests.DataSetAssertion.AssertDataTable(String label, DataTable dt, String name, Int32 columnCount, Int32 rowCount, Int32 parentRelationCount, Int32 childRelationCount, Int32 constraintCount, Int32 primaryKeyLength) in /_/src/libraries/System.Data.Common/tests/System/Data/DataSetAssertion.cs:line 106\n   at System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute() in /_/src/libraries/System.Data.Common/tests/System/Data/DataSetInferXmlSchemaTest.cs:line 409\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2024-11-26T08:11:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fmctH",
                                           "createdAt":  "2025-02-24T07:53:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20250222.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=960107\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25560178\u0026resultId=114039\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-arm64-jitstress2-(Ubuntu.2404.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-24.04-helix-arm64v8\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ComplexElementAttributeTable1\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictSimpleComplexColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTable\n    - System.Data.Tests.DataSetTest.ReadWriteXml2\nnet10.0-windows-Release-x86-jitstress2_tiered-Windows.10.Amd64.Open\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\n    - System.Data.Tests.DataSetTest.ReadWriteXml2\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ComplexElementAttributeTable1\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictSimpleComplexColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTable\nnet10.0-linux-Release-arm-jitstress2-(Debian.12.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-12-helix-arm32v7\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\n    - System.Data.Tests.DataSetTest.ReadWriteXml2\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ComplexElementAttributeTable1\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictSimpleComplexColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTable\nnet10.0-linux-Release-arm64-jitstress2_tiered-(Ubuntu.2404.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-24.04-helix-arm64v8\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\nnet10.0-windows-Release-x86-jitstress2-Windows.10.Amd64.Open\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\n    - System.Data.Tests.DataSetTest.ReadWriteXml2\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ComplexElementAttributeTable1\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictSimpleComplexColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTable\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\nnet10.0-windows-Release-arm64-jitstress2-Windows.11.Arm64.Open\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ComplexElementAttributeTable1\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictSimpleComplexColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTable\n    - System.Data.Tests.DataSetTest.ReadWriteXml2\n```\n\n**Error message:**\n```\n Assert.Equal() Failure: Values differ\nExpected: 1\nActual:   0\n```\n\n**Stack trace:**\n```\n   at System.Data.Tests.DataRelationTest.RelationFromSchema() in /_/src/libraries/System.Data.Common/tests/System/Data/DataRelationTest.cs:line 350\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```\n",
                                           "updatedAt":  "2025-02-24T07:53:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fwSdo",
                                           "createdAt":  "2025-02-25T02:30:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20250223.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=960720\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25578652\u0026resultId=117076\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-arm64-jitstress2_tiered-(Ubuntu.2404.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-24.04-helix-arm64v8\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\nnet10.0-linux-Release-arm64-jitstress2-(Ubuntu.2404.Arm64.Open)Ubuntu.2204.Armarch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-24.04-helix-arm64v8\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ComplexElementAttributeTable1\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictSimpleComplexColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTable\n    - System.Data.Tests.DataSetTest.ReadWriteXml2\nnet10.0-linux-Release-arm-jitstress2-(Debian.12.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-12-helix-arm32v7\n    - System.Data.Tests.DataSetTest.ReadWriteXml2\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ComplexElementAttributeTable1\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictSimpleComplexColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTable\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\nnet10.0-linux-Release-x64-jitstress2-Ubuntu.2204.Amd64.Open\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ComplexElementAttributeTable1\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictSimpleComplexColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTable\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\n    - System.Data.Tests.DataSetTest.ReadWriteXml2\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\nnet10.0-windows-Release-x64-jitstress2-Windows.10.Amd64.Open\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ComplexElementAttributeTable1\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictSimpleComplexColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTable\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\n    - System.Data.Tests.DataSetTest.ReadWriteXml2\nnet10.0-windows-Release-arm64-jitstress2_tiered-Windows.11.Arm64.Open\n    - System.Data.Tests.DataSetTest.ReadWriteXml2\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ComplexElementAttributeTable1\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictSimpleComplexColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTable\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\nnet10.0-windows-Release-x86-jitstress2-Windows.10.Amd64.Open\n    - System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestSampleFileComplexTables\n    - System.Data.Tests.DataSetReadXmlSchemaTest.RepeatableSimpleElement\n    - System.Data.Tests.DataSetReadXmlSchemaTest.TestMoreThanOneRepeatableColumns\n    - System.Data.Tests.DataSetTest.ReadWriteXml2\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTableAttribute\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ComplexElementAttributeTable1\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictSimpleComplexColumns\n    - System.Data.Tests.DataSetInferXmlSchemaTest.ConflictColumnTable\n    - System.Data.Tests.DataRelationTest.RelationFromSchema\n```\n\n**Error message:**\n```\n Assert.Equal() Failure: Values differ\nExpected: 1\nActual:   0\n```\n\n**Stack trace:**\n```\n   at System.Data.Tests.DataSetAssertion.AssertDataTable(String label, DataTable dt, String name, Int32 columnCount, Int32 rowCount, Int32 parentRelationCount, Int32 childRelationCount, Int32 constraintCount, Int32 primaryKeyLength) in /_/src/libraries/System.Data.Common/tests/System/Data/DataSetAssertion.cs:line 106\n   at System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference() in /_/src/libraries/System.Data.Common/tests/System/Data/DataSetReadXmlSchemaTest.cs:line 124\n   at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in /_/src/coreclr/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.CoreCLR.cs:line 36\n   at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr) in /_/src/libraries/System.Private.CoreLib/src/System/Reflection/MethodBaseInvoker.cs:line 57\n```",
                                           "updatedAt":  "2025-02-25T02:30:50Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Test failure: System.Data.Tests.DataSetReadXmlSchemaTest.SingleElementTreatmentDifference",
        "labels":  [
                       "arch-arm64",
                       "area-System.Data",
                       "os-windows",
                       "JitStress",
                       "blocking-clean-ci-optional"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115649",
        "createdAt":  "2025-05-16T12:29:21Z",
        "number":  115649,
        "author":  "Patch4747",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCi7UA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Copilot",
                                            "createdAt":  "2025-05-19T17:53:54Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-05-16T13:01:46Z",
        "body":  "### Description\n\n`DataTable.Compute()` throws a `System.IndexOutOfRangeException` on a simple expression: `\"true NOT= false\"`.\n\n### Reproduction Steps\n\n```csharp\nusing System.Data;\n\nnew DataTable().Compute(\"true NOT= false\", null);\n```\n\n### Expected behavior\n\nI would expect `DataTable.Compute()` to execute successfully and return `true`.\n\nSimilar expressions are evaluated successfully by `DataTable.Compute()`.\n\n```csharp\nusing System.Data;\nusing System.Diagnostics;\n\t\t\t\t\t\nDebug.Assert((bool)new DataTable().Compute(\"1 NOT= 2\", null) == true);            // passes\nDebug.Assert((bool)new DataTable().Compute(\"true = false\", null) == false);       // passes\nDebug.Assert((bool)new DataTable().Compute(\"true NOT= false\", null) == true);     // exception thrown\n```\n\n### Actual behavior\n\nA `System.IndexOutOfRangeException` is thrown. Stack trace:\n\n```\nUnhandled exception. System.IndexOutOfRangeException: Index was outside the bounds of the array.\n   at System.Data.ExpressionParser.BuildExpression(Int32 pri)\n   at System.Data.ExpressionParser.Parse()\n   at System.Data.DataExpression..ctor(DataTable table, String expression, Type type)\n   at System.Data.DataTable.Compute(String expression, String filter)\n   at Program.Main()\nCommand terminated by signal 6\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nCan work around the problem by reformulating the expression:\n\n```csharp\nusing System.Data;\nusing System.Diagnostics;\n\t\t\t\t\t\nDebug.Assert((bool)new DataTable().Compute(\"NOT(true = false)\", null) == true);     // passes\n```\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrA70_w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6sDdWr",
                                           "createdAt":  "2025-05-16T12:30:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @roji, @SamMonoRT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-16T12:30:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6sDvT_",
                                           "createdAt":  "2025-05-16T13:01:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "Since there is a known workaround, moving to Future milestone. We will consider it for the next release.",
                                           "updatedAt":  "2025-05-16T13:01:45Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "DataTable.Compute throws exception on \"true NOT= false\"",
        "labels":  [
                       "area-System.Data"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119056",
        "createdAt":  "2025-08-25T11:05:57Z",
        "number":  119056,
        "author":  "alienghub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-25T15:04:20Z",
        "body":  "### Description\n\n```cs\n    string sql = @\"SELECT foo_p_id FROM foo\";\n\n    await using var cmd = new MySqlCommand(sql, conn);\n    var table = new DataTable();\n    await using var reader = await cmd.ExecuteReaderAsync();\n    table.Load(reader);\n\n    Console.WriteLine($\"Rows loaded: {table.Rows.Count}\");\n    foreach (DataRow row in table.Rows)\n    {\n        Console.WriteLine(string.Join(\", \", row.ItemArray));\n    }\n```\n\nI only get unique/distinct results:\nRows loaded: 4\n1\n2\n3\n4\n\nwhile it should print all repeating elements (56 rows)\n\n\n If i do:\n\n```cs\n    string sql = @\"SELECT foo_p_id, foo_id FROM foo\";\n\n    await using var cmd = new MySqlCommand(sql, conn);\n    var table = new DataTable();\n    await using var reader = await cmd.ExecuteReaderAsync();\n    table.Load(reader);\n\n    Console.WriteLine($\"Rows loaded: {table.Rows.Count}\");\n    foreach (DataRow row in table.Rows)\n    {\n        Console.WriteLine(string.Join(\", \", row.ItemArray));\n    }\n```\nI get correct data. \n\nfoo_p_id and foo_id are parts of a composite key and they are foreign keys as well.\n\n### Reproduction Steps\n\n```sql\nCREATE TABLE `foo` (\n  `foo_p_id` int NOT NULL,\n  `foo_id` int NOT NULL,\n  PRIMARY KEY (`foo_p_id`,`foo_id`),\n  KEY `IDX_7AFDA188982AAAB8` (`foo_p_id`),\n  KEY `IDX_7AFDA1882DFD8231` (`foo_id`),\n  CONSTRAINT `FK_7AFDA1882DFD8231` FOREIGN KEY (`foo_id`) REFERENCES `foo_id_table` (`id`) ON DELETE CASCADE,\n  CONSTRAINT `FK_7AFDA188982AAAB8` FOREIGN KEY (`foo_p_id`) REFERENCES `foo_p_table` (`id`) ON DELETE CASCADE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci\n```\n\n### Expected behavior\n\nRows loaded: 56\n1\n1\n1\n1\n1\n1\n1\n2\n2\n2\n2\n2\n.\n.\n.\n4\n\n### Actual behavior\n\n1\n2\n3\n4\n\n\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nPrinting manually works:\n```cs\n  while (await reader.ReadAsync())\n  {\n      for (int i = 0; i \u003c reader.FieldCount; i++)\n      {\n          Console.Write($\"{reader[i]} \");\n      }\n      Console.WriteLine();\n  }\n```\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv-upwQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6_66nB",
                                           "createdAt":  "2025-08-25T11:26:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @roji, @SamMonoRT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-25T11:26:18Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Datatable.Load does not load composite keys correctly",
        "labels":  [
                       "area-System.Data"
                   ]
    }
]
