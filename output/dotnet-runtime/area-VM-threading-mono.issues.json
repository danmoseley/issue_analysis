[
    {
        "url":  "https://github.com/dotnet/runtime/issues/34543",
        "createdAt":  "2020-04-04T13:32:32Z",
        "number":  34543,
        "author":  "MaximLipnin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-26T16:19:45Z",
        "body":  "`System.Threading.Threads.Tests.ThreadTests` tests are disabled in Mono\u0027s CoreFX.issues_windows.rsp file and after enabling some of them still fail locally:\r\n- System.Threading.Threads.Tests.ThreadTests.ApartmentState_AttributePresent\r\n- System.Threading.Threads.Tests.ThreadTests.GetSetApartmentStateTest_ChangeAfterThreadStarted_Windows\r\n- System.Threading.Threads.Tests.ThreadTests.ApartmentStateTest_ChangeBeforeThreadStarted_Windows\r\n- System.Threading.Threads.Tests.ThreadTests.WindowsPrincipalPolicyTest_Windows_NewThreads\r\n- System.Threading.Threads.Tests.ThreadTests.NoPrincipalToWindowsPrincipalPolicyTest_Windows_NewThreads\r\n\r\nThe output:\r\n\r\n```\r\nSystem.Threading.Threads.Tests.ThreadTests.ApartmentState_AttributePresent(appName: \"STAMain.exe\", testName: \"GetApartmentStateTest\") [FAIL]\r\nAssert.Equal() Failure\r\nExpected: 0\r\nActual:   2\r\nStack Trace:\r\n    _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs(181,0): at System.Threading.Threads.Tests.ThreadTests.ApartmentState_AttributePresent(String appName, String testName)\r\n    _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs(359,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\nAssert.Equal() Failure\r\nSystem.Threading.Threads.Tests.ThreadTests.ApartmentState_AttributePresent(appName: \"STAMain.exe\", testName: \"WaitAllNotSupportedOnSta_Test0\") [FAIL]\r\nExpected: 0\r\nActual:   2\r\nStack Trace:\r\n    _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs(181,0): at System.Threading.Threads.Tests.ThreadTests.ApartmentState_AttributePresent(String appName, String testName)\r\n    _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs(359,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\nSystem.Threading.Threads.Tests.ThreadTests.ApartmentState_AttributePresent(appName: \"STAMain.exe\", testName: \"WaitAllNotSupportedOnSta_Test1\") [FAIL]\r\nAssert.Equal() Failure\r\nExpected: 0\r\nActual:   2\r\nStack Trace:\r\n    _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs(181,0): at System.Threading.Threads.Tests.ThreadTests.ApartmentState_AttributePresent(String appName, String testName)\r\n    _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs(359,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\nSystem.Threading.Threads.Tests.ThreadTests.ApartmentState_AttributePresent(appName: \"MTAMain.exe\", testName: \"GetApartmentStateTest\") [FAIL]\r\nAssert.Equal() Failure\r\nExpected: 0\r\nActual:   2\r\nStack Trace:\r\n    _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs(181,0): at System.Threading.Threads.Tests.ThreadTests.ApartmentState_AttributePresent(String appName, String testName)\r\n    _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs(359,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\nSystem.Threading.Threads.Tests.ThreadTests.ApartmentState_AttributePresent(appName: \"DefaultApartmentStateMain.exe\", testName: \"GetApartmentStateTest\") [FAIL]\r\nAssert.Equal() Failure\r\nExpected: 0\r\nActual:   2\r\nStack Trace:\r\n    _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs(181,0): at System.Threading.Threads.Tests.ThreadTests.ApartmentState_AttributePresent(String appName, String testName)\r\n    _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs(359,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n=================================================\r\nSystem.Threading.Threads.Tests.ThreadTests.GetSetApartmentStateTest_ChangeAfterThreadStarted_Windows(getApartmentState: Func`2 { Method = System.Threading.ApartmentState \u003cApartmentStateTest_MemberData\u003eb__3_0(System.Threading.Thread), Target = \u003c\u003ec { } }, setApartmentState: Func`3 { Method = Int32 \u003cApartmentStateTest_MemberData\u003eb__3_1(System.Threading.Thread, System.Threading.ApartmentState), Target = \u003c\u003ec { } }, setType: 0) [FAIL]\r\nSystem.AggregateException : One or more errors occurred. (Assert.Equal() Failure\r\nExpected: MTA\r\nActual:   Unknown)\r\n---- Assert.Equal() Failure\r\nExpected: MTA\r\nActual:   Unknown\r\nStack Trace:\r\n    _\\src\\libraries\\Common\\tests\\System\\Threading\\ThreadTestHelpers.cs(52,0): at System.Threading.Tests.ThreadTestHelpers.\u003c\u003ec__DisplayClass4_0.\u003cCreateGuardedThread\u003eb__1()\r\n    _\\src\\libraries\\Common\\tests\\System\\Threading\\ThreadTestHelpers.cs(57,0): at System.Threading.Tests.ThreadTestHelpers.\u003c\u003ec__DisplayClass4_0.\u003cCreateGuardedThread\u003eb__2()\r\n    _\\src\\libraries\\Common\\tests\\System\\Threading\\ThreadTestHelpers.cs(108,0): at System.Threading.Tests.ThreadTestHelpers.RunTestInBackgroundThread(Action test)\r\n    _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs(239,0): at System.Threading.Threads.Tests.ThreadTests.GetSetApartmentStateTest_ChangeAfterThreadStarted_Windows(Func`2 getApartmentState, Func`3 setApartmentState, Int32 setType)\r\n    _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs(359,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n    ----- Inner Stack Trace -----\r\n    _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs(245,0): at System.Threading.Threads.Tests.ThreadTests.\u003c\u003ec__DisplayClass9_0.\u003cGetSetApartmentStateTest_ChangeAfterThreadStarted_Windows\u003eb__0()\r\n    _\\src\\libraries\\Common\\tests\\System\\Threading\\ThreadTestHelpers.cs(36,0): at System.Threading.Tests.ThreadTestHelpers.\u003c\u003ec__DisplayClass4_0.\u003cCreateGuardedThread\u003eb__0()\r\nSystem.AggregateException : One or more errors occurred. (Assert.Equal() Failure\r\nSystem.Threading.Threads.Tests.ThreadTests.GetSetApartmentStateTest_ChangeAfterThreadStarted_Windows(getApartmentState: Func`2 { Method = System.Threading.ApartmentState \u003cApartmentStateTest_MemberData\u003eb__3_2(System.Threading.Thread), Target = \u003c\u003ec { } }, setApartmentState: Func`3 { Method = Int32 \u003cApartmentStateTest_MemberData\u003eb__3_3(System.Threading.Thread, System.Threading.ApartmentState), Target = \u003c\u003ec { } }, setType: 1) [FAIL]\r\nExpected: MTA\r\nActual:   Unknown)\r\n---- Assert.Equal() Failure\r\nExpected: MTA\r\nActual:   Unknown\r\nStack Trace:\r\n    _\\src\\libraries\\Common\\tests\\System\\Threading\\ThreadTestHelpers.cs(52,0): at System.Threading.Tests.ThreadTestHelpers.\u003c\u003ec__DisplayClass4_0.\u003cCreateGuardedThread\u003eb__1()\r\n    _\\src\\libraries\\Common\\tests\\System\\Threading\\ThreadTestHelpers.cs(57,0): at System.Threading.Tests.ThreadTestHelpers.\u003c\u003ec__DisplayClass4_0.\u003cCreateGuardedThread\u003eb__2()\r\n    _\\src\\libraries\\Common\\tests\\System\\Threading\\ThreadTestHelpers.cs(108,0): at System.Threading.Tests.ThreadTestHelpers.RunTestInBackgroundThread(Action test)\r\n    _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs(239,0): at System.Threading.Threads.Tests.ThreadTests.GetSetApartmentStateTest_ChangeAfterThreadStarted_Windows(Func`2 getApartmentState, Func`3 setApartmentState, Int32 setType)\r\n    _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs(359,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n    ----- Inner Stack Trace -----\r\n    _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs(245,0): at System.Threading.Threads.Tests.ThreadTests.\u003c\u003ec__DisplayClass9_0.\u003cGetSetApartmentStateTest_ChangeAfterThreadStarted_Windows\u003eb__0()\r\n    _\\src\\libraries\\Common\\tests\\System\\Threading\\ThreadTestHelpers.cs(36,0): at System.Threading.Tests.ThreadTestHelpers.\u003c\u003ec__DisplayClass4_0.\u003cCreateGuardedThread\u003eb__0()\r\nSystem.Threading.Threads.Tests.ThreadTests.GetSetApartmentStateTest_ChangeAfterThreadStarted_Windows(getApartmentState: Func`2 { Method = System.Threading.ApartmentState \u003cApartmentStateTest_MemberData\u003eb__3_4(System.Threading.Thread), Target = \u003c\u003ec { } }, setApartmentState: Func`3 { Method = Int32 \u003cApartmentStateTest_MemberData\u003eb__3_5(System.Threading.Thread, System.Threading.ApartmentState), Target = \u003c\u003ec { } }, setType: 2) [FAIL]\r\nSystem.AggregateException : One or more errors occurred. (Assert.Equal() Failure\r\nExpected: MTA\r\nActual:   Unknown)\r\n---- Assert.Equal() Failure\r\nExpected: MTA\r\nActual:   Unknown\r\nStack Trace:\r\n    _\\src\\libraries\\Common\\tests\\System\\Threading\\ThreadTestHelpers.cs(52,0): at System.Threading.Tests.ThreadTestHelpers.\u003c\u003ec__DisplayClass4_0.\u003cCreateGuardedThread\u003eb__1()\r\n    _\\src\\libraries\\Common\\tests\\System\\Threading\\ThreadTestHelpers.cs(57,0): at System.Threading.Tests.ThreadTestHelpers.\u003c\u003ec__DisplayClass4_0.\u003cCreateGuardedThread\u003eb__2()\r\n    _\\src\\libraries\\Common\\tests\\System\\Threading\\ThreadTestHelpers.cs(108,0): at System.Threading.Tests.ThreadTestHelpers.RunTestInBackgroundThread(Action test)\r\n    _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs(239,0): at System.Threading.Threads.Tests.ThreadTests.GetSetApartmentStateTest_ChangeAfterThreadStarted_Windows(Func`2 getApartmentState, Func`3 setApartmentState, Int32 setType)\r\n    _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs(359,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n    ----- Inner Stack Trace -----\r\n    _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs(245,0): at System.Threading.Threads.Tests.ThreadTests.\u003c\u003ec__DisplayClass9_0.\u003cGetSetApartmentStateTest_ChangeAfterThreadStarted_Windows\u003eb__0()\r\n    _\\src\\libraries\\Common\\tests\\System\\Threading\\ThreadTestHelpers.cs(36,0): at System.Threading.Tests.ThreadTestHelpers.\u003c\u003ec__DisplayClass4_0.\u003cCreateGuardedThread\u003eb__0()\r\n=================================================\r\nSystem.Threading.Threads.Tests.ThreadTests.ApartmentStateTest_ChangeBeforeThreadStarted_Windows(getApartmentState: Func`2 { Method = System.Threading.ApartmentState \u003cApartmentStateTest_MemberData\u003eb__3_0(System.Threading.Thread), Target = \u003c\u003ec { } }, setApartmentState: Func`3 { Method = Int32 \u003cApartmentStateTest_MemberData\u003eb__3_1(System.Threading.Thread, System.Threading.ApartmentState), Target = \u003c\u003ec { } }, setType: 0) [FAIL]\r\nAssert.Equal() Failure\r\nExpected: STA\r\nActual:   Unknown\r\nStack Trace:\r\n    _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs(267,0): at System.Threading.Threads.Tests.ThreadTests.ApartmentStateTest_ChangeBeforeThreadStarted_Windows(Func`2 getApartmentState, Func`3 setApartmentState, Int32 setType)\r\n    _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs(359,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\nAssert.Equal() Failure\r\nSystem.Threading.Threads.Tests.ThreadTests.ApartmentStateTest_ChangeBeforeThreadStarted_Windows(getApartmentState: Func`2 { Method = System.Threading.ApartmentState \u003cApartmentStateTest_MemberData\u003eb__3_2(System.Threading.Thread), Target = \u003c\u003ec { } }, setApartmentState: Func`3 { Method = Int32 \u003cApartmentStateTest_MemberData\u003eb__3_3(System.Threading.Thread, System.Threading.ApartmentState), Target = \u003c\u003ec { } }, setType: 1) [FAIL]\r\nExpected: 0\r\nActual:   2\r\nStack Trace:\r\n    _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs(266,0): at System.Threading.Threads.Tests.ThreadTests.ApartmentStateTest_ChangeBeforeThreadStarted_Windows(Func`2 getApartmentState, Func`3 setApartmentState, Int32 setType)\r\n    _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs(359,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\nSystem.Threading.Threads.Tests.ThreadTests.ApartmentStateTest_ChangeBeforeThreadStarted_Windows(getApartmentState: Func`2 { Method = System.Threading.ApartmentState \u003cApartmentStateTest_MemberData\u003eb__3_4(System.Threading.Thread), Target = \u003c\u003ec { } }, setApartmentState: Func`3 { Method = Int32 \u003cApartmentStateTest_MemberData\u003eb__3_5(System.Threading.Thread, System.Threading.ApartmentState), Target = \u003c\u003ec { } }, setType: 2) [FAIL]\r\nAssert.Equal() Failure\r\nExpected: 0\r\nActual:   2\r\nStack Trace:\r\n    _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs(266,0): at System.Threading.Threads.Tests.ThreadTests.ApartmentStateTest_ChangeBeforeThreadStarted_Windows(Func`2 getApartmentState, Func`3 setApartmentState, Int32 setType)\r\n    _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Reflection\\RuntimeMethodInfo.cs(359,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n=================================================\r\nUnhandled Exception:\r\nXunit.Sdk.EqualException: Assert.Equal() Failure\r\nExpected: WindowsPrincipal { ... }\r\nActual:   WindowsPrincipal { ... }\r\n    at Xunit.Assert.Equal[IPrincipal](IPrincipal expected, IPrincipal actual, IEqualityComparer`1 comparer) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\EqualityAsserts.cs:line 41\r\n    at Xunit.Assert.Equal[IPrincipal](IPrincipal expected, IPrincipal actual) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\EqualityAsserts.cs:line 24\r\n    at System.Threading.Threads.Tests.ThreadTests.\u003cWindowsPrincipalPolicyTest_Windows_NewThreads\u003eg__CheckPrincipal|39_1(Object principal) in _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs:line 1148\r\n    at System.Threading.Thread.StartCallback() in _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Threading\\Thread.Mono.cs:line 287\r\n[ERROR] FATAL UNHANDLED EXCEPTION: Xunit.Sdk.EqualException: Assert.Equal() Failure\r\nExpected: WindowsPrincipal { ... }\r\nActual:   WindowsPrincipal { ... }\r\n    at Xunit.Assert.Equal[IPrincipal](IPrincipal expected, IPrincipal actual, IEqualityComparer`1 comparer) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\EqualityAsserts.cs:line 41\r\n    at Xunit.Assert.Equal[IPrincipal](IPrincipal expected, IPrincipal actual) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\EqualityAsserts.cs:line 24\r\n    at System.Threading.Threads.Tests.ThreadTests.\u003cWindowsPrincipalPolicyTest_Windows_NewThreads\u003eg__CheckPrincipal|39_1(Object principal) in _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs:line 1148\r\n    at System.Threading.Thread.StartCallback() in _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Threading\\Thread.Mono.cs:line 287\r\n=================================================\r\nUnhandled Exception:\r\nXunit.Sdk.EqualException: Assert.Equal() Failure\r\nExpected: WindowsPrincipal { ... }\r\nActual:   WindowsPrincipal { ... }\r\n    at Xunit.Assert.Equal[IPrincipal](IPrincipal expected, IPrincipal actual, IEqualityComparer`1 comparer) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\EqualityAsserts.cs:line 41\r\n    at Xunit.Assert.Equal[IPrincipal](IPrincipal expected, IPrincipal actual) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\EqualityAsserts.cs:line 24\r\n    at System.Threading.Threads.Tests.ThreadTests.\u003cNoPrincipalToWindowsPrincipalPolicyTest_Windows_NewThreads\u003eg__CheckPrincipal|41_1(Object principal) in _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs:line 1197\r\n    at System.Threading.Thread.StartCallback() in _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Threading\\Thread.Mono.cs:line 287\r\n[ERROR] FATAL UNHANDLED EXCEPTION: Xunit.Sdk.EqualException: Assert.Equal() Failure\r\nExpected: WindowsPrincipal { ... }\r\nActual:   WindowsPrincipal { ... }\r\n    at Xunit.Assert.Equal[IPrincipal](IPrincipal expected, IPrincipal actual, IEqualityComparer`1 comparer) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\EqualityAsserts.cs:line 41\r\n    at Xunit.Assert.Equal[IPrincipal](IPrincipal expected, IPrincipal actual) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\EqualityAsserts.cs:line 24\r\n    at System.Threading.Threads.Tests.ThreadTests.\u003cNoPrincipalToWindowsPrincipalPolicyTest_Windows_NewThreads\u003eg__CheckPrincipal|41_1(Object principal) in _\\src\\libraries\\System.Threading.Thread\\tests\\ThreadTests.cs:line 1197\r\n    at System.Threading.Thread.StartCallback() in _\\src\\mono\\netcore\\System.Private.CoreLib\\src\\System\\Threading\\Thread.Mono.cs:line 287\r\n```\r\n\r\nThese tests will be marked with `ActiveIssue` in #32592.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYn5qtw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMjE2ODE2Ng==",
                                           "createdAt":  "2020-04-10T18:52:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "The apartmentstate ones just need disabling against PlatformDetection.SupportsCom or something like that.\r\n\r\nThe Principal ones seem like they should work. This was fixed recently in ed9fed1f41ddbd12df12e372059147ee72ae73ce but it was in the shared part of corelib. Would need investigation.",
                                           "updatedAt":  "2020-04-10T18:52:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40ihnN",
                                           "createdAt":  "2021-07-16T13:51:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "Moving to 7.0.0",
                                           "updatedAt":  "2021-07-16T13:51:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iWmh-",
                                           "createdAt":  "2023-07-25T15:46:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "Closing old issues opened when enabling libraries test on the dotnet\\runtime repo. CI is currently green with some excluded tests. Please re-open if you feel test is excluded for any reason.",
                                           "updatedAt":  "2023-07-25T15:46:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iWvD8",
                                           "createdAt":  "2023-07-25T16:07:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODBwgww==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SamMonoRT",
                                                                               "createdAt":  "2023-07-25T17:39:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "The tests are still disabled against this issue: https://github.com/dotnet/runtime/blob/2427b67722a40fed059241de920b17d9fe8c82b3/src/libraries/System.Threading.Thread/tests/ThreadTests.cs#L170 . We should not have ActiveIssue annotations pointing to closed issues.",
                                           "updatedAt":  "2023-07-25T16:07:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ifmq3",
                                           "createdAt":  "2023-07-26T20:31:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "Moving to 9.0.0",
                                           "updatedAt":  "2023-07-26T20:31:39Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[mono] Tests failed on windows: System.Threading.Threads.Tests.ThreadTests",
        "labels":  [
                       "disabled-test",
                       "os-windows",
                       "area-VM-threading-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36280",
        "createdAt":  "2020-05-12T13:31:17Z",
        "number":  36280,
        "author":  "janvorli",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-26T16:19:49Z",
        "body":  "In a CI for the PR #36266, the `System.Threading.Threads.Tests.ThreadTests.InterruptInFinallyBlockTest_SkipOnDesktopFramework` has failed with:\r\n\r\n```\r\nSystem.AggregateException : One or more errors occurred. (Assert.Throws() Failure\r\nExpected: typeof(System.Threading.ThreadInterruptedException)\r\nActual: typeof(Xunit.Sdk.TrueException): Assert.True() Failure\r\nExpected: True\r\nActual: False)\r\n---- Assert.Throws() Failure\r\nExpected: typeof(System.Threading.ThreadInterruptedException)\r\nActual: typeof(Xunit.Sdk.TrueException): Assert.True() Failure\r\nExpected: True\r\nActual: False\r\n-------- Assert.True() Failure\r\nExpected: True\r\nActual: False\r\n\r\n   at System.Threading.Tests.ThreadTestHelpers.\u003c\u003ec__DisplayClass4_0.\u003cCreateGuardedThread\u003eb__1() in /_/src/libraries/Common/tests/System/Threading/ThreadTestHelpers.cs:line 52\r\n   at System.Threading.Tests.ThreadTestHelpers.\u003c\u003ec__DisplayClass4_0.\u003cCreateGuardedThread\u003eb__2() in /_/src/libraries/Common/tests/System/Threading/ThreadTestHelpers.cs:line 57\r\n   at System.Threading.Threads.Tests.ThreadTests.InterruptInFinallyBlockTest_SkipOnDesktopFramework() in /_/src/libraries/System.Threading.Thread/tests/ThreadTests.cs:line 970\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) in /_/src/mono/netcore/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.cs:line 359\r\n----- Inner Stack Trace -----\r\n   at System.Threading.Tests.ThreadTestHelpers.CheckedWait(WaitHandle wh) in /_/src/libraries/Common/tests/System/Threading/ThreadTestHelpers.cs:line 154\r\n   at System.Threading.Threads.Tests.ThreadTests.\u003c\u003ec__DisplayClass33_0.\u003cInterruptInFinallyBlockTest_SkipOnDesktopFramework\u003eb__1() in /_/src/libraries/System.Threading.Thread/tests/ThreadTests.cs:line 964\r\n----- Inner Stack Trace -----\r\n   at System.Threading.Tests.ThreadTestHelpers.CheckedWait(WaitHandle wh) in /_/src/libraries/Common/tests/System/Threading/ThreadTestHelpers.cs:line 154\r\n   at System.Threading.Threads.Tests.ThreadTests.\u003c\u003ec__DisplayClass33_0.\u003cInterruptInFinallyBlockTest_SkipOnDesktopFramework\u003eb__1() in /_/src/libraries/System.Threading.Thread/tests/ThreadTests.cs:line 964\r\n```\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=641049\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19915832\u0026resultId=172977\u0026paneView=debug\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONIoU7Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTI1NTA0Mg==",
                                           "createdAt":  "2020-05-15T14:05:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "From the test:\r\n\u003e A wait in a finally block can be interrupted. The .NET Framework applies the same rules as thread abort, and does not allow thread interrupt in a finally block. There is nothing special about thread interrupt that requires not allowing it in finally blocks, so this behavior has changed in .NET Core.\r\n\r\nnetcore Mono needs to be updated  to the new behavior",
                                           "updatedAt":  "2020-05-15T14:05:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40ihTt",
                                           "createdAt":  "2021-07-16T13:49:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "Moving to 7.0.0",
                                           "updatedAt":  "2021-07-16T13:49:22Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "System.Threading.Threads.Tests.ThreadTests.InterruptInFinallyBlockTest_SkipOnDesktopFramework failure on Mono",
        "labels":  [
                       "disabled-test",
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43093",
        "createdAt":  "2020-10-06T15:27:37Z",
        "number":  43093,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-26T16:21:00Z",
        "body":  "Follow-up task for https://github.com/mono/mono/pull/20435 - the PR introduces a new set of embedding API tests that create foreign threads (threads started by native code, not by the runtime) and calling various Mono APIs in order to execute some managed code, followed by detaching from the runtime and leaving the threads running but not interacting with Mono anymore.\r\n\r\nThese tests (which on non-Windows use posix threads, mutexes and condition variables) need to be ported to Windows using the Windows APIs instead.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKfuRUg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDM1MjU5NA==",
                                           "createdAt":  "2020-10-06T15:29:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "One slight complication at the moment is that the work should be done over at https://github.com/mono/mono, as the mono runtime embedding tests aren\u0027t wired up to run in dotnet/runtime yet.\r\nThere are  [instructions for building Mono on Windows](https://www.mono-project.com/docs/compiling-mono/windows/)",
                                           "updatedAt":  "2020-10-06T15:29:52Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[mono] Implement pinvoke-detach-1.cs tests on Windows",
        "labels":  [
                       "good first issue",
                       "increase-code-coverage",
                       "os-windows",
                       "test-enhancement",
                       "help wanted",
                       "area-VM-threading-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43981",
        "createdAt":  "2020-10-28T21:16:04Z",
        "number":  43981,
        "author":  "runfoapp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-04T23:45:16Z",
        "body":  "\u003c!-- runfo report start --\u003e\r\nRunfo Tracking Issue: [System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest8_Values failing on Mono on SLES 12 AMD64](https://runfo.azurewebsites.net/tracking/issue/27)\r\n|Build|Definition|Kind|Run Name|\r\n|---|---|---|---|\r\n\r\n\r\n\r\nBuild Result Summary\r\n|Day Hit Count|Week Hit Count|Month Hit Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\r\n\u003c!-- runfo report end --\u003e\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLaJ8pg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxODk3Nzg0OQ==",
                                           "createdAt":  "2020-10-29T19:40:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Apparently SUSE has some cgroup based limits on the number of threads that can be created.  Which for some services is as low as 512.  And for user accounts the limit is 12288 threads across all logins.  https://www.suse.com/releasenotes/x86_64/SUSE-SLES/12-SP2/#fate-320358\r\n\r\nUnclear why only MonoVM is affected.  Perhaps we spawn more threads?",
                                           "updatedAt":  "2020-10-29T19:40:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMjQ3ODYwOA==",
                                           "createdAt":  "2020-11-05T16:15:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "Just saw that this happened again in. @akoeplinger @steveisok can someone please take a look.",
                                           "updatedAt":  "2020-11-05T16:15:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMjUyMTA3Mw==",
                                           "createdAt":  "2020-11-05T17:24:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "@lambdageek Can you look further? ",
                                           "updatedAt":  "2020-11-05T17:24:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMjUyMjY2NQ==",
                                           "createdAt":  "2020-11-05T17:26:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "(And can we disable the test against mono if it can\u0027t be fixed quickly? :)",
                                           "updatedAt":  "2020-11-05T17:26:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyMjU2OTI0Mg==",
                                           "createdAt":  "2020-11-05T18:47:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "I think we should.",
                                           "updatedAt":  "2020-11-05T18:47:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcyNDE1NDI3Mg==",
                                           "createdAt":  "2020-11-09T17:20:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "Test was disabled with https://github.com/dotnet/runtime/pull/44357, removing `blocking-clean-ci`.",
                                           "updatedAt":  "2020-11-09T17:20:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc1NjM4MDI4NA==",
                                           "createdAt":  "2021-01-07T20:58:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBb3c9Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2021-01-08T16:21:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "It looks like this is failing in release/5.0 where the test wasn\u0027t disabled.  Should this be disabled there as well?",
                                           "updatedAt":  "2021-01-07T20:58:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NDczOTY4Mw==",
                                           "createdAt":  "2021-01-21T15:53:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "This might be fixed by https://github.com/dotnet/runtime/pull/44124 - we now throw a `ThreadStartException` which the threadpool catches - so thread creation failure shouldn\u0027t crash the runtime.",
                                           "updatedAt":  "2021-01-21T15:53:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NTA1MjYxMw==",
                                           "createdAt":  "2021-01-22T01:30:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VincentBu",
                                           "body":  "Failed in run [runtime 20210121.44](https://dev.azure.com/dnceng/public/_build/results?buildId=960758\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=30279154\u0026resultId=167276\u0026paneView=debug)\r\n\r\nFailed test : `System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest8_Values`\r\n\r\nnet6.0-Linux-Release-x64-Mono_release-SLES.12.Amd64.Open\r\n\r\n**Error message:**\r\n```\r\nSystem.Threading.Tasks.TaskSchedulerException : An exception was thrown by a TaskScheduler.\r\n---- System.Threading.ThreadStartException : Thread failed to start.\r\n-------- System.ExecutionEngineException : 0x0\r\n\r\n\r\nStack trace\r\n   at System.Threading.Tasks.Task.ScheduleAndStart(Boolean needsProtection) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs:line 1709\r\n   at System.Threading.Tasks.Task`1[[System.Int32, System.Private.CoreLib, Version=6.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].StartNew(Task parent, Func`1 function, CancellationToken cancellationToken, TaskCreationOptions creationOptions, InternalTaskOptions internalOptions, TaskScheduler scheduler) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Future.cs:line 336\r\n   at System.Threading.Tasks.TaskFactory.StartNew[Int32](Func`1 function, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/TaskFactory.cs:line 628\r\n   at System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest8_Values() in /_/src/libraries/System.Threading/tests/ThreadLocalTests.cs:line 253\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) in /_/src/mono/netcore/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.cs:line 378\r\n----- Inner Stack Trace -----\r\n   at System.Threading.Thread.ThrowThreadStartException(Exception ex) in /_/src/mono/netcore/System.Private.CoreLib/src/System/Threading/Thread.Mono.cs:line 246\r\n   at System.Threading.Thread.StartCore() in /_/src/mono/netcore/System.Private.CoreLib/src/System/Threading/Thread.Mono.cs:line 250\r\n   at System.Threading.Thread.Start(Object parameter, Boolean captureContext) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Thread.cs:line 194\r\n   at System.Threading.Thread.UnsafeStart(Object parameter) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Thread.cs:line 174\r\n   at System.Threading.Tasks.ThreadPoolTaskScheduler.QueueTask(Task task) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/ThreadPoolTaskScheduler.cs:line 49\r\n   at System.Threading.Tasks.TaskScheduler.InternalQueueTask(Task task) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/TaskScheduler.cs:line 237\r\n   at System.Threading.Tasks.Task.ScheduleAndStart(Boolean needsProtection) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/Task.cs:line 1681\r\n----- Inner Stack Trace -----\r\n```",
                                           "updatedAt":  "2021-01-22T01:30:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NTMwNTIzNg==",
                                           "createdAt":  "2021-01-22T10:23:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "Opened a PR to disable the test again: https://github.com/dotnet/runtime/pull/47324",
                                           "updatedAt":  "2021-01-22T10:23:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NTYxMTQ3Mw==",
                                           "createdAt":  "2021-01-22T18:41:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Ah interesting.  This is a good stack trace: we\u0027re starting a long-running task by creating a new thread and it throws a `ThreadStartException` (good - Marek\u0027s PR is working).\r\n\r\n@kouvel should the portable threadpool catch a ThreadStartException here:\r\n https://github.com/dotnet/runtime/blob/c7fda3b94a50297e6ece9db4ddc79ed039394dd3/src/libraries/System.Private.CoreLib/src/System/Threading/Tasks/ThreadPoolTaskScheduler.cs#L49\r\n\r\nWhat happens on CoreCLR with the non-portable threadpool if you start 1000 long running tasks on SLES?",
                                           "updatedAt":  "2021-01-22T18:41:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2NTYyMzQ2Mg==",
                                           "createdAt":  "2021-01-22T19:04:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBdaing==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lambdageek",
                                                                               "createdAt":  "2021-01-22T19:50:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "kouvel",
                                           "body":  "\u003e should the portable threadpool catch a ThreadStartException here\r\n\r\nThis thread creation is not part of the thread pool. It probably shouldn\u0027t catch these exceptions, currently the thread pool catches the thread-start exception and OOM when creating worker threads but the consensus from discussion about that before was to let the exception propagate, even if it may crash the process, since that is more easily discoverable and recoverable than a hung state where a thread cannot be started for an extended amount of time.\r\n\r\n\u003e What happens on CoreCLR with the non-portable threadpool if you start 1000 long running tasks on SLES?\r\n\r\nHaven\u0027t tried on that system, but I believe thread creation failure would typically result in an OOM exception (that is when `CreateThread` fails in the PAL), and if thread creation succeeds but initial setup allocation fails in the started thread, it looks like `Thread.Start` would result in `ThreadStartException`. In both cases it looks like the exception would propagate back to the test and fail the test.",
                                           "updatedAt":  "2021-01-22T19:04:16Z"
                                       }
                                   ],
                         "totalCount":  12
                     },
        "title":  "System.Threading.Tests.ThreadLocalTests.RunThreadLocalTest8_Values failing on Mono on SLES 12 AMD64",
        "labels":  [
                       "disabled-test",
                       "area-VM-threading-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/50656",
        "createdAt":  "2021-04-02T18:45:14Z",
        "number":  50656,
        "author":  "CoffeeFlux",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-26T16:22:16Z",
        "body":  "This should all be functionally dead code on netcore, and is now decoupled from interruptions.\r\n\r\ncc: @lambdageek ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMHBmIw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgxMjY3MjU0Nw==",
                                           "createdAt":  "2021-04-02T19:14:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "We discussed on Discord and the theory is that `INTERRUPT_ASYNC_REQUESTED_BIT` is never set anymore (except from abort protection blocks via `ves_icall_thread_finish_async_abort`) because `mono_thread_set_interruption_requested_flags` is never passed `sync == FALSE`.  And the `ves_icall_thread_finish_async_abort` icall should be dead code because there should not be async aborts anymore.\r\n\r\nAnd interruptions are now done in managed via \r\nhttps://github.com/dotnet/runtime/blob/c11604786a85488909ec730ac61641bf4f612332/src/libraries/System.Private.CoreLib/src/System/Threading/WaitSubsystem.ThreadWaitInfo.Unix.cs#L78\r\n\r\nSo the only thing we need to preserve in native is self-interruptions (and self-aborts? do those work still?) which we use for `mono_set_pending_exception`.",
                                           "updatedAt":  "2021-04-02T19:17:56Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[mono] Remove async abort logic",
        "labels":  [
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53863",
        "createdAt":  "2021-06-08T11:38:09Z",
        "number":  53863,
        "author":  "MaximLipnin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-06-25T10:59:03Z",
        "body":  "https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-50510-merge-61b0571fefe94470ad/Microsoft.Win32.SystemEvents.Tests/console.03a3007e.log?sv=2019-07-07\u0026se=2021-06-28T08%3A23%3A38Z\u0026sr=c\u0026sp=rl\u0026sig=AlmDroaP5I7kmtou2yVWqB%2BQ2Lp9JyTfuez%2BFMXHiNs%3D\r\n\r\n```\r\nUnhandled Exception:\r\nSystem.PlatformNotSupportedException: COM Interop is not supported on this platform.\r\n\r\n   at System.Threading.Thread.SetApartmentStateUnchecked(ApartmentState state, Boolean throwOnError) in /_/src/mono/System.Private.CoreLib/src/System/Threading/Thread.Mono.cs:line 275\r\n\r\n   at System.Threading.Thread.SetApartmentState(ApartmentState state, Boolean throwOnError) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Thread.cs:line 507\r\n\r\n   at System.Threading.Thread.SetApartmentState(ApartmentState state) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Thread.cs:line 486\r\n\r\n   at Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests.\u003cRegisterFromSTAThreadThatGoesAway_MessageStillDelivered\u003eb__2_0() in /_/src/libraries/Microsoft.Win32.SystemEvents/tests/SystemEvents.InvokeOnEventsThread.cs:line 69\r\n\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) in /_/src/mono/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.cs:line 378\r\n\r\n--- End of stack trace from previous location ---\r\n\r\n   at Microsoft.DotNet.RemoteExecutor.Program.Main(String[] args) in /_/src/Microsoft.DotNet.RemoteExecutor/src/Program.cs:line 94\r\n[ERROR] FATAL UNHANDLED EXCEPTION: System.PlatformNotSupportedException: COM Interop is not supported on this platform.\r\n\r\n   at System.Threading.Thread.SetApartmentStateUnchecked(ApartmentState state, Boolean throwOnError) in /_/src/mono/System.Private.CoreLib/src/System/Threading/Thread.Mono.cs:line 275\r\n\r\n   at System.Threading.Thread.SetApartmentState(ApartmentState state, Boolean throwOnError) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Thread.cs:line 507\r\n\r\n   at System.Threading.Thread.SetApartmentState(ApartmentState state) in /_/src/libraries/System.Private.CoreLib/src/System/Threading/Thread.cs:line 486\r\n\r\n   at Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests.\u003cRegisterFromSTAThreadThatGoesAway_MessageStillDelivered\u003eb__2_0() in /_/src/libraries/Microsoft.Win32.SystemEvents/tests/SystemEvents.InvokeOnEventsThread.cs:line 69\r\n\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) in /_/src/mono/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.cs:line 378\r\n\r\n--- End of stack trace from previous location ---\r\n\r\n   at Microsoft.DotNet.RemoteExecutor.Program.Main(String[] args) in /_/src/Microsoft.DotNet.RemoteExecutor/src/Program.cs:line 94\r\n    Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests.RegisterFromSTAThreadThatGoesAway_MessageStillDelivered [FAIL]\r\n      Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n      Stack Trace:\r\n        \r\n        Child exception:\r\n          System.PlatformNotSupportedException: COM Interop is not supported on this platform.\r\n        /_/src/mono/System.Private.CoreLib/src/System/Threading/Thread.Mono.cs(275,0): at System.Threading.Thread.SetApartmentStateUnchecked(ApartmentState state, Boolean throwOnError)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/Thread.cs(507,0): at System.Threading.Thread.SetApartmentState(ApartmentState state, Boolean throwOnError)\r\n        /_/src/libraries/System.Private.CoreLib/src/System/Threading/Thread.cs(486,0): at System.Threading.Thread.SetApartmentState(ApartmentState state)\r\n        /_/src/libraries/Microsoft.Win32.SystemEvents/tests/SystemEvents.InvokeOnEventsThread.cs(69,0): at Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests.\u003cRegisterFromSTAThreadThatGoesAway_MessageStillDelivered\u003eb__2_0()\r\n        /_/src/mono/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.cs(378,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n        \r\n        Child process:\r\n          Microsoft.Win32.SystemEvents.Tests, Version=6.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests Void \u003cRegisterFromSTAThreadThatGoesAway_MessageStillDelivered\u003eb__2_0()\r\n        \r\n        \r\n  Finished:    Microsoft.Win32.SystemEvents.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   Microsoft.Win32.SystemEvents.Tests  Total: 208, Errors: 0, Failed: 1, Skipped: 0, Time: 0.335s\r\n----- end Tue 06/08/2021  8:34:33.40 ----- exit code 1 ----------------------------------------------------------\r\n```\r\n\r\nThe `Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests.RegisterFromSTAThreadThatGoesAway_MessageStillDelivered` test was added in https://github.com/dotnet/runtime/pull/53467",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOM8L_Yg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NzQ5MjA5OQ==",
                                           "createdAt":  "2021-06-09T08:20:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MaximLipnin",
                                           "body":  "The test is disabled in https://github.com/dotnet/runtime/pull/53893",
                                           "updatedAt":  "2021-06-09T08:20:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2Nzg4MDA2Mg==",
                                           "createdAt":  "2021-06-24T19:00:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@marek-safar - do we know if we need to add COM Interop support for Windows for 6.0 ?",
                                           "updatedAt":  "2021-06-24T19:00:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2ODQxNzM3OA==",
                                           "createdAt":  "2021-06-25T10:59:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "Move any COM features to Future",
                                           "updatedAt":  "2021-06-25T10:59:03Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[windows][mono] Test failure: Microsoft.Win32.SystemEventsTests.InvokeOnEventsThreadTests.RegisterFromSTAThreadThatGoesAway_MessageStillDelivered",
        "labels":  [
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57877",
        "createdAt":  "2021-08-21T10:53:29Z",
        "number":  57877,
        "author":  "trympet",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOB3P_BA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "am11",
                                            "createdAt":  "2021-08-21T16:13:41Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-07-10T21:51:24Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nOn macOS, the overhead of `Task.Delay` is 100x higher on mono.\r\n\r\nThe behavior has been observed on:\r\n2017 MacBook w/ Intel i5 x86\r\n2020 Mac Mini w/ M1 arm64\r\n\r\nSteps to reproduce:\r\n1. `dotnet new macos` (requires .NET 6) or create from VS template.\r\n1. Open `AppDelegate.cs` and add the following:\r\n```csharp\r\n        public override void DidFinishLaunching(NSNotification notification)\r\n        {\r\n            // Insert code here to initialize your application\r\n        _ = Task.Run(TaskBenchmark);\r\n        _ = Task.Run(TaskBenchmark);\r\n        _ = Task.Run(TaskBenchmark);\r\n        _ = Task.Run(TaskBenchmark);\r\n        }\r\n\r\n        public static async Task TaskBenchmark()\r\n        {\r\n            int i = 0;\r\n            while(i++ \u003c 10000) {\r\n                await Task.Delay(1).ConfigureAwait(false);\r\n            }\r\n        }\r\n```\r\n3. Open `top`, `Activity Monitor`, etc., and observe CPU usage of the process.\r\n\r\nFor reference, the coreclr equivalent is waay more performant.\r\n1. Create a new .NET 5 console app from a template.\r\n1. `dotnet new globaljson`; set SDK to 5.0.9.\r\n1. Add the following and build with `dotnet build -c Release /p:UseAppHost=True`\r\n```csharp\r\n    public static void Main(string[] args)\r\n    {\r\n        _ = Task.Run(TaskBenchmark);\r\n        _ = Task.Run(TaskBenchmark);\r\n        _ = Task.Run(TaskBenchmark);\r\n        _ = Task.Run(TaskBenchmark);\r\n        Console.ReadKey();\r\n    }\r\n\r\n    public static async Task TaskBenchmark()\r\n    {\r\n        int i = 0;\r\n        while(i++ \u003c 10000) {\r\n            await Task.Delay(1);\r\n        }\r\n    }\r\n```\r\n\r\nThis completely breaks benign methods which rely on TPL for frequent polling.\r\n\r\n### Expected behavior\r\nThe CPU time should be equivalent or better on Mono than on coreclr.\r\n\r\n### Actual behavior\r\nCPU time is much greater than what is reasonable for a wait method, causing hangs and freezes.\r\n\r\n### Configuration\r\n\r\nOS=macOS Big Sur 11.5.2 (20G95) [Darwin 20.6.0]\r\nApple M1 2.40GHz, 1 CPU, 8 logical and 8 physical cores\r\nIntel Core i5-7Y54 CPU 1.20GHz (Max: 1.30GHz) (Kaby Lake), 1 CPU, 4 logical and 2 physical cores\r\n.NET SDK=5.0.400\r\n### Data\r\n\r\nCoreclr:\r\n![image](https://user-images.githubusercontent.com/23460729/130319417-fc1935f8-2774-45cc-b47f-a2c26fc5ed8b.png)\r\n\r\nMono:\r\n![image](https://user-images.githubusercontent.com/23460729/130319480-0dbcf0c2-2eae-4495-9043-52368c988c4c.png)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONeN-aQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc411DEj",
                                           "createdAt":  "2021-08-21T10:53:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-08-21T10:53:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc411tJm",
                                           "createdAt":  "2021-08-22T13:41:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "I\u0027d guess it\u0027s not `Task.Delay` that is slow but the machinery around async/await (state machines) handling",
                                           "updatedAt":  "2021-08-22T13:41:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4115A-",
                                           "createdAt":  "2021-08-22T19:35:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trympet",
                                           "body":  "\u003e I\u0027d guess it\u0027s not Task.Delay that is slow but the machinery around async/await (state machines) handling\r\n\r\nYes, sounds right. Using a plain old `System.Threading.Timer` provides acceptable perf.\r\n\r\nHowever, the issue still remains; libraries which uses async await over explicit threading (e.g. render timers, async logging, etc.) can have widely different perf characteristics between Mono and coreclr. Having to fork every library which suffers because of this is less than ideal when multi-targeting.",
                                           "updatedAt":  "2021-08-22T19:35:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41435p",
                                           "createdAt":  "2021-08-23T20:31:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@lambdageek @vargaz - marked for 7.0, but if there is a low risk fix, we can backport",
                                           "updatedAt":  "2021-08-23T20:31:01Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Task.Delay 100x slower on mono than coreclr on macOS",
        "labels":  [
                       "tenet-performance",
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/59005",
        "createdAt":  "2021-09-12T19:09:46Z",
        "number":  59005,
        "author":  "filipnavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T17:21:31Z",
        "body":  "This is leaving some performance on the table, especially on Apple platforms. Unfortunately the code around it seems to be somewhat broken, at least on the ARM64 platforms.\r\n\r\nhttps://github.com/dotnet/runtime/blob/2a72651144ccc127284a0e1aa8c78dd7705adcc1/src/mono/CMakeLists.txt#L189-L190",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOg_i1Lw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42suJ-",
                                           "createdAt":  "2021-09-12T19:09:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-09-12T19:09:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Dp8ty",
                                           "createdAt":  "2024-07-04T12:11:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "What does \"the code around it seems to be somewhat broken\" refer to? @akoeplinger, do we have more info on this?\r\n",
                                           "updatedAt":  "2024-07-04T13:45:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DqI19",
                                           "createdAt":  "2024-07-04T12:32:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "filipnavara",
                                           "body":  "I think there was some compilation issue when the (C)makefiles were fixed, but it\u0027s a bit too long for me to remember the details and it may not be entirely up-to-date information.",
                                           "updatedAt":  "2024-07-04T12:32:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Dq0Sq",
                                           "createdAt":  "2024-07-04T13:44:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "So it seems even in mono/mono we never used __thread on Apple platforms i.e. we probably only used it on Linux/Android there.: https://github.com/mono/mono/blob/c6cdaadb54a1173484f1ada524306ddbf8c2e7d5/configure.ac#L2825-L2827\r\n\r\nI assume this will need some runtime work to fix it. @lambdageek assigning to you and .NET 10 for now, feel free to reassign.",
                                           "updatedAt":  "2024-07-04T13:44:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6D-KEl",
                                           "createdAt":  "2024-07-08T13:40:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "So the issue with `MONO_KEYWORD_THREAD` is that we use it in places where we want to access a variable both from normal runtime internals and also from JITed (or AOTed) code.  So we only want to use it where we understand the platform ABI and we can emit mini IR to access those variables fast.\r\n\r\nFor normal thread locals that don\u0027t need fast access from generated code, we could probably explore using the C11 `thread_local` storage duration, or the `tss_create`/`tss_set`/`tss_get` functions (instead of the pthreads `pthread_key_create`/`pthread_setspecific`/`pthread_getspecific`).  (Although we will have to be careful about block scope thread local statics - initializing them may block, so we need to make sure we\u0027re always in coop mode on every thread that tries to init them).",
                                           "updatedAt":  "2024-07-08T13:40:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6D-LUv",
                                           "createdAt":  "2024-07-08T13:42:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "/cc FYI @mangod9 this is both a threading and mono codegen issue",
                                           "updatedAt":  "2024-07-08T13:42:37Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[mono] CMake lacks detection of __thread keyword",
        "labels":  [
                       "enhancement",
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65559",
        "createdAt":  "2022-02-18T12:17:47Z",
        "number":  65559,
        "author":  "mattgenious",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7Cg5Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "am11",
                                            "createdAt":  "2022-02-19T00:07:23Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "kristof12345",
                                            "createdAt":  "2022-02-22T18:52:40Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "jirisykora83",
                                            "createdAt":  "2022-02-28T14:39:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jirisykora83",
                                            "createdAt":  "2022-02-28T14:39:10Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "jirisykora83",
                                            "createdAt":  "2022-02-28T14:39:20Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "zetomatoz",
                                            "createdAt":  "2022-10-05T03:08:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rogihee",
                                            "createdAt":  "2022-10-18T10:36:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "christallire",
                                            "createdAt":  "2022-11-18T23:06:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alasdair-cooper",
                                            "createdAt":  "2024-04-29T14:15:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "romfir",
                                            "createdAt":  "2024-09-16T08:15:15Z"
                                        }
                                    ],
                          "totalCount":  10
                      },
        "updatedAt":  "2025-07-22T09:54:40Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nWhen starting up mono and blazor the UI, e.g. input fields, are locked until the webassembly has finished processing.\r\n\r\nThis is not related to network speed and cannot be fixed by lazy loading as the mono runtime and subsequent blazor application still locks the UI while loading.\r\n\r\nThis is a larger issue because when prerendering first and then triggering the startup process the user experience is an instantly loaded page, that then hangs and locks all UI until page load is finished.\r\nIn the case where you succeeded in entering data before the UI locking startet, this too is deleted unless a mechanism to transfer input data from the prerendered site to the live app is implemented using javascript.\r\n\r\nReproduce:\r\n1. Create a blazor webassembly app on .NET 6.0 LTS, with no authentication, configured for https and hosted on ASP.NET Core but without progressive web application features enabled.\r\n2. In index.html add `\u003cinput type=\"text\" class=\"form-control\" /\u003e` below `\u003cdiv id=\"app\"\u003eLoading...\u003c/div\u003e`\r\n3. In Index.razor add the following to see in console log when first render is processed to indicate the app has finished starting.\r\n4. Publish the app in release mode to folder and run the generated exe file.\r\n5. Navigate to https://localhost:5001\r\n6. Check that the input field present while loading is locked, this is before the app displays on the white page with the \"Loading...\" text in the top right corner.\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the performance problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n  --\u003e\r\n\r\n### Configuration\r\n\r\nMicrosoft Windows 11 Pro\r\n10.0.22000 Build 22000\r\nAMD Ryzen 9 3900X 12-Core Processor, 3793 Mhz, 12 Core(s), 24 Logical Processor(s)\r\n32.0 GB RAM\r\nFirefox and Chrome browsers\r\n\r\n\u0026\r\n\r\niOS 12.2\r\niPhone 5s\r\nSafari 12\r\n\r\n\u0026\r\n\r\niOS 15.4\r\niPhone 12 Pro\r\nSafari 15\r\n\r\n\u003c!--\r\n(If you are posting Benchmark.NET results, this info will be included.)\r\n* Which version of .NET is the code running on?\r\n* What OS version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* If relevant, what are the specs of the machine?\r\n  --\u003e\r\n\r\n### Data\r\n\r\nWindows 11 PC:\r\nFirefox console output:\r\n\u003cimg width=\"376\" alt=\"Screenshot 2022-02-18 104427\" src=\"https://user-images.githubusercontent.com/3007300/154679908-5c952649-d2f8-47ae-b140-434d113c1b72.png\"\u003e\r\n\r\nChrome lighthouse and performance profile results:\r\n[blazor performance chrome lighthouse and performance profile.zip](https://github.com/dotnet/runtime/files/8096964/blazor.performance.chrome.lighthouse.and.performance.profile.zip)\r\n\r\nFirefox performance profile results:\r\n[Firefox 2022-02-18 10.41 profile.json.gz](https://github.com/dotnet/runtime/files/8096951/Firefox.2022-02-18.10.41.profile.json.gz)\r\n\r\niPhone 12 Pro:\r\nhttps://user-images.githubusercontent.com/3007300/154679804-f67aa2d9-5c69-4f6e-9165-f5ed0681db5e.mp4\r\n\r\niPhone 5s:\r\nhttps://user-images.githubusercontent.com/3007300/154679884-3bad3145-0e85-4a98-96ce-b890380f0b8c.MP4\r\nhttps://user-images.githubusercontent.com/3007300/154679892-bb7bcd5f-7f78-4630-a334-867b216455bf.MP4\r\n\r\n\r\n\r\n\u003c!--\r\n* Please include any benchmark results, images\r\n\r\n\r\n of graphs, timings or measurements, or callstacks that are relevant.\r\n* If possible please include text as text rather than images (so it shows up in searches).\r\n* If applicable please include before and after measurements.\r\n* There is helpful information about measuring code in this repo [here](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md).\r\n  --\u003e\r\n\r\n### Analysis\r\n\r\nAs far as I understand part of the issue is that the mono runtime and systems that build on top are locked to using a single thread for everything including the UI, this causes the UI to freeze during initialization of the runtime and application.\r\n\r\nIf this was solved however a new problem would be users interacting with the prerendered site and then losing what they already filled out in input fields and so on as soon as the app loads unless the developers implemented a function to handle this case on a per site/input field basis which does not seem like a scalable or elegant solution.\r\n\r\nI suggest mono and blazor allow for use of multithreading in wasm to allow interaction during load and suggest an automatic mechanism for transferring input in prerendered fields to live fields once the app is loaded.\r\n\r\nFor reference to other issues tracking a similar topic i refer to:\r\nhttps://github.com/dotnet/aspnetcore/issues/17730\r\nhttps://github.com/mono/mono/issues/12453\r\nhttps://github.com/WebAssembly/threads/issues/163\r\n\r\n\u003c!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n* If you don\u0027t know, you can delete this section.\r\n  --\u003e\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOa4AXNg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-QNBK",
                                           "createdAt":  "2022-02-18T12:17:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-02-18T12:17:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GCzBA",
                                           "createdAt":  "2022-07-05T14:37:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nWhen starting up mono and blazor the UI, e.g. input fields, are locked until the webassembly has finished processing.\r\n\r\nThis is not related to network speed and cannot be fixed by lazy loading as the mono runtime and subsequent blazor application still locks the UI while loading.\r\n\r\nThis is a larger issue because when prerendering first and then triggering the startup process the user experience is an instantly loaded page, that then hangs and locks all UI until page load is finished.\r\nIn the case where you succeeded in entering data before the UI locking startet, this too is deleted unless a mechanism to transfer input data from the prerendered site to the live app is implemented using javascript.\r\n\r\nReproduce:\r\n1. Create a blazor webassembly app on .NET 6.0 LTS, with no authentication, configured for https and hosted on ASP.NET Core but without progressive web application features enabled.\r\n2. In index.html add `\u003cinput type=\"text\" class=\"form-control\" /\u003e` below `\u003cdiv id=\"app\"\u003eLoading...\u003c/div\u003e`\r\n3. In Index.razor add the following to see in console log when first render is processed to indicate the app has finished starting.\r\n4. Publish the app in release mode to folder and run the generated exe file.\r\n5. Navigate to https://localhost:5001\r\n6. Check that the input field present while loading is locked, this is before the app displays on the white page with the \"Loading...\" text in the top right corner.\r\n\r\n\u003c!--\r\n* Please share a clear and concise description of the performance problem.\r\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\r\n  --\u003e\r\n\r\n### Configuration\r\n\r\nMicrosoft Windows 11 Pro\r\n10.0.22000 Build 22000\r\nAMD Ryzen 9 3900X 12-Core Processor, 3793 Mhz, 12 Core(s), 24 Logical Processor(s)\r\n32.0 GB RAM\r\nFirefox and Chrome browsers\r\n\r\n\u0026\r\n\r\niOS 12.2\r\niPhone 5s\r\nSafari 12\r\n\r\n\u0026\r\n\r\niOS 15.4\r\niPhone 12 Pro\r\nSafari 15\r\n\r\n\u003c!--\r\n(If you are posting Benchmark.NET results, this info will be included.)\r\n* Which version of .NET is the code running on?\r\n* What OS version, and what distro if applicable?\r\n* What is the architecture (x64, x86, ARM, ARM64)?\r\n* If relevant, what are the specs of the machine?\r\n  --\u003e\r\n\r\n### Data\r\n\r\nWindows 11 PC:\r\nFirefox console output:\r\n\u003cimg width=\"376\" alt=\"Screenshot 2022-02-18 104427\" src=\"https://user-images.githubusercontent.com/3007300/154679908-5c952649-d2f8-47ae-b140-434d113c1b72.png\"\u003e\r\n\r\nChrome lighthouse and performance profile results:\r\n[blazor performance chrome lighthouse and performance profile.zip](https://github.com/dotnet/runtime/files/8096964/blazor.performance.chrome.lighthouse.and.performance.profile.zip)\r\n\r\nFirefox performance profile results:\r\n[Firefox 2022-02-18 10.41 profile.json.gz](https://github.com/dotnet/runtime/files/8096951/Firefox.2022-02-18.10.41.profile.json.gz)\r\n\r\niPhone 12 Pro:\r\nhttps://user-images.githubusercontent.com/3007300/154679804-f67aa2d9-5c69-4f6e-9165-f5ed0681db5e.mp4\r\n\r\niPhone 5s:\r\nhttps://user-images.githubusercontent.com/3007300/154679884-3bad3145-0e85-4a98-96ce-b890380f0b8c.MP4\r\nhttps://user-images.githubusercontent.com/3007300/154679892-bb7bcd5f-7f78-4630-a334-867b216455bf.MP4\r\n\r\n\r\n\r\n\u003c!--\r\n* Please include any benchmark results, images\r\n\r\n\r\n of graphs, timings or measurements, or callstacks that are relevant.\r\n* If possible please include text as text rather than images (so it shows up in searches).\r\n* If applicable please include before and after measurements.\r\n* There is helpful information about measuring code in this repo [here](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md).\r\n  --\u003e\r\n\r\n### Analysis\r\n\r\nAs far as I understand part of the issue is that the mono runtime and systems that build on top are locked to using a single thread for everything including the UI, this causes the UI to freeze during initialization of the runtime and application.\r\n\r\nIf this was solved however a new problem would be users interacting with the prerendered site and then losing what they already filled out in input fields and so on as soon as the app loads unless the developers implemented a function to handle this case on a per site/input field basis which does not seem like a scalable or elegant solution.\r\n\r\nI suggest mono and blazor allow for use of multithreading in wasm to allow interaction during load and suggest an automatic mechanism for transferring input in prerendered fields to live fields once the app is loaded.\r\n\r\nFor reference to other issues tracking a similar topic i refer to:\r\nhttps://github.com/dotnet/aspnetcore/issues/17730\r\nhttps://github.com/mono/mono/issues/12453\r\nhttps://github.com/WebAssembly/threads/issues/163\r\n\r\n\u003c!--\r\n* If you have an idea where the problem might lie, let us know that here.\r\n* Please include any pointers to code, relevant changes, or related issues you know of.\r\n* If you don\u0027t know, you can delete this section.\r\n  --\u003e\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003emattgenious\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `tenet-performance`, `area-VM-meta-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-05T14:37:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iXiJ4",
                                           "createdAt":  "2023-07-25T18:31:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "In combination with prerendering, it would help to run main .NET thread on web worker and attach Blazor state with prerendered UI.",
                                           "updatedAt":  "2023-07-25T18:31:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rgBc2",
                                           "createdAt":  "2023-11-09T10:22:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Possibly this solved by \"Interactive Auto\" rendering mode in .Net 8?\r\n\r\nI\u0027m working on threading design here https://github.com/dotnet/designs/pull/301\r\n\r\nAnd I\u0027m thinking what would be impact of threading on Blazor\u0027s background loading of WASM.\r\n\r\ncc @javiercn @danroth27 ",
                                           "updatedAt":  "2023-11-09T10:22:14Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Blazor webassembly startup speed and UI locking issue",
        "labels":  [
                       "arch-wasm",
                       "tenet-performance",
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68162",
        "createdAt":  "2022-04-18T15:25:19Z",
        "number":  68162,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1MZjg==",
                          "nodes":  [
                                        {
                                            "content":  "HEART",
                                            "user":  "SupinePandora43",
                                            "createdAt":  "2022-04-18T15:45:55Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "rogihee",
                                            "createdAt":  "2022-04-18T19:00:54Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "jirisykora83",
                                            "createdAt":  "2022-04-19T19:29:58Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "jabinb",
                                            "createdAt":  "2022-04-20T01:08:33Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "buresu",
                                            "createdAt":  "2022-04-22T14:43:23Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "ChristianWeyer",
                                            "createdAt":  "2022-04-22T14:55:24Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "galpin",
                                            "createdAt":  "2022-04-23T07:33:52Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "clarvalon",
                                            "createdAt":  "2022-05-02T09:32:20Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "thaystg",
                                            "createdAt":  "2022-05-03T11:55:26Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "rfellers",
                                            "createdAt":  "2022-05-10T20:18:57Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "romfir",
                                            "createdAt":  "2022-05-10T22:31:45Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Aloento",
                                            "createdAt":  "2022-05-14T11:27:17Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "TylerDM",
                                            "createdAt":  "2022-05-17T13:19:37Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "sergey-su",
                                            "createdAt":  "2022-05-17T13:50:05Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "veikkoeeva",
                                            "createdAt":  "2022-05-30T11:57:30Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "doomlaur",
                                            "createdAt":  "2022-06-07T09:35:55Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "dimitrov9",
                                            "createdAt":  "2022-06-13T18:15:59Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Xyncgas",
                                            "createdAt":  "2022-06-25T04:05:47Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "RyoukoKonpaku",
                                            "createdAt":  "2022-07-01T18:47:33Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "adamashton",
                                            "createdAt":  "2022-07-08T12:34:53Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "hez2010",
                                            "createdAt":  "2022-07-09T05:12:42Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Cpt-Falcon",
                                            "createdAt":  "2022-07-13T17:49:09Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "elringus",
                                            "createdAt":  "2022-07-23T16:52:02Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Mr-Technician",
                                            "createdAt":  "2022-07-27T13:42:39Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "gilescope",
                                            "createdAt":  "2022-08-25T05:40:47Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "yamachu",
                                            "createdAt":  "2022-10-11T17:50:17Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "thatguy224455",
                                            "createdAt":  "2022-11-02T01:27:45Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "baywet",
                                            "createdAt":  "2022-11-07T14:39:28Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "MeloHenrique",
                                            "createdAt":  "2022-11-24T23:48:40Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "fMichaleczek",
                                            "createdAt":  "2022-12-10T23:17:11Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Serg046",
                                            "createdAt":  "2022-12-25T23:05:34Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "bruno-garcia",
                                            "createdAt":  "2023-01-22T03:10:52Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "rpcontinuousdelivery",
                                            "createdAt":  "2023-01-27T16:37:23Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "r-work",
                                            "createdAt":  "2023-02-14T09:07:01Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "joelverhagen",
                                            "createdAt":  "2023-02-20T05:36:30Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "aaronse",
                                            "createdAt":  "2023-02-26T18:01:21Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "viswa-uipath",
                                            "createdAt":  "2023-03-03T07:24:16Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Psypher9",
                                            "createdAt":  "2023-04-26T18:23:22Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Sibusten",
                                            "createdAt":  "2023-05-04T17:22:54Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2023-05-05T07:53:47Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "IvanDmitriev1",
                                            "createdAt":  "2023-05-10T11:50:03Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "wizardars",
                                            "createdAt":  "2023-06-11T02:41:58Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "SouzaHenrique",
                                            "createdAt":  "2023-08-07T12:01:19Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "KubaGluszkiewicz",
                                            "createdAt":  "2023-09-13T00:49:41Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "0xJins",
                                            "createdAt":  "2023-10-11T01:40:33Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "fydar",
                                            "createdAt":  "2023-10-19T21:50:04Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Moerup",
                                            "createdAt":  "2023-10-23T15:26:53Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "jeromelaban",
                                            "createdAt":  "2023-10-27T17:03:10Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "toxik",
                                            "createdAt":  "2023-11-29T15:32:35Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "FatCatCoder",
                                            "createdAt":  "2024-01-16T00:21:02Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "iSeiryu",
                                            "createdAt":  "2024-01-23T15:45:13Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Catalin-Andronie",
                                            "createdAt":  "2024-03-12T01:38:49Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "verdie-g",
                                            "createdAt":  "2024-04-29T23:46:25Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "WhitWaldo",
                                            "createdAt":  "2024-06-19T11:01:43Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "winscripter",
                                            "createdAt":  "2024-08-20T17:31:53Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "nscimerical",
                                            "createdAt":  "2024-11-07T23:38:56Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "frencsi",
                                            "createdAt":  "2024-12-06T13:41:08Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "VENative",
                                            "createdAt":  "2025-01-02T21:02:10Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "PodyNoo",
                                            "createdAt":  "2025-06-05T09:02:54Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "qouteall",
                                            "createdAt":  "2025-08-02T08:47:11Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "Vlaaaaaaad",
                                            "createdAt":  "2025-08-17T08:30:22Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "jzabroski",
                                            "createdAt":  "2025-09-11T01:31:28Z"
                                        },
                                        {
                                            "content":  "HEART",
                                            "user":  "PhenX",
                                            "createdAt":  "2025-09-11T05:47:56Z"
                                        }
                                    ],
                          "totalCount":  63
                      },
        "updatedAt":  "2025-02-17T09:34:34Z",
        "body":  "This is a tracking issue for adding experimental support for WebAssembly multi-threading to the browser-wasm runtime pack.\n\n\n## High Level Goals\n- ~The threading runtime should be distributed in the same browser-wasm runtime pack~ The threading runtime is in a separate `.multithread.` runtime pack variant. The WASM SDK chooses the correct runtime pack variant based on project properties.\n- Threading should be opt-in only\n- The wasm bindings and runtime are thread-safe and co-op GC aware\n\n## Completed in .NET 7 RC2\n\nThe `wasm-experimental` workload supports threading using `\u003cWasmEnableThreads\u003etrue\u003c/WasmEnableThreads\u003e` in interp and AOT configurations when using the `wasmbrowser` workload.  Blazor does not support threading in .NET 7\n\n## Tracking\n\nSDK:\n- [x] #76959\n- [x] #72872 \n- [ ] Properties/targets to generate and consume AOT profiles\n- [ ] Properties/targets to create and run EP instrumented apps with `dotnet-counters`/`dotnet-trace` (via `dotnet-dsrouter`)\n\nCI testing:\n- [ ] Need a way to skip tests on single threaded / multi-threaded wasm configs.\n- [ ] Add tests.  (src/libraries).  Maybe add some convenient way to add `ProjectReference`s to the multi-threaded ref assemblies (the roll-up `Microsoft.NET.WebAssembly.Threading.proj` doesn\u0027t seem to work) and run the normal runtime tests.\n\nLibraries and Interop:\n- [x] #76956\n- [x] https://github.com/dotnet/runtime/issues/85592\n- [ ] #76957\n- [x] #76958\n- [ ] https://github.com/dotnet/runtime/issues/77541\n- [x] Blazor needs to provide `dotnet.worker.js` as a `js-module-threads` asset (fixed by https://github.com/dotnet/runtime/pull/85109)\n\nRuntime and codegen:\n- [ ] #76963\n- [x] AOT: tell LLVM that it\u0027s ok to use atomics if threading is enabled\n\nIssues:\n- [x] #76961\n- [ ] https://github.com/dotnet/aspnetcore/issues/17730\n- [ ] dotnet/razor-tooling#7250\n- [ ] The `Microsoft.AspNetCore.Components.WebAssembly.DevServer` (used by blazorwasm for `dotnet run`) should serve [CORS headers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer#security_requirements)\n- [ ] Blazor should use the GC-safe API for accessing the render tree from JS\n- [x] cleanup the Node polyfill in `dotnet.worker.js` that uses `eval` and `require`  https://github.com/dotnet/runtime/issues/70891\n- [ ] #76964\n- [x] #76962\n- [x] #75625 \n- [x] #75629 \n- [x] ~`Thread.Start().Wait` pattern  on the browser threads will deadlock. Emscripten relies on the browser thread\u0027s eventloop to start threads (unless we use a dedicated \"main\" thread when building).  After a thread start, the browser thread\u0027s eventloop must run in order for new threads to start.~ Kind of resolved - we use Emscripten\u0027s ability to pre-allocate some workers before the app starts creating threads.\n\n## Done\n\nOn the [branch](https://github.com/steveisok/runtime/commits/wasm-threading-eventpipe):\n- [x] put all modifications under conditionals\n   - The runtime build should be under `/p:WasmEnableThreads=true`\n   - ref assemblies should use `FeatureWasmThreads` in project files and `FEATURE_WASM_THREADS` in C# code to conditionally include `[UnsupportedOSPlatform(\"browser\")]` guards around multi-threading APIs, and include the ref assembly in `Microsoft.NET.WebAssembly.Threading`\n   - CoreLib uses `FeatureWasmThreads` and `FEATURE_WASM_THREADS` to define `System.Thread.IsThreadStartSupported`.  All other code should check `System.Thread.IsThreadStartSupported` to throw a PNSE.  There should not be `[UnsupportedOSPlatform(\"browser\")]` guards in CoreLib\n   - EventPipe and diagnostics should use `FeatureWasmPerfTracing` and `FEATURE_WASM_PERFTRACING` (and a constant?).\n - [x] Add separate `browser-mt` and `browser-mt-eventpipe` samples.  \n - [x] [Land the branch changes in `main`](https://github.com/dotnet/runtime/pull/68232)\n\n### In .NET 7 RC2 \n\n- Build and package:\n   - [x] #68506 Completed as part of #71054 \n   - [x] #68508 completed as part of #71054\n   - [x] The `Microsoft.NET.WebAssembly.Threading.nupkg` ref assemblies package should be published to the dotnet7 feed\n- Libraries and interop:\n   - [x] #69409\n   - [x] ~Need a hook for frameworks to identify the location of `dotnet.js`.  Emscripten relies on `mainScriptUrlOrBlob` property on the module on the main threads to be set to the URL of `dotnet.js` so that it can locate `dotnet.worker.js`.  Frameworks like Blazor sometimes rename `dotnet.js` and/or move the wasm artifacts into subdirectories.  Provide a hook for them to tell the runtime where to find the files.~ We set up an asset loading framework that handles these use cases https://github.com/dotnet/runtime/pull/73484\n\n- AOT\n   - [x] https://github.com/dotnet/runtime/issues/70489\n   - [x] AOT compiler task: add an option to control safepoint generation (wrap `MONO_THREADS_SUSPEND=coop` mono-aot-cross environment setting) https://github.com/dotnet/runtime/pull/70520\n   - [x] emit safepoints if threading is enabled.  (we want one `mono-aot-cross` that _doesn\u0027t_ emit safepoints for single-threaded wasm, but does emit safepoints for mt) https://github.com/dotnet/runtime/pull/70520\n- CI testing:\n   - [x] https://github.com/dotnet/runtime/pull/68787\n   - [x] https://github.com/dotnet/runtime/issues/72606\n\n### In .NET 8\n\n...\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcipasw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Bp4Bk",
                                           "createdAt":  "2022-04-18T15:25:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThis is a tracking issue for adding experimental support for WebAssembly multi-threading to the browser-wasm runtime pack.\r\n\r\nOn the [branch](https://github.com/steveisok/runtime/commits/wasm-threading-eventpipe):\r\n- [ ] put all modifications under conditionals\r\n   - The runtime build should be under `/p:WasmEnableThreads=true`\r\n   - ref assemblies should use `FeatureWasmThreads` in project files and `FEATURE_WASM_THREADS` in C# code to conditionally include `[UnsupportedOSPlatform(\"browser\")]` guards around multi-threading APIs, and include the ref assembly in `Microsoft.NET.WebAssembly.Threading`\r\n   - CoreLib uses `FeatureWasmThreads` and `FEATURE_WASM_THREADS` to define `System.Thread.IsThreadStartSupported`.  All other code should check `System.Thread.IsThreadStartSupported` to throw a PNSE.  There should not be `[UnsupportedOSPlatform(\"browser\")]` guards in CoreLib\r\n   - EventPipe and diagnostics should use `FeatureWasmDiagnostics` and `FEATURE_WASM_DIAGNOSTICS` (and a constant?).\r\n - [ ] Separate `browser-mt` and `browser-mt-eventpipe` samples.  \r\n - [ ] Land the branch changes in `main`\r\n \r\nExperimental support in `main`:\r\n- [ ] Build artifacts for the `/p:WasmEnableThreads=true` should go into a separate output folder. In other words it should be possible to build with `/p:WasmEnableThreads=false` in the same tree and without the build artifacts interfering with each other.\r\n- [ ] The `browser-wasm` runtime pack should pack both single- and multi-threaded builds.  The multithreaded build artifacts should go into an `mt` subfolder.\r\n- [ ] The `Microsoft.NET.WebAssembly.Threading.nupkg` ref assemblies package should be published to the dotnet7 feed\r\n- [ ] The browser-wasm SDK should support a `WasmEnableThreads` property that uses the `mt` subfolder from the runtime pack for the runtime artifacts and that adds a `\u003cPackageReference Include=\"Microsoft.NET.WebAssembly.Threading\" IncludeAssets=\"compile\" PrivateAssets=\"nonoe\" /\u003e` package\r\n\r\nEventPipe in `main`:\r\n- [ ] Some kind of runtime build with multi-threading enabled internally, but not for the user APIs - EventPipe should be enabled.\r\n- [ ] Save runtime artifacts from the EventPIpe build in an `ep` subfolder in the runtime pack\r\n- [ ] browser SDK changes to use the `ep` artifacts if a property is set.\r\n- [ ] JavaScript bindings to the EventPipe Session API - start stop sessions from JS, saving .nettrace to the VFS.  Some convenience API to extract and download the .nettrace file\r\n\r\nIssues:\r\n- [ ] Publish `dotnet.worker.js`\r\n- [ ] Need a hook for frameworks to identify the location of `dotnet.js`.  Emscripten relies on `mainScriptUrlOrBlob` property on the module on the main threads to be set to the URL of `dotnet.js` so that it can locate `dotnet.worker.js`.  Frameworks like Blazor sometimes rename `dotnet.js` and/or move the wasm artifacts into subdirectories.  Provide a hook for them to tell the runtime where to find the files.\r\n- [ ] protect workers from unhandled JS exceptions.  If user code uses `setTimeout` to queue work on the workers and that code throws unhandled exceptions, we should not bring down the whole runtime in a disorganized manner.\r\n- [ ] single-threaded VFS.  Track Emscripten progress on the new VFS and upgrade when it\u0027s available.\r\n- [ ] `Thread.Start().Wait` pattern  on the browser threads will deadlock. Emscripten relies on the browser thread\u0027s eventloop to start threads (unless we use a dedicated \"main\" thread when building).  After a thread start, the browser thread\u0027s eventloop must run in order for new threads to start.\r\n\r\nEcosystem:\r\n- [ ] We need some way for package authors to provide single threaded and multi-threaded versions of native assets\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elambdageek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-Build-mono`, `tracking`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-18T15:25:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J5dHY",
                                           "createdAt":  "2022-09-07T19:40:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheXenocide",
                                           "body":  "Ooh, just came to check in on how things were going on the mono wasm side of this and came across this tracking issue. Nice to see this being tracked on the dotnet/runtime side now. It\u0027s good to see that the browser-wasm RID was the final answer on that particular design challenge, but I remember how much discussion there was about trying to avoid adding additional runtimes unnecessarily. Trying to make sense of the current state of these tickets, are we expecting that the browser-wasm runtime will be multi-purpose and have some convention for choosing subtypes, rather than defining new RIDs for multi-threaded and perf-trace package variants? Part of me feels like the multi-thread variant would be better served by its own RID if there are plans to support both (fundamentally different) runtimes for any extended period (e.g. reference assemblies/contracts can expose different supported surface areas at compile time rather than throwing runtime exceptions).\r\n\r\nIs there a sense of how this will work for packaging and compile MSBuild conditions? It seems like WasmEnableThreads is rather narrow and probably only impacts the application build, not so much for libraries, NuGet packaging, etc. unless the desired result is for the compiler to be able to generate all variants automatically, but it seems like there would be significant design implications there, where performance and a variety of other factors would want to be able to provide different implementations for the different environments (e.g. concurrency-safe collection types could ignore concurrency without MT but might need to leverage platform-specific no-lock behaviors, etc.) Understandable if these aren\u0027t answered yet, just trying to get a sense of how these things intend to be differentiated by component developers between the runtime and consuming developers.\r\n\r\nI ask here mainly because it seems there are multiple possible threads that seem appropriate. Feel free to move this comment or direct me where best to move the discussion. Otherwise, glad to see there\u0027s already some experimental support running now.",
                                           "updatedAt":  "2022-09-07T19:40:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kij83",
                                           "createdAt":  "2022-09-19T05:06:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sajjadarashhh",
                                           "body":  "what happend if this feature not support with browser?",
                                           "updatedAt":  "2022-09-19T05:06:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MGqp1",
                                           "createdAt":  "2022-10-12T22:58:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "knight1219",
                                           "body":  "How, if any, effect for this have on Task based threading? If one creates multiple HttpClient.GetAsync tasks and schedules them using Task.WhenAll, will all tasks run in parallel on their own threads? Does each task need the ConfigureAwait(false) to be set?\r\n\r\nIf that is the case and you are sharing this code between Blazor WASM and Blazor Hybrid, are there any repercussions in MAUI by doing that?",
                                           "updatedAt":  "2022-10-12T22:58:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MGq1G",
                                           "createdAt":  "2022-10-12T22:59:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvYwdQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeromelaban",
                                                                               "createdAt":  "2022-10-13T00:35:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SupinePandora43",
                                                                               "createdAt":  "2022-11-10T16:29:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "kg",
                                           "body":  "Threading allows tasks to run on multiple threads, yes. Things that interact with browser APIs like HTTP are a more complex scenario, because browser APIs have thread affinity (think the nightmare of COM apartments, but worse)",
                                           "updatedAt":  "2022-10-12T22:59:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N1ARm",
                                           "createdAt":  "2022-11-07T15:00:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8jUJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "neodon",
                                                                               "createdAt":  "2023-05-27T06:04:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "baywet",
                                           "body":  "The **Blazor needs to provide dotnet.worker.js as a js-module-threads asset** list item probably needs its own issue for the following reasons:\r\n- to provide visibility to people (too me a while to find this post from the error message)\r\n- to clearly mention that blazor wasm apps won\u0027t be able to work currently without it\r\n- so it can be prioritized accordingly (lots of people on blazor wasm, they can\u0027t use the feature for the time being)\r\n\r\nThe error message for visibility\r\n\r\n```\r\nAssert failed: Can\u0027t find asset for js-module-threads\r\n    at Us (dotnet.7.0.0-rc.2.22472.3.9fl1sjtbvn.js:5:45132)\r\n    at Object.Zs [as allocateUnusedWorker] (dotnet.7.0.0-rc.2.22472.3.9fl1sjtbvn.js:5:52972)\r\n    at Object.allocateUnusedWorker (dotnet.7.0.0-rc.2.22472.3.9fl1sjtbvn.js:5:41466)\r\n    at rs (dotnet.7.0.0-rc.2.22472.3.9fl1sjtbvn.js:5:42820)\r\n    at yu (dotnet.7.0.0-rc.2.22472.3.9fl1sjtbvn.js:5:106551)\r\n    at async dotnet.7.0.0-rc.2.22472.3.9fl1sjtbvn.js:5:104732\r\n```\r\n\r\nTrying to poke around by finding dotnet.worker.js and copying it with the right name doesn\u0027t seem to be any use as the referencing code really expects it to be part of the bundle.",
                                           "updatedAt":  "2022-11-07T15:00:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TeLxZ",
                                           "createdAt":  "2023-01-23T14:15:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danielpastoor",
                                           "body":  "\u003e The **Blazor needs to provide dotnet.worker.js as a js-module-threads asset** list item probably needs its own issue for the following reasons:\r\n\u003e \r\n\u003e * to provide visibility to people (too me a while to find this post from the error message)\r\n\u003e * to clearly mention that blazor wasm apps won\u0027t be able to work currently without it\r\n\u003e * so it can be prioritized accordingly (lots of people on blazor wasm, they can\u0027t use the feature for the time being)\r\n\u003e \r\n\u003e The error message for visibility\r\n\u003e \r\n\u003e ```\r\n\u003e Assert failed: Can\u0027t find asset for js-module-threads\r\n\u003e     at Us (dotnet.7.0.0-rc.2.22472.3.9fl1sjtbvn.js:5:45132)\r\n\u003e     at Object.Zs [as allocateUnusedWorker] (dotnet.7.0.0-rc.2.22472.3.9fl1sjtbvn.js:5:52972)\r\n\u003e     at Object.allocateUnusedWorker (dotnet.7.0.0-rc.2.22472.3.9fl1sjtbvn.js:5:41466)\r\n\u003e     at rs (dotnet.7.0.0-rc.2.22472.3.9fl1sjtbvn.js:5:42820)\r\n\u003e     at yu (dotnet.7.0.0-rc.2.22472.3.9fl1sjtbvn.js:5:106551)\r\n\u003e     at async dotnet.7.0.0-rc.2.22472.3.9fl1sjtbvn.js:5:104732\r\n\u003e ```\r\n\u003e \r\n\u003e Trying to poke around by finding dotnet.worker.js and copying it with the right name doesn\u0027t seem to be any use as the referencing code really expects it to be part of the bundle.\r\n\r\nHave you found a tmp solution?",
                                           "updatedAt":  "2023-01-23T14:15:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TePNY",
                                           "createdAt":  "2023-01-23T14:25:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "baywet",
                                           "body":  "I haven\u0027t, I was expecting the team here to revert with a workaround or a fix. I believe the key is hardcoded and I wasn\u0027t able to find extensibility points to impact the bundling process.",
                                           "updatedAt":  "2023-01-23T14:25:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YRKJF",
                                           "createdAt":  "2023-03-23T09:52:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC_gbbA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "jtorjo",
                                                                               "createdAt":  "2023-03-23T10:33:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Schnjan",
                                                                               "createdAt":  "2023-04-18T12:31:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "ArcadeMode",
                                                                               "createdAt":  "2023-06-30T12:17:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "czdietrich",
                                           "body":  "Any update on the `js-module-threads` issue?\r\nIt would be great to know how to work around this even if it currently needs manual steps.\r\nSo we could gather experience with the multithreading environment in Blazor in early development phases.",
                                           "updatedAt":  "2023-03-23T09:52:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5agQTf",
                                           "createdAt":  "2023-04-21T22:52:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "curiousdannii",
                                           "body":  "This [ASP.net](https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-7-rc-2/) blog has a very basic threading example, but I haven\u0027t been able to find one that includes `JSImport`s. I get a `ES6 module main.js was not imported yet, please call JSHost.Import() first.` error when I try to run my blocking code in a thread. (I have code that expects a non-async API, which must be implemented by promises in JSImport.)\r\n\r\nAre threads and `JSImport`s meant to be working, or do I need to wait for another .NET release?\r\n\r\nEdit: looks like I need to wait for #84489.",
                                           "updatedAt":  "2023-04-21T22:58:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5agTGv",
                                           "createdAt":  "2023-04-21T23:15:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "\n\u003e Are threads and `JSImport`s meant to be working, or do I need to wait for another .NET release?\n\u003e \n\u003e Edit: looks like I need to wait for #84489.\n\nThat\u0027s exactly right. It\u0027s not supported yet, but I\u0027m working on it.\n\nI\u0027m curious to know more about your use case. \n\nNote that with #84489, only threads started with `Task.Run` will be able to JSImport async functions that return promises. \n\nJust starting a thread with `new Thread()` and calling some JSImported promise and then calling `.Wait()` or `.Result` won\u0027t be supported (those synchronous  blocking wait/result calls preventnus from returning to the JS event loop in the webworker, so JS promises never get a chance to resolve). ",
                                           "updatedAt":  "2023-04-21T23:15:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5agcQ5",
                                           "createdAt":  "2023-04-22T01:09:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "curiousdannii",
                                           "body":  "\u003e I\u0027m curious to know more about your use case.\r\n\r\nI have an app I\u0027m trying to port, which calls a blocking function in a non-managed dll:\r\n\r\n```\r\n        [DllImport(\"Glk\")]\r\n        internal static extern void glk_select(ref Event ev);\r\n```\r\n\r\nTo port it to WASM/JS it instead needs to call an async JS function (ignore that it no longer takes any arguments):\r\n\r\n```\r\n        [JSImport(\"glk_select\", \"main.js\")]\r\n        internal static partial Task glk_select();\r\n```\r\n\r\nI\u0027ve made an interface that lets me link to either the DLL or the JSImport, but I just need some way to block while I wait for the promise to resolve. And that\u0027s pretty much it!\r\n\r\n(I also tried making the app async, but it\u0027s a messy legacy app and I would end up needing convert nearly everything to async functions, so threads seems a better option.) (And async functions not having `ref` or `out` arguments and VB.net not having tuple destructuring makes it even grosser to try to convert.)",
                                           "updatedAt":  "2023-04-22T01:20:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gPOHb",
                                           "createdAt":  "2023-06-30T12:46:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArcadeMode",
                                           "body":  "\u003e Any update on the `js-module-threads` issue? It would be great to know how to work around this even if it currently needs manual steps. So we could gather experience with the multithreading environment in Blazor in early development phases.\r\n\r\nAny news on this? I\u0027m still seeing this today, not sure how to work around it.",
                                           "updatedAt":  "2023-06-30T12:46:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gRuyE",
                                           "createdAt":  "2023-06-30T22:59:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "\u003e \u003e Any update on the `js-module-threads` issue? It would be great to know how to work around this even if it currently needs manual steps. So we could gather experience with the multithreading environment in Blazor in early development phases.\n\u003e \n\u003e Any news on this? I\u0027m still seeing this today, not sure how to work around it.\n\nUnfortunately Blazor support for threading is taking a bit longer than we would have liked. We\u0027re working on it, but it\u0027s not something that you can experiment with at this point. We do expect to have something in a later .NET 8 preview.",
                                           "updatedAt":  "2023-06-30T22:59:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gafNv",
                                           "createdAt":  "2023-07-03T07:48:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ArcadeMode",
                                           "body":  "\u003e Unfortunately Blazor support for threading is taking a bit longer than we would have liked. We\u0027re working on it, but it\u0027s not something that you can experiment with at this point. We do expect to have something in a later .NET 8 preview.\r\n\r\nThats a shame, thank you for your reply 😊",
                                           "updatedAt":  "2023-07-03T07:48:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rgo0D",
                                           "createdAt":  "2023-11-09T12:13:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I updated MT tracking issue https://github.com/dotnet/runtime/issues/85592",
                                           "updatedAt":  "2023-11-09T12:13:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wj-eJ",
                                           "createdAt":  "2024-01-12T05:55:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODTo_lw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "curiousdannii",
                                                                               "createdAt":  "2024-01-22T22:19:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tebeco",
                                           "body":  "hello,\r\n\r\nAnyone know if this meta tracker could updated for net8 ? now that the release is done ?\r\nI\u0027ve seen a question on the C# Discord server, search engine found this issue as the first search result, but I can\u0027t seems to tell what changed from net7 to net8 from this tracker\r\n\r\n![image](https://github.com/dotnet/runtime/assets/2266487/8838a611-f148-4965-bd56-eb9e25df18e7)\r\n",
                                           "updatedAt":  "2024-01-12T05:57:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yJhWA",
                                           "createdAt":  "2024-01-29T16:37:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e Anyone know if this meta tracker could updated for net8 ?\r\n\r\nThere were mostly low level steps toward multi-threading during Net8, but it\u0027s not supported in Net8.\r\nFor the current progress on Net9, please have look at https://github.com/dotnet/runtime/issues/85592",
                                           "updatedAt":  "2024-01-29T16:37:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yKlqz",
                                           "createdAt":  "2024-01-29T19:05:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODYHqTw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eagrzn",
                                                                               "createdAt":  "2024-01-29T23:52:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "incomingstick",
                                                                               "createdAt":  "2024-02-25T07:51:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "tebeco",
                                           "body":  "\u003e \u003e Anyone know if this meta tracker could updated for net8 ?\r\n\u003e \r\n\u003e There were mostly low level steps toward multi-threading during Net8, but it\u0027s not supported in Net8. For the current progress on Net9, please have look at #85592\r\n\r\nAh cool, thx a lot for the next release tracker :)\r\n\r\n---\r\n\r\n\r\n\u003cimg width=\"1072\" alt=\"image\" src=\"https://github.com/dotnet/runtime/assets/2266487/a947741e-4bc5-44b8-8011-e2de4b6c2186\"\u003e\r\n\r\nThis image is why I asked,\r\nIt was usefully showing net7.0 - RC2\r\nand also showing net9.0 milestone, but is missing anything related net8.0 that being ultra small or bigger type of release\r\n\r\nNow i understand that there\u0027s another one regarding Net9.0\r\n\r\nThe question is ... from an outsider point of you it would be nice to have this issue either\r\n* renamed to clarify it\u0027s only net7 (probably not the case)\r\n* closed if all done (probably not the case)\r\n* updated every release (ie: net8.0: list of PR)\r\n* list all possible tracker per release and each release issue summing it\r\n\r\nI\u0027m not trying to be picky, I\u0027m just hardly able to try to follow up cross release \"Epic size\" feature when there\u0027s a lot of cross over that are not listed.\r\nThere\u0027s probably other ways i suppose but this ticket title seems like the perfect candidate to list the \"per release\"",
                                           "updatedAt":  "2024-01-29T19:07:12Z"
                                       }
                                   ],
                         "totalCount":  19
                     },
        "title":  "[tracking] Experimental WebAssembly multithreading support",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono",
                       "tracking",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109464",
        "createdAt":  "2022-07-08T20:31:03Z",
        "number":  109464,
        "author":  "dotMorten",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-08T14:59:58Z",
        "body":  "### Android application type\n\nAndroid for .NET (net6.0-android, etc.)\n\n### Affected platform version\n\nVS2022, Version 17.3.0 Preview 2.0\n\n### Description\n\nIf I have a Task method that throws before the async work is done, without awaiting that method will cause the method to immediately throw on Windows and iOS. However on Android this call doesn\u0027t throw. and instead throws an unobserved task exception later.\n\n### Steps to Reproduce\n\n1. Create a new .NET MAUI application\r\n2. Replace the MainPage.xaml.cs code with the following:\r\n```cs\r\n\tpublic MainPage()\r\n\t{\r\n\t\tInitializeComponent();\r\n\t\tTaskScheduler.UnobservedTaskException += TaskScheduler_UnobservedTaskException;\r\n\t}\r\n\r\n\tprivate void TaskScheduler_UnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs e)\r\n\t{\r\n\t\tDispatcher.Dispatch(() =\u003e\r\n\t\t{\r\n\t\t\tCounterBtn.Text = $\"UnobservedTaskException thrown\";\r\n\t\t});\r\n\t\te.SetObserved();\r\n\t}\r\n\r\n\tprivate void OnCounterClicked(object sender, EventArgs e)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\t_ = OperationAsync(null);\r\n\t\t\tCounterBtn.Text = $\"No exception thrown !\";\r\n\t\t}\r\n\t\tcatch (ArgumentNullException)\r\n\t\t{\r\n\t\t\tCounterBtn.Text = $\"Exception thrown as expected\";\r\n\t\t}\r\n\t}\r\n\tprivate async Task OperationAsync(object arg)\r\n\t{\r\n\t\tif (arg is null) throw new ArgumentNullException(nameof(arg));\r\n\t\tawait Task.Delay(1000);\r\n\t}\r\n```\r\nRun the application on Windows and iOS, and note button text changes to `Exception thrown as expected`.\r\nNext run this on Android, and note that first the button text changes to `No exception thrown !`, shortly after followed by `UnobservedTaskException Thrown`.\n\n### Did you find any workaround?\n\nAwait your tasks\n\n### Relevant log output\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkjC1uA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6SLAPP",
                                           "createdAt":  "2022-07-11T19:07:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grendello",
                                           "body":  "Soo... this is interesting. It appears that Neither of the above behaviors is correct. I ported your sample to plain Xamarin.Android and I get yet another result - the exception isn\u0027t thrown at all.\r\n\r\nWe appear to have 4 different behaviors:\r\n\r\n1. MAUI iOS/Windows: the exception is thrown immediately\r\n2. MAUI Android: the exception is thrown with a delay, caught by the unhandled exception handler\r\n3. Plain [Xamarin.Android](https://gist.github.com/grendello/4d31b6df0ade9cfcea8e2cfefd5578a8)/[.NET6 CoreCLR Windows](https://sharplab.io/#v2:C4LgTgrgdgPgAgJgAwFgBQiCM65IARyYCsA3OjpgJwAUARIDwbgIPu0CUZa6AQhMMAPZQ8AYT7RgAUzCdgggLx4o4gO7U25NAHkoIsZKEAbAJYBjANbiAJqvYUaOqBKkyAdABVxAD2BqOGACx4WvaOBibmVizoAJAA3tFRwGAAnvFxaFEZAPp48hoADpIAhsCGAgCCAM5JUMbUUBD6+j4ZUcGS0lBunsA5eAAktAByfHiexuJ5JQJ4wAAWYHxKggCEtOwZAL7xxsXGs3jUZWAA5hAAtuIOgw36AKIe45OlUJHpsfGtog7tLu5evQN7o8poI5gslnhChVRh4CsYJBY1vEtukUVE4AAOAgANkCBTAxWelWqtT4ACMAFbieGQk6vd5vQwAMwOhROeEM0PqjRYM3miwUyjwR1OFyuNyBExBdUKFz4TOobOOLGa6MoOOcABFxPpCklqJgkEbmij1Ig8NxeAJ0Gk8HaCABmAiGvB/HoxY7iYAkPAVL0kFEbIA=)/dotnet MonoVM Windows/.NET7 Desktop MonoVM/.NET7 CoreCLR Windows/WinUI: the exception is never thrown\r\n\r\nIt appears that `3.` is the correct behavior.",
                                           "updatedAt":  "2022-07-11T20:26:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SLAPW",
                                           "createdAt":  "2022-07-11T20:31:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PureWeen",
                                           "body":  "@grendello I\u0027ve attached a WinUI app without MAUI and one that is MAUI. Both scenarios behave the same. \r\n\r\nWinUI\r\n[ExceptionTest.zip](https://github.com/xamarin/xamarin-android/files/9087304/ExceptionTest.zip)\r\n\r\nMAUI\r\n[MauiApp38.zip](https://github.com/xamarin/xamarin-android/files/9087306/MauiApp38.zip)\r\n\r\n",
                                           "updatedAt":  "2022-07-11T20:31:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SLAXL",
                                           "createdAt":  "2024-11-01T18:17:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-01T18:17:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6SMLW4",
                                           "createdAt":  "2024-11-01T22:20:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-01T22:20:49Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Async method throwing before await throws unobserved exception on Android only",
        "labels":  [
                       "os-android",
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71855",
        "createdAt":  "2022-07-08T21:06:06Z",
        "number":  71855,
        "author":  "DaZombieKiller",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-01T17:54:36Z",
        "body":  "### Description\r\n\r\nWhen using a custom `SynchronizationContext` that calls `SetWaitNotificationRequired`, `Task.Wait` does not appear to properly handle invoking `SynchronizationContext.Wait`, resulting in code deadlocking in certain scenarios.\r\n\r\n### Reproduction Steps\r\n\r\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFrameworks\u003enet6.0;net480\u003c/TargetFrameworks\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cLangVersion\u003e10\u003c/LangVersion\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n```cs\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Runtime.InteropServices;\r\n\r\nConsole.WriteLine(RuntimeInformation.FrameworkDescription);\r\nusing var context = new CustomSynchronizationContext();\r\nSynchronizationContext.SetSynchronizationContext(context);\r\n\r\ncontext.Send(static _ =\u003e\r\n{\r\n    var sw   = Stopwatch.StartNew();\r\n    var task = WaitForOneSecondAsync();\r\n    \r\n    // This will wait properly.\r\n    //while (!task.IsCompleted)\r\n    //    context.ProcessQueuedOperations();\r\n\r\n    // This will also wait properly.\r\n    //((IAsyncResult)task).AsyncWaitHandle.WaitOne();\r\n\r\n    // This will hang the program.\r\n    //task.Wait();\r\n    \r\n    // This will hang the program for five seconds.\r\n    task.Wait(5000);\r\n\r\n    Console.WriteLine(\"Took {0}ms\", sw.ElapsedMilliseconds);\r\n}, null);\r\n\r\nstatic async Task WaitForOneSecondAsync()\r\n{\r\n    await Task.Delay(1000);\r\n    Console.WriteLine(\"One second elapsed\");\r\n}\r\n```\r\n```cs\r\nusing System;\r\nusing System.Threading;\r\nusing System.Collections.Concurrent;\r\n\r\nsealed class CustomSynchronizationContext : SynchronizationContext, IDisposable\r\n{\r\n    volatile bool _disposed;\r\n\r\n    readonly int _mainThreadId;\r\n\r\n    readonly ConcurrentQueue\u003cOperation\u003e _operations;\r\n\r\n    public CustomSynchronizationContext()\r\n    {\r\n        SetWaitNotificationRequired();\r\n        var thread = new Thread(UpdateThread);\r\n        thread.Start();\r\n        _operations   = new ConcurrentQueue\u003cOperation\u003e();\r\n        _mainThreadId = thread.ManagedThreadId;\r\n    }\r\n\r\n    void UpdateThread()\r\n    {\r\n        SetSynchronizationContext(this);\r\n\r\n        while (!_disposed)\r\n        {\r\n            try\r\n            {\r\n                ProcessQueuedOperations();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.Error.WriteLine(ex.ToString());\r\n            }\r\n        }\r\n    }\r\n\r\n    public override void Post(SendOrPostCallback d, object? state)\r\n    {\r\n        _operations.Enqueue(new Operation(d) { State = state });\r\n    }\r\n\r\n    public override void Send(SendOrPostCallback d, object? state)\r\n    {\r\n        if (_mainThreadId == Environment.CurrentManagedThreadId)\r\n        {\r\n            d(state);\r\n            return;\r\n        }\r\n\r\n        var mre = new ManualResetEventSlim();\r\n        var op  = new Operation(d) { State = state, WaitEvent = mre };\r\n        _operations.Enqueue(op);\r\n        mre.Wait();\r\n    }\r\n\r\n    public void ProcessQueuedOperations()\r\n    {\r\n        if (_mainThreadId != Environment.CurrentManagedThreadId)\r\n            throw new InvalidOperationException();\r\n\r\n        while (_operations.TryDequeue(out Operation? op))\r\n        {\r\n            try\r\n            {\r\n                op.Callback(op.State);\r\n            }\r\n            finally\r\n            {\r\n                op.WaitEvent?.Set();\r\n            }\r\n        }\r\n    }\r\n\r\n    public override int Wait(IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout)\r\n    {\r\n        if (_mainThreadId != Environment.CurrentManagedThreadId)\r\n            return WaitHelper(waitHandles, waitAll, millisecondsTimeout);\r\n\r\n        int result;\r\n        int ms = 0;\r\n\r\n        do\r\n        {\r\n            ProcessQueuedOperations();\r\n            result = WaitHelper(waitHandles, waitAll, 256);\r\n            ms    += 256;\r\n\r\n            if (millisecondsTimeout != Timeout.Infinite \u0026\u0026 ms \u003e= millisecondsTimeout)\r\n                return result;\r\n\r\n        } while (result == WaitHandle.WaitTimeout);\r\n\r\n        return result;\r\n    }\r\n\r\n    public void Dispose()\r\n    {\r\n        _disposed = true;\r\n    }\r\n\r\n    sealed class Operation\r\n    {\r\n        public readonly SendOrPostCallback Callback;\r\n\r\n        public object? State;\r\n\r\n        public ManualResetEventSlim? WaitEvent;\r\n\r\n        public Operation(SendOrPostCallback callback)\r\n        {\r\n            Callback = callback;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nThis is the output given by .NET Core and .NET Framework:\r\n```\r\n=== .NET Core\r\n.NET 6.0.6\r\nOne second elapsed\r\nTook 1065ms\r\n\r\n=== .NET Framework\r\n.NET Framework 4.8.4515.0\r\nOne second elapsed\r\nTook 1067ms\r\n```\r\n\r\n### Actual behavior\r\n\r\nThis is the output given by `mono/mono`, `dotnet/runtime` mono, and Unity:\r\n```\r\n=== Mono\r\nMono 6.12.0 (Visual Studio built mono)\r\nTook 5020ms\r\nOne second elapsed\r\n\r\n=== Mono (dotnet/runtime)\r\n.NET 7.0.0-preview.5.22301.12\r\nTook 5009ms\r\nOne second elapsed\r\n\r\n=== Unity 2021.3.6f1\r\nMono 6.13.0 (Visual Studio built mono)\r\nTook 5001ms\r\nOne second elapsed\r\n```\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\nAs far as I can tell, this problem is somewhere in Mono\u0027s implementation of `Monitor.Wait`, though I have not yet confirmed it.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSBx-DA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5GS5rP",
                                           "createdAt":  "2022-07-08T21:06:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @mangod9\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen using a custom `SynchronizationContext` that calls `SetWaitNotificationRequired`, `Task.Wait` does not appear to properly handle invoking `SynchronizationContext.Wait`, resulting in code deadlocking in certain scenarios.\n\n### Reproduction Steps\n\n```xml\r\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\r\n  \u003cPropertyGroup\u003e\r\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\r\n    \u003cTargetFrameworks\u003enet6.0;net480\u003c/TargetFrameworks\u003e\r\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\r\n    \u003cLangVersion\u003e10\u003c/LangVersion\u003e\r\n  \u003c/PropertyGroup\u003e\r\n\u003c/Project\u003e\r\n```\r\n```cs\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\nusing System.Runtime.InteropServices;\r\n\r\nConsole.WriteLine(RuntimeInformation.FrameworkDescription);\r\nusing var context = new CustomSynchronizationContext();\r\nSynchronizationContext.SetSynchronizationContext(context);\r\n\r\ncontext.Send(static _ =\u003e\r\n{\r\n    var sw   = Stopwatch.StartNew();\r\n    var task = WaitForOneSecondAsync();\r\n    \r\n    // This will wait properly.\r\n    //while (!task.IsCompleted)\r\n    //    context.ProcessQueuedOperations();\r\n\r\n    // This will also wait properly.\r\n    //((IAsyncResult)task).AsyncWaitHandle.WaitOne();\r\n\r\n    // This will hang the program.\r\n    //task.Wait();\r\n    \r\n    // This will hang the program for five seconds.\r\n    task.Wait(5000);\r\n\r\n    Console.WriteLine(\"Took {0}ms\", sw.ElapsedMilliseconds);\r\n}, null);\r\n\r\nstatic async Task WaitForOneSecondAsync()\r\n{\r\n    await Task.Delay(1000);\r\n    Console.WriteLine(\"One second elapsed\");\r\n}\r\n```\r\n```cs\r\nusing System;\r\nusing System.Threading;\r\nusing System.Collections.Concurrent;\r\n\r\nsealed class CustomSynchronizationContext : SynchronizationContext, IDisposable\r\n{\r\n    bool _disposed;\r\n\r\n    readonly int _mainThreadId;\r\n\r\n    readonly ConcurrentQueue\u003cOperation\u003e _operations;\r\n\r\n    public CustomSynchronizationContext()\r\n    {\r\n        SetWaitNotificationRequired();\r\n        var thread = new Thread(UpdateThread);\r\n        thread.Start();\r\n        _operations   = new ConcurrentQueue\u003cOperation\u003e();\r\n        _mainThreadId = thread.ManagedThreadId;\r\n    }\r\n\r\n    void UpdateThread()\r\n    {\r\n        SetSynchronizationContext(this);\r\n\r\n        while (!_disposed)\r\n        {\r\n            try\r\n            {\r\n                ProcessQueuedOperations();\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.Error.WriteLine(ex.ToString());\r\n            }\r\n        }\r\n    }\r\n\r\n    public override void Post(SendOrPostCallback d, object? state)\r\n    {\r\n        _operations.Enqueue(new Operation(d) { State = state });\r\n    }\r\n\r\n    public override void Send(SendOrPostCallback d, object? state)\r\n    {\r\n        if (_mainThreadId == Environment.CurrentManagedThreadId)\r\n        {\r\n            d(state);\r\n            return;\r\n        }\r\n\r\n        var mre = new ManualResetEventSlim();\r\n        var op  = new Operation(d) { State = state, WaitEvent = mre };\r\n        _operations.Enqueue(op);\r\n        mre.Wait();\r\n    }\r\n\r\n    public void ProcessQueuedOperations()\r\n    {\r\n        if (_mainThreadId != Environment.CurrentManagedThreadId)\r\n            throw new InvalidOperationException();\r\n\r\n        while (_operations.TryDequeue(out Operation? op))\r\n        {\r\n            try\r\n            {\r\n                op.Callback(op.State);\r\n            }\r\n            finally\r\n            {\r\n                op.WaitEvent?.Set();\r\n            }\r\n        }\r\n    }\r\n\r\n    public override int Wait(IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout)\r\n    {\r\n        if (_mainThreadId != Environment.CurrentManagedThreadId)\r\n            return WaitHelper(waitHandles, waitAll, millisecondsTimeout);\r\n\r\n        int result;\r\n        int ms = 0;\r\n\r\n        do\r\n        {\r\n            ProcessQueuedOperations();\r\n            result = WaitHelper(waitHandles, waitAll, 256);\r\n            ms    += 256;\r\n\r\n            if (millisecondsTimeout != Timeout.Infinite \u0026\u0026 ms \u003e= millisecondsTimeout)\r\n                return result;\r\n\r\n        } while (result == WaitHandle.WaitTimeout);\r\n\r\n        return result;\r\n    }\r\n\r\n    public void Dispose()\r\n    {\r\n        _disposed = true;\r\n    }\r\n\r\n    sealed class Operation\r\n    {\r\n        public readonly SendOrPostCallback Callback;\r\n\r\n        public object? State;\r\n\r\n        public ManualResetEventSlim? WaitEvent;\r\n\r\n        public Operation(SendOrPostCallback callback)\r\n        {\r\n            Callback = callback;\r\n        }\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\nThis is the output given by .NET Core and .NET Framework:\r\n```\r\n=== .NET Core\r\n.NET 6.0.6\r\nOne second elapsed\r\nTook 1065ms\r\n\r\n=== .NET Framework\r\n.NET Framework 4.8.4515.0\r\nOne second elapsed\r\nTook 1067ms\r\n```\n\n### Actual behavior\n\nThis is the output given by `mono/mono`, `dotnet/runtime` mono, and Unity:\r\n```\r\n=== Mono\r\nMono 6.12.0 (Visual Studio built mono)\r\nTook 5020ms\r\nOne second elapsed\r\n\r\n=== Mono (dotnet/runtime)\r\n.NET 7.0.0-preview.5.22301.12\r\nTook 5009ms\r\nOne second elapsed\r\n\r\n=== Unity 2021.3.6f1\r\nMono 6.13.0 (Visual Studio built mono)\r\nTook 5001ms\r\nOne second elapsed\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\nAs far as I can tell, this problem is somewhere in Mono\u0027s implementation of `Monitor.Enter`, though I have not yet confirmed it.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDaZombieKiller\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Threading`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-08T21:06:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GTipw",
                                           "createdAt":  "2022-07-09T11:29:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCl5ejA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DaZombieKiller",
                                                                               "createdAt":  "2022-07-09T13:40:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "NN---",
                                           "body":  "@DaZombieKiller unrelated to the issue.\r\nIn your code sample you should use `volatile bool _disposed` if you want Dispose to stop loop correctly.\r\nhttps://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/volatile",
                                           "updatedAt":  "2022-07-09T11:29:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GTnUx",
                                           "createdAt":  "2022-07-09T13:39:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "@NN--- Yup, I\u0027m aware of that. The sample is just a program thrown together quickly to demonstrate the issue, it\u0027s not intended to be a bulletproof example of a thread-safe sync context. Disposal behaviour isn\u0027t important for it, so that slipped through the cracks.",
                                           "updatedAt":  "2022-07-09T13:39:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GydZf",
                                           "createdAt":  "2022-07-18T15:19:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "What mono configuration are you using?",
                                           "updatedAt":  "2022-07-18T15:19:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GyjLN",
                                           "createdAt":  "2022-07-18T15:39:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "@marek-safar For `mono/mono`, I just used the Windows installer and ran the binary via `mono program.exe`. For `dotnet/runtime/mono`, I compiled it under WSL2. All scenarios are using JIT, I haven\u0027t tested whether the issue occurs under AOT in any form.",
                                           "updatedAt":  "2022-07-18T15:39:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HxFWo",
                                           "createdAt":  "2022-08-03T14:47:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "cc @lambdageek @vargaz ",
                                           "updatedAt":  "2022-08-03T14:47:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IFloe",
                                           "createdAt":  "2022-08-09T14:02:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "Moving to 8.0.0, we\u0027ll consider backporting based on the fix",
                                           "updatedAt":  "2022-08-09T14:02:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IFwlm",
                                           "createdAt":  "2022-08-09T14:39:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "/cc @kg fyi",
                                           "updatedAt":  "2022-08-09T14:39:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IHH4M",
                                           "createdAt":  "2022-08-09T20:12:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "not sure yet how much work this is going to need.  at least for the above sample, it\u0027s the wait in `ves_icall_System_Threading_Monitor_Monitor_wait` that is not calling the sync context (ManualResetEventSlim - which is used both in the sample and in the implementation of Task.Wait - delegates to `Monitor.Wait` when it needs to actually wait).   Not sure if there are other scenarios where we wait in native that ought to be delegated to the synchronization context.\r\n\r\nThis could be the motivation to switch to a fully managed implementation of Monitor: https://github.com/dotnet/runtime/issues/48058\r\n\r\nI\u0027m going to see if there\u0027s a less invasive solution that we might be able to also include in net7\r\n",
                                           "updatedAt":  "2022-08-09T20:12:21Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[Mono] `Task.Wait` does not respect `SynchronizationContext.IsWaitNotificationRequired` under certain circumstances, leading to deadlocks",
        "labels":  [
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75756",
        "createdAt":  "2022-09-16T14:04:01Z",
        "number":  75756,
        "author":  "EgorBo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-15T18:08:25Z",
        "body":  "https://dev.azure.com/dnceng-public/public/_build/results?buildId=19800\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=401084\u0026paneView=debug\r\n\r\n```\r\n      Incoming arguments: --run critical_finalization.dll\r\n      Application arguments: --run critical_finalization.dll\r\n      console.debug: mono_wasm_runtime_ready fe00e07a-5519-4dfe-b35a-f867dbaf2e28\r\n      console.info: Initializing dotnet version 8.0.0 commit hash f3f776b510050d0c69cedb7372324103ab240494\r\n      0\r\n      0\r\n      -1\r\n      0\r\n      WASM EXIT 1\r\n      Expected: 100\r\n      Actual: 1\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/datadisks/disk1/work/B6A409B4/p\r\n      \u003e /datadisks/disk1/work/B6A409B4/w/AE8A0938/e/baseservices/critical_finalization/critical_finalization/critical_finalization.sh\r\n```\r\n\r\nBased on \r\nhttps://github.com/dotnet/runtime/blob/c7eb44d11bb5acca6ccc40de42314663cbaff145/src/tests/baseservices/critical_finalization/critical_finalization.cs#L43-L48\r\n\r\n`P.count == 0`, so returning `1`.\r\n\r\nAs for why it is zero, cc @lambdageek  @vargaz @kg ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYSeLWg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5KeGxT",
                                           "createdAt":  "2022-09-16T14:04:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @directhex\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=19800\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=401084\u0026paneView=debug\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eEgorBo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Infrastructure-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-16T14:04:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KeG23",
                                           "createdAt":  "2022-09-16T14:04:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=19800\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=401084\u0026paneView=debug\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eEgorBo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `untriaged`, `area-Infrastructure-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-16T14:04:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kfmhq",
                                           "createdAt":  "2022-09-16T20:48:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @brzvlad\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=19800\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=401084\u0026paneView=debug\r\n\r\n```\r\n      Incoming arguments: --run critical_finalization.dll\r\n      Application arguments: --run critical_finalization.dll\r\n      console.debug: mono_wasm_runtime_ready fe00e07a-5519-4dfe-b35a-f867dbaf2e28\r\n      console.info: Initializing dotnet version 8.0.0 commit hash f3f776b510050d0c69cedb7372324103ab240494\r\n      0\r\n      0\r\n      -1\r\n      0\r\n      WASM EXIT 1\r\n      Expected: 100\r\n      Actual: 1\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/datadisks/disk1/work/B6A409B4/p\r\n      \u003e /datadisks/disk1/work/B6A409B4/w/AE8A0938/e/baseservices/critical_finalization/critical_finalization/critical_finalization.sh\r\n```\r\n\r\nBased on \r\nhttps://github.com/dotnet/runtime/blob/c7eb44d11bb5acca6ccc40de42314663cbaff145/src/tests/baseservices/critical_finalization/critical_finalization.cs#L43-L48\r\n\r\n`P.count == 0`, so returning `1`.\r\n\r\nAs for why it is zero, cc @lambdageek  @vargaz @kg \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eEgorBo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-GC-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-16T20:48:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KfnCs",
                                           "createdAt":  "2022-09-16T20:51:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "ah, it\u0027s probably a non-precise gc issue btw?",
                                           "updatedAt":  "2022-09-16T20:51:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kf5Vy",
                                           "createdAt":  "2022-09-16T22:00:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "It could be, on mono, its very hard to guarantee that a finalizer runs.\r\n",
                                           "updatedAt":  "2022-09-16T22:00:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kf9nv",
                                           "createdAt":  "2022-09-16T22:10:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "Yeah I never managed to write a reliable test for it on the wasm binding side so I gave up.",
                                           "updatedAt":  "2022-09-16T22:10:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kq707",
                                           "createdAt":  "2022-09-20T18:45:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AntonLapounov",
                                           "body":  "\u003e on mono, its very hard to guarantee that a finalizer runs.\r\n\r\nNote that `P.count == 0` and `Q.count == 0` means none of 200 finalizers was executed.",
                                           "updatedAt":  "2022-09-20T18:45:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Kq9EP",
                                           "createdAt":  "2022-09-20T18:50:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "If I understand this situation right: It\u0027s wasm so there\u0027s no finalizer thread[1] so you would need to do a complex dance on the main thread at some point before exit where you do GCs repeatedly to fill the finalizer queue, then run all the finalizers on the queue. I\u0027m sure we make a best effort to do something like this already but I\u0027m not certain it would be possible to make it reliable. Wasm also scans the stack conservatively so any stray garbage on the stack could be keeping objects alive and preventing finalization.\r\n\r\n[1] since threads are off by default right now",
                                           "updatedAt":  "2022-09-20T18:50:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KroXM",
                                           "createdAt":  "2022-09-20T21:50:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Could `GC.WaitForPendingFinalizers` just pump the finalizer queue synchronously on wasm? or is that just inviting deadlock?\r\n\r\nAs written, I agree this can\u0027t guarantee finalization on wasm\r\n\r\nhttps://github.com/dotnet/runtime/blob/c7eb44d11bb5acca6ccc40de42314663cbaff145/src/tests/baseservices/critical_finalization/critical_finalization.cs#L38-L51\r\n",
                                           "updatedAt":  "2022-09-20T21:50:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hJ3Mf",
                                           "createdAt":  "2023-07-11T01:43:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "@lambdageek where did we land on this?\r\n\r\ncc @pavelsavara ",
                                           "updatedAt":  "2023-07-11T01:43:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hJ4ta",
                                           "createdAt":  "2023-07-11T01:52:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "@lewing wishlist or wont fix, I think.\n\n`GC.WaitForPendingFinalizers` cannot do the right thing on single-threaded wasm since there is no finalizer thread. I suggested pumping the queue synchronously, that\u0027s maybe worth trying, but I\u0027m not sure it will do the right thing in general",
                                           "updatedAt":  "2023-07-11T01:52:39Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[wasm] `critical_finalization` runtime test fails on Linux",
        "labels":  [
                       "arch-wasm",
                       "area-GC-mono",
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76957",
        "createdAt":  "2022-10-12T20:00:43Z",
        "number":  76957,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-28T16:56:36Z",
        "body":  "If user code uses `setTimeout` to queue work on the `JSWebWorker` and that code throws unhandled exceptions, we should not bring down the whole runtime in a disorganized manner.\r\n\r\nShould we propagate unhandled JS errors the JSWebWorker top level Task ?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcmKOjw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5MGHTp",
                                           "createdAt":  "2022-10-12T20:00:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-10-12T20:00:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MGHbY",
                                           "createdAt":  "2022-10-12T20:01:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nnull\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elambdageek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-Threading-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-12T20:01:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rfrq4",
                                           "createdAt":  "2023-11-09T09:30:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I guess we don\u0027t have any manifestation of this yet?\r\n\r\nAnyway, I think that calling back from JS to C# will happen via `JSExport` and that propagates exceptions correctly.\r\n\r\nIs there another concern ?",
                                           "updatedAt":  "2024-01-31T09:03:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yXMBw",
                                           "createdAt":  "2024-01-31T09:08:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "We do subscribe to `unhandledrejection` and `error` top level events in the UI thread and shut down the runtime when that happens, when internal `withExitOnUnhandledError` is used.\r\n\r\nhttps://github.com/dotnet/runtime/blob/9429e432f39786e1bcd1c080833e5d7691946591/src/mono/browser/runtime/loader/run.ts#L75-L76\r\n\r\nIs that too strict ?\r\nShould we adopt the same on the `JSWebWorker` too ?\r\n",
                                           "updatedAt":  "2024-01-31T13:00:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yYo6P",
                                           "createdAt":  "2024-01-31T13:01:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Maybe `JSWebWorker` should propagate unhandled JS errors from `setTimeout` to the `JSWebWorker` top level `Task` ?",
                                           "updatedAt":  "2024-01-31T13:01:54Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[browser][mt] Propagate unhandled JS errors in JSWebWorker  to the top level Task",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76963",
        "createdAt":  "2022-10-12T20:15:23Z",
        "number":  76963,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-28T17:52:27Z",
        "body":  "Block threads (esp the main thread) from entering the runtime from the JS event loop when a GC Stop-The-World is active.  \r\nThe thread should safepoint in native, or (better) somehow defer its work and return to the JS event loop\r\n\r\nCurrent offenders are\r\n- reflection in `init_managed_exports`\r\n- `mono_wasm_gc_lock`, `mono_wasm_gc_unlock` used by Blazor\r\n- `mono_wasm_read_as_bool_or_null_unsafe` used by Blazor\r\n- GC roots in hybrid globalization\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeL8nPA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5MGKh0",
                                           "createdAt":  "2022-10-12T20:15:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/gc\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nnull\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elambdageek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-GC-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-12T20:15:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Me6Tu",
                                           "createdAt":  "2022-10-19T00:23:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nBlock threads (esp the main thread) from entering the runtime from the JS event loop when a GC Stop-The-World is active.  The thread should safepoint in native, or (better) somehow defer its work and return to the JS event loop\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elambdageek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-19T00:23:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hJ2_v",
                                           "createdAt":  "2023-07-11T01:42:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "@lambdageek what is the state of this\r\n\r\ncc @pavelsavara ",
                                           "updatedAt":  "2023-07-11T01:42:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hJ30W",
                                           "createdAt":  "2023-07-11T01:47:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Basically wishlist.\n\nI think we have GC Unsafe transitions on all the places where JS runtime code enters native. And managed code has transitions on the native-to- managed wrappers, so calling managed from JS will likewise safepoint.\n\nSo the remaining part of this is to design something new that is Promise-aware so that async apis can wait in JS instead of blocking.\n",
                                           "updatedAt":  "2023-07-11T01:47:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hMR-y",
                                           "createdAt":  "2023-07-11T10:55:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "~~Perhaps mono GC could export unresolved Promise. JS would await that promise instead of blocking, before running any managed callbacks. That also assumes that the callback are async in nature. I\u0027m not sure that all DOM or networking events are.~~",
                                           "updatedAt":  "2023-11-09T11:10:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rfxHU",
                                           "createdAt":  "2023-11-09T09:44:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I think that\r\n- we will try to not have managed code on UI thread\r\n- there should be no JS on any but dedicated `JSWebWorker` thread\r\n- on `JSWebWorker` or deputy thread, we are idling in external loop by default. When timer or any other event ticks, we enter the mono thru GC barrier, like `MONO_ENTER_GC_UNSAFE`\r\n\r\nOne which is possibly missing it is `mono_wasm_execute_timer`",
                                           "updatedAt":  "2024-03-28T17:49:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wtuf1",
                                           "createdAt":  "2024-01-14T18:33:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "To avoid blocking UI thread on GC, we could add another condition here.\r\nhttps://github.com/dotnet/runtime/blob/72604a4b56851a306a545a4fc7320db3a942398f/src/mono/browser/runtime/scheduling.ts#L56\r\n\r\nAnd postpone mono job execution (also) when GC is running.",
                                           "updatedAt":  "2024-03-28T16:53:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yakQx",
                                           "createdAt":  "2024-01-31T17:23:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @brzvlad\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nBlock threads (esp the main thread) from entering the runtime from the JS event loop when a GC Stop-The-World is active.  The thread should safepoint in native, or (better) somehow defer its work and return to the JS event loop\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elambdageek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-GC-mono`, `area-VM-threading-mono`, `os-browser`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-31T17:23:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zWqlU",
                                           "createdAt":  "2024-02-09T04:35:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "cc @steveisok \r\n",
                                           "updatedAt":  "2024-02-09T04:35:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54vYP8",
                                           "createdAt":  "2024-03-28T16:55:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "If we are able to detach the UI thread from Mono, it would be preferable solution of this problem. See https://github.com/dotnet/runtime/issues/100411",
                                           "updatedAt":  "2024-03-28T16:55:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54vyc8",
                                           "createdAt":  "2024-03-28T17:51:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "To be able to postpone calls to `mono_wasm_gc_lock` we also need to postpone whole Blazor `renderBatch` via `setTimeout` \r\nCurrently it happens synchronously I think.",
                                           "updatedAt":  "2024-03-28T17:51:32Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[browser][MT] JS Interop should respect GC pauses",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76964",
        "createdAt":  "2022-10-12T20:19:48Z",
        "number":  76964,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-11-10T16:33:01Z",
        "body":  "Track Emscripten progress on the new VFS and upgrade when it\u0027s available.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOa6YiFA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5MGMAZ",
                                           "createdAt":  "2022-10-12T20:19:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-10-12T20:19:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MGMJx",
                                           "createdAt":  "2022-10-12T20:20:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nTrack Emscripten progress on the new VFS and upgrade when it\u0027s available.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003elambdageek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `untriaged`, `area-Build-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-12T20:20:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5rpiIU",
                                           "createdAt":  "2023-11-10T16:32:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "The default `FS` lives on emscripten main thread and all C calls are dispatched to it, I knew that. \r\nLesson from today: you can\u0027t really use it from web worker JS, because that\u0027s not marshaled.\r\n\r\nThings like `FS.stat(cwd)` can throw",
                                           "updatedAt":  "2023-11-10T16:33:01Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[browser][MT] Switch to multi-threaded Emscripten VFS when it is available",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79906",
        "createdAt":  "2022-12-22T10:37:56Z",
        "number":  79906,
        "author":  "akoeplinger",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-07-21T13:03:25Z",
        "body":  "We\u0027re seeing this **outerloop** test hitting the timeout in CI, while it doesn\u0027t on CoreCLR:\r\n\r\n```\r\nConsole log: \u0027System.Diagnostics.DiagnosticSource.Tests\u0027 from job 49d2aeb0-3194-4c29-a7b7-692082a2cfcb workitem a1d6acdb-00b5-4ef7-8d59-c50ce023988c (osx.1200.amd64.open) executed on machine dci-mac-build-325.local running macOS-12.4\r\n+ ./RunTests.sh --runtime-path /tmp/helix/working/A9B40970/p\r\n----- start Wed Dec 21 07:32:48 PST 2022 =============== To repro directly: =====================================================\r\npushd .\r\n/tmp/helix/working/A9B40970/p/dotnet exec --runtimeconfig System.Diagnostics.DiagnosticSource.Tests.runtimeconfig.json --depsfile System.Diagnostics.DiagnosticSource.Tests.deps.json xunit.console.dll System.Diagnostics.DiagnosticSource.Tests.dll -xml testResults.xml -nologo -nocolor -trait category=OuterLoop -notrait category=IgnoreForCI -notrait category=failing \r\npopd\r\n===========================================================================================================\r\n/private/tmp/helix/working/A9B40970/w/BCD309D3/e /private/tmp/helix/working/A9B40970/w/BCD309D3/e\r\n  Discovering: System.Diagnostics.DiagnosticSource.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Diagnostics.DiagnosticSource.Tests (found 19 of 244 test cases)\r\n  Starting:    System.Diagnostics.DiagnosticSource.Tests (parallel test collections = on, max threads = 6)\r\n   System.Diagnostics.DiagnosticSource.Tests: [Long Running Test] \u0027System.Diagnostics.Tests.DiagnosticSourceTest.AllSubscriberStress\u0027, Elapsed: 00:10:43\r\n   System.Diagnostics.DiagnosticSource.Tests: [Long Running Test] \u0027System.Diagnostics.Tests.DiagnosticSourceTest.AllSubscriberStress\u0027, Elapsed: 00:12:45\r\n   System.Diagnostics.DiagnosticSource.Tests: [Long Running Test] \u0027System.Diagnostics.Tests.DiagnosticSourceTest.AllSubscriberStress\u0027, Elapsed: 00:14:46\r\n   System.Diagnostics.DiagnosticSource.Tests: [Long Running Test] \u0027System.Diagnostics.Tests.DiagnosticSourceTest.AllSubscriberStress\u0027, Elapsed: 00:16:48\r\n   System.Diagnostics.DiagnosticSource.Tests: [Long Running Test] \u0027System.Diagnostics.Tests.DiagnosticSourceTest.AllSubscriberStress\u0027, Elapsed: 00:18:49\r\n/tmp/helix/working/A9B40970/p/scripts/209a4d6b0b364075982a04795f3a8564/execute.sh: line 4: 90698 Killed: 9               ./RunTests.sh --runtime-path \"$HELIX_CORRELATION_PAYLOAD\"\r\n```\r\n\r\nFiling this issue to disable the test for now.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[mono] System.Diagnostics.Tests.DiagnosticSourceTest.AllSubscriberStress test very slow on Mono",
        "labels":  [
                       "disabled-test",
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87718",
        "createdAt":  "2023-06-17T01:21:54Z",
        "number":  87718,
        "author":  "kouvel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCw1VTA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "viktor-svub",
                                            "createdAt":  "2023-06-21T11:26:23Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-11-01T17:54:38Z",
        "body":  "See `MonitorTests.InterruptWaitTest` under `src/libraries/System.Threading/tests` (the test is being added by PR https://github.com/dotnet/runtime/pull/87672): https://github.com/dotnet/runtime/blob/ed64748928b5e25218f14237110e6cb6bc26ed33/src/libraries/System.Threading/tests/MonitorTests.cs#L493-L511",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOX2rySA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5fNSca",
                                           "createdAt":  "2023-06-19T14:46:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Not a regression. Same behavior with mono on net6.0 and net7.0.\r\n\r\nWorks on legacy Mono 6.12.0.188.\r\n\r\nIt looks like we still have the code for async thread interruptions and the WaitSleepJoin thread state. But we don\u0027t have this block anymore in dotnet/runtime mono\r\n\r\nhttps://github.com/mono/mono/blob/59a40d68879b69416f15a1d78198483cddda8cc0/mono/metadata/threads.c#L5161-L5170\r\n\r\n",
                                           "updatedAt":  "2023-06-19T14:46:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fNVvN",
                                           "createdAt":  "2023-06-19T14:55:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "That code was removed as part of https://github.com/dotnet/runtime/pull/47333\r\n\r\nI\u0027m not sure if there was some corert-based interruption logic that was wired up that didn\u0027t work, or if it worked initially and then we added something before the net6 release that broke it\r\n",
                                           "updatedAt":  "2023-06-19T14:55:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fN1u_",
                                           "createdAt":  "2023-06-19T16:28:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "@kouvel This is probably going to be hard to fix.  The right thing is to finish out https://github.com/dotnet/runtime/issues/48058 and remove mono\u0027s native Monitor implementation in favor of a managed one like NativeAOT.  \r\n\r\nBut touching anything related to the sync block causes significant performance perturbations.  I think we can probably switch to using a `Lock` object in Mono instead of the native Monitor, but I\u0027m less sure about switching from an inline sync block to a conditional weak table.\r\n\r\nThe runtime code for interruptable syscalls is still there, so that part of the native monitor implementation is still functional.  It\u0027s just that we don\u0027t do anything with that information and simply retry the syscall as if we got a spurious interruption.  I suppose one thing we can do is call out to managed to `WaitSubsystem.ThreadWaitInfo.CheckAndResetPendingInterrupt_NotLocked` (same as a Sleep0) and check whether there is a pending interrupt.  I\u0027m not sure if that kind of hack is worth it.  (Also I\u0027m not 100% confident that it won\u0027t mess up the WaitSubsystem invariants)",
                                           "updatedAt":  "2023-06-19T16:28:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5favJI",
                                           "createdAt":  "2023-06-21T13:32:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC-lqyw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "viktor-svub",
                                                                               "createdAt":  "2023-06-21T13:54:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Made a draft PR that piggybacks on the interruption logic in Mono and calls out to `thread.WaitInfo.CheckAndResetPendingInterrupt_TakeLock` (which takes `s_Lock` and then checks the wait subsystem interruption flag)\r\n\r\nit\u0027s not too bad - it won\u0027t get called unless the condvar wait syscall is actually interrupted for some reason (most commonly, I think, due to a GC) and calling out to managed is not unreasonable at that point.\r\n\r\nI will play around with actually replacing native Monitor logic with a managed Lock, too, but I think that\u0027s probably too big of a change for net8 at this point",
                                           "updatedAt":  "2023-06-21T13:32:55Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Mono: `Monitor.Enter()` is not interrupted by `Thread.Interrupt()`",
        "labels":  [
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88147",
        "createdAt":  "2023-06-28T15:40:29Z",
        "number":  88147,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-26T09:22:41Z",
        "body":  "We have `[UnsupportedOSPlatform(\"browser\")]` on many multi-threading APIs.\r\nWe also have \r\n- `System.Threading.Thread.WebAssembly.Threading\\ref` \r\n- `System.Threading.ThreadPool.WebAssembly.Threading\\ref`\r\n- `System.Diagnostics.Tracing.WebAssembly.PerfTracing\\ref`\r\nwhich is overlaying that for Browser runtime pack.\r\nThat confuses Roslyn analyzers.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcfKvLA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5gECGc",
                                           "createdAt":  "2023-06-28T15:40:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe have `[UnsupportedOSPlatform(\"browser\")]` on many multi-threading APIs.\r\nWe also have \r\n- `System.Threading.Thread.WebAssembly.Threading\\ref` \r\n- `System.Threading.ThreadPool.WebAssembly.Threading\\ref`\r\n- `System.Diagnostics.Tracing.WebAssembly.PerfTracing\\ref`\r\nwhich is overlaying that for Browser runtime pack.\r\nThat confuses Roslyn analyzers.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003epavelsavara, lambdageek\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Threading`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-28T15:40:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gEDUI",
                                           "createdAt":  "2023-06-28T15:43:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC_UXfw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2023-06-28T15:44:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "This used to work: if you added project references to the threaded ref assemblies, they would be picked up in preference to the single-threaded ones.   But there\u0027s maybe now some issue with the browser TFM? /cc @lewing \r\n",
                                           "updatedAt":  "2023-06-28T15:43:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gED30",
                                           "createdAt":  "2023-06-28T15:45:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "I guess an alternative is to always allow calls like `Thread.Start` at compile-time and only throw PNSE at runtime.  But that sucks for the majority of WASM projects since they won\u0027t be using threading\r\n",
                                           "updatedAt":  "2023-06-28T15:45:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gEFGq",
                                           "createdAt":  "2023-06-28T15:48:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "It would be great if the platform compat analyzer also could support some attribute that used feature flags as guards.  something like `[SupportedOSPlatform(\"browser\", FeatureFlag=\"System.Thread.IsThreadStartSupported\")]`. And then we could set the feature flag based on project settings.\r\n\r\nThat would also let us do things like build certain projects with SIMD or WASM-EH disabled and hide the corresponding intrinsics APIs.  Or maybe make some APIs unavailable on ios unless the interpreter is enabled, etc\r\n",
                                           "updatedAt":  "2023-06-28T15:50:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x8q8s",
                                           "createdAt":  "2024-01-26T09:22:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "@lewing @radekdoulik do you want to start working on RID ?",
                                           "updatedAt":  "2024-01-26T09:22:40Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[browser][MT] public API of threading, like new Thread vs PNSE",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90362",
        "createdAt":  "2023-08-11T01:29:57Z",
        "number":  90362,
        "author":  "srxqds",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-03T21:15:12Z",
        "body":  "  F:\\dotnet\\runtime\\src\\mono\\mono\\utils\\mono-threads-state-machine.c(430) : error C2220: the following warning is treated as an error\r\n  F:\\dotnet\\runtime\\src\\mono\\mono\\utils\\mono-threads-state-machine.c(249) : error C2220: the following warning is treated as an error\r\n  F:\\dotnet\\runtime\\src\\mono\\mono\\utils\\mono-threads-state-machine.c(375) : error C2220: the following warning is treated as an error\r\n  F:\\dotnet\\runtime\\src\\mono\\mono\\utils\\mono-threads-state-machine.c(249) : warning C4715: \u0027mono_threads_transition_detach\u0027: not all control paths return a value\r\n  F:\\dotnet\\runtime\\src\\mono\\mono\\utils\\mono-threads-state-machine.c(552) : error C2220: the following warning is treated as an error\r\n  F:\\dotnet\\runtime\\src\\mono\\mono\\utils\\mono-threads-state-machine.c(430) : warning C4715: \u0027mono_threads_transition_state_poll\u0027: not all control paths return a value\r\n  F:\\dotnet\\runtime\\src\\mono\\mono\\utils\\mono-threads-state-machine.c(602) : warning C4715: \u0027mono_threads_transition_request_pulse\u0027: not all control paths return a value\r\n  F:\\dotnet\\runtime\\src\\mono\\mono\\utils\\mono-threads-state-machine.c(375) : warning C4715: \u0027mono_threads_transition_peek_blocking_suspend_requested\u0027: not all control paths return a value\r\n  F:\\dotnet\\runtime\\src\\mono\\mono\\utils\\mono-threads-state-machine.c(552) : warning C4715: \u0027mono_threads_transition_request_resume\u0027: not all control paths return a value\r\n  F:\\dotnet\\runtime\\src\\mono\\mono\\utils\\mono-threads-state-machine.c(655) : warning C4715: \u0027mono_threads_transition_abort_async_suspend\u0027: not all control paths return a value\r\n  F:\\dotnet\\runtime\\src\\mono\\mono\\utils\\mono-threads-state-machine.c(761) : warning C4715: \u0027mono_threads_transition_do_blocking\u0027: not all control paths return a value\r\n  F:\\dotnet\\runtime\\src\\mono\\mono\\utils\\mono-threads-state-machine.c(809) : warning C4715: \u0027mono_threads_transition_done_blocking\u0027: not all control paths return a value\r\n  F:\\dotnet\\runtime\\src\\mono\\mono\\utils\\mono-threads-state-machine.c(709) : warning C4715: \u0027mono_threads_transition_finish_async_suspend\u0027: not all control paths return a value\r\n  F:\\dotnet\\runtime\\src\\mono\\mono\\utils\\mono-threads-state-machine.c(887) : warning C4715: \u0027mono_threads_transition_abort_blocking\u0027: not all control paths return a value",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZV1ryQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5j7xb8",
                                           "createdAt":  "2023-08-14T03:20:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "when i enable_checked_build_thread flag, it always hit assert, like mono_string_length\r\n```\r\nError: Assertion failure in thread 00000000000047FC due to: F:\\netease-gitlab\\dotnet\\runtime\\src\\mono\\mono\\metadata\\object-internals.h:1965: Expected GC Unsafe mode but was in STATE_BLOCKING state\r\nLast 2 state transitions: (most recent first)\r\n[DONE_BLOCKING] STATE_BLOCKING -\u003e RUNNING (0) 0 at:\r\n\tno backtrace available\r\n[DO_BLOCKING] RUNNING -\u003e STATE_BLOCKING (0) 0 at:\r\n\tno backtrace available\r\n```\r\n\r\nhttps://github.com/dotnet/runtime/blob/09af161453ffc7ef8ac9b7175167602f1de32313/src/mono/mono/metadata/object.c#L7900-L7903\r\n\r\nShould we replace `MONO_EXTERNAL_ONLY` with `MONO_EXTERNAL_ONLY_GC_UNSAFE` here?\r\n\r\n@lateralusX ,could you have time to toke look it?",
                                           "updatedAt":  "2023-08-14T03:23:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lEoT8",
                                           "createdAt":  "2023-08-28T13:34:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "\u003e when i enable_checked_build_thread flag, it always hit assert, like mono_string_length\r\n\u003e \r\n\u003e ```\r\n\u003e Error: Assertion failure in thread 00000000000047FC due to: F:\\netease-gitlab\\dotnet\\runtime\\src\\mono\\mono\\metadata\\object-internals.h:1965: Expected GC Unsafe mode but was in STATE_BLOCKING state\r\n\u003e Last 2 state transitions: (most recent first)\r\n\u003e [DONE_BLOCKING] STATE_BLOCKING -\u003e RUNNING (0) 0 at:\r\n\u003e \tno backtrace available\r\n\u003e [DO_BLOCKING] RUNNING -\u003e STATE_BLOCKING (0) 0 at:\r\n\u003e \tno backtrace available\r\n\u003e ```\r\n\u003e \r\n\u003e https://github.com/dotnet/runtime/blob/09af161453ffc7ef8ac9b7175167602f1de32313/src/mono/mono/metadata/object.c#L7900-L7903\r\n\u003e \r\n\u003e Should we replace `MONO_EXTERNAL_ONLY` with `MONO_EXTERNAL_ONLY_GC_UNSAFE` here?\r\n\u003e \r\n\u003e @lateralusX ,could you have time to toke look it?\r\n\r\nThere are several functions in `src\\native\\public\\mono\\metadata\\details\\object-functions.h` that doesn\u0027t do transition to GC unsafe that in turn will call internal functions that will require GC unsafe that will hit same assertion as above. Doing GC transitions is costly, especially for small functions like `mono_string_length`, `mono_string_chars`, so not sure if this is an optimization, assuming that caller should already been in GC unsafe mode when calling these methods or if it has been overlooked, @lambdageek do you know if we have taken a decision on some simple functions to put responsibility to transition to GC unsafe on caller before calling these functions, doing a GC unsafe transition as part of `mono_string_length` seems like a big overhead.",
                                           "updatedAt":  "2023-08-28T13:36:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lEtdG",
                                           "createdAt":  "2023-08-28T13:47:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "I will take a look at the warnings next time I\u0027m around that code, we don\u0027t build the runtime in checked mode on all platforms on CI, so that is why these warnings (treated as errors) have gone undetected.",
                                           "updatedAt":  "2023-08-28T13:47:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lIeog",
                                           "createdAt":  "2023-08-29T03:42:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "\u003e @lambdageek do you know if we have taken a decision on some simple functions to put responsibility to transition to GC unsafe on caller before calling these functions, doing a GC unsafe transition as part of mono_string_length seems like a big overhead.\r\n\r\ncould you take time to check this? how to fix it, remove the assert or add gc transition @lambdageek \r\n",
                                           "updatedAt":  "2023-08-29T03:42:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lJ7_4",
                                           "createdAt":  "2023-08-29T09:39:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "and when I enabled build check, we hit `assert_gc_safe_mode`, the callstack show blew:\r\n```\r\n \tcoreclr.dll!assert_gc_safe_mode(const char * file, int lineno) 行 379\tC\r\n \tcoreclr.dll!win32_wait_for_single_object_ex_interrupt_checked(_MonoThreadInfo * info, void * handle, unsigned long timeout, int alertable) 行 126\tC\r\n \tcoreclr.dll!win32_wait_for_single_object_ex(void * handle, unsigned long timeout, int alertable, int cooperative) 行 143\tC\r\n \tcoreclr.dll!mono_win32_wait_for_single_object_ex(void * handle, unsigned long timeout, int alertable) 行 155\tC\r\n \tcoreclr.dll!mono_os_sem_timedwait(void * * sem, unsigned int timeout_ms, MonoSemFlags flags) 行 19\tC\r\n \tcoreclr.dll!mono_os_sem_wait(void * * sem, MonoSemFlags flags) 行 326\tC\r\n \tcoreclr.dll!mono_thread_info_wait_for_resume(_MonoThreadInfo * info) 行 238\tC\r\n \tcoreclr.dll!mono_threads_state_poll_with_info(_MonoThreadInfo * info) 行 152\tC\r\n \tcoreclr.dll!mono_threads_enter_gc_safe_region_unbalanced_with_info(_MonoThreadInfo * info, _MonoStackData * stackdata) 行 327\tC\r\n \tcoreclr.dll!mono_threads_enter_gc_safe_region_unbalanced_internal(_MonoStackData * stackdata) 行 289\tC\r\n \tcoreclr.dll!mono_threads_exit_gc_unsafe_region_unbalanced_internal(void * cookie, _MonoStackData * stackdata) 行 562\tC\r\n \tcoreclr.dll!mono_threads_exit_gc_unsafe_region_internal(void * cookie, _MonoStackData * stackdata) 行 542\tC\r\n \tcoreclr.dll!mono_object_get_class(_MonoObject * obj) 行 6521\tC\r\n \tUE4Editor-UnrealMonoRuntime.dll!MonoVariableDump(_MonoType * t, void * addr, int indent, void * user_data) 行 426\tC++\r\n \tUE4Editor-UnrealMonoRuntime.dll!MonoVariableDump(_MonoType * t, void * addr, int indent, void * user_data) 行 476\tC++\r\n \tUE4Editor-UnrealMonoRuntime.dll!MonoVariableDump(_MonoType * t, void * addr, int indent, void * user_data) 行 440\tC++\r\n \tUE4Editor-UnrealMonoRuntime.dll!MonoVariableDump(_MonoType * t, void * addr, int indent, void * user_data) 行 476\tC++\r\n \tUE4Editor-UnrealMonoRuntime.dll!MonoVariableDump(_MonoType * t, void * addr, int indent, void * user_data) 行 440\tC++\r\n \tUE4Editor-UnrealMonoRuntime.dll!MonoVariableDump(_MonoType * t, void * addr, int indent, void * user_data) 行 476\tC++\r\n \tUE4Editor-UnrealMonoRuntime.dll!MonoVariableDump(_MonoType * t, void * addr, int indent, void * user_data) 行 440\tC++\r\n \tUE4Editor-UnrealMonoRuntime.dll!MonoVariableDump(_MonoType * t, void * addr, int indent, void * user_data) 行 476\tC++\r\n \tUE4Editor-UnrealMonoRuntime.dll!MonoStackTraceWalkWithArgument(void * InFrame, void * ctx, void * UserData) 行 678\tC++\r\n \tcoreclr.dll!mono_invoke_walk_excepction_stack_hook(MonoStackFrameInfo * frame, void * ctx) 行 134\tC\r\n\u003e\tcoreclr.dll!mono_handle_exception_internal(MonoContext * ctx, _MonoObject * obj, int resume, _MonoJitInfo * * out_ji) 行 2488\tC\r\n \tcoreclr.dll!mono_handle_exception(MonoContext * ctx, void * void_obj) 行 2831\tC\r\n\r\n```\r\n\r\nand the thread transitions log:\r\n```\r\n[ABORT_BLOCKING][00000000000019A4] STATE_BLOCKING . -\u003e RUNNING . (0 -\u003e 0) mono_object_get_class\r\n[DO_BLOCKING][00000000000019A4] RUNNING . -\u003e STATE_BLOCKING . (0 -\u003e 0) \r\n[ABORT_BLOCKING][00000000000019A4] STATE_BLOCKING . -\u003e RUNNING . (0 -\u003e 0) mono_class_is_valuetype\r\n[DO_BLOCKING][000000000000B46C] RUNNING . -\u003e STATE_BLOCKING . (0 -\u003e 0) \r\n[DO_BLOCKING][00000000000019A4] RUNNING . -\u003e STATE_BLOCKING . (0 -\u003e 0) \r\n[DONE_BLOCKING][000000000000B46C] STATE_BLOCKING . -\u003e RUNNING . (0 -\u003e 0) mono_thread_info_suspend_lock_with_info\r\n[ABORT_BLOCKING][00000000000019A4] STATE_BLOCKING . -\u003e RUNNING . (0 -\u003e 0) mono_class_get_fields\r\n------ BEGIN GLOBAL OP sp 0 rp 0 ap 0 wd 0 po 0 (sp + rp + ap == wd) (wd == po)\r\n[DO_BLOCKING][00000000000019A4] RUNNING . -\u003e STATE_BLOCKING . (0 -\u003e 0) \r\n[STW-BEGIN][000000000000B46C] *** BEGIN SUSPEND *** \r\n[ABORT_BLOCKING][00000000000019A4] STATE_BLOCKING . -\u003e RUNNING . (0 -\u003e 0) mono_field_get_value\r\n[SUSPEND_INIT_REQUESTED][0000000000000A54] STATE_BLOCKING . -\u003e STATE_BLOCKING_SUSPEND_REQUESTED . (0 -\u003e 1) \r\n[DO_BLOCKING][00000000000019A4] RUNNING . -\u003e STATE_BLOCKING . (0 -\u003e 0) \r\n[STW-BEGIN-SUSPEND-0] SUSPEND thread 0000000000000A54 skip false\r\n[ABORT_BLOCKING][00000000000019A4] STATE_BLOCKING . -\u003e RUNNING . (0 -\u003e 0) mono_type_is_byref\r\n[SUSPEND_INIT_REQUESTED][0000000000001914] STATE_BLOCKING . -\u003e STATE_BLOCKING_SUSPEND_REQUESTED . (0 -\u003e 1) \r\n[DO_BLOCKING][00000000000019A4] RUNNING . -\u003e STATE_BLOCKING . (0 -\u003e 0) \r\n[STW-BEGIN-SUSPEND-0] SUSPEND thread 0000000000001914 skip false\r\n[ABORT_BLOCKING][00000000000019A4] STATE_BLOCKING . -\u003e RUNNING . (0 -\u003e 0) mono_object_get_class\r\n[SUSPEND_INIT_REQUESTED][00000000000019A4] RUNNING . -\u003e ASYNC_SUSPEND_REQUESTED . (0 -\u003e 1) \r\n[DO_BLOCKING][00000000000019A4] ASYNC_SUSPEND_REQUESTED . -\u003e ASYNC_SUSPEND_REQUESTED . (1 -\u003e 1) \r\nadded 00000000000019A4 to pending suspend\r\nFINISH SELF SUSPEND OF 00000000000019A4\r\n[STW-BEGIN-SUSPEND-0] SUSPEND thread 00000000000019A4 skip false\r\n[STATE_POLL][00000000000019A4] ASYNC_SUSPEND_REQUESTED . -\u003e SELF_SUSPENDED . (1 -\u003e 1) \r\n[SUSPEND_INIT_REQUESTED][00000000000029A8] STATE_BLOCKING . -\u003e STATE_BLOCKING_SUSPEND_REQUESTED . (0 -\u003e 1) \r\n[INITIATOR-NOTIFY-SUSPEND] 00000000000019A4\r\n[STW-BEGIN-SUSPEND-0] SUSPEND thread 00000000000029A8 skip false\r\n**WAIT self-resume 00000000000019A4\r\n[SUSPEND_INIT_REQUESTED][0000000000003474] STATE_BLOCKING . -\u003e STATE_BLOCKING_SUSPEND_REQUESTED . (0 -\u003e 1) \r\n```\r\n\r\ncan you tell me what cause this problem?",
                                           "updatedAt":  "2023-08-29T09:42:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lKAr8",
                                           "createdAt":  "2023-08-29T09:52:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "I have tried to dump the stack variable when exception occured.\r\nthe `mono_invoke_walk_excepction_stack_hook` code show blew:\r\n```c\r\nvoid\r\nmono_invoke_walk_excepction_stack_hook (MonoStackFrameInfo *frame, void *ctx)\r\n{\r\n\tif (walk_exception_stack_hook) {\r\n\t\tMONO_ENTER_GC_SAFE;\r\n\t\twalk_exception_stack_hook (frame, ctx, walk_exception_stack_hook_data);\r\n\t\tMONO_EXIT_GC_SAFE;\r\n\t}\r\n}\r\n```\r\nand call in  `mono_handle_exception_internal` after get `unwinder_unwind_frame`:\r\n```\r\nunwind_res = unwinder_unwind_frame (\u0026unwinder, jit_tls, NULL, ctx, \u0026new_ctx, NULL, \u0026lmf, NULL, \u0026frame);\r\n\t\t\tif (!unwind_res) {\r\n\t\t\t\t*(mono_get_lmf_addr ()) = lmf;\r\n\r\n\t\t\t\tjit_tls-\u003eabort_func (obj);\r\n\t\t\t\tg_assert_not_reached ();\r\n\t\t\t}\r\n\t\t\tmono_invoke_walk_excepction_stack_hook (\u0026frame, ctx);\r\n\t\t\tin_interp = FALSE;\r\n``` ",
                                           "updatedAt":  "2023-08-29T09:52:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lKQzG",
                                           "createdAt":  "2023-08-29T10:38:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lateralusX",
                                           "body":  "\u003e and when I enabled build check, we hit `assert_gc_safe_mode`, the callstack show blew:\r\n\u003e \r\n\u003e ```\r\n\u003e  \tcoreclr.dll!assert_gc_safe_mode(const char * file, int lineno) 行 379\tC\r\n\u003e  \tcoreclr.dll!win32_wait_for_single_object_ex_interrupt_checked(_MonoThreadInfo * info, void * handle, unsigned long timeout, int alertable) 行 126\tC\r\n\u003e  \tcoreclr.dll!win32_wait_for_single_object_ex(void * handle, unsigned long timeout, int alertable, int cooperative) 行 143\tC\r\n\u003e  \tcoreclr.dll!mono_win32_wait_for_single_object_ex(void * handle, unsigned long timeout, int alertable) 行 155\tC\r\n\u003e  \tcoreclr.dll!mono_os_sem_timedwait(void * * sem, unsigned int timeout_ms, MonoSemFlags flags) 行 19\tC\r\n\u003e  \tcoreclr.dll!mono_os_sem_wait(void * * sem, MonoSemFlags flags) 行 326\tC\r\n\u003e  \tcoreclr.dll!mono_thread_info_wait_for_resume(_MonoThreadInfo * info) 行 238\tC\r\n\u003e  \tcoreclr.dll!mono_threads_state_poll_with_info(_MonoThreadInfo * info) 行 152\tC\r\n\u003e  \tcoreclr.dll!mono_threads_enter_gc_safe_region_unbalanced_with_info(_MonoThreadInfo * info, _MonoStackData * stackdata) 行 327\tC\r\n\u003e  \tcoreclr.dll!mono_threads_enter_gc_safe_region_unbalanced_internal(_MonoStackData * stackdata) 行 289\tC\r\n\u003e  \tcoreclr.dll!mono_threads_exit_gc_unsafe_region_unbalanced_internal(void * cookie, _MonoStackData * stackdata) 行 562\tC\r\n\u003e  \tcoreclr.dll!mono_threads_exit_gc_unsafe_region_internal(void * cookie, _MonoStackData * stackdata) 行 542\tC\r\n\u003e  \tcoreclr.dll!mono_object_get_class(_MonoObject * obj) 行 6521\tC\r\n\u003e  \tUE4Editor-UnrealMonoRuntime.dll!MonoVariableDump(_MonoType * t, void * addr, int indent, void * user_data) 行 426\tC++\r\n\u003e  \tUE4Editor-UnrealMonoRuntime.dll!MonoVariableDump(_MonoType * t, void * addr, int indent, void * user_data) 行 476\tC++\r\n\u003e  \tUE4Editor-UnrealMonoRuntime.dll!MonoVariableDump(_MonoType * t, void * addr, int indent, void * user_data) 行 440\tC++\r\n\u003e  \tUE4Editor-UnrealMonoRuntime.dll!MonoVariableDump(_MonoType * t, void * addr, int indent, void * user_data) 行 476\tC++\r\n\u003e  \tUE4Editor-UnrealMonoRuntime.dll!MonoVariableDump(_MonoType * t, void * addr, int indent, void * user_data) 行 440\tC++\r\n\u003e  \tUE4Editor-UnrealMonoRuntime.dll!MonoVariableDump(_MonoType * t, void * addr, int indent, void * user_data) 行 476\tC++\r\n\u003e  \tUE4Editor-UnrealMonoRuntime.dll!MonoVariableDump(_MonoType * t, void * addr, int indent, void * user_data) 行 440\tC++\r\n\u003e  \tUE4Editor-UnrealMonoRuntime.dll!MonoVariableDump(_MonoType * t, void * addr, int indent, void * user_data) 行 476\tC++\r\n\u003e  \tUE4Editor-UnrealMonoRuntime.dll!MonoStackTraceWalkWithArgument(void * InFrame, void * ctx, void * UserData) 行 678\tC++\r\n\u003e  \tcoreclr.dll!mono_invoke_walk_excepction_stack_hook(MonoStackFrameInfo * frame, void * ctx) 行 134\tC\r\n\u003e \u003e\tcoreclr.dll!mono_handle_exception_internal(MonoContext * ctx, _MonoObject * obj, int resume, _MonoJitInfo * * out_ji) 行 2488\tC\r\n\u003e  \tcoreclr.dll!mono_handle_exception(MonoContext * ctx, void * void_obj) 行 2831\tC\r\n\u003e ```\r\n\u003e \r\n\u003e and the thread transitions log:\r\n\u003e \r\n\u003e ```\r\n\u003e [ABORT_BLOCKING][00000000000019A4] STATE_BLOCKING . -\u003e RUNNING . (0 -\u003e 0) mono_object_get_class\r\n\u003e [DO_BLOCKING][00000000000019A4] RUNNING . -\u003e STATE_BLOCKING . (0 -\u003e 0) \r\n\u003e [ABORT_BLOCKING][00000000000019A4] STATE_BLOCKING . -\u003e RUNNING . (0 -\u003e 0) mono_class_is_valuetype\r\n\u003e [DO_BLOCKING][000000000000B46C] RUNNING . -\u003e STATE_BLOCKING . (0 -\u003e 0) \r\n\u003e [DO_BLOCKING][00000000000019A4] RUNNING . -\u003e STATE_BLOCKING . (0 -\u003e 0) \r\n\u003e [DONE_BLOCKING][000000000000B46C] STATE_BLOCKING . -\u003e RUNNING . (0 -\u003e 0) mono_thread_info_suspend_lock_with_info\r\n\u003e [ABORT_BLOCKING][00000000000019A4] STATE_BLOCKING . -\u003e RUNNING . (0 -\u003e 0) mono_class_get_fields\r\n\u003e ------ BEGIN GLOBAL OP sp 0 rp 0 ap 0 wd 0 po 0 (sp + rp + ap == wd) (wd == po)\r\n\u003e [DO_BLOCKING][00000000000019A4] RUNNING . -\u003e STATE_BLOCKING . (0 -\u003e 0) \r\n\u003e [STW-BEGIN][000000000000B46C] *** BEGIN SUSPEND *** \r\n\u003e [ABORT_BLOCKING][00000000000019A4] STATE_BLOCKING . -\u003e RUNNING . (0 -\u003e 0) mono_field_get_value\r\n\u003e [SUSPEND_INIT_REQUESTED][0000000000000A54] STATE_BLOCKING . -\u003e STATE_BLOCKING_SUSPEND_REQUESTED . (0 -\u003e 1) \r\n\u003e [DO_BLOCKING][00000000000019A4] RUNNING . -\u003e STATE_BLOCKING . (0 -\u003e 0) \r\n\u003e [STW-BEGIN-SUSPEND-0] SUSPEND thread 0000000000000A54 skip false\r\n\u003e [ABORT_BLOCKING][00000000000019A4] STATE_BLOCKING . -\u003e RUNNING . (0 -\u003e 0) mono_type_is_byref\r\n\u003e [SUSPEND_INIT_REQUESTED][0000000000001914] STATE_BLOCKING . -\u003e STATE_BLOCKING_SUSPEND_REQUESTED . (0 -\u003e 1) \r\n\u003e [DO_BLOCKING][00000000000019A4] RUNNING . -\u003e STATE_BLOCKING . (0 -\u003e 0) \r\n\u003e [STW-BEGIN-SUSPEND-0] SUSPEND thread 0000000000001914 skip false\r\n\u003e [ABORT_BLOCKING][00000000000019A4] STATE_BLOCKING . -\u003e RUNNING . (0 -\u003e 0) mono_object_get_class\r\n\u003e [SUSPEND_INIT_REQUESTED][00000000000019A4] RUNNING . -\u003e ASYNC_SUSPEND_REQUESTED . (0 -\u003e 1) \r\n\u003e [DO_BLOCKING][00000000000019A4] ASYNC_SUSPEND_REQUESTED . -\u003e ASYNC_SUSPEND_REQUESTED . (1 -\u003e 1) \r\n\u003e added 00000000000019A4 to pending suspend\r\n\u003e FINISH SELF SUSPEND OF 00000000000019A4\r\n\u003e [STW-BEGIN-SUSPEND-0] SUSPEND thread 00000000000019A4 skip false\r\n\u003e [STATE_POLL][00000000000019A4] ASYNC_SUSPEND_REQUESTED . -\u003e SELF_SUSPENDED . (1 -\u003e 1) \r\n\u003e [SUSPEND_INIT_REQUESTED][00000000000029A8] STATE_BLOCKING . -\u003e STATE_BLOCKING_SUSPEND_REQUESTED . (0 -\u003e 1) \r\n\u003e [INITIATOR-NOTIFY-SUSPEND] 00000000000019A4\r\n\u003e [STW-BEGIN-SUSPEND-0] SUSPEND thread 00000000000029A8 skip false\r\n\u003e **WAIT self-resume 00000000000019A4\r\n\u003e [SUSPEND_INIT_REQUESTED][0000000000003474] STATE_BLOCKING . -\u003e STATE_BLOCKING_SUSPEND_REQUESTED . (0 -\u003e 1) \r\n\u003e ```\r\n\u003e \r\n\u003e can you tell me what cause this problem?\r\n\r\nI believe that happens since win32_wait_for_single_object_ex can be called with a coop flag and depending if we are are calling that function in \"coop\" mode we will transition to GC safe before calling win32_wait_for_single_object_ex_interrupt_checked, but since that function is called from both code paths and anticipate that we have entered GC safe, that will trigger assert. win32_wait_for_single_object_ex is a low level PAL function, that\u0027s why it has an option to call WaitForSingleObjectEx without always doing GC SAFE, since it might be called from code already in GC safe mode, or like in this case, called from code that is in the process of entering GC safe mode.\r\n\r\nFix is probably something along these lines in runtime\\src\\mono\\mono\\utils\\mono-os-wait-win32.c (changed from win32_wait_for_single_object_ex_interrupt_checked to WaitForSingleObjectEx in case cooperative is FALSE).\r\n\r\n```\r\nstatic DWORD\r\nwin32_wait_for_single_object_ex (HANDLE handle, DWORD timeout, BOOL alertable, BOOL cooperative)\r\n{\r\n\tDWORD result = WAIT_FAILED;\r\n\tMonoThreadInfo * const info = alertable ? mono_thread_info_current_unchecked () : NULL;\r\n\r\n\tWIN32_ENTER_ALERTABLE_WAIT (info);\r\n\r\n\tif (cooperative) {\r\n\t\tMONO_ENTER_GC_SAFE;\r\n\t\tresult = win32_wait_for_single_object_ex_interrupt_checked (info, handle, timeout, alertable);\r\n\t\tMONO_EXIT_GC_SAFE;\r\n\t} else {\r\n\t\tresult = WaitForSingleObjectEx (handle, timeout, alertable);\r\n\t}\r\n\r\n\tWIN32_LEAVE_ALERTABLE_WAIT (info);\r\n\r\n\treturn result;\r\n}\r\n```",
                                           "updatedAt":  "2023-08-29T10:38:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lQsb-",
                                           "createdAt":  "2023-08-30T10:06:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "ok, thanks\r\nanother quesion hit on android:\r\n```\r\n[2023.08.30-10.03.23:727][121]MonoVM: Error: Assertion failure in thread 0x7aac4fbcb0 due to: Received cookie 0x7aafe61800 but expected 0x0\r\n\r\nLast 2 state transitions: (most recent first)\r\n[ABORT_BLOCKING] RUNNING -\u003e RUNNING (0) 0 at:\r\n\tno backtrace available\r\n[ABORT_BLOCKING] RUNNING -\u003e RUNNING (0) 0 at:\r\n\tno backtrace available\r\n```\r\n\r\nthe code from:\r\n```\r\nstatic void\r\ncoop_tls_pop (gpointer received_cookie)\r\n{\r\n\tGArray *stack;\r\n\tgpointer expected_cookie;\r\n\r\n\tstack = (GArray*)mono_native_tls_get_value (coop_reset_count_stack_key);\r\n\tif (!stack || 0 == stack-\u003elen)\r\n\t\tmono_fatal_with_history (\"Received cookie %p but found no stack at all\\n\", received_cookie);\r\n\r\n\texpected_cookie = g_array_index (stack, gpointer, stack-\u003elen - 1);\r\n\tstack-\u003elen --;\r\n\r\n\tif (0 == stack-\u003elen) {\r\n\t\tg_array_free (stack,TRUE);\r\n\t\tmono_native_tls_set_value (coop_reset_count_stack_key, NULL);\r\n\t}\r\n\r\n\tif (expected_cookie != received_cookie)\r\n\t\tmono_fatal_with_history (\"Received cookie %p but expected %p\\n\", received_cookie, expected_cookie);\r\n}\r\n```\r\n\r\ni have print the push and pop operator:\r\n```\r\ncoop tls push cookie: 0x0 stack len: 3 at thread: 0x7a3736bcb0\r\ncoop tls pop cookie: 0x0 stack len: 4 at thread: 0x7a3736bcb0\r\n[ABORT_BLOCKING][0x7a3736bcb0] RUNNING . -\u003e RUNNING . (0 -\u003e 0) (null)\r\ncoop tls push cookie: 0x0 stack len: 3 at thread: 0x7a3736bcb0\r\ncoop tls pop cookie: 0x0 stack len: 4 at thread: 0x7a3736bcb0\r\ncoop tls pop cookie: 0x0 stack len: 3 at thread: 0x7a3736bcb0\r\ncoop tls pop cookie: 0x7a4d1f0c00 stack len: 2 at thread: 0x7a3736bcb0\r\n```\r\n\r\nhow can I found what problem is it?",
                                           "updatedAt":  "2023-08-31T03:24:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lXWvJ",
                                           "createdAt":  "2023-08-31T08:46:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "hi，could you help me? @lateralusX \r\n\r\nI found some coop tls push 0x0 not pop, show bellow:\r\n```\r\ncoop tls push cookie: 0x7a2a9f9000 stack len: 0 at thread: 0x7a5d1bbcb0\r\ncoop tls push cookie: 0x0 stack len: 1 at thread: 0x7a5d1bbcb0 // this line not pop bofore 0x7a2a9f9000\r\n\r\ncoop tls push cookie: 0x0 stack len: 2 at thread: 0x7a5d1bbcb0\r\ncoop tls pop cookie: 0x0 stack len: 3 at thread: 0x7a5d1bbcb0\r\ncoop tls pop cookie: 0x7a2a9f9000 stack len: 2 at thread: 0x7a5d1bbcb0\r\n```\r\n\r\nmaybe it occured when gc \r\n\r\nIt is diffcult to find the problem due to there are many push/pop operator.",
                                           "updatedAt":  "2023-09-01T04:29:03Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[mono] enable_checked_build_thread trigger warning as error",
        "labels":  [
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91716",
        "createdAt":  "2023-09-07T08:43:33Z",
        "number":  91716,
        "author":  "srxqds",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-26T16:12:04Z",
        "body":  "### Description\r\n\r\nmono_thread_attach repeat hit assert in debugger-agent https://github.com/dotnet/runtime/blob/54d9fa8bae65c774058eb4f278888ea4b18f80b3/src/mono/mono/component/debugger-agent.c#L3904\r\n\r\n### Reproduction Steps\r\n\r\n```c\r\nvoid TestMonoThreadProc()\r\n{\r\n\r\n\tMonoThread* attachThread = mono_thread_attach(mono_domain_get());\r\n\tScripting::InvokeClassMethod(\"UnrealEngine.Game\", \"UnrealEngine.Game.Tests.Runtime.MonoThreadTests\", \"TestEntry\", nullptr, 0);\r\n\tmono_thread_detach(attachThread);\r\n        // attach again will hit assert\r\n\tattachThread = mono_thread_attach(mono_domain_get());\r\n\tScripting::InvokeClassMethod(\"UnrealEngine.Game\", \"UnrealEngine.Game.Tests.Runtime.MonoThreadTests\", \"TestEntry\", nullptr, 0);\r\n\tmono_thread_detach(attachThread);\r\n\r\n}\r\n\r\nvoid TestMonoThreadAttach()\r\n{\r\n\tthread th2(TestMonoThreadProc);\r\n\t\r\n\tth2.join(); \r\n}\r\n```\r\n\r\n### Expected behavior\r\n\r\nwork correctly\r\n\r\n### Actual behavior\r\n\r\ncrash\r\n\r\n### Regression?\r\n\r\nno, i think the mono always have this problem.\r\n\r\n### Known Workarounds\r\n\r\nno\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_\r\n\r\nstack trace\r\n```\r\ncoreclr.dll!thread_startup(_MonoProfiler * prof, unsigned __int64 tid) 行 3880\r\n\t在 F:\\netease-gitlab\\dotnet\\runtime\\src\\mono\\mono\\component\\debugger-agent.c(3880)\r\ncoreclr.dll!mono_profiler_raise_thread_started(unsigned __int64 tid) 行 102\r\n\t在 F:\\netease-gitlab\\dotnet\\runtime\\src\\native\\public\\mono\\metadata\\profiler-events.h(102)\r\ncoreclr.dll!fire_attach_profiler_events(unsigned long tid) 行 1093\r\n\t在 F:\\netease-gitlab\\dotnet\\runtime\\src\\mono\\mono\\metadata\\threads.c(1093)\r\ncoreclr.dll!mono_thread_internal_attach(_MonoDomain * domain) 行 1607\r\n\t在 F:\\netease-gitlab\\dotnet\\runtime\\src\\mono\\mono\\metadata\\threads.c(1607)\r\ncoreclr.dll!mono_thread_attach_external_native_thread(_MonoDomain * domain, int background) 行 1508\r\n\t在 F:\\netease-gitlab\\dotnet\\runtime\\src\\mono\\mono\\metadata\\threads.c(1508)\r\ncoreclr.dll!mono_thread_attach(_MonoDomain * domain) 行 1494\r\n\t在 F:\\netease-gitlab\\dotnet\\runtime\\src\\mono\\mono\\metadata\\threads.c(1494)\r\nUE4Editor-MonoSample.dll!TestMonoThreadProc() 行 13\r\n\t在 D:\\UnrealMono\\uedemo4.27\\Plugins\\MonoSample\\Source\\MonoSample\\Tests\\Runtime\\MonoThreadTest.cpp(13)\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZejzaA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5l6PNo",
                                           "createdAt":  "2023-09-07T09:00:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "can i fix replace with below code:\r\n```\r\ntls = (DebuggerTlsData *)mono_native_tls_get_value (debugger_tls_id);\r\n\t// g_assert (!tls);\r\n\t// FIXME: Free this somewhere\r\n\tif (!tls)\r\n        {\r\n\t\ttls = g_new0 (DebuggerTlsData, 1);\r\n               mono_native_tls_set_value (debugger_tls_id, tls);\r\n       }\r\n```",
                                           "updatedAt":  "2023-09-07T09:17:48Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[mono] mono_thread_attach repeat hit assert",
        "labels":  [
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91747",
        "createdAt":  "2023-09-07T17:01:24Z",
        "number":  91747,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-03T21:22:17Z",
        "body":  "On C11 implement them in terms of [`atomic_compare_exchange_weak`](https://en.cppreference.com/w/c/atomic/atomic_compare_exchange), on legacy intrinsics just implement them as the strong version.\r\n\r\nReplace uses of the strong version by the weak one in places where the runtime has non-destructive CAS loops.\r\n\r\nSee https://github.com/dotnet/runtime/pull/91489#discussion_r1317757182\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[mono] Add mono_atomic_cas_weak_TYPE functions",
        "labels":  [
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92663",
        "createdAt":  "2023-09-26T20:16:13Z",
        "number":  92663,
        "author":  "lambdageek",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-11-01T17:54:39Z",
        "body":  "This is a modified version of the [NativeAOT BasicThreading smoke test](https://github.com/dotnet/runtime/blob/954e0b898e39ccfaf557429a430f4f05aca7362d/src/tests/nativeaot/SmokeTests/UnitTests/BasicThreading.cs).\r\n\r\nThe test uses a `Resurrector` class to create a `Thread` object whose internals have been disposed.\r\n\r\nWhen the `IsBackground` property of the resurrected thread object is accessed, the runtime asserts:\r\n\r\n```\r\n* Assertion at /Users/alklig/work/dotnet-runtime/runtime/src/mono/mono/metadata/threads.c:517, condition `thread-\u003elonglived-\u003esynch_cs\u0027 not met\r\n```\r\n\r\n\r\nRepro: compile and run the following program (can be a mono sample in src/mono/samples/HelloWorld).  You man need to add `RunTest(ResurrectorIsBackround)` a few more times to `Main` -  once wasn\u0027t enough for me, but 2 calls makes the second one crash:\r\n\r\n```csharp\r\n// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\nusing System;\r\nusing System.Threading;\r\nusing System.Runtime.CompilerServices;\r\n\r\nnamespace HelloWorld\r\n{\r\n\r\n    /// \u003csummary\u003e\r\n    /// Creates resurrected Thread objects.\r\n    /// \u003c/summary\u003e\r\n    class Resurrector\r\n    {\r\n        static Thread s_unstartedResurrected;\r\n        static Thread s_stoppedResurrected;\r\n\r\n        bool _unstarted;\r\n        Thread _thread = new Thread(() =\u003e { });\r\n\r\n        Resurrector(bool unstarted)\r\n        {\r\n            _unstarted = unstarted;\r\n            if (!unstarted)\r\n            {\r\n                _thread.Start();\r\n                _thread.Join();\r\n            }\r\n        }\r\n\r\n        ~Resurrector()\r\n        {\r\n            if (_unstarted \u0026\u0026 (s_unstartedResurrected == null))\r\n            {\r\n                s_unstartedResurrected = _thread;\r\n            }\r\n            else if(!_unstarted \u0026\u0026 (s_stoppedResurrected == null))\r\n            {\r\n                s_stoppedResurrected = _thread;\r\n            }\r\n        }\r\n\r\n        [MethodImpl(MethodImplOptions.NoInlining)]\r\n        static void CreateInstance(bool unstarted)\r\n        {\r\n            GC.KeepAlive(new Resurrector(unstarted));\r\n        }\r\n\r\n        [MethodImpl(MethodImplOptions.NoInlining)]\r\n        private static void StackHide(Action a, int depth)\r\n        {\r\n            if (depth \u003e 0)\r\n            {\r\n                StackHide(a, depth - 1);\r\n            } else {\r\n                a();\r\n            }\r\n        }\r\n\r\n        static Thread CreateResurrectedThread(ref Thread trap, bool unstarted)\r\n        {\r\n            trap = null;\r\n\r\n            while (trap == null)\r\n            {\r\n                // Call twice to override the address of the first allocation on the stack (for conservative GC)\r\n                StackHide(() =\u003e CreateInstance(unstarted), 50);\r\n                StackHide(() =\u003e CreateInstance(unstarted), 50);\r\n\r\n                GC.Collect();\r\n                GC.WaitForPendingFinalizers();\r\n                GC.Collect();\r\n                GC.WaitForPendingFinalizers();\r\n\r\n            }\r\n\r\n            // We would like to get a Thread object with its internal SafeHandle member disposed.\r\n            // The current implementation of SafeHandle postpones disposing until the next garbage\r\n            // collection. For this reason we do a couple more collections.\r\n            for (int i = 0; i \u003c 3; i++)\r\n            {\r\n                GC.Collect();\r\n                GC.WaitForPendingFinalizers();\r\n            }\r\n\r\n            return trap;\r\n        }\r\n\r\n        public static Thread CreateUnstartedResurrected()\r\n        {\r\n            return CreateResurrectedThread(ref s_unstartedResurrected, unstarted: true);\r\n        }\r\n\r\n        public static Thread CreateStoppedResurrected()\r\n        {\r\n            return CreateResurrectedThread(ref s_stoppedResurrected, unstarted: false);\r\n        }\r\n    }\r\n\r\n    internal class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n            bool isMono = typeof(object).Assembly.GetType(\"Mono.RuntimeStructs\") != null;\r\n            Console.WriteLine($\"Hello World {(isMono ? \"from Mono!\" : \"from CoreCLR!\")}\");\r\n            Console.WriteLine(typeof(object).Assembly.FullName);\r\n            Console.WriteLine(System.Reflection.Assembly.GetEntryAssembly ());\r\n            Console.WriteLine(System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription);\r\n            RunTest(ResurrectorIsBackground);\r\n            RunTest(ResurrectorIsBackground);\r\n            // RunTest(ResurrectorStart);\r\n        }\r\n\r\n        static int ResurrectorIsBackground()\r\n        {\r\n            Thread t = Resurrector.CreateUnstartedResurrected();\r\n            Console.WriteLine (t.IsBackground); // Note: CoreCLR throws here, NativeAOT returns false, mono returns false\r\n            t = Resurrector.CreateStoppedResurrected();\r\n            ExpectThrows (() =\u003e {\r\n                Console.WriteLine (t.IsBackground); // this throws on all runtimes\r\n            });\r\n            return 100;\r\n        }\r\n\r\n#if false\r\n        static int ResurrectorStart()\r\n        {\r\n            Thread t = Resurrector.CreateUnstartedResurrected();\r\n            Console.WriteLine (\"Trying to start an unstarted thread\");\r\n            t.Start();\r\n            Console.WriteLine (\"Started an unstarted thread\");\r\n            t = Resurrector.CreateStoppedResurrected();\r\n            ExpectThrows (() =\u003e {\r\n                Console.WriteLine (\"trying to start a stopped thread\");\r\n                t.Start();\r\n            });\r\n            return 100;\r\n        }\r\n#endif\r\n        \r\n        static bool RunTest(Func\u003cint\u003e t, [CallerArgumentExpression(\"t\")] string name = null)\r\n        {\r\n            Console.WriteLine($\"===== Running test {name} =====\");\r\n            bool success = true;\r\n            try\r\n            {\r\n                success = t() == 100;\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine(ex.ToString());\r\n                success = false;\r\n            }\r\n            Console.WriteLine($\"===== Test {name} {(success ? \"succeeded\" : \"failed\")} =====\");\r\n            return success;\r\n        }\r\n\r\n        private static void ExpectThrows (Action a)\r\n        {\r\n            bool threw = false;\r\n            try {\r\n                a();\r\n            } catch (ThreadStateException exn) {\r\n                Console.WriteLine ($\"correctly caught {exn}\");\r\n                threw = true;\r\n            }\r\n            finally {\r\n                if (!threw)\r\n                    throw new Exception (\"Expected test to throw, but it didn\u0027t\");\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZ3zipQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5nfOKl",
                                           "createdAt":  "2023-09-26T20:22:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "This also crashes in net6.0, net7.0 and net8.0\r\n\r\nin net6.0 and net7.0 it crashes like this:\r\n\r\n```\r\nmono_os_mutex_trylock: pthread_mutex_trylock failed with \"Invalid argument\" (22)\r\n...\r\n\t0x103554e2c - /private/tmp/resu/bin/Release/net7.0/osx-arm64/publish/libcoreclr.dylib : mono_coop_mutex_lock\r\n\t0x1035522f4 - /private/tmp/resu/bin/Release/net7.0/osx-arm64/publish/libcoreclr.dylib : ves_icall_System_Threading_Thread_GetState\r\n\t0x10350f000 - /private/tmp/resu/bin/Release/net7.0/osx-arm64/publish/libcoreclr.dylib : ves_icall_System_Threading_Thread_GetState_raw\r\n...\r\n```\r\n",
                                           "updatedAt":  "2023-09-26T20:22:06Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[Mono] Accessing the thread state of a resurrected Thread object asserts",
        "labels":  [
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92853",
        "createdAt":  "2023-09-30T23:23:58Z",
        "number":  92853,
        "author":  "elringus",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-28T17:33:52Z",
        "body":  "With `\u003cWasmEnableThreads\u003etrue\u003c/WasmEnableThreads\u003e` generated `dotnet.js` has assert to only be used in browser environment. When imported (w/o actually creating the runtime), following error is thrown: \r\n\r\n`This build of dotnet is multi-threaded, it doesn\u0027t support shell environments like V8 or NodeJS.`\r\n\r\nThis breaks unit testing in node when the dotnet APIs are mocked and the runtime is not initalized, but still has to be imported. After removing the assertion unit testing in node works fine.\r\n\r\nIs it possible to remove the assertion or **move it to the runtime creation** function?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeL6urw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5n1tpp",
                                           "createdAt":  "2023-10-01T16:38:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWith `\u003cWasmEnableThreads\u003etrue\u003c/WasmEnableThreads\u003e` generated `dotnet.js` has assert to only be used in browser environment. When imported (w/o actually creating the runtime), following error is thrown: \r\n\r\n`This build of dotnet is multi-threaded, it doesn\u0027t support shell environments like V8 or NodeJS.`\r\n\r\nThis breaks unit testing in node when the dotnet APIs are mocked and the runtime is not initalized, but still has to be imported. After removing the assertion unit testing in node works fine.\r\n\r\nIs it possible to remove the assertion or move it to the runtime creation function?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eElringus\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-System.Runtime.InteropServices.JavaScript`, `needs-area-label`, `os-browser`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-01T16:38:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5n3QcN",
                                           "createdAt":  "2023-10-02T07:41:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "~~This is by design. What are the use cases which you need to address~~\r\nOh, I miss-read the description",
                                           "updatedAt":  "2023-10-02T07:42:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5n3uBV",
                                           "createdAt":  "2023-10-02T09:08:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "yeah, MT on NodeJS is not even close to ready. Why are you importing the module when you mock it anyway ?",
                                           "updatedAt":  "2023-10-02T09:08:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5n4LXM",
                                           "createdAt":  "2023-10-02T10:37:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "elringus",
                                           "body":  "I mock individual bindings, but not the whole module. Here is an example: https://github.com/Elringus/DotNetJS/blob/feat/revamp/Samples/App/test/computer.test.tsx (`backend` is the dotnet module).",
                                           "updatedAt":  "2023-10-02T10:37:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54vlW8",
                                           "createdAt":  "2024-03-28T17:22:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "This needs emscripten bump to [3.1.52](https://github.com/emscripten-core/emscripten/blob/main/ChangeLog.md#3152---011924)\r\n",
                                           "updatedAt":  "2024-03-28T17:22:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54vq6v",
                                           "createdAt":  "2024-03-28T17:33:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "cc @radekdoulik ",
                                           "updatedAt":  "2024-03-28T17:33:51Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[browser][MT] support for NodeJS",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95210",
        "createdAt":  "2023-11-24T15:33:26Z",
        "number":  95210,
        "author":  "akoeplinger",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-10-27T02:26:57Z",
        "body":  "Repro steps:\r\n\r\n```\r\n.\\build.cmd mono+libs -c Release -arch x86\r\n.\\dotnet.cmd build /t:Test /p:RuntimeFlavor=mono /p:TargetArchitecture=x86 /p:TestScope=outerloop -c Release .\\src\\libraries\\System.Diagnostics.DiagnosticSource\\tests\\ -f net9.0\r\n```\r\n\r\nThis will result in a bunch of test failures like this one:\r\n\r\n```\r\nSystem.Diagnostics.Metrics.Tests.MetricEventSourceTests.EventSourceWorksWithSequentialListeners [FAIL]\r\n  Assert.Equal() Failure: Strings differ\r\n              \u0019 (pos 0)\r\n  Expected: \"10\"\r\n  Actual:   \"0\"\r\n              \u0018 (pos 0)\r\n  Stack Trace:\r\n          C:\\dev\\runtime\\src\\libraries\\System.Diagnostics.DiagnosticSource\\tests\\MetricEventSourceTests.cs(1621,0): at System.Diagnostics.Metrics.Tests.MetricEventSourceTests.AssertGenericCounterEventsPresent(String eventName, EventWrittenEventArgs[] events, String meterName, String instrumentName, String tags, String expectedUnit, ValueTuple`2[] expected)\r\n          C:\\dev\\runtime\\src\\libraries\\System.Diagnostics.DiagnosticSource\\tests\\MetricEventSourceTests.cs(1592,0): at System.Diagnostics.Metrics.Tests.MetricEventSourceTests.AssertCounterEventsPresent(EventWrittenEventArgs[] events, String meterName, String instrumentName, String tags, String expectedUnit, ValueTuple`2[] expected)\r\n          C:\\dev\\runtime\\src\\libraries\\System.Diagnostics.DiagnosticSource\\tests\\MetricEventSourceTests.cs(1366,0): at System.Diagnostics.Metrics.Tests.MetricEventSourceTests.EventSourceWorksWithSequentialListeners()\r\n          C:\\dev\\runtime\\src\\mono\\System.Private.CoreLib\\src\\System\\Reflection\\MethodBaseInvoker.Mono.cs(22,0): at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\r\n          C:\\dev\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Reflection\\MethodBaseInvoker.cs(57,0): at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiJEmLA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5s1IOQ",
                                           "createdAt":  "2023-11-24T16:09:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "Looks like I don\u0027t see this when reverting https://github.com/dotnet/runtime/pull/91566 so might be related to interlocked exchange on doubles and maybe it just exposes an underlying issue.",
                                           "updatedAt":  "2023-11-24T16:09:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5s1K5j",
                                           "createdAt":  "2023-11-24T16:20:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e Looks like I don\u0027t see this when reverting #91566 so might be related to interlocked exchange on doubles and maybe it just exposes an underlying issue.\r\n\r\nMaybe something with CompareExchange comparing doubles bitwise and not with normal FP equality?",
                                           "updatedAt":  "2023-11-24T16:20:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HZ1Nb",
                                           "createdAt":  "2024-08-06T16:33:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@stephentoub can you have a look at this?  @akoeplinger was calling out your change https://github.com/dotnet/runtime/pull/91566 as introducing this regression.",
                                           "updatedAt":  "2024-08-06T16:33:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6H_RUG",
                                           "createdAt":  "2024-08-10T12:36:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e and maybe it just exposes an underlying issue.\n\nThat would be my guess... there are only two src uses of Interlocked.CompareExchange on doubles in the whole repo, and this one gets much more stressed than the other. My guess is a mono bug in CompareExchange.",
                                           "updatedAt":  "2024-08-10T12:36:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ia0Qq",
                                           "createdAt":  "2024-08-14T13:22:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "Curious, which one is the other src usage?",
                                           "updatedAt":  "2024-08-14T13:22:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IkSYs",
                                           "createdAt":  "2024-08-15T12:53:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "https://github.com/dotnet/runtime/blob/bfffd58eeb204d368989038a19786bff86000b19/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Tracing/EventCounter.cs#L154",
                                           "updatedAt":  "2024-08-15T12:53:45Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Mono Windows x86: possible CompareExchange issue causes failures in System.Diagnostics.DiagnosticSource.Tests",
        "labels":  [
                       "bug",
                       "arch-x86",
                       "disabled-test",
                       "os-windows",
                       "area-VM-threading-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96191",
        "createdAt":  "2023-12-19T16:32:06Z",
        "number":  96191,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-26T09:54:07Z",
        "body":  "### Error Blob\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"RuntimeError: operation does not support unaligned accesses\",\r\n  \"BuildRetry\": false,\r\n  \"ErrorPattern\": \"\",\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n### Reproduction Steps\r\n\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=556904\u0026view=logs\u0026jobId=63c2d0c8-fec2-5788-81c8-f3ac95e8841f\r\n\r\n\r\n\r\n```\r\n[15:41:29] warn: worker sent an error! http://127.0.0.1:46177/_framework/dotnet.native.worker.js:1: Uncaught RuntimeError: operation does not support unaligned accesses\r\n[15:41:29] fail: MONO_WASM: Error\r\n                     at He (http://127.0.0.1:46177/_framework/dotnet.js:3:19726)\r\n                     at e (http://127.0.0.1:46177/_framework/dotnet.js:3:33700)\r\n                     at http://127.0.0.1:46177/_framework/dotnet.js:3:33845\r\n[15:41:29] fail: Error: [MONO] /__w/1/s/src/mono/mono/mini/interp/transform.c:1136 \u003cdisabled\u003e\r\n                     at Rt (http://127.0.0.1:46177/_framework/dotnet.runtime.js:3:13935)\r\n                     at ud (http://127.0.0.1:46177/_framework/dotnet.runtime.js:3:208105)\r\n                     at wasm_trace_logger (http://127.0.0.1:46177/_framework/dotnet.native.wasm:wasm-function[199]:0x148b6)\r\n                     at eglib_log_adapter (http://127.0.0.1:46177/_framework/dotnet.native.wasm:wasm-function[683]:0x48f8e)\r\n                     at monoeg_g_logv_nofree (http://127.0.0.1:46177/_framework/dotnet.native.wasm:wasm-function[604]:0x4739b)\r\n                     at monoeg_g_log (http://127.0.0.1:46177/_framework/dotnet.native.wasm:wasm-function[606]:0x4745e)\r\n                     at monoeg_g_log_disabled (http://127.0.0.1:46177/_framework/dotnet.native.wasm:wasm-function[607]:0x47491)\r\n                     at store_local (http://127.0.0.1:46177/_framework/dotnet.native.wasm:wasm-function[410]:0x3467b)\r\n                     at generate_code (http://127.0.0.1:46177/_framework/dotnet.native.wasm:wasm-function[407]:0x2d6da)\r\n                     at mono_interp_transform_method (http://127.0.0.1:46177/_framework/dotnet.native.wasm:wasm-function[451]:0x39737)\r\n[15:41:29] fail: [out of order message from the browser]: http://127.0.0.1:46177/_framework/dotnet.native.worker.js 0 Uncaught RuntimeError: operation does not support unaligned accesses\r\n```\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=556904\r\n**Error message validated:** `RuntimeError: operation does not support unaligned accesses`\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 2/7/2024 4:03:46 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuuprvQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5vDKIl",
                                           "createdAt":  "2023-12-19T16:32:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSystem.Threading.Tests.MutexTests\r\n\r\n```\r\n[15:41:29] warn: worker sent an error! http://127.0.0.1:46177/_framework/dotnet.native.worker.js:1: Uncaught RuntimeError: operation does not support unaligned accesses\r\n[15:41:29] fail: MONO_WASM: Error\r\n                     at He (http://127.0.0.1:46177/_framework/dotnet.js:3:19726)\r\n                     at e (http://127.0.0.1:46177/_framework/dotnet.js:3:33700)\r\n                     at http://127.0.0.1:46177/_framework/dotnet.js:3:33845\r\n[15:41:29] fail: Error: [MONO] /__w/1/s/src/mono/mono/mini/interp/transform.c:1136 \u003cdisabled\u003e\r\n                     at Rt (http://127.0.0.1:46177/_framework/dotnet.runtime.js:3:13935)\r\n                     at ud (http://127.0.0.1:46177/_framework/dotnet.runtime.js:3:208105)\r\n                     at wasm_trace_logger (http://127.0.0.1:46177/_framework/dotnet.native.wasm:wasm-function[199]:0x148b6)\r\n                     at eglib_log_adapter (http://127.0.0.1:46177/_framework/dotnet.native.wasm:wasm-function[683]:0x48f8e)\r\n                     at monoeg_g_logv_nofree (http://127.0.0.1:46177/_framework/dotnet.native.wasm:wasm-function[604]:0x4739b)\r\n                     at monoeg_g_log (http://127.0.0.1:46177/_framework/dotnet.native.wasm:wasm-function[606]:0x4745e)\r\n                     at monoeg_g_log_disabled (http://127.0.0.1:46177/_framework/dotnet.native.wasm:wasm-function[607]:0x47491)\r\n                     at store_local (http://127.0.0.1:46177/_framework/dotnet.native.wasm:wasm-function[410]:0x3467b)\r\n                     at generate_code (http://127.0.0.1:46177/_framework/dotnet.native.wasm:wasm-function[407]:0x2d6da)\r\n                     at mono_interp_transform_method (http://127.0.0.1:46177/_framework/dotnet.native.wasm:wasm-function[451]:0x39737)\r\n[15:41:29] fail: [out of order message from the browser]: http://127.0.0.1:46177/_framework/dotnet.native.worker.js 0 Uncaught RuntimeError: operation does not support unaligned accesses\r\n```\r\n\r\n[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-95959-merge-1e7cb3f16eb44b499d/WasmTestOnBrowser-System.Threading.Tests/1/console.27beb5d6.log?helixlogtype=result)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-VM-threading-mono`, `os-browser`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-19T16:32:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vDKuP",
                                           "createdAt":  "2023-12-19T16:33:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "cc @kg @BrzVlad ",
                                           "updatedAt":  "2023-12-19T16:33:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vDQoE",
                                           "createdAt":  "2023-12-19T16:48:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "here is one more\r\n```\r\n[11:01:33] info: [2023-12-17T11:01:33.762Z] [PASS] System.Threading.Tests.MutexTests.OpenExisting(name: \"ada314549e444c7da1055fc1741a507e\")\r\n[11:01:33] warn: worker sent an error! http://127.0.0.1:38575/_framework/dotnet.native.worker.js:1: Uncaught RuntimeError: operation does not support unaligned accesses\r\n[11:01:33] fail: MONO_WASM: Error\r\n                     at Qe (http://127.0.0.1:38575/_framework/dotnet.js:3:19749)\r\n                     at e (http://127.0.0.1:38575/_framework/dotnet.js:3:33736)\r\n                     at http://127.0.0.1:38575/_framework/dotnet.js:3:33881\r\n[11:01:33] warn: MONO_WASM: mono_wasm_exit failed {}\r\n[11:01:33] fail: [out of order message from the browser]: http://127.0.0.1:38575/_framework/dotnet.native.worker.js 0 Uncaught RuntimeError: operation does not support unaligned accesses\r\n```\r\n[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-95370-merge-d4e6945b1bea461096/WasmTestOnBrowser-System.Threading.Tests/1/console.2faeef21.log?helixlogtype=result)\r\n",
                                           "updatedAt":  "2023-12-19T16:48:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vDcaj",
                                           "createdAt":  "2023-12-19T17:10:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "I don\u0027t see any atomics in store_local, so the stack trace must be wrong",
                                           "updatedAt":  "2023-12-19T17:10:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vDd0P",
                                           "createdAt":  "2023-12-19T17:13:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Maybe it\u0027s V8 message ?\r\nhttps://github.com/dotnet/node/blob/df373ca399657e5522321152c79ec08954c9b41b/deps/v8/src/common/message-template.h#L592\r\n\r\nhttps://github.com/dotnet/node/blob/df373ca399657e5522321152c79ec08954c9b41b/deps/v8/src/wasm/baseline/liftoff-compiler.cc#L2882",
                                           "updatedAt":  "2023-12-19T17:15:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vDg3s",
                                           "createdAt":  "2023-12-19T17:22:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "Ah, if so we\u0027d need to run it under a debugger and hope it will pause there",
                                           "updatedAt":  "2023-12-19T17:22:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vP1Yh",
                                           "createdAt":  "2023-12-21T14:56:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Perhaps `Invalid atomic access index` is related ?\r\n\r\n```\r\n[13:00:09] info: [2023-12-21T13:00:09.376Z] [PASS] System.Threading.Tasks.Sources.Tests.ManualResetValueTaskSourceTests.TaskScheduler_CaptureIfRequested(runContinuationsAsynchronously: False, captureTaskScheduler: True, setBeforeOnCompleted: True)\r\n[13:00:09] warn: worker sent an error! http://127.0.0.1:44357/_framework/dotnet.native.worker.js:1: \r\nUncaught RangeError: Invalid atomic access index\r\n[13:00:09] fail: MONO_WASM: Error\r\n                     at Qe (http://127.0.0.1:44357/_framework/dotnet.js:3:19734)\r\n                     at e (http://127.0.0.1:44357/_framework/dotnet.js:3:33726)\r\n                     at http://127.0.0.1:44357/_framework/dotnet.js:3:33871\r\n```\r\n\r\n[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-95370-merge-4bb7691389264bf682/WasmTestOnBrowser-System.Threading.Tasks.Extensions.Tests/1/console.f64b6e8b.log?helixlogtype=result)\r\n\r\n```\r\n[12:54:20] info: [2023-12-21T12:54:20.235Z] [PASS] Microsoft.Extensions.Logging.Console.Test.JsonConsoleFormatterTests.Log_StateAndScopeContainsSpecialCaseValue_SerializesValueAsExpected(value: 1, expectedJsonValue: \"1\")\r\n[12:54:20] warn: worker sent an error! http://127.0.0.1:45013/_framework/dotnet.native.worker.js:1: Uncaught RangeError: Invalid atomic access index\r\n[12:54:20] fail: MONO_WASM: Error\r\n                     at Qe (http://127.0.0.1:45013/_framework/dotnet.js:3:19734)\r\n                     at e (http://127.0.0.1:45013/_framework/dotnet.js:3:33726)\r\n                     at http://127.0.0.1:45013/_framework/dotnet.js:3:33871\r\n[12:54:20] info: WASM EXIT 1\r\n```\r\n\r\n[Log2](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-95370-merge-4bb7691389264bf682/WasmTestOnBrowser-Microsoft.Extensions.Logging.Console.Tests/1/console.be0372d0.log?helixlogtype=result)",
                                           "updatedAt":  "2024-01-27T13:36:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vP55V",
                                           "createdAt":  "2023-12-21T15:04:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "@lambdageek any thoughts ?",
                                           "updatedAt":  "2023-12-21T15:04:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vP9Sp",
                                           "createdAt":  "2023-12-21T15:11:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "It\u0027s either us or emscripten libc, right?\n\nMaybe we can instrument all our atomic ops with an alignment check?",
                                           "updatedAt":  "2023-12-21T15:11:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vywcZ",
                                           "createdAt":  "2024-01-03T15:45:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Another [Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-96319-merge-415cef5a3eef493e89/WasmTestOnBrowser-System.Threading.Tests/1/console.203cc715.log?helixlogtype=result)\r\n```\r\n[13:22:55] warn: worker sent an error! http://127.0.0.1:39547/_framework/dotnet.native.worker.js:1: Uncaught RangeError: Invalid atomic access index\r\n[13:22:55] fail: MONO_WASM: Error\r\n                     at Qe (http://127.0.0.1:39547/_framework/dotnet.js:3:19635)\r\n                     at e (http://127.0.0.1:39547/_framework/dotnet.js:3:33629)\r\n                     at http://127.0.0.1:39547/_framework/dotnet.js:3:33774\r\n[13:22:55] info: WASM EXIT 1\r\n```",
                                           "updatedAt":  "2024-01-27T13:35:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5v-Ymj",
                                           "createdAt":  "2024-01-05T12:58:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I created known error for tracking of `Invalid atomic access index` https://github.com/dotnet/runtime/issues/96545\r\nAnd possibly unrelated ?? `memory access out of bounds` https://github.com/dotnet/runtime/issues/96546\r\n\r\nFor this issue I can\u0027t find the build which failed with `operation does not support unaligned accesses` anymore 😞 \r\nThey are `20231219.1` and `20231217.1` on `runtime-wasm`\r\n\r\n",
                                           "updatedAt":  "2024-01-05T13:25:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wAnvk",
                                           "createdAt":  "2024-01-05T20:17:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "If we\u0027re getting memory access out of bounds, it could mean that we\u0027re doing an atomic on a garbage address. That address would have like a 1/2 or 3/4 chance of being unaligned, and a decent chance of being out of bounds.",
                                           "updatedAt":  "2024-01-05T20:17:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x_ODS",
                                           "createdAt":  "2024-01-26T17:10:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "yeah, maybe we should try building with asan",
                                           "updatedAt":  "2024-01-26T17:10:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yAHAZ",
                                           "createdAt":  "2024-01-26T20:11:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Couldn\u0027t repro locally with debug builds of the runtime/libraries/tests.  Trying a release build (but hopefully still with native symbols).\r\n\r\n*Update* no luck with release builds either.\r\n\r\nFor the record I\u0027m using:\r\n\r\n```console\r\n$ ./build.sh --os browser -c Release /p:MonoWasmBuildVariant=multithread /p:KeepNativeSymbols=true  /p:WasmNativeDebugSymbols=true /p:MonoEnableAssertMessages=true\r\n...\r\n$ XUNIT_RANDOM_ORDER_SEED=186041091 XHARNESS_COMMAND=\"test-browser --no-quit --browser=chrome --web-server-use-cop\" ./dotnet.sh build /t:Test  /p:RuntimeFlavor=Mono /p:WasmEnableThreads=true -c Release /p:TargetOS=browser /p:TargetArchitecture=wasm  /p:KeepNativeSymbols=true  /p:WasmNativeDebugSymbols=true /p:MonoEnableAssertMessages=true /p:MonoWasmBuildVariant=multithread src/libraries/System.Threading/tests/System.Threading.Tests.csproj\r\n...\r\n```\r\n\r\n(Also tried `Microsoft.Extensions.Logging.Console.Tests.csproj` and `System.Net.Http.Json.Functional.Tests.csproj` with a variety of random seeds)\r\n",
                                           "updatedAt":  "2024-01-26T20:51:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5yVp64",
                                           "createdAt":  "2024-01-31T02:51:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "\u003e Couldn\u0027t repro locally with debug builds of the runtime/libraries/tests. Trying a release build (but hopefully still with native symbols).\r\n\u003e \r\n\u003e _Update_ no luck with release builds either.\r\n\u003e \r\n\u003e For the record I\u0027m using:\r\n\u003e \r\n\u003e ```\r\n\u003e $ ./build.sh --os browser -c Release /p:MonoWasmBuildVariant=multithread /p:KeepNativeSymbols=true  /p:WasmNativeDebugSymbols=true /p:MonoEnableAssertMessages=true\r\n\u003e ...\r\n\u003e $ XUNIT_RANDOM_ORDER_SEED=186041091 XHARNESS_COMMAND=\"test-browser --no-quit --browser=chrome --web-server-use-cop\" ./dotnet.sh build /t:Test  /p:RuntimeFlavor=Mono /p:WasmEnableThreads=true -c Release /p:TargetOS=browser /p:TargetArchitecture=wasm  /p:KeepNativeSymbols=true  /p:WasmNativeDebugSymbols=true /p:MonoEnableAssertMessages=true /p:MonoWasmBuildVariant=multithread src/libraries/System.Threading/tests/System.Threading.Tests.csproj\r\n\u003e ...\r\n\u003e ```\r\n\u003e \r\n\u003e (Also tried `Microsoft.Extensions.Logging.Console.Tests.csproj` and `System.Net.Http.Json.Functional.Tests.csproj` with a variety of random seeds)\r\n\r\nhave you tried with -fsanitize=address in the cflags/ldflags when building?",
                                           "updatedAt":  "2024-01-31T02:51:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zLSKA",
                                           "createdAt":  "2024-02-07T15:50:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-98087-merge-505a49cbe504464aac/WasmTestOnBrowser-System.Threading.Tests/1/console.83b77869.log?helixlogtype=result)\r\n[Build](https://dev.azure.com/dnceng-public/public/_build/results?buildId=556904\u0026view=logs\u0026jobId=63c2d0c8-fec2-5788-81c8-f3ac95e8841f)\r\n\r\n```\r\n[13:35:56] info: Starting:    System.Threading.Tests.dll\r\n[13:36:27] warn: [0x000dc69c-main 13:36:27.947] MONO_WASM: Failed to find loaded WebWorker, this may deadlock. Please increase the pthreadPoolSize. Running threads 17. Loading workers: 8\r\n[13:36:32] fail: [0x061b0040-emsc 13:36:32.808] MONO_WASM: Unhandled error: RuntimeError: operation does not support unaligned accesses\r\n[13:36:32] fail: [0x061b0040-emsc 13:36:32.808] MONO_WASM: Unhandled error: RuntimeError: operation does not support unaligned accesses\r\n[13:36:32] info: [0x061b0040-emsc 13:36:32.809] MONO_WASM: Dumping web worker info as seen by UI thread, it could be stale:\r\n[13:36:32] info: 00 | 0x061b0040-emsc: isRunning:false isAttached:false isEventLoop:false reuseCount: 40 - pthread-assigned\r\n[13:36:32] fail: [0x061b0040-emsc 13:36:32.810] MONO_WASM: operation does not support unaligned accesses\r\n                 RuntimeError: operation does not support unaligned accesses\r\n                     at http://127.0.0.1:38395/_framework/dotnet.native.wasm:wasm-function[779]:0x4c626\r\n                     at http://127.0.0.1:38395/_framework/dotnet.native.wasm:wasm-function[2752]:0xd3d1b\r\n                     at http://127.0.0.1:38395/_framework/dotnet.native.wasm:wasm-function[2748]:0xd37f7\r\n                     at Object.invokeEntryPoint (http://127.0.0.1:38395/_framework/dotnet.native.js:8:69009)\r\n                     at handleMessage (http://127.0.0.1:38395/_framework/dotnet.native.worker.js:1:2306)\r\n[13:36:32] info: WASM EXIT 1\r\n```",
                                           "updatedAt":  "2024-02-07T15:50:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zWqOo",
                                           "createdAt":  "2024-02-09T04:32:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "cc @steveisok @vargaz",
                                           "updatedAt":  "2024-02-09T04:32:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5z1zzI",
                                           "createdAt":  "2024-02-14T10:34:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "~~Local on my system, with better stack trace I admit this is code I just changed, so it could be me causing it.~~\r\n\r\nAny invalid pointer could lead any lock to cause this. ☹️ \r\n\r\n```\r\nfail: [0x042d06b0-pool 10:23:37.263] MONO_WASM: operation does not support unaligned accesses\r\n  RuntimeError: operation does not support unaligned accesses\r\n      at a_cas.7 (a_cas.7 (http://127.0.0.1:57921/_framework/dotnet.native.wasm:wasm-function[17476]:0x35a5ee))\r\n      at __pthread_mutex_trylock (__pthread_mutex_trylock (http://127.0.0.1:57921/_framework/dotnet.native.wasm:wasm-function[17477]:0x35a609))\r\n      at mono_os_mutex_trylock.18 (mono_os_mutex_trylock.18 (http://127.0.0.1:57921/_framework/dotnet.native.wasm:wasm-function[8720]:0x1ee1fd))\r\n      at mono_coop_mutex_lock.18 (mono_coop_mutex_lock.18 (http://127.0.0.1:57921/_framework/dotnet.native.wasm:wasm-function[8719]:0x1ee19a))\r\n      at mono_mem_manager_lock (mono_mem_manager_lock (http://127.0.0.1:57921/_framework/dotnet.native.wasm:wasm-function[8718]:0x1ee176))\r\n```",
                                           "updatedAt":  "2024-02-14T11:42:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50OAsE",
                                           "createdAt":  "2024-02-17T06:46:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "Looking at the emscripten implementation, they don\u0027t make any effort to ensure alignment of the address they\u0027re doing cas on: https://github.com/emscripten-core/emscripten/blob/e0c3ce6d2b3f121abab481e6e79a1a60e2fcd18b/system/lib/libc/musl/src/thread/pthread_mutex_trylock.c#L75\r\n\r\nSo not only would invalid pointers have a 3/4 or 7/8 chance of hitting this, but you need to make sure any pthread_mutex_t instances are sufficiently aligned as well - if they\u0027re static you\u0027re relying on the linker to arrange them at aligned offsets (it probably has to for anything to work), and if they\u0027re struct members you\u0027re relying on the alignment and packing of the struct to not put it at a bad address.\r\n\r\nIf you\u0027re trying to lock an invalid pointer, I would assume that in cases where it doesn\u0027t crash like this, it either erroneously wakes instantly because it thinks it just \u0027locked\u0027 garbage memory, or it deadlocks forever waiting on something that isn\u0027t a lock?",
                                           "updatedAt":  "2024-02-17T06:46:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50WtoB",
                                           "createdAt":  "2024-02-19T10:09:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-heads-main-43b5fd6f19a74cce88/WasmTestOnBrowser-System.Threading.Tests/1/console.51516773.log?helixlogtype=result)\r\n```\r\n[21:04:35] fail: [0x050c02f0-long 21:04:35.756] MONO_WASM: operation does not support unaligned accesses\r\n                 RuntimeError: operation does not support unaligned accesses\r\n                     at a_cas (http://127.0.0.1:44659/_framework/dotnet.native.wasm:wasm-function[8517]:0x20eec2)\r\n                     at __pthread_mutex_trylock (http://127.0.0.1:44659/_framework/dotnet.native.wasm:wasm-function[8670]:0x21538d)\r\n                     at lock_thread (http://127.0.0.1:44659/_framework/dotnet.native.wasm:wasm-function[2758]:0xd6056)\r\n                     at ves_icall_System_Threading_Thread_GetState_raw (http://127.0.0.1:44659/_framework/dotnet.native.wasm:wasm-function[2096]:0xb18e9)\r\n                     at do_icall (http://127.0.0.1:44659/_framework/dotnet.native.wasm:wasm-function[334]:0x28859)\r\n                     at do_icall_wrapper (http://127.0.0.1:44659/_framework/dotnet.native.wasm:wasm-function[263]:0x26009)\r\n                     at mono_interp_exec_method (http://127.0.0.1:44659/_framework/dotnet.native.wasm:wasm-function[254]:0x18a3c)\r\n                     at interp_runtime_invoke (http://127.0.0.1:44659/_framework/dotnet.native.wasm:wasm-function[293]:0x26c97)\r\n                     at mono_jit_runtime_invoke (http://127.0.0.1:44659/_framework/dotnet.native.wasm:wasm-function[3347]:0xfd35a)\r\n                     at do_runtime_invoke (http://127.0.0.1:44659/_framework/dotnet.native.wasm:wasm-function[2615]:0xcf3ae)\r\n```",
                                           "updatedAt":  "2024-02-19T10:09:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52qv_w",
                                           "createdAt":  "2024-03-12T07:08:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-99550-merge-9bf094ef35bf48b9b6/WasmTestOnBrowser-System.Threading.Tests/1/console.73e340f2.log?helixlogtype=result)\r\n```\r\n[19:51:30] info: [PASS] System.Threading.Tests.MutexTests.NamedMutex_DisposeWhenLockedRaceTest\r\n[19:51:32] fail: [0x05620040-long 19:51:32.464] MONO_WASM: Unhandled error: RuntimeError: operation does not support unaligned accesses\r\n[19:51:32] fail: [0x05620040-long 19:51:32.465] MONO_WASM: Unhandled error: RuntimeError: operation does not support unaligned accesses\r\n[19:51:32] info: [0x05620040-long 19:51:32.466] MONO_WASM: Dumping web worker info as seen by UI thread, it could be stale:\r\n[19:51:32] info: 010 | 0x05620040-long: isRunning:false isAttached: true isEventLoop:false reuseCount:  2 - .NET Long Running Task\r\n[19:51:32] fail: [0x05620040-long 19:51:32.467] MONO_WASM: operation does not support unaligned accesses\r\n                 RuntimeError: operation does not support unaligned accesses\r\n                     at a_cas (http://127.0.0.1:41171/_framework/dotnet.native.wasm:wasm-function[8528]:0x20f31e)\r\n                     at __pthread_mutex_trylock (http://127.0.0.1:41171/_framework/dotnet.native.wasm:wasm-function[8682]:0x215a4e)\r\n                     at lock_thread (http://127.0.0.1:41171/_framework/dotnet.native.wasm:wasm-function[2769]:0xd669d)\r\n                     at ves_icall_System_Threading_Thread_GetState_raw (http://127.0.0.1:41171/_framework/dotnet.native.wasm:wasm-function[2107]:0xb1f1a)\r\n                     at do_icall (http://127.0.0.1:41171/_framework/dotnet.native.wasm:wasm-function[340]:0x28bb1)\r\n                     at do_icall_wrapper (http://127.0.0.1:41171/_framework/dotnet.native.wasm:wasm-function[269]:0x2635f)\r\n                     at mono_interp_exec_method (http://127.0.0.1:41171/_framework/dotnet.native.wasm:wasm-function[260]:0x18b4e)\r\n                     at interp_runtime_invoke (http://127.0.0.1:41171/_framework/dotnet.native.wasm:wasm-function[299]:0x26fed)\r\n                     at mono_jit_runtime_invoke (http://127.0.0.1:41171/_framework/dotnet.native.wasm:wasm-function[3358]:0xfd753)\r\n                     at do_runtime_invoke (http://127.0.0.1:41171/_framework/dotnet.native.wasm:wasm-function[2626]:0xcf9f5)\r\n[19:51:32] info: WASM EXIT 1\r\n\r\n```",
                                           "updatedAt":  "2024-03-12T07:08:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54h-_i",
                                           "createdAt":  "2024-03-27T08:12:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-100282-merge-19b04e68bb5f476ba7/WasmTestOnBrowser-System.Threading.Tests/1/console.03b45b3b.log?helixlogtype=result)\r\n```\r\n[15:11:26] info: [STRT] System.Threading.Tests.MutexTests.NamedMutex_ThreadExitDisposeRaceTest\r\n[15:11:27] fail: [0x057d0040-back 15:11:27.025] MONO_WASM: Unhandled error: RuntimeError: operation does not support unaligned accesses\r\n[15:11:27] fail: [0x057d0040-back 15:11:27.026] MONO_WASM: Unhandled error: RuntimeError: operation does not support unaligned accesses\r\n[15:11:27] info: [0x057d0040-back 15:11:27.027] MONO_WASM: Dumping web worker info as seen by UI thread, it could be stale:\r\n[15:11:27] info: 019 | 0x057d0040-back: isRunning:false isAttached:false isEventLoop:false reuseCount: 19 - pthread-assigned\r\n[15:11:27] fail: [0x057d0040-back 15:11:27.054] MONO_WASM: operation does not support unaligned accesses\r\n                 RuntimeError: operation does not support unaligned accesses\r\n                     at mono_threads_open_thread_handle (http://127.0.0.1:34685/_framework/dotnet.native.wasm:wasm-function[795]:0x4f9fc)\r\n                     at mono_thread_attach_internal (http://127.0.0.1:34685/_framework/dotnet.native.wasm:wasm-function[2774]:0xd6f43)\r\n                     at start_wrapper (http://127.0.0.1:34685/_framework/dotnet.native.wasm:wasm-function[2770]:0xd6a24)\r\n                     at Object.invokeEntryPoint (http://127.0.0.1:34685/_framework/dotnet.native.js:8:69009)\r\n                     at handleMessage (http://127.0.0.1:34685/_framework/dotnet.native.worker.js:1:2306)\r\n[15:11:27] info: WASM EXIT 1\r\n```",
                                           "updatedAt":  "2024-03-27T08:13:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54iAAp",
                                           "createdAt":  "2024-03-27T08:15:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-100106-merge-9b5d87f114b1482cb1/WasmTestOnBrowser-System.Threading.Tests/1/console.923601b3.log?helixlogtype=result)\r\n```\r\n[06:20:11] info: [STRT] System.Threading.Tests.MutexTests.NamedMutex_ThreadExitDisposeRaceTest\r\n[06:20:14] fail: [0x01ae9b90-dpty 06:20:14.155] MONO_WASM: Unhandled error: RuntimeError: operation does not support unaligned accesses\r\n[06:20:14] fail: [0x01ae9b90-dpty 06:20:14.156] MONO_WASM: Unhandled error: RuntimeError: operation does not support unaligned accesses\r\n[06:20:14] info: [0x01ae9b90-dpty 06:20:14.157] MONO_WASM: Dumping web worker info as seen by UI thread, it could be stale:\r\n[06:20:14] info: 001 | 0x01ae9b90-dpty: isRunning: true isAttached: true isEventLoop:false reuseCount:  1 -\r\n[06:20:14] fail: [0x01ae9b90-dpty 06:20:14.188] MONO_WASM: operation does not support unaligned accesses\r\n                 RuntimeError: operation does not support unaligned accesses\r\n                     at a_cas (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[8511]:0x20e9a8)\r\n                     at __pthread_mutex_trylock (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[8665]:0x2150d8)\r\n                     at lock_thread (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[2763]:0xd630f)\r\n                     at ves_icall_System_Threading_Thread_GetState_raw (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[2103]:0xb1e7e)\r\n                     at do_icall (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[336]:0x28a85)\r\n                     at do_icall_wrapper (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[265]:0x26234)\r\n                     at mono_interp_exec_method (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[256]:0x18af2)\r\n                     at interp_runtime_invoke (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[295]:0x26ec2)\r\n                     at mono_jit_runtime_invoke (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[3342]:0xfcd58)\r\n                     at do_runtime_invoke (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[2622]:0xcf9b1)\r\n                     at mono_runtime_invoke_checked (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[2621]:0xcf941)\r\n                     at ves_icall_InternalInvoke_raw (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[1980]:0xaa473)\r\n                     at do_icall (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[336]:0x28b1e)\r\n                     at do_icall_wrapper (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[265]:0x26234)\r\n                     at mono_interp_exec_method (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[256]:0x18af2)\r\n                     at interp_entry (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[329]:0x28530)\r\n                     at interp_entry_static_0 (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[365]:0x29539)\r\n                     at wasm_native_to_interp_System_Runtime_InteropServices_JavaScript_JSSynchronizationContext_BackgroundJobHandler (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[231]:0x1666f)\r\n                     at mono_background_exec (http://127.0.0.1:43199/_framework/dotnet.native.wasm:wasm-function[835]:0x50cb8)\r\n                     at zs (http://127.0.0.1:43199/_framework/dotnet.runtime.js:3:70332)\r\n                     at callUserCallback (http://127.0.0.1:43199/_framework/dotnet.native.js:8:102608)\r\n                     at http://127.0.0.1:43199/_framework/dotnet.native.js:8:111163\r\n[06:20:14] info: WASM EXIT 1\r\n```",
                                           "updatedAt":  "2024-03-27T08:15:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54sVTm",
                                           "createdAt":  "2024-03-28T10:42:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "`NamedMutex_ThreadExitDisposeRaceTest` is nasty test, it creates threads and mutexes in a 1000 loop and there are two threads racing to destroy the same mutex.",
                                           "updatedAt":  "2024-03-28T10:42:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GoWdA",
                                           "createdAt":  "2024-07-30T16:16:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "This could be just another manifestation of the MT corruption we\u0027re seeing other places where the invalid address is unaligned",
                                           "updatedAt":  "2024-07-30T16:16:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HNEwi",
                                           "createdAt":  "2024-08-05T07:20:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-heads-main-4e7385e23233458cb8/WasmTestOnChrome-MT-System.Private.Xml.Tests/1/console.565ac60f.log?helixlogtype=result) with dumped worker info:\r\n\r\n```\r\n[08:57:13] fail: [0x000fb4f8--UI- 08:57:13.153] MONO_WASM: Unhandled error: RuntimeError: operation does not support unaligned accesses\r\n[08:57:13] info: [0x000fb4f8--UI- 08:57:13.155] MONO_WASM: Dumping web worker info as seen by UI thread, it could be stale:\r\n[08:57:13] info: 000 | 0x000fb4f8--UI-: isRunning: true isAttached: true isEventLoop:false reuseCount:  0 - UI Thread\r\n[08:57:13] info: 001 | 0x00d25070-dpty: isRunning: true isAttached: true isEventLoop:false reuseCount:  1 -\r\n[08:57:13] info: 002 | 0x02bda650--IO-: isRunning: true isAttached: true isEventLoop:false reuseCount:  1 -\r\n[08:57:13] info: 003 | 0x030e2908-norm: isRunning: true isAttached: true isEventLoop:false reuseCount:  1 - Finalizer\r\n[08:57:13] info: 005 | 0x04c08030-gate: isRunning: true isAttached: true isEventLoop:false reuseCount:  1 - .NET TP Gate\r\n[08:57:13] info: 007 |           -    : isRunning:false isAttached:false isEventLoop:false reuseCount:  0 - emscripten-pool\r\n[08:57:13] info: 008 | --05cc8030-emsc: isRunning:false isAttached:false isEventLoop:false reuseCount:  1 - unregistered:(.NET Long Running Task)\r\n[08:57:13] info: 006 | --056a5268-emsc: isRunning:false isAttached:false isEventLoop:false reuseCount:  1 - unregistered:(.NET Long Running Task)\r\n[08:57:13] info: 004 | --045e5e68-emsc: isRunning:false isAttached:false isEventLoop:false reuseCount:  1 - unregistered:(.NET TP Worker)\r\n[08:57:13] fail: [0x000fb4f8--UI- 08:57:13.168] MONO_WASM: operation does not support unaligned accesses\r\n                 RuntimeError: operation does not support unaligned accesses\r\n                     at a_cas (http://127.0.0.1:44717/_framework/dotnet.native.wasm:wasm-function[8617]:0x223689)\r\n                     at __private_cond_signal (http://127.0.0.1:44717/_framework/dotnet.native.wasm:wasm-function[8733]:0x228591)\r\n                     at pthread_cond_signal (http://127.0.0.1:44717/_framework/dotnet.native.wasm:wasm-function[8726]:0x228011)\r\n                     at call_then_finish_task (http://127.0.0.1:44717/_framework/dotnet.native.wasm:wasm-function[8715]:0x2273be)\r\n                     at call_with_ctx (http://127.0.0.1:44717/_framework/dotnet.native.wasm:wasm-function[8712]:0x227350)\r\n                     at em_task_queue_execute (http://127.0.0.1:44717/_framework/dotnet.native.wasm:wasm-function[8697]:0x226ce9)\r\n                     at receive_notification (http://127.0.0.1:44717/_framework/dotnet.native.wasm:wasm-function[8703]:0x226ed5)\r\n                     at em_task_queue_execute (http://127.0.0.1:44717/_framework/dotnet.native.wasm:wasm-function[8697]:0x226ce9)\r\n                     at _emscripten_check_mailbox (http://127.0.0.1:44717/_framework/dotnet.native.wasm:wasm-function[8841]:0x22ecf3)\r\n                     at callUserCallback (http://127.0.0.1:44717/_framework/dotnet.native.js:8:98666)\r\n                     at checkMailbox (http://127.0.0.1:44717/_framework/dotnet.native.js:8:99197)\r\n```",
                                           "updatedAt":  "2024-08-05T07:20:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NUAZP",
                                           "createdAt":  "2024-09-24T10:02:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-108059-merge-e5221a23847c4b47a2/WasmTestOnChrome-MT-System.IO.FileSystem.Tests/1/console.05306066.log?helixlogtype=result)\r\n```\r\n[19:48:09] fail: [0x000fbca8--UI- 19:48:09.020] MONO_WASM: operation does not support unaligned accesses\r\n                 RuntimeError: operation does not support unaligned accesses\r\n                     at a_cas (http://127.0.0.1:37677/_framework/dotnet.native.wasm:wasm-function[8611]:0x224a75)\r\n                     at __private_cond_signal (http://127.0.0.1:37677/_framework/dotnet.native.wasm:wasm-function[8725]:0x2297d7)\r\n                     at pthread_cond_signal (http://127.0.0.1:37677/_framework/dotnet.native.wasm:wasm-function[8718]:0x229257)\r\n                     at call_then_finish_task (http://127.0.0.1:37677/_framework/dotnet.native.wasm:wasm-function[8707]:0x228604)\r\n                     at call_with_ctx (http://127.0.0.1:37677/_framework/dotnet.native.wasm:wasm-function[8704]:0x228596)\r\n                     at em_task_queue_execute (http://127.0.0.1:37677/_framework/dotnet.native.wasm:wasm-function[8689]:0x227f2f)\r\n                     at receive_notification (http://127.0.0.1:37677/_framework/dotnet.native.wasm:wasm-function[8695]:0x22811b)\r\n                     at em_task_queue_execute (http://127.0.0.1:37677/_framework/dotnet.native.wasm:wasm-function[8689]:0x227f2f)\r\n                     at _emscripten_check_mailbox (http://127.0.0.1:37677/_framework/dotnet.native.wasm:wasm-function[8833]:0x22ff6b)\r\n                     at callUserCallback (http://127.0.0.1:37677/_framework/dotnet.native.js:8:98666)\r\n                     at checkMailbox (http://127.0.0.1:37677/_framework/dotnet.native.js:8:99197)\r\n```",
                                           "updatedAt":  "2024-09-24T10:02:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc666mu9",
                                           "createdAt":  "2025-07-30T11:43:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "[Log](https://helixr1107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-118099-merge-0d5607493db34cd694/WasmTestOnChrome-MT-System.Reflection.CoreCLR.Tests/1/console.0a5390d8.log?helixlogtype=result\u0026skoid=8eda00af-b5ec-4be9-b69b-0919a2338892\u0026sktid=72f988bf-86f1-41af-91ab-2d7cd011db47\u0026skt=2025-07-30T11%3A37%3A49Z\u0026ske=2025-07-30T12%3A37%3A49Z\u0026sks=b\u0026skv=2024-11-04\u0026sv=2024-11-04\u0026se=2025-07-30T12%3A37%3A49Z\u0026sr=b\u0026sp=rl\u0026sig=Xr%2BAPDH1xRbPp3pkhAE%2Bql%2BJpS9K990RYOiqBWIZZL4%3D)\n```\n[10:04:09] fail: [0x000ec878--UI- 10:04:09.814] MONO_WASM: Unhandled error: RuntimeError: operation does not support unaligned accesses\n[10:04:09] info: [0x000ec878--UI- 10:04:09.816] MONO_WASM: Dumping web worker info as seen by UI thread, it could be stale:\n[10:04:09] info: 000 | 0x000ec878--UI-: isRunning: true isAttached: true isEventLoop:false reuseCount:  0 - UI Thread\n[10:04:09] info: 001 | 0x00ed74f0-dpty: isRunning: true isAttached: true isEventLoop:false reuseCount:  1 -\n[10:04:09] info: 002 | 0x028324f0--IO-: isRunning: true isAttached: true isEventLoop:false reuseCount:  1 -\n[10:04:09] info: 003 | 0x02d327a0-norm: isRunning: true isAttached: true isEventLoop:false reuseCount:  1 - Finalizer\n[10:04:09] info: 004 | 0x03ae6ac0-pool: isRunning: true isAttached: true isEventLoop:false reuseCount:  1 - .NET TP Worker\n[10:04:09] info: 005 | 0x04100048-gate: isRunning: true isAttached: true isEventLoop:false reuseCount:  1 - .NET TP Gate\n[10:04:09] info: 007 |           -    : isRunning:false isAttached:false isEventLoop:false reuseCount:  0 - emscripten-pool\n[10:04:09] info: 006 | --04b416a0-emsc: isRunning:false isAttached:false isEventLoop:false reuseCount:  1 - unregistered:(.NET Long Running Task)\n[10:04:09] info: 008 | --05147970-emsc: isRunning:false isAttached:false isEventLoop:false reuseCount:  1 - unregistered:(.NET Long Running Task)\n[10:04:09] fail: [0x000ec878--UI- 10:04:09.850] MONO_WASM: operation does not support unaligned accesses\n                 RuntimeError: operation does not support unaligned accesses\n                     at a_cas (http://127.0.0.1:38305/_framework/dotnet.native.wasm:wasm-function[8607]:0x2295e6)\n                     at __private_cond_signal (http://127.0.0.1:38305/_framework/dotnet.native.wasm:wasm-function[8721]:0x22e35f)\n                     at pthread_cond_signal (http://127.0.0.1:38305/_framework/dotnet.native.wasm:wasm-function[8714]:0x22ddd5)\n                     at call_then_finish_task (http://127.0.0.1:38305/_framework/dotnet.native.wasm:wasm-function[8703]:0x22d17f)\n                     at call_with_ctx (http://127.0.0.1:38305/_framework/dotnet.native.wasm:wasm-function[8700]:0x22d111)\n                     at em_task_queue_execute (http://127.0.0.1:38305/_framework/dotnet.native.wasm:wasm-function[8685]:0x22caa8)\n                     at receive_notification (http://127.0.0.1:38305/_framework/dotnet.native.wasm:wasm-function[8691]:0x22cc94)\n                     at em_task_queue_execute (http://127.0.0.1:38305/_framework/dotnet.native.wasm:wasm-function[8685]:0x22caa8)\n                     at _emscripten_check_mailbox (http://127.0.0.1:38305/_framework/dotnet.native.wasm:wasm-function[8828]:0x234ad8)\n                     at callUserCallback (http://127.0.0.1:38305/_framework/dotnet.native.js:8:98666)\n                     at checkMailbox (http://127.0.0.1:38305/_framework/dotnet.native.js:8:99197)\n[10:04:09] info: WASM EXIT 1\n```",
                                           "updatedAt":  "2025-07-30T11:43:25Z"
                                       }
                                   ],
                         "totalCount":  28
                     },
        "title":  "[browser][MT] MutexTests - operation does not support unaligned accesses",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96523",
        "createdAt":  "2024-01-05T03:28:26Z",
        "number":  96523,
        "author":  "srxqds",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-03T20:31:28Z",
        "body":  "the ouput:\r\n\r\n```\r\n0x00007FFA4791264F (ucrtbase.dll)处(位于 UE4Editor.exe 中)引发的异常: 0xC00000FD: Stack overflow (参数: 0x0000000000000001, 0x0000005F30211FF8)。\r\n[2024.01.05-11.29.43:889][303]MonoVM: Error: [][error]Assertion failure in thread 0000000000009064 due to: E:\\work\\netease-gitlab\\dotnet\\runtime\\src\\mono\\mono\\mini\\mini-exceptions.c:2880: Expected GC Unsafe mode but was in STATE_BLOCKING state\r\nLast 2 state transitions: (most recent first)\r\n[ABORT_BLOCKING] STATE_BLOCKING -\u003e RUNNING (0) 0 at:\r\n\tno backtrace available\r\n[DO_BLOCKING] RUNNING -\u003e STATE_BLOCKING (0) 0 at:\r\n\tno backtrace available\r\n```\r\nthe stacktrace:\r\n```\r\n \tUE4Editor-UnrealMonoRuntime.dll!OnMonoLog(const char * LogDomain, const char * InLogLevel, const char * Message, int Flag, int HandlerType) 行 99\tC++\r\n \tUE4Editor-UnrealMonoRuntime.dll!MonoLog(const char * log_domain, const char * log_level, const char * message, int fatal, void * user_data) 行 182\tC++\r\n \tcoreclr.dll!eglib_log_adapter(const char * log_domain, GLogLevelFlags log_level, const char * message, void * user_data) 行 395\tC\r\n \tcoreclr.dll!monoeg_g_logstr(const char * log_domain, GLogLevelFlags log_level, const char * msg) 行 152\tC\r\n \tcoreclr.dll!monoeg_g_logv_nofree(const char * log_domain, GLogLevelFlags log_level, const char * format, char * args) 行 167\tC\r\n \tcoreclr.dll!monoeg_g_logv(const char * log_domain, GLogLevelFlags log_level, const char * format, char * args) 行 173\tC\r\n \tcoreclr.dll!monoeg_g_log(const char * log_domain, GLogLevelFlags log_level, const char * format, ...) 行 183\tC\r\n \tcoreclr.dll!mono_fatal_with_history(const char * volatile msg, ...) 行 353\tC\r\n \tcoreclr.dll!assert_gc_unsafe_mode(const char * file, int lineno) 行 402\tC\r\n\u003e\tcoreclr.dll!mono_handle_exception(MonoContext * ctx, void * void_obj) 行 2880\tC\r\n \tcoreclr.dll!mono_arch_handle_exception(void * sigctx, void * obj) 行 825\tC\r\n \tcoreclr.dll!seh_vectored_exception_handler(_EXCEPTION_POINTERS * ep) 行 155\tC\r\n \tntdll.dll!00007ffa49f5c49a()\t未知\r\n \tntdll.dll!00007ffa49f159a2()\t未知\r\n \tntdll.dll!00007ffa49f87afe()\t未知\r\n \tucrtbase.dll!00007ffa4791264f()\t未知\r\n \tucrtbase.dll!00007ffa4791231b()\t未知\r\n \tucrtbase.dll!00007ffa4791204f()\t未知\r\n \t[内联框架] UE4Editor-Core.dll!_vswprintf_c_l(wchar_t * const) 行 1161\tC++\r\n \t[内联框架] UE4Editor-Core.dll!vswprintf(wchar_t * const) 行 1248\tC++\r\n \t[内联框架] UE4Editor-Core.dll!FMicrosoftPlatformString::GetVarArgs(wchar_t *) 行 136\tC++\r\n \t[内联框架] UE4Editor-Core.dll!TCString\u003cwchar_t\u003e::GetVarArgs(wchar_t *) 行 876\tC++\r\n \tUE4Editor-Core.dll!FString::PrintfImpl(const wchar_t * Fmt, ...) 行 1326\tC++\r\n \t[内联框架] UE4Editor-Core.dll!FString::Printf(const wchar_t[5] \u0026 \u003cArgs_0\u003e, int) 行 1560\tC++\r\n \tUE4Editor-Core.dll!FDateTime::ToString(const wchar_t * Format) 行 276\tC++\r\n \tUE4Editor-Core.dll!FOutputDeviceHelper::FormatLogLine(ELogVerbosity::Type Verbosity, const FName \u0026 Category, const wchar_t * Message, ELogTimes::Type LogTime, const double Time) 行 29\tC++\r\n \tUE4Editor-Core.dll!FOutputDeviceHelper::FormatCastAndSerializeLine(FArchive \u0026 Output, const wchar_t * Data, ELogVerbosity::Type Verbosity, const FName \u0026 Category, const double Time, bool bSuppressEventTag, bool bAutoEmitLineTerminator) 行 87\tC++\r\n \tUE4Editor-Core.dll!FOutputDeviceFile::Serialize(const wchar_t * Data, ELogVerbosity::Type Verbosity, const FName \u0026 Category, const double Time) 行 511\tC++\r\n \tUE4Editor-Core.dll!FOutputDeviceRedirector::SerializeImpl\u003cFName const\u003e(const wchar_t * Data, ELogVerbosity::Type Verbosity, const FName \u0026 Category, const double Time) 行 417\tC++\r\n \tUE4Editor-Core.dll!FOutputDeviceRedirector::RedirectLog(const FName \u0026 Category, ELogVerbosity::Type Verbosity, const wchar_t * Data) 行 437\tC++\r\n \tUE4Editor-Core.dll!FMsg::Logf_InternalImpl(const char * File, int Line, const FName \u0026 Category, ELogVerbosity::Type Verbosity, const wchar_t * Fmt, ...) 行 97\tC++\r\n \tUE4Editor-UnrealBridgeRuntime.dll!\u003clambda_8bff18fa07970bb54540897965b9f8f7\u003e::operator()\u003cFLogCategoryLogMono,wchar_t [3],wchar_t const *\u003e(const FLogCategoryLogMono \u0026 LCategoryName, const wchar_t[3] \u0026 LFormat, const wchar_t * const \u0026 \u003cUE_LOG_Args_0\u003e) 行 21\tC++\r\n \tUE4Editor-UnrealBridgeRuntime.dll!Internal_UELog_Log(ELogVerbosity::Type LogVerbosity, _MonoString * Text) 行 22\tC++\r\n\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcY4O7g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5xjg7u",
                                           "createdAt":  "2024-01-23T01:37:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "hi, how i check current stack size to defense the stackoverflow",
                                           "updatedAt":  "2024-01-23T01:37:16Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[mono] stackoverflow exception hit thread mode assert ",
        "labels":  [
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97382",
        "createdAt":  "2024-01-23T13:01:30Z",
        "number":  97382,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-19T12:20:37Z",
        "body":  "Microsoft.Extensions.Logging.Console.Test.SimpleConsoleFormatterTests.Log_WritingScopes_LogsWithCorrectColorsWhenColorEnabled\r\n\r\n```\r\n  info: [2024-01-23T12:56:37.458Z] [FAIL] Microsoft.Extensions.Logging.Console.Test.SimpleConsoleFormatterTests.Log_WritingScopes_LogsWithCorrectColorsWhenColorEnabled(colorBehavior: Default)\r\n  info: Assert.Equal() Failure: Values differ\r\n  info: Expected: 1\r\n  info: Actual:   2\r\n  info:    at Microsoft.Extensions.Logging.Console.Test.SimpleConsoleFormatterTests.Log_WritingScopes_LogsWithCorrectColorsWhenColorEnabled(LoggerColorBehavior colorBehavior) in C:\\Dev\\runtime\\src\\libraries\\Microsoft.Extensions.Logging.Conso\r\n  le\\tests\\Microsoft.Extensions.Logging.Console.Tests\\SimpleConsoleFormatterTests.cs:line 53\r\n  info:    at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in C:\\Dev\\runtime\\src\\mono\\System.Private.CoreLib\\src\\System\\Reflection\\MethodBaseInvoker.Mono.cs:line 22\r\n  info:    at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr) in C:\\Dev\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Reflection\\MethodBaseInvoker.cs:line 178\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcz-Bpw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5xm3sL",
                                           "createdAt":  "2024-01-23T13:01:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nMicrosoft.Extensions.Logging.Console.Test.SimpleConsoleFormatterTests.Log_WritingScopes_LogsWithCorrectColorsWhenColorEnabled\r\n\r\n```\r\n  info: [2024-01-23T12:56:37.458Z] [FAIL] Microsoft.Extensions.Logging.Console.Test.SimpleConsoleFormatterTests.Log_WritingScopes_LogsWithCorrectColorsWhenColorEnabled(colorBehavior: Default)\r\n  info: Assert.Equal() Failure: Values differ\r\n  info: Expected: 1\r\n  info: Actual:   2\r\n  info:    at Microsoft.Extensions.Logging.Console.Test.SimpleConsoleFormatterTests.Log_WritingScopes_LogsWithCorrectColorsWhenColorEnabled(LoggerColorBehavior colorBehavior) in C:\\Dev\\runtime\\src\\libraries\\Microsoft.Extensions.Logging.Conso\r\n  le\\tests\\Microsoft.Extensions.Logging.Console.Tests\\SimpleConsoleFormatterTests.cs:line 53\r\n  info:    at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args) in C:\\Dev\\runtime\\src\\mono\\System.Private.CoreLib\\src\\System\\Reflection\\MethodBaseInvoker.Mono.cs:line 22\r\n  info:    at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr) in C:\\Dev\\runtime\\src\\libraries\\System.Private.CoreLib\\src\\System\\Reflection\\MethodBaseInvoker.cs:line 178\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-VM-threading-mono`, `os-browser`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-23T13:01:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zLtT1",
                                           "createdAt":  "2024-02-07T16:43:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "@mkhamoyan can you take a look at this one and figure out the root cause",
                                           "updatedAt":  "2024-02-07T16:43:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zP4Gn",
                                           "createdAt":  "2024-02-08T08:02:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maraf",
                                           "body":  "Just validated yesterday that it is still failing https://github.com/dotnet/runtime/pull/98095",
                                           "updatedAt":  "2024-02-08T08:02:34Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[browser][MT] Log_WritingScopes_LogsWithCorrectColorsWhenColorEnabled fails",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98026",
        "createdAt":  "2024-02-06T11:32:01Z",
        "number":  98026,
        "author":  "ilonatommy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-02T17:34:20Z",
        "body":  "[log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-98003-merge-da47047456b84e748c/Wasm.Browser.EventPipe.Sample/1/console.a27df990.log?helixlogtype=result)\r\n```\r\n[23:56:45] fail: [out of order message from the browser]: http://127.0.0.1:46763/_framework/dotnet.native.js 7:66632 Uncaught ErrorEvent: Uncaught SyntaxError: Failed to construct \u0027WebSock…t be either \u0027ws\u0027 or \u0027wss\u0027. \u0027mock\u0027 is not allowed.\r\n[23:56:45] fail: [out of order message from the browser]: http://127.0.0.1:46763/_framework/dotnet.runtime.js 2 Uncaught (in promise) SyntaxError: Failed to construct \u0027WebSocket\u0027: The URL\u0027s scheme must be either \u0027ws\u0027 or \u0027wss\u0027. \u0027mock\u0027 is not allowed.\r\n[23:56:45] fail: [out of order message from the browser]: http://127.0.0.1:46763/_framework/dotnet.native.worker.js 0 Uncaught SyntaxError: Failed to construct \u0027WebSocket\u0027: The URL\u0027s scheme must be either \u0027ws\u0027 or \u0027wss\u0027. \u0027mock\u0027 is not allowed.\r\n[23:56:45] info: please recompile runtime with /p:WasmEnableThreads=true /p:MonoDiagnosticsMock=truemessage\r\n[23:56:45] info: http://127.0.0.1:46763/_framework/dotnet.runtime.js 2 [0x007a56b0] MONO_WASM: starting diagnostic server with url: mock:./mock.js\r\n[23:56:45] info: worker sent an error! http://127.0.0.1:46763/_framework/dotnet.native.worker.js:1: Uncaught SyntaxError: Failed to construct \u0027WebSocket\u0027: The URL\u0027s scheme must be either \u0027ws\u0027 or \u0027wss\u0027. \u0027mock\u0027 is not allowed.\r\n[00:11:44] info: Waiting to flush log messages with a timeout of 120 secs ..\r\n[00:11:44] fail: Flushing log messages failed with: System.OperationCanceledException: The operation was canceled.\r\n                    at System.Threading.Channels.AsyncOperation`1.GetResult(Int16 token)\r\n                    at System.Threading.Channels.ChannelReader`1.ReadAllAsync(CancellationToken cancellationToken)+MoveNext()\r\n                    at System.Threading.Channels.ChannelReader`1.ReadAllAsync(CancellationToken cancellationToken)+System.Threading.Tasks.Sources.IValueTaskSource\u003cSystem.Boolean\u003e.GetResult()\r\n                    at Microsoft.DotNet.XHarness.CLI.Commands.Wasm.WasmTestMessagesProcessor.RunAsync(CancellationToken token) in /_/src/Microsoft.DotNet.XHarness.CLI/Commands/WASM/WasmTestMessagesProcessor.cs:line 66\r\n                    at Microsoft.DotNet.XHarness.CLI.Commands.Wasm.WasmTestMessagesProcessor.RunAsync(CancellationToken token) in /_/src/Microsoft.DotNet.XHarness.CLI/Commands/WASM/WasmTestMessagesProcessor.cs:line 66\r\n                    at Microsoft.DotNet.XHarness.CLI.Commands.Wasm.WasmTestMessagesProcessor.CompleteAndFlushAsync(Nullable`1 timeout) in /_/src/Microsoft.DotNet.XHarness.CLI/Commands/WASM/WasmTestMessagesProcessor.cs:line 138. Ignoring.\r\n[00:11:44] fail: Tests timed out. Killing driver service pid 79\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcv83ew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5y_zd7",
                                           "createdAt":  "2024-02-06T11:32:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n[log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-98003-merge-da47047456b84e748c/Wasm.Browser.EventPipe.Sample/1/console.a27df990.log?helixlogtype=result)\r\n```\r\n[23:56:45] fail: [out of order message from the browser]: http://127.0.0.1:46763/_framework/dotnet.native.js 7:66632 Uncaught ErrorEvent: Uncaught SyntaxError: Failed to construct \u0027WebSock…t be either \u0027ws\u0027 or \u0027wss\u0027. \u0027mock\u0027 is not allowed.\r\n[23:56:45] fail: [out of order message from the browser]: http://127.0.0.1:46763/_framework/dotnet.runtime.js 2 Uncaught (in promise) SyntaxError: Failed to construct \u0027WebSocket\u0027: The URL\u0027s scheme must be either \u0027ws\u0027 or \u0027wss\u0027. \u0027mock\u0027 is not allowed.\r\n[23:56:45] fail: [out of order message from the browser]: http://127.0.0.1:46763/_framework/dotnet.native.worker.js 0 Uncaught SyntaxError: Failed to construct \u0027WebSocket\u0027: The URL\u0027s scheme must be either \u0027ws\u0027 or \u0027wss\u0027. \u0027mock\u0027 is not allowed.\r\n[23:56:45] info: please recompile runtime with /p:WasmEnableThreads=true /p:MonoDiagnosticsMock=truemessage\r\n[23:56:45] info: http://127.0.0.1:46763/_framework/dotnet.runtime.js 2 [0x007a56b0] MONO_WASM: starting diagnostic server with url: mock:./mock.js\r\n[23:56:45] info: worker sent an error! http://127.0.0.1:46763/_framework/dotnet.native.worker.js:1: Uncaught SyntaxError: Failed to construct \u0027WebSocket\u0027: The URL\u0027s scheme must be either \u0027ws\u0027 or \u0027wss\u0027. \u0027mock\u0027 is not allowed.\r\n[00:11:44] info: Waiting to flush log messages with a timeout of 120 secs ..\r\n[00:11:44] fail: Flushing log messages failed with: System.OperationCanceledException: The operation was canceled.\r\n                    at System.Threading.Channels.AsyncOperation`1.GetResult(Int16 token)\r\n                    at System.Threading.Channels.ChannelReader`1.ReadAllAsync(CancellationToken cancellationToken)+MoveNext()\r\n                    at System.Threading.Channels.ChannelReader`1.ReadAllAsync(CancellationToken cancellationToken)+System.Threading.Tasks.Sources.IValueTaskSource\u003cSystem.Boolean\u003e.GetResult()\r\n                    at Microsoft.DotNet.XHarness.CLI.Commands.Wasm.WasmTestMessagesProcessor.RunAsync(CancellationToken token) in /_/src/Microsoft.DotNet.XHarness.CLI/Commands/WASM/WasmTestMessagesProcessor.cs:line 66\r\n                    at Microsoft.DotNet.XHarness.CLI.Commands.Wasm.WasmTestMessagesProcessor.RunAsync(CancellationToken token) in /_/src/Microsoft.DotNet.XHarness.CLI/Commands/WASM/WasmTestMessagesProcessor.cs:line 66\r\n                    at Microsoft.DotNet.XHarness.CLI.Commands.Wasm.WasmTestMessagesProcessor.CompleteAndFlushAsync(Nullable`1 timeout) in /_/src/Microsoft.DotNet.XHarness.CLI/Commands/WASM/WasmTestMessagesProcessor.cs:line 138. Ignoring.\r\n[00:11:44] fail: Tests timed out. Killing driver service pid 79\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eilonatommy\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `disabled-test`, `area-VM-threading-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-06T11:32:04Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[mt][browser] `Wasm.Browser.EventPipe.Sample` fails",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98101",
        "createdAt":  "2024-02-07T14:59:17Z",
        "number":  98101,
        "author":  "ilonatommy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T17:17:42Z",
        "body":  "### Error Blob\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"[FAIL] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread\",\r\n  \"BuildRetry\": false,\r\n  \"ErrorPattern\": \"\",\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n### Reproduction Steps\r\n\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=557097\r\n[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-98083-merge-4fc4545dd1b04ac5b9/WasmTestOnBrowser-System.Runtime.InteropServices.JavaScript.Tests/1/console.7c54146d.log?helixlogtype=result) \r\n```\r\n[12:49:20] fail: [FAIL] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(executor1: JSWebWorker, executor2: NewThread)\r\n[12:49:20] info: System.OperationCanceledException : The operation was canceled.\r\n[12:49:20] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerTestBase.\u003cActionsInDifferentThreads\u003ed__8`1[[System.Net.Http.HttpResponseMessage, System.Net.Http, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n[12:49:20] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_ActionInDifferentThread(String url, Executor executor1, Executor executor2, Func`2 e2Job)\r\n[12:49:20] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(Executor executor1, Executor executor2)\r\n[12:49:20] info: --- End of stack trace from previous location ---\r\n```\r\n\r\n\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi7yRcg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5zK3Yx",
                                           "createdAt":  "2024-02-07T14:59:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Error Blob\n\n```json\r\n{\r\n  \"ErrorMessage\": \"[FAIL] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread\",\r\n  \"BuildRetry\": false,\r\n  \"ErrorPattern\": \"\",\r\n  \"ExcludeConsoleLog\": true\r\n}\r\n```\r\n\n\n### Reproduction Steps\n\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=556841\r\n[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-98083-merge-4fc4545dd1b04ac5b9/WasmTestOnBrowser-System.Runtime.InteropServices.JavaScript.Tests/1/console.7c54146d.log?helixlogtype=result) \r\n```\r\n[12:49:20] fail: [FAIL] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(executor1: JSWebWorker, executor2: NewThread)\r\n[12:49:20] info: System.OperationCanceledException : The operation was canceled.\r\n[12:49:20] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerTestBase.\u003cActionsInDifferentThreads\u003ed__8`1[[System.Net.Http.HttpResponseMessage, System.Net.Http, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n[12:49:20] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_ActionInDifferentThread(String url, Executor executor1, Executor executor2, Func`2 e2Job)\r\n[12:49:20] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(Executor executor1, Executor executor2)\r\n[12:49:20] info: --- End of stack trace from previous location ---\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eilonatommy\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `blocking-clean-ci`, `area-VM-threading-mono`, `Known Build Error`, `os-browser`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-07T14:59:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5046wL",
                                           "createdAt":  "2024-02-23T10:28:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkhamoyan",
                                           "body":  "After #98291\r\n\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=575688\r\n\r\n[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-98753-merge-cb5672c654ae499f91/WasmTestOnBrowser-System.Runtime.InteropServices.JavaScript.Tests/1/console.13adfd3b.log?helixlogtype=result)\r\n```\r\n[14:04:32] info: [STRT] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(executor1: JSWebWorker, executor2: NewThread)\r\n[14:04:32] info: HttpClient_CancelInDifferentThread: ManagedThreadId: 1188 NativeThreadId: 118751296\r\n[14:04:37] info: Unexpected test case HttpClient_ActionInDifferentThread timeout after 00:00:05.0510000 ManagedThreadId:3\r\n[14:04:37] info: [FAIL] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(executor1: JSWebWorker, executor2: NewThread)\r\n[14:04:37] info: System.OperationCanceledException : The operation was canceled.\r\n[14:04:37] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerTestBase.\u003cActionsInDifferentThreads\u003ed__8`1[[System.Net.Http.HttpResponseMessage, System.Net.Http, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n[14:04:37] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_ActionInDifferentThread(String url, Executor executor1, Executor executor2, Func`2 e2Job)\r\n[14:04:37] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(Executor executor1, Executor executor2)\r\n[14:04:37] info: --- End of stack trace from previous location ---\r\n```",
                                           "updatedAt":  "2024-02-23T10:28:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52cyS9",
                                           "createdAt":  "2024-03-10T14:47:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Another [Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-99000-merge-a8ac4836611646c588/WasmTestOnBrowser-System.Runtime.InteropServices.JavaScript.Tests/1/console.f8e84040.log?helixlogtype=result)\r\n```\r\n[19:43:57] info: [STRT] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(executor1: JSWebWorker, executor2: ThreadPool)\r\n[19:43:57] info: HttpClient_CancelInDifferentThread: ManagedThreadId: 9 NativeThreadId: 56186504\r\n[19:44:02] info: Unexpected test case HttpClient_ActionInDifferentThread timeout after 00:00:05.0530000 ManagedThreadId:10\r\n[19:44:02] info: [FAIL] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(executor1: JSWebWorker, executor2: ThreadPool)\r\n[19:44:02] info: System.OperationCanceledException : The operation was canceled.\r\n[19:44:02] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerTestBase.\u003cActionsInDifferentThreads\u003ed__8`1[[System.Net.Http.HttpResponseMessage, System.Net.Http, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n[19:44:02] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_ActionInDifferentThread(String url, Executor executor1, Executor executor2, Func`2 e2Job)\r\n[19:44:02] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(Executor executor1, Executor executor2)\r\n[19:44:02] info: --- End of stack trace from previous location ---\r\n```\r\n\r\nWe can see that this is that the first/test cancelation was not delivered and that only timeout cancelation of the killing `JSWebWorker` 5 seconds later helped.",
                                           "updatedAt":  "2024-03-10T14:47:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc53f6JP",
                                           "createdAt":  "2024-03-18T20:07:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "@pavelsavara do we think this one has been resolved?",
                                           "updatedAt":  "2024-03-18T20:07:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Heo24",
                                           "createdAt":  "2024-08-07T08:50:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkhamoyan",
                                           "body":  "Reopening as this started hitting again see [log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-105875-merge-103e3857dc294971af/WasmTestOnFirefox-MT-System.Runtime.InteropServices.JavaScript.Tests/1/console.f8a9e649.log?helixlogtype=result)\r\n```\r\n[00:19:43] info: [STRT] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(executor1: ThreadPool, executor2: NewThread)\r\n[00:19:48] info: Unexpected test case HttpClient_ActionInDifferentThread timeout after 00:00:05 ManagedThreadId:10\r\n[00:19:53] info: [FAIL] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(executor1: ThreadPool, executor2: NewThread)\r\n[00:19:53] info: System.OperationCanceledException : The operation was canceled.\r\n[00:19:53] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerTestBase.\u003cActionsInDifferentThreads\u003ed__9`1[[System.Net.Http.HttpResponseMessage, System.Net.Http, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n[00:19:53] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_ActionInDifferentThread(String url, Executor executor1, Executor executor2, Func`2 e2Job)\r\n[00:19:53] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(Executor executor1, Executor executor2)\r\n[00:19:53] info: --- End of stack trace from previous location ---\r\n```",
                                           "updatedAt":  "2024-08-07T08:57:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hnh-1",
                                           "createdAt":  "2024-08-08T08:48:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkhamoyan",
                                           "body":  "This started occurring more frequently.\r\n```\r\n[05:45:09] info: [STRT] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(executor1: Main, executor2: Main)\r\n[05:45:09] info: HttpClient_CancelInDifferentThread: ManagedThreadId: 1 NativeThreadId: 13312336\r\n[05:45:09] info: [PASS] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread\r\n[05:45:09] info: [STRT] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(executor1: Main, executor2: ThreadPool)\r\n[05:45:09] info: HttpClient_CancelInDifferentThread: ManagedThreadId: 5 NativeThreadId: 51890608\r\n[05:45:09] info: [PASS] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread\r\n[05:45:09] info: [STRT] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(executor1: Main, executor2: NewThread)\r\n[05:45:09] info: HttpClient_CancelInDifferentThread: ManagedThreadId: 13 NativeThreadId: 101384192\r\n[05:45:09] info: [PASS] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread\r\n[05:45:09] info: [STRT] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(executor1: Main, executor2: JSWebWorker)\r\n[05:45:09] info: HttpClient_CancelInDifferentThread: ManagedThreadId: 14 NativeThreadId: 101384192\r\n[05:45:09] info: [0x060b0000-jsww 05:45:09.303] MONO_WASM: forceDisposeProxies done: 1 imports, 0 exports, 0 GCHandles, 0 JSHandles.\r\n[05:45:09] info: [PASS] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread\r\n[05:45:09] info: [STRT] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(executor1: ThreadPool, executor2: Main)\r\n[05:45:09] info: HttpClient_CancelInDifferentThread: ManagedThreadId: 1 NativeThreadId: 13312336\r\n[05:45:09] info: [PASS] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread\r\n[05:45:09] info: [STRT] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(executor1: ThreadPool, executor2: ThreadPool)\r\n[05:45:09] info: HttpClient_CancelInDifferentThread: ManagedThreadId: 5 NativeThreadId: 51890608\r\n[05:45:09] info: [PASS] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread\r\n[05:45:09] info: [STRT] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(executor1: ThreadPool, executor2: NewThread)\r\n[05:45:14] info: Unexpected test case HttpClient_ActionInDifferentThread timeout after 00:00:05.0010000 ManagedThreadId:9\r\n[05:45:19] info: [FAIL] System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(executor1: ThreadPool, executor2: NewThread)\r\n[05:45:19] info: System.OperationCanceledException : The operation was canceled.\r\n[05:45:19] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerTestBase.\u003cActionsInDifferentThreads\u003ed__9`1[[System.Net.Http.HttpResponseMessage, System.Net.Http, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()\r\n[05:45:19] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_ActionInDifferentThread(String url, Executor executor1, Executor executor2, Func`2 e2Job)\r\n[05:45:19] info:    at System.Runtime.InteropServices.JavaScript.Tests.WebWorkerHttpTest.HttpClient_CancelInDifferentThread(Executor executor1, Executor executor2)\r\n[05:45:19] info: --- End of stack trace from previous location ---\r\n```\r\nChecking the logs, it works fine initially but fails on the second round with `executor2: NewThread`, consistently with `NewThread`.",
                                           "updatedAt":  "2024-08-08T08:48:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Hnuc2",
                                           "createdAt":  "2024-08-08T09:13:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "disabled in https://github.com/dotnet/runtime/pull/106114",
                                           "updatedAt":  "2024-08-08T09:13:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6LvJFy",
                                           "createdAt":  "2024-09-11T18:29:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "removing \u0027blocking-clean-ci\u0027 as it has not failed in 30 days\r\n\r\n24-Hour Hit Count | 7-Day Hit Count | 1-Month Count\r\n-- | -- | --\r\n0 | 0 | 0\r\n",
                                           "updatedAt":  "2024-09-11T18:29:22Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[mt][browser] `HttpClient_CancelInDifferentThread` failing with operation cancelled",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98110",
        "createdAt":  "2024-02-07T16:30:56Z",
        "number":  98110,
        "author":  "ilonatommy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T17:18:36Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=554985\r\nBuild error leg or test failing: chrome-DebuggerTests.MiscTests.WorkItemExecution\r\nPull request: https://github.com/dotnet/runtime/pull/97992\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssues.md#how-to-fill-out-a-known-issue-error-section).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"Failed DebuggerTests.MiscTests.TestDebugUsingMultiThreadedRuntime\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-98087-merge-515a13ce68e04c0db7/chrome-DebuggerTests.MiscTests/1/console.61fee9a7.log?helixlogtype=result)\r\n\r\n```\r\n[xUnit.net 00:01:47.76]     DebuggerTests.MiscTests.TestDebugUsingMultiThreadedRuntime(_attempt: 0) [FAIL]\r\n  Failed DebuggerTests.MiscTests.TestDebugUsingMultiThreadedRuntime(_attempt: 0) [57 s]\r\n  Error Message:\r\n   System.Threading.Tasks.TaskCanceledException : Test timed out (elapsed time: 60.0023781)\r\n  Stack Trace:\r\n     at DebuggerTests.DebuggerTestBase.WaitFor(String what) in /_/src/mono/browser/debugger/DebuggerTestSuite/DebuggerTestBase.cs:line 288\r\n   at DebuggerTests.DebuggerTestBase.SendCommandAndCheck(JObject args, String method, String script_loc, Int32 line, Int32 column, String function_name, Func`2 wait_for_event_fn, Func`2 locals_fn, String waitForEvent) in /_/src/mono/browser/debugger/DebuggerTestSuite/DebuggerTestBase.cs:line 692\r\n   at DebuggerTests.DebuggerTestBase.StepAndCheck(StepKind kind, String script_loc, Int32 line, Int32 column, String function_name, Func`2 wait_for_event_fn, Func`2 locals_fn, Int32 times) in /_/src/mono/browser/debugger/DebuggerTestSuite/DebuggerTestBase.cs:line 644\r\n   at DebuggerTests.MiscTests.TestDebugUsingMultiThreadedRuntime(Int32 _attempt) in /_/src/mono/browser/debugger/DebuggerTestSuite/MiscTests.cs:line 1197\r\n--- End of stack trace from previous location ---\r\n  Standard Output Messages:\r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Information: [testId: 14] New test request for test id 14\r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Debug: [14] Starting /root/helix/work/correlation/chrome-linux/chrome with --no-sandbox --headless --disable-gpu --lang=en-US --incognito --remote-debugging-port=0 about:blank\r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Debug: [testId: 13] TestHarnessStartup done\r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Debug: TestHarnessStartup: closing for 13\r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Debug: [testId: 14] browser-stderr [0207/132430.559944:WARNING:bluez_dbus_manager.cc(248)] Floss manager not present, cannot set Floss enable/disable.\r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Debug: [testId: 14] browser-stderr \r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Debug: [testId: 14] browser-stderr DevTools listening on ws://127.0.0.1:44955/devtools/browser/e2f58476-46b9-44ad-af5c-88e26d293a1f\r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Debug: [testId: 14] browser-stderr [0207/132430.588214:WARNING:sandbox_linux.cc(400)] InitializeSandbox() called with multiple threads in process gpu-process.\r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Information: [testId: 14] launching proxy for ws://127.0.0.1:44955/devtools/page/70D97F9E662EC13AF5A8E89EA24D1C56\r\n | [2024-02-07T13:24:30] Inspector-14 Information: waiting for the runtime to be ready\r\n | [2024-02-07T13:24:32] Inspector-14 Information: runtime ready, TEST TIME\r\n | [2024-02-07T13:24:32] Inspector-14 Information: console.log: Thread:4 - y\r\n | [2024-02-07T13:24:32] Inspector-14 Information: console.log: Thread:3 - y\r\n | [2024-02-07T13:24:32] Inspector-14 Information: console.log: Thread:5 - y\r\n\r\n\r\n[xUnit.net 00:02:50.55]     DebuggerTests.MiscTests.TestDebugUsingMultiThreadedRuntime(_attempt: 2) [FAIL]\r\n```\r\n\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdca2RA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5zLnb5",
                                           "createdAt":  "2024-02-07T16:31:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=554985\r\nBuild error leg or test failing: chrome-DebuggerTests.MiscTests.WorkItemExecution\r\nPull request: https://github.com/dotnet/runtime/pull/97992\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssues.md#how-to-fill-out-a-known-issue-error-section).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"Failed DebuggerTests.MiscTests.TestDebugUsingMultiThreadedRuntime\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-98087-merge-515a13ce68e04c0db7/chrome-DebuggerTests.MiscTests/1/console.61fee9a7.log?helixlogtype=result)\r\n\r\n```\r\n[xUnit.net 00:01:47.76]     DebuggerTests.MiscTests.TestDebugUsingMultiThreadedRuntime(_attempt: 0) [FAIL]\r\n  Failed DebuggerTests.MiscTests.TestDebugUsingMultiThreadedRuntime(_attempt: 0) [57 s]\r\n  Error Message:\r\n   System.Threading.Tasks.TaskCanceledException : Test timed out (elapsed time: 60.0023781)\r\n  Stack Trace:\r\n     at DebuggerTests.DebuggerTestBase.WaitFor(String what) in /_/src/mono/browser/debugger/DebuggerTestSuite/DebuggerTestBase.cs:line 288\r\n   at DebuggerTests.DebuggerTestBase.SendCommandAndCheck(JObject args, String method, String script_loc, Int32 line, Int32 column, String function_name, Func`2 wait_for_event_fn, Func`2 locals_fn, String waitForEvent) in /_/src/mono/browser/debugger/DebuggerTestSuite/DebuggerTestBase.cs:line 692\r\n   at DebuggerTests.DebuggerTestBase.StepAndCheck(StepKind kind, String script_loc, Int32 line, Int32 column, String function_name, Func`2 wait_for_event_fn, Func`2 locals_fn, Int32 times) in /_/src/mono/browser/debugger/DebuggerTestSuite/DebuggerTestBase.cs:line 644\r\n   at DebuggerTests.MiscTests.TestDebugUsingMultiThreadedRuntime(Int32 _attempt) in /_/src/mono/browser/debugger/DebuggerTestSuite/MiscTests.cs:line 1197\r\n--- End of stack trace from previous location ---\r\n  Standard Output Messages:\r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Information: [testId: 14] New test request for test id 14\r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Debug: [14] Starting /root/helix/work/correlation/chrome-linux/chrome with --no-sandbox --headless --disable-gpu --lang=en-US --incognito --remote-debugging-port=0 about:blank\r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Debug: [testId: 13] TestHarnessStartup done\r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Debug: TestHarnessStartup: closing for 13\r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Debug: [testId: 14] browser-stderr [0207/132430.559944:WARNING:bluez_dbus_manager.cc(248)] Floss manager not present, cannot set Floss enable/disable.\r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Debug: [testId: 14] browser-stderr \r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Debug: [testId: 14] browser-stderr DevTools listening on ws://127.0.0.1:44955/devtools/browser/e2f58476-46b9-44ad-af5c-88e26d293a1f\r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Debug: [testId: 14] browser-stderr [0207/132430.588214:WARNING:sandbox_linux.cc(400)] InitializeSandbox() called with multiple threads in process gpu-process.\r\n | [2024-02-07T13:24:30] DebuggerTests.TestHarnessProxy Information: [testId: 14] launching proxy for ws://127.0.0.1:44955/devtools/page/70D97F9E662EC13AF5A8E89EA24D1C56\r\n | [2024-02-07T13:24:30] Inspector-14 Information: waiting for the runtime to be ready\r\n | [2024-02-07T13:24:32] Inspector-14 Information: runtime ready, TEST TIME\r\n | [2024-02-07T13:24:32] Inspector-14 Information: console.log: Thread:4 - y\r\n | [2024-02-07T13:24:32] Inspector-14 Information: console.log: Thread:3 - y\r\n | [2024-02-07T13:24:32] Inspector-14 Information: console.log: Thread:5 - y\r\n\r\n\r\n[xUnit.net 00:02:50.55]     DebuggerTests.MiscTests.TestDebugUsingMultiThreadedRuntime(_attempt: 2) [FAIL]\r\n```\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eilonatommy\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `blocking-clean-ci`, `area-VM-threading-mono`, `Known Build Error`, `os-browser`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-07T16:31:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51xrZE",
                                           "createdAt":  "2024-03-04T08:12:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "This test is now disabled on CI, that\u0027s why it doesn\u0027t show up here",
                                           "updatedAt":  "2024-03-04T08:12:36Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[debugger][mt][browser] TestDebugUsingMultiThreadedRuntime times out",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98190",
        "createdAt":  "2024-02-08T22:56:05Z",
        "number":  98190,
        "author":  "kg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-17T09:33:27Z",
        "body":  "As of somewhat recently, `mono_wasm_exit` now calls `mono_jit_cleanup`. I believe this is correct.\r\n\r\nHowever, `mono_jit_cleanup` calls `mono_thread_manage_internal` which (despite its name) appears to be the \u0027shutdown this thread\u0027 API. `mono_thread_manage_internal` calls `mono_runtime_try_shutdown` and critically, if `mono_runtime_try_shutdown` fails, the current thread then blocks waiting for runtime shutdown to finish. The assumption here is that if `mono_runtime_try_shutdown` failed, that means another thread is currently shutting down the runtime.\r\n\r\nThe problem is that the current thread could be the one shutting down the runtime. If you call `System.Environment.Exit`, it also calls `mono_runtime_try_shutdown` in order to begin shutting down the runtime. This also seems correct. Then it attempts to call `exit`, which seems to flow through to `mono_wasm_exit`, triggering shutdown again and hanging. I don\u0027t know of any easy way to fix this.\r\n\r\nMy proposed fix is that the \u0027are we shutting down the runtime\u0027 flag needs to become a \u0027which thread is shutting down the runtime\u0027 variable, so that if a thread attempts to start shutdown a second time, it won\u0027t hang. The implementations of S.E.E and `mono_wasm_exit` both seem right so I think the internals just need to be fixed.\r\n\r\nAs a result of this S.E.E. is broken for wasm apps on main right now, at least in my local testing. It was previously broken and then fixed in 8.0 by me and zoltan, so we probably should add a WBT test for it this time when we fix it again. It feels likely that it is at risk of future regressions.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeFBDaw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5zVrYO",
                                           "createdAt":  "2024-02-08T22:56:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAs of somewhat recently, `mono_wasm_exit` now calls `mono_jit_cleanup`. I believe this is correct.\r\n\r\nHowever, `mono_jit_cleanup` calls `mono_thread_manage_internal` which (despite its name) appears to be the \u0027shutdown this thread\u0027 API. `mono_thread_manage_internal` calls `mono_runtime_try_shutdown` and critically, if `mono_runtime_try_shutdown` fails, the current thread then blocks waiting for runtime shutdown to finish. The assumption here is that if `mono_runtime_try_shutdown` failed, that means another thread is currently shutting down the runtime.\r\n\r\nThe problem is that the current thread could be the one shutting down the runtime. If you call `System.Environment.Exit`, it also calls `mono_runtime_try_shutdown` in order to begin shutting down the runtime. This also seems correct. Then it attempts to call `exit`, which seems to flow through to `mono_wasm_exit`, triggering shutdown again and hanging. I don\u0027t know of any easy way to fix this.\r\n\r\nMy proposed fix is that the \u0027are we shutting down the runtime\u0027 flag needs to become a \u0027which thread is shutting down the runtime\u0027 variable, so that if a thread attempts to start shutdown a second time, it won\u0027t hang. The implementations of S.E.E and `mono_wasm_exit` both seem right so I think the internals just need to be fixed.\r\n\r\nAs a result of this S.E.E. is broken for wasm apps on main right now, at least in my local testing. It was previously broken and then fixed in 8.0 by me and zoltan, so we probably should add a WBT test for it this time when we fix it again. It feels likely that it is at risk of future regressions.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekg\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-VM-threading-mono`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-08T22:56:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5zV458",
                                           "createdAt":  "2024-02-09T00:01:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "cc @steveisok ",
                                           "updatedAt":  "2024-02-09T00:01:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54LaT2",
                                           "createdAt":  "2024-03-23T01:11:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbv0Pg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2024-03-25T09:50:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lewing",
                                           "body":  "@pavelsavara @kg Ilets figure out what the right behavior here is and make sure it happens",
                                           "updatedAt":  "2024-03-23T01:11:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54QpCr",
                                           "createdAt":  "2024-03-25T10:01:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I believe that `mono_thread_manage_internal` is waiting for all threads to shutdown. And it has infinite wait time.\r\nhttps://github.com/dotnet/runtime/blob/330b70cfacc7751ab5ac546ed7138cb8a09c3097/src/mono/mono/metadata/threads.c#L2907-L2911\r\n\r\nOr do I read it wrong ?\r\n\r\nI would prefer if there was \"give up\" timeout. Similar to `MONO_SLEEP_ABORT_LIMIT` of the GC\u0027s stop-the-world.",
                                           "updatedAt":  "2024-03-25T10:01:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54T5Bl",
                                           "createdAt":  "2024-03-25T17:01:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "\u003e I believe that `mono_thread_manage_internal` is waiting for all threads to shutdown. And it has infinite wait time.\r\n\u003e \r\n\u003e https://github.com/dotnet/runtime/blob/330b70cfacc7751ab5ac546ed7138cb8a09c3097/src/mono/mono/metadata/threads.c#L2907-L2911\r\n\u003e \r\n\u003e Or do I read it wrong ?\r\n\u003e \r\n\u003e I would prefer if there was \"give up\" timeout. Similar to `MONO_SLEEP_ABORT_LIMIT` of the GC\u0027s stop-the-world.\r\n\r\nAn abort timeout doesn\u0027t make a ton of sense to me, we\u0027re already tearing down and a timeout means we failed to tear down correctly. I suppose it would mean that this would potentially \"work\", but I think it would be papering over real issues with shutdown.",
                                           "updatedAt":  "2024-03-25T17:01:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54UDg_",
                                           "createdAt":  "2024-03-25T17:24:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODbzjrA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kg",
                                                                               "createdAt":  "2024-03-25T17:25:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I mean abort (fast with non-zero exit code) is better than deadlock/timeout with no exit code at all and no message.",
                                           "updatedAt":  "2024-03-25T17:24:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54UENr",
                                           "createdAt":  "2024-03-25T17:26:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "and we should fix the managed Exit from thread too. I didn\u0027t mean to discard that.",
                                           "updatedAt":  "2024-03-25T17:26:12Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[browser][MT] Mono shutdown hang when a thread calls System.Environment.Exit",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/98214",
        "createdAt":  "2024-02-09T10:51:57Z",
        "number":  98214,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-15T08:35:25Z",
        "body":  "https://github.com/dotnet/runtime/blob/85fbd98765c47a867564fff6ae18cc92423cdc66/src/mono/mono/sgen/sgen-conf.h#L106-L108",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOc2CouQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5zYKi5",
                                           "createdAt":  "2024-02-09T11:00:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nnull\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003epavelsavara\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`arch-wasm`, `area-VM-threading-mono`, `os-browser`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-02-09T11:00:03Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[browser][MT] enable worker threads in sgen GC",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99500",
        "createdAt":  "2024-03-10T19:21:06Z",
        "number":  99500,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-17T09:33:47Z",
        "body":  "- `TaskCoverage.Coverage.TaskAwaiter`\r\n- `TaskCoverage.Coverage.CancellationTokenRegitration`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdnRbrA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc52dFus",
                                           "createdAt":  "2024-03-10T19:21:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-10T19:21:24Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[browser][MT] Deadlock in TaskCoverage.Coverage",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99519",
        "createdAt":  "2024-03-11T08:36:01Z",
        "number":  99519,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-17T09:33:44Z",
        "body":  "Without `-backgroundExec` and with I/O thread\r\n\r\n```\r\nAsyncEnumerableToBlockingEnumerableTests.AsyncEnumerableWithDelays\r\nAsyncEnumerableToBlockingEnumerableTests.AsyncEnumerableWithException\r\nAsyncEnumerableToBlockingEnumerableTests.AsyncEnumerableWithCancellation\r\nTaskContinueWithTests.TestNoDeadlockOnContinueWith\r\nTaskContinueWithTests.LongContinuationChain_Await_DoesNotStackOverflow\r\nSemaphoreSlimTests.RunSemaphoreSlimTest1_WaitAsync_NegativeCases\r\n```\r\n\r\n\r\n[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-99422-merge-bbc73194d9fe4a31ac/WasmTestOnBrowser-System.Threading.Tasks.Tests/1/console.2b167ca6.log?helixlogtype=result)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeAa_6A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc52fJLM",
                                           "createdAt":  "2024-03-11T08:36:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-11T08:36:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc54Br_o",
                                           "createdAt":  "2024-03-21T20:50:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "this is maybe improved by https://github.com/dotnet/runtime/pull/99836, let\u0027s test it again",
                                           "updatedAt":  "2024-03-21T20:50:07Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[browser][MT] Some tests deadlock without -backgroundExec",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/99951",
        "createdAt":  "2024-03-19T10:08:53Z",
        "number":  99951,
        "author":  "mkhamoyan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-17T09:33:51Z",
        "body":  "deadlock in\r\n`WaitAssertsOnSyncCallback` and `WaitAssertsOnSyncJSExport`\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOebrR7A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc53mzAy",
                                           "createdAt":  "2024-03-19T10:09:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-19T10:09:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55utHs",
                                           "createdAt":  "2024-04-08T09:30:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Probably fixed by https://github.com/dotnet/runtime/pull/99833",
                                           "updatedAt":  "2024-04-08T09:30:22Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[browser][MT] deadlocks in JavaScript.Tests.WebWorkerTest",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100373",
        "createdAt":  "2024-03-27T21:41:21Z",
        "number":  100373,
        "author":  "jtschuster",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-18T11:32:40Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=619862\r\nBuild error leg or test failing: Workloads-Wasm.Build.Tests.MT.Blazor.SimpleMultiThreadedTests.WorkItemExecution\r\nPull request: https://github.com/dotnet/runtime/pull/99922\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssues.md#how-to-fill-out-a-known-issue-error-section).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"[\u0027Workloads-Wasm.Build.Tests.MT.Blazor.SimpleMultiThreadedTests\u0027 END OF WORK ITEM LOG: Command timed out, and was killed]\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=619862\r\n**Error message validated:** `[[\u0027Workloads-Wasm.Build.Tests.MT.Blazor.SimpleMultiThreadedTests\u0027 END OF WORK ITEM LOG: Command timed out, and was killed]`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 3/27/2024 9:41:39 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[627476](https://dev.azure.com/dnceng-public/public/_build/results?buildId=627476)|dotnet/runtime|[Workloads-Wasm.Build.Tests.MT.Blazor.SimpleMultiThreadedTests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=627476\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15399554\u0026resultId=100165)|dotnet/runtime#100251|\r\n|[626825](https://dev.azure.com/dnceng-public/public/_build/results?buildId=626825)|dotnet/runtime|[Workloads-Wasm.Build.Tests.MT.Blazor.SimpleMultiThreadedTests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=626825\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15378160\u0026resultId=100165)|dotnet/runtime#100400|\r\n|[626759](https://dev.azure.com/dnceng-public/public/_build/results?buildId=626759)|dotnet/runtime|[Workloads-Wasm.Build.Tests.MT.Blazor.SimpleMultiThreadedTests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=626759\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15375026\u0026resultId=100167)|dotnet/runtime#100407|\r\n|[626284](https://dev.azure.com/dnceng-public/public/_build/results?buildId=626284)|dotnet/runtime|[Workloads-Wasm.Build.Tests.MT.Blazor.SimpleMultiThreadedTests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=626284\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15358966\u0026resultId=100167)|dotnet/runtime#100490|\r\n|[622592](https://dev.azure.com/dnceng-public/public/_build/results?buildId=622592)|dotnet/runtime|[Workloads-Wasm.Build.Tests.MT.Blazor.SimpleMultiThreadedTests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=622592\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15250314\u0026resultId=100165)|dotnet/runtime#100415|\r\n|[619862](https://dev.azure.com/dnceng-public/public/_build/results?buildId=619862)|dotnet/runtime|[Workloads-Wasm.Build.Tests.MT.Blazor.SimpleMultiThreadedTests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=619862\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15203774\u0026resultId=100165)|dotnet/runtime#99922|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|6|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[browser][MT] Wasm.Build.Tests.MT.Blazor.SimpleMultiThreadedTests timed out",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100628",
        "createdAt":  "2024-04-04T09:26:10Z",
        "number":  100628,
        "author":  "maraf",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2_tcw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "pavelsavara",
                                            "createdAt":  "2024-04-04T09:28:55Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-04-24T20:46:18Z",
        "body":  "This is active issue - search for \r\n\r\n`\u003cWasmXHarnessMaxParallelThreads\u003e1\u003c/WasmXHarnessMaxParallelThreads\u003e`\r\n\r\n\r\n```\r\n[FAIL][8] System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests.RentingSpecificLengthsYieldsExpectedLengths(requestedMinimum: 2097152, expectedLength: 2097152)\r\ninfo: System.OutOfMemoryException : Out of memory\r\ninfo:    at System.Buffers.ConfigurableArrayPool`1[[System.String, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Rent(Int32 minimumLength)\r\ninfo:    at System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests.RentingSpecificLengthsYieldsExpectedLengths(Int32 requestedMinimum, Int32 expectedLength)\r\ninfo:    at System.Object.InvokeStub_ArrayPoolUnitTests.RentingSpecificLengthsYieldsExpectedLengths(Object , Span`1 )\r\ninfo:    at System.Reflection.MethodBaseInvoker.InvokeWithFewArgs(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n```\r\n\r\nRunning in parallel disabled. Discovered in https://github.com/dotnet/runtime/pull/98492\r\n\r\n_It seems that GC is unable to keep up with the traffic.\r\nI wonder if Mono on x64 has the same problem but survives this because of more available memory ?_\r\n\r\n\r\n[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-101056-merge-c58adb1a8881497398/WasmTestOnBrowser-System.Buffers.Tests/1/console.de698822.log?helixlogtype=result)\r\n```\r\n[19:21:33] info: [FAIL] System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests.RentAndReturnManyOfTheSameSize_NoneAreSame(pool: SharedArrayPool`1 { })\r\n[19:21:33] info: System.OutOfMemoryException : Out of memory\r\n[19:21:33] info:    at System.GC.AllocateArray[Byte](Int32 length, Boolean pinned)\r\n[19:21:33] info:    at System.Buffers.SharedArrayPool`1[[System.Byte, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Rent(Int32 minimumLength)\r\n[19:21:33] info:    at System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests.RentAndReturnManyOfTheSameSize_NoneAreSame(ArrayPool`1 pool)\r\n[19:21:33] info:    at System.Object.InvokeStub_ArrayPoolUnitTests.RentAndReturnManyOfTheSameSize_NoneAreSame(Object , Span`1 )\r\n[19:21:33] info:    at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n```\r\n\r\n## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=643881\r\n\r\n```json\r\n{\r\n  \"ErrorPattern\": [\"Out of memory\", \"test-browser\"],\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=643881\r\n**Error message validated:** `[Out of memory test-browser`]\r\n**Result validation:** :x: Known issue did not match with the provided build.\r\n**Validation performed at:** 4/16/2024 10:19:20 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOerXvOw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc55ZQWO",
                                           "createdAt":  "2024-04-04T09:26:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-04T09:26:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56te87",
                                           "createdAt":  "2024-04-16T10:18:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I found it still OOM on MT [here](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-101056-merge-c58adb1a8881497398/WasmTestOnBrowser-System.Buffers.Tests/1/console.de698822.log?helixlogtype=result)\r\n\r\nI updated the issue to \"known build error \"",
                                           "updatedAt":  "2024-04-16T10:18:53Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[browser][mt] Running Buffers tests in parallel results in OOM",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101166",
        "createdAt":  "2024-04-17T07:30:12Z",
        "number":  101166,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-26T14:31:05Z",
        "body":  "[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-101138-merge-c3006911f3b84935a1/WasmTestOnBrowser-System.Runtime.Tests/1/console.5b66ee33.log?helixlogtype=result)\r\n```\r\n[20:36:08] info: [FAIL] System.Tests.TimeZoneInfoTests.ChangeLocalTimeZone(id: \"America/Buenos_Aires\")\r\n[20:36:08] info: Assert.Equal() Failure: Strings differ\r\n[20:36:08] info:            ↓ (pos 0)\r\n[20:36:08] info: Expected: \"-03\"\r\n[20:36:08] info: Actual:   \"UTC\"\r\n[20:36:08] info:            ↑ (pos 0)\r\n[20:36:08] info:    at System.Tests.TimeZoneInfoTests.ChangeLocalTimeZone(String id)\r\n[20:36:08] info:    at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\r\n[20:36:08] info:    at System.Reflection.MethodBaseInvoker.InvokeDirectByRefWithFewArgs(Object obj, Span`1 copyOfArgs, BindingFlags invokeAttr)\r\n```\r\n\r\n## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=645791\r\nBuild error leg or test failing: \r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"[FAIL] System.Tests.TimeZoneInfoTests.ChangeLocalTimeZone\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=645791\r\n**Error message validated:** `[[FAIL] System.Tests.TimeZoneInfoTests.ChangeLocalTimeZone`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 4/17/2024 7:32:57 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[646615](https://dev.azure.com/dnceng-public/public/_build/results?buildId=646615)|dotnet/runtime|[WasmTestOnBrowser-System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=646615\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15964038\u0026resultId=179146)|dotnet/runtime#100094|\r\n|[646414](https://dev.azure.com/dnceng-public/public/_build/results?buildId=646414)|dotnet/runtime|[WasmTestOnBrowser-System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=646414\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15959786\u0026resultId=169665)|dotnet/runtime#101168|\r\n|[645791](https://dev.azure.com/dnceng-public/public/_build/results?buildId=645791)|dotnet/runtime|[WasmTestOnBrowser-System.Runtime.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=645791\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=15939066\u0026resultId=179075)|dotnet/runtime#101138|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|3|3|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOg4CYgQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc560dPY",
                                           "createdAt":  "2024-04-17T07:30:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-17T07:30:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc563zwE",
                                           "createdAt":  "2024-04-17T14:52:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODen__A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mkhamoyan",
                                                                               "createdAt":  "2024-04-18T08:46:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lewing",
                                           "body":  "I think we can just skip it on MT for now, its testing that the startup TZ selection works but the mechanism it is using is inherently unsafe in the MT context.",
                                           "updatedAt":  "2024-04-17T14:53:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DgJiB",
                                           "createdAt":  "2024-07-03T14:16:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkhamoyan",
                                           "body":  "As discussed in https://github.com/dotnet/runtime/pull/103953 we need to add additional test case to observe a single non-UI thread performing the change and examining the slow propagation of this change.\r\nThe objective is to understand the underlying mechanism in emscripten and identify the necessary synchronization in mono to prevent issues like \"read after write hazards\".\r\nThis approach will provide clearer insights into the root cause.",
                                           "updatedAt":  "2024-07-03T14:16:33Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[browser][MT] TimeZoneInfoTests.ChangeLocalTimeZone not thread safe",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101481",
        "createdAt":  "2024-04-24T09:40:49Z",
        "number":  101481,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-18T11:14:56Z",
        "body":  "[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-100697-merge-2382c6b95790428b91/WasmTestOnChrome-ST-Common.Tests/1/console.1771950c.log?helixlogtype=result)\r\n```\r\n[19:27:59] fail: MONO_WASM: null function or function signature mismatch\r\nRuntimeError: null function or function signature mismatch\r\n    at xunit.assert_Xunit_Sdk_CollectionTracker_CheckIfEnumerablesAreEqual_Xunit_Sdk_CollectionTracker_Xunit_Sdk_CollectionTracker_System_Collections_IEqualityComparer_bool_System_Nullable_1_int_ (xunit.assert_Xunit_Sdk_CollectionTracker_CheckIfEnumerablesAreEqual_Xunit_Sdk_CollectionTracker_Xunit_Sdk_CollectionTracker_System_Collections_IEqualityComparer_bool_System_Nullable_1_int_ (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[40181]:0xc80abc))\r\n    at xunit.assert_Xunit_Sdk_CollectionTracker_AreCollectionsEqual_Xunit_Sdk_CollectionTracker_Xunit_Sdk_CollectionTracker_System_Collections_IEqualityComparer_bool_System_Nullable_1_int_ (xunit.assert_Xunit_Sdk_CollectionTracker_AreCollectionsEqual_Xunit_Sdk_CollectionTracker_Xunit_Sdk_CollectionTracker_System_Collections_IEqualityComparer_bool_System_Nullable_1_int_ (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[40158]:0xc7e1d7))\r\n    at xunit.assert_Xunit_Sdk_AssertEqualityComparer_1_T_REF_Equals_T_REF_Xunit_Sdk_CollectionTracker_T_REF_Xunit_Sdk_CollectionTracker_System_Nullable_1_int_ (xunit.assert_Xunit_Sdk_AssertEqualityComparer_1_T_REF_Equals_T_REF_Xunit_Sdk_CollectionTracker_T_REF_Xunit_Sdk_CollectionTracker_System_Nullable_1_int_ (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[40157]:0xc7d259))\r\n    at aot-instances_aot_wrapper_gsharedvt_out_sig_u1_this_objobjobjobjbii (aot-instances_aot_wrapper_gsharedvt_out_sig_u1_this_objobjobjobjbii (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[48004]:0xed5a66))\r\n    at jit_call_cb (jit_call_cb (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[63559]:0x142fafe))\r\n    at mono_llvm_cpp_catch_exception (mono_llvm_cpp_catch_exception (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[68929]:0x1555340))\r\n    at mono_llvm_catch_exception (mono_llvm_catch_exception (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[68996]:0x1559a39))\r\n    at do_jit_call (do_jit_call (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[63476]:0x142c256))\r\n    at mono_interp_exec_method (mono_interp_exec_method (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[63471]:0x14201c3))\r\n    at interp_entry (interp_entry (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[63550]:0x142f3c1))\r\n    at interp_entry_static_3 (interp_entry_static_3 (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[63596]:0x1430f79))\r\n    at aot-instances_aot_wrapper_gsharedvt_in_sig_void_objobjobj (aot-instances_aot_wrapper_gsharedvt_in_sig_void_objobjobj (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[46383]:0xe38a02))\r\n    at xunit.assert_Xunit_Assert_Equal_T_REF_T_REF_T_REF_System_Collections_Generic_IEqualityComparer_1_T_REF (xunit.assert_Xunit_Assert_Equal_T_REF_T_REF_T_REF_System_Collections_Generic_IEqualityComparer_1_T_REF (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[40024]:0xc6ecf0))\r\n    at aot-instances_Xunit_Assert_Equal_T_BYTE_System_Collections_Generic_IEnumerable_1_T_BYTE_System_Collections_Generic_IEnumerable_1_T_BYTE (aot-instances_Xunit_Assert_Equal_T_BYTE_System_Collections_Generic_IEnumerable_1_T_BYTE_System_Collections_Generic_IEnumerable_1_T_BYTE (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[45415]:0xe07209))\r\n    at Common.Tests_System_Net_Http_Unit_Tests_HPack_HuffmanDecodingTests_HuffmanDecoding_ValidEncoding_Succeeds (Common.Tests_System_Net_Http_Unit_Tests_HPack_HuffmanDecodingTests_HuffmanDecoding_ValidEncoding_Succeeds (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[688]:0x87373))\r\n    at aot-instances_aot_wrapper_gsharedvt_out_sig_void_this_ (aot-instances_aot_wrapper_gsharedvt_out_sig_void_this_ (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[44920]:0xde5feb))\r\n    at aot-instances_wrapper_runtime_invoke_object_runtime_invoke_sig_void_intptr_intptr_object_intptr_intptr_intptr (aot-instances_wrapper_runtime_invoke_object_runtime_invoke_sig_void_intptr_intptr_object_intptr_intptr_intptr (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[58006]:0x11e1b4e))\r\n    at mono_llvmonly_runtime_invoke (mono_llvmonly_runtime_invoke (http://127.0.0.1:49267/_framework/dotnet.native.wasm:wasm-function[68723]:0x1546371))\r\n```\r\n\r\n## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=653707\r\nBuild error leg or test failing: \r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"null function or function signature mismatch\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=653707\r\n**Error message validated:** `[null function or function signature mismatch`]\r\n**Result validation:** :x: Known issue did not match with the provided build.\r\n**Validation performed at:** 4/24/2024 9:41:34 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1039493](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1039493)|dotnet/runtime|[Wasm.Build.Tests.WasmBuildAppTest.Bug49588_RegressionTest_AOT(config: Release, aot: True)](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1039493\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27957116\u0026resultId=100105)|dotnet/runtime#115408|\r\n|[1038946](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1038946)|dotnet/runtime|[Wasm.Build.Tests.WasmBuildAppTest.Bug49588_RegressionTest_AOT(config: Release, aot: True)](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1038946\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27939018\u0026resultId=100093)|dotnet/runtime#115408|\r\n|[1038719](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1038719)|dotnet/runtime|[Wasm.Build.Tests.SatelliteLoadingTests.LoadSatelliteAssembly](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1038719\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27931204\u0026resultId=100000)|dotnet/runtime#115408|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|2|3|3|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOq0WY4Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc57puRZ",
                                           "createdAt":  "2024-04-24T09:40:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-24T09:40:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57pukH",
                                           "createdAt":  "2024-04-24T09:41:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "cc @kg @BrzVlad ",
                                           "updatedAt":  "2024-04-24T09:41:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57qkxS",
                                           "createdAt":  "2024-04-24T11:48:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkhamoyan",
                                           "body":  "This is caused because of my draft PR https://github.com/dotnet/runtime/pull/101476, I\u0027ll assign this to me.",
                                           "updatedAt":  "2024-04-24T11:48:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57qlkR",
                                           "createdAt":  "2024-04-24T11:50:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e This is caused because of my draft PR #101476, I\u0027ll assign this to me.\r\n\r\nno, this was on my PR https://github.com/dotnet/runtime/pull/100697",
                                           "updatedAt":  "2024-04-24T11:50:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57qq9I",
                                           "createdAt":  "2024-04-24T12:02:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mkhamoyan",
                                           "body":  "\u003e no, this was on my PR #100697\r\n\r\nI see, my bad.",
                                           "updatedAt":  "2024-04-24T12:02:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57uKDa",
                                           "createdAt":  "2024-04-24T19:34:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "cc @steveisok ",
                                           "updatedAt":  "2024-04-24T19:34:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HfYOA",
                                           "createdAt":  "2024-08-07T10:30:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Not all of them are AOT now, some of them are MT.",
                                           "updatedAt":  "2024-08-07T10:30:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HzANS",
                                           "createdAt":  "2024-08-09T16:12:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "Almost all of the ST failures are at `at dotnet.native.wasm.Moq_Moq_ExpressionExtensions_IsMatch_System_Linq_Expressions_Expression_Moq_Match` now",
                                           "updatedAt":  "2024-08-09T16:12:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IbDfB",
                                           "createdAt":  "2024-08-14T13:41:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I hope the the root cause is https://github.com/dotnet/runtime/issues/106200 and fix https://github.com/dotnet/runtime/pull/106313",
                                           "updatedAt":  "2024-08-14T13:41:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IhCFc",
                                           "createdAt":  "2024-08-15T02:02:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "\u003e I hope the the root cause is #106200 and fix #106313\r\n\r\nThat was definitely not all of them",
                                           "updatedAt":  "2024-08-15T02:02:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I0He_",
                                           "createdAt":  "2024-08-18T19:22:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "So far it appears we only have MT failures after the alignment fix?",
                                           "updatedAt":  "2024-08-18T19:22:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I2uAY",
                                           "createdAt":  "2024-08-19T09:00:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Last 2 are MT [Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-heads-main-4f267d3d0e0d49138c/WasmTestOnChrome-MT-System.IO.FileSystem.Tests/1/console.6e8d8c81.log?helixlogtype=result)\r\n```\r\n[09:00:43] fail: [0x000fbb58--UI- 09:00:43.363] MONO_WASM: null function or function signature mismatch\r\n                 RuntimeError: null function or function signature mismatch\r\n                     at call_with_ctx (http://127.0.0.1:41243/_framework/dotnet.native.wasm:wasm-function[8715]:0x228509)\r\n                     at em_task_queue_execute (http://127.0.0.1:41243/_framework/dotnet.native.wasm:wasm-function[8700]:0x227ea2)\r\n                     at receive_notification (http://127.0.0.1:41243/_framework/dotnet.native.wasm:wasm-function[8706]:0x22808e)\r\n                     at em_task_queue_execute (http://127.0.0.1:41243/_framework/dotnet.native.wasm:wasm-function[8700]:0x227ea2)\r\n                     at _emscripten_check_mailbox (http://127.0.0.1:41243/_framework/dotnet.native.wasm:wasm-function[8844]:0x22feac)\r\n                     at callUserCallback (http://127.0.0.1:41243/_framework/dotnet.native.js:8:98666)\r\n                     at checkMailbox (http://127.0.0.1:41243/_framework/dotnet.native.js:8:99197)\r\n```\r\n",
                                           "updatedAt":  "2024-08-19T09:00:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rRZjh",
                                           "createdAt":  "2025-05-12T17:53:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "The issue this was mean to catch is no longer applicable to CI since we aren\u0027t running the MT tests",
                                           "updatedAt":  "2025-05-12T17:53:12Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "[wasm][MT] null function or function signature mismatch",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102040",
        "createdAt":  "2024-05-09T07:17:22Z",
        "number":  102040,
        "author":  "kg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T17:12:48Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=670159\r\nBuild error leg or test failing: WasmTestOnChrome-MT-System.Buffers.Tests.WorkItemExecution\r\nPull request: https://github.com/dotnet/runtime/pull/102029\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": [\"System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests\", \"Tests timed out. Killing driver service pid\"],\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=670159\r\n**Error message validated:** `[System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests Tests timed out. Killing driver service pid`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 5/9/2024 7:17:48 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOihjstQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc59U_oh",
                                           "createdAt":  "2024-05-09T13:22:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-buffers\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-09T13:22:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-Og83",
                                           "createdAt":  "2024-05-17T14:27:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "last few [Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-100675-merge-7b9737d2580e434cb9/WasmTestOnFirefox-MT-System.Buffers.Tests/1/console.b7e078e9.log?helixlogtype=result) [Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-heads-main-7918b4b30eb3431ea0/WasmTestOnChrome-MT-System.Buffers.Tests/1/console.73413c74.log?helixlogtype=result) are caused by OOM\r\n```\r\n[17:15:33] info: [FAIL] System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests.RentAndReturnManyOfTheSameSize_NoneAreSame(pool: ConfigurableArrayPool`1 { })\r\n[17:15:33] info: System.OutOfMemoryException : Out of memory\r\n[17:15:33] info:    at System.Buffers.ConfigurableArrayPool`1.Bucket[[System.Byte, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Rent()\r\n[17:15:33] info:    at System.Buffers.ConfigurableArrayPool`1[[System.Byte, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Rent(Int32 minimumLength)\r\n[17:15:33] info:    at System.Buffers.ArrayPool.Tests.ArrayPoolUnitTests.RentAndReturnManyOfTheSameSize_NoneAreSame(ArrayPool`1 pool) in /_/src/libraries/System.Runtime/tests/System.Buffers.Tests/ArrayPool/UnitTests.cs:line 551\r\n[17:15:33] info:    at System.Object.InvokeStub_ArrayPoolUnitTests.RentAndReturnManyOfTheSameSize_NoneAreSame(Object , Span`1 )\r\n[17:15:33] info:    at System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n```",
                                           "updatedAt":  "2024-05-17T14:27:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KGOfk",
                                           "createdAt":  "2024-08-29T07:20:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "Looks like https://github.com/dotnet/runtime/pull/105246 fixed it\r\n\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|",
                                           "updatedAt":  "2024-08-29T07:20:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KGOy1",
                                           "createdAt":  "2024-08-29T07:21:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "Sorry, it\u0027s `disabled-test`, reopening",
                                           "updatedAt":  "2024-08-29T07:21:18Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "System.Buffers.Tests timeout on wasm MT",
        "labels":  [
                       "arch-wasm",
                       "area-System.Buffers",
                       "disabled-test",
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102615",
        "createdAt":  "2024-05-23T16:37:34Z",
        "number":  102615,
        "author":  "lewing",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T17:19:16Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=685548\r\nBuild error leg or test failing: WasmTestOnFirefox-MT-Microsoft.Extensions.FileSystemGlobbing.Tests.WorkItemExecution\r\nPull request: https://github.com/dotnet/runtime/pull/102489\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": [\"WasmTestRunner\",\"fail\",\"Could not load type of field\"],\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** \r\n**Result validation:** :warning: Validation could not be done without an Azure DevOps build URL on the issue. Please add it to the \"**Build:** :mag_right:\" line.\r\n**Validation performed at:** 10/1/2024 9:46:37 AM UTC\r\n\u003c!-- Known issue validation end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlqskug==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5-0KzM",
                                           "createdAt":  "2024-05-23T16:37:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in area-owners.md if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-23T16:37:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5-0X9j",
                                           "createdAt":  "2024-05-23T17:07:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODi9gaw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lewing",
                                                                               "createdAt":  "2024-05-23T17:12:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@lewing  the ordering in your ErrorMessage array matters.  In the log `geckodriver\tINFO` occurs before `fail: System.TypeLoadException` so the order in the query needs to swap.  I fixed it.",
                                           "updatedAt":  "2024-05-23T17:07:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_STeZ",
                                           "createdAt":  "2024-05-28T15:21:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "similar to https://github.com/dotnet/runtime/issues/102762",
                                           "updatedAt":  "2024-05-28T15:21:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IfrlZ",
                                           "createdAt":  "2024-08-14T22:10:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "This hasn\u0027t been hit in a couple of weeks, keeping open for now but moving to 10",
                                           "updatedAt":  "2024-08-14T22:10:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NT8LT",
                                           "createdAt":  "2024-09-24T09:54:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "[Log](https://helixre107v0xd1eu3ibi6ka.blob.core.windows.net/dotnet-runtime-refs-pull-108061-merge-a2d3fe743657432cb0/WasmTestOnFirefox-MT-System.Console.Manual.Tests/1/console.abeb22ad.log?helixlogtype=result)\r\n```\r\nSystem.TypeLoadException: Could not load type of field \u0027Mono.Options.OptionSet:ValueOption\u0027 (3) due to: \r\nCould not resolve type with token 0100002f from typeref \r\n(expected class \u0027System.Text.RegularExpressions.Regex\u0027 in assembly \u0027netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\u0027) assembly:netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 type:System.Text.RegularExpressions.Regex member:(null)\r\n```\r\n\r\nDo we need memory barrier after we load the assembly from fetch ?",
                                           "updatedAt":  "2024-09-24T09:54:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WqyS6",
                                           "createdAt":  "2024-12-09T12:31:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I thought lot of those issues are only visible on FF, but here we have Chrome specimen.\n\n[Log](https://helixr1107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-heads-main-483ad509fabf46e88e/WasmTestOnChrome-MT-System.IO.Packaging.Tests/1/console.ebcb0878.log?helixlogtype=result)\n```\n[09:18:53] fail: [0x000ebcc8--UI- 09:18:53.626] MONO_WASM: Could not set up parent class, due to: Could not load type of field \u0027Xunit.Xunit2Discoverer:\u003cTestFrameworkAssemblyName\u003ek__BackingField\u0027 (7) due to: Could not load file or assembly \u0027System.Reflection, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\u0027 or one of its dependencies. assembly:xunit.runner.utility.netcoreapp10.dll type:Xunit2Discoverer member:(null)\n                    at Xunit.XunitFrontController.EnsureInitialized()\n                    at Xunit.XunitFrontController.get_InnerController()\n                    at Xunit.XunitFrontController.Find(Boolean includeSourceInformation, IMessageSink messageSink, ITestFrameworkDiscoveryOptions discoveryOptions)\n                    at Microsoft.DotNet.XHarness.TestRunners.Xunit.XUnitTestRunner.Run(Assembly assembly, String assemblyPath)\n```\n\nThat means it\u0027s our problem, not FF",
                                           "updatedAt":  "2024-12-09T12:31:02Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[wasm][mt] fail: System.TypeLoadException: Could not load type of field\"",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102798",
        "createdAt":  "2024-05-29T07:37:55Z",
        "number":  102798,
        "author":  "michaldobrodenka",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-28T16:56:21Z",
        "body":  "### Description\r\n\r\nAfter process uptime 49.7 days, System.Threading.Timer stops ticking. Tested on armv6/linux (which is using mono-vm internally) 7.0.10 build from source. This is probably related to all .NET versions using mono (at least 32bit?).\r\n\r\nIt\u0027s suspicious because it seems like 2^32 milliseconds. This bug is NOT reproducible in 32bit CoreCLR .NETs like linux-arm with the same linux distro.\r\n\r\nNot sure about net8, I\u0027m testing it, but it will take a couple of days :)\r\n\r\n### Reproduction Steps\r\n\r\nrun HelloWorld with timer, after 49.7 days timer will stop ticking\r\n\r\n### Expected behavior\r\n\r\nto tick indefinitely\r\n\r\n### Actual behavior\r\n\r\nstop ticking\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nrestart process\r\n\r\n### Configuration\r\n\r\nyocto-linux, armv6, .net 7.0.10\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgKMd_A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5_ZcuT",
                                           "createdAt":  "2024-05-29T13:09:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaldobrodenka",
                                           "body":  "Could this be related? \r\nIt should be merged and in .net, right?\r\nhttps://github.com/mono/mono/pull/2955",
                                           "updatedAt":  "2024-05-29T13:09:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5_eHNR",
                                           "createdAt":  "2024-05-30T03:18:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "That change was before the repo consolidation and already contained in this repo.\r\n\r\nIt sounds like Y2038 related since it\u0027s ARM32, see #96460",
                                           "updatedAt":  "2024-05-30T03:18:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Aox38",
                                           "createdAt":  "2024-06-10T12:09:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "michaldobrodenka",
                                           "body":  "Ok, problem is also reproducible in dotnet/mono-vm+net8.0+linux",
                                           "updatedAt":  "2024-06-10T12:10:04Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "System.Threading.Timer stops working after 49.7days in dotnet with mono-vm",
        "labels":  [
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104271",
        "createdAt":  "2024-07-02T01:35:44Z",
        "number":  104271,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T23:01:50Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=762078\r\n\r\nBuild error leg or test failing: WasmTestOnFirefox-MT-System.Threading.Tasks.Extensions.Tests.WorkItemExecution\r\nPull request: https://github.com/dotnet/runtime/pull/104202\r\n\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorPattern\": [\"MONO_WASM\",\"index out of bounds\"],\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=762078\r\n**Error message validated:** `[MONO_WASM index out of bounds`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 8/1/2024 4:08:31 PM UTC\r\n\u003c!-- Known issue validation end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwqyVzw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6DOk6D",
                                           "createdAt":  "2024-07-02T01:36:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-infrastructure-libraries\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-02T01:36:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6D-h5t",
                                           "createdAt":  "2024-07-08T14:18:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @directhex, @matouskozak\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-08T14:18:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6EQApl",
                                           "createdAt":  "2024-07-09T21:48:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "/cc @lewing ",
                                           "updatedAt":  "2024-07-09T21:48:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G6TMR",
                                           "createdAt":  "2024-08-01T16:03:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "duplicate of https://github.com/dotnet/runtime/issues/101930 I will close the old one and edit filter here",
                                           "updatedAt":  "2024-08-01T16:03:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bcsVy",
                                           "createdAt":  "2025-01-22T18:36:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "removing blocking-clean-ci as this issue has not been hit in 30 days\n\n24-Hour Hit Count | 7-Day Hit Count | 1-Month Count\n-- | -- | --\n0 | 0 | 0\n",
                                           "updatedAt":  "2025-01-22T18:36:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7CrJXP",
                                           "createdAt":  "2025-09-08T12:34:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "https://github.com/emscripten-core/emscripten/pull/24684",
                                           "updatedAt":  "2025-09-08T12:34:56Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[wasm][mt] mono_wasm_load_runtime () failed RuntimeError: index out of bounds",
        "labels":  [
                       "disabled-test",
                       "area-VM-threading-mono",
                       "Known Build Error",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104492",
        "createdAt":  "2024-07-05T21:09:17Z",
        "number":  104492,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-26T09:50:42Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=731485\r\nBuild error leg or test failing: WasmTestOnFirefox-MT-System.Runtime.InteropServices.JavaScript.Tests.WorkItemExecution\r\nPull request: https://github.com/dotnet/runtime/pull/104483\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"System.Runtime.InteropServices.JavaScript.Tests\u0027 END OF WORK ITEM LOG: Command timed out\",\r\n  \"ErrorPattern\": \"\",\r\n  \"BuildRetry\": true,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=731485\r\n**Error message validated:** `[System.Runtime.InteropServices.JavaScript.Tests\u0027 END OF WORK ITEM LOG: Command timed out`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 7/5/2024 11:13:01 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1107614](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1107614)|dotnet/runtime|[WasmTestOnChrome-MT-System.Runtime.InteropServices.JavaScript.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1107614\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=30367054\u0026resultId=100005)|dotnet/runtime#118048|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|1|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[browser][MT] System.Runtime.InteropServices.JavaScript.Tests CI timeouts",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-VM-threading-mono",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104524",
        "createdAt":  "2024-07-07T16:18:56Z",
        "number":  104524,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-26T09:50:31Z",
        "body":  "[Log](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-104437-merge-1a5227a4f2f14edfbd/WasmTestOnChrome-MT-System.Net.Http.Functional.Tests/1/console.2d539301.log?helixlogtype=result)\n```\n[08:44:06] fail: [0x03534d40-norm 08:44:06.175] [MONO] Why are we setting the target on an unoccupied slot?\n                 Error\n                     at Dl (http://127.0.0.1:35397/_framework/dotnet.runtime.js:3:196181)\n                     at wasm_trace_logger (http://127.0.0.1:35397/_framework/dotnet.native.wasm:wasm-function[196]:0x15634)\n                     at eglib_log_adapter (http://127.0.0.1:35397/_framework/dotnet.native.wasm:wasm-function[698]:0x4f1a2)\n                     at monoeg_g_logv_nofree (http://127.0.0.1:35397/_framework/dotnet.native.wasm:wasm-function[616]:0x4c8a1)\n                     at monoeg_g_log (http://127.0.0.1:35397/_framework/dotnet.native.wasm:wasm-function[618]:0x4c964)\n                     at sgen_gchandle_set_target (http://127.0.0.1:35397/_framework/dotnet.native.wasm:wasm-function[974]:0x5c338)\n                     at sgen_gc_invoke_finalizers (http://127.0.0.1:35397/_framework/dotnet.native.wasm:wasm-function[944]:0x5ab02)\n                     at finalizer_thread (http://127.0.0.1:35397/_framework/dotnet.native.wasm:wasm-function[3138]:0xfb52d)\n                     at start_wrapper (http://127.0.0.1:35397/_framework/dotnet.native.wasm:wasm-function[2796]:0xe2d1d)\n                     at Object.invokeEntryPoint (http://127.0.0.1:35397/_framework/dotnet.native.js:8:69009)\n                     at handleMessage (http://127.0.0.1:35397/_framework/dotnet.native.worker.js:1:2306)\n```\n\n## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=760113\nBuild error leg or test failing: WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution\nPull request: https://github.com/dotnet/runtime/pull/104103\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": [\"Why are we setting the target on an unoccupied slot?\"],\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n### Report\n\n|Build|Definition|Test|Pull Request|\n|---|---|---|---|\n|[760113](https://dev.azure.com/dnceng-public/public/_build/results?buildId=760113)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=760113\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19338586\u0026resultId=190419)|dotnet/runtime#105561|\n|[760656](https://dev.azure.com/dnceng-public/public/_build/results?buildId=760656)|dotnet/runtime|[WasmTestOnChrome-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=760656\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19317254\u0026resultId=187522)|dotnet/runtime#105713|\n|[760477](https://dev.azure.com/dnceng-public/public/_build/results?buildId=760477)|dotnet/runtime|[WasmTestOnChrome-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=760477\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19309764\u0026resultId=100293)|dotnet/runtime#105570|\n|[759644](https://dev.azure.com/dnceng-public/public/_build/results?buildId=759644)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=759644\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19283944\u0026resultId=100288)|dotnet/runtime#99576|\n|[758029](https://dev.azure.com/dnceng-public/public/_build/results?buildId=758029)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=758029\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19231618\u0026resultId=100288)|dotnet/runtime#103271|\n|[757433](https://dev.azure.com/dnceng-public/public/_build/results?buildId=757433)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=757433\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19211472\u0026resultId=100288)|dotnet/runtime#105430|\n|[756209](https://dev.azure.com/dnceng-public/public/_build/results?buildId=756209)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=756209\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19172250\u0026resultId=190623)|dotnet/runtime#105150|\n|[755306](https://dev.azure.com/dnceng-public/public/_build/results?buildId=755306)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=755306\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19150094\u0026resultId=100288)|dotnet/runtime#105424|\n|[754971](https://dev.azure.com/dnceng-public/public/_build/results?buildId=754971)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=754971\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19148010\u0026resultId=190162)|dotnet/runtime#105471|\n|[754555](https://dev.azure.com/dnceng-public/public/_build/results?buildId=754555)|dotnet/runtime|[WasmTestOnChrome-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=754555\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19125010\u0026resultId=100293)|dotnet/runtime#105433|\n|[752591](https://dev.azure.com/dnceng-public/public/_build/results?buildId=752591)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=752591\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19067242\u0026resultId=100288)|dotnet/runtime#105350|\n|[751407](https://dev.azure.com/dnceng-public/public/_build/results?buildId=751407)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=751407\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19028632\u0026resultId=190657)|dotnet/runtime#104957|\n|[750854](https://dev.azure.com/dnceng-public/public/_build/results?buildId=750854)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=750854\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19012902\u0026resultId=190738)|dotnet/runtime#105156|\n|[750406](https://dev.azure.com/dnceng-public/public/_build/results?buildId=750406)|dotnet/runtime|[WasmTestOnChrome-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=750406\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=19000710\u0026resultId=100293)|dotnet/runtime#103103|\n|[750180](https://dev.azure.com/dnceng-public/public/_build/results?buildId=750180)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=750180\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18994176\u0026resultId=100288)|dotnet/runtime#101158|\n|[749845](https://dev.azure.com/dnceng-public/public/_build/results?buildId=749845)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=749845\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18982312\u0026resultId=190731)|dotnet/runtime#103755|\n|[747528](https://dev.azure.com/dnceng-public/public/_build/results?buildId=747528)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=747528\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18910730\u0026resultId=190634)|dotnet/runtime#105027|\n|[745901](https://dev.azure.com/dnceng-public/public/_build/results?buildId=745901)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=745901\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18851828\u0026resultId=100288)|dotnet/runtime#104915|\n|[745267](https://dev.azure.com/dnceng-public/public/_build/results?buildId=745267)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=745267\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18833000\u0026resultId=190639)|dotnet/runtime#104949|\n|[745063](https://dev.azure.com/dnceng-public/public/_build/results?buildId=745063)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=745063\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18827912\u0026resultId=190638)|dotnet/runtime#103755|\n|[744957](https://dev.azure.com/dnceng-public/public/_build/results?buildId=744957)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=744957\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18824756\u0026resultId=100288)|dotnet/runtime#105004|\n|[744298](https://dev.azure.com/dnceng-public/public/_build/results?buildId=744298)|dotnet/runtime|[WasmTestOnChrome-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=744298\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18823744\u0026resultId=190643)|dotnet/runtime#105009|\n|[743972](https://dev.azure.com/dnceng-public/public/_build/results?buildId=743972)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=743972\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18795750\u0026resultId=100288)|dotnet/runtime#104758|\n|[743262](https://dev.azure.com/dnceng-public/public/_build/results?buildId=743262)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=743262\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18775450\u0026resultId=100288)|dotnet/runtime#104552|\n|[742229](https://dev.azure.com/dnceng-public/public/_build/results?buildId=742229)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=742229\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18741974\u0026resultId=100288)|dotnet/runtime#104848|\n|[741642](https://dev.azure.com/dnceng-public/public/_build/results?buildId=741642)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=741642\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18725756\u0026resultId=190597)|dotnet/runtime#104813|\n|[737237](https://dev.azure.com/dnceng-public/public/_build/results?buildId=737237)|dotnet/runtime|[WasmTestOnChrome-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=737237\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18586822\u0026resultId=100293)|dotnet/runtime#104722|\n|[735626](https://dev.azure.com/dnceng-public/public/_build/results?buildId=735626)|dotnet/runtime|[WasmTestOnChrome-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=735626\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18536184\u0026resultId=190574)|dotnet/runtime#104437|\n|[734970](https://dev.azure.com/dnceng-public/public/_build/results?buildId=734970)|dotnet/runtime|[WasmTestOnChrome-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=734970\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18511396\u0026resultId=190282)||\n|[733203](https://dev.azure.com/dnceng-public/public/_build/results?buildId=733203)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=733203\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18458746\u0026resultId=100290)|dotnet/runtime#104552|\n|[732111](https://dev.azure.com/dnceng-public/public/_build/results?buildId=732111)|dotnet/runtime|[WasmTestOnFirefox-MT-System.Net.Http.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=732111\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=18431598\u0026resultId=189375)|dotnet/runtime#104103|\n#### Summary\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\n|---|---|---|\n|0|6|31|\n\u003c!--Known issue error report end --\u003e\n\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqATZWw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6D4BjE",
                                           "createdAt":  "2024-07-07T16:30:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @brzvlad\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-07T16:30:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HARfd",
                                           "createdAt":  "2024-08-02T09:47:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODskAvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2024-08-02T09:50:58Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "Not only `System.Net.Http.Functional.Tests`, e.g. [System.Runtime.InteropServices](https://helixre107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-105299-merge-db91a9546a5b4b30b5/WasmTestOnChrome-MT-System.Runtime.InteropServices.JavaScript.Tests/1/console.f3074913.log?helixlogtype=result). I\u0027m updating the pattern",
                                           "updatedAt":  "2024-08-02T09:47:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NTWdY",
                                           "createdAt":  "2024-09-24T08:49:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Now I\u0027m thinking this could be a root cause https://github.com/dotnet/runtime/issues/107974",
                                           "updatedAt":  "2024-09-24T08:49:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Wqu82",
                                           "createdAt":  "2024-12-09T12:24:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "[Log](https://helixr1107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-110449-merge-3953414b4eae4dfb85/WasmTestOnChrome-MT-System.Net.WebSockets.Client.Tests/1/console.f8f6cf4b.log?helixlogtype=result)\n```\n[06:23:50] fail: [0x02b629a8-norm 06:23:50.912] [MONO] Why are we setting the target on an unoccupied slot?\n                 Error\n                     at ql (http://127.0.0.1:46053/_framework/dotnet.runtime.js:3:199516)\n                     at wasm_trace_logger (http://127.0.0.1:46053/_framework/dotnet.native.wasm:wasm-function[192]:0x154de)\n                     at eglib_log_adapter (http://127.0.0.1:46053/_framework/dotnet.native.wasm:wasm-function[688]:0x4f3d3)\n                     at monoeg_g_logv_nofree (http://127.0.0.1:46053/_framework/dotnet.native.wasm:wasm-function[613]:0x4d4e6)\n                     at monoeg_g_log (http://127.0.0.1:46053/_framework/dotnet.native.wasm:wasm-function[615]:0x4d5a9)\n                     at sgen_gchandle_set_target (http://127.0.0.1:46053/_framework/dotnet.native.wasm:wasm-function[967]:0x5c269)\n                     at sgen_gc_invoke_finalizers (http://127.0.0.1:46053/_framework/dotnet.native.wasm:wasm-function[936]:0x5a990)\n                     at finalizer_thread (http://127.0.0.1:46053/_framework/dotnet.native.wasm:wasm-function[3120]:0xfac20)\n                     at start_wrapper (http://127.0.0.1:46053/_framework/dotnet.native.wasm:wasm-function[2782]:0xe240c)\n                     at Object.invokeEntryPoint (http://127.0.0.1:46053/_framework/dotnet.native.js:8:20071)\n                     at handleMessage (http://127.0.0.1:46053/_framework/dotnet.native.worker.mjs:1:2379)\n[06:23:50] fail: \n[06:23:50] fail: \"Finalizer\" tid=0x2b629a8 this=0x1c58260 , thread handle : 0x1d125d8, state : not waiting\n```",
                                           "updatedAt":  "2024-12-09T12:24:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oBNlb",
                                           "createdAt":  "2025-04-21T15:59:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEPF-eA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lewing",
                                                                               "createdAt":  "2025-04-21T16:00:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "removing blocking-clean-ci as it has not failed in 30 days\n\n24-Hour Hit Count | 7-Day Hit Count | 1-Month Count\n-- | -- | --\n0 | 0 | 0\n",
                                           "updatedAt":  "2025-04-21T15:59:29Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[browser][MT] System.Net.Http.Functional.Tests failure (\"Why are we setting the target on an unoccupied slot?\")",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-GC-mono",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104889",
        "createdAt":  "2024-07-15T11:56:04Z",
        "number":  104889,
        "author":  "maraf",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T23:01:59Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=738612\r\nBuild error leg or test failing: build_browser_wasm_linux_Release_LibraryTests_Threading\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": \"[MONO] ReleaseJSOwnedObjectByGCHandle: Unexpected synchronous failure\",\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=738612\r\n**Error message validated:** `[[MONO] ReleaseJSOwnedObjectByGCHandle: Unexpected synchronous failure`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 7/15/2024 11:56:32 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhueAAA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6FqivD",
                                           "createdAt":  "2024-07-22T09:37:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "`ArgumentNullException: Value cannot be null. (Parameter \u0027key\u0027)` probably here\r\n\r\nhttps://github.com/dotnet/runtime/blob/7dd68f40ab9ae6f631d79b76f2d9b464f7ecee36/src/libraries/System.Runtime.InteropServices.JavaScript/src/System/Runtime/InteropServices/JavaScript/JSProxyContext.cs#L416C30-L416C50\r\n\r\nI\u0027m not sure why yet\r\n\r\n```\r\n[07:56:30] info: [FAIL] System.Runtime.InteropServices.JavaScript.Tests.JSImportTest.JsImportArraySegmentOfInt32\r\n[07:56:30] info: System.NullReferenceException : Object reference not set to an instance of an object.\r\n[07:56:30] info:    at System.Runtime.InteropServices.JavaScript.JSMarshalerArgument.ToManaged(ArraySegment`1\u0026 )\r\n[07:56:30] info:    at System.Runtime.InteropServices.JavaScript.Tests.JavaScriptTestHelper.echo1_ArraySegmentOfInt32(ArraySegment`1 value, Boolean edit)\r\n[07:56:30] info:    at System.Runtime.InteropServices.JavaScript.Tests.JSImportTest.JsImportArraySegmentOfInt32()\r\n[07:56:30] info:    at System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\r\n[07:56:30] info:    at System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object , BindingFlags )\r\n\r\n[07:56:47] warn: [0x025e3650--IO- 07:56:47.668] [MONO] Process terminated.\r\n[07:56:47] warn: [0x025e3650--IO- 07:56:47.669] [MONO] ReleaseJSOwnedObjectByGCHandle: Unexpected synchronous failure (ManagedThreadId 4): System.ArgumentNullException: Value cannot be null. (Parameter \u0027key\u0027)\r\n                    at System.Collections.Generic.Dictionary`2[[System.Object, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IntPtr, System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].Remove(Object key)\r\n                    at System.Runtime.InteropServices.JavaScript.JSProxyContext.ReleaseJSOwnedObjectByGCHandle(IntPtr )\r\n                    at System.Runtime.InteropServices.JavaScript.JavaScriptExports.ReleaseJSOwnedObjectByGCHandle(JSMarshalerArgument* arguments_buffer)\r\n[07:56:47] fail: \r\n[07:56:47] fail: \"\u003cunnamed thread\u003e\" tid=0x25e3650 this=0x2440600 , thread handle : 0x25dedb8, state : not waiting\r\n[07:56:47] fail:   at \u003cunknown\u003e \u003c0xffffffff\u003e\r\n[07:56:47] fail:   at (wrapper managed-to-native) System.Environment.FailFast (string,System.Exception,string) [0x00000] in \u003c5ba192def01b42bbbaf411546e531d7c\u003e:0\r\n[07:56:47] fail:   at System.Environment.FailFast (string) [0x00000] in \u003c5ba192def01b42bbbaf411546e531d7c\u003e:0\r\n[07:56:47] fail:   at System.Runtime.InteropServices.JavaScript.JavaScriptExports.ReleaseJSOwnedObjectByGCHandle (System.Runtime.InteropServices.JavaScript.JSMarshalerArgument*) [0x00055] in \u003c4b51ee87204f4122a4af4672959d537e\u003e:0\r\n[07:56:47] fail:   at (wrapper runtime-invoke) \u003cModule\u003e.runtime_invoke_direct_void_JSMarshalerArgument* (object,intptr,intptr,intptr) [0x0002d] in \u003c4b51ee87204f4122a4af4672959d537e\u003e:0\r\n\r\n```",
                                           "updatedAt":  "2024-07-22T09:37:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6G54AA",
                                           "createdAt":  "2024-08-01T15:10:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "maybe GCHandle use-after-free related to https://github.com/dotnet/runtime/issues/104524",
                                           "updatedAt":  "2024-08-01T15:10:36Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[browser][MT] ReleaseJSOwnedObjectByGCHandle: Unexpected synchronous failure",
        "labels":  [
                       "area-VM-threading-mono",
                       "area-System.Runtime.InteropServices.JavaScript",
                       "Known Build Error",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106176",
        "createdAt":  "2024-08-09T06:33:15Z",
        "number":  106176,
        "author":  "srxqds",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-24T03:52:24Z",
        "body":  "we have the test code show below:\r\n```c#\r\npublic void TestGetSingleton()\r\n{\r\n\tTestGetSingletonThreadSafe();\r\n\r\n\tvoid TestGetSingletonThreadSafe()\r\n\t{\r\n\t\tvoid MyThreadMethod()\r\n\t\t{\r\n\t\t\tFModuleManager.Get();\r\n\t\t}\r\n\r\n\t\tThread thread = new Thread(new ThreadStart(MyThreadMethod));\r\n\r\n\t\tthread.Start();\r\n\t\tFModuleManager.Get();\r\n\t\tthread.Join();\r\n\t\t\r\n\t}\r\n}\r\n\r\n// and the FModuleManager code:\r\npublic partial class FModuleManager : ScriptingWrapperOfType\r\n{\r\n\t[MethodImpl(MethodImplOptions.InternalCall)]\r\n\tpublic static extern FModuleManager Get();\r\n}\r\n```\r\n\r\nwe have use`mono_gc_walk_heap`  analyze the `FModuleManager` not been gc, No other code references.\r\n\r\n\u003e gc_heap_walk the alc Engine_1(000002B71AF875A0) has object(UnrealEngine.FModuleManager) 000002B77455B060 live\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjUReHQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6HvAsr",
                                           "createdAt":  "2024-08-09T06:37:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "it seems not free the thread stack??",
                                           "updatedAt":  "2024-08-09T06:51:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HyGIy",
                                           "createdAt":  "2024-08-09T14:18:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hez2010",
                                           "body":  "try changing the line `Thread thread = new Thread(new ThreadStart(MyThreadMethod));` to `using Thread thread = new Thread(new ThreadStart(MyThreadMethod));`",
                                           "updatedAt":  "2024-08-09T14:18:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6INSIN",
                                           "createdAt":  "2024-08-13T01:40:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "\u003e try changing the line `Thread thread = new Thread(new ThreadStart(MyThreadMethod));` to `using Thread thread = new Thread(new ThreadStart(MyThreadMethod));`\r\n\r\nthe Thread class not implemented System.IDisposable\r\n",
                                           "updatedAt":  "2024-08-13T01:40:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6NRF4d",
                                           "createdAt":  "2024-09-24T03:52:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "srxqds",
                                           "body":  "anyone can help to review this problem?",
                                           "updatedAt":  "2024-09-24T03:52:23Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[mono] thread not been gc when method execute end.",
        "labels":  [
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106788",
        "createdAt":  "2024-08-21T22:29:42Z",
        "number":  106788,
        "author":  "MackinnonBuck",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-17T09:33:17Z",
        "body":  "### Description\r\n\r\nWhen `\u003cWasmEnableThreads\u003e` is set to `true`, awaiting a `Task` returned by a `[JSImport]` method may cause a deadlock, even if the associated JS `Promise` is just a `Promise.resolve()`.\r\n\r\nThis is likely the cause of the following test failures we\u0027ve been seeing in [dotnet/aspnetcore](https://github.com/dotnet/aspnetcore):\r\n* https://github.com/dotnet/aspnetcore/issues/54761\r\n* https://github.com/dotnet/aspnetcore/issues/54754\r\n\r\nWhen I repro\u0027d the failures locally, the test app was deadlocking in an interop call made by the framework [here](https://github.com/dotnet/aspnetcore/blob/ec33b047f112fdfbcca46621a41fec60a043b0be/src/Components/WebAssembly/WebAssembly/src/Hosting/WebAssemblyCultureProvider.cs#L72).\r\n\r\nHowever, a much simpler scenario can reproduce the same issue. Here\u0027s some of the code from my [minimal repro project](https://github.com/MackinnonBuck/dotnet-wasm-repro):\r\n\r\n```csharp\r\nusing System.Runtime.InteropServices.JavaScript;\r\nusing System.Threading.Tasks;\r\n\r\nJS.Log(\"Started...\");\r\nawait JS.GetEmptyPromiseAsync();\r\nJS.Log(\"Complete, reloading...\");\r\nJS.Reload();\r\n\r\npartial class JS\r\n{\r\n    [JSImport(\"log\", \"main.js\")]\r\n    internal static partial void Log(string message);\r\n\r\n    [JSImport(\"getEmptyPromise\", \"main.js\")]\r\n    internal static partial Task GetEmptyPromiseAsync();\r\n\r\n    [JSImport(\"globalThis.location.reload\")]\r\n    internal static partial void Reload();\r\n}\r\n```\r\n\r\nThis repeatedly reloads the page until the deadlock occurs. On my machine, the deadlock happens within ~10 refreshes.\r\n\r\n### Reproduction Steps\r\n\r\n1. Download the latest .NET 9 Preview 7 build from https://github.com/dotnet/sdk/blob/main/documentation/package-table.md\r\n2. Clone https://github.com/MackinnonBuck/dotnet-wasm-repro\r\n3. From the root of the repro project, run the following:\r\n    * `dotnet workload install wasm-tools --include-previews`\r\n    * `dotnet workload install wasm-experimental --include-previews`\r\n    * `dotnet tool install dotnet-serve`\r\n    * `dotnet publish`\r\n4. From the `wwwroot` folder in the published output, run:\r\n    * `dotnet serve -h \"Cross-Origin-Embedder-Policy:require-corp\" -h \"Cross-Origin-Opener-Policy:same-origin\"`\r\n5. Open the outputted URL in any web browser\r\n6. Observe the deadlock:\r\n    * The page will repeatedly refresh until the deadlock occurs\r\n    * When the deadlock happens, the page will look something like this:\r\n      ![image](https://github.com/user-attachments/assets/32b411c4-b05f-46aa-8c9d-dd026f100f62)\r\n\r\n\r\n### Expected behavior\r\n\r\nA deadlock does not happen, and the webpage continues to refresh indefinitely.\r\n\r\n### Actual behavior\r\n\r\nThe page freezes within ~10 page reloads.\r\n\r\n### Regression?\r\n\r\nUnsure - I unfortunately wasn\u0027t able to get the repro to run on a .NET 8 TFM and SDK.\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n#### .NET SDK:\r\n* **Version**: 9.0.100-preview.7.24407.12\r\n* **Commit**: d672b8a045\r\n\r\n#### OS\r\nWindows 11 Enterprise 23H2\r\n\r\n#### Architecture\r\nx64\r\n\r\n#### Do you know whether it is specific to that configuration?\r\nNo\r\n\r\n#### Which web browser(s) do you see this issue in?\r\nI was able to repro this in:\r\n* Microsoft Edge\r\n* Google Chrome\r\n* Mozilla Firefox\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOih85GQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6JR3mo",
                                           "createdAt":  "2024-08-21T22:29:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-21T22:29:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JUwPt",
                                           "createdAt":  "2024-08-22T06:54:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "Most probably connected with https://github.com/dotnet/runtime/issues/104772. I am gonna check if the fix is backporting https://github.com/dotnet/runtime/pull/105464",
                                           "updatedAt":  "2024-08-22T06:54:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JbQQD",
                                           "createdAt":  "2024-08-22T20:57:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvcj5w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ilonatommy",
                                                                               "createdAt":  "2024-08-23T07:31:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MackinnonBuck",
                                           "body":  "@ilonatommy, I realized my original comment mentioned \".NET 8 Preview 7\", but I actually meant \".NET **9** Preview 7\". Sorry if that created any confusion!\r\n\r\nI just tried the repro again from the latest `main` installer in [this table](https://github.com/dotnet/sdk/blob/main/documentation/package-table.md), which should contain the fix from #105464, and the problem still reproduces for me.",
                                           "updatedAt":  "2024-08-22T20:57:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JvmTo",
                                           "createdAt":  "2024-08-26T19:47:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODvz2CA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2024-08-27T10:58:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "@pavelsavara, the problem is real and can be reproduced by using the threading sample on main.\r\nThe minimal requirement is async `JsImport` (triggering threads without interop does not deadlock, e.g. exchanging \r\n`await JS.GetEmptyPromiseAsync();` for\r\n`await Task.Run(async ()=\u003e{  JS.Log($\"ID: {Environment.CurrentManagedThreadId}\");  });` works fine),\r\nand reloading the page. Calling `async JsImport` function without re-initializing the threads (no page reload) does not deadlock either.",
                                           "updatedAt":  "2024-08-26T19:47:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KHMf7",
                                           "createdAt":  "2024-08-29T09:27:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "![image](https://github.com/user-attachments/assets/b5b7ad62-cb50-4aac-a211-0631e4dc5fdf)\r\n\r\nthis one is updated version of the truncated one, I caught the same place again.\r\n![image](https://github.com/user-attachments/assets/1819c156-520d-4bc4-8360-52bbd9501e7c)\r\n\r\n![image](https://github.com/user-attachments/assets/cfbf9561-2a98-4298-9542-9614dd3a3b2a)",
                                           "updatedAt":  "2024-08-29T11:14:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KHjim",
                                           "createdAt":  "2024-08-29T10:12:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "my theory: all 3 screenshots are showing\r\n- UI thread doing spin-lock, while trying to lock something inside of memory allocator. \r\n- and this lock is held by some other thread (also inside of allocator) , forever\r\n- I think that it could only happen if the other thread is trying to call some syscall, which is proxied to UI thread\r\n- but the message can\u0027t arrive because, the UI thread is busy spin-waiting for that mutex\r\n- proxied message could be related to memory growth\r\n- I wonder if we are proxying `memory.growth()` to UI thread from inside locked allocator\r\n\r\n@kg \r\n\r\n",
                                           "updatedAt":  "2024-08-29T10:12:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KHlut",
                                           "createdAt":  "2024-08-29T10:16:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "It could be also problem in emscripten code. \r\n\r\nAllocation happens with inside `do_proxy() -\u003e get_or_add_tasks_for_thread()` inside of `pthread_mutex_lock(\u0026q-\u003emutex);`\r\n\r\nBut it seems to me that in our case, the target queue is queue of IO thread, not the UI thread.",
                                           "updatedAt":  "2024-08-29T10:18:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6KHzkZ",
                                           "createdAt":  "2024-08-29T10:46:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "More stacks (same stack result was produced in several different runs, the only difference - non-truncated last thread dump. I stop collecting):\r\nmain [0]\r\n![image](https://github.com/user-attachments/assets/58cc0ce2-9502-4d27-ba69-8a50d8ae3f04)\r\n\r\ndeputy [1]\r\n![image](https://github.com/user-attachments/assets/6f38b904-9362-440b-b7ed-d5a0ddbf1099)\r\n\r\nIO [2]\r\n![image](https://github.com/user-attachments/assets/3302b348-738b-4220-898b-0641e0d59637)\r\n\r\nnorm [3]\r\n![image](https://github.com/user-attachments/assets/70183327-69b1-4554-834a-3f5e33750c87)\r\n\r\npool [4] won\u0027t break\r\n\r\ngate [5]\r\n![image](https://github.com/user-attachments/assets/1ce5bae6-0e0a-4a23-8a25-0b9ee23149c7)\r\n\r\nemscripten pool [6] won\u0027t break, the only one that is not running (last log of thread dump when the app was running)\r\n![image](https://github.com/user-attachments/assets/be5e391c-0dd6-4f54-b9ab-931914bcf7d5)\r\n\r\nAfter the app froze, dump of threads:\r\n![image](https://github.com/user-attachments/assets/1139f559-31ea-49d7-9cee-8d4c9f779e44)\r\n\r\n",
                                           "updatedAt":  "2024-08-29T11:27:10Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[browser][mt] Awaiting a `Task` returned by a `[JSImport]` method sometimes causes a deadlock",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107530",
        "createdAt":  "2024-09-09T06:54:36Z",
        "number":  107530,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T17:35:09Z",
        "body":  "Log\r\n```\r\n      [Debug_nww2llne_rax] impatient delay was canceled as expected\r\n      [Debug_nww2llne_rax] 1st impatientClient was canceled as expected\r\n      [Debug_nww2llne_rax] \r\n      [Debug_nww2llne_rax] Unhandled Exception:\r\n      [Debug_nww2llne_rax] System.AggregateException: AggregateException_ctor_DefaultMessage (request should have timed out)\r\n      [Debug_nww2llne_rax]  ---\u003e System.Exception: request should have timed out\r\n      [Debug_nww2llne_rax]    at WasiMainWrapper.MainAsync(String[] args)\r\n      [Debug_nww2llne_rax]    Exception_EndOfInnerExceptionStack\r\n      [Debug_nww2llne_rax]    at System.Threading.Thread.PollWasiEventLoopUntilResolved(Task`1 mainTask)\r\n      [Debug_nww2llne_rax]    at WasiMainWrapper.Main(String[] args)\r\n      [Debug_nww2llne_rax] \r\n      [Debug_nww2llne_rax] Unhandled Exception:\r\n      [Debug_nww2llne_rax] System.AggregateException: AggregateException_ctor_DefaultMessage (request should have timed out)\r\n      [Debug_nww2llne_rax]  ---\u003e System.Exception: request should have timed out\r\n      [Debug_nww2llne_rax]    at WasiMainWrapper.MainAsync(String[] args)\r\n      [Debug_nww2llne_rax]    Exception_EndOfInnerExceptionStack\r\n      [Debug_nww2llne_rax]    at System.Threading.Thread.PollWasiEventLoopUntilResolved(Task`1 mainTask)\r\n      [Debug_nww2llne_rax]    at WasiMainWrapper.Main(String[] args)\r\n```\r\n\r\n## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=799699\u0026view=logs\u0026jobId=9c08ee28-c5cd-54b8-6ae3-9fcb797291cc\r\nBuild error leg or test failing: `Wasi.Build.Tests.HttpTests.HttpBuildThenRunThenPublish`\r\n\u003c!-- Error message template  --\u003e\r\n## Error Message\r\n\r\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\r\n\r\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\r\n\r\n```json\r\n{\r\n  \"ErrorMessage\": [\"wasmtime run\",\"request should have timed out\"],\r\n  \"BuildRetry\": false,\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=799699\r\n**Error message validated:** `[wasmtime run request should have timed out`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 9/9/2024 6:54:57 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOi0__Eg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6LT_8S",
                                           "createdAt":  "2024-09-09T06:54:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-09T06:54:45Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[WASI] Wasi.Build.Tests.HttpTests.HttpBuildThenRunThenPublish",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-VM-threading-mono",
                       "os-wasi"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109636",
        "createdAt":  "2024-11-08T11:55:03Z",
        "number":  109636,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-14T17:10:52Z",
        "body":  "[Log](https://helixr1107v0xdcypoyl9e7f.blob.core.windows.net/dotnet-runtime-refs-pull-109584-merge-91598a8c6e3f42239d/WasmTestOnFirefox-MT-System.Diagnostics.Tools.Tests/1/console.94e2b549.log?helixlogtype=result)\n\n```\n[18:14:00] info: 006 |           -    : isRunning:false isAttached:false isEventLoop:false reuseCount:  0 - emscripten-pool\nJavaScript error: http://127.0.0.1:39061/_framework/dotnet.runtime.js, line 3: Error: The handle is invalid.\n[18:14:00] fail: [0x000ebc38--UI- 18:14:00.975] MONO_WASM: The handle is invalid.\n                    at System.Reflection.MethodBase.GetMethodFromHandle(RuntimeMethodHandle handle)\n                    at System.Runtime.InteropServices.JavaScript.JSHostImplementation.CallEntrypoint(IntPtr assemblyNamePtr, String[] args, Boolean waitForDebugger)\n                 ManagedError@http://127.0.0.1:39061/_framework/dotnet.runtime.js:3:37412\n                 un@http://127.0.0.1:39061/_framework/dotnet.runtime.js:3:27191\n                 cn/\u003c@http://127.0.0.1:39061/_framework/dotnet.runtime.js:3:26754\n                 ql\u003c/\u003c/\u003c@http://127.0.0.1:39061/_framework/dotnet.runtime.js:3:201014\n                 ql\u003c/\u003c@http://127.0.0.1:39061/_framework/dotnet.runtime.js:3:201135\n                 callUserCallback@http://127.0.0.1:39061/_framework/dotnet.native.js:8:98666\n                 createDotnetRuntime/safeSetTimeout/createDotnetRuntime\u003c@http://127.0.0.1:39061/_framework/dotnet.native.js:8:106269\n[18:14:01] info: WASM EXIT 1\n```\n\n## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=863764\u0026view=logs\u0026jobId=f02b8cf9-dd4d-54fc-c292-2bb1d305b019\nBuild error leg or test failing: \n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"MONO_WASM: The handle is invalid\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=863764\r\n**Error message validated:** `[MONO_WASM: The handle is invalid`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 11/8/2024 11:55:26 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOkuYKsg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6S5gqy",
                                           "createdAt":  "2024-11-08T11:55:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-08T11:55:14Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[browser][MT] JSHostImplementation.CallEntrypoint - The handle is invalid",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109945",
        "createdAt":  "2024-11-19T05:03:42Z",
        "number":  109945,
        "author":  "jkotas",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-26T09:49:54Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=872333\nBuild error leg or test failing: System.Net.WebSockets.Client.Tests.AbortTest.ClientWebSocket_Abort_CloseOutputAsync(server: ws://127.0.0.1:44511/WebSocket/EchoWebSocket.ashx)\nPull request: https://github.com/dotnet/runtime/pull/109929\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"System.IO.FileNotFoundException : Could not load file or assembly \u0027xunit.assert\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=872333\r\n**Error message validated:** `[System.IO.FileNotFoundException : Could not load file or assembly \u0027xunit.assert`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 11/19/2024 5:04:05 AM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlOoS-Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6UGcKc",
                                           "createdAt":  "2024-11-19T05:04:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-infrastructure-libraries\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-19T05:04:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6UG8lx",
                                           "createdAt":  "2024-11-19T07:01:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-19T07:01:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6U6apP",
                                           "createdAt":  "2024-11-25T15:31:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ilonatommy",
                                           "body":  "Tests that use reflection fail:\n```\nat System.Reflection.MethodBaseInvoker.InterpretedInvoke_Method(Object obj, IntPtr* args)\nat System.Reflection.MethodBaseInvoker.InvokeWithNoArgs(Object obj, BindingFlags invokeAttr)\n```\n```\nat System.Object.InvokeStub_ResourceReaderTests.ReadResource(Object , Span`1 )\nat System.Reflection.MethodBaseInvoker.InvokeWithOneArg(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\n```\n@pavelsavara I am not sure what\u0027s the cause, I will try to block the failing ones",
                                           "updatedAt":  "2024-11-25T15:31:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6U6hL5",
                                           "createdAt":  "2024-11-25T15:42:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "I _think_ there would be too many to disable, because it\u0027s some race condition during startup.\nPossibly same reason as https://github.com/dotnet/runtime/issues/102615",
                                           "updatedAt":  "2024-11-25T15:42:10Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[MT][Firefox] Wasm test failure: System.IO.FileNotFoundException : Could not load file or assembly `xunit.assert`",
        "labels":  [
                       "arch-wasm",
                       "disabled-test",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111369",
        "createdAt":  "2025-01-13T20:02:33Z",
        "number":  111369,
        "author":  "carlossanlop",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T23:02:53Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=904846\nBuild error leg or test failing: WasmTestOnFirefox-MT-System.IO.FileSystem.Tests.WorkItemExecution\nPull request: https://github.com/dotnet/runtime/pull/110992\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"MONO_WASM: unaligned memory access\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n- Log: https://helixr1107v0xd1eu3ibi6ka.blob.core.windows.net/dotnet-runtime-refs-pull-110992-merge-e77b499849ab4506ab/WasmTestOnFirefox-MT-System.IO.FileSystem.Tests/1/console.315a2f45.log?helixlogtype=result\nOutput:\n```\n[06:42:14] info: [PASS] System.IO.Tests.FileInfo_OpenText.OutputIsTheSameAsForStreamWriter_Overwrite\n[06:42:14] info: [STRT] System.IO.Tests.FileInfo_OpenText.OutputIsTheSameAsForStreamWriter_Overwrite(content: \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz\"···, encoding: UnicodeEncoding { BodyName = \"utf-16\", CodePage = 1200, DecoderFallback = DecoderReplacementFallback { DefaultString = \"�\", MaxCharCount = 1 }, EncoderFallback = EncoderReplacementFallback { DefaultString = \"�\", MaxCharCount = 1 }, EncodingName = \"Unicode\", ··· })\n[06:42:14] info: [PASS] System.IO.Tests.FileInfo_OpenText.OutputIsTheSameAsForStreamWriter_Overwrite\n[06:42:14] info: [STRT] System.IO.Tests.FileInfo_OpenText.OutputIsTheSameAsForStreamWriter_Overwrite(content: null, encoding: UTF8Encoding { BodyName = \"utf-8\", CodePage = 65001, DecoderFallback = DecoderReplacementFallback { DefaultString = \"�\", MaxCharCount = 1 }, EncoderFallback = EncoderReplacementFallback { DefaultString = \"�\", MaxCharCount = 1 }, EncodingName = \"Unicode (UTF-8)\", ··· })\n[06:42:14] fail: [0x000fba88--UI- 06:42:14.812] MONO_WASM: Unhandled error: RuntimeError: unaligned memory access\n[06:42:14] info: [0x000fba88--UI- 06:42:14.813] MONO_WASM: Dumping web worker info as seen by UI thread, it could be stale:\n[06:42:14] info: 000 | 0x000fba88--UI-: isRunning: true isAttached: true isEventLoop:false reuseCount:  0 - UI Thread\n[06:42:14] info: 001 | 0x01c449c0-dpty: isRunning: true isAttached: true isEventLoop:false reuseCount:  1 -\n[06:42:14] info: 002 | 0x0358c598--IO-: isRunning: true isAttached: true isEventLoop:false reuseCount:  1 -\n[06:42:14] info: 003 | 0x03a94850-norm: isRunning: true isAttached: true isEventLoop:false reuseCount:  1 - Finalizer\n[06:42:14] info: 005 | 0x047c8030-gate: isRunning: true isAttached: true isEventLoop:false reuseCount:  1 - .NET TP Gate\n[06:42:14] info: 011 | 0x041a3310-pool: isRunning: true isAttached: true isEventLoop:false reuseCount:  1 - .NET TP Worker\n[06:42:14] info: 006 | 0x09d10030-pool: isRunning: true isAttached: true isEventLoop:false reuseCount:  4 - .NET TP Worker\n[06:42:14] info: 008 | 0x07ce0000-pool: isRunning: true isAttached: true isEventLoop:false reuseCount:  3 - .NET TP Worker\n[06:42:14] info: 004 | --041a3310-emsc: isRunning:false isAttached:false isEventLoop:false reuseCount:  2 - unregistered:(.NET TP Worker)\n[06:42:14] info: 010 | --096002b0-emsc: isRunning:false isAttached:false isEventLoop:false reuseCount:  1 - unregistered:(.NET TP Worker)\n[06:42:14] info: 007 | --07ace068-emsc: isRunning:false isAttached:false isEventLoop:false reuseCount:  2 - unregistered:(.NET TP Worker)\n[06:42:14] info: 009 | --09d10030-emsc: isRunning:false isAttached:false isEventLoop:false reuseCount:  1 - unregistered:(.NET TP Worker)\n[06:42:14] fail: [0x000fba88--UI- 06:42:14.837] MONO_WASM: unaligned memory access\n                 @_emscripten_check_mailbox (http://127.0.0.1:45611/_framework/dotnet.native.wasm:wasm-function[8601]:0x2245ce\n                 @http://127.0.0.1:45611/_framework/dotnet.native.wasm:wasm-function[8717]:0x2294ed\n                 @http://127.0.0.1:45611/_framework/dotnet.native.wasm:wasm-function[8710]:0x228f63\n                 @http://127.0.0.1:45611/_framework/dotnet.native.wasm:wasm-function[8699]:0x22830d\n                 @http://127.0.0.1:45611/_framework/dotnet.native.wasm:wasm-function[8696]:0x22829f\n                 @http://127.0.0.1:45611/_framework/dotnet.native.wasm:wasm-function[8681]:0x227c36\n                 @http://127.0.0.1:45611/_framework/dotnet.native.wasm:wasm-function[8687]:0x227e22\n                 @http://127.0.0.1:45611/_framework/dotnet.native.wasm:wasm-function[8681]:0x227c36\n                 @http://127.0.0.1:45611/_framework/dotnet.native.wasm:wasm-function[8825]:0x22fc92)\n                 callUserCallback@http://127.0.0.1:45611/_framework/dotnet.native.js:8:98666\n                 checkMailbox@http://127.0.0.1:45611/_framework/dotnet.native.js:8:99213\n                 createDotnetRuntime/loadWasmModuleToWorker/createDotnetRuntime\u003c/worker.onmessage@http://127.0.0.1:45611/_framework/dotnet.native.js:8:17067\n[06:42:14] info: WASM EXIT 1\n[06:42:14] info: Waiting to flush log messages with a timeout of 120 secs ..\n[06:42:14] fail: Application has finished with exit code TESTS_FAILED but 0 was expected\n[06:42:15] info: Closing 1 browser tabs before setting the main tab to config page and quitting.\n1735713735133\tMarionette\tINFO\tStopped listening on port 46861\nXHarness exit code: 71 (GENERAL_FAILURE)\n/root/helix/work/workitem/e /root/helix/work/workitem/e\n----- end Wed Jan 1 06:42:15 AM UTC 2025 ----- exit code 71 ----------------------------------------------------------\n```\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** \r\n**Result validation:** :warning: Provided build not found. Provide a valid build in the \"**Build:** :mag_right:\" line.\r\n**Validation performed at:** 1/13/2025 8:02:38 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmmhbbw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6aQxRr",
                                           "createdAt":  "2025-01-13T20:06:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-13T20:06:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aaFtv",
                                           "createdAt":  "2025-01-14T16:49:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-14T16:49:35Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[9.0][wasm] MONO_WASM: unaligned memory access",
        "labels":  [
                       "arch-wasm",
                       "area-System.IO",
                       "blocking-clean-ci",
                       "area-VM-threading-mono",
                       "runtime-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111574",
        "createdAt":  "2025-01-18T19:07:56Z",
        "number":  111574,
        "author":  "JoelVarney",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-01T17:08:52Z",
        "body":  "### Description\n\nA net8.0-ios app will crash if:\n1. A generic class has the MethodImpl(MethodImplOptions.Synchronized) attribute on a method\n2. The method does something non-trivial (it must do more than just return a value, Console.WriteLine, increment a counter, etc)\n3. The method is called (in our project it seemed like it was crashing only on the 2nd call, but fails on the 1st in the minimal project)\n\n### Reproduction Steps\n\n1. `dotnet new ios`\n2. Add the line \"new SyncList\u003cstring\u003e().Lock();\" to the start of FinishedLaunching in AppDelegate\n3. Add class below to AppDelegate\n4. `dotnet build -t:Run -f net8.0-ios`\n\n```\nprivate class SyncList\u003cT\u003e\n{\n\tprivate IList\u003cT\u003e _list = new List\u003cT\u003e();\n\n\t[MethodImpl(MethodImplOptions.Synchronized)] // broken\n\tpublic void Lock()\n\t{\n\t\t//lock(this) // workaround\n\t\t{\n\t\t\t_list = new ReadOnlyCollection\u003cT\u003e(_list);\n\t\t}\n\t}\n}\n```\n\n### Expected behavior\n\nDefault behavior of a template ios app.\n\n### Actual behavior\n\nCrash with \"Got a SIGSEGV while executing native code.\"\n\n### Regression?\n\nMay have worked with Xamarin, as crashes not reported until we switched to net8.0-ios.\n\n### Known Workarounds\n\nUsing \"lock(this)\" seems to work as intended, see the commented lines included with the code above.\n\n### Configuration\n\nnet8.0-ios on iPadOS 18.2, iOS 18.2 - device and simulator\nDotnet SDK 8.0.204\nPlatforms other than iOS appear to work properly (e.g. template console app with net8.0 on ARM64 Mac, dotnetstandard2.0 on Windows x64).\nCompiled with both JetBrains Rider and the default Azure DevOps build agent tooling\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "MethodImplOptions.Synchronized on a method in a generic class leads to a segmentation fault when using net8.0-ios",
        "labels":  [
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112926",
        "createdAt":  "2025-02-25T22:02:02Z",
        "number":  112926,
        "author":  "jeromelaban",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDXuxQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SongOfYouth",
                                            "createdAt":  "2025-06-06T15:26:17Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-03-12T14:47:47Z",
        "body":  "### Description\n\nBuilding a browser app with both `WasmEnableThreads` and `WasmBuildNative` fails to startup the runtime.\n\n### Reproduction Steps\n\n- `dotnet new wasmbrowser -o mybrowserapp`\n- update `TargetFramework` to `net10.0`\n- Add `\u003cWasmEnableThreads\u003etrue\u003c/WasmEnableThreads\u003e` and `\u003cWasmBuildNative\u003etrue\u003c/WasmBuildNative\u003e` properties\n- `dotnet run`\n\n### Expected behavior\n\nThe app runs properly and the timer updates.\n\n### Actual behavior\n\n\u003cdetails\u003e\u003csummary\u003eBrowser debugger log\u003c/summary\u003e\n\u003cp\u003e\n\n```\n3dotnet.runtime.geabe1of42.js:3  [MONO] /__w/1/s/src/mono/mono/metadata/icall.c:6990 \u003cdisabled\u003e\nil @ logging.ts:147\ndotnet.native.ghstnzkn2m.js:1825  at System.Threading.Thread.get_CurrentThread () [0x00009] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.Threading.ObjectHeader.TryEnterFast (object) [0x00023] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.Threading.Monitor.ReliableEnterTimeout (object,int,bool\u0026) [0x00022] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.Threading.Monitor.Enter (object,bool\u0026) [0x00017] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.SR.InternalGetResourceString (string) [0x00013] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.SR.GetResourceString (string) [0x0000c] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.SR.get_Arg_MissingMethodException () [0x00005] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.MissingMethodException..ctor () [0x00001] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at (wrapper managed-to-native) System.Threading.Thread.GetCurrentThread () [0x00000] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.Threading.Thread.InitializeCurrentThread () [0x00000] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.Threading.Thread.get_CurrentThread () [0x00009] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.Threading.ObjectHeader.TryEnterFast (object) [0x00023] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.Threading.Monitor.ReliableEnterTimeout (object,int,bool\u0026) [0x00022] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.Threading.Monitor.Enter (object,bool\u0026) [0x00017] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.SR.InternalGetResourceString (string) [0x00013] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.SR.GetResourceString (string) [0x0000c] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.SR.get_Arg_MissingMethodException () [0x00005] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.MissingMethodException..ctor () [0x00001] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\n...\nrepeating stack\n...\ndotnet.native.ghstnzkn2m.js:1825  at System.Threading.Thread.InitializeCurrentThread () [0x00000] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.Threading.Thread.get_CurrentThread () [0x00009] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.Threading.ObjectHeader.TryEnterFast (object) [0x00023] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.Threading.Monitor.ReliableEnterTimeout (object,int,bool\u0026) [0x00022] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.Threading.Monitor.Enter (object,bool\u0026) [0x00017] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.SR.InternalGetResourceString (string) [0x00013] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.SR.GetResourceString (string) [0x0000c] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.SR.get_Arg_MissingMethodException () [0x00005] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at System.MissingMethodException..ctor () [0x00001] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\ndotnet.native.ghstnzkn2m.js:1825  at (wrapper managed-to-native) System.Threading.Thread.GetCurrentThread () [0x00000] in \u003cd1f1980c601744b49f0a049725d4fe26\u003e:0\n\n2dotnet.native.ghstnzkn2m.js:1825  \n\ndotnet.runtime.geabe1of42.js:3  [0x015b0510-dpty] MONO_WASM: mono_wasm_load_runtime () failed unwind\nMe @ logging.ts:47\ndotnet.native.ghstnzkn2m.js:1010  program exited (with status: 1), but keepRuntimeAlive() is set (counter=1) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)\nexitJS @ dotnet.native.ghstnzkn2m.js:1010\ndotnet.runtime.geabe1of42.js:3  [0x015b0510-dpty] MONO_WASM: start_runtime() failed RuntimeError: unreachable\nMe @ logging.ts:43\ndotnet.native.ghstnzkn2m.js:90  Uncaught ExitStatus\nlocalhost/:1  Uncaught ExitStatus\ndotnet.native.ghstnzkn2m.js:1130  Aborted(Error\n    at Object.ct [as mono_exit] (http://localhost:5040/_framework/dotnet.js:3:26546)\n    at http://localhost:5040/_framework/dotnet.runtime.geabe1of42.js:3:186381\n    at http://localhost:5040/_framework/dotnet.runtime.geabe1of42.js:3:186399\n    at http://localhost:5040/_framework/dotnet.runtime.geabe1of42.js:3:186770\n    at callUserCallback (http://localhost:5040/_framework/dotnet.native.ghstnzkn2m.js:5381:3)\n    at http://localhost:5040/_framework/dotnet.native.ghstnzkn2m.js:5676:3)\nworker.onmessage @ dotnet.native.ghstnzkn2m.js:1130\nstartup.ts:384  Uncaught (in promise) ExitStatus\ndotnet.runtime.geabe1of42.js:3  Uncaught (in promise) RuntimeError: unreachable\n    at dotnet.native.wasm.__trap (dotnet.native.wasm-03aaaf4e)\n    at ___trap (dotnet.native.ghstnzkn2m.js:7077:54)\n    at Object.abort (dotnet.native.ghstnzkn2m.js:669:3)\n    at Object.dl [as nativeAbort] (dotnet.runtime.geabe1of42.js:3:195605)\n    at dt (dotnet.js:3:29243)\n    at Object.ct [as mono_exit] (dotnet.js:3:29170)\n    at dotnet.runtime.geabe1of42.js:3:186381\n    at dotnet.runtime.geabe1of42.js:3:186399\n    at dotnet.runtime.geabe1of42.js:3:186770\n    at callUserCallback (dotnet.native.ghstnzkn2m.js:5381:3)\nlogging.ts:43  [--005df10c-emsc] MONO_WASM: onRuntimeInitializedAsync() failed Error: mono_wasm_start_deputy_thread_async() failedRuntimeError: unreachable\nMe @ logging.ts:43\ndotnet.native.ghstnzkn2m.js:1140  Pthread 0x015b0510 sent an error! http://localhost:5040/_framework/dotnet.native.worker.14oy9i9plz.mjs:97: Uncaught RuntimeError: unreachable\nworker.onerror @ dotnet.native.ghstnzkn2m.js:1140\ndotnet.native.ghstnzkn2m.js:1141  Uncaught ErrorEvent\nstartup.ts:361  Uncaught (in promise) Error: mono_wasm_start_deputy_thread_async() failedRuntimeError: unreachable\n    at ui-thread.ts:105:68\n    at Worker.\u003canonymous\u003e (ui-thread.ts:124:48)\ndotnet.native.worker.14oy9i9plz.mjs:97  Uncaught RuntimeError: unreachable\n    at dotnet.native.wasm.__trap (dotnet.native.wasm-03aaaf4e)\n    at ___trap (dotnet.native.ghstnzkn2m.js:7077:54)\n    at Object.abort (dotnet.native.ghstnzkn2m.js:669:3)\n    at Object.dl [as nativeAbort] (dotnet.runtime.geabe1of42.js:3:195605)\n    at dt (dotnet.js:3:29243)\n    at Object.ct [as mono_exit] (dotnet.js:3:29170)\n    at dotnet.runtime.geabe1of42.js:3:186381\n    at dotnet.runtime.geabe1of42.js:3:186399\n    at dotnet.runtime.geabe1of42.js:3:186770\n    at callUserCallback (dotnet.native.ghstnzkn2m.js:5381:3)\n```\n\n\u003c/p\u003e\n\u003c/details\u003e \n\n### Regression?\n\nYes, from net8 at least.\n\n### Known Workarounds\n\nNot using `WasmBuildNative`, which is not possible when using module linking.\n\nuse `dotnet publish`\n\n### Configuration\n\n`10.0.100-preview.3.25125.12`\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOogOlcw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6f8q-k",
                                           "createdAt":  "2025-02-25T22:59:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-25T22:59:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gFSEX",
                                           "createdAt":  "2025-02-26T17:30:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeromelaban",
                                           "body":  "Note, the issue only happens with `dotnet run`, `dotnet publish` works properly.",
                                           "updatedAt":  "2025-02-26T17:30:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gQt8i",
                                           "createdAt":  "2025-02-27T18:13:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "Does it work if you publish with trimming disabled?",
                                           "updatedAt":  "2025-02-27T18:13:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gZh-m",
                                           "createdAt":  "2025-02-28T16:17:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeromelaban",
                                           "body":  "As far as I can tell, `dotnet run` does not enable trimming, it\u0027s only used when `dotnet publish` is used.",
                                           "updatedAt":  "2025-02-28T16:17:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gZ6hm",
                                           "createdAt":  "2025-02-28T17:06:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lewing",
                                           "body":  "correct, I suspect trimming is removing some problematic code.  That is why I asked if it still failed if you published with trimming disabled.",
                                           "updatedAt":  "2025-02-28T17:06:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gaTb4",
                                           "createdAt":  "2025-02-28T18:02:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeromelaban",
                                           "body":  "Right. I tried with explicitly disabling it and `dotnet run` still fails.",
                                           "updatedAt":  "2025-02-28T18:02:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iA6Vz",
                                           "createdAt":  "2025-03-12T14:47:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "Those MSBuild features change a lot of the build behavior, but they do not trigger full rebuild. Please try to delete `bin` and `obj` folders.",
                                           "updatedAt":  "2025-03-12T14:47:46Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[Wasm][net10] Building with `WasmBuildNative` and threading enabled fails with assertion",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113104",
        "createdAt":  "2025-03-04T00:32:32Z",
        "number":  113104,
        "author":  "r58Playz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-06T10:21:51Z",
        "body":  "Using the runtime option `--jiterpreter-traces-enabled` on .NET 9.0.2 logs an error saying that the option is read-only:\nhttps://github.com/dotnet/runtime/blob/v9.0.2/src/mono/mono/utils/options-def.h#L92\n\nIs it possible to backport the threaded jiterpreter support to .NET 9?\n\nFrom the FNA discord:\nhttps://discord.com/channels/476524251441004544/499989970694438923/1346276308467843103",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoK_wFw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6gr-_e",
                                           "createdAt":  "2025-03-04T00:33:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kg",
                                           "body":  "cc @pavelsavara ",
                                           "updatedAt":  "2025-03-04T00:33:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gr_AX",
                                           "createdAt":  "2025-03-04T00:33:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-04T00:33:20Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[browser][MT] Threaded jiterpreter is not available in .NET 9",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114064",
        "createdAt":  "2025-03-31T09:50:22Z",
        "number":  114064,
        "author":  "lateralusX",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODN7ypw==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "filipnavara",
                                            "createdAt":  "2025-04-01T06:43:20Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "ShortDevelopment",
                                            "createdAt":  "2025-09-02T15:51:39Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-06-12T20:34:29Z",
        "body":  "### Description\n\nWe received an ANR (Application Not Responding) dump on Android (https://github.com/dotnet/runtime/issues/111485#issuecomment-2713257758) that points towards a deadlock during STW inside pthread library.\n\nWe have the STW thread that is about to pre-emptive suspend a thread (Android uses hybrid suspend as default) currently running native code. The internal implementation of pthread_kill on Android ends up tacking an internal rwlock:\n\n```\n\"m.matrix.essapp\" tid=6901 Native\n  #00  pc 0x00000000000bcdec  /apex/com.android.runtime/lib64/bionic/libc.so (syscall+28)\n  #01  pc 0x00000000000960a0  /apex/com.android.runtime/lib64/bionic/libc.so (__futex_wait_ex(void volatile*, bool, int, bool, timespec const*)+144)\n  #02  pc 0x00000000000a8a64  /apex/com.android.runtime/lib64/bionic/libc.so (__pthread_rwlock_timedrdlock(pthread_rwlock_internal_t*, bool, timespec const*)+404)\n  #03  pc 0x00000000000a672c  /apex/com.android.runtime/lib64/bionic/libc.so (__pthread_internal_find(long, char const*)+44)\n  #04  pc 0x00000000000a66d8  /apex/com.android.runtime/lib64/bionic/libc.so (__pthread_internal_gettid(long, char const*)+8)\n  #05  pc 0x00000000000a7510  /apex/com.android.runtime/lib64/bionic/libc.so (pthread_kill+48)\n  #06  pc 0x00000000001f3944  /data/app/~~qM6nfb0SsPuuvSpcn5sEDg==/com.matrix.essapp-nk5e3yal7GEo932eIiCEWA==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (mono_threads_pthread_kill/mono_threads_suspend_begin_async_suspend)\n  #07  pc 0x00000000001f053c  /data/app/~~qM6nfb0SsPuuvSpcn5sEDg==/com.matrix.essapp-nk5e3yal7GEo932eIiCEWA==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (mono_thread_info_begin_suspend)\n  #08  pc 0x00000000002a5478  /data/app/~~qM6nfb0SsPuuvSpcn5sEDg==/com.matrix.essapp-nk5e3yal7GEo932eIiCEWA==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (unified_suspend_stop_world)\n  #09  pc 0x00000000002a5104  /data/app/~~qM6nfb0SsPuuvSpcn5sEDg==/com.matrix.essapp-nk5e3yal7GEo932eIiCEWA==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (sgen_client_stop_world)\n  #10  pc 0x00000000002c55d0  /data/app/~~qM6nfb0SsPuuvSpcn5sEDg==/com.matrix.essapp-nk5e3yal7GEo932eIiCEWA==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (sgen_stop_world)\n  #11  pc 0x00000000002c243c  /data/app/~~qM6nfb0SsPuuvSpcn5sEDg==/com.matrix.essapp-nk5e3yal7GEo932eIiCEWA==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (sgen_perform_collection_inner/sgen_perform_collection)\n  #12  pc 0x00000000002c3630  /data/app/~~qM6nfb0SsPuuvSpcn5sEDg==/com.matrix.essapp-nk5e3yal7GEo932eIiCEWA==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (mono_gc_collect)\n  #13  pc 0x00000000002a91d0  /data/app/~~qM6nfb0SsPuuvSpcn5sEDg==/com.matrix.essapp-nk5e3yal7GEo932eIiCEWA==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (mono_gc_collect)\n  #14  pc 0x000000000000bbec \n```\n\nAnother thread part of STW has already been pre-emptive suspend and it turns out it acquired the write lock, and since it got suspended while holding the lock, it will deadlock the STW thread, triggering an ANR.\n\n```\n\"Finalizer\" tid=6921 Native\n  #00  pc 0x0000000000100594  /apex/com.android.runtime/lib64/bionic/libc.so (__rt_sigsuspend+4)\n  #01  pc 0x00000000000ac10c  /apex/com.android.runtime/lib64/bionic/libc.so (sigsuspend+60)\n  #02  pc 0x00000000001f3ed8  /data/app/~~qM6nfb0SsPuuvSpcn5sEDg==/com.matrix.essapp-nk5e3yal7GEo932eIiCEWA==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (suspend_signal_handler)\n  #03  pc 0x000000000000084c  [vdso]\n  #04  pc 0x00000000000a8c80  /apex/com.android.runtime/lib64/bionic/libc.so (pthread_rwlock_wrlock+64)\n  #05  pc 0x00000000000a6678  /apex/com.android.runtime/lib64/bionic/libc.so (__pthread_internal_remove_and_free(pthread_internal_t*)+24)\n  #06  pc 0x00000000000a6e84  /apex/com.android.runtime/lib64/bionic/libc.so (pthread_join+308)\n  #07  pc 0x00000000001f37b8  /data/app/~~qM6nfb0SsPuuvSpcn5sEDg==/com.matrix.essapp-nk5e3yal7GEo932eIiCEWA==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (mono_native_thread_join+16) (mono_native_thread_join)\n  #08  pc 0x0000000000276ff4  /data/app/~~qM6nfb0SsPuuvSpcn5sEDg==/com.matrix.essapp-nk5e3yal7GEo932eIiCEWA==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (threads_native_thread_join_lock/mono_threads_join_threads)\n  #09  pc 0x000000000029b82c  /data/app/~~qM6nfb0SsPuuvSpcn5sEDg==/com.matrix.essapp-nk5e3yal7GEo932eIiCEWA==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (mono_runtime_do_background_work/finalizer_thread)\n  #10  pc 0x00000000002779ac  /data/app/~~qM6nfb0SsPuuvSpcn5sEDg==/com.matrix.essapp-nk5e3yal7GEo932eIiCEWA==/split_config.arm64_v8a.apk!libmonosgen-2.0.so (start_wrapper_internal/start_wrapper)\n  #11  pc 0x00000000000a6224  /apex/com.android.runtime/lib64/bionic/libc.so (__pthread_start(void*)+196)\n  #12  pc 0x00000000000975a0  /apex/com.android.runtime/lib64/bionic/libc.so (__start_thread+64)\n```\n\nThis is one of those situations that could happen under pre-emptive suspend, a thread gets suspended while holding internal platform/system lock triggering a deadlock. This specific scenario is potentially fixable but would need changes to the way Mono VM waits on detached threads in runtime. It should be rather infrequent since it depends on threads detaching from runtime, the finalizer thread running to join them while a GC happens.\n\nWe probably don\u0027t want to keep taking additional locks to prevent GC from running while joining detached threads, but we could potentially mark this region as a critical region, preventing threads from being suspended while waiting (will fix the full pre-emptive mode as well), the waits should be short since threads are exiting, so shouldn\u0027t prevent STW from complete in a timely manner.\n\n### Reproduction Steps\n\nhttps://github.com/dotnet/runtime/issues/111485#issuecomment-2713257758\n\n### Expected behavior\n\nNo ANR dump when hitting this rare situation.\n\n### Actual behavior\n\nANR dump.\n\n### Regression?\n\nNo.\n\n### Known Workarounds\n\nNo.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[Mono]: Rare deadlock when pre-emptive suspend a thread holding look inside pthread library on Android.",
        "labels":  [
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114918",
        "createdAt":  "2025-04-22T15:58:41Z",
        "number":  114918,
        "author":  "bcairns-google",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODHHUvg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "VYDocuWare",
                                            "createdAt":  "2025-04-30T08:53:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tewr",
                                            "createdAt":  "2025-07-15T20:19:23Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-07-23T12:44:54Z",
        "body":  "### Description\n\nWhen dotnet.js is started in a web worker with an onmessage handler, the promises for asset instantiation are never resolved and therefore initialization hangs.\n\nThere appears to be a check in browser/runtime/loader/assets.ts which checks for ENVIRONMENT_IS_WORKER and deliberately avoids resolving the promises:\n\nhttps://github.com/dotnet/runtime/blob/7dcd892a2d800834ca714b54d91f3a557ac20fd1/src/mono/browser/runtime/loader/assets.ts#L244\nand\nhttps://github.com/dotnet/runtime/blob/7dcd892a2d800834ca714b54d91f3a557ac20fd1/src/mono/browser/runtime/loader/assets.ts#L253\n\nIf ENVIRONMENT_IS_WORKER is manually set to false in the debugger, loading will complete normally and dotnet.js functions correctly in a web worker.\n\nENVIRONMENT_IS_WORKER is set here:\nhttps://github.com/dotnet/runtime/blob/28bbd27b7eaa3e0ad643c9f9d81ef59abff22a5a/src/mono/browser/runtime/loader/globals.ts#L30\n\nThe logic is a bit odd:\nENVIRONMENT_IS_WORKER is true if both of the following are true:\n- importScripts is a function\n- globalThis.onmessage is truthy\n\nIf globalThis.onmessage is undefined, globalThis.dotnetSidecar is set to true, ENVIRONMENT_IS_WORKER will be false, and loading works normally.\n\n### Reproduction Steps\n\n```\n \u003cscript\u003e\n  const dotnetUrl = \u0027dotnet.js\u0027;\n  const wasmConfig = {} // blazor.boot.json or equivalent here\n  const workerSrc = `self.onmessage = async (initialMsg) =\u003e {\n    const { dotnet } = await import(\u0027${dotnetUrl}\u0027);\n    const { setModuleImports, getAssemblyExports } = await dotnet.withConfig(${JSON.stringify(wasmConfig)}).create();\n    const assembly = await getAssemblyExports(\u0027WasmWorker\u0027);\n  };`;\n  const workerBlob = new Blob([workerSrc], {type: \u0027application/javascript\u0027});\n  const workerUrl = URL.createObjectURL(workerBlob);\n  const worker = new Worker(workerUrl, { type: \u0027module\u0027});\n  worker.postMessage(\u0027init\u0027);\n\u003c/script\u003e\n```\n\n### Expected behavior\n\ndotnet.js initializes successfully in the web worker.\n\n### Actual behavior\n\nThe dotnet.create() promise is never resolved and initialization hangs.\n\n### Regression?\n\nThis worked correctly in .NET 8.\n\nThis commit introduced the logic which breaks loading in a web worker with an onmessage handler:\nhttps://github.com/dotnet/runtime/commit/8698d3dfcd2398b75920be68f464984ccb8ccca4\n\n### Known Workarounds\n\nDelete any globalThis.onmessage handler before calling dotnet.create()\n\n### Configuration\n\n.NET SDK 9.0.203\nBehavior can be reproduced in Chrome, Safari, Firefox, and presumably any other browser that Blazor supports.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuT96Cw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6oMWQw",
                                           "createdAt":  "2025-04-22T16:07:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-22T16:07:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oMZFa",
                                           "createdAt":  "2025-04-22T16:11:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "@bcairns-google I think you can do `self.dotnetSidecar=true` in worker to enable this scenario without needing to kill `onmessage`. \n\nI did it here https://github.com/dotnet/runtime/pull/92280\n\nDoes that work for you ?",
                                           "updatedAt":  "2025-04-22T16:11:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oNNGN",
                                           "createdAt":  "2025-04-22T17:39:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bcairns-google",
                                           "body":  "Setting `self.dotnetSidecar=true` probably would work around this issue, but it also sets `ENVIRONMENT_IS_SIDECAR` to `true`. I\u0027m a bit concerned that there might be side effects from doing so in the future.\n\nIs there a particular reason to not resolve the promises in https://github.com/dotnet/runtime/blob/7dcd892a2d800834ca714b54d91f3a557ac20fd1/src/mono/browser/runtime/loader/assets.ts#L253 when `ENVIRONMENT_IS_WORKER` is `true`? You said something earlier about multi-threading, I\u0027m just trying to understand why this would interact with the loading behavior.",
                                           "updatedAt":  "2025-04-22T17:39:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6oNVQZ",
                                           "createdAt":  "2025-04-22T17:54:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e You said something earlier about multi-threading, I\u0027m just trying to understand why this would interact with the loading behavior.\n\nWhen dotnet starts in multi-threading mode it also has to load **some** of it\u0027s assets (think JS files). Those which are loaded into linear memory, are already loaded by main thread only.\n\nhttps://github.com/dotnet/runtime/blob/cc2406f8d07de1a7f4976b25298a1fb75a1125ac/src/mono/browser/runtime/startup.ts#L330\n\nwhich arrives by\n\nhttps://github.com/dotnet/runtime/blob/cc2406f8d07de1a7f4976b25298a1fb75a1125ac/src/mono/browser/runtime/pthreads/deputy-thread.ts#L38",
                                           "updatedAt":  "2025-04-22T17:54:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pXj3A",
                                           "createdAt":  "2025-04-30T10:28:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VYDocuWare",
                                           "body":  "I\u0027m running into the same issue, and \n```js\nself.dotnetSidecar=true\n```\n\ndoesn\u0027t seem to fix the issue for me:\n\n```js\nconst { getAssemblyExports, getConfig } = await dotnet\n\t.withDiagnosticTracing(false)\n\t.create();\n```\n\nstill hangs.",
                                           "updatedAt":  "2025-04-30T14:31:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6qUGZF",
                                           "createdAt":  "2025-05-07T07:20:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VYDocuWare",
                                           "body":  "Is a fix for this in the works?",
                                           "updatedAt":  "2025-05-07T07:20:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6xnrID",
                                           "createdAt":  "2025-06-17T11:19:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VYDocuWare",
                                           "body":  "A fix for this is urgently needed.",
                                           "updatedAt":  "2025-06-17T11:19:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6z9-T6",
                                           "createdAt":  "2025-06-30T14:22:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "In my testing, `self.dotnetSidecar=true` works well in Net10.\n\nBut it doesn\u0027t work in Net9\n\n![Image](https://github.com/user-attachments/assets/551fa522-a37d-466d-b5c2-a1fa4ed5382f)\n\n![Image](https://github.com/user-attachments/assets/19308ec7-baac-46ea-bffc-5a6340a6867e)\n\n![Image](https://github.com/user-attachments/assets/1c823e81-67aa-4085-a64c-157e4fe51407)\n\nI don\u0027t know why the files are `pending`, there is nothing running at that point and the file can be downloaded from another tab.\n\n@maraf thoughts ?",
                                           "updatedAt":  "2025-06-30T14:22:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6z-opq",
                                           "createdAt":  "2025-06-30T15:08:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "setting `config.maxParallelDownloads=1;` seems to help with \"pending\" assets. \nDoes it mean we have problem with Chrome ?\n",
                                           "updatedAt":  "2025-06-30T15:08:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc62_HVV",
                                           "createdAt":  "2025-07-14T15:21:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "@sebazzz @VYDocuWare @bcairns-google @tewr are you able to reproduce this with \n- single-threaded build of the runtime \n- self.dotnetSidecar=true in the worker\n- also in Firefox ?\n- which dotnet and browser versions ?\n\nI\u0027m unable to reproduce this anymore on net9, I\u0027m not sure what changed",
                                           "updatedAt":  "2025-07-14T15:21:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63Hc91",
                                           "createdAt":  "2025-07-15T06:29:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Sebazzz",
                                           "body":  "@pavelsavara Electron (Chrome) with indeed the ST runtime, `globalThis.dotnetSideCar` true, and I had it with both .net9.0:\n\n```C#\nself.addEventListener(\"unhandledrejection\", (event) =\u003e {\n    console.error(\"Unhandled promise rejection in worker:\", event.reason);\n\n    throw event.reason;\n});\n\nfunction fail(message) {\n    console.error(message);\n    self.postMessage({\n        cmd: \"error\",\n        data: message,\n    });\n    self.close();\n}\n\n// Because we have node.js support enabled for web workers, .NET gets confused\n// and things it is running in a node.js environment, which it is not.\n// So it tries to import the \u0027process\u0027 module, which does not exist (though other npm packages\n// actually can be imported) - so delete the process object from globalThis to prevent this confusion.\n// https://github.com/dotnet/runtime/blob/f3548eff5bbba25f84653d4359400a26ec2b6b4f/src/mono/browser/runtime/globals.ts#L20\nif (globalThis.process) delete globalThis.process.versions;\ndelete globalThis.process;\n\nglobalThis.dotnetSidecar = true; // https://github.com/dotnet/runtime/issues/114918\nself.dotnetSidecar = true; // https://github.com/dotnet/runtime/issues/114918\ndelete globalThis.importScripts;\n\nconst { dotnet } = await import(\"dotnet://_framework/dotnet.js\");\n\n// Actual documentation: https://github.com/dotnet/runtime/blob/main/src/mono/browser/runtime/dotnet.d.ts\nconst { setModuleImports, getAssemblyExports, getConfig } = await dotnet\n    /**\n     * level \u003e 0 enables debugging and sets the logging level to debug\n     * level == 0 disables debugging and enables interpreter optimizations\n     * level \u003c 0 enables debugging and disables debug logging.\n     */\n    .withDebugging(-1) // TODO: at some point disable debugging during production builds\n    .withDiagnosticTracing(false)\n    .create();\n\n// Additional static imports for the worker\nsetModuleImports(\"interop-worker\", {\n    dotnetWorkerMessage: function (cmd, data) {\n        if (!cmd || !data) {\n            fail(\"Invalid message received in dotnetWorkerMessage\");\n            return;\n        }\n\n        self.postMessage({\n            cmd: cmd,\n            data: data,\n        });\n    },\n});\n```\n\nIt never makes it past `.create`, the promise is never resolved.",
                                           "updatedAt":  "2025-07-15T06:29:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63MB_8",
                                           "createdAt":  "2025-07-15T12:19:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e It never makes it past `.create`, the promise is never resolved.\n\n@Sebazzz \nAre there any pending HTTP requests at that point ?\nCan you also reproduce it in firefox ?\n\n",
                                           "updatedAt":  "2025-07-15T12:19:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63MGh_",
                                           "createdAt":  "2025-07-15T12:26:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VYDocuWare",
                                           "body":  "It seems to work with `self.dotnetSidecar=true` now.",
                                           "updatedAt":  "2025-07-15T12:26:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63f8tj",
                                           "createdAt":  "2025-07-16T13:23:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEazQew==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2025-07-16T14:58:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Tewr",
                                           "body":  "Hello all. I\u0027m very happy this has gotten some attention. Even happier it seems to be working now. Only downside is we don\u0027t know why I guess.\n\nI\u0027ve freshly installed windows 11 and visual studio and my net9 branch now works without any further modifications. I can no longer observe the problems that were in the initial ticket. \n\nSo my net9 branch works without any *new* modifications, using  dotnet 9.0.302 and chrome 137.0.7151.104. Firefox 140.0.4 also works fine. I cannot tell if this is the .net9 version or chrome/firefox that has changed something since I opened the ticket. I didnt initially test with Firefox this winter in any case.\n\nTo be clear, I have not used `self.dotnetSidecar=true` or any other workarounds stated in this ticket. I do have some other historical hacks in place, such as defining `self.window` as a proxy for intercepting `location` and `fetch`.",
                                           "updatedAt":  "2025-07-16T13:23:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc631EF4",
                                           "createdAt":  "2025-07-17T13:45:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VYDocuWare",
                                           "body":  "It started hanging sporadically again, both with and without `self.dotnetSidecar=true` - on Firefox and Chrome.",
                                           "updatedAt":  "2025-07-17T13:45:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc633RfG",
                                           "createdAt":  "2025-07-17T16:39:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e It started hanging sporadically again, both with and without `self.dotnetSidecar=true` \n\nWithout `self.dotnetSidecar=true`  is not interesting to explore, because that\u0027s expected.\n\n\u003e on Firefox and Chrome.\n\nWhen it happened to me it was with chrome and there was stuck HTTP request.\n\n@VYDocuWare Is it stuck HTTP request with firefox too ? \nCould you please make screenshots devtools/network tab when it happens ? \n\nWhich version of FF are we talking about ?\nAre you talking about Net9 ? Which version ?",
                                           "updatedAt":  "2025-07-17T16:39:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64EFsJ",
                                           "createdAt":  "2025-07-18T07:54:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEbEy9g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "pavelsavara",
                                                                               "createdAt":  "2025-07-18T10:17:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "VYDocuWare",
                                           "body":  "Interestingly enough, I can\u0027t reproduce it with `self.dotnetSidecar=true` on Firefox 140.0.4 (I restarted the computer in the meantime) - while it\u0027s still happening on Chrome 138.0.7204.158.\n\nI\u0027m on NET 9.0.",
                                           "updatedAt":  "2025-07-18T08:50:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64Jt4n",
                                           "createdAt":  "2025-07-18T13:52:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VYDocuWare",
                                           "body":  "\u003e setting `config.maxParallelDownloads=1;` seems to help with \"pending\" assets.\n\nHow do I set this? ",
                                           "updatedAt":  "2025-07-18T13:52:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc64kRgF",
                                           "createdAt":  "2025-07-21T12:21:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "\u003e \u003e setting `config.maxParallelDownloads=1;` seems to help with \"pending\" assets.\n\u003e \n\u003e How do I set this?\n\n@VYDocuWare  `await dotnet.withConfig({ maxParallelDownloads: 1 }).create();`",
                                           "updatedAt":  "2025-07-21T12:21:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65PADA",
                                           "createdAt":  "2025-07-23T12:17:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "VYDocuWare",
                                           "body":  "This seems to work around the issue in Chrome, thank you very much.",
                                           "updatedAt":  "2025-07-23T12:17:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc65P3oL",
                                           "createdAt":  "2025-07-23T12:44:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pavelsavara",
                                           "body":  "That looks like chrome race condition. \nIt would be great to create repro case with simple JS, rather than whole dotnet complexity. \nAnd then report it to chrome.",
                                           "updatedAt":  "2025-07-23T12:44:53Z"
                                       }
                                   ],
                         "totalCount":  21
                     },
        "title":  "dotnet.js fails to initialize when running in a web worker with onmessage handler",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono",
                       "os-browser"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/116251",
        "createdAt":  "2025-06-03T07:33:39Z",
        "number":  116251,
        "author":  "idg10",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDXX-Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gldfdp",
                                            "createdAt":  "2025-06-06T13:12:50Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-08T08:38:11Z",
        "body":  "### Description\n\nAdding `\u003cWasmEnableThreads\u003etrue\u003c/WasmEnableThreads\u003e` to a newly-created standalone Blazor WebAssembly application (.NET 9.0) stops it from loading.\n\nAfter some investigation, I\u0027ve come to the conclusion that this is because multithreading in Blazor WebAssembly is not in fact supported in .NET 9.0. But it wasn\u0027t at all obvious. Setting this property causes some changes in behaviour: the devserver adds extra CORS headers, and the page loads a different version of the CLR, the version built with multithreading support enabled. So the signs seem to indicate that it\u0027s meant to work, and there\u0027s no warning or error telling you that it won\u0027t.\n\nIf this is meant to work, then the fix already in place for .NET 10.0 preview should be backported to .NET 9.0. But if this is expected not to work, it would be useful to have some sort of message telling you that `WasmEnableThreads` is not supported in this context.\n\n### Reproduction Steps\n\n1. In Visual Studio 2022 create a new Blazor WebAssembly project targetting .NET 9.0. (This adds references to `Microsoft.AspNetCore.Components.WebAssembly` and `Microsoft.AspNetCore.Components.WebAssembly.DevServer` v9.0.5)\n2. Run the application. It works.\n3. In the `csproj`, add `\u003cWasmEnableThreads\u003etrue\u003c/WasmEnableThreads\u003e` in a `PropertyGroup`\n4. Delete the `bin` and `obj` folders as suggested for #98502 \n5. Rebuild\n6. Run the application. The progress circle appears and goes to 100%, but then nothing happens. No errors either in the browser or Visual Studio.\n\nI see the same behaviour on Edge and Chrome, both of which are fully up to date as of 2025/06/03.\n\n\n\n### Expected behavior\n\nEither the application should run as normal (just as it does without the `\u003cWasmEnableThreads\u003e` setting), or the tools should provide some sort of message to tell us that this will not work.\n\n### Actual behavior\n\nThe progress circle appears and goes to 100%, but then nothing happens. No errors either in the browser\u0027s dev tools Console or in Visual Studio. Configuring the browser debugger to pause on caught and uncaught exceptions does not help—the browser never reports any exceptions being thrown.\n\nAlthough there are no errors, the dev tools \"Issues\" section reports problems when it fetches `https://localhost:7209/_framework/dotnet.native.worker.1t59g4t9vs.mjs`. Specifically, it reports CORS problems with this. See \"Other Information\" section for more detail.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nUse .NET 10.0 preview.\n\n### Configuration\n\n`dotnet --info` reports:\n\n```\n.NET SDK:\n Version:           9.0.300\n Commit:            15606fe0a8\n Workload version:  9.0.300-manifests.87b8cca8\n MSBuild version:   17.14.5+edd3bbf37\n\nRuntime Environment:\n OS Name:     Windows\n OS Version:  10.0.26100\n OS Platform: Windows\n RID:         win-x64\n Base Path:   C:\\Program Files\\dotnet\\sdk\\9.0.300\\\n```\n\nand\n\n```\nMicrosoft.NETCore.App 9.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\n```\n\nVisual Studio 2022 v17.14.3 \n\n\nWasm-tools:\n\n```\n [wasm-tools]\n   Installation Source: SDK 9.0.300\n   Manifest Version:    9.0.5/9.0.100\n   Manifest Path:       C:\\Program Files\\dotnet\\sdk-manifests\\9.0.100\\microsoft.net.workload.mono.toolchain.current\\9.0.5\\WorkloadManifest.json\n   Install Type:              Msi\n```\n\nEdge reports \"Version 137.0.3296.58 (Official build) (64-bit)\".\n\nChrome reports \"Version 137.0.7151.69 (Official Build) (64-bit)\".\n\n\n### Other information\n\nThe failure to load appears to be because the main HTML page served up by the dev server sets a `Cross-Origin-Embedder-Policy: require-corp` header, but when the browser attempts to download the `dotnet.native.worker` resource (in my case, `https://localhost:7209/_framework/dotnet.native.worker.1t59g4t9vs.mjs`, but I presume that jumble of chars on the end is context-specific), the dev server does **not** set a `Cross-Origin-Embedder-Policy` header.\n\nI believe the reason `Cross-Origin-Embedder-Policy` gets set is that this is necessary for multithreading to work in practice. (I believe it is a prerequisite for sharing of memory, without which multithreading is not very useful.) But because it\u0027s not getting set on _all_ relevant files, it causes the app to fail to load.\n\nIt looks like a fix for this already exists for .NET 10 preview: https://github.com/dotnet/aspnetcore/blob/aa0ae536e89b8b8e2c2ecb1cb336451cf45387e5/src/Components/WebAssembly/DevServer/src/Server/Startup.cs#L46\n\nThat fix has not made it to the .NET 9.0 branch as of 2025/06/03: https://github.com/dotnet/aspnetcore/blob/release/9.0/src/Components/WebAssembly/DevServer/src/Server/Startup.cs#L46\n\nNote that the 9.0 branch does not have the test for the `.mjs` extension.\n\nBut since this is prevents the `WasmEnableThreads` setting from working on .NET 9.0 today, it would be great for this same fix to be brought onto the .NET 9.0 branch. However, I can believe that use of multithreading in the browser is entirely unsupported in .NET 9.0, in which case it would be better if the tooling just told us that, instead of making a bunch of changes in behaviour that strongly suggest that it\u0027s supposed to work.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrwUysg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6vBTKy",
                                           "createdAt":  "2025-06-03T17:08:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-wasm\u0027: @lewing\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-06-03T17:08:28Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Setting WasmEnableThreads to true on .NET 9.0 WebAssembly dev server should tell you it\u0027s not going to work",
        "labels":  [
                       "arch-wasm",
                       "area-VM-threading-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118834",
        "createdAt":  "2025-08-18T09:17:52Z",
        "number":  118834,
        "author":  "radekdoulik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-18T09:26:09Z",
        "body":  "Context: minipal_memory_barrier_process_wide\n\nTry to use minipal\u0027s minipal_memory_barrier_process_wide in mono and replace the original implementation",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Use minipal_memory_barrier_process_wide in mono",
        "labels":  [
                       "area-VM-threading-mono"
                   ]
    }
]
