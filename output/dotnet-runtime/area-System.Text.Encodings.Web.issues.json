[
    {
        "url":  "https://github.com/dotnet/runtime/issues/68820",
        "createdAt":  "2022-05-03T16:02:28Z",
        "number":  68820,
        "author":  "performanceautofiler",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-22T01:41:51Z",
        "body":  "### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.19042\r\nBaseline | [8cada8ea5cbb72a6cc3f14af65e48b5076273ef9](https://github.com/dotnet/runtime/commit/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9)\r\nCompare | [8e624b33465546e9d05da2afea5faea233d9f847](https://github.com/dotnet/runtime/commit/8e624b33465546e9d05da2afea5faea233d9f847)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9...8e624b33465546e9d05da2afea5faea233d9f847)\r\n\r\n\r\n### Regressions in System.Text.Encodings.Web.Tests.Perf_Encoders\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[EncodeUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments%3a%20UnsafeRelaxed%2cno%20(escaping%20%2f)%20required%2c512).html\u003e) | 41.13 ns | 47.77 ns | 1.16 | 0.04 | False | | |\r\n[EncodeUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments%3a%20JavaScript%2cno%20escaping%20required%2c512).html\u003e) | 40.89 ns | 47.23 ns | 1.15 | 0.04 | False | | |\r\n\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/05_03_2022/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Text.Encodings.Web.Tests.Perf_Encoders*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-0d400aef-59b9-4b02-83ef-bc3b709bc1df4a9bdd4f93f43b991/42e7a1ca-2c97-44be-84cb-38d073c43d14.zip?sv=2019-07-07\u0026se=2022-05-29T16%3A09%3A52Z\u0026sr=c\u0026sp=rl\u0026sig=lhdCbwYLJV1BQH1aHf2VvivT5YL6uj3t8CDIFD%2FISVo%3D\u003e)\r\n[Compare](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-458f5d77-3126-4bc5-b224-85d899c36539d7ada2c88884b12be/ae4bbdd2-c1f9-4536-9c44-1c098af094f3.zip?sv=2019-07-07\u0026se=2022-05-30T01%3A35%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=VZPNaixV%2BP%2FLyVAJWwly%2Ff11HCxIQ2OE2uKfuad26k4%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments: UnsafeRelaxed,no \u0026lt;escaping /\u0026gt; required,512)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 47.772814444235756 \u003e 43.37863983296739.\r\nIsChangePoint: Marked as a change because one of 3/7/2022 10:45:01 PM, 4/7/2022 3:14:09 PM, 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -18.005966866375793 (T) = (0 -47.106017875195064) / Math.Sqrt((1.2577621928244864 / (43)) + (0.6299974377406298 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -0.10728431849377293 = (42.54193533533725 - 47.106017875195064) / 42.54193533533725 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments: JavaScript,no escaping required,512)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 47.226215084305764 \u003e 43.17750218108369.\r\nIsChangePoint: Marked as a change because one of 3/7/2022 10:45:01 PM, 4/7/2022 3:14:09 PM, 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -21.33280955200132 (T) = (0 -47.17689151746384) / Math.Sqrt((1.0211644876569723 / (43)) + (0.5002273222949377 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -0.11439981085252672 = (42.33390122470772 - 47.17689151746384) / 42.33390122470772 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.19042\r\nBaseline | [8cada8ea5cbb72a6cc3f14af65e48b5076273ef9](https://github.com/dotnet/runtime/commit/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9)\r\nCompare | [8e624b33465546e9d05da2afea5faea233d9f847](https://github.com/dotnet/runtime/commit/8e624b33465546e9d05da2afea5faea233d9f847)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9...8e624b33465546e9d05da2afea5faea233d9f847)\r\n\r\n\r\n### Regressions in System.Text.Json.Reader.Tests.Perf_Base64\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[ReadBase64EncodedByteArray_HeavyEscaping - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Text.Json.Reader.Tests.Perf_Base64.ReadBase64EncodedByteArray_HeavyEscaping(NumberOfBytes%3a%20100).html\u003e) | 107.43 ns | 118.16 ns | 1.10 | 0.26 | False | | |\r\n[ReadBase64EncodedByteArray_NoEscaping - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Text.Json.Reader.Tests.Perf_Base64.ReadBase64EncodedByteArray_NoEscaping(NumberOfBytes%3a%20100).html\u003e) | 107.26 ns | 118.60 ns | 1.11 | 0.23 | False | | |\r\n\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/05_03_2022/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Text.Json.Reader.Tests.Perf_Base64.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Text.Json.Reader.Tests.Perf_Base64*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-0d400aef-59b9-4b02-83ef-bc3b709bc1df4a9bdd4f93f43b991/42e7a1ca-2c97-44be-84cb-38d073c43d14.zip?sv=2019-07-07\u0026se=2022-05-29T16%3A09%3A52Z\u0026sr=c\u0026sp=rl\u0026sig=lhdCbwYLJV1BQH1aHf2VvivT5YL6uj3t8CDIFD%2FISVo%3D\u003e)\r\n[Compare](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-458f5d77-3126-4bc5-b224-85d899c36539d7ada2c88884b12be/ae4bbdd2-c1f9-4536-9c44-1c098af094f3.zip?sv=2019-07-07\u0026se=2022-05-30T01%3A35%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=VZPNaixV%2BP%2FLyVAJWwly%2Ff11HCxIQ2OE2uKfuad26k4%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Text.Json.Reader.Tests.Perf_Base64.ReadBase64EncodedByteArray_HeavyEscaping(NumberOfBytes: 100)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 118.15730611582981 \u003e 112.528548231773.\r\nIsChangePoint: Marked as a change because one of 3/1/2022 10:24:04 PM, 3/11/2022 8:42:43 PM, 4/8/2022 7:02:49 PM, 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -18.096793187947444 (T) = (0 -122.82801015826061) / Math.Sqrt((48.11993148945896 / (43)) + (7.076693423744189 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -0.2212703324395548 = (100.5739735877354 - 122.82801015826061) / 100.5739735877354 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.Text.Json.Reader.Tests.Perf_Base64.ReadBase64EncodedByteArray_NoEscaping(NumberOfBytes: 100)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 118.6007184493413 \u003e 112.99080979065236.\r\nIsChangePoint: Marked as a change because one of 2/26/2022 10:27:55 AM, 3/17/2022 6:54:53 PM, 3/30/2022 6:37:35 PM, 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -18.670736042618184 (T) = (0 -123.90923544710004) / Math.Sqrt((43.78788994964401 / (43)) + (5.1490661617217715 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -0.20786339860338812 = (102.58547083252306 - 123.90923544710004) / 102.58547083252306 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.19042\r\nBaseline | [8cada8ea5cbb72a6cc3f14af65e48b5076273ef9](https://github.com/dotnet/runtime/commit/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9)\r\nCompare | [8e624b33465546e9d05da2afea5faea233d9f847](https://github.com/dotnet/runtime/commit/8e624b33465546e9d05da2afea5faea233d9f847)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9...8e624b33465546e9d05da2afea5faea233d9f847)\r\n\r\n\r\n### Regressions in System.Numerics.Tests.Perf_Vector2\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[EqualsBenchmark - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Numerics.Tests.Perf_Vector2.EqualsBenchmark.html\u003e) | 0.28 ns | 1.29 ns | 4.62 | 0.07 | True | | |\r\n\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/05_03_2022/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Numerics.Tests.Perf_Vector2.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Numerics.Tests.Perf_Vector2*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-0d400aef-59b9-4b02-83ef-bc3b709bc1df4a9bdd4f93f43b991/42e7a1ca-2c97-44be-84cb-38d073c43d14.zip?sv=2019-07-07\u0026se=2022-05-29T16%3A09%3A52Z\u0026sr=c\u0026sp=rl\u0026sig=lhdCbwYLJV1BQH1aHf2VvivT5YL6uj3t8CDIFD%2FISVo%3D\u003e)\r\n[Compare](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-458f5d77-3126-4bc5-b224-85d899c36539d7ada2c88884b12be/ae4bbdd2-c1f9-4536-9c44-1c098af094f3.zip?sv=2019-07-07\u0026se=2022-05-30T01%3A35%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=VZPNaixV%2BP%2FLyVAJWwly%2Ff11HCxIQ2OE2uKfuad26k4%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Numerics.Tests.Perf_Vector2.EqualsBenchmark\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 1.2876561297941465 \u003e 0.2924412055561342.\r\nIsChangePoint: Marked as a change because one of 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -154.25960941238614 (T) = (0 -1.2879862186883484) / Math.Sqrt((0.0020172938232947456 / (43)) + (2.9968167142484406E-07 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -4.570434144942063 = (0.2312182830233862 - 1.2879862186883484) / 0.2312182830233862 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.19042\r\nBaseline | [8cada8ea5cbb72a6cc3f14af65e48b5076273ef9](https://github.com/dotnet/runtime/commit/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9)\r\nCompare | [8e624b33465546e9d05da2afea5faea233d9f847](https://github.com/dotnet/runtime/commit/8e624b33465546e9d05da2afea5faea233d9f847)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9...8e624b33465546e9d05da2afea5faea233d9f847)\r\n\r\n\r\n### Regressions in System.Numerics.Tests.Perf_Quaternion\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[EqualsBenchmark - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Numerics.Tests.Perf_Quaternion.EqualsBenchmark.html\u003e) | 0.00 ns | 11.15 ns | ∞ | 0.95 | True | | |\r\n\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/05_03_2022/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Numerics.Tests.Perf_Quaternion.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Numerics.Tests.Perf_Quaternion*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-0d400aef-59b9-4b02-83ef-bc3b709bc1df4a9bdd4f93f43b991/42e7a1ca-2c97-44be-84cb-38d073c43d14.zip?sv=2019-07-07\u0026se=2022-05-29T16%3A09%3A52Z\u0026sr=c\u0026sp=rl\u0026sig=lhdCbwYLJV1BQH1aHf2VvivT5YL6uj3t8CDIFD%2FISVo%3D\u003e)\r\n[Compare](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-458f5d77-3126-4bc5-b224-85d899c36539d7ada2c88884b12be/ae4bbdd2-c1f9-4536-9c44-1c098af094f3.zip?sv=2019-07-07\u0026se=2022-05-30T01%3A35%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=VZPNaixV%2BP%2FLyVAJWwly%2Ff11HCxIQ2OE2uKfuad26k4%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Numerics.Tests.Perf_Quaternion.EqualsBenchmark\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.14649432647553 \u003e 2.2365692042930726E-05.\r\nIsChangePoint: Marked as a change because one of 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -181.94053983303652 (T) = (0 -11.273238302627806) / Math.Sqrt((4.477823620270642E-09 / (43)) + (0.06910451563348406 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -193740.73372137028 = (5.818693828166324E-05 - 11.273238302627806) / 5.818693828166324E-05 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.19042\r\nBaseline | [8cada8ea5cbb72a6cc3f14af65e48b5076273ef9](https://github.com/dotnet/runtime/commit/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9)\r\nCompare | [8e624b33465546e9d05da2afea5faea233d9f847](https://github.com/dotnet/runtime/commit/8e624b33465546e9d05da2afea5faea233d9f847)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9...8e624b33465546e9d05da2afea5faea233d9f847)\r\n\r\n\r\n### Regressions in System.Numerics.Tests.Perf_Matrix3x2\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[EqualsBenchmark - Duration of single invocation](\u003chttps://pvscmdupload.z22.web.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Numerics.Tests.Perf_Matrix3x2.EqualsBenchmark.html\u003e) | 5.85 ns | 11.83 ns | 2.02 | 0.05 | True | | |\r\n\r\n[Test Report](\u003chttps://pvscmdupload.z22.web.core.windows.net/autofilereport/autofilereports/05_03_2022/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Numerics.Tests.Perf_Matrix3x2.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Numerics.Tests.Perf_Matrix3x2*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-0d400aef-59b9-4b02-83ef-bc3b709bc1df4a9bdd4f93f43b991/42e7a1ca-2c97-44be-84cb-38d073c43d14.zip?sv=2019-07-07\u0026se=2022-05-29T16%3A09%3A52Z\u0026sr=c\u0026sp=rl\u0026sig=lhdCbwYLJV1BQH1aHf2VvivT5YL6uj3t8CDIFD%2FISVo%3D\u003e)\r\n[Compare](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-458f5d77-3126-4bc5-b224-85d899c36539d7ada2c88884b12be/ae4bbdd2-c1f9-4536-9c44-1c098af094f3.zip?sv=2019-07-07\u0026se=2022-05-30T01%3A35%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=VZPNaixV%2BP%2FLyVAJWwly%2Ff11HCxIQ2OE2uKfuad26k4%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Numerics.Tests.Perf_Matrix3x2.EqualsBenchmark\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.827250105165023 \u003e 6.179545171862462.\r\nIsChangePoint: Marked as a change because one of 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -23.65901729152748 (T) = (0 -11.320785504162444) / Math.Sqrt((0.0031768633803055148 / (43)) + (0.9359619784340367 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -0.911656209613231 = (5.921977731787287 - 11.320785504162444) / 5.921977731787287 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWKYGvA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5CiTqW",
                                           "createdAt":  "2022-05-03T16:22:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.19042\r\nBaseline | [8cada8ea5cbb72a6cc3f14af65e48b5076273ef9](https://github.com/dotnet/runtime/commit/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9)\r\nCompare | [8e624b33465546e9d05da2afea5faea233d9f847](https://github.com/dotnet/runtime/commit/8e624b33465546e9d05da2afea5faea233d9f847)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9...8e624b33465546e9d05da2afea5faea233d9f847)\r\n\r\n\r\n### Regressions in System.Text.Encodings.Web.Tests.Perf_Encoders\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[EncodeUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments%3a%20UnsafeRelaxed%2cno%20(escaping%20%2f)%20required%2c512).html\u003e) | 41.13 ns | 47.77 ns | 1.16 | 0.04 | False | | |\r\n[EncodeUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments%3a%20JavaScript%2cno%20escaping%20required%2c512).html\u003e) | 40.89 ns | 47.23 ns | 1.15 | 0.04 | False | | |\r\n\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/05_03_2022/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Text.Encodings.Web.Tests.Perf_Encoders*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-0d400aef-59b9-4b02-83ef-bc3b709bc1df4a9bdd4f93f43b991/42e7a1ca-2c97-44be-84cb-38d073c43d14.zip?sv=2019-07-07\u0026se=2022-05-29T16%3A09%3A52Z\u0026sr=c\u0026sp=rl\u0026sig=lhdCbwYLJV1BQH1aHf2VvivT5YL6uj3t8CDIFD%2FISVo%3D\u003e)\r\n[Compare](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-458f5d77-3126-4bc5-b224-85d899c36539d7ada2c88884b12be/ae4bbdd2-c1f9-4536-9c44-1c098af094f3.zip?sv=2019-07-07\u0026se=2022-05-30T01%3A35%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=VZPNaixV%2BP%2FLyVAJWwly%2Ff11HCxIQ2OE2uKfuad26k4%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments: UnsafeRelaxed,no \u0026lt;escaping /\u0026gt; required,512)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 47.772814444235756 \u003e 43.37863983296739.\r\nIsChangePoint: Marked as a change because one of 3/7/2022 10:45:01 PM, 4/7/2022 3:14:09 PM, 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -18.005966866375793 (T) = (0 -47.106017875195064) / Math.Sqrt((1.2577621928244864 / (43)) + (0.6299974377406298 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -0.10728431849377293 = (42.54193533533725 - 47.106017875195064) / 42.54193533533725 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments: JavaScript,no escaping required,512)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 47.226215084305764 \u003e 43.17750218108369.\r\nIsChangePoint: Marked as a change because one of 3/7/2022 10:45:01 PM, 4/7/2022 3:14:09 PM, 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -21.33280955200132 (T) = (0 -47.17689151746384) / Math.Sqrt((1.0211644876569723 / (43)) + (0.5002273222949377 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -0.11439981085252672 = (42.33390122470772 - 47.17689151746384) / 42.33390122470772 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.19042\r\nBaseline | [8cada8ea5cbb72a6cc3f14af65e48b5076273ef9](https://github.com/dotnet/runtime/commit/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9)\r\nCompare | [8e624b33465546e9d05da2afea5faea233d9f847](https://github.com/dotnet/runtime/commit/8e624b33465546e9d05da2afea5faea233d9f847)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9...8e624b33465546e9d05da2afea5faea233d9f847)\r\n\r\n\r\n### Regressions in System.Text.Json.Reader.Tests.Perf_Base64\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[ReadBase64EncodedByteArray_HeavyEscaping - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Text.Json.Reader.Tests.Perf_Base64.ReadBase64EncodedByteArray_HeavyEscaping(NumberOfBytes%3a%20100).html\u003e) | 107.43 ns | 118.16 ns | 1.10 | 0.26 | False | | |\r\n[ReadBase64EncodedByteArray_NoEscaping - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Text.Json.Reader.Tests.Perf_Base64.ReadBase64EncodedByteArray_NoEscaping(NumberOfBytes%3a%20100).html\u003e) | 107.26 ns | 118.60 ns | 1.11 | 0.23 | False | | |\r\n\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/05_03_2022/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Text.Json.Reader.Tests.Perf_Base64.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Text.Json.Reader.Tests.Perf_Base64*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-0d400aef-59b9-4b02-83ef-bc3b709bc1df4a9bdd4f93f43b991/42e7a1ca-2c97-44be-84cb-38d073c43d14.zip?sv=2019-07-07\u0026se=2022-05-29T16%3A09%3A52Z\u0026sr=c\u0026sp=rl\u0026sig=lhdCbwYLJV1BQH1aHf2VvivT5YL6uj3t8CDIFD%2FISVo%3D\u003e)\r\n[Compare](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-458f5d77-3126-4bc5-b224-85d899c36539d7ada2c88884b12be/ae4bbdd2-c1f9-4536-9c44-1c098af094f3.zip?sv=2019-07-07\u0026se=2022-05-30T01%3A35%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=VZPNaixV%2BP%2FLyVAJWwly%2Ff11HCxIQ2OE2uKfuad26k4%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Text.Json.Reader.Tests.Perf_Base64.ReadBase64EncodedByteArray_HeavyEscaping(NumberOfBytes: 100)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 118.15730611582981 \u003e 112.528548231773.\r\nIsChangePoint: Marked as a change because one of 3/1/2022 10:24:04 PM, 3/11/2022 8:42:43 PM, 4/8/2022 7:02:49 PM, 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -18.096793187947444 (T) = (0 -122.82801015826061) / Math.Sqrt((48.11993148945896 / (43)) + (7.076693423744189 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -0.2212703324395548 = (100.5739735877354 - 122.82801015826061) / 100.5739735877354 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.Text.Json.Reader.Tests.Perf_Base64.ReadBase64EncodedByteArray_NoEscaping(NumberOfBytes: 100)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 118.6007184493413 \u003e 112.99080979065236.\r\nIsChangePoint: Marked as a change because one of 2/26/2022 10:27:55 AM, 3/17/2022 6:54:53 PM, 3/30/2022 6:37:35 PM, 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -18.670736042618184 (T) = (0 -123.90923544710004) / Math.Sqrt((43.78788994964401 / (43)) + (5.1490661617217715 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -0.20786339860338812 = (102.58547083252306 - 123.90923544710004) / 102.58547083252306 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.19042\r\nBaseline | [8cada8ea5cbb72a6cc3f14af65e48b5076273ef9](https://github.com/dotnet/runtime/commit/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9)\r\nCompare | [8e624b33465546e9d05da2afea5faea233d9f847](https://github.com/dotnet/runtime/commit/8e624b33465546e9d05da2afea5faea233d9f847)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9...8e624b33465546e9d05da2afea5faea233d9f847)\r\n\r\n\r\n### Regressions in System.Numerics.Tests.Perf_Vector2\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[EqualsBenchmark - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Numerics.Tests.Perf_Vector2.EqualsBenchmark.html\u003e) | 0.28 ns | 1.29 ns | 4.62 | 0.07 | True | | |\r\n\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/05_03_2022/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Numerics.Tests.Perf_Vector2.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Numerics.Tests.Perf_Vector2*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-0d400aef-59b9-4b02-83ef-bc3b709bc1df4a9bdd4f93f43b991/42e7a1ca-2c97-44be-84cb-38d073c43d14.zip?sv=2019-07-07\u0026se=2022-05-29T16%3A09%3A52Z\u0026sr=c\u0026sp=rl\u0026sig=lhdCbwYLJV1BQH1aHf2VvivT5YL6uj3t8CDIFD%2FISVo%3D\u003e)\r\n[Compare](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-458f5d77-3126-4bc5-b224-85d899c36539d7ada2c88884b12be/ae4bbdd2-c1f9-4536-9c44-1c098af094f3.zip?sv=2019-07-07\u0026se=2022-05-30T01%3A35%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=VZPNaixV%2BP%2FLyVAJWwly%2Ff11HCxIQ2OE2uKfuad26k4%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Numerics.Tests.Perf_Vector2.EqualsBenchmark\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 1.2876561297941465 \u003e 0.2924412055561342.\r\nIsChangePoint: Marked as a change because one of 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -154.25960941238614 (T) = (0 -1.2879862186883484) / Math.Sqrt((0.0020172938232947456 / (43)) + (2.9968167142484406E-07 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -4.570434144942063 = (0.2312182830233862 - 1.2879862186883484) / 0.2312182830233862 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.19042\r\nBaseline | [8cada8ea5cbb72a6cc3f14af65e48b5076273ef9](https://github.com/dotnet/runtime/commit/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9)\r\nCompare | [8e624b33465546e9d05da2afea5faea233d9f847](https://github.com/dotnet/runtime/commit/8e624b33465546e9d05da2afea5faea233d9f847)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9...8e624b33465546e9d05da2afea5faea233d9f847)\r\n\r\n\r\n### Regressions in System.Numerics.Tests.Perf_Quaternion\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[EqualsBenchmark - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Numerics.Tests.Perf_Quaternion.EqualsBenchmark.html\u003e) | 0.00 ns | 11.15 ns | ∞ | 0.95 | True | | |\r\n\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/05_03_2022/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Numerics.Tests.Perf_Quaternion.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Numerics.Tests.Perf_Quaternion*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-0d400aef-59b9-4b02-83ef-bc3b709bc1df4a9bdd4f93f43b991/42e7a1ca-2c97-44be-84cb-38d073c43d14.zip?sv=2019-07-07\u0026se=2022-05-29T16%3A09%3A52Z\u0026sr=c\u0026sp=rl\u0026sig=lhdCbwYLJV1BQH1aHf2VvivT5YL6uj3t8CDIFD%2FISVo%3D\u003e)\r\n[Compare](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-458f5d77-3126-4bc5-b224-85d899c36539d7ada2c88884b12be/ae4bbdd2-c1f9-4536-9c44-1c098af094f3.zip?sv=2019-07-07\u0026se=2022-05-30T01%3A35%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=VZPNaixV%2BP%2FLyVAJWwly%2Ff11HCxIQ2OE2uKfuad26k4%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Numerics.Tests.Perf_Quaternion.EqualsBenchmark\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.14649432647553 \u003e 2.2365692042930726E-05.\r\nIsChangePoint: Marked as a change because one of 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -181.94053983303652 (T) = (0 -11.273238302627806) / Math.Sqrt((4.477823620270642E-09 / (43)) + (0.06910451563348406 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -193740.73372137028 = (5.818693828166324E-05 - 11.273238302627806) / 5.818693828166324E-05 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.19042\r\nBaseline | [8cada8ea5cbb72a6cc3f14af65e48b5076273ef9](https://github.com/dotnet/runtime/commit/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9)\r\nCompare | [8e624b33465546e9d05da2afea5faea233d9f847](https://github.com/dotnet/runtime/commit/8e624b33465546e9d05da2afea5faea233d9f847)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9...8e624b33465546e9d05da2afea5faea233d9f847)\r\n\r\n\r\n### Regressions in System.Numerics.Tests.Perf_Matrix3x2\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[EqualsBenchmark - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Numerics.Tests.Perf_Matrix3x2.EqualsBenchmark.html\u003e) | 5.85 ns | 11.83 ns | 2.02 | 0.05 | True | | |\r\n\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/05_03_2022/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Numerics.Tests.Perf_Matrix3x2.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Numerics.Tests.Perf_Matrix3x2*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-0d400aef-59b9-4b02-83ef-bc3b709bc1df4a9bdd4f93f43b991/42e7a1ca-2c97-44be-84cb-38d073c43d14.zip?sv=2019-07-07\u0026se=2022-05-29T16%3A09%3A52Z\u0026sr=c\u0026sp=rl\u0026sig=lhdCbwYLJV1BQH1aHf2VvivT5YL6uj3t8CDIFD%2FISVo%3D\u003e)\r\n[Compare](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-458f5d77-3126-4bc5-b224-85d899c36539d7ada2c88884b12be/ae4bbdd2-c1f9-4536-9c44-1c098af094f3.zip?sv=2019-07-07\u0026se=2022-05-30T01%3A35%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=VZPNaixV%2BP%2FLyVAJWwly%2Ff11HCxIQ2OE2uKfuad26k4%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Numerics.Tests.Perf_Matrix3x2.EqualsBenchmark\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.827250105165023 \u003e 6.179545171862462.\r\nIsChangePoint: Marked as a change because one of 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -23.65901729152748 (T) = (0 -11.320785504162444) / Math.Sqrt((0.0031768633803055148 / (43)) + (0.9359619784340367 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -0.911656209613231 = (5.921977731787287 - 11.320785504162444) / 5.921977731787287 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eperformanceautofiler[bot]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eDrewScoggins\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CodeGen-coreclr`, `untriaged`, `refs/heads/main`, `RunKind=micro`, `Windows 10.0.19042`, `Regression`, `CoreClr`, `x64`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-03T16:22:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CiUma",
                                           "createdAt":  "2022-05-03T16:25:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "The regressions around the `Encode` algorithms is likely due to them using `Equals` when they should/could use `==`.\r\n\r\nCC. @GrabYourPitchforks ",
                                           "updatedAt":  "2022-05-03T16:25:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CiZlS",
                                           "createdAt":  "2022-05-03T16:43:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DrewScoggins",
                                           "body":  "Also seeing this on Ubuntu x64: https://github.com/dotnet/perf-autofiling-issues/issues/5087\r\nAlso seeing this on Win-x64: https://github.com/dotnet/perf-autofiling-issues/issues/5062\r\nAlso seeing this on Win-x86: https://github.com/dotnet/perf-autofiling-issues/issues/5019\r\nAlso seeing this on Win-arm64: https://github.com/dotnet/perf-autofiling-issues/issues/5143",
                                           "updatedAt":  "2022-05-05T16:25:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E4ABf",
                                           "createdAt":  "2022-06-14T18:11:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JulieLeeMSFT",
                                           "body":  "\r\nHi @GrabYourPitchforks, the code complete date is 7/11. Do you plan to look into this issue?\r\n\r\n\u003e The regressions around the `Encode` algorithms is likely due to them using `Equals` when they should/could use `==`.\r\n\u003e \r\n\u003e CC. @GrabYourPitchforks\r\n\r\n",
                                           "updatedAt":  "2022-06-14T18:11:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MRXrA",
                                           "createdAt":  "2022-10-15T01:13:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encodings-web\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.19042\r\nBaseline | [8cada8ea5cbb72a6cc3f14af65e48b5076273ef9](https://github.com/dotnet/runtime/commit/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9)\r\nCompare | [8e624b33465546e9d05da2afea5faea233d9f847](https://github.com/dotnet/runtime/commit/8e624b33465546e9d05da2afea5faea233d9f847)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9...8e624b33465546e9d05da2afea5faea233d9f847)\r\n\r\n\r\n### Regressions in System.Text.Encodings.Web.Tests.Perf_Encoders\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[EncodeUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments%3a%20UnsafeRelaxed%2cno%20(escaping%20%2f)%20required%2c512).html\u003e) | 41.13 ns | 47.77 ns | 1.16 | 0.04 | False | | |\r\n[EncodeUtf8 - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments%3a%20JavaScript%2cno%20escaping%20required%2c512).html\u003e) | 40.89 ns | 47.23 ns | 1.15 | 0.04 | False | | |\r\n\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/05_03_2022/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Text.Encodings.Web.Tests.Perf_Encoders.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Text.Encodings.Web.Tests.Perf_Encoders*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-0d400aef-59b9-4b02-83ef-bc3b709bc1df4a9bdd4f93f43b991/42e7a1ca-2c97-44be-84cb-38d073c43d14.zip?sv=2019-07-07\u0026se=2022-05-29T16%3A09%3A52Z\u0026sr=c\u0026sp=rl\u0026sig=lhdCbwYLJV1BQH1aHf2VvivT5YL6uj3t8CDIFD%2FISVo%3D\u003e)\r\n[Compare](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-458f5d77-3126-4bc5-b224-85d899c36539d7ada2c88884b12be/ae4bbdd2-c1f9-4536-9c44-1c098af094f3.zip?sv=2019-07-07\u0026se=2022-05-30T01%3A35%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=VZPNaixV%2BP%2FLyVAJWwly%2Ff11HCxIQ2OE2uKfuad26k4%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments: UnsafeRelaxed,no \u0026lt;escaping /\u0026gt; required,512)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 47.772814444235756 \u003e 43.37863983296739.\r\nIsChangePoint: Marked as a change because one of 3/7/2022 10:45:01 PM, 4/7/2022 3:14:09 PM, 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -18.005966866375793 (T) = (0 -47.106017875195064) / Math.Sqrt((1.2577621928244864 / (43)) + (0.6299974377406298 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -0.10728431849377293 = (42.54193533533725 - 47.106017875195064) / 42.54193533533725 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.Text.Encodings.Web.Tests.Perf_Encoders.EncodeUtf8(arguments: JavaScript,no escaping required,512)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 47.226215084305764 \u003e 43.17750218108369.\r\nIsChangePoint: Marked as a change because one of 3/7/2022 10:45:01 PM, 4/7/2022 3:14:09 PM, 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -21.33280955200132 (T) = (0 -47.17689151746384) / Math.Sqrt((1.0211644876569723 / (43)) + (0.5002273222949377 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -0.11439981085252672 = (42.33390122470772 - 47.17689151746384) / 42.33390122470772 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.19042\r\nBaseline | [8cada8ea5cbb72a6cc3f14af65e48b5076273ef9](https://github.com/dotnet/runtime/commit/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9)\r\nCompare | [8e624b33465546e9d05da2afea5faea233d9f847](https://github.com/dotnet/runtime/commit/8e624b33465546e9d05da2afea5faea233d9f847)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9...8e624b33465546e9d05da2afea5faea233d9f847)\r\n\r\n\r\n### Regressions in System.Text.Json.Reader.Tests.Perf_Base64\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[ReadBase64EncodedByteArray_HeavyEscaping - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Text.Json.Reader.Tests.Perf_Base64.ReadBase64EncodedByteArray_HeavyEscaping(NumberOfBytes%3a%20100).html\u003e) | 107.43 ns | 118.16 ns | 1.10 | 0.26 | False | | |\r\n[ReadBase64EncodedByteArray_NoEscaping - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Text.Json.Reader.Tests.Perf_Base64.ReadBase64EncodedByteArray_NoEscaping(NumberOfBytes%3a%20100).html\u003e) | 107.26 ns | 118.60 ns | 1.11 | 0.23 | False | | |\r\n\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/05_03_2022/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Text.Json.Reader.Tests.Perf_Base64.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Text.Json.Reader.Tests.Perf_Base64*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-0d400aef-59b9-4b02-83ef-bc3b709bc1df4a9bdd4f93f43b991/42e7a1ca-2c97-44be-84cb-38d073c43d14.zip?sv=2019-07-07\u0026se=2022-05-29T16%3A09%3A52Z\u0026sr=c\u0026sp=rl\u0026sig=lhdCbwYLJV1BQH1aHf2VvivT5YL6uj3t8CDIFD%2FISVo%3D\u003e)\r\n[Compare](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-458f5d77-3126-4bc5-b224-85d899c36539d7ada2c88884b12be/ae4bbdd2-c1f9-4536-9c44-1c098af094f3.zip?sv=2019-07-07\u0026se=2022-05-30T01%3A35%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=VZPNaixV%2BP%2FLyVAJWwly%2Ff11HCxIQ2OE2uKfuad26k4%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Text.Json.Reader.Tests.Perf_Base64.ReadBase64EncodedByteArray_HeavyEscaping(NumberOfBytes: 100)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 118.15730611582981 \u003e 112.528548231773.\r\nIsChangePoint: Marked as a change because one of 3/1/2022 10:24:04 PM, 3/11/2022 8:42:43 PM, 4/8/2022 7:02:49 PM, 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -18.096793187947444 (T) = (0 -122.82801015826061) / Math.Sqrt((48.11993148945896 / (43)) + (7.076693423744189 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -0.2212703324395548 = (100.5739735877354 - 122.82801015826061) / 100.5739735877354 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```#### System.Text.Json.Reader.Tests.Perf_Base64.ReadBase64EncodedByteArray_NoEscaping(NumberOfBytes: 100)\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 118.6007184493413 \u003e 112.99080979065236.\r\nIsChangePoint: Marked as a change because one of 2/26/2022 10:27:55 AM, 3/17/2022 6:54:53 PM, 3/30/2022 6:37:35 PM, 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -18.670736042618184 (T) = (0 -123.90923544710004) / Math.Sqrt((43.78788994964401 / (43)) + (5.1490661617217715 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -0.20786339860338812 = (102.58547083252306 - 123.90923544710004) / 102.58547083252306 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked not as a regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.19042\r\nBaseline | [8cada8ea5cbb72a6cc3f14af65e48b5076273ef9](https://github.com/dotnet/runtime/commit/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9)\r\nCompare | [8e624b33465546e9d05da2afea5faea233d9f847](https://github.com/dotnet/runtime/commit/8e624b33465546e9d05da2afea5faea233d9f847)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9...8e624b33465546e9d05da2afea5faea233d9f847)\r\n\r\n\r\n### Regressions in System.Numerics.Tests.Perf_Vector2\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[EqualsBenchmark - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Numerics.Tests.Perf_Vector2.EqualsBenchmark.html\u003e) | 0.28 ns | 1.29 ns | 4.62 | 0.07 | True | | |\r\n\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/05_03_2022/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Numerics.Tests.Perf_Vector2.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Numerics.Tests.Perf_Vector2*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-0d400aef-59b9-4b02-83ef-bc3b709bc1df4a9bdd4f93f43b991/42e7a1ca-2c97-44be-84cb-38d073c43d14.zip?sv=2019-07-07\u0026se=2022-05-29T16%3A09%3A52Z\u0026sr=c\u0026sp=rl\u0026sig=lhdCbwYLJV1BQH1aHf2VvivT5YL6uj3t8CDIFD%2FISVo%3D\u003e)\r\n[Compare](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-458f5d77-3126-4bc5-b224-85d899c36539d7ada2c88884b12be/ae4bbdd2-c1f9-4536-9c44-1c098af094f3.zip?sv=2019-07-07\u0026se=2022-05-30T01%3A35%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=VZPNaixV%2BP%2FLyVAJWwly%2Ff11HCxIQ2OE2uKfuad26k4%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Numerics.Tests.Perf_Vector2.EqualsBenchmark\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 1.2876561297941465 \u003e 0.2924412055561342.\r\nIsChangePoint: Marked as a change because one of 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -154.25960941238614 (T) = (0 -1.2879862186883484) / Math.Sqrt((0.0020172938232947456 / (43)) + (2.9968167142484406E-07 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -4.570434144942063 = (0.2312182830233862 - 1.2879862186883484) / 0.2312182830233862 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.19042\r\nBaseline | [8cada8ea5cbb72a6cc3f14af65e48b5076273ef9](https://github.com/dotnet/runtime/commit/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9)\r\nCompare | [8e624b33465546e9d05da2afea5faea233d9f847](https://github.com/dotnet/runtime/commit/8e624b33465546e9d05da2afea5faea233d9f847)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9...8e624b33465546e9d05da2afea5faea233d9f847)\r\n\r\n\r\n### Regressions in System.Numerics.Tests.Perf_Quaternion\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[EqualsBenchmark - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Numerics.Tests.Perf_Quaternion.EqualsBenchmark.html\u003e) | 0.00 ns | 11.15 ns | ∞ | 0.95 | True | | |\r\n\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/05_03_2022/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Numerics.Tests.Perf_Quaternion.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Numerics.Tests.Perf_Quaternion*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-0d400aef-59b9-4b02-83ef-bc3b709bc1df4a9bdd4f93f43b991/42e7a1ca-2c97-44be-84cb-38d073c43d14.zip?sv=2019-07-07\u0026se=2022-05-29T16%3A09%3A52Z\u0026sr=c\u0026sp=rl\u0026sig=lhdCbwYLJV1BQH1aHf2VvivT5YL6uj3t8CDIFD%2FISVo%3D\u003e)\r\n[Compare](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-458f5d77-3126-4bc5-b224-85d899c36539d7ada2c88884b12be/ae4bbdd2-c1f9-4536-9c44-1c098af094f3.zip?sv=2019-07-07\u0026se=2022-05-30T01%3A35%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=VZPNaixV%2BP%2FLyVAJWwly%2Ff11HCxIQ2OE2uKfuad26k4%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Numerics.Tests.Perf_Quaternion.EqualsBenchmark\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.14649432647553 \u003e 2.2365692042930726E-05.\r\nIsChangePoint: Marked as a change because one of 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -181.94053983303652 (T) = (0 -11.273238302627806) / Math.Sqrt((4.477823620270642E-09 / (43)) + (0.06910451563348406 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -193740.73372137028 = (5.818693828166324E-05 - 11.273238302627806) / 5.818693828166324E-05 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n### Run Information\r\n\r\nArchitecture | x64\r\n-- | --\r\nOS | Windows 10.0.19042\r\nBaseline | [8cada8ea5cbb72a6cc3f14af65e48b5076273ef9](https://github.com/dotnet/runtime/commit/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9)\r\nCompare | [8e624b33465546e9d05da2afea5faea233d9f847](https://github.com/dotnet/runtime/commit/8e624b33465546e9d05da2afea5faea233d9f847)\r\nDiff | [Diff](https://github.com/dotnet/runtime/compare/8cada8ea5cbb72a6cc3f14af65e48b5076273ef9...8e624b33465546e9d05da2afea5faea233d9f847)\r\n\r\n\r\n### Regressions in System.Numerics.Tests.Perf_Matrix3x2\r\n\r\nBenchmark | Baseline | Test | Test/Base | Test Quality | Edge Detector | Baseline IR | Compare IR | IR Ratio | Baseline ETL | Compare ETL\r\n-- | -- | -- | -- | -- | -- | -- | -- | -- | -- | --\r\n[EqualsBenchmark - Duration of single invocation](\u003chttps://pvscmdupload.blob.core.windows.net/reports/allTestHistory/refs/heads/main_x64_Windows 10.0.19042/amd/System.Numerics.Tests.Perf_Matrix3x2.EqualsBenchmark.html\u003e) | 5.85 ns | 11.83 ns | 2.02 | 0.05 | True | | |\r\n\r\n[Test Report](\u003chttps://pvscmdupload.blob.core.windows.net/autofilereport/autofilereports/05_03_2022/refs/heads/main_x64_Windows%2010.0.19042/amd_Regression/System.Numerics.Tests.Perf_Matrix3x2.html\u003e)\r\n\r\n### Repro\r\n\r\n```cmd\r\ngit clone https://github.com/dotnet/performance.git\r\npy .\\performance\\scripts\\benchmarks_ci.py -f net6.0 --filter \u0027System.Numerics.Tests.Perf_Matrix3x2*\u0027\r\n```\r\n\u003cdetails\u003e\r\n\r\n### Payloads\r\n\r\n[Baseline](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-0d400aef-59b9-4b02-83ef-bc3b709bc1df4a9bdd4f93f43b991/42e7a1ca-2c97-44be-84cb-38d073c43d14.zip?sv=2019-07-07\u0026se=2022-05-29T16%3A09%3A52Z\u0026sr=c\u0026sp=rl\u0026sig=lhdCbwYLJV1BQH1aHf2VvivT5YL6uj3t8CDIFD%2FISVo%3D\u003e)\r\n[Compare](\u003chttps://helixdi8s23ayyeko0k025g8.blob.core.windows.net/helix-job-458f5d77-3126-4bc5-b224-85d899c36539d7ada2c88884b12be/ae4bbdd2-c1f9-4536-9c44-1c098af094f3.zip?sv=2019-07-07\u0026se=2022-05-30T01%3A35%3A14Z\u0026sr=c\u0026sp=rl\u0026sig=VZPNaixV%2BP%2FLyVAJWwly%2Ff11HCxIQ2OE2uKfuad26k4%3D\u003e)\r\n### Histogram\r\n\r\n#### System.Numerics.Tests.Perf_Matrix3x2.EqualsBenchmark\r\n\r\n```log\r\n\r\n```\r\n### Description of detection logic\r\n```IsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsRegressionBase: Marked as regression because the compare was 5% greater than the baseline, and the value was not too small.\r\nIsRegressionChecked: Marked as regression because the three check build points were 0.05 greater than the baseline.\r\nIsRegressionWindowed: Marked as regression because 11.827250105165023 \u003e 6.179545171862462.\r\nIsChangePoint: Marked as a change because one of 4/29/2022 5:18:09 PM, 5/3/2022 11:42:39 AM falls between 4/24/2022 10:52:31 PM and 5/3/2022 11:42:39 AM.\r\nIsRegressionStdDev: Marked as regression because -23.65901729152748 (T) = (0 -11.320785504162444) / Math.Sqrt((0.0031768633803055148 / (43)) + (0.9359619784340367 / (18))) is less than -2.000995378087428 = MathNet.Numerics.Distributions.StudentT.InvCDF(0, 1, (43) + (18) - 2, .025) and -0.911656209613231 = (5.921977731787287 - 11.320785504162444) / 5.921977731787287 is less than -0.05.\r\nIsImprovementBase: Marked as not an improvement because the compare was not 5% less than the baseline, or the value was too small.\r\nIsChangeEdgeDetector: Marked as regression because Edge Detector said so.\r\n\r\n```\r\n\r\n### Docs\r\n\r\n[Profiling workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/profiling-workflow-dotnet-runtime.md)\r\n[Benchmarking workflow for dotnet/runtime repository](https://github.com/dotnet/performance/blob/master/docs/benchmarking-workflow-dotnet-runtime.md)\r\n\r\n\u003c/details\u003e\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eperformanceautofiler[bot]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eGrabYourPitchforks, DrewScoggins, tannergooding\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.Encodings.Web`, `tenet-performance`, `tenet-performance-benchmarks`, `area-CodeGen-coreclr`, `refs/heads/main`, `RunKind=micro`, `Windows 10.0.19042`, `Regression`, `CoreClr`, `x64`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-15T01:13:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5MRXsS",
                                           "createdAt":  "2022-10-15T01:13:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BruceForstall",
                                           "body":  "Based on https://github.com/dotnet/runtime/issues/68820#issuecomment-1116293530, changed the \"area\" label.",
                                           "updatedAt":  "2022-10-15T01:13:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ypga8",
                                           "createdAt":  "2023-03-28T16:50:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "We should rerun the perf tests on this and see if the regression still exists",
                                           "updatedAt":  "2023-03-28T16:50:17Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[Perf] Regressions in Vector Equals",
        "labels":  [
                       "area-System.Text.Encodings.Web",
                       "tenet-performance",
                       "tenet-performance-benchmarks",
                       "runtime-coreclr"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70419",
        "createdAt":  "2022-06-08T04:41:04Z",
        "number":  70419,
        "author":  "habbes",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-03-08T14:02:31Z",
        "body":  "### Background and motivation\n\nThe OData team is adopting `Utf8JsonWriter` to improve its JSON serialization performance. Currently it uses a custom-built `JsonWriter`. To minimize breaking changes and friction to our users, we would like the new writer to be compatible with the existing output as far as the serialized output is concerned. One incompatibility that has emerged is how the two writers handle string escaping:\r\n\r\nThe OData writer by default escapes control chars (\u003c `0x20`), non-ASCII chars (\u003e `0x7F`) and characters like `\", \\, \\n, \\b, \\f, \\r, \\t`.\r\n\r\nNone of the built-in `JavaScriptEncoder` implementing matching escaping rules.\r\n\r\nThe `JavaScriptEncoder.Default` escapes all the characters the OData writer escapes, but it also escapes HTML-sensitive characters like `\u003c` and `\u003e` which OData does not. It also escapes double quote using `\\u0022` where OData escapes it using a backslash: `\\\"`.\r\n\r\nThe `JavaScriptEncoder.UnsafeRelaxedJsonEscaping` does not escape HTML-sensitive characters, but it also does not escape non-ASCII characters (\u003e `0x7f`).\r\n\r\nI tried to create a custom `TextEncoderSettings` object to explicitly allow the characters that I do not want to be escaped. I explicitly allowed characters like `\u003c` and passed it to `JavaScriptEncoder.Create(settings)`. But the HTML characters were still escaped. It seems like `JavaScriptEncoder.Create` is hardwired to forbid HTML characters even when the user explicitly allows them.\r\n\r\n`JavaScriptEncoder.Create` calls the constructor of the internal [`DefaultJavaScriptEncoder(TextEncoderSettings settings, bool allowMinimalJsonEscaping)`](https://github.com/dotnet/runtime/blob/12a6db44b3f3d69f37f7bf0eb83664e192a0f3e4/src/libraries/System.Text.Encodings.Web/src/System/Text/Encodings/Web/DefaultJavaScriptEncoder.cs#L21). This creates an `OptimizedInboxTextEncoder` with the option to forbid HTML characters depending on whether `allowMinimalJsonEscaping` is set to `true` or `false`.\r\n[This `allowMinimalJsonEscaping` is set to false](https://github.com/dotnet/runtime/blob/12a6db44b3f3d69f37f7bf0eb83664e192a0f3e4/src/libraries/System.Text.Encodings.Web/src/System/Text/Encodings/Web/DefaultJavaScriptEncoder.cs#L17) when creating an encoder with custom settings. And there does not seem to be any option for the user to enable it.\r\n\r\nIt would be great if the user had the option to set `allowMinimalJsonEscaping` to `true` when calling `JavaScriptEncoder.Create`, or any alternative that allows the bypassing the HTML escaping.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Text.Encodings.Web\r\n\r\npublic abstract class JavaScriptEncoder : TextEncoder\r\n{\r\n    public static JavaScriptEncoder Create(TextEncoderSettings settings, bool allowMinimalJsonEscaping);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n// Fancy the value\r\nvar settings = new TextEncoderSettings();\r\nsettings.AllowRange(UnicodeRanges.BasicLatin);\r\nsettings.AllowCharacter(...);\r\n\r\nvar encoder = JavaScriptEncoder.Create(settings, true);\r\n\r\nvar writer = new Utf8JsonWriter(output, new JsonWriterSettings { Encoder = encoder });\r\n\r\nwriter.WriterStringValue(\"A is \u003c B\"); // writes \"A is \u003c B\" instead of \"A is \\u003C B\"\r\n```\r\n\n\n### Alternative Designs\n\nAlternatively, you can change the behaviour of `JavaScriptEncoder.Create(TextEncoderSettings)` such that it does not forbid HTML-sensitive characters. But this would be a breaking change.\n\n### Risks\n\nAllow HTML-sensitive characters presents the same risks as using the existing `JavaScriptEncoder.UnsafeRelaxedJsonEscaping`. Those risks are [outlined in these docs](https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-character-encoding#serialize-all-characters). Our use-case is sending a JSON response when `application/json; charset = utf-8` header is set.\r\n\r\nAspNetCore also [uses `JavaScriptEncoder.UnsafeRelaxedJsonEscaping`](https://github.com/dotnet/aspnetcore/blob/86e28e7b267579e2999e06b63eeef27e4836384a/src/Mvc/Mvc.Core/src/Formatters/SystemTextJsonOutputFormatter.cs#L40) for JSON serialization by default.\r\n\r\nThe new API would essentially be `JavaScriptEncoder.UnsafeRelaxedJsonEscaping` with a bit more control to escape additional characters.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdlwhLw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Eg0VJ",
                                           "createdAt":  "2022-06-08T04:41:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encodings-web\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThe OData team is adopting `Utf8JsonWriter` to improve its JSON serialization performance. Currently it uses a custom-built `JsonWriter`. To minimize breaking changes and friction to our users, we would like the new writer to be compatible with the existing output as far as the serialized output is concerned. One incompatibility that has emerged is how the two writers handle string escaping:\r\n\r\nThe OData writer by default escapes control chars (\u003c `0x20`), non-ASCII chars (\u003e `0x7F`) and characters like `\", \\, \\n, \\b, \\f, \\r, \\t`.\r\n\r\nNone of the built-in `JavaScriptEncoder` implementing matching escaping rules.\r\n\r\nThe `JavaScriptEncoder.Default` escapes all the characters the OData writer escapes, but it also escapes HTML-sensitive characters like `\u003c` and `\u003e` which OData does not. It also escapes double quote using `\\u0022` where OData escapes it using a backslash: `\\\"`.\r\n\r\nThe `JavaScriptEncoder.UnsafeRelaxedJsonEscaping` does not escape HTML-sensitive characters, but it also does not escape non-ASCII characters (\u003e `0x7f`).\r\n\r\nI tried to create a custom `TextEncoderSettings` object to explicitly allow the characters that I do not want to be escaped. I explicitly allowed characters like `\u003c` and passed it to `JavaScriptEncoder.Create(settings)`. But the HTML characters were still escaped. It seems like `JavaScriptEncoder.Create` is hardwired to forbid HTML characters even when the user explicitly allows them.\r\n\r\n`JavaScriptEncoder.Create` calls the constructor of the internal [`DefaultJavaScriptEncoder(TextEncoderSettings settings, bool allowMinimalJsonEscaping)`](https://github.com/dotnet/runtime/blob/12a6db44b3f3d69f37f7bf0eb83664e192a0f3e4/src/libraries/System.Text.Encodings.Web/src/System/Text/Encodings/Web/DefaultJavaScriptEncoder.cs#L21). This creates an `OptimizedInboxTextEncoder` with the option to forbid HTML characters depending on whether `allowMinimalJsonEscaping` is set to `true` or `false`.\r\n[This `allowMinimalJsonEscaping` is set to false](https://github.com/dotnet/runtime/blob/12a6db44b3f3d69f37f7bf0eb83664e192a0f3e4/src/libraries/System.Text.Encodings.Web/src/System/Text/Encodings/Web/DefaultJavaScriptEncoder.cs#L17) when creating an encoder with custom settings. And there does not seem to be any option for the user to enable it.\r\n\r\nIt would be great if the user had the option to set `allowMinimalJsonEscaping` to `true` when calling `JavaScriptEncoder.Create`, or any alternative that allows the bypassing the HTML escaping.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Text.Encodings.Web\r\n\r\npublic abstract class JavaScriptEncoder : TextEncoder\r\n{\r\n    public static JavaScriptEncoder Create(TextEncoderSettings settings, bool allowMinimalJsonEscaping);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n// Fancy the value\r\nvar settings = new TextEncoderSettings();\r\nsettings.AllowRange(UnicodeRanges.BasicLatin);\r\nsettings.AllowCharacter(...);\r\n\r\nvar encoder = JavaScriptEncoder.Create(settings, true);\r\n\r\nvar writer = new Utf8JsonWriter(output, new JsonWriterSettings { Encoder = encoder });\r\n\r\nwriter.WriterStringValue(\"A is \u003c B\"); // writes \"A is \u003c B\" instead of \"A is \\u003C B\"\r\n```\r\n\n\n### Alternative Designs\n\nAlternatively, you can change the behaviour of `JavaScriptEncoder.Create(TextEncoderSettings)` such that it does not forbid HTML-sensitive characters. But this would be a breaking change.\n\n### Risks\n\nAllow HTML-sensitive characters presents the same risks as using the existing `JavaScriptEncoder.UnsafeRelaxedJsonEscaping`. Those risks are [outlined in these docs](https://docs.microsoft.com/en-us/dotnet/standard/serialization/system-text-json-character-encoding#serialize-all-characters). Our use-case is sending a JSON response when `application/json; charset = utf-8` header is set.\r\n\r\nAspNetCore also [uses `JavaScriptEncoder.UnsafeRelaxedJsonEscaping`](https://github.com/dotnet/aspnetcore/blob/86e28e7b267579e2999e06b63eeef27e4836384a/src/Mvc/Mvc.Core/src/Formatters/SystemTextJsonOutputFormatter.cs#L40) for JSON serialization by default.\r\n\r\nThe new API would essentially be `JavaScriptEncoder.UnsafeRelaxedJsonEscaping` with a bit more control to escape additional characters.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehabbes\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Text.Encodings.Web`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-08T04:41:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Eg0of",
                                           "createdAt":  "2022-06-08T04:42:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "habbes",
                                           "body":  "If this feature request is approved, I would be happy to contribute the changes (with proper guidance).",
                                           "updatedAt":  "2022-06-08T04:42:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GezlC",
                                           "createdAt":  "2022-07-12T20:40:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCmpoEg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "habbes",
                                                                               "createdAt":  "2022-07-14T06:58:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@dotnet/area-system-text-encodings-web  it looks like triage missed this. could we share whether this is something we\u0027d consider? @GrabYourPitchforks may have an opinion here.",
                                           "updatedAt":  "2022-07-12T20:40:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gmubz",
                                           "createdAt":  "2022-07-14T15:02:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "Largely a duplicate of https://github.com/dotnet/runtime/issues/54193.\r\n\r\n\u003e But the HTML characters were still escaped. It seems like JavaScriptEncoder.Create is hardwired to forbid HTML characters even when the user explicitly allows them.\r\n\r\nThat is correct. The issue above (see also https://github.com/dotnet/runtime/issues/1564#issuecomment-504780719) goes into this in more detail. That\u0027s also why we have the \"unsafe relaxed\" encoder. We provide two switches: give me the safest thing, or give me something which closely aligns with the spec. We\u0027re not terribly interested in providing \"mix-and-match\" style functionality out of the box since these go down the path of very edge case scenarios.\r\n\r\nIn OP\u0027s example, the reason they want this functionality is that they want an absolute guarantee of \\\u003csome output sequence\\\u003e given \\\u003csome input sequence\\\u003e. But the encoders have never guaranteed output stability for any given input. We change the logic every release to follow best practice and to account for updates to the Unicode spec. Even in .NET Framework - which has _extremely_ strict compat requirements! - we changed how characters were encoded every so often. The API OP wants us to expose would not address their issue of \"we want this exact sequence of bytes to be emitted given this input.\" That\u0027s simply a guarantee we intentionally do not fulfill.\r\n\r\nIf you want to emit a specific sequence of bytes, you can subclass the encoder and override the appropriate members. The issue I linked above contains sample code showing how to do this. The difficulty given the current design is that many of the workhorse methods require you to write unsafe code.\r\n\r\nI think it would be sensible to introduce a \"simple\" interface which allows you to take over the entire encoding process, something like:\r\n\r\n```cs\r\npublic interface ITextEncoder\r\n{\r\n    bool WillEncode(Rune value);\r\n    bool TryEncodeValue(Rune value, Span\u003cchar\u003e destination, out int charsWritten);\r\n}\r\n```\r\n\r\n(And in fact this is how the encoders were initially designed all those years back, before they were copied in to .NET Core 1.0.)",
                                           "updatedAt":  "2022-07-14T15:02:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HZUEj",
                                           "createdAt":  "2022-07-28T08:17:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "habbes",
                                           "body":  "@GrabYourPitchforks thanks for following up and thanks for the detailed insights as well as the linked issues. Since the new writer we have implemented in our serializer requires users to explicitly opt-in to it, we have settled on making it clear in documentation that the byte-to-byte output and encoding might differ from the default. We\u0027ll also let users pass their preferred `JavaScriptEncoder` to be used. In the extreme cause maybe, they can subclass `JavaScriptEncoder` and override the escaping behaviour.\r\n\r\nThe API you have proposed looks good. Is it likely to make it in the standard library in the foreseeable future?",
                                           "updatedAt":  "2022-07-28T08:17:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HqNDC",
                                           "createdAt":  "2022-08-02T09:29:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "\u003e The API you have proposed looks good. Is it likely to make it in the standard library in the foreseeable future?\r\n\r\nThis isn\u0027t in consideration for .NET 7. @habbes Would you like to refine the original proposal here to align with @GrabYourPitchforks\u0027 proposal to see if this could get queued up for API Review?",
                                           "updatedAt":  "2022-08-02T09:29:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc52XCEv",
                                           "createdAt":  "2024-03-08T14:02:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ogjkoch",
                                           "body":  "Has there been any movement on this?  I\u0027m (unfortunately) working on migrating a large, old .NET Framework ASP.Net project to .NET 8 and we\u0027re having interminable problems with not having anything 100% equivalent to Json.Encode from Framework and no way to get there.",
                                           "updatedAt":  "2024-03-08T14:02:30Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[API Proposal]: Allow custom JavaScriptEncoder that allows HTML-sensitive characters",
        "labels":  [
                       "api-suggestion",
                       "area-System.Text.Encodings.Web"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73329",
        "createdAt":  "2022-08-03T20:12:29Z",
        "number":  73329,
        "author":  "GrabYourPitchforks",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2Szsw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eiriktsarpalis",
                                            "createdAt":  "2022-08-03T20:24:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "exyi",
                                            "createdAt":  "2024-03-04T21:05:15Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-08-03T20:23:45Z",
        "body":  "## API Proposal: `JavaScriptEncoder.JsonDefault`\r\n\r\nThe API `JavaScriptEncoder.Default` is intended to be the single entry point for escaping all things ECMAScript and ECMAScript-adjacent, but it\u0027s doing a bit too much right now. For example, since it\u0027s trying to handle _both_ ECMA-262 (ECMAScript) _and_ ECMA-404 (JSON), it needs to support the subset that is common to them both.\r\n\r\nThis results in `JavaScriptEncoder.Default` encoding the `U+000B VERTICAL TABULATION` character as `\"\\u000B\"` instead of `\"\\v\"`, for instance, since that\u0027s the only way to encode it that\u0027s legal under both ECMA specs. It also results in `JavaScriptEncoder.Default` escaping more characters than needed (like `U+0060 GRAVE ACCENT`) for JSON scenarios.\r\n\r\n### Proposal\r\n\r\n```cs\r\nnamespace System.Text.Encodings.Web\r\n{\r\n    public partial class JavaScriptEncoder\r\n    {\r\n        // (existing accelerators)\r\n        public static JavaScriptEncoder Default { get; }\r\n        public static JavaScriptEncoder UnsafeRelaxedJsonEscaping { get; }\r\n\r\n        // NEW PROPOSED ACCELERATOR\r\n        public static JavaScriptEncoder JsonDefault { get; }\r\n    }\r\n}\r\n```\r\n\r\n### Discussion\r\n\r\nThis new static property would be the default for JSON escaping scenarios. We would expect _System.Text.Json_ to use it instead of `JavaScriptEncoder.Default` as the default encoder.\r\n\r\nThis allows the two scenarios to change with some amount of isolation. Any work we do to support ECMA-262 can stay contained within the `Default` encoder, and any work we do to support ECMA-404 can stay contained within the `JsonDefault` encoder.\r\n\r\n\u003e Note: We would expect some cross-pollination of logic between the two. Additionally, if some future update to ECMA-262 or ECMA-404 is released which brings the two specs into closer alignment, it\u0027s possible that the two encoders might eventually have identical behavior. And as the specs get new revisions, the behaviors might again later diverge.\r\n\r\n### Risks\r\n\r\nLittle risk of confusion to existing customers, since very few people call these APIs directly.\r\n\r\nBiggest risk is likely that switching between the two encoders will alter the output payload, and customers who depend on these payloads being _byte-for-byte_ identical across versions may see test failures if they\u0027re not properly unescaping the payloads while reading them back in. But this isn\u0027t a new risk: every released version of the encoding APIs has tweaked the list of allowed-unescaped characters, so applications which depended on bitwise identical outputs were already broken.\r\n\r\n/cc @dotnet/area-system-text-json ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR8pAJA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HykAk",
                                           "createdAt":  "2022-08-03T20:23:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encodings-web\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## API Proposal: `JavaScriptEncoder.JsonDefault`\r\n\r\nThe API `JavaScriptEncoder.Default` is intended to be the single entry point for escaping all things ECMAScript and ECMAScript-adjacent, but it\u0027s doing a bit too much right now. For example, since it\u0027s trying to handle _both_ ECMA-262 (ECMAScript) _and_ ECMA-404 (JSON), it needs to support the subset that is common to them both.\r\n\r\nThis results in `JavaScriptEncoder.Default` encoding the `U+000B VERTICAL TABULATION` character as `\"\\u000B\"` instead of `\"\\v\"`, for instance, since that\u0027s the only way to encode it that\u0027s legal under both ECMA specs. It also results in `JavaScriptEncoder.Default` escaping more characters than needed (like `U+0060 GRAVE ACCENT`) for JSON scenarios.\r\n\r\n### Proposal\r\n\r\n```cs\r\nnamespace System.Text.Encodings.Web\r\n{\r\n    public partial class JavaScriptEncoder\r\n    {\r\n        // (existing accelerators)\r\n        public static JavaScriptEncoder Default { get; }\r\n        public static JavaScriptEncoder UnsafeRelaxedJsonEscaping { get; }\r\n\r\n        // NEW PROPOSED ACCELERATOR\r\n        public static JavaScriptEncoder JsonDefault { get; }\r\n    }\r\n}\r\n```\r\n\r\n### Discussion\r\n\r\nThis new static property would be the default for JSON escaping scenarios. We would expect _System.Text.Json_ to use it instead of `JavaScriptEncoder.Default` as the default encoder.\r\n\r\nThis allows the two scenarios to change with some amount of isolation. Any work we do to support ECMA-262 can stay contained within the `Default` encoder, and any work we do to support ECMA-404 can stay contained within the `JsonDefault` encoder.\r\n\r\n\u003e Note: We would expect some cross-pollination of logic between the two. Additionally, if some future update to ECMA-262 or ECMA-404 is released which brings the two specs into closer alignment, it\u0027s possible that the two encoders might eventually have identical behavior. And as the specs get new revisions, the behaviors might again later diverge.\r\n\r\n### Risks\r\n\r\nLittle risk of confusion to existing customers, since very few people call these APIs directly.\r\n\r\nBiggest risk is likely that switching between the two encoders will alter the output payload, and customers who depend on these payloads being _byte-for-byte_ identical across versions may see test failures if they\u0027re not properly unescaping the payloads while reading them back in. But this isn\u0027t a new risk: every released version of the encoding APIs has tweaked the list of allowed-unescaped characters, so applications which depended on bitwise identical outputs were already broken.\r\n\r\n/cc @dotnet/area-system-text-json \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eGrabYourPitchforks\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eGrabYourPitchforks\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Text.Encodings.Web`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-03T20:23:44Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "API Proposal: JavaScriptEncoder.JsonDefault",
        "labels":  [
                       "api-suggestion",
                       "area-System.Text.Encodings.Web"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87153",
        "createdAt":  "2023-06-05T22:25:54Z",
        "number":  87153,
        "author":  "davidmatson",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODPhspg==",
                          "nodes":  [
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "fowl2",
                                            "createdAt":  "2023-09-22T09:00:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tipa",
                                            "createdAt":  "2024-04-03T21:55:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "doggy8088",
                                            "createdAt":  "2024-04-13T18:47:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "osexpert",
                                            "createdAt":  "2024-09-04T08:25:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "reflectronic",
                                            "createdAt":  "2024-09-08T23:31:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aukaheng",
                                            "createdAt":  "2024-11-22T03:50:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dreamescaper",
                                            "createdAt":  "2024-11-22T14:12:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rampaa",
                                            "createdAt":  "2025-01-04T19:51:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kpietralik",
                                            "createdAt":  "2025-05-21T08:55:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MHDBST",
                                            "createdAt":  "2025-06-06T00:25:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Demivan",
                                            "createdAt":  "2025-07-11T09:31:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eugene-g",
                                            "createdAt":  "2025-07-30T04:15:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austinw-fineart",
                                            "createdAt":  "2025-09-10T06:02:02Z"
                                        }
                                    ],
                          "totalCount":  13
                      },
        "updatedAt":  "2024-09-19T11:59:20Z",
        "body":  "### Background and motivation\r\n\r\nThere\u0027s no built-in implementation that allows characters from all languages to be kept readable, and unnecessary escaping to be avoided when the caller knows recipients parse JSON correctly.\r\n\r\nFor additional context, see:\r\n#42847\r\n#86800\r\n#87138\r\n\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Text.Encodings.Web\r\n{\r\n    internal sealed class UnicodeJsonEncoder : JavaScriptEncoder\r\n    {\r\n        internal static readonly UnicodeJsonEncoder Singleton = new UnicodeJsonEncoder();\r\n\r\n        private readonly bool _preferHexEscape;\r\n        private readonly bool _preferUppercase;\r\n\r\n        public UnicodeJsonEncoder()\r\n            : this(preferHexEscape: false, preferUppercase: false)\r\n        {\r\n        }\r\n\r\n        public UnicodeJsonEncoder(bool preferHexEscape, bool preferUppercase)\r\n        {\r\n            _preferHexEscape = preferHexEscape;\r\n            _preferUppercase = preferUppercase;\r\n        }\r\n\r\n        // Implementations of base class members.\r\n    }\r\n}\r\n```\r\n\r\n```csharp\r\nnamespace System.Text.Encodings.Web\r\n{\r\n    public abstract class JavaScriptEncoder : TextEncoder\r\n    {\r\n        // Existing members\r\n\r\n        public static JavaScriptEncoder Unicode =\u003e UnicodeJsonEncoder.Singleton;\r\n    }\r\n}\r\n```\r\n\r\nPR #87147 has additional implementation details.\r\n\r\n### API Usage\r\n\r\n```csharp\r\n// some typed variable with the JSON object to serialize, called \"data\"\r\nstring json = JsonSerializer.Serialize(data new JsonSerializerOptions {  Encoder = JavaScriptEncoder.Unicode });\r\n```\r\n\r\nOr, to force hex escapes (\\uxxxx) rather than two-character escapes (for example, \\\"):\r\n```csharp\r\n// some typed variable with the JSON object to serialize, called \"data\"\r\nstring json = JsonSerializer.Serialize(data new JsonSerializerOptions {  Encoder = new UnicodeJsonEncoder(preferHexEscape: true, preferUppercase; false) }); // or other values for those bools\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\nSimilar to UnsafeRelaxedJsonEncoder, but see #87138.\r\n\r\nCallers need to ensure two things:\r\n1. If this JSON output is embedded inside another language (HTML, SQL, C#, etc.), the text is correctly escaped according to that language\u0027s requirements.\r\n2. The recipient and intermediaries follow the JSON spec correctly (can handle any Unicode characters that are unescaped like they do when such characters are escaped).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjLbVqQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5eB7qP",
                                           "createdAt":  "2023-06-05T22:26:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json, @gregsdennis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThere\u0027s no built-in implementation that allows characters from all languages to be kept readable, and unnecessary escaping to be avoided when the caller knows recipients parse JSON correctly.\r\n\r\nFor additional context, see:\r\n#42847\r\n#86800\r\n#87138\r\n\n\n### API Proposal\n\n```csharp\r\nnamespace System.Text.Encodings.Web\r\n{\r\n    internal sealed class UnicodeJsonEncoder : JavaScriptEncoder\r\n    {\r\n        internal static readonly UnicodeJsonEncoder Singleton = new UnicodeJsonEncoder();\r\n\r\n        private readonly bool _preferHexEscape;\r\n        private readonly bool _preferUppercase;\r\n\r\n        public UnicodeJsonEncoder()\r\n            : this(preferHexEscape: false, preferUppercase: false)\r\n        {\r\n        }\r\n\r\n        public UnicodeJsonEncoder(bool preferHexEscape, bool preferUppercase)\r\n        {\r\n            _preferHexEscape = preferHexEscape;\r\n            _preferUppercase = preferUppercase;\r\n        }\r\n\r\n        // Implementations of base class members.\r\n    }\r\n}\r\n```\r\n\r\n```csharp\r\nnamespace System.Text.Encodings.Web\r\n{\r\n    public abstract class JavaScriptEncoder : TextEncoder\r\n    {\r\n        // Existing members\r\n\r\n        public static JavaScriptEncoder Unicode =\u003e UnicodeJsonEncoder.Singleton;\r\n    }\r\n}\r\n```\r\n\r\nPR #87147 has additional implementation details.\n\n### API Usage\n\n```csharp\r\n// some typed variable with the JSON object to serialize, called \"data\"\r\nstring json = JsonSerializer.Serialize(data new JsonSerializerOptions {  Encoder = JavaScriptEncoder.Unicode });\r\n```\r\n\r\nOr, to force hex escapes (\\uxxxx) rather than two-character escapes (for example, \\\"):\r\n```csharp\r\n// some typed variable with the JSON object to serialize, called \"data\"\r\nstring json = JsonSerializer.Serialize(data new JsonSerializerOptions {  Encoder = new UnicodeJsonEncoder(preferHexEscape: true, preferUppercase; false) }); // or other values for those bools\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nSimilar to UnsafeRelaxedJsonEncoder, but see ##87138.\r\n\r\nCallers need to ensure two things:\r\n1. If this JSON output is embedded inside another language (HTML, SQL, C#, etc.), the text is correctly escaped according to that language\u0027s requirements.\r\n2. The recipient and intermediaries follow the JSON spec correctly (can handle any Unicode characters that are unescaped like they do when such characters are escaped).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edavidmatson\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Text.Json`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-05T22:26:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eEUo1",
                                           "createdAt":  "2023-06-06T08:36:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Thanks. Because we have too many open issues describing variations of the same problem, I\u0027m going to keep this one open and close #42847, #87138, #86810 and #86805. Feel free to incorporate any context from the other issues that you feel is missing so that it can be reviewed holistically.",
                                           "updatedAt":  "2023-06-06T08:36:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eHSjV",
                                           "createdAt":  "2023-06-06T15:21:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODyTdbw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "osexpert",
                                                                               "createdAt":  "2024-09-15T19:28:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rjgotten",
                                           "body":  "This API proposal is for a minimal encoder, stating it leaves it up to the caller to further escape content correctly for embedding in whatever other container language they need.\r\n\r\nHowever, there\u0027s a problem with that for embedding in HTML inside \u0027script islets\u0027 - i.e. inside `\u003cscript type=\"application/json\"\u003e` tags. Anything goes inside such tags, _except_ a closing `\u003c/script\u003e` tag. (Including all possible permutations involving white-space etc.)\r\n\r\nThe way to escape HTML content is to use entity encoding, e.g. to escape `\u003c` use either the named `\u0026lt;` or the numeric `\u0026#60;` escape. However, this will specifically **not** work inside `\u003cscript\u003e` tags.\r\n\r\nE.g. while\r\n```html\r\n\u003cscript type=\"application/json\"\u003e\r\n{ \"foo\" : \"\u0026lt;/script\u003e\" }\r\n\u003c/script\u003e\r\n```\r\nis suitably enough escaped, when the content is read back via the DOM (e.g. via `.innerText`; `.text` or `.textContent` ) it will still verbatim produce the string `{ \"foo\" : \"\u0026lt;/script\u003e\" }` with the encoded character remaining.\r\n\r\nIt\u0027s decidedly non-trivial to decide what entity-encoding signifies an encoded parameter that needs decoding - and what doesn\u0027t. Maybe your JSON contains a series of resource string translations for a technical editing application that talks about how to represent HTML entities and was _meant_ to contain an entity-encoded example?\r\n\r\nSo to get this right, your encoder has to encode _all_ occurences of entity-like sequences and then you have to _decode_ them again when attempting to read this stuff back.\r\n\r\n\r\nWould be better if the new API proposal would be extended to allow specifying additional characters that should be encoded with `\\u` encoded sequences. In that case, callers that know the JSON is destined to be placed inside such HTML script islets could add `\u003c` to the to-be-encoded set of characters and have them be encoded directly within the JSON itself - and then that would suffice.\r\n\r\n",
                                           "updatedAt":  "2023-06-06T15:28:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eHntV",
                                           "createdAt":  "2023-06-06T16:08:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidmatson",
                                           "body":  "@rjgotten - that\u0027s a very interesting case.\r\n\r\nFrom looking at the API surface, I believe the same question applies to the existing `JavaScriptEncoder.UnsafeRelaxedJsonEscaping`.\r\n\r\n```csharp\r\nstring data = \"\u003c/script\u003e\";\r\nstring json = JsonSerializer.Serialize(data, new JsonSerializerOptions {\r\n    Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping });\r\nConsole.WriteLine(json);\r\n```\r\n\r\nproduces:\r\n```\r\n\"\u003c/script\u003e\"\r\n```\r\n\r\n\u003e Would be better if the new API proposal would be extended to allow specifying additional characters that should be encoded with \\u encoded sequences. In that case, callers that know the JSON is destined to be placed inside such HTML script islets could add \u003c to the to-be-encoded set of characters and have them be encoded directly within the JSON itself - and then that would suffice.\r\n\r\nI think that\u0027s an interesting option to consider. I\u0027d tend to leave that functionality out of this API for simplicity. As far as I can tell, JavaScriptEncoder.UnsafeRelaxedJsonEscaping also does not escape these characters and cannot be customized to escape them (without subclassing) - I\u0027d tend to do the same here.",
                                           "updatedAt":  "2023-06-06T16:08:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MnJ0p",
                                           "createdAt":  "2024-09-18T17:50:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD8B2DA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "aukaheng",
                                                                               "createdAt":  "2024-11-22T03:56:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "osexpert",
                                           "body":  "Inspired by this problem, I made https://github.com/osexpert/ExtremeJsonEncoders.\r\nInspired by @rjgotten I also added extraAsciiEscapeChars option to MinimalJsonEncoder (limiting it to ascii made it easier/faster, can get away with a 128 bool[] map).\r\nThe code is a ripoff/fork from code in dotnet runtime.",
                                           "updatedAt":  "2024-09-18T17:50:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MtKKW",
                                           "createdAt":  "2024-09-19T10:47:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encodings-web\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-19T10:47:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Mto4y",
                                           "createdAt":  "2024-09-19T11:50:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregsdennis",
                                           "body":  "@eiriktsarpalis why transfer this to encodings.web?  It seems useful outside of the context of web.  I think it\u0027d be nice to have in STJ (where it would be used) rather than a different package (requiring an additional reference).",
                                           "updatedAt":  "2024-09-19T11:50:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6MttWp",
                                           "createdAt":  "2024-09-19T11:59:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "It\u0027s just where all the encoding implementations are located.",
                                           "updatedAt":  "2024-09-19T11:59:19Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[API Proposal]: UnicodeJsonEncoder",
        "labels":  [
                       "api-suggestion",
                       "area-System.Text.Encodings.Web",
                       "wishlist"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114423",
        "createdAt":  "2025-04-09T07:20:46Z",
        "number":  114423,
        "author":  "EgorBo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBA9Pw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2025-04-09T10:08:17Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-04-09T15:37:41Z",
        "body":  "### Background and motivation\n\nTextEncoder does not provide a safe version of `FindFirstCharacterToEncode` for UTF16, it only has an unsafe (accepting an unmanaged pointer) for UTF16 and a safe one for UTF8.\n\nIt\u0027s needed to remove an unnecessary unsafe context from System.Text.Json, see https://github.com/dotnet/runtime/pull/114154/files#r2025039597\n\nThis is part of the \"remove unsafe\" effort.\n\n### API Proposal\n\n```diff\nnamespaceSystem.Text.Encodings.Web;\n\npublic abstract class TextEncoder\n{\n        public abstract unsafe int FindFirstCharacterToEncode(char* text, int textLength);\n+       public int FindFirstCharacterToEncode(ReadOnlySpan\u003cchar\u003e text);\n        public virtual int FindFirstCharacterToEncodeUtf8(ReadOnlySpan\u003cbyte\u003e utf8Text)\n}\n```\n\n\n### API Usage\n\n```csharp\nreturn (encoder ?? JavaScriptEncoder.Default).FindFirstCharacterToEncode(value);\n```\ninstead of what we currently have to do:\n```cs\nunsafe\n{\n    fixed (char* ptr = value)\n    {\n        return (encoder ?? JavaScriptEncoder.Default).FindFirstCharacterToEncode(ptr, value.Length);\n    }\n}\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpka38A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6mN5c1",
                                           "createdAt":  "2025-04-09T07:42:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "Can it be virtual to reduce unsafe usage for implementations?",
                                           "updatedAt":  "2025-04-09T07:42:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mOAAX",
                                           "createdAt":  "2025-04-09T07:53:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "\u003e Can it be virtual to reduce unsafe usage for implementations?\n\nIn fact there is already one, yeah, So I presume the issue is to just make it public",
                                           "updatedAt":  "2025-04-09T07:53:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6mRrfw",
                                           "createdAt":  "2025-04-09T13:09:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encodings-web\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-09T13:09:54Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: TextEncoder.FindFirstCharacterToEncode(ReadOnlySpan\u003cchar\u003e)",
        "labels":  [
                       "api-suggestion",
                       "area-System.Text.Encodings.Web",
                       "reduce-unsafe"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119551",
        "createdAt":  "2025-09-10T20:08:12Z",
        "number":  119551,
        "author":  "AArnott",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODP8v3w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nil4",
                                            "createdAt":  "2025-09-11T07:00:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rampaa",
                                            "createdAt":  "2025-09-11T18:38:40Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-09-11T12:01:06Z",
        "body":  "### Background and motivation\n\nWe need a way to use System.Text.Json to serialize object graphs to JSON _without_ applying any JSON escaping beyond what the RFC calls for.\nIn particular, when writing JSON files to disk that _users_ around the world may read and edit, we want the user\u0027s data to round trip across deserialize/serialize calls without making their non-Latin characters entirely illegible. \nFor Visual Studio in particular, GB18030 compliance requires that we _not_ transform the user\u0027s surrogate pairs into `\\u1234\\u5678` style escape sequences which will render the JSON file unreadable to humans.\n\nScenarios that would benefit from this:\n\n1. Serializing `mcp.json` files, which are never used in a web context but are often read and edited by humans.\n1. Interactions with LLMs (e.g. the .NET ModelContextProtocol library) where the LLMs are trained on JSON that is not overly escaped.\n\nWe have tried using `JavaScriptEncoder.UnsafeRelaxedJsonEscaping`, and while that reduces the unwanted escaping, it still escapes surrogate pairs and some other on the [global block list](https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/character-encoding#global-block-list), which turns out to make certain languages and emojis illegible.\n\nWhile web scenarios benefit from the added security of the extra escaping that goes beyond the RFC requirements, some non-web scenarios are compromised by it. There should be a way to turn off this extra escaping that applies to very specific serializing code so that we don\u0027t have to compromise an entire application (via an appswitch or similar) in order to turn off extra escaping for one specific use case.\n\nOther GitHub issues have been raised requesting something similar, including: #86463\n\n### API Proposal\n\n```csharp\nnamespace System.Text.Encodings.Web\n{\n    public abstract class JavaScriptEncoder : TextEncoder\n    {\n        public static JavaScriptEncoder! CreateUnsafe(ReadOnlyMemory\u003cUnicodeRange\u003e);\n    }\n}\n```\n\nThis method would configure a `JavaScriptEncoder` instance that disregards the global block list.\nThe API docs should call this out specifically, and identity web scenarios as particularly impacted by this for security, but that non-web scenarios may be able to use this safely. \n\n### API Usage\n\n```csharp\nJsonSerializer.Serialize(myObject, new JsonSerializerOptions { Encoder = JavaScriptEncoder.CreateUnsafe([UnicodeRanges.All]) });\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nWeb applications that benefit from the security that comes from the (default and current behavior) of added escaping may be compromised when their maintainers do a web search and apply this new API without realizing it compromises their security (whether because they wanted to remove escaping or it just happened to be in the code snippet they copied).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw4Rsaw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7DSTla",
                                           "createdAt":  "2025-09-10T20:10:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-json, @gregsdennis\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-10T20:10:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DSVS3",
                                           "createdAt":  "2025-09-10T20:13:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here is a possible related and/or duplicate issue (I may be wrong):\n- https://github.com/dotnet/runtime/issues/87153",
                                           "updatedAt":  "2025-09-10T20:13:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DXEwk",
                                           "createdAt":  "2025-09-11T05:00:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-encodings-web\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-11T05:00:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DhGxr",
                                           "createdAt":  "2025-09-11T12:01:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "FYI @PranavSenthilnathan @jeffhandley ",
                                           "updatedAt":  "2025-09-11T12:01:05Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: JavaScriptEncoder.CreateUnsafe(ReadOnlyMemory\u003cUnicodeRange\u003e) method",
        "labels":  [
                       "api-suggestion",
                       "area-System.Text.Encodings.Web"
                   ]
    }
]
