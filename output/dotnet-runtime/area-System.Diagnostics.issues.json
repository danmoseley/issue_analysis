[
    {
        "url":  "https://github.com/dotnet/runtime/issues/14434",
        "createdAt":  "2015-04-10T09:44:27Z",
        "number":  14434,
        "author":  "davidfowl",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBK0-w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nblumhardt",
                                            "createdAt":  "2016-09-20T03:30:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gdoron",
                                            "createdAt":  "2016-09-27T13:40:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ToonDC",
                                            "createdAt":  "2016-10-05T11:01:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kierenj",
                                            "createdAt":  "2016-10-05T11:55:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jmezach",
                                            "createdAt":  "2016-10-05T12:12:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "qooroo",
                                            "createdAt":  "2016-10-05T12:13:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tomgilder",
                                            "createdAt":  "2016-10-05T13:21:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "herecydev",
                                            "createdAt":  "2017-01-11T15:27:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattzink",
                                            "createdAt":  "2017-03-30T21:34:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "masonwheeler",
                                            "createdAt":  "2017-03-31T12:58:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jussimattila",
                                            "createdAt":  "2017-06-28T18:04:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rosieks",
                                            "createdAt":  "2017-07-29T12:38:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nphmuller",
                                            "createdAt":  "2017-10-13T01:50:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ReubenBond",
                                            "createdAt":  "2017-10-13T03:34:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "JamesNK",
                                            "createdAt":  "2017-10-13T04:56:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mchudy",
                                            "createdAt":  "2017-10-13T07:22:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Kukkimonsuta",
                                            "createdAt":  "2017-10-13T07:56:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stoyandimov",
                                            "createdAt":  "2017-10-13T12:22:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "qmfrederik",
                                            "createdAt":  "2017-10-15T21:55:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "patricksuo",
                                            "createdAt":  "2017-11-11T21:22:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xon",
                                            "createdAt":  "2018-01-27T07:58:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "stap123",
                                            "createdAt":  "2018-02-02T14:21:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Nirmal4G",
                                            "createdAt":  "2020-02-17T13:54:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xsoheilalizadeh",
                                            "createdAt":  "2020-06-19T07:17:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NilFusion",
                                            "createdAt":  "2020-08-10T12:10:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2020-12-07T20:21:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aayjaychan",
                                            "createdAt":  "2020-12-23T14:28:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cocowalla",
                                            "createdAt":  "2021-03-12T16:05:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "QianMoXi",
                                            "createdAt":  "2022-01-10T10:13:43Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "spottedmahn",
                                            "createdAt":  "2022-09-23T16:20:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jwosty",
                                            "createdAt":  "2023-11-15T16:58:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "batkaevruslan",
                                            "createdAt":  "2024-04-10T12:57:41Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tobii-amo",
                                            "createdAt":  "2025-04-14T08:00:59Z"
                                        }
                                    ],
                          "totalCount":  33
                      },
        "updatedAt":  "2024-12-18T07:26:45Z",
        "body":  "Any tool that shows exceptions today also shows the callstack. With the introduction of the async keyword (yield was the same I guess), it\u0027s becoming increasingly harder to show reasonable call stacks because of the async state machine. It would be nice if there was an API somewhere that could be used to clean up the async state machine and pretty print a call stack with readable method names (tools like reflector do this). \n\nHere\u0027s an example of a typical error page in an MVC 6 application:\n\n![image](https://cloud.githubusercontent.com/assets/95136/7085404/4e19da18-df2b-11e4-8fa7-28a0799854f0.png)\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmAZcIQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkxNTAyMjIy",
                                           "createdAt":  "2015-04-10T10:01:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maxwe11",
                                           "body":  ":+1: :clap: \n",
                                           "updatedAt":  "2015-04-10T10:01:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkyNTQ5NDM2",
                                           "createdAt":  "2015-04-14T00:59:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaloFour",
                                           "body":  "Check out this article from MSDN Magazine:\n\n[Async Programming: Async Causality Chain Tracking](https://msdn.microsoft.com/en-us/magazine/jj891052.aspx)\n\nIt would have something like that built-in.  However if it would have to capture the stack trace at the point of awaiting it would probably add a non-trivial amount of overhead, as the article mentions.\n",
                                           "updatedAt":  "2015-04-14T00:59:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkzMTE3OTMz",
                                           "createdAt":  "2015-04-14T23:56:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AlfredoMS",
                                           "body":  "@HaloFour @davidfowl   Async Causality tracking existsin mscorlib, see https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Threading/Tasks/AsyncCausalityTracer.cs\nVS2013 uses it to populate some of the information in the Task window.\nAlthough I would agree it needs to be improved for xplat and there could be more tools taking advantage of its output.\n",
                                           "updatedAt":  "2015-04-14T23:56:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDkzMTE5NjE1",
                                           "createdAt":  "2015-04-15T00:10:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "HaloFour",
                                           "body":  "Hrm, doesn\u0027t look like something you can use programmatically from within\nyour own program?  I used the tricks from that MSDN Magazine article to\nimplement better exception messages in my web app as it was heavily async.\nOn Apr 14, 2015 7:57 PM, \"Alfredo Menendez Sancho\" notifications@github.com\nwrote:\n\n\u003e @HaloFour https://github.com/HaloFour @davidfowl\n\u003e https://github.com/davidfowl Async Causality tracking existsin\n\u003e mscorlib, see\n\u003e https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Threading/Tasks/AsyncCausalityTracer.cs\n\u003e VS2013 uses it to populate some of the information in the Task window.\n\u003e Although I would agree it needs to be improved for xplat and there could\n\u003e be more tools taking advantage of its output.\n\u003e \n\u003e —\n\u003e Reply to this email directly or view it on GitHub\n\u003e https://github.com/dotnet/corefx/issues/1370#issuecomment-93117933.\n",
                                           "updatedAt":  "2015-04-15T00:10:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE0NzU4NDYzMA==",
                                           "createdAt":  "2015-10-13T03:27:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Adding @tmat \n@davidfowl Have you talked to the Roslyn guys about this at all? Ostensibly the abstraction you are trying to restore comes in two parts:\n1) The framework provides the Task libraries. The fact that TaskAwaiter.GetResult() has calls to TaskAwaiter.HandleNonSuccessAndDebuggerNotification is a framework detail, so it would seem reasonable that any algorithm to clean up that part of the stack trace is owned by the framework.\n2) The C# compiler provides the implementation of async and code-rewriting that creates the async state machines. Once we hit runtime the only information that could tie d__43.MoveNext() to a source location is contained inside custom debug information records in the PDB.\n\nI\u0027d assume the Roslyn Expression Evaluator, which runs within Visual Studio Debugger, has the algorithms you are looking for to sanitize these stack traces. Given that ASP.NET is already loading the compiler portion of Roslyn to runtime compilation, maybe we should also have you guys load the debugger portions of Roslyn for diagnostics such as this? I\u0027m hoping @tmat can shed a little more light on how this is factored, or give us bad news that some key component is inside VS debugger itself rather than in the EE.\n",
                                           "updatedAt":  "2015-10-13T03:27:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MTM5Mzk2MQ==",
                                           "createdAt":  "2015-10-27T06:41:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "@tmat @gregg-miskelly Any ideas for this one? We could use heuristics to collapse the state machine frames (perhaps hide anything compiler generated?)\n\n/cc @Tratcher\n",
                                           "updatedAt":  "2015-10-27T06:42:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MTUzOTI5OA==",
                                           "createdAt":  "2015-10-27T15:24:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RichiCoder1",
                                           "body":  "Wanted say this would be a big win. Async stack traces are a serious pain to diagnose, and adding a mechanism to erase implementation details (TaskAwaiter, GetResult, ThrowForNonSuccess) and unify the generated state machines into something comprehensible would be amazing.\n",
                                           "updatedAt":  "2015-10-27T15:24:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MTYwMjIxOA==",
                                           "createdAt":  "2015-10-27T18:30:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "The code that the VS debugger uses for walking the async stack isn\u0027t open, but I am happy to point Microsoft employees to it. The only role that the EE has in this is to give the \u0027MoveNext\u0027 method a better name.\n",
                                           "updatedAt":  "2015-10-27T18:30:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MTYwMzg5Mg==",
                                           "createdAt":  "2015-10-27T18:36:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "Though I should say that if the problem we are trying to solve is the stack trace for an exception object (and not some sort of new \u0027Environment.GetAsyncStack()\u0027) then I am not sure that any of the code that the debugger has will be all that useful. We likely need enhancements/enlightenments between the stack trace code and the task implementation code to make that story good.\n",
                                           "updatedAt":  "2015-10-27T18:36:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MTY2MzMyNA==",
                                           "createdAt":  "2015-10-27T22:25:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "The debugger has code that understands the C# async state machine and how it relates back to the source the user originally authored right? Presumably that is the key bit that is missing. \n\nI agree the solution would look a bit different if we were modifying Exception.StackTrace vs. creating a new API, but I think both solutions would require reversing the C# compiler\u0027s state machine construction.\n",
                                           "updatedAt":  "2015-10-27T22:25:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE1MTY2NjcwNg==",
                                           "createdAt":  "2015-10-27T22:44:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gregg-miskelly",
                                           "body":  "If we are only concerned with fixing Exception.StackTrace, I actually think we don\u0027t need to decode the state machine because the method in the state machine class (\u003ccompiler-generated-class-name\u003e.MoveNext) is on the stack already. What we need to do is clean up the task goo. It might also be nice to use method/class names that the user understands rather than the metadata names.\n",
                                           "updatedAt":  "2015-10-27T22:44:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE4NjEzNTU2Ng==",
                                           "createdAt":  "2016-02-19T09:33:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Folks in this issue might find @aelij\u0027s work interesting: https://github.com/dotnet/coreclr/issues/2813\n",
                                           "updatedAt":  "2016-02-19T09:33:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE4NjIwNDEwNQ==",
                                           "createdAt":  "2016-02-19T12:55:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "aelij",
                                           "body":  "\u003e I think both solutions would require reversing the C# compiler\u0027s state machine construction.\n\nThat\u0027s what I do in order to get the original method name. The downside is that it\u0027s compiler- and language-specific. Perhaps a long-term solution could be to have the compiler emit an attribute for the async state machine class that includes a string with the original method\u0027s signature. That way we could also print the full parameter list.\n",
                                           "updatedAt":  "2016-02-19T12:55:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE4NjMxNTM1Mw==",
                                           "createdAt":  "2016-02-19T17:27:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "We emit Async/IteratorStateMachineAttribute on the kickoff method that points to the state machine type.\n\nWe will emit reverse mapping to Portable PDBs (I don\u0027t think we do that right now, but certainly will do so for `dotnet cli` release): https://github.com/dotnet/corefx/blob/master/src/System.Reflection.Metadata/specs/PortablePdb-Metadata.md#StateMachineMethodTable\n\nWe do stack cleanup and formatting for the REPL as well: \nhttp://source.roslyn.io/#Microsoft.CodeAnalysis.Scripting/Hosting/ObjectFormatter/CommonObjectFormatter.cs,d92226e92a7dee26,references\n\nthere is a few hacks that I want to get cleaned up at some point, but it generally works.\n",
                                           "updatedAt":  "2016-02-19T17:27:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDE4NjMxNzI3OQ==",
                                           "createdAt":  "2016-02-19T17:31:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "BTW, scripting has a dependency on the entire Roslyn compiler, which for most apps is an overkill. I wonder if we should split the parts that don\u0027t actually need the compiler into a separate assembly that doesn\u0027t depend on anything other than SRM and immutable collections.\n",
                                           "updatedAt":  "2016-02-19T17:31:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIwMTE4MDg0NQ==",
                                           "createdAt":  "2016-03-25T07:31:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidfowl",
                                           "body":  "Just catching back up on this thread and it seems like we might have enough pieces to throw something together.\n",
                                           "updatedAt":  "2016-03-25T07:31:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI0OTg3MTY1NQ==",
                                           "createdAt":  "2016-09-27T13:54:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gdoron",
                                           "body":  "Is this issue related to the fact that many times though we have pdb files on the servers, we get stacktrace of line 0?\n\n\u003e System.NullReferenceException: Object reference not set to an instance of an object.\n\u003e    at Yooocan.Web.Controllers.VendorController.\u003cMyProducts\u003ed__16.MoveNext() in **C:\\git\\Yooocan\\src\\Yooocan.Web\\Controllers\\VendorController.cs:line 0**\n\u003e --- End of stack trace from previous location where exception was thrown ---\n\u003e    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n\u003e    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n\u003e    at Microsoft.AspNetCore.Mvc.Internal.ObjectMethodExecutor.\u003cCastToObject\u003ed__40`1.MoveNext()\n\u003e --- End of stack trace from previous location where exception was thrown ---\n\u003e    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n\u003e    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n\u003e    at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.\u003cInvokeActionFilterAsync\u003ed__28.MoveNext()\n\u003e --- End of stack trace from previous location where exception was thrown ---\n\u003e    at Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker.\u003cInvokeAsync\u003ed__18.MoveNext()\n\u003e --- End of stack trace from previous location where exception was thrown ---\n\u003e    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n\u003e    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n\u003e    at Microsoft.AspNetCore.Builder.RouterMiddleware.\u003cInvoke\u003ed__4.MoveNext()\n\u003e --- End of stack trace from previous location where exception was thrown ---\n\u003e    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n\u003e    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n\u003e    at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware`1.\u003cInvoke\u003ed__18.MoveNext()\n\u003e --- End of stack trace from previous location where exception was thrown ---\n\u003e    at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware`1.\u003cInvoke\u003ed__18.MoveNext()\n\u003e --- End of stack trace from previous location where exception was thrown ---\n\u003e    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n\u003e    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n\u003e    at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware`1.\u003cInvoke\u003ed__18.MoveNext()\n\u003e --- End of stack trace from previous location where exception was thrown ---\n\u003e    at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware`1.\u003cInvoke\u003ed__18.MoveNext()\n\u003e --- End of stack trace from previous location where exception was thrown ---\n\u003e    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n\u003e    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n\u003e    at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware`1.\u003cInvoke\u003ed__18.MoveNext()\n\u003e --- End of stack trace from previous location where exception was thrown ---\n\u003e    at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware`1.\u003cInvoke\u003ed__18.MoveNext()\n\u003e --- End of stack trace from previous location where exception was thrown ---\n\u003e    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n\u003e    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n\u003e    at Microsoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware.\u003cInvoke\u003ed__3.MoveNext()\n\u003e --- End of stack trace from previous location where exception was thrown ---\n\u003e    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n\u003e    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n\u003e    at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.\u003cInvoke\u003ed__6.MoveNext()\n",
                                           "updatedAt":  "2016-09-27T13:54:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI1OTc2NTcxNA==",
                                           "createdAt":  "2016-11-10T18:17:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@joperezr please work with @noahfalk and @tmat to work on high-level idea. Let\u0027s mark the issue appropriately then (ideally \"up for grabs\" with direction).\n",
                                           "updatedAt":  "2016-11-10T18:49:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MDU1OTQzOQ==",
                                           "createdAt":  "2017-03-30T22:08:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCogBJA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "patricksuo",
                                                                               "createdAt":  "2017-11-11T20:56:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jacano",
                                                                               "createdAt":  "2018-07-09T11:08:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Seabizkit",
                                                                               "createdAt":  "2022-07-26T09:13:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "mattzink",
                                           "body":  "Is this being actively worked? Many large .NET projects are adding hacks to reverse the async leaky abstraction in stack traces. This should be handled by the platform, as is done in Go and Python ",
                                           "updatedAt":  "2017-03-30T22:08:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MDU2ODcwOQ==",
                                           "createdAt":  "2017-03-30T22:58:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "I\u0027m not aware of any active work, though its possible something is happening outside my view.",
                                           "updatedAt":  "2017-03-30T22:58:37Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzNzY1NTU2Mw==",
                                           "createdAt":  "2017-10-18T16:51:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAPU0pg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "patricksuo",
                                                                               "createdAt":  "2017-11-11T20:56:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "benaadams",
                                           "body":  "Had a go at changing the StackTrace by changing the stack :) \r\n\r\nHas some outstanding issues/questions though https://github.com/dotnet/coreclr/pull/14564",
                                           "updatedAt":  "2017-10-18T16:51:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM1ODY2MDAwOA==",
                                           "createdAt":  "2018-01-18T14:18:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD_aI9A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2018-01-18T14:48:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "seanfarmar",
                                                                               "createdAt":  "2018-09-14T11:49:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "patricksuo",
                                                                               "createdAt":  "2018-10-31T07:52:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AmrAlSayed0",
                                                                               "createdAt":  "2021-08-18T06:10:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spottedmahn",
                                                                               "createdAt":  "2022-09-23T16:20:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Nirmal4G",
                                                                               "createdAt":  "2024-12-17T23:50:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "benaadams",
                                           "body":  "Tool that produces clean `ResolvedStackTrace`s https://github.com/benaadams/Ben.Demystifier",
                                           "updatedAt":  "2018-01-18T14:18:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6X9uwM",
                                           "createdAt":  "2024-12-17T20:23:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "niemyjski",
                                           "body":  "Bump",
                                           "updatedAt":  "2024-12-17T20:23:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YBlwh",
                                           "createdAt":  "2024-12-18T07:26:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mattzink",
                                           "body":  "\u003e Tool that produces clean `ResolvedStackTrace`s https://github.com/benaadams/Ben.Demystifier\n\nBen\u0027s library has been unmaintained for a long time. Would still love to see an official solution.",
                                           "updatedAt":  "2024-12-18T07:26:45Z"
                                       }
                                   ],
                         "totalCount":  24
                     },
        "title":  "Provide an API for traversing/reasoning about async call stacks",
        "labels":  [
                       "api-needs-work",
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/29765",
        "createdAt":  "2019-06-04T13:38:50Z",
        "number":  29765,
        "author":  "apollux",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCiZkjg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "noseratio",
                                            "createdAt":  "2022-06-17T08:26:27Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-01-09T06:23:55Z",
        "body":  "Consider the following program:\r\n```c#\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nnamespace dotnet_trace\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n#if DEBUG\r\n            Console.WriteLine(\"Debug\");\r\n#endif\r\n\r\n#if TRACE\r\n            Console.WriteLine(\"Trace\");\r\n#endif\r\n            Trace.Assert(false, \"Assert TRACE\");\r\n            Debug.Assert(false, \"Assert DEBUG\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI expect the Trace.Assert to trigger in both Debug and Release configuration. However it does not trigger at all.\r\n\r\n`dotnet run -c Debug` results in:\r\n```\r\nDebug\r\nTrace\r\nAssertion Failed\r\nAssert DEBUG\r\n\r\n   at dotnet_trace.Program.Main(String[] args) in C:\\Users\\ak\\workspace\\dotnet-trace\\Program.cs:line 18\r\n```\r\n\r\n`dotnet run -c Release` results in:\r\n```\r\nTrace\r\n```\r\n\r\nDotnet version: 2.1.507\r\n\r\nThe Debug output in Visual Studio does show that the assertion fails in both Debug and Release configuration: \r\n```---- DEBUG ASSERTION FAILED ----\r\n---- Assert Short Message ----\r\nAssert TRACE\r\n---- Assert Long Message ----\r\n\r\n```\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPBiAfA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMDM1NzMwMg==",
                                           "createdAt":  "2019-06-10T09:44:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Gnbrkm41",
                                           "body":  "The assertion does trigger, but it looks like the the `DefaultTraceListener` does nothing on .NET Core 2.1 and 2.2 (not sure if others don\u0027t as well). You can confirm this behaviour by adding your own TraceListener (e.g. `Trace.Listeners.Add(new TextWriterTraceListener(Console.Out, \"TWTL\"));`), as this would print `Fail: Assert TRACE` on assertion failure.\r\n\r\nOne weird thing I noticed is that on .NET Core 3.0 P5 `DefaultTraceListener` appears to halt the program and writes the detail on the console output, then shuts the whole program down unlike previous versions of .NET Core; wonder if this is intended? (either ~2.2 not doing anything upon trigger, or 3.0+ doing something upon trigger) it does somewhat match the full framework behaviour, though.",
                                           "updatedAt":  "2019-06-10T09:44:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48GIB8",
                                           "createdAt":  "2022-01-09T06:23:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "f1WN356Uh51a1W6cn",
                                           "body":  "This seems to be fixed since version ???",
                                           "updatedAt":  "2022-01-09T06:23:55Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Trace.Assert does not trigger",
        "labels":  [
                       "question",
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/29957",
        "createdAt":  "2019-06-18T14:47:10Z",
        "number":  29957,
        "author":  "IvanovNiko",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-11-10T18:08:10Z",
        "body":  "Hi.\r\n\r\nI am using perfmon.exe for view my custom performance counters. It\u0027s working fine for .net framework applications but for .net core applications, application instance for my custom counters always absent and i can not to view my custom counters in perfmon.exe.  I reference Windows Compatibility Pack for .NET Core but it is useless.\r\n\r\nIs it performance counters limitations that they can use only with .net framework but not with .net core?\r\n\r\n![image](https://user-images.githubusercontent.com/31622591/59694569-8372de80-91f1-11e9-806e-229e2ca7a8f4.png)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOHiGakA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMzgxNTk1NQ==",
                                           "createdAt":  "2019-06-20T02:28:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "leecow",
                                           "body":  "@brianrob - can you comment on this?",
                                           "updatedAt":  "2019-06-20T02:28:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMzgxNzI1MA==",
                                           "createdAt":  "2019-06-20T02:35:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "If you are using the Windows Compatibility Pack to produce your own custom counters, then that should work.  The main limitation is that the .NET Framework performance counters were not ported to .NET Core.\r\n\r\n@danmosemsft, can you help route this please?",
                                           "updatedAt":  "2019-06-20T02:35:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMzgyMDI5NQ==",
                                           "createdAt":  "2019-06-20T02:51:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAq6jlQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Anipik",
                                                                               "createdAt":  "2019-06-20T02:54:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@Anipik owns this I think.",
                                           "updatedAt":  "2019-06-20T02:51:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMzgyMDk1NQ==",
                                           "createdAt":  "2019-06-20T02:54:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Anipik",
                                           "body":  "i will take a look",
                                           "updatedAt":  "2019-06-20T02:54:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwMzg5OTUxNQ==",
                                           "createdAt":  "2019-06-20T06:48:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "IvanovNiko",
                                           "body":  "Hi guyes.\r\nThis issue reproduce if i run .net core application hosted in windows service.",
                                           "updatedAt":  "2019-06-20T06:48:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUwNTUxODczNg==",
                                           "createdAt":  "2019-06-25T16:23:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOArRb_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Anipik",
                                                                               "createdAt":  "2019-06-25T23:38:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wtgodbe",
                                           "body":  "Moving this to future as it\u0027s not a regression in 3.0",
                                           "updatedAt":  "2019-06-25T16:23:00Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Can not to select .net core application instance in perfmon.exe",
        "labels":  [
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/34910",
        "createdAt":  "2020-04-13T18:19:15Z",
        "number":  34910,
        "author":  "eerhardt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0-4KA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "charlesroddie",
                                            "createdAt":  "2024-01-05T13:10:35Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-06-30T15:24:48Z",
        "body":  "The source line info support for System.Diagnostics.StackTrace/StackFrame comes with a noticeable cost for workloads which are size sensitive and don\u0027t contain PDB information anyway.\r\n\r\nWith change https://github.com/dotnet/runtime/pull/32023, we added a `PreserveDependency` attribute here:\r\n\r\nhttps://github.com/dotnet/runtime/blob/768c6fc99c099465491fbf0185b145581243f130/src/coreclr/src/System.Private.CoreLib/src/System/Diagnostics/StackFrameHelper.cs#L87-L93\r\n\r\nAs noted in the PR, the change added ~200K to the \"Console Hello World\" app, bringing in the following assemblies, which were not needed before:\r\n\r\n![image](https://user-images.githubusercontent.com/8291187/79147084-053b8600-7d89-11ea-94ec-6d2c6c797aab.png)\r\n\r\nWe should consider adding a feature switch (dotnet/designs#99) or similar functionality to allow app developers to opt-out of this behavior.\r\n\r\ncc @vitek-karas @jkotas @stephentoub @marek-safar ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYEAhHw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzAzMzM2OQ==",
                                           "createdAt":  "2020-04-13T18:38:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBA7zRA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eerhardt",
                                                                               "createdAt":  "2020-04-13T18:50:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Added to Linker project which I guess is how we keep track of all such work.",
                                           "updatedAt":  "2020-04-13T18:38:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMzI2NDk4MA==",
                                           "createdAt":  "2020-04-14T07:08:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "I don\u0027t think this should be feature switch in the design sense as above but illinker property which controls debugging support.",
                                           "updatedAt":  "2020-04-14T07:08:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyNjkyNTc4NQ==",
                                           "createdAt":  "2020-05-11T19:59:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@eerhardt I\u0027m marking this as 5.0 so it doesn\u0027t disappear from the radar, please change milestone to Future if you feel like this is not important for 5.0",
                                           "updatedAt":  "2020-05-11T19:59:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNjIxOTAwNw==",
                                           "createdAt":  "2020-05-29T22:23:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "@marek-safar @vargaz - I just discovered that this code isn\u0027t used on Mono\u0027s CoreLib. Instead, I see that Mono has a native C reader for PPDBs.\r\n\r\nhttps://github.com/dotnet/runtime/blob/b24e9cd0996c688fd627fc1698986097e54103cd/src/mono/netcore/System.Private.CoreLib/src/System/Diagnostics/StackFrame.Mono.cs#L51-L53\r\n\r\nIs this the long-term solution for Mono? I\u0027m wondering how important it is for us to solve the above Diagnostics StackFrame issue in .NET 5. If Blazor isn\u0027t going to be affected by it, it might not be critical to solve.",
                                           "updatedAt":  "2020-05-29T22:23:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNjc0Nzk1Ng==",
                                           "createdAt":  "2020-06-01T09:50:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBF9nKg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eerhardt",
                                                                               "createdAt":  "2020-06-01T13:40:23Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "I think we\u0027ll investigate using managed ppds reader but we might not be able to do it for .NET5 but long term this looks attractive to me.\r\n\r\n#32023 is not relevant to size sensitive workloads and will become only once the logic is moved to shared SPC. What is however still relevant to us is the \"forced\" [StackTraceSymbol](https://github.com/dotnet/runtime/blob/master/src/libraries/System.Diagnostics.StackTrace/src/ILLinkTrim.xml#L4) persistence in S.D.S which I\u0027m not sure why it\u0027s still there\r\n",
                                           "updatedAt":  "2020-06-01T09:50:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzNjg2NzIyOQ==",
                                           "createdAt":  "2020-06-01T13:40:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "\u003e What is however still relevant to us is the \"forced\" StackTraceSymbol persistence in S.D.S which I\u0027m not sure why it\u0027s still there\r\n\r\nI\u0027ll look into removing it today. Thanks for the pointer.",
                                           "updatedAt":  "2020-06-01T13:40:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1NjM3NjI2MA==",
                                           "createdAt":  "2020-07-09T22:13:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "This is not necessary for Blazor WASM in 5.0. Moving to 6.0.",
                                           "updatedAt":  "2020-07-09T22:13:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzODk4NDMwMA==",
                                           "createdAt":  "2021-05-11T18:44:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eerhardt",
                                           "body":  "Moving to \u0027Future\u0027 as this isn\u0027t high priority for 6.",
                                           "updatedAt":  "2021-05-11T18:44:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gQCEf",
                                           "createdAt":  "2023-06-30T15:24:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC_hsOg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eerhardt",
                                                                               "createdAt":  "2023-06-30T16:16:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jkotas",
                                           "body":  "This should be tagged on `StackTraceSupport` introduced in https://github.com/dotnet/runtime/pull/88235 .",
                                           "updatedAt":  "2023-06-30T15:24:47Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Introduce a way to opt-out of source info in Diagnostics StackFrame ",
        "labels":  [
                       "area-System.Diagnostics",
                       "feature-request",
                       "size-reduction"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36908",
        "createdAt":  "2020-05-22T21:43:22Z",
        "number":  36908,
        "author":  "alexperovich",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqbBxQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "madelson",
                                            "createdAt":  "2022-09-04T20:16:34Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2021-10-25T16:39:28Z",
        "body":  "### Description\r\nThis old issue https://github.com/dotnet/runtime/issues/27106, was claimed to be fixed... but it is not fixed. In reality, the UrlEncoding used to \"fix\" the above issue breaks my workaround of quoting all the values.\r\nThis can be reproduced with:\r\n```csharp\r\nvar act = new Activity(\"test\");\r\nact.AddBaggage(\"test\", \"\\\"HelixAPI.Pages.Account.AccountController.SignIn (HelixAPI)\\\"\");\r\nact.Start();\r\ntry\r\n{\r\n\tusing (var c = new HttpClient())\r\n\t{\r\n\t\tawait c.GetStringAsync(\"https://google.com\");\r\n\t}\r\n}\r\nfinally\r\n{\r\n\tact.Stop();\r\n}\r\n```\r\nThis code throws the following exception\r\n```\r\nFormatException: The format of value \u0027%22HelixAPI.Pages.Account.AccountController.SignIn+(HelixAPI)%22\u0027 is invalid.\r\n```\r\n\r\n### Configuration\r\n.NET Core 3.1, on windows 10\r\nThis isn\u0027t specific to any configuration\r\n\r\n### Regression?\r\nThis was a bug in older versions of .net core, it is still broken.\r\n\r\n### Other information\r\nThe bug is here: https://source.dot.net/#System.Net.Http/System/Net/Http/DiagnosticsHandler.cs,284\r\n\r\nThis should 100% not be using something that explodes when strange values are passed. This means that anywhere in the code of any program, if something completely benign is added to Activity.Current.Baggage, any HttpClient calls will fail.\r\n\r\nIf using NameValueHeaderValue is important for some reason.... at least it shouldn\u0027t crash the entire asp.net request because of a single baggage thingy.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOKtJYw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYzMjkyMDA1MQ==",
                                           "createdAt":  "2020-05-22T21:43:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-05-22T21:43:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NjE0NjMxMw==",
                                           "createdAt":  "2020-06-18T16:29:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@lmolkova can you please take a look at this one?",
                                           "updatedAt":  "2020-06-18T16:29:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0MTczNjg2NA==",
                                           "createdAt":  "2020-12-09T12:21:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nnnvvvcv",
                                           "body":  "Hi,\r\n\r\nJust wondering whether there has been any progress on this?\r\n\r\nThe work around I am using is to check the validity of the baggage strings before adding to the activity:\r\n\r\n``` C#\r\npublic static bool IsValidBaggageString(string value)\r\n{\r\n    return NameValueHeaderValue.TryParse(WebUtility.UrlEncode(value), out _)\r\n}\r\n\r\n\r\n. . .\r\n\r\n    if (IsValidBaggageString(key) \u0026\u0026 IsValidBaggageString(value))\r\n    {\r\n        Activity.Current?.AddBaggage(key, value);\r\n    }\r\n\r\n. . .\r\n```\r\n\r\nIt\u0027s not ideal because we end up losing data in our Baggage.\r\n\r\nBy the way - it seems in my case and the original poster\u0027s case that the offending characters are the braces `()`. Not sure if that helps at all...\r\n\r\nNick.",
                                           "updatedAt":  "2020-12-09T12:23:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NDMxMTMwNQ==",
                                           "createdAt":  "2020-12-14T09:35:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "We should really be using `Uri.EscapeDataString` instead of `WebUtility.UrlEncode` here.",
                                           "updatedAt":  "2020-12-14T09:35:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40yGrw",
                                           "createdAt":  "2021-07-23T10:34:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "Fix for this issue would be to use `Uri.EscapeDataString` instead of `WebUtility.UrlEncode` here:\r\nhttps://github.com/dotnet/runtime/blob/5399ee59e55a75a850011908a0f96d7abb8a91c7/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DistributedContextPropagator.cs#L120\r\n\r\nAnd `Uri.UnescapeDataString` instead of `WebUtility.UrlDecode` here:\r\nhttps://github.com/dotnet/runtime/blob/5399ee59e55a75a850011908a0f96d7abb8a91c7/src/libraries/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/LegacyPropagator.cs#L172-L173\r\n\r\nMarking as up-for-grabs since it should be as simple as replacing the two calls and writing a test.\r\n\r\nMoving to diagnostics area since all the changes belong in `DistributedContextPropagator` logic now.",
                                           "updatedAt":  "2021-07-23T10:38:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40yHIw",
                                           "createdAt":  "2021-07-23T10:38:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon, @krwq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\nThis old issue https://github.com/dotnet/runtime/issues/27106, was claimed to be fixed... but it is not fixed. In reality, the UrlEncoding used to \"fix\" the above issue breaks my workaround of quoting all the values.\r\nThis can be reproduced with:\r\n```csharp\r\nvar act = new Activity(\"test\");\r\nact.AddBaggage(\"test\", \"\\\"HelixAPI.Pages.Account.AccountController.SignIn (HelixAPI)\\\"\");\r\nact.Start();\r\ntry\r\n{\r\n\tusing (var c = new HttpClient())\r\n\t{\r\n\t\tawait c.GetStringAsync(\"https://google.com\");\r\n\t}\r\n}\r\nfinally\r\n{\r\n\tact.Stop();\r\n}\r\n```\r\nThis code throws the following exception\r\n```\r\nFormatException: The format of value \u0027%22HelixAPI.Pages.Account.AccountController.SignIn+(HelixAPI)%22\u0027 is invalid.\r\n```\r\n\r\n### Configuration\r\n.NET Core 3.1, on windows 10\r\nThis isn\u0027t specific to any configuration\r\n\r\n### Regression?\r\nThis was a bug in older versions of .net core, it is still broken.\r\n\r\n### Other information\r\nThe bug is here: https://source.dot.net/#System.Net.Http/System/Net/Http/DiagnosticsHandler.cs,284\r\n\r\nThis should 100% not be using something that explodes when strange values are passed. This means that anywhere in the code of any program, if something completely benign is added to Activity.Current.Baggage, any HttpClient calls will fail.\r\n\r\nIf using NameValueHeaderValue is important for some reason.... at least it shouldn\u0027t crash the entire asp.net request because of a single baggage thingy.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ealexperovich\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics`, `bug`, `up-for-grabs`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-23T10:38:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44q0lj",
                                           "createdAt":  "2021-10-25T10:03:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCrotRg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2022-09-04T20:17:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "pedrobsaila",
                                           "body":  "Hi everyone.\r\n\r\nI tried to work on this issue and started by implementing a test case like the given code, but I could not reproduce the error. looking back in history, I think the issue was already fixed here #55392 by consuming DistributedContextPropagator API which does not use NameValueHeaderValue. Moreover, NameValueHeaderValue class has changed and throws no more FormatException for this kind of string starting with .NET 6.0. Nevertheless, I could replace WebUtility.UrlEncode by Uri.EscapeDataString (If you still want it) but there will be no new test because nothing is broken.",
                                           "updatedAt":  "2021-10-25T16:39:28Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "System.Net.Http.DiagnosticsHandler.SendAsync throws if Activity.Current.Baggage contains values that can\u0027t be parsed by NameValueHeaderValue after UrlEncoding",
        "labels":  [
                       "bug",
                       "area-System.Diagnostics",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/38238",
        "createdAt":  "2020-06-22T22:25:33Z",
        "number":  38238,
        "author":  "terrajobst",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6Mihw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bartonjs",
                                            "createdAt":  "2020-06-22T23:40:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danmoseley",
                                            "createdAt":  "2020-07-16T21:19:34Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Enderlook",
                                            "createdAt":  "2022-02-02T16:26:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-08-14T22:31:46Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2022-06-27T19:52:31Z",
        "body":  "For abstract base types, we sometimes find ourselves in a situation where we\u0027d like to add a new core concept to a type. In order to stay ABI-compatible, we can\u0027t add new `abstract` members as this means derived types that were compiled against the earlier version are missing the override, thus causing a `TypeLoadException`.\r\n\r\nThe general pattern for this that we make the new members `virtual`, ideally with a workable implementation. This doesn\u0027t always work, so sometimes the only option is adding an implementation that throws `NotImplementedException`. A good example of this problem is in https://github.com/dotnet/runtime/issues/31362#issuecomment-643438552.\r\n\r\nA major downside of this approach is that developers deriving from the base type don\u0027t necessarily know that they are supposed to override these new virtual methods to get the best behavior.\r\n\r\nOne option to solve this problem is by adding a new attribute and analyzer that warns when deriving from it without overriding the marked members.\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace System.Diagnostics.CodeAnalysis\r\n{\r\n    [AttributeUsage(AttributeTargets.Event |\r\n                    AttributeTargets.Method |\r\n                    AttributeTargets.Property)]\r\n    public sealed class ShouldBeOverridenAttribute : Attribute\r\n    {\r\n        public ShouldBeOverridenAttribute();\r\n    }\r\n}\r\n```\r\n\r\n### Analyzer Proposal\r\n\r\nLet\u0027s take [this example from the BCL](https://github.com/dotnet/runtime/issues/31362#issuecomment-643438552) and assume we marked the new virtual members as `[ShouldBeOverriden]` like this:\r\n\r\n```C#\r\nnamespace System.Threading.Channels\r\n{\r\n    public abstract partial class ChannelReader\u003cT\u003e\r\n    {\r\n        [ShouldBeOverriden]\r\n        public virtual bool CanPeek =\u003e false;\r\n\r\n        [ShouldBeOverriden]\r\n        public virtual bool TryPeek([MaybeNullWhen(false)] out T item)\r\n        {\r\n            item = default!;\r\n            return false;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nA customer deriving from `ChannelReader\u003cT\u003e` would only override the `abstract` members by default, resulting in this:\r\n\r\n```C#\r\npublic class MyChannelReader\u003cT\u003e : ChannelReader\u003cT\u003e\r\n             ~~~~~~~~~~~~~~~\r\n{\r\n    public override bool TryRead([MaybeNullWhen(false)] out T item)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    public override ValueTask\u003cbool\u003e WaitToReadAsync(CancellationToken cancellationToken = default)\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n}\r\n```\r\n\r\nThis would product warnings on the type delaration:\r\n\r\n```text\r\nWARNING: ChannelReader\u003cT\u003e.CanPeek should be overriden\r\nWARNING: ChannelReader\u003cT\u003e.TryPeek(out T item) should be overriden\r\n```\r\n\r\n### IDE\r\n\r\nWe may want to change the behavior of the IDE so that the code fixer that generates overrides for abstract members automatically also generates overrides for any members marked as `[ShouldBeOverriden]`.\r\n\r\n/cc @dotnet/fxdc @CyrusNajmabadi ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJ_ukjA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0Nzc5OTg5NQ==",
                                           "createdAt":  "2020-06-22T22:25:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-06-22T22:25:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NzgwMDExNQ==",
                                           "createdAt":  "2020-06-22T22:26:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon, @krwq\nNotify danmosemsft if you want to be subscribed.",
                                           "updatedAt":  "2020-06-22T22:26:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NzgzMjMyMQ==",
                                           "createdAt":  "2020-06-23T00:16:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBIRlSA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "terrajobst",
                                                                               "createdAt":  "2020-06-23T15:27:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "I agree this should be an analyzer.  I agree that teh IDE should respect it in features like \"implement abstract class\".  We would also likely want to hook that up automatically for that new diagnostic id.\r\n\r\nProposal as it stands sounds very reasonable to me.  I would certainly have liked it many times in roslyn itself :)",
                                           "updatedAt":  "2020-06-23T00:16:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0Nzk5NTQxOQ==",
                                           "createdAt":  "2020-06-23T08:33:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "marek-safar",
                                           "body":  "I think this should better be fixed at the C# language level",
                                           "updatedAt":  "2020-06-23T08:33:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODE1NDUzOA==",
                                           "createdAt":  "2020-06-23T13:39:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "That would also require it be solved for F#, VB, etc. ",
                                           "updatedAt":  "2020-06-23T13:39:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0ODIyOTY0Mw==",
                                           "createdAt":  "2020-06-23T15:15:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e That would also require it be solved for F#, VB, etc.\r\n\r\nDoing the support in an analyzer or the compiler requires it to be solved in all three languages separately.\r\n\r\n\u003e I think this should better be fixed at the C# language level\r\n\r\nThis is borderline for me. On first reading this feels a bit domain specific in which case it would be better served as an analyzer. \r\n\r\nAt the same time though the libraries team has to make a decision: what level of enforcement do they want for this attribute? If they want this actually enforced through the ecosystem then they need to consider the impact on the VB and F# teams as well. That is generally the standard to which APIs in the runtime are held too. If they do want it at that level then we probably end up with a compiler feature because that is the only real avenue available to the F# team.",
                                           "updatedAt":  "2020-06-23T15:15:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY1OTYxMDAxMA==",
                                           "createdAt":  "2020-07-16T19:04:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "[Video](https://www.youtube.com/watch?v=7YpDyRMaDKE\u0026t=1h50m31s)\n\n* We like the analzyer and we\u0027re OK with that not being handled by all languages\r\n    - @terrajobst to fill in more details after the meeting\r\n* The analyzer should only consider missing overrides in the direct base type. Warning on more derived base types isn\u0027t useful because the base type is most likely the one that would need to provide behavior.\r\n* We should do a scan for all types that have virtuals that throw\r\n* We should think about how and if we differentiate \"this always throw\", \"this is an optional feature\", \"this a less performant implementation, please provide a better one\" so that we can differentiate the diagnostic ID/severity accordingly.",
                                           "updatedAt":  "2020-07-16T19:13:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3MDgwMzA4NA==",
                                           "createdAt":  "2020-08-08T01:22:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@terrajobst is this on track for 5.0, or should we move it to .NET 6?",
                                           "updatedAt":  "2020-08-08T01:22:15Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Attribute and analyzer for \"soft abstract\"",
        "labels":  [
                       "api-needs-work",
                       "area-System.Diagnostics",
                       "feature-request",
                       "code-analyzer",
                       "code-fixer"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42314",
        "createdAt":  "2020-09-16T13:36:13Z",
        "number":  42314,
        "author":  "dersia",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBkaq6Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SingleAccretion",
                                            "createdAt":  "2020-09-16T16:12:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2021-03-23T00:44:16Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-06-27T20:41:36Z",
        "body":  "## Background and Motivation\r\n\r\nThere should be a Analyzer or Tooling support to find Facotry-Methods easier.\r\n\r\nAs a library author I am often providing facotry-methods for my types to make construction of types more comfortable for users.\r\nThe Factory-Pattern is being used more and more within ASPNET and also in the BCL. With the `readonly structs` and the new `new()` syntax it is harder for developers to find the right way to contruct types.\r\nEspecially with structs, that have a public empty constructor, we should make the experience better for developers to discover factory-methods\r\n\r\nI propose to introduce an attribute, so that analyzers and/or editor(intellisense) can react to those and offer better discovery of facotry methods.\r\n\r\n## Proposed API\r\n\r\nI propose to introduce an attribute like this:\r\n\r\n```csharp\r\nnamespace System.Diagnostics.CodeAnalysis\r\n{\r\n     [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]\r\n     public sealed class ConstructingMethodAttribute : Attribute\r\n     {\r\n         public ConstructingMethodAttribute() { }\r\n     }\r\n}\r\n```\r\n\r\n## Usage Examples\r\n\r\nThis could then be used by a library author like this:\r\n\r\n```csharp\r\npublic readonly struct MyStruct \r\n{\r\n    string Name { get; set; }\r\n    string Value { get; set; }\r\n\r\n    [ContructingMethod]\r\n    public static MyStruct CreateFromKeyValuePair(KeyValuePair\u003cstring, string\u003e Entry) {}\r\n}\r\n```\r\n\r\nAnd when the caller than types `var myCoolValue = new MyStruct()` the analyzer would hint with blue squiggles that there is a better way to construct this type.\r\nIf we have editor support for this intellisense could then already suggest the facotry-methods as soon as the user starts typing `new`.\r\n\r\n## Alternative Designs\r\n\r\nIt is also possible to use `FactoryAttribute` as the attribute name, but I think this might clash with Facotry-Method support coming in C#10.\r\nThis solution can also be backported and made available for lower versions of c#, assuming factory-methods have editor support with c#10.\r\n\r\n## Risks\r\n\r\nOlder libraries and blc would need to update code to make it available, but I don\u0027t think there is any risk in this. \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKV6W3A==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MzQwOTk3Mg==",
                                           "createdAt":  "2020-09-16T13:36:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-09-16T13:36:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MzQ3MTEwMg==",
                                           "createdAt":  "2020-09-16T15:10:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon, @krwq\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-16T15:10:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MzUxMTc0MA==",
                                           "createdAt":  "2020-09-16T16:15:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SingleAccretion",
                                           "body":  "Linking #41686 as a potential use case in the BCL.",
                                           "updatedAt":  "2020-09-16T16:15:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5NDA2NDg2MA==",
                                           "createdAt":  "2020-09-17T07:56:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Instead of needing an attribute, perhaps code editors could search for `static` methods that have a `Create` or `From` prefix and the correct return type. I don\u0027t think analyzers could require the use of those, though; it would cause too many warnings for correct code.\r\n\r\n[`\u003ccompletionlist cref=\"…\"/\u003e`](\u003chttps://stackoverflow.com/a/30633350\u003e \"vb.net - Display list of acceptable values for parameter of a function in code time - Stack Overflow\") in XML documentation comments is another way to tell Visual Studio how to get instances of the type. That would have the same problem in analyzers.\r\n\r\nThe proposal \u003chttps://github.com/dotnet/csharplang/issues/2926\u003e would not let `MyStruct x = CreateFromKeyValuePair(kvp);` bind to `MyStruct.CreateFromKeyValuePair` because the `CreateFromKeyValuePair(kvp)` expression is not an unqualified identifier.\r\n\r\n\u003e Especially with structs, that have a public empty constructor, we should make the experience better for developers to discover factory-methods\r\n\r\n\u003chttps://github.com/dotnet/csharplang/issues/99\u003e and \u003chttps://github.com/dotnet/csharplang/issues/146\u003e could help avoid the empty constructor.",
                                           "updatedAt":  "2020-09-17T07:56:58Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Introduce Attribute and Analyzer for better discovery of Factory-Methods",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44986",
        "createdAt":  "2020-11-20T05:22:08Z",
        "number":  44986,
        "author":  "albahari",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1-jSQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "spottedmahn",
                                            "createdAt":  "2020-12-04T15:14:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vslee",
                                            "createdAt":  "2021-05-30T20:35:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2022-07-14T21:36:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xsoheilalizadeh",
                                            "createdAt":  "2022-10-04T09:47:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bruno-garcia",
                                            "createdAt":  "2023-01-31T01:46:47Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mattjohnsonpint",
                                            "createdAt":  "2023-01-31T01:50:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lucas-zimerman",
                                            "createdAt":  "2023-01-31T02:45:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SimonCropp",
                                            "createdAt":  "2023-01-31T04:54:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kanadaj",
                                            "createdAt":  "2023-03-16T23:34:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hheexx",
                                            "createdAt":  "2023-05-11T14:27:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ThunderDev1",
                                            "createdAt":  "2024-01-08T11:05:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "limengning",
                                            "createdAt":  "2024-02-20T02:53:57Z"
                                        }
                                    ],
                          "totalCount":  12
                      },
        "updatedAt":  "2023-05-11T14:29:39Z",
        "body":  "### Description\r\n\r\nRun the following program:\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nclass Program\r\n{\r\n    static void Main ()\r\n    {\r\n        try\r\n        {\r\n            Console.WriteLine (new StackTrace (true).GetFrame (0).GetFileLineNumber ());   // line 10\r\n            throw null;\r\n        }\r\n        catch\r\n        {\r\n            Console.WriteLine (new StackTrace (true).GetFrame (0).GetFileLineNumber ());   // line 15\r\n        }\r\n        finally\r\n        {\r\n            Console.WriteLine (new StackTrace (true).GetFrame (0).GetFileLineNumber ());   // line 19\r\n        }\r\n    }\r\n}\r\n```\r\nUnder X86, the output is correct:\r\n10\r\n15\r\n19\r\n\r\nUnder X64, the output is wrong:\r\n10\r\n11   (should be 15)\r\n7     (should be 19)\r\n\r\n### Configuration\r\n\r\n* Test with .NET 5, .NET Core 3.x, and .NET Framework\r\n* Tested on Windows X64 and X86\r\n\r\n### Regression?\r\n\r\nThe same bug is present in .NET Framework (in X64 but not X86).\r\n\r\n### Other information\r\n\r\nNote that this breaks LINQPad\u0027s debugger. You cannot step through catch or finally blocks because of this issue.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXAj3Ow==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMDg1Nzc3Nw==",
                                           "createdAt":  "2020-11-20T05:22:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-11-20T05:22:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTI2ODAzOA==",
                                           "createdAt":  "2020-11-20T16:26:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nRun the following program:\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nclass Program\r\n{\r\n    static void Main ()\r\n    {\r\n        try\r\n        {\r\n            Console.WriteLine (new StackTrace (true).GetFrame (0).GetFileLineNumber ());   // line 10\r\n            throw null;\r\n        }\r\n        catch\r\n        {\r\n            Console.WriteLine (new StackTrace (true).GetFrame (0).GetFileLineNumber ());   // line 15\r\n        }\r\n        finally\r\n        {\r\n            Console.WriteLine (new StackTrace (true).GetFrame (0).GetFileLineNumber ());   // line 19\r\n        }\r\n    }\r\n}\r\n```\r\nUnder X86, the output is correct:\r\n10\r\n15\r\n19\r\n\r\nUnder X64, the output is wrong:\r\n10\r\n11   (should be 15)\r\n7     (should be 19)\r\n\r\n### Configuration\r\n\r\n* Test with .NET 5, .NET Core 3.x, and .NET Framework\r\n* Tested on Windows X64 and X86\r\n\r\n### Regression?\r\n\r\nThe same bug is present in .NET Framework (in X64 but not X86).\r\n\r\n### Other information\r\n\r\nNote that this breaks LINQPad\u0027s debugger. You cannot step through catch or finally blocks because of this issue.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ealbahari\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Diagnostics-coreclr`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2020-11-20T16:26:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTMzNjM3MQ==",
                                           "createdAt":  "2020-11-20T18:26:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@albahari this may be related to JIT optimizations.  Can you try building with --configuration Debug?\r\n@mikem8361 ",
                                           "updatedAt":  "2020-11-20T18:26:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTQ2NDA2MQ==",
                                           "createdAt":  "2020-11-20T23:46:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBY8IGA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2020-11-20T23:50:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spottedmahn",
                                                                               "createdAt":  "2020-12-04T15:14:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "albahari",
                                           "body":  "The results that I showed before were in the **Debug** configuration.\r\n\r\nI\u0027ve now tested all four combinations. It works correctly only in the **X86** + **Debug** configuration.\r\n\r\n\u003ctable\u003e\r\n\u003ctr\u003e\r\n\u003cth /\u003e\r\n\u003cth\u003eDebug mode\u003c/th\u003e\r\n\u003cth\u003eRelease mode\u003c/th\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eX86\u003c/th\u003e\r\n\u003ctd\u003e10,15,19 (correct)\u003c/td\u003e\r\n\u003ctd\u003e10,11,10 (wrong)\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003ctr\u003e\r\n\u003cth\u003eX64\u003c/th\u003e\r\n\u003ctd\u003e10,11,7 (wrong)\u003c/td\u003e\r\n\u003ctd\u003e10,11,10 (wrong)\u003c/td\u003e\r\n\u003c/tr\u003e\r\n\u003c/table\u003e\r\n",
                                           "updatedAt":  "2020-11-20T23:46:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MTE1Nzc1Nw==",
                                           "createdAt":  "2021-06-15T04:22:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBvMsOw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spottedmahn",
                                                                               "createdAt":  "2021-06-15T12:39:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "D3-LucaPiombino",
                                                                               "createdAt":  "2021-06-17T21:07:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "albahari",
                                           "body":  "Note that this is likely to impact Visual Studio when it\u0027s built for X64. It\u0027s a nasty bug because it misleads you as to what\u0027s going on when trying to diagnose other bugs. It might be worth fixing this sooner than later, or at least before .NET 6.0.",
                                           "updatedAt":  "2021-06-15T04:22:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5BNaDM",
                                           "createdAt":  "2022-04-09T13:44:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "albahari",
                                           "body":  "Will this ever get fixed? LINQPad\u0027s debugger doesn\u0027t work properly as a result of it. I\u0027m getting more and more complaints, and there\u0027s absolutely nothing I can do in terms of a workaround.",
                                           "updatedAt":  "2022-04-09T13:44:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CopGc",
                                           "createdAt":  "2022-05-04T21:22:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCbZCbw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spottedmahn",
                                                                               "createdAt":  "2022-05-05T12:44:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mikem8361",
                                           "body":  "Have investigated but haven\u0027t found the root caused yet.",
                                           "updatedAt":  "2022-05-04T21:22:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GjbfO",
                                           "createdAt":  "2022-07-13T21:24:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nRun the following program:\r\n```\r\nusing System;\r\nusing System.Diagnostics;\r\n\r\nclass Program\r\n{\r\n    static void Main ()\r\n    {\r\n        try\r\n        {\r\n            Console.WriteLine (new StackTrace (true).GetFrame (0).GetFileLineNumber ());   // line 10\r\n            throw null;\r\n        }\r\n        catch\r\n        {\r\n            Console.WriteLine (new StackTrace (true).GetFrame (0).GetFileLineNumber ());   // line 15\r\n        }\r\n        finally\r\n        {\r\n            Console.WriteLine (new StackTrace (true).GetFrame (0).GetFileLineNumber ());   // line 19\r\n        }\r\n    }\r\n}\r\n```\r\nUnder X86, the output is correct:\r\n10\r\n15\r\n19\r\n\r\nUnder X64, the output is wrong:\r\n10\r\n11   (should be 15)\r\n7     (should be 19)\r\n\r\n### Configuration\r\n\r\n* Test with .NET 5, .NET Core 3.x, and .NET Framework\r\n* Tested on Windows X64 and X86\r\n\r\n### Regression?\r\n\r\nThe same bug is present in .NET Framework (in X64 but not X86).\r\n\r\n### Other information\r\n\r\nNote that this breaks LINQPad\u0027s debugger. You cannot step through catch or finally blocks because of this issue.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ealbahari\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003emikem8361\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics`, `area-Diagnostics-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-13T21:24:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GtuqD",
                                           "createdAt":  "2022-07-17T04:08:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCnM23Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spottedmahn",
                                                                               "createdAt":  "2022-07-18T15:12:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "albahari",
                                           "body":  "I believe the problem might be that you\u0027re skipping child frames in the X64 stack walker, when you should instead be skipping parent frames (or not skipping at all, as parent frames are arguably a useful part of the stack trace).\r\n\r\nIf you remove the logic that identifies and skips child frames, it\u0027s quite likely that the bug will go away.",
                                           "updatedAt":  "2022-07-17T04:08:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Tg-x5",
                                           "createdAt":  "2023-01-23T23:38:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1WIyg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "mattjohnsonpint",
                                                                               "createdAt":  "2023-02-02T20:18:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Unfortunately we haven\u0027t been able to prioritize this issue, so moving to the Future milestone",
                                           "updatedAt":  "2023-01-23T23:38:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UBSaC",
                                           "createdAt":  "2023-01-31T01:48:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7ilTA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mattjohnsonpint",
                                                                               "createdAt":  "2023-02-02T20:17:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vmandic",
                                                                               "createdAt":  "2023-04-24T07:28:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hheexx",
                                                                               "createdAt":  "2023-05-11T14:27:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "bruno-garcia",
                                           "body":  "\u003e Unfortunately we haven\u0027t been able to prioritize this issue, so moving to the Future milestone\r\n\r\nYesterday I was trying to guess where an exception might be coming from because the stack trace line:column pointed me to the end of method: `}`\r\n\r\nI have to say IMO this is a huge regression. I\u0027ve seen this many times: yesterday was **Linux Debian x64 .NET 7.0.2**\r\nHopefully this gets prioritized soon. Hard to believe this hurts only the few folks who commented on this thread.\r\n\r\nEDIT: reading the description again maybe the end of line issue is a different one? OP shows line numbers pointing to elsewhere within the method.",
                                           "updatedAt":  "2023-01-31T01:54:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UO1PJ",
                                           "createdAt":  "2023-02-02T05:24:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1Ulsg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "spottedmahn",
                                                                               "createdAt":  "2023-02-02T14:42:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "mattjohnsonpint",
                                           "body":  "Similar thing happening on arm64.  I wrote it up separately here: https://github.com/dotnet/runtime/issues/81526",
                                           "updatedAt":  "2023-02-02T05:24:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5akl_C",
                                           "createdAt":  "2023-04-24T07:36:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC6lW4w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bruno-garcia",
                                                                               "createdAt":  "2023-04-25T22:46:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vmandic",
                                           "body":  "I\u0027d like to just comment on this that we are experiencing this same issue with exceptions thrown, ie. wrong line is reported by the stacktrace on netcoreapp3.1, which results a bad report in our issue tracking system.",
                                           "updatedAt":  "2023-04-24T07:36:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cCPc7",
                                           "createdAt":  "2023-05-11T14:29:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODXaZ8A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bruno-garcia",
                                                                               "createdAt":  "2023-06-07T17:18:18Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ThunderDev1",
                                                                               "createdAt":  "2024-01-08T11:04:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "limengning",
                                                                               "createdAt":  "2024-02-20T02:04:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "hheexx",
                                           "body":  "This bug is so irritating. I believe a lot of people are having a problem it\u0027s just that this issue is not indexed in google for relevant queries.",
                                           "updatedAt":  "2023-05-11T14:29:39Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "StackTrace reports incorrect line number from catch and finally blocks when running on X64",
        "labels":  [
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56817",
        "createdAt":  "2021-08-04T02:45:59Z",
        "number":  56817,
        "author":  "FilipToth",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCfEz5g==",
                          "nodes":  [
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "Joe4evr",
                                            "createdAt":  "2021-08-06T04:43:42Z"
                                        },
                                        {
                                            "content":  "CONFUSED",
                                            "user":  "AmrAlSayed0",
                                            "createdAt":  "2021-08-09T22:30:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "mattjohnsonpint",
                                            "createdAt":  "2022-05-27T20:24:18Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2022-07-07T21:26:05Z",
        "body":  "## Background and Motivation\r\nI\u0027ve noticed while working with the `Stopwatch` class that you can\u0027t just set the `Elapsed` (`ElapsedMiliseconds` and `ElapsedTicks` too). It would be useful for working on projects that require precise time controls (eg. Audio Editors). I do understand that the stopwatch class was mostly meant for use in diagnostics (Hence the namespace.) not actual production code, but I still think there would be a ton of benefits even in diagnostic implementations.\r\n\r\n## API Proposal\r\nThis is the original proposal:\r\n```cs\r\npublic TimeSpan Elapsed {\r\n    get { return new TimeSpan( GetElapsedDateTimeTicks()); }\r\n    set { elapsed = ...;  }\r\n}\r\n```\r\nWe have concluded that this could cause undesirable outcomes.\r\nWe possibly could still do something like this, where we also expose the `TicksPerMillisecond` field.\r\n```cs\r\npublic long ElapsedTicks { \r\n    get { return GetRawElapsedTicks(); }\r\n    set { elapsed = value; } // probably also need to do some checks against negative numbers\r\n}\r\n\r\npublic long TicksPerMillisecond \r\n{\r\n    get { return TicksPerMilisecond }\r\n}\r\n```\r\n\r\n## API Usage\r\nOld proposal usage:\r\n```cs\r\nprivate void SetTime(long ms)\r\n{\r\n    _stopwatch.Elapsed = new TimeSpan(0, 0, ms);\r\n    _bar.Left = CalculateLeftPosFromMs(ms);\r\n}\r\n```\r\nNew proposal usage:\r\n```cs\r\nvar targetMs = 1000;\r\n_stopwatch.ElapsedTicks = targetMs * _stopwatch.TicksPerMillisecond;\r\n```\r\n\r\n## Risks\r\nNone that I can think of, if properly implemented. This would not be a breaking change (at least, I don\u0027t think so).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORjqioQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41L62F",
                                           "createdAt":  "2021-08-04T02:46:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-08-04T02:46:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41MFEe",
                                           "createdAt":  "2021-08-04T04:45:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon, @krwq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\nI\u0027ve noticed while working with the `Stopwatch` class that you can\u0027t just set the `Elapsed` (`ElapsedMiliseconds` and `ElapsedTicks` too). It would be useful for working on projects that require precise time controls (eg. Audio Editors). I do understand that the stopwatch class was mostly meant for use in diagnostics (Hence the namespace.) not actual production code, but I still think there would be a ton of benefits even in diagnostic implementations.\r\n\r\n## API Proposal\r\n```cs\r\npublic TimeSpan Elapsed {\r\n    get { return new TimeSpan( GetElapsedDateTimeTicks()); }\r\n    set { elapsed = ...; Elapsed = new TimeSpan(0, 0, ...) }\r\n}\r\n```\r\n\r\n## API Usage\r\n```cs\r\nprivate void SetTime(long ms)\r\n{\r\n    _stopwatch.Elapsed = new TimeSpan(0, 0, ms);\r\n    _bar.Left = CalculateLeftPosFromMs(ms);\r\n}\r\n```\r\nThis was a quick snipped from a super-quick audio editor project, I\u0027ve needed to build.\r\n\r\n## Risks\r\nNone that I can think of, if properly implemented. This would not be a breaking change (at least, I don\u0027t think so).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eFilipToth\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-04T04:45:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41MFad",
                                           "createdAt":  "2021-08-04T04:50:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "\u003e \\[Risks\\] None that I can think of, if properly implemented.\r\n\r\nOne potential risk is that it\u0027s not possible for `Stopwatch.Elapsed` to express every possible `TimeSpan`. This is due to the multiplication that takes place here:\r\n\r\nhttps://github.com/dotnet/runtime/blob/79c4144f174754bf4fa18827a292549214f86581/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Stopwatch.cs#L133-L139\r\n\r\nThe *s_tickFrequency* field describes the smallest quantum of measurable time within the `Stopwatch` instance. If you generate a `TimeSpan` value whose tick count is not a whole multiple of this quantum, then you call `Stopwatch.set_Elapsed` with this time span, then `Stopwatch.get_Elapsed` will return a different value. This may be unexpected by callers and could manifest as undesirable behavior at the call site.",
                                           "updatedAt":  "2021-08-04T04:50:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41MHTl",
                                           "createdAt":  "2021-08-04T05:10:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ryank425",
                                           "body":  "\u003e \u003e [Risks] None that I can think of, if properly implemented.\r\n\u003e \r\n\u003e One potential risk is that it\u0027s not possible for `Stopwatch.Elapsed` to express every possible `TimeSpan`. This is due to the multiplication that takes place here:\r\n\u003e \r\n\u003e https://github.com/dotnet/runtime/blob/79c4144f174754bf4fa18827a292549214f86581/src/libraries/System.Private.CoreLib/src/System/Diagnostics/Stopwatch.cs#L133-L139\r\n\u003e \r\n\u003e The _s_tickFrequency_ field describes the smallest quantum of measurable time within the `Stopwatch` instance. If you generate a `TimeSpan` value whose tick count is not a whole multiple of this quantum, then you call `Stopwatch.set_Elapsed` with this time span, then `Stopwatch.get_Elapsed` will return a different value. This may be unexpected by callers and could manifest as undesirable behavior at the call site.\r\n\r\nI think this problem can be resolved by making the API call to round up to the multiples of tickFrequency that device can support.\r\n\r\nThat would make `private void SetTime(long ms)` actually be `private long SetTime(long ms)` to return the rounded time as it is impossible to get that level of accuracy with given constraints in this environment anyway.\r\n",
                                           "updatedAt":  "2021-08-04T05:10:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41MOaq",
                                           "createdAt":  "2021-08-04T06:22:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB1qbsg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ryank425",
                                                                               "createdAt":  "2021-08-04T13:18:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "josalem",
                                                                               "createdAt":  "2021-08-09T21:40:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "\u003e I think this problem can be resolved by making the API call to round up to the multiples of tickFrequency that device can support.\r\n\r\nYes, you could round it. But this means that the caller needs to readjust their zero baseline from what they might otherwise expect it to be. For example, if I set `myStopwatch.Elapsed = TimeSpan.FromSeconds(1);`, and if I want to know if the `Stopwatch` instance has ever been started after I set the _Elapsed_ property, I need to subtract the new _Elapsed_ property value from 1 second + ε, not simply 1 second. Property values silently changing to something other than what the caller set is one way for an application to encounter bugs, particularly when they start receiving non-zero (or negative!) values in calculations that they\u0027d reasonably expect to produce zero.",
                                           "updatedAt":  "2021-08-04T06:22:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41NXyj",
                                           "createdAt":  "2021-08-04T14:17:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB1pFgg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2021-08-07T10:01:16Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "josalem",
                                                                               "createdAt":  "2021-08-09T18:48:04Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ryank425",
                                           "body":  "\u003e \u003e I think this problem can be resolved by making the API call to round up to the multiples of tickFrequency that device can support.\r\n\u003e \r\n\u003e Yes, you could round it. But this means that the caller needs to readjust their zero baseline from what they might otherwise expect it to be. For example, if I set `myStopwatch.Elapsed = TimeSpan.FromSeconds(1);`, and if I want to know if the `Stopwatch` instance has ever been started after I set the _Elapsed_ property, I need to subtract the new _Elapsed_ property value from 1 second + ε, not simply 1 second. Property values silently changing to something other than what the caller set is one way for an application to encounter bugs, particularly when they start receiving non-zero (or negative!) values in calculations that they\u0027d reasonably expect to produce zero.\r\n\r\nI agree with your points. As for the OP\u0027s case, I think you can have still use stopwatch for timing as I am not aware of other mechanism to get high resolution (\u003c1us) time stamp that can be used for time-interval measurements. Just set another variable to hold your custom Elapsed, and add the measurement from Stopwatch as this would be the closest accurate measurement you can get from OS.",
                                           "updatedAt":  "2021-08-04T14:17:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41NlnF",
                                           "createdAt":  "2021-08-04T15:27:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FilipToth",
                                           "body":  "Ok, we could still have a set accessor in the `ElapsedTicks` property (if we expose the `TicksPerMillisecond` field). As for negative numbers, we just don\u0027t set the property if the value is negative.\r\n\r\nI\u0027ll update the issue.",
                                           "updatedAt":  "2021-08-07T04:18:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41YW1Z",
                                           "createdAt":  "2021-08-09T21:56:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josalem",
                                           "body":  "\"Tick\" is an overloaded term here. There are \"DateTime Ticks\" which are 1 tick per 100ns and then there are \"System Clock Ticks\" which have the frequency returned by `Stopwatch.Frequency`.\r\n\r\n[`TicksPerMillisecond` is a `const` value of `10000`](https://source.dot.net/#System.Private.CoreLib/Stopwatch.cs,12) for converting the underlying system frequency (the value returned by `Stoopwatch.Frequency`) to `DateTime` ticks (100ns ticks). See The implementation of [`get_Elapsed`](https://source.dot.net/#System.Private.CoreLib/Stopwatch.cs,96) for details. You can do the calculations yourself if you use `Stopwatch.GetTimestamp` and `Stopwatch.Frequency`.\r\n\r\nI think @ryank425 is correct in suggesting that if you want to get \"elapsed since timestamp\" you should track the timestamp separately.\r\n\r\nIf you\u0027re using `Stopwatch` to track time deltas, you should make sure to convert your elapsed value to the same clock used by your time interval, e.g., your audio editor workspace. You\u0027ll want to use the `Stopwatch.{Start|Stop}` methods with `Stopwatch.ElapsedTicks` and `Stopwatch.Frequency` to convert to the correct clock for your use case. A simple wrapper around the `Stopwatch` class should give you want you want.",
                                           "updatedAt":  "2021-08-09T21:56:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41hzMa",
                                           "createdAt":  "2021-08-13T00:04:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "FilipToth",
                                           "body":  "\u003e A simple wrapper around the Stopwatch class should give you want you want.\r\n\r\nYes, that is exactly what I did in my own code before submitting the issue, I was just wondering about if this could be a positive change to the runtime.",
                                           "updatedAt":  "2021-08-13T00:05:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GOqKh",
                                           "createdAt":  "2022-07-07T21:26:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOClzrtA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "FilipToth",
                                                                               "createdAt":  "2022-07-08T13:58:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Moving older issues to the Future milestone as it is unlikely we will have time to address this in the .NET 7 timeframe.  Please feel free to move this issue back to .NET 7 if there is active work to address the feature request.",
                                           "updatedAt":  "2022-07-07T21:26:05Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "[API Proposal]: Allow for setting of the `Elapsed` property in the `System.Diagnostics.Stopwatch` class. ",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/56977",
        "createdAt":  "2021-08-06T12:06:58Z",
        "number":  56977,
        "author":  "arshadazeem",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-05-18T13:24:07Z",
        "body":  "\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\n--\u003e\r\n\r\n### Is your feature request related to a problem? Please describe.\r\nSystem.Diagnostics.StackTrace currently provides a way to skip the specified number of frames using the skipFrames parameter. \r\nIt would be helpful to have a way to grab the first \"N\" number of frames as well.\r\n\r\n### Describe the solution you\u0027d like\r\nA clear and concise description of what you want to happen. Include any alternative solutions you\u0027ve considered.\r\n\r\n### Additional context\r\nAdd any other context or screenshots about the feature request here.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONV82CA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41TNoS",
                                           "createdAt":  "2021-08-06T12:34:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-08-06T12:34:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41TSUZ",
                                           "createdAt":  "2021-08-06T13:08:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon, @krwq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!--\r\n\r\nMore information on our issue management policies can be found here: https://aka.ms/aspnet/issue-policies\r\n\r\n--\u003e\r\n\r\n### Is your feature request related to a problem? Please describe.\r\nSystem.Diagnostics.StackTrace currently provides a way to skip the specified number of frames using the skipFrames parameter. \r\nIt would be helpful to have a way to grab the first \"N\" number of frames as well.\r\n\r\n### Describe the solution you\u0027d like\r\nA clear and concise description of what you want to happen. Include any alternative solutions you\u0027ve considered.\r\n\r\n### Additional context\r\nAdd any other context or screenshots about the feature request here.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003earshadazeem\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-06T13:08:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41XzYI",
                                           "createdAt":  "2021-08-09T18:11:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "josalem",
                                           "body":  "Hi @arshadazeem! I think you may have emailed my team about this as well, but I\u0027d like to ask a few questions to flesh out this feature request.\r\n\r\nWhen you say the \"first N\" frames are you referring to the top of the stack (most recent methods called) or the bottom of the stack (oldest methods on the stack)?\r\n\r\nIf you mean the former, e.g., only return the most recent methods, then are you imagining an API like:\r\n```csharp\r\nnamespace System.Diagnostics\r\n{\r\n\tpublic partial class StackTrace\r\n\t{\r\n\t\tpublic StackTrace(int skip, int take) {}\r\n\t}\r\n}\r\n```\r\n?\r\n\r\nCould you expand on the use case for this functionality? It will help with design and prioritization. Are you concerned about how long it would take to collect the entire stack for a given thread? If that is the case, there may be an issue with the frequency that stack trace are being collected using this API.",
                                           "updatedAt":  "2021-08-09T18:11:52Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "StackTrace: Provide an option to grab the first \"N\" number of frames ",
        "labels":  [
                       "area-System.Diagnostics",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58483",
        "createdAt":  "2021-09-01T02:03:46Z",
        "number":  58483,
        "author":  "taozuhong",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-07T21:25:26Z",
        "body":  "### Background and motivation\n\nThere is no Trace Listener to support rolling log data with the specific size in file mode, so hope to add the rolling support.\n\n### API Proposal\n\n```C#\r\nnamespace System.Diagnostics\r\n{\r\n     public class TextWriterTraceListener : System.Diagnostics.TraceListener\r\n     {\r\n          public string? FilePattern { get; set; }\r\n          public int64 FileMaxSize { get; set; }\r\n          public void Roll();\r\n     }\r\n}\r\n```     \r\n\n\n### API Usage\n\n```C#\r\npublic static int Main(string[] args) {\r\n    // Create a file for output named TestFile.txt.\r\n    Stream myFile = File.Create(\"TestFile.txt\");\r\n\r\n    /* Create a new text writer using the output stream, and add it to\r\n     * the trace listeners. */\r\n    TextWriterTraceListener myTextListener = new TextWriterTraceListener(myFile);\r\n    myTextListener.FilePattern = \"log-yyyyMMdd.txt\";\r\n    myTextListener.FileMaxSize = 1024 * 1024\r\n    Trace.Listeners.Add(myTextListener);\r\n\r\n    // Write output to the file.\r\n    Trace.Write(\"Test output \");\r\n\r\n    // Flush the output.\r\n    Trace.Flush();\r\n\r\n    return 0;\r\n}\r\n```     \r\n\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORjqhCg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42OoMP",
                                           "createdAt":  "2021-09-01T02:03:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-09-01T02:03:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42Q5BL",
                                           "createdAt":  "2021-09-01T15:29:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon, @krwq\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThere is no Trace Listener to support rolling log data with the specific size in file mode, so hope to add the rolling support.\n\n### API Proposal\n\n```C#\r\nnamespace System.Diagnostics\r\n{\r\n     public class TextWriterTraceListener : System.Diagnostics.TraceListener\r\n     {\r\n          public string? FilePattern { get; set; }\r\n          public int64 FileMaxSize { get; set; }\r\n          public void Roll();\r\n     }\r\n}\r\n```     \r\n\n\n### API Usage\n\n```C#\r\npublic static int Main(string[] args) {\r\n    // Create a file for output named TestFile.txt.\r\n    Stream myFile = File.Create(\"TestFile.txt\");\r\n\r\n    /* Create a new text writer using the output stream, and add it to\r\n     * the trace listeners. */\r\n    TextWriterTraceListener myTextListener = new TextWriterTraceListener(myFile);\r\n    myTextListener.FilePattern = \"log-yyyyMMdd.txt\";\r\n    myTextListener.FileMaxSize = 1024 * 1024\r\n    Trace.Listeners.Add(myTextListener);\r\n\r\n    // Write output to the file.\r\n    Trace.Write(\"Test output \");\r\n\r\n    // Flush the output.\r\n    Trace.Flush();\r\n\r\n    return 0;\r\n}\r\n```     \r\n\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etaozuhong\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-01T15:29:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GOqEK",
                                           "createdAt":  "2022-07-07T21:25:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Moving older issues to the Future milestone as it is unlikely we will have time to address this in the .NET 7 timeframe.  Please feel free to move this issue back to .NET 7 if there is active work to address the feature request.",
                                           "updatedAt":  "2022-07-07T21:25:26Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Add data log rolling support with the specific size",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics",
                       "feature-request",
                       "User Story"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60174",
        "createdAt":  "2021-10-08T13:01:55Z",
        "number":  60174,
        "author":  "MaximLipnin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-31T21:17:12Z",
        "body":  "```\r\n\u003ctest name=\"System.Diagnostics.Tests.FileVersionInfoTest.Symlink_ValidFile_Succeeds\" type=\"System.Diagnostics.Tests.FileVersionInfoTest\" method=\"Symlink_ValidFile_Succeeds\" time=\"0.0099856\" result=\"Fail\"\u003e\r\n    \u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n        \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure\\nExpected: 0\\nActual:   -1]]\u003e\u003c/message\u003e\r\n        \u003cstack-trace\u003e\u003c![CDATA[   at System.Diagnostics.Tests.FileVersionInfoTest.Symlink_ValidFile_Succeeds()\r\nat System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]\u003e\u003c/stack-trace\u003e\r\n    \u003c/failure\u003e\r\n\u003c/test\u003e\r\n\u003ctest name=\"System.Diagnostics.Tests.FileVersionInfoTest.NonRegularFile_Throws\" type=\"System.Diagnostics.Tests.FileVersionInfoTest\" method=\"NonRegularFile_Throws\" time=\"0.0032978\" result=\"Fail\"\u003e\r\n    \u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n        \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure\\nExpected: 0\\nActual:   -1]]\u003e\u003c/message\u003e\r\n        \u003cstack-trace\u003e\u003c![CDATA[   at System.Diagnostics.Tests.FileVersionInfoTest.NonRegularFile_Throws()\r\nat System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]\u003e\u003c/stack-trace\u003e\r\n    \u003c/failure\u003e\r\n\u003c/test\u003e\r\n\u003ctest name=\"System.Diagnostics.Tests.FileVersionInfoTest.Symlink_InvalidFile_Throws\" type=\"System.Diagnostics.Tests.FileVersionInfoTest\" method=\"Symlink_InvalidFile_Throws\" time=\"0.0159803\" result=\"Fail\"\u003e\r\n    \u003cfailure exception-type=\"Xunit.Sdk.EqualException\"\u003e\r\n        \u003cmessage\u003e\u003c![CDATA[Assert.Equal() Failure\\nExpected: 0\\nActual:   -1]]\u003e\u003c/message\u003e\r\n        \u003cstack-trace\u003e\u003c![CDATA[   at System.Diagnostics.Tests.FileVersionInfoTest.Symlink_InvalidFile_Throws()\r\nat System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)]]\u003e\u003c/stack-trace\u003e\r\n    \u003c/failure\u003e\r\n\u003c/test\u003e\r\n```\r\n\r\nhttps://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-59503-merge-82a08e0bf78247ad85/System.Diagnostics.FileVersionInfo.Tests/1/testResults.xml?sv=2019-07-07\u0026se=2021-10-27T21%3A20%3A15Z\u0026sr=c\u0026sp=rl\u0026sig=l6x81ojLuccAHXezeNAnngaxlFWwA%2FvquAUqBhREPyM%3D\r\n\r\nhttps://github.com/dotnet/runtime/pull/59503\r\n\r\ncc @steveisok ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[tvOS] System.Diagnostics.Tests.FileVersionInfoTest failures",
        "labels":  [
                       "area-System.Diagnostics",
                       "os-ios"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60477",
        "createdAt":  "2021-10-15T10:35:37Z",
        "number":  60477,
        "author":  "gurkantuna",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCqaiFg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AdrianoAE",
                                            "createdAt":  "2022-09-03T16:32:16Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-05-18T13:21:58Z",
        "body":  "I like to use  `DebuggerStepThrough`. During debugging, it\u0027s really useful for me especially if used the POCO classes in the project.\r\n```cs\r\nnamespace System.Diagnostics\r\n{\r\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Method | AttributeTargets.Constructor, Inherited = false)]\r\n    public sealed class DebuggerStepThroughAttribute : Attribute\r\n    {\r\n        public DebuggerStepThroughAttribute() { }\r\n    }\r\n}\r\n```\r\nI don\u0027t want to specify the attribute each class\u0027s separately and I want to use it for all derived classes, but there is no parameter for inherited classes and its default value is `false`. This scenario is useful if is you want to debug for entity classes too. So, if you don\u0027t need any concerne to debug in entity classes?\r\n\r\n`true` value is may not be the best practice for the default value, but I think it should at least allow to assign its value. I cannot create any other attribute from this one as the attribute is `sealed`.  I would like to use it as below. In this way, debugger moves on other blocks and continues for all inherited classes for `EntityBase`. \r\n\r\nIf I want to use the debugger for a special class in the future, I should be able to use another `[IgnoreDebuggerStepThrough]` attribute to be created.\r\n\r\n```cs\r\n[DebuggerStepThrough(Inherited=true)]\r\npublic abstract class EntityBase {\r\n    public int Id { get; internal set; }\r\n}\r\n\r\n[IgnoreDebuggerStepThrough]\r\npublic class Product: EntityBase {\r\n    public decimal UnitPrice { get; set; } = 1;\r\n\r\n    public Category Category { get; set; }\r\n\r\n   //Other possible readonly properties without Business Layer\r\n}\r\n\r\npublic class Category: EntityBase {\r\n    //No need [DebuggerStepThrough]\r\n}\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOGShWw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44Sta5",
                                           "createdAt":  "2021-10-15T16:19:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-10-15T16:19:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44Ug8B",
                                           "createdAt":  "2021-10-16T11:35:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI like to use  `DebuggerStepThrough`. During debugging, it\u0027s really useful for me especially if used the POCO classes in the project.\r\n```cs\r\nnamespace System.Diagnostics\r\n{\r\n    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Method | AttributeTargets.Constructor, Inherited = false)]\r\n    public sealed class DebuggerStepThroughAttribute : Attribute\r\n    {\r\n        public DebuggerStepThroughAttribute() { }\r\n    }\r\n}\r\n```\r\nI don\u0027t want to specify the attribute each class\u0027s separately and I want to use it for all derived classes, but there is no parameter for inherited classes and its default value is `false`. This scenario is useful if is you want to debug for entity classes too. So, if you don\u0027t need any concerne to debug in entity classes?\r\n\r\n`true` value is may not be the best practice for the default value, but I think it should at least allow to assign its value. I cannot create any other attribute from this one as the attribute is `sealed`.  I would like to use it as below. In this way, debugger moves on other blocks and continues for all inherited classes for `EntityBase`. \r\n\r\nIf I want to use the debugger for a special class in the future, I should be able to use another `[IgnoreDebuggerStepThrough]` attribute to be created.\r\n\r\n```cs\r\n[DebuggerStepThrough(Inherited=true)]\r\npublic abstract class EntityBase {\r\n    public int Id { get; internal set; }\r\n}\r\n\r\n[IgnoreDebuggerStepThrough]\r\npublic class Product: EntityBase {\r\n    public decimal UnitPrice { get; set; } = 1;\r\n\r\n    public Category Category { get; set; }\r\n\r\n   //Other possible readonly properties without Business Layer\r\n}\r\n\r\npublic class Category: EntityBase {\r\n    //No need [DebuggerStepThrough]\r\n}\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eg-u-r-k-a-n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-16T11:35:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44ZKFb",
                                           "createdAt":  "2021-10-18T20:01:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@hoyosjs @gregg-miskelly ",
                                           "updatedAt":  "2021-10-18T20:01:49Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Allow to use parameter for inherited class to DebuggerStepThrough attriubute",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60759",
        "createdAt":  "2021-10-22T06:56:00Z",
        "number":  60759,
        "author":  "feeleen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-11-03T17:47:04Z",
        "body":  "### Background and motivation\r\n\r\nCurrent speс assumes to use `CallerMemberName` attribute to know caller name.\r\nBut this require to write a lot of excessive/garbage code, and do not cover all situations. And this sometimes results in \".ctor\" values which is useless.\r\n\r\nIf we want to know caller name, we don\u0027t want see constructors (\".ctor\") as a result (because it\u0027s a useless info), we want to know caller Method name (omitting implicit or explicit constructor calls chain!)\r\n\r\nIn scenario below the caller member is empty because of implicit constructor calls. \r\n```cs\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        B b = new();\r\n    }\r\n}\r\n\r\npublic class B : A {}\r\n\r\npublic class A\r\n{\r\n    public A([CallerMemberName] string? value = null)\r\n    {\r\n        Console.WriteLine(value);\r\n    }\r\n}\r\n```\r\nIf I have dll with public class `A` which relies on `CallerMemberName` attribute in it\u0027s constructor - it won\u0027t work because I can\u0027t control how descendant classes are defined.\r\n\r\nI tried this workaround to discover caller member:\r\n```cs\r\npublic A([CallerMemberName] string? value = null)\r\n{\r\n      new StackTrace().GetFrames().ToList()\r\n                .ForEach(x =\u003e Console.WriteLine(x.GetMethod()?.Name))\r\n}\r\n```\r\nresut is:\r\n```\r\n.ctor\r\n.ctor\r\nMain\r\n```\r\n\r\nI don\u0027t need \".ctor\". I look for Main. Ok.\r\n\r\nBut this works only for sync code. When it comes to async calls - the StackTrace I get doesn\u0027t contain a sync caller member (\"Main\") at all, because the call chain is broken here:\r\n\r\n```cs\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Foo().GetAwaiter().GetResult();\r\n    }\r\n\r\n    static async Task Foo()\r\n    {\r\n        await Task.Delay(100);\r\n        B b = new();\r\n    }\r\n}\r\n\r\npublic class B : A {}\r\n\r\npublic class A\r\n{\r\n    public A([CallerMemberName] string? value = null)\r\n    {\r\n        // in this stackTrace we know nothing about Main\r\n        new StackTrace().GetFrames().ToList()\r\n            .ForEach(x =\u003e Console.WriteLine(x.GetMethod()?.Name));\r\n\r\n        // here we will see Main:\r\n        throw new Exception();\r\n    }\r\n}\r\n```\r\n\r\nconsole output is:\r\n```\r\n.ctor\r\n.ctor\r\nMoveNext\r\nExecutionContextCallback\r\nRunInternal\r\nMoveNext\r\nMoveNext\r\n\u003cOutputWaitEtwEvents\u003eb__12_0\r\nInvoke\r\nRunOrScheduleAction\r\nRunContinuations\r\nFinishContinuations\r\nTrySetResult\r\nCompleteTimedOut\r\n\u003c.ctor\u003eb__1_0\r\nCallCallback\r\nFire\r\nFireNextTimers\r\nAppDomainTimerCallback\r\n```\r\nThere is no \"Main\" here. Chain is broken.\r\n\r\nbut if we look at thrown Exception output - we can see \"Program.Main()\". chain isn\u0027t broken. \r\n```\r\n   at A..ctor(String value) in H:\\My programming\\_VS2022\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 35\r\n   at B..ctor()\r\n   at Program.\u003cFoo\u003ed__1.MoveNext() in H:\\My programming\\_VS2022\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 18\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n   at Program.Main() in C:\\Temp\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 12\r\n```\r\n\r\nSo,\r\n\r\nIt would be great if caller name or caller `MethodInfo` (omit constructors! they are useless) to be stored somewhere in `ExecutionContext` when it\u0027s captured, and to be able to get this info somehow from sync or async code. To get it I want to call `CurrentThread.CallerMemberName` or something like `CurrentThread.GetCallerMethod()`. It\u0027ll look for callers in current thread (if async code), -\u003e if not found -\u003e Look for it in `ExecutionContext`\r\n\r\nthe second Issue here is that `new StackTrace()` doesn\u0027t contain a frames with sync code, from which async code is called. \r\n\r\n### API Proposal\r\n\r\n```C#\r\nMethodInfo mi = CurrentThread.GetCallerMethod();\r\n//or\r\nMethodInfo mi = MethodBase.GetCallerMethod();\r\n```     \r\n\r\n\r\n### API Usage\r\n\r\n```C#\r\nMethodInfo mi = CurrentThread.GetCallerMethod();\r\n//or\r\nMethodInfo mi = MethodBase.GetCallerMethod();\r\n```     \r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOTUAeg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44lcb0",
                                           "createdAt":  "2021-10-22T06:56:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-10-22T06:56:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44oB-j",
                                           "createdAt":  "2021-10-22T23:51:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @buyaa-n\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nCurrent speс assumes to use `CallerMemberName` attribute to know caller name.\r\nBut this require to write a lot of excessive/garbage code, and do not cover all situations. And this sometimes results in \".ctor\" values which is useless.\r\n\r\nIf we want to know caller name, we don\u0027t want see constructors (\".ctor\") as a result (because it\u0027s a useless info), we want to know caller Method name (omitting implicit or explicit constructor calls chain!)\r\n\r\nIn scenario below the caller member is empty because of implicit constructor calls. \r\n```cs\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        B b = new();\r\n    }\r\n}\r\n\r\npublic class B : A {}\r\n\r\npublic class A\r\n{\r\n    public A([CallerMemberName] string? value = null)\r\n    {\r\n        Console.WriteLine(value);\r\n    }\r\n}\r\n```\r\nIf I have dll with public class `A` which relies on `CallerMemberName` attribute in it\u0027s constructor - it won\u0027t work because I can\u0027t control how descendant classes are defined.\r\n\r\nI tried this workaround to discover caller member:\r\n```cs\r\npublic A([CallerMemberName] string? value = null)\r\n{\r\n      new StackTrace().GetFrames().ToList()\r\n                .ForEach(x =\u003e Console.WriteLine(x.GetMethod()?.Name))\r\n}\r\n```\r\nresut is:\r\n```\r\n.ctor\r\n.ctor\r\nMain\r\n```\r\n\r\nI don\u0027t need \".ctor\". I look for Main. Ok.\r\n\r\nBut this works only for sync code. When it comes to async calls - the StackTrace I get doesn\u0027t contain a sync caller member (\"Main\") at all, because the call chain is broken here:\r\n\r\n```cs\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Foo().GetAwaiter().GetResult();\r\n    }\r\n\r\n    static async Task Foo()\r\n    {\r\n        await Task.Delay(100);\r\n        B b = new();\r\n    }\r\n}\r\n\r\npublic class B : A {}\r\n\r\npublic class A\r\n{\r\n    public A([CallerMemberName] string? value = null)\r\n    {\r\n        // in this stackTrace we know nothing about Main\r\n        new StackTrace().GetFrames().ToList()\r\n            .ForEach(x =\u003e Console.WriteLine(x.GetMethod()?.Name));\r\n\r\n        // here we will see Main:\r\n        throw new Exception();\r\n    }\r\n}\r\n```\r\n\r\nconsole output is:\r\n```\r\n.ctor\r\n.ctor\r\nMoveNext\r\nExecutionContextCallback\r\nRunInternal\r\nMoveNext\r\nMoveNext\r\n\u003cOutputWaitEtwEvents\u003eb__12_0\r\nInvoke\r\nRunOrScheduleAction\r\nRunContinuations\r\nFinishContinuations\r\nTrySetResult\r\nCompleteTimedOut\r\n\u003c.ctor\u003eb__1_0\r\nCallCallback\r\nFire\r\nFireNextTimers\r\nAppDomainTimerCallback\r\n```\r\nThere is no \"Main\" here. Chain is broken.\r\n\r\nbut if we look at thrown Exception output - we can see \"Program.Main()\". chain isn\u0027t broken. \r\n```\r\n   at A..ctor(String value) in H:\\My programming\\_VS2022\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 35\r\n   at B..ctor()\r\n   at Program.\u003cFoo\u003ed__1.MoveNext() in H:\\My programming\\_VS2022\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 18\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n   at Program.Main() in C:\\Temp\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 12\r\n```\r\n\r\nSo,\r\n\r\nIt would be great if caller name or caller `MethodInfo` (omit constructors! they are useless) to be stored somewhere in `ExecutionContext` when it\u0027s captured, and to be able to get this info somehow from sync or async code. To get it I want to call `CurrentThread.CallerMemberName` or something like `CurrentThread.GetCallerMethod()`. It\u0027ll look for callers in current thread (if async code), -\u003e if not found -\u003e Look for it in `ExecutionContext`\r\n\r\nthe second Issue here is that `new StackTrace()` doesn\u0027t contain a frames with sync code, from which async code is called. \r\n\r\n### API Proposal\r\n\r\n```C#\r\nMethodInfo mi = CurrentThread.GetCallerMethod();\r\n```     \r\n\r\n\r\n### API Usage\r\n\r\n```C#\r\nMethodInfo mi = CurrentThread.GetCallerMethod();\r\n```     \r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efeeleen\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Reflection`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-22T23:51:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44o1ia",
                                           "createdAt":  "2021-10-23T22:59:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "This seems like a subset of https://github.com/dotnet/csharplang/issues/4984",
                                           "updatedAt":  "2021-10-23T22:59:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44smlU",
                                           "createdAt":  "2021-10-25T18:59:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "I am not sure it is doable in reflection, probably better to be moved to System.Diagnostics? cc @steveharter ",
                                           "updatedAt":  "2021-10-25T18:59:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45NPHF",
                                           "createdAt":  "2021-11-03T17:42:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nCurrent speс assumes to use `CallerMemberName` attribute to know caller name.\r\nBut this require to write a lot of excessive/garbage code, and do not cover all situations. And this sometimes results in \".ctor\" values which is useless.\r\n\r\nIf we want to know caller name, we don\u0027t want see constructors (\".ctor\") as a result (because it\u0027s a useless info), we want to know caller Method name (omitting implicit or explicit constructor calls chain!)\r\n\r\nIn scenario below the caller member is empty because of implicit constructor calls. \r\n```cs\r\nusing System;\r\nusing System.Runtime.CompilerServices;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        B b = new();\r\n    }\r\n}\r\n\r\npublic class B : A {}\r\n\r\npublic class A\r\n{\r\n    public A([CallerMemberName] string? value = null)\r\n    {\r\n        Console.WriteLine(value);\r\n    }\r\n}\r\n```\r\nIf I have dll with public class `A` which relies on `CallerMemberName` attribute in it\u0027s constructor - it won\u0027t work because I can\u0027t control how descendant classes are defined.\r\n\r\nI tried this workaround to discover caller member:\r\n```cs\r\npublic A([CallerMemberName] string? value = null)\r\n{\r\n      new StackTrace().GetFrames().ToList()\r\n                .ForEach(x =\u003e Console.WriteLine(x.GetMethod()?.Name))\r\n}\r\n```\r\nresut is:\r\n```\r\n.ctor\r\n.ctor\r\nMain\r\n```\r\n\r\nI don\u0027t need \".ctor\". I look for Main. Ok.\r\n\r\nBut this works only for sync code. When it comes to async calls - the StackTrace I get doesn\u0027t contain a sync caller member (\"Main\") at all, because the call chain is broken here:\r\n\r\n```cs\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Foo().GetAwaiter().GetResult();\r\n    }\r\n\r\n    static async Task Foo()\r\n    {\r\n        await Task.Delay(100);\r\n        B b = new();\r\n    }\r\n}\r\n\r\npublic class B : A {}\r\n\r\npublic class A\r\n{\r\n    public A([CallerMemberName] string? value = null)\r\n    {\r\n        // in this stackTrace we know nothing about Main\r\n        new StackTrace().GetFrames().ToList()\r\n            .ForEach(x =\u003e Console.WriteLine(x.GetMethod()?.Name));\r\n\r\n        // here we will see Main:\r\n        throw new Exception();\r\n    }\r\n}\r\n```\r\n\r\nconsole output is:\r\n```\r\n.ctor\r\n.ctor\r\nMoveNext\r\nExecutionContextCallback\r\nRunInternal\r\nMoveNext\r\nMoveNext\r\n\u003cOutputWaitEtwEvents\u003eb__12_0\r\nInvoke\r\nRunOrScheduleAction\r\nRunContinuations\r\nFinishContinuations\r\nTrySetResult\r\nCompleteTimedOut\r\n\u003c.ctor\u003eb__1_0\r\nCallCallback\r\nFire\r\nFireNextTimers\r\nAppDomainTimerCallback\r\n```\r\nThere is no \"Main\" here. Chain is broken.\r\n\r\nbut if we look at thrown Exception output - we can see \"Program.Main()\". chain isn\u0027t broken. \r\n```\r\n   at A..ctor(String value) in H:\\My programming\\_VS2022\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 35\r\n   at B..ctor()\r\n   at Program.\u003cFoo\u003ed__1.MoveNext() in H:\\My programming\\_VS2022\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 18\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n   at Program.Main() in C:\\Temp\\ConsoleApp1\\ConsoleApp1\\Program.cs:line 12\r\n```\r\n\r\nSo,\r\n\r\nIt would be great if caller name or caller `MethodInfo` (omit constructors! they are useless) to be stored somewhere in `ExecutionContext` when it\u0027s captured, and to be able to get this info somehow from sync or async code. To get it I want to call `CurrentThread.CallerMemberName` or something like `CurrentThread.GetCallerMethod()`. It\u0027ll look for callers in current thread (if async code), -\u003e if not found -\u003e Look for it in `ExecutionContext`\r\n\r\nthe second Issue here is that `new StackTrace()` doesn\u0027t contain a frames with sync code, from which async code is called. \r\n\r\n### API Proposal\r\n\r\n```C#\r\nMethodInfo mi = CurrentThread.GetCallerMethod();\r\n//or\r\nMethodInfo mi = MethodBase.GetCallerMethod();\r\n```     \r\n\r\n\r\n### API Usage\r\n\r\n```C#\r\nMethodInfo mi = CurrentThread.GetCallerMethod();\r\n//or\r\nMethodInfo mi = MethodBase.GetCallerMethod();\r\n```     \r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efeeleen\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics`, `area-System.Reflection`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-03T17:42:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45NQB6",
                                           "createdAt":  "2021-11-03T17:47:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCBDL4Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "steveharter",
                                                                               "createdAt":  "2021-11-03T17:48:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "joperezr",
                                           "body":  "Just to add here, I agree with @buyaa-n that this API wouldn\u0027t belong on System.Reflection MethodInfo as MethodInfo is just an object that represents the pointer to a method and has info that are not related to current execution. Perhaps this kind of API would be better placed in a type like StackTrace?",
                                           "updatedAt":  "2021-11-03T17:47:04Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[API Proposal]: Add ability to get Caller MethodInfo from any code at runtime",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60764",
        "createdAt":  "2021-10-22T14:00:44Z",
        "number":  60764,
        "author":  "feeleen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9jb_A==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Seabizkit",
                                            "createdAt":  "2022-07-26T09:09:55Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "batkaevruslan",
                                            "createdAt":  "2024-04-10T12:57:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Nirmal4G",
                                            "createdAt":  "2024-12-18T00:02:32Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2024-05-11T15:28:21Z",
        "body":  "Exception\u0027s stack trace from async code was significantly improved to be more clear and keep the chain of callers from sync code part.\r\nBut if we try to get `new StackTrace()` at runtime, then we are get back at the very bottom of the ladder. This StackTrace is useless\r\n\r\n```cs\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Foo().GetAwaiter().GetResult();\r\n    }\r\n\r\n    static async Task Foo()\r\n    {\r\n        await Task.Delay(100);\r\n        A a = new();\r\n    }\r\n}\r\n\r\npublic class A\r\n{\r\n    public A()\r\n    {\r\n        Console.WriteLine(\"In this stackTrace we know nothing about \u0027Main\u0027:\");\r\n        new StackTrace().GetFrames().ToList()\r\n            .ForEach(x =\u003e Console.WriteLine(x.GetMethod()?.Name));\r\n\t\t\r\n        Console.WriteLine(Environment.NewLine);\r\n        Console.WriteLine(\"Here, in exception stacktrace we will see \u0027Main\u0027:\");\r\n        throw new Exception();\r\n    }\r\n}\r\n```\r\nhttps://dotnetfiddle.net/u9gcR6\r\n\r\n\r\noutput:\r\n```\r\nIn this stackTrace we know nothing about \u0027Main\u0027:\r\n.ctor\r\nMoveNext\r\nExecutionContextCallback\r\nRunInternal\r\nMoveNext\r\nMoveNext\r\nRunOrScheduleAction\r\nRunContinuations\r\nFinishContinuations\r\nTrySetResult\r\nCompleteTimedOut\r\n\u003c.ctor\u003eb__1_0\r\nCallCallback\r\nFire\r\nFireNextTimers\r\nAppDomainTimerCallback\r\n\r\n\r\nHere, in exception stacktrace we will see \u0027Main\u0027:\r\nUnhandled exception. System.Exception: Exception of type \u0027System.Exception\u0027 was thrown.\r\n   at A..ctor()\r\n   at Program.Foo()\r\n   at Program.Main()\r\nCommand terminated by signal 6\r\n\r\n```\r\n\r\nIs there a chance that this will be fixed/improved somehow?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfYX9Aw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44mqe9",
                                           "createdAt":  "2021-10-22T14:00:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-10-22T14:00:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44m0GJ",
                                           "createdAt":  "2021-10-22T14:45:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "feeleen",
                                           "body":  "btw even `Environment.StackTrace`, called from A\u0027s constructor in the code above, doesn\u0027t mention \u0027Main\u0027:\r\n\r\n```\r\n   at System.Environment.get_StackTrace()\r\n   at A..ctor()\r\n   at Program.Foo()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task.TrySetResult()\r\n   at System.Threading.Tasks.Task.DelayPromise.CompleteTimedOut()\r\n   at System.Threading.Tasks.Task.DelayPromise.\u003c\u003ec.\u003c.ctor\u003eb__1_0(Object state)\r\n   at System.Threading.TimerQueueTimer.CallCallback(Boolean isThreadPool)\r\n   at System.Threading.TimerQueueTimer.Fire(Boolean isThreadPool)\r\n   at System.Threading.TimerQueue.FireNextTimers()\r\n   at System.Threading.TimerQueue.AppDomainTimerCallback(Int32 id)\r\n\r\n```",
                                           "updatedAt":  "2021-10-22T14:47:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44nTCd",
                                           "createdAt":  "2021-10-22T17:22:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nException\u0027s stack trace from async code was significantly improved to be more clear and keep the chain of callers from sync code part.\r\nBut if we try to get `new StackTrace()` at runtime, then we are get back at the very bottom of the ladder. This StackTrace is useless\r\n\r\n```cs\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Linq;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Foo().GetAwaiter().GetResult();\r\n    }\r\n\r\n    static async Task Foo()\r\n    {\r\n        await Task.Delay(100);\r\n        A a = new();\r\n    }\r\n}\r\n\r\npublic class A\r\n{\r\n    public A()\r\n    {\r\n        Console.WriteLine(\"In this stackTrace we know nothing about \u0027Main\u0027:\");\r\n        new StackTrace().GetFrames().ToList()\r\n            .ForEach(x =\u003e Console.WriteLine(x.GetMethod()?.Name));\r\n\t\t\r\n        Console.WriteLine(Environment.NewLine);\r\n        Console.WriteLine(\"Here, in exception stacktrace we will see \u0027Main\u0027:\");\r\n        throw new Exception();\r\n    }\r\n}\r\n```\r\nhttps://dotnetfiddle.net/u9gcR6\r\n\r\n\r\noutput:\r\n```\r\nIn this stackTrace we know nothing about \u0027Main\u0027:\r\n.ctor\r\nMoveNext\r\nExecutionContextCallback\r\nRunInternal\r\nMoveNext\r\nMoveNext\r\nRunOrScheduleAction\r\nRunContinuations\r\nFinishContinuations\r\nTrySetResult\r\nCompleteTimedOut\r\n\u003c.ctor\u003eb__1_0\r\nCallCallback\r\nFire\r\nFireNextTimers\r\nAppDomainTimerCallback\r\n\r\n\r\nHere, in exception stacktrace we will see \u0027Main\u0027:\r\nUnhandled exception. System.Exception: Exception of type \u0027System.Exception\u0027 was thrown.\r\n   at A..ctor()\r\n   at Program.Foo()\r\n   at Program.Main()\r\nCommand terminated by signal 6\r\n\r\n```\r\n\r\nIs there a chance that this will be fixed/improved somehow?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003efeeleen\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-22T17:22:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44oNfl",
                                           "createdAt":  "2021-10-23T04:59:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Similar features were requested in \u003chttps://github.com/dotnet/runtime/issues/14434\u003e and \u003chttps://github.com/dotnet/runtime/issues/42684\u003e.",
                                           "updatedAt":  "2021-10-23T04:59:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44wMa6",
                                           "createdAt":  "2021-10-26T17:31:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Adding @noahfalk @stephentoub for thoughts",
                                           "updatedAt":  "2021-10-26T17:31:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44wogk",
                                           "createdAt":  "2021-10-26T19:58:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCof_Hw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Seabizkit",
                                                                               "createdAt":  "2022-07-26T09:11:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "I think the issues @KalleOlaviNiemitalo linked to do a good job showing some of the past exploration. While I\u0027m sure there are still technical issues to work out for a solution, likely the biggest hurdle here is prioritization. When the issue first arose in 2015 async wasn\u0027t much used and the impact was low, but it is substantially larger now. This is probably a case where we\u0027ve been slowly boiling the frog. For the past few releases we\u0027ve been asking the BCL team for help on select areas of diagnostics and this might be a good one to get help on for .NET 7. \r\n\r\ncc @tarekgh ",
                                           "updatedAt":  "2021-10-26T19:58:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44w1HQ",
                                           "createdAt":  "2021-10-26T21:04:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@stephentoub what are your thoughts around this issue? and what would be the way to fix it? any change would be needed from the compiler side?\r\n\r\nCC @jeffhandley @adamsitnik @carlossanlop @jozkee for awareness as owners of System.Threading.Tasks. \r\n",
                                           "updatedAt":  "2021-10-26T21:04:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44w3yr",
                                           "createdAt":  "2021-10-26T21:19:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8EmTQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2021-10-26T22:14:00Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2021-10-27T16:56:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2022-08-01T11:32:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RelativelyRandom",
                                                                               "createdAt":  "2022-10-05T13:38:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colincmac",
                                                                               "createdAt":  "2023-05-19T20:32:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "An Exception\u0027s stack trace contains the \"async stack\" because as it propagates from await to await, getting thrown and caught at every level, every throw appends additional information to the stack. Environment.StackTrace / `new StackTrace()` doesn\u0027t have the ability to propagate in such a manner.  It has no notion of how it ended up asynchronously where it is or where it\u0027s going (the latter actually being what you get with an Exception stack trace, as it ends up recording in reverse the frames it propagates through as it\u0027s thrown and caught).  There\u0027s no good way to provide a 100% \"correct\" stack trace here.  The closest you\u0027d come would probably be trying to walk the continuation chain from task to task, trying to simulate the flight an exception would take, but understanding all of the data structures along the way would not only be complicated, in some cases it\u0027d be near impossible, as arbitrary things can hook up continuations to tasks (and runtime assistance would likely be required to find the start of the task chain). In short, it\u0027s possible something could be done here programmatically in corelib, but it would be far from easy or perfect.",
                                           "updatedAt":  "2021-10-26T21:22:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44yLbi",
                                           "createdAt":  "2021-10-27T08:40:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e but it would be far from easy or perfect.\r\n\r\nAgreed. I wasn\u0027t expecting we\u0027d solve this in full generality. I was envisioning a solution that is perhaps constrained to only work on cases where all the Tasks are generated by the C# async keyword and continuations registered using await. (This is just an example, I\u0027m very open to other suggestions on the effort vs. completeness vs. accuracy tradeoff too)",
                                           "updatedAt":  "2021-10-27T08:44:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HPjZ9",
                                           "createdAt":  "2022-07-26T09:44:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Seabizkit",
                                           "body":  "i dnt know this well enough to understand the technical challenges here.\r\nIn my mind, if the code know where it need to go, there must be a route to follow, I mean in terms of the async and threading.\r\nI find it confusing that it doesn\u0027t know. \r\n\r\nAnyway was looking for this so i could query what method kick off another.\r\nAka use case I was looking for, is in Ef core with DbCommandInterceptor it would be nice to be able to include the method (repo name which started the call. StackTrace really doesn\u0027t have the info needed.\r\n\r\nI would of thought this would already have been included for more complex debugging needs. Seems odd that you can view the call stack in VS but cant programmatically ask for it.\r\n",
                                           "updatedAt":  "2022-07-26T09:44:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Lm8xo",
                                           "createdAt":  "2022-10-05T14:19:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RelativelyRandom",
                                           "body":  "\u003e In my mind, if the code know where it need to go, there must be a route to follow, I mean in terms of the async and threading. I find it confusing that it doesn\u0027t know.\r\n\r\n@Seabizkit Here\u0027s an illustration of why this isn\u0027t as easy as it seems like it should be:\r\n\r\n```\r\nprivate static async Task\u003cint\u003e ThrowingOperation()\r\n{\r\n    await Task.Delay(1000);\r\n    throw new InvalidOperationException(\"An exception.\");\r\n}\r\n\r\nprivate static async Task\u003cint\u003e SomethingComplicated()\r\n{\r\n    // Start doing something slow.\r\n    Task\u003cint\u003e operationTask = ThrowingOperation();\r\n\r\n    // Do something useful in the meantime.\r\n    var intermediateResult = new Random().Next(20);\r\n\r\n    if (intermediateResult \u003c 10)\r\n        return intermediateResult + await operationTask; // Option A\r\n    else\r\n        return intermediateResult - await operationTask; // Option B\r\n}\r\n\r\nprivate static async Task\u003cint\u003e CatchesTheException()\r\n{\r\n    try\r\n    {\r\n        var notGoingToHappen = await SomethingComplicated();\r\n        return notGoingToHappen;\r\n    }\r\n    catch(Exception e)\r\n    {\r\n        var trace = e.StackTrace;\r\n        throw;\r\n    }\r\n}\r\n```\r\n\r\nThe exception you catch in `CatchesTheException` will have a different stack trace depending on the value of `intermediateResult`. If it\u0027s less than 10, the stack trace will include option A, otherwise it will include option B. But `ThrowingOperation` cannot know where control flow will go next until the intermediate result is finished. Even worse, you can pass the same task to multiple methods which can all do an `await` on it and you\u0027ll get a different stack trace in all of those methods even though originally only a single exception was thrown.\r\n\r\nSo in general async code cannot know where the result is going and it could be going to multiple places.",
                                           "updatedAt":  "2022-10-05T14:19:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bX1tK",
                                           "createdAt":  "2023-05-03T12:50:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mike7ang1rdz",
                                           "body":  "hello, I need this feature any workarounds?",
                                           "updatedAt":  "2023-05-03T12:50:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5tf1Ui",
                                           "createdAt":  "2023-12-02T06:38:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "feeleen",
                                           "body":  "I thik that we need just two things:\n\n1. compiler or runtime should capture \u0026 store the class \u0026 method where task was initially created. If it will be just one ugly line of text - ok (is it impossible? I dont think so)\n\n2. It should also capture the class \u0026 method where task was awaited from. If it will be just one ugly line of text - ok (if you meet \"await\" then just capture the place where it is called from by using caller info attributes or any other way. Is it impossible? I dont think so)\n\nThese two things should be the mandatory part of any async stack trace at least in debug mode. ",
                                           "updatedAt":  "2023-12-02T06:38:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59hf0D",
                                           "createdAt":  "2024-05-11T15:28:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rowi123",
                                           "body":  "i am also running into this problem\r\nfor a specific bug i dump a tracktrace, but isn\u0027t so incomplete i can\u0027t use it\r\ni can see the stacktrace correctly in the debugger",
                                           "updatedAt":  "2024-05-11T15:28:20Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "`new StackTrace()` inside async methods -\u003e Useless, Lack of frames with sync caller method (initiator)",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68153",
        "createdAt":  "2022-04-18T06:19:38Z",
        "number":  68153,
        "author":  "alexrp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODSGdoA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "geekley",
                                            "createdAt":  "2022-04-20T20:37:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "0xfeeddeadbeef",
                                            "createdAt":  "2024-02-22T09:36:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "IS4Code",
                                            "createdAt":  "2024-03-06T11:13:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "NinoFloris",
                                            "createdAt":  "2024-11-21T05:53:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DilanBoskan",
                                            "createdAt":  "2025-09-20T07:42:48Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2022-08-26T21:23:03Z",
        "body":  "### Background and motivation\n\nMost of the time when I need to suppress a particular code analysis rule, I will omit the category, like so:\r\n\r\n```csharp\r\n[SuppressMessage(\"\", \"CA1008\", Justification = \"...\")]\r\npublic enum CursorKeyMode\r\n{\r\n    Normal = \u0027l\u0027,\r\n    Application = \u0027h\u0027,\r\n}\r\n```\r\n\r\nThere are a few reasons:\r\n\r\n* It doesn\u0027t seem to make any difference; Roslyn still knows what rule I\u0027m talking about.\r\n* It\u0027s hard to discover what the category actually is. Maybe this is better in VS, but in VS Code, there is no obvious way that I can see to find it.\r\n* It rarely adds actual value. When I search for a rule, I search for the check ID only. Category is never relevant.\r\n* It takes away valuable horizontal screen space that could be used for the `Justification` message, which is way more important.\r\n\r\nSo, I propose that `SuppressMessageAttribute` and `UnconditionalSuppressMessageAttribute` both get a new constructor that only takes the rule ID as a parameter.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics.CodeAnalysis\r\n{\r\n    public sealed class SuppressMessageAttribute : Attribute\r\n    {\r\n        public SuppressMessageAttribute(string checkId);\r\n    }\r\n\r\n    public sealed class UnconditionalSuppressMessageAttribute : Attribute\r\n    {\r\n        public UnconditionalSuppressMessageAttribute(string checkId);\r\n    }\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\n[SuppressMessage(\"CA1008\", Justification = \"...\")]\r\npublic enum CursorKeyMode\r\n{\r\n    Normal = \u0027l\u0027,\r\n    Application = \u0027h\u0027,\r\n}\r\n```\n\n### Alternative Designs\n\nNone?\n\n### Risks\n\nRoslyn and the IL trimmer (maybe others?) need to be taught about the new constructor.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSUBxJg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5BofgP",
                                           "createdAt":  "2022-04-18T06:19:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-04-18T06:19:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Bp6cY",
                                           "createdAt":  "2022-04-18T15:38:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nMost of the time when I need to suppress a particular code analysis rule, I will omit the category, like so:\r\n\r\n```csharp\r\n[SuppressMessage(\"\", \"CA1008\", Justification = \"...\")]\r\npublic enum CursorKeyMode\r\n{\r\n    Normal = \u0027l\u0027,\r\n    Application = \u0027h\u0027,\r\n}\r\n```\r\n\r\nThere are a few reasons:\r\n\r\n* It doesn\u0027t seem to make any difference; Roslyn still knows what rule I\u0027m talking about.\r\n* It\u0027s hard to discover what the category actually is. Maybe this is better in VS, but in VS Code, there is no obvious way that I can see to find it.\r\n* It rarely adds actual value. When I search for a rule, I search for the check ID only. Category is never relevant.\r\n* It takes away valuable horizontal screen space that could be used for the `Justification` message, which is way more important.\r\n\r\nSo, I propose that `SuppressMessageAttribute` and `UnconditionalSuppressMessageAttribute` both get a new constructor that only takes the rule ID as a parameter.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics.CodeAnalysis\r\n{\r\n    public sealed class SuppressMessageAttribute : Attribute\r\n    {\r\n        public SuppressMessageAttribute(string checkId);\r\n    }\r\n\r\n    public sealed class UnconditionalSuppressMessageAttribute : Attribute\r\n    {\r\n        public UnconditionalSuppressMessageAttribute(string checkId);\r\n    }\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\n[SuppressMessage(\"CA1008\", Justification = \"...\")]\r\npublic enum CursorKeyMode\r\n{\r\n    Normal = \u0027l\u0027,\r\n    Application = \u0027h\u0027,\r\n}\r\n```\n\n### Alternative Designs\n\nNone?\n\n### Risks\n\nRoslyn and the IL trimmer (maybe others?) need to be taught about the new constructor.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ealexrp\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Runtime`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-18T15:38:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B1TTc",
                                           "createdAt":  "2022-04-20T21:56:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "geekley",
                                           "body":  "Related: #68301 ",
                                           "updatedAt":  "2022-04-20T21:56:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JQHEm",
                                           "createdAt":  "2022-08-26T21:23:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nMost of the time when I need to suppress a particular code analysis rule, I will omit the category, like so:\r\n\r\n```csharp\r\n[SuppressMessage(\"\", \"CA1008\", Justification = \"...\")]\r\npublic enum CursorKeyMode\r\n{\r\n    Normal = \u0027l\u0027,\r\n    Application = \u0027h\u0027,\r\n}\r\n```\r\n\r\nThere are a few reasons:\r\n\r\n* It doesn\u0027t seem to make any difference; Roslyn still knows what rule I\u0027m talking about.\r\n* It\u0027s hard to discover what the category actually is. Maybe this is better in VS, but in VS Code, there is no obvious way that I can see to find it.\r\n* It rarely adds actual value. When I search for a rule, I search for the check ID only. Category is never relevant.\r\n* It takes away valuable horizontal screen space that could be used for the `Justification` message, which is way more important.\r\n\r\nSo, I propose that `SuppressMessageAttribute` and `UnconditionalSuppressMessageAttribute` both get a new constructor that only takes the rule ID as a parameter.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics.CodeAnalysis\r\n{\r\n    public sealed class SuppressMessageAttribute : Attribute\r\n    {\r\n        public SuppressMessageAttribute(string checkId);\r\n    }\r\n\r\n    public sealed class UnconditionalSuppressMessageAttribute : Attribute\r\n    {\r\n        public UnconditionalSuppressMessageAttribute(string checkId);\r\n    }\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\n[SuppressMessage(\"CA1008\", Justification = \"...\")]\r\npublic enum CursorKeyMode\r\n{\r\n    Normal = \u0027l\u0027,\r\n    Application = \u0027h\u0027,\r\n}\r\n```\n\n### Alternative Designs\n\nNone?\n\n### Risks\n\nRoslyn and the IL trimmer (maybe others?) need to be taught about the new constructor.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ealexrp\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics`, `needs-further-triage`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-26T21:23:03Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: `SuppressMessage`/`UnconditionalSuppressMessage` constructor without category",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68301",
        "createdAt":  "2022-04-20T21:54:39Z",
        "number":  68301,
        "author":  "geekley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-07T21:30:52Z",
        "body":  "### Background and motivation\r\n\r\nPlease make it possible to suppress warnings everywhere an arbitrary attribute is applied.\r\n\r\nJust suppressing warnings for unused code is already useful in many use cases. But the flexibility of suppressing any warnings generically based on applied attributes can have a lot of other powerful use cases as well, so this would be the ideal.\r\n\r\nCurrently, you need to apply it everywhere next to the attribute usage, which is quite verbose. For example:\r\n```cs\r\nclass MyClass : Node {\r\n  // Godot.Export implies the member is not unused, even if it\u0027s private\r\n  // It\u0027s used by tools (Godot Editor) even if it\u0027s unused by code\r\n  [Export, SuppressMessage(\"\", \"IDE0051\")] string MyField { get {...} set {...} }\r\n}\r\n```\r\n\r\n### API Proposal\r\n\r\n```cs\r\nnamespace System.Diagnostics.CodeAnalysis\r\n{\r\n  public sealed class SuppressMessageAttribute : Attribute {\r\n    // Suppresses warnings everywhere an attribute is applied, instead of in the attribute class itself.\r\n    public bool AttributeUsage { get; set; }\r\n  }\r\n  public sealed class UnconditionalSuppressMessageAttribute : Attribute {\r\n    // Suppresses warnings everywhere an attribute is applied, instead of in the attribute class itself.\r\n    public bool AttributeUsage { get; set; }\r\n  }\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```cs\r\nusing System.Diagnostics.CodeAnalysis;\r\n// Suppress \"Remove unused private member\" everywhere [Export] attribute is applied\r\n[assembly: SuppressMessage(\"\", \"IDE0051\",\r\n  AttributeUsage = true, Scope = \"member\", Target = \"T:Godot.ExportAttribute\")]\r\n```\r\n```cs\r\nusing Godot;\r\nclass MyClass : Node {\r\n  // used by Godot\u0027s inspector, even though it\u0027s private\r\n  [Export] string MyField { get {...} set {...} } // shouldn\u0027t raise IDE0051\r\n}\r\n```\r\n\r\n### Alternative Designs\r\n\r\nThis method is preferred instead of just allowing to subclass `SuppressMessage`, because then you can just apply it on any attribute from whatever library you\u0027re using. Maximum flexibility is the best in this case.\r\n\r\nMy examples don\u0027t consider cross-assembly applicability (in a way where the lib author already uses this to specify what warnings their own attributes suppress on other projects), but I imagine it might be useful to allow this with `UnconditionalSuppressAttribute`, so library consumers don\u0027t have to worry about this.\r\n\r\nYou could alternatively allow a value like `\"attributeusage\"` or similar on the `Scope` property, but I\u0027m not sure whether this may provide less flexibility than a separate field. If not, this would be simpler. Another option is making a separate class for attribute suppression, but I believe it might be overkill, since the fields would be the same anyways.\r\n\r\n### Risks\r\n\r\nNo idea.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORjqvWQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5B1Swf",
                                           "createdAt":  "2022-04-20T21:54:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-04-20T21:54:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B4kQP",
                                           "createdAt":  "2022-04-21T15:05:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nPlease make it possible to suppress warnings everywhere an arbitrary attribute is applied.\r\n\r\nJust suppressing warnings for unused code is already useful in many use cases. But the flexibility of suppressing any warnings generically based on applied attributes can have a lot of other powerful use cases as well, so this would be the ideal.\r\n\r\nCurrently, you need to apply it everywhere next to the attribute usage, which is quite verbose. For example:\r\n```cs\r\nclass MyClass : Node {\r\n  // Godot.Export implies the attribute is not unused, even if it\u0027s private\r\n  // It\u0027s used by tools (Godot Editor) even if it\u0027s unused by code\r\n  [Export, SuppressMessage(\"\", \"IDE0051\")] string MyField { get {...} set {...} }\r\n}\r\n```\n\n### API Proposal\n\n```cs\r\nnamespace System.Diagnostics.CodeAnalysis\r\n{\r\n  public sealed class SuppressMessageAttribute : Attribute {\r\n    // Suppresses warnings everywhere an attribute is applied, instead of in the attribute class itself.\r\n    public bool AttributeUsage { get; set; }\r\n  }\r\n  public sealed class UnconditionalSuppressMessageAttribute : Attribute {\r\n    // Suppresses warnings everywhere an attribute is applied, instead of in the attribute class itself.\r\n    public bool AttributeUsage { get; set; }\r\n  }\r\n}\r\n```\n\n### API Usage\n\n```cs\r\nusing System.Diagnostics.CodeAnalysis;\r\n// Suppress \"Remove unused private member\" everywhere [Export] attribute is applied\r\n[assembly: SuppressMessage(\"\", \"IDE0051\",\r\n  AttributeUsage = true, Scope = \"member\", Target = \"T:Godot.ExportAttribute\")]\r\n```\r\n```cs\r\nusing Godot;\r\nclass MyClass : Node {\r\n  // used by Godot\u0027s inspector, even though it\u0027s private\r\n  [Export] string MyField { get {...} set {...} } // shouldn\u0027t raise IDE0051\r\n}\r\n```\n\n### Alternative Designs\n\nThis method is preferred instead of just allowing to subclass `SuppressMessage`, because then you can just apply it on any attribute from whatever library you\u0027re using. Maximum flexibility is the best in this case.\r\n\r\nMy examples don\u0027t consider cross-assembly applicability (in a way where the lib author already uses this to specify what warnings their own attributes suppress on other projects), but I imagine it might be useful to allow this with `UnconditionalSuppressAttribute`, so library consumers don\u0027t have to worry about this.\r\n\r\nYou could alternatively allow a value like `\"attributeusage\"` or similar on the `Scope` property, but I\u0027m not sure whether this may provide less flexibility than a separate field. If not, this would be simpler. Another option is making a separate class for attribute suppression, but I believe it might be overkill, since the fields would be the same anyways.\n\n### Risks\n\nNo idea.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003egeekley\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-21T15:05:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CFeUP",
                                           "createdAt":  "2022-04-25T15:35:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Adding @jaredpar.   Do we also need a Roslyn issue to track adding compiler support for the proposed attribute?",
                                           "updatedAt":  "2022-04-25T15:35:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CFgHr",
                                           "createdAt":  "2022-04-25T15:41:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jaredpar",
                                           "body":  "\u003e  Do we also need a Roslyn issue to track adding compiler support for the proposed attribute?\r\n\r\nYes this probably needs a Roslyn proposal. \r\n\r\nAt the same time I have to say we\u0027d be very reluctant to accept yet another way to suppress warnings. There are already so many different ways to suppress or enable warnings that the compiler team can barely keep track of them all. Particularly the ways in which they interact with each other (does editorconfig have priority over a command line switch, an attribute, etc ...). At this point adding yet another way to do this has a very high bar that it needs to meet in order for inclusion here. Instead refinements to existing ways, or usually just clarification, is the likely path forward. \r\n",
                                           "updatedAt":  "2022-04-25T15:41:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CFwW5",
                                           "createdAt":  "2022-04-25T16:46:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@geekley Would you mind opening a Roslyn issue to track the compiler request?  ",
                                           "updatedAt":  "2022-04-25T16:46:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CF491",
                                           "createdAt":  "2022-04-25T17:20:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "geekley",
                                           "body":  "@tommcdon Done.\r\nWasn\u0027t sure what to write and if type is right, so I just copied the description from here as an API proposal there.",
                                           "updatedAt":  "2022-04-25T17:20:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GOq9Z",
                                           "createdAt":  "2022-07-07T21:30:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Moving this issue to the Future milestone.  Please feel free to move back to .net 7 if the Roslyn side of the work becomes committed. ",
                                           "updatedAt":  "2022-07-07T21:30:52Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[API Proposal]: allow making attributes suppress warnings with `(Unconditional)SuppressMessage`",
        "labels":  [
                       "enhancement",
                       "api-suggestion",
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71000",
        "createdAt":  "2022-06-20T15:08:45Z",
        "number":  71000,
        "author":  "karelz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-25T17:59:55Z",
        "body":  "Affected test:\r\n- CurrentProcess_WaitNeverCompletes - `System.Diagnostics.Tests.ProcessWaitingTests.CurrentProcess_WaitNeverCompletes`\r\n\r\nFailures in [last 30 days](https://runfo.azurewebsites.net/search/tests/?q=started%3A%7E30+definition%3Aruntime-extra-platforms+name%3A%22system.diagnostics.tests.processwaitingtests.currentprocess_waitnevercompletes%22) as of 6/20:\r\n- [1827345](https://runfo.azurewebsites.net/view/build/?number=1827345) (6/15 PM) rolling build - 1x failure\r\n    - net7.0-Android-Release-x86-Mono_Release-Ubuntu.1804.Amd64.Android.29.Open\r\n- [1766848](https://runfo.azurewebsites.net/view/build/?number=1766848) (5/12) PR - 2x failures\r\n    - net7.0-Android-Release-x64-Mono_Release-Ubuntu.1804.Amd64.Android.23.Open\r\n    - net7.0-Android-Release-x86-Mono_Release-Ubuntu.1804.Amd64.Android.23.Open\r\n- [1728786](https://runfo.azurewebsites.net/view/build/?number=1728786) (4/20) PR - 3x failures\r\n    - net7.0-Android-Release-x64-Mono_Release-Ubuntu.1804.Amd64.Android.25.Open\r\n    - net7.0-Android-Release-x64-Mono_Release-Ubuntu.1804.Amd64.Android.24.Open\r\n    - net7.0-Android-Release-x86-Mono_Release-Ubuntu.1804.Amd64.Android.25.Open\r\n- [1701982](https://runfo.azurewebsites.net/view/build/?number=1701982) (4/5) PR - 1x failure\r\n    - net7.0-Android-Release-x64-Mono_Release-Ubuntu.1804.Amd64.Android.29.Open\r\n\r\nError TaskCanceledException:\r\n\r\n\u003cdetails\u003e\r\n```\r\nSystem.AggregateException : One or more errors occurred. (A task was canceled.)\r\n---- System.Threading.Tasks.TaskCanceledException : A task was canceled.\r\n\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Task.Wait()\r\n   at System.Diagnostics.ProcessWaitState.WaitForExit(Int32 millisecondsTimeout)\r\n   at System.Diagnostics.Process.WaitForExitCore(Int32 milliseconds)\r\n   at System.Diagnostics.Process.WaitForExit(Int32 milliseconds)\r\n   at System.Diagnostics.Tests.ProcessWaitingTests.CurrentProcess_WaitNeverCompletes(Int32 milliseconds) in /_/src/libraries/System.Diagnostics.Process/tests/ProcessWaitingTests.cs:line 119\r\n   at System.Reflection.MethodInvoker.InterpretedInvoke(Object obj, Span`1 args, BindingFlags invokeAttr)\r\n----- Inner Stack Trace -----\r\n   at System.Threading.Tasks.Task.GetExceptions(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Task.Wait()\r\n   at System.Diagnostics.ProcessWaitState.WaitForExit(Int32 millisecondsTimeout)\r\n   at System.Diagnostics.Process.WaitForExitCore(Int32 milliseconds)\r\n   at System.Diagnostics.Process.WaitForExit(Int32 milliseconds)\r\n   at System.Diagnostics.Tests.ProcessWaitingTests.CurrentProcess_WaitNeverCompletes(Int32 milliseconds) in /_/src/libraries/System.Diagnostics.Process/tests/ProcessWaitingTests.cs:line 119\r\n   at System.Reflection.RuntimeMethodInfo.InternalInvoke(RuntimeMethodInfo , Object , Span`1\u0026 , Exception\u0026 )\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed](\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cAggregateAsync\u003ed__4](\u003cAggregateAsync\u003ed__4\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__9](\u003cRunAsync\u003ed__9\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cInvokeTestMethodAsync\u003ed__48](\u003cInvokeTestMethodAsync\u003ed__48\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003c\u003cRunAsync\u003eb__47_0\u003ed](\u003c\u003cRunAsync\u003eb__47_0\u003ed\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__10`1](\u003cRunAsync\u003ed__10`1\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cInvokeTestAsync\u003ed__4](\u003cInvokeTestAsync\u003ed__4\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__10`1](\u003cRunAsync\u003ed__10`1\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__43](\u003cRunAsync\u003ed__43\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestAsync\u003ed__11](\u003cRunTestAsync\u003ed__11\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__19](\u003cRunAsync\u003ed__19\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestCasesAsync\u003ed__32](\u003cRunTestCasesAsync\u003ed__32\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__31](\u003cRunAsync\u003ed__31\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestMethodsAsync\u003ed__38](\u003cRunTestMethodsAsync\u003ed__38\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__37](\u003cRunAsync\u003ed__37\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestClassesAsync\u003ed__28](\u003cRunTestClassesAsync\u003ed__28\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__27](\u003cRunAsync\u003ed__27\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestCollectionsAsync\u003ed__42](\u003cRunTestCollectionsAsync\u003ed__42\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestCollectionsAsync\u003ed__14](\u003cRunTestCollectionsAsync\u003ed__14\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__41](\u003cRunAsync\u003ed__41\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestCases\u003ed__8](\u003cRunTestCases\u003ed__8\u0026 stateMachine)\r\n   at TestFrameworkExtensions.RunTests(ITestFrameworkExecutor executor, IEnumerable`1 testCases, IMessageSinkWithTypes executionMessageSink, ITestFrameworkExecutionOptions executionOptions) in C:\\Dev\\xunit\\xunit\\src\\xunit.runner.utility\\Extensions\\TestFrameworkExtensions.cs:line 69\r\n   at Microsoft.DotNet.XHarness.TestRunners.Xunit.XUnitTestRunner.Run(Assembly assembly, String assemblyPath)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRun\u003ed__85](\u003cRun\u003ed__85\u0026 stateMachine)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Xunit.XUnitTestRunner.Run(Assembly assembly, String assemblyPath)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Xunit.XUnitTestRunner.Run(IEnumerable`1 testAssemblies)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRun\u003ed__77](\u003cRun\u003ed__77\u0026 stateMachine)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Xunit.XUnitTestRunner.Run(IEnumerable`1 testAssemblies)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.InternalRunAsync(LogWriter logger)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[Microsoft.DotNet.XHarness.TestRunners.Common.TestRunner, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cInternalRunAsync\u003ed__38, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[Microsoft.DotNet.XHarness.TestRunners.Common.TestRunner, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cInternalRunAsync\u003ed__38, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[Microsoft.DotNet.XHarness.TestRunners.Common.TestRunner, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cInternalRunAsync\u003ed__38, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TrySetResult(List`1 result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetExistingTaskResult(Task`1 task, List`1 result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(List`1 result)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.GetIgnoredCategories()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cGetIgnoredCategories\u003ed__35, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cGetIgnoredCategories\u003ed__35, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cGetIgnoredCategories\u003ed__35, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TrySetResult(IEnumerable`1 result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetExistingTaskResult(Task`1 task, IEnumerable`1 result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(IEnumerable`1 result)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Common.IgnoreFileParser.ParseTraitsFileAsync(String filePath)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.IgnoreFileParser.\u003cParseTraitsFileAsync\u003ed__4, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.IgnoreFileParser.\u003cParseTraitsFileAsync\u003ed__4, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.IgnoreFileParser.\u003cParseTraitsFileAsync\u003ed__4, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TrySetResult(String result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetExistingTaskResult(Task`1 task, String result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(String result)\r\n   at System.IO.StreamReader.ReadLineAsyncInternal(CancellationToken cancellationToken)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadLineAsyncInternal\u003ed__63, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadLineAsyncInternal\u003ed__63, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadLineAsyncInternal\u003ed__63, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TrySetResult(Int32 result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetExistingTaskResult(Task`1 task, Int32 result)\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Int32 result)\r\n   at System.IO.StreamReader.ReadBufferAsync(CancellationToken cancellationToken)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadBufferAsync\u003ed__72, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadBufferAsync\u003ed__72, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadBufferAsync\u003ed__72, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Threading.ThreadPool.\u003c\u003ec.\u003c.cctor\u003eb__58_0(Object state)\r\n   at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SignalCompletion()\r\n   at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Int32 result)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Int32 result)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Int32 result)\r\n   at System.IO.Strategies.BufferedFileStreamStrategy.ReadAsyncSlowPath(Task semaphoreLockTask, Memory`1 buffer, CancellationToken cancellationToken)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.Strategies.BufferedFileStreamStrategy.\u003cReadAsyncSlowPath\u003ed__37, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.Strategies.BufferedFileStreamStrategy.\u003cReadAsyncSlowPath\u003ed__37, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Threading.ThreadPool.\u003c\u003ec.\u003c.cctor\u003eb__58_0(Object state)\r\n   at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1[[System.Int64, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SignalCompletion()\r\n   at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1[[System.Int64, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Int64 result)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.ThreadPoolValueTaskSource.ExecuteInternal()\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.ThreadPoolValueTaskSource.System.Threading.IThreadPoolWorkItem.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\n   at System.Threading.Thread.StartCallback()\r\n--- End of stack trace from previous location ---\r\n```\r\n\u003c/details\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORg2pEg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5FLNBw",
                                           "createdAt":  "2022-06-20T15:09:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAffected test:\r\n- CurrentProcess_WaitNeverCompletes - `System.Diagnostics.Tests.ProcessWaitingTests.CurrentProcess_WaitNeverCompletes`\r\n\r\nFailures in [last 120 days](https://runfo.azurewebsites.net/search/tests/?q=started%3A%7E120+definition%3Aruntime-extra-platforms+name%3A%22system.diagnostics.tests.processwaitingtests.currentprocess_waitnevercompletes%22) as of 6/20:\r\n- [1827345](https://runfo.azurewebsites.net/view/build/?number=1827345) (6/15 PM) rolling build - net7.0-Android-Release-x86-Mono_Release-Ubuntu.1804.Amd64.Android.29.Open\r\n- [1766848](https://runfo.azurewebsites.net/view/build/?number=1766848) (5/12) PR - 2x failures\r\n    - net7.0-Android-Release-x64-Mono_Release-Ubuntu.1804.Amd64.Android.23.Open\r\n    - net7.0-Android-Release-x86-Mono_Release-Ubuntu.1804.Amd64.Android.23.Open\r\n- [1728786](https://runfo.azurewebsites.net/view/build/?number=1728786) (4/20) PR - 3x failures\r\n    - net7.0-Android-Release-x64-Mono_Release-Ubuntu.1804.Amd64.Android.25.Open\r\n    - net7.0-Android-Release-x64-Mono_Release-Ubuntu.1804.Amd64.Android.24.Open\r\n    - net7.0-Android-Release-x86-Mono_Release-Ubuntu.1804.Amd64.Android.25.Open\r\n- [1701982](https://runfo.azurewebsites.net/view/build/?number=1701982) (4/5) PR - 1x failure\r\n    - net7.0-Android-Release-x64-Mono_Release-Ubuntu.1804.Amd64.Android.29.Open\r\n\r\nError TaskCanceledException:\r\n\r\n\u003cdetails\u003e\r\n```\r\nSystem.AggregateException : One or more errors occurred. (A task was canceled.)\r\n---- System.Threading.Tasks.TaskCanceledException : A task was canceled.\r\n\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Task.Wait()\r\n   at System.Diagnostics.ProcessWaitState.WaitForExit(Int32 millisecondsTimeout)\r\n   at System.Diagnostics.Process.WaitForExitCore(Int32 milliseconds)\r\n   at System.Diagnostics.Process.WaitForExit(Int32 milliseconds)\r\n   at System.Diagnostics.Tests.ProcessWaitingTests.CurrentProcess_WaitNeverCompletes(Int32 milliseconds) in /_/src/libraries/System.Diagnostics.Process/tests/ProcessWaitingTests.cs:line 119\r\n   at System.Reflection.MethodInvoker.InterpretedInvoke(Object obj, Span`1 args, BindingFlags invokeAttr)\r\n----- Inner Stack Trace -----\r\n   at System.Threading.Tasks.Task.GetExceptions(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Task.Wait()\r\n   at System.Diagnostics.ProcessWaitState.WaitForExit(Int32 millisecondsTimeout)\r\n   at System.Diagnostics.Process.WaitForExitCore(Int32 milliseconds)\r\n   at System.Diagnostics.Process.WaitForExit(Int32 milliseconds)\r\n   at System.Diagnostics.Tests.ProcessWaitingTests.CurrentProcess_WaitNeverCompletes(Int32 milliseconds) in /_/src/libraries/System.Diagnostics.Process/tests/ProcessWaitingTests.cs:line 119\r\n   at System.Reflection.RuntimeMethodInfo.InternalInvoke(RuntimeMethodInfo , Object , Span`1\u0026 , Exception\u0026 )\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed](\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cAggregateAsync\u003ed__4](\u003cAggregateAsync\u003ed__4\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__9](\u003cRunAsync\u003ed__9\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cInvokeTestMethodAsync\u003ed__48](\u003cInvokeTestMethodAsync\u003ed__48\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003c\u003cRunAsync\u003eb__47_0\u003ed](\u003c\u003cRunAsync\u003eb__47_0\u003ed\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__10`1](\u003cRunAsync\u003ed__10`1\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cInvokeTestAsync\u003ed__4](\u003cInvokeTestAsync\u003ed__4\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__10`1](\u003cRunAsync\u003ed__10`1\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__43](\u003cRunAsync\u003ed__43\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestAsync\u003ed__11](\u003cRunTestAsync\u003ed__11\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__19](\u003cRunAsync\u003ed__19\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestCasesAsync\u003ed__32](\u003cRunTestCasesAsync\u003ed__32\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__31](\u003cRunAsync\u003ed__31\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestMethodsAsync\u003ed__38](\u003cRunTestMethodsAsync\u003ed__38\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__37](\u003cRunAsync\u003ed__37\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestClassesAsync\u003ed__28](\u003cRunTestClassesAsync\u003ed__28\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__27](\u003cRunAsync\u003ed__27\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestCollectionsAsync\u003ed__42](\u003cRunTestCollectionsAsync\u003ed__42\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestCollectionsAsync\u003ed__14](\u003cRunTestCollectionsAsync\u003ed__14\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__41](\u003cRunAsync\u003ed__41\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestCases\u003ed__8](\u003cRunTestCases\u003ed__8\u0026 stateMachine)\r\n   at TestFrameworkExtensions.RunTests(ITestFrameworkExecutor executor, IEnumerable`1 testCases, IMessageSinkWithTypes executionMessageSink, ITestFrameworkExecutionOptions executionOptions) in C:\\Dev\\xunit\\xunit\\src\\xunit.runner.utility\\Extensions\\TestFrameworkExtensions.cs:line 69\r\n   at Microsoft.DotNet.XHarness.TestRunners.Xunit.XUnitTestRunner.Run(Assembly assembly, String assemblyPath)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRun\u003ed__85](\u003cRun\u003ed__85\u0026 stateMachine)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Xunit.XUnitTestRunner.Run(Assembly assembly, String assemblyPath)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Xunit.XUnitTestRunner.Run(IEnumerable`1 testAssemblies)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRun\u003ed__77](\u003cRun\u003ed__77\u0026 stateMachine)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Xunit.XUnitTestRunner.Run(IEnumerable`1 testAssemblies)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.InternalRunAsync(LogWriter logger)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[Microsoft.DotNet.XHarness.TestRunners.Common.TestRunner, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cInternalRunAsync\u003ed__38, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[Microsoft.DotNet.XHarness.TestRunners.Common.TestRunner, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cInternalRunAsync\u003ed__38, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[Microsoft.DotNet.XHarness.TestRunners.Common.TestRunner, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cInternalRunAsync\u003ed__38, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TrySetResult(List`1 result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetExistingTaskResult(Task`1 task, List`1 result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(List`1 result)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.GetIgnoredCategories()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cGetIgnoredCategories\u003ed__35, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cGetIgnoredCategories\u003ed__35, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cGetIgnoredCategories\u003ed__35, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TrySetResult(IEnumerable`1 result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetExistingTaskResult(Task`1 task, IEnumerable`1 result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(IEnumerable`1 result)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Common.IgnoreFileParser.ParseTraitsFileAsync(String filePath)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.IgnoreFileParser.\u003cParseTraitsFileAsync\u003ed__4, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.IgnoreFileParser.\u003cParseTraitsFileAsync\u003ed__4, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.IgnoreFileParser.\u003cParseTraitsFileAsync\u003ed__4, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TrySetResult(String result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetExistingTaskResult(Task`1 task, String result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(String result)\r\n   at System.IO.StreamReader.ReadLineAsyncInternal(CancellationToken cancellationToken)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadLineAsyncInternal\u003ed__63, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadLineAsyncInternal\u003ed__63, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadLineAsyncInternal\u003ed__63, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TrySetResult(Int32 result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetExistingTaskResult(Task`1 task, Int32 result)\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Int32 result)\r\n   at System.IO.StreamReader.ReadBufferAsync(CancellationToken cancellationToken)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadBufferAsync\u003ed__72, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadBufferAsync\u003ed__72, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadBufferAsync\u003ed__72, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Threading.ThreadPool.\u003c\u003ec.\u003c.cctor\u003eb__58_0(Object state)\r\n   at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SignalCompletion()\r\n   at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Int32 result)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Int32 result)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Int32 result)\r\n   at System.IO.Strategies.BufferedFileStreamStrategy.ReadAsyncSlowPath(Task semaphoreLockTask, Memory`1 buffer, CancellationToken cancellationToken)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.Strategies.BufferedFileStreamStrategy.\u003cReadAsyncSlowPath\u003ed__37, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.Strategies.BufferedFileStreamStrategy.\u003cReadAsyncSlowPath\u003ed__37, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Threading.ThreadPool.\u003c\u003ec.\u003c.cctor\u003eb__58_0(Object state)\r\n   at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1[[System.Int64, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SignalCompletion()\r\n   at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1[[System.Int64, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Int64 result)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.ThreadPoolValueTaskSource.ExecuteInternal()\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.ThreadPoolValueTaskSource.System.Threading.IThreadPoolWorkItem.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\n   at System.Threading.Thread.StartCallback()\r\n--- End of stack trace from previous location ---\r\n```\r\n\u003c/details\u003e\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekarelz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-20T15:09:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5FLNPq",
                                           "createdAt":  "2022-06-20T15:09:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAffected test:\r\n- CurrentProcess_WaitNeverCompletes - `System.Diagnostics.Tests.ProcessWaitingTests.CurrentProcess_WaitNeverCompletes`\r\n\r\nFailures in [last 120 days](https://runfo.azurewebsites.net/search/tests/?q=started%3A%7E120+definition%3Aruntime-extra-platforms+name%3A%22system.diagnostics.tests.processwaitingtests.currentprocess_waitnevercompletes%22) as of 6/20:\r\n- [1827345](https://runfo.azurewebsites.net/view/build/?number=1827345) (6/15 PM) rolling build - 1x failure\r\n    - net7.0-Android-Release-x86-Mono_Release-Ubuntu.1804.Amd64.Android.29.Open\r\n- [1766848](https://runfo.azurewebsites.net/view/build/?number=1766848) (5/12) PR - 2x failures\r\n    - net7.0-Android-Release-x64-Mono_Release-Ubuntu.1804.Amd64.Android.23.Open\r\n    - net7.0-Android-Release-x86-Mono_Release-Ubuntu.1804.Amd64.Android.23.Open\r\n- [1728786](https://runfo.azurewebsites.net/view/build/?number=1728786) (4/20) PR - 3x failures\r\n    - net7.0-Android-Release-x64-Mono_Release-Ubuntu.1804.Amd64.Android.25.Open\r\n    - net7.0-Android-Release-x64-Mono_Release-Ubuntu.1804.Amd64.Android.24.Open\r\n    - net7.0-Android-Release-x86-Mono_Release-Ubuntu.1804.Amd64.Android.25.Open\r\n- [1701982](https://runfo.azurewebsites.net/view/build/?number=1701982) (4/5) PR - 1x failure\r\n    - net7.0-Android-Release-x64-Mono_Release-Ubuntu.1804.Amd64.Android.29.Open\r\n\r\nError TaskCanceledException:\r\n\r\n\u003cdetails\u003e\r\n```\r\nSystem.AggregateException : One or more errors occurred. (A task was canceled.)\r\n---- System.Threading.Tasks.TaskCanceledException : A task was canceled.\r\n\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Task.Wait()\r\n   at System.Diagnostics.ProcessWaitState.WaitForExit(Int32 millisecondsTimeout)\r\n   at System.Diagnostics.Process.WaitForExitCore(Int32 milliseconds)\r\n   at System.Diagnostics.Process.WaitForExit(Int32 milliseconds)\r\n   at System.Diagnostics.Tests.ProcessWaitingTests.CurrentProcess_WaitNeverCompletes(Int32 milliseconds) in /_/src/libraries/System.Diagnostics.Process/tests/ProcessWaitingTests.cs:line 119\r\n   at System.Reflection.MethodInvoker.InterpretedInvoke(Object obj, Span`1 args, BindingFlags invokeAttr)\r\n----- Inner Stack Trace -----\r\n   at System.Threading.Tasks.Task.GetExceptions(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n   at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.Task.Wait()\r\n   at System.Diagnostics.ProcessWaitState.WaitForExit(Int32 millisecondsTimeout)\r\n   at System.Diagnostics.Process.WaitForExitCore(Int32 milliseconds)\r\n   at System.Diagnostics.Process.WaitForExit(Int32 milliseconds)\r\n   at System.Diagnostics.Tests.ProcessWaitingTests.CurrentProcess_WaitNeverCompletes(Int32 milliseconds) in /_/src/libraries/System.Diagnostics.Process/tests/ProcessWaitingTests.cs:line 119\r\n   at System.Reflection.RuntimeMethodInfo.InternalInvoke(RuntimeMethodInfo , Object , Span`1\u0026 , Exception\u0026 )\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed](\u003c\u003cInvokeTestMethodAsync\u003eb__1\u003ed\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cAggregateAsync\u003ed__4](\u003cAggregateAsync\u003ed__4\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__9](\u003cRunAsync\u003ed__9\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cInvokeTestMethodAsync\u003ed__48](\u003cInvokeTestMethodAsync\u003ed__48\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003c\u003cRunAsync\u003eb__47_0\u003ed](\u003c\u003cRunAsync\u003eb__47_0\u003ed\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__10`1](\u003cRunAsync\u003ed__10`1\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cInvokeTestAsync\u003ed__4](\u003cInvokeTestAsync\u003ed__4\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__10`1](\u003cRunAsync\u003ed__10`1\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__43](\u003cRunAsync\u003ed__43\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestAsync\u003ed__11](\u003cRunTestAsync\u003ed__11\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__19](\u003cRunAsync\u003ed__19\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestCasesAsync\u003ed__32](\u003cRunTestCasesAsync\u003ed__32\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__31](\u003cRunAsync\u003ed__31\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestMethodsAsync\u003ed__38](\u003cRunTestMethodsAsync\u003ed__38\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__37](\u003cRunAsync\u003ed__37\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestClassesAsync\u003ed__28](\u003cRunTestClassesAsync\u003ed__28\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__27](\u003cRunAsync\u003ed__27\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestCollectionsAsync\u003ed__42](\u003cRunTestCollectionsAsync\u003ed__42\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestCollectionsAsync\u003ed__14](\u003cRunTestCollectionsAsync\u003ed__14\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunAsync\u003ed__41](\u003cRunAsync\u003ed__41\u0026 stateMachine)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRunTestCases\u003ed__8](\u003cRunTestCases\u003ed__8\u0026 stateMachine)\r\n   at TestFrameworkExtensions.RunTests(ITestFrameworkExecutor executor, IEnumerable`1 testCases, IMessageSinkWithTypes executionMessageSink, ITestFrameworkExecutionOptions executionOptions) in C:\\Dev\\xunit\\xunit\\src\\xunit.runner.utility\\Extensions\\TestFrameworkExtensions.cs:line 69\r\n   at Microsoft.DotNet.XHarness.TestRunners.Xunit.XUnitTestRunner.Run(Assembly assembly, String assemblyPath)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRun\u003ed__85](\u003cRun\u003ed__85\u0026 stateMachine)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Xunit.XUnitTestRunner.Run(Assembly assembly, String assemblyPath)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Xunit.XUnitTestRunner.Run(IEnumerable`1 testAssemblies)\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[\u003cRun\u003ed__77](\u003cRun\u003ed__77\u0026 stateMachine)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Xunit.XUnitTestRunner.Run(IEnumerable`1 testAssemblies)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.InternalRunAsync(LogWriter logger)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[Microsoft.DotNet.XHarness.TestRunners.Common.TestRunner, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cInternalRunAsync\u003ed__38, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[Microsoft.DotNet.XHarness.TestRunners.Common.TestRunner, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cInternalRunAsync\u003ed__38, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[Microsoft.DotNet.XHarness.TestRunners.Common.TestRunner, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cInternalRunAsync\u003ed__38, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TrySetResult(List`1 result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetExistingTaskResult(Task`1 task, List`1 result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(List`1 result)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.GetIgnoredCategories()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cGetIgnoredCategories\u003ed__35, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cGetIgnoredCategories\u003ed__35, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.ApplicationEntryPoint.\u003cGetIgnoredCategories\u003ed__35, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TrySetResult(IEnumerable`1 result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetExistingTaskResult(Task`1 task, IEnumerable`1 result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(IEnumerable`1 result)\r\n   at Microsoft.DotNet.XHarness.TestRunners.Common.IgnoreFileParser.ParseTraitsFileAsync(String filePath)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.IgnoreFileParser.\u003cParseTraitsFileAsync\u003ed__4, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.IgnoreFileParser.\u003cParseTraitsFileAsync\u003ed__4, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Collections.Generic.IEnumerable`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[Microsoft.DotNet.XHarness.TestRunners.Common.IgnoreFileParser.\u003cParseTraitsFileAsync\u003ed__4, Microsoft.DotNet.XHarness.TestRunners.Common, Version=1.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]].MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TrySetResult(String result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetExistingTaskResult(Task`1 task, String result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(String result)\r\n   at System.IO.StreamReader.ReadLineAsyncInternal(CancellationToken cancellationToken)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadLineAsyncInternal\u003ed__63, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadLineAsyncInternal\u003ed__63, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.String, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadLineAsyncInternal\u003ed__63, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining)\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject)\r\n   at System.Threading.Tasks.Task.FinishContinuations()\r\n   at System.Threading.Tasks.Task`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].TrySetResult(Int32 result)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetExistingTaskResult(Task`1 task, Int32 result)\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Int32 result)\r\n   at System.IO.StreamReader.ReadBufferAsync(CancellationToken cancellationToken)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadBufferAsync\u003ed__72, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadBufferAsync\u003ed__72, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext(Thread threadPoolThread)\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.StreamReader.\u003cReadBufferAsync\u003ed__72, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Threading.ThreadPool.\u003c\u003ec.\u003c.cctor\u003eb__58_0(Object state)\r\n   at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SignalCompletion()\r\n   at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Int32 result)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Int32 result)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Int32 result)\r\n   at System.IO.Strategies.BufferedFileStreamStrategy.ReadAsyncSlowPath(Task semaphoreLockTask, Memory`1 buffer, CancellationToken cancellationToken)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.Strategies.BufferedFileStreamStrategy.\u003cReadAsyncSlowPath\u003ed__37, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].ExecutionContextCallback(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1[[System.Int32, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.IO.Strategies.BufferedFileStreamStrategy.\u003cReadAsyncSlowPath\u003ed__37, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].MoveNext()\r\n   at System.Threading.ThreadPool.\u003c\u003ec.\u003c.cctor\u003eb__58_0(Object state)\r\n   at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1[[System.Int64, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SignalCompletion()\r\n   at System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1[[System.Int64, System.Private.CoreLib, Version=7.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].SetResult(Int64 result)\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.ThreadPoolValueTaskSource.ExecuteInternal()\r\n   at Microsoft.Win32.SafeHandles.SafeFileHandle.ThreadPoolValueTaskSource.System.Threading.IThreadPoolWorkItem.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\n   at System.Threading.Thread.StartCallback()\r\n--- End of stack trace from previous location ---\r\n```\r\n\u003c/details\u003e\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ekarelz\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics`, `os-android`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-20T15:09:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GDakS",
                                           "createdAt":  "2022-07-05T17:06:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "This seems pretty intermittent.  Will keep this issue open for now and monitor.",
                                           "updatedAt":  "2022-07-05T17:06:56Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Test failure: System.Diagnostics.Tests.ProcessWaitingTests.CurrentProcess_WaitNeverCompletes - TaskCanceledException",
        "labels":  [
                       "area-System.Diagnostics",
                       "os-android"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76138",
        "createdAt":  "2022-09-24T20:57:33Z",
        "number":  76138,
        "author":  "egil",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9jTZA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raulsntos",
                                            "createdAt":  "2022-09-27T15:29:04Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rubenprins",
                                            "createdAt":  "2022-09-27T19:30:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SimonCropp",
                                            "createdAt":  "2024-12-17T22:14:18Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-15T18:26:10Z",
        "body":  "### Background and motivation\n\nIt seems weird not to have HTML as a constant in StringSyntaxAttribute. There are a whole bunch of libs that work on HTML, and most IDEs have excellent syntax highlighting for it. The XML option could potentially be used, but since its much more restrictive language than HTML, it could result in a bad user experience.\n\n### API Proposal\n\n`public const string Html = nameof(Html);`\n\n### API Usage\n\nSee https://github.com/dotnet/runtime/issues/65634 for usage examples.\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nNone.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSv5HvA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5K7Ua5",
                                           "createdAt":  "2022-09-24T20:57:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-09-24T20:57:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K7Udb",
                                           "createdAt":  "2022-09-24T20:58:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "egil",
                                           "body":  "Ps. I\u0027d be happy to submit a PR if this gets approved.",
                                           "updatedAt":  "2022-09-24T20:58:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K8RCR",
                                           "createdAt":  "2022-09-25T23:46:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nIt seems weird not to have HTML as a constant in StringSyntaxAttribute. There are a whole bunch of libs that work on HTML, and most IDEs have excellent syntax highlighting for it. The XML option could potentially be used, but since its much more restrictive language than HTML, it could result in a bad user experience.\n\n### API Proposal\n\n`public const string Html = nameof(Html);`\n\n### API Usage\n\nSee https://github.com/dotnet/runtime/issues/65634 for usage examples.\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nNone.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eegil\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-25T23:46:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5K_ke8",
                                           "createdAt":  "2022-09-26T15:05:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@stephentoub ",
                                           "updatedAt":  "2022-09-26T15:05:47Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: Add HTML string syntax type constant to StringSyntaxAttribute",
        "labels":  [
                       "enhancement",
                       "api-suggestion",
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/76203",
        "createdAt":  "2022-09-26T18:53:36Z",
        "number":  76203,
        "author":  "Swimburger",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC9gLYg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "symbiogenesis",
                                            "createdAt":  "2023-01-29T09:11:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "arakis",
                                            "createdAt":  "2023-02-07T11:26:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "s341507",
                                            "createdAt":  "2024-12-16T12:34:08Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2023-05-01T23:42:35Z",
        "body":  "### Background and motivation\n\nThe addition of `StringSyntaxAttribute` (#62505) adds syntax highlighting and more to parameters, fields, and properties which is very helpful already.\r\nA lot of methods also construct strings of a specific syntax and return them, which could benefit from the syntax highlighting and tooling of the `StringSyntaxAttribute`.\n\n### API Proposal\n\nAdd `AttributeTargets.ReturnValue` to the list of targets of the `StringSyntaxAttribute`.\n\n### API Usage\n\n```csharp\r\n[return: StringSyntax(syntax: StringSyntaxAttribute.Xml)]\r\npublic static string BuildTwiml(string name) =\u003e $\"\"\"\r\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n    \u003cResponse\u003e\r\n        \u003cSay\u003eAhoy {name}!\u003c/Say\u003e\r\n    \u003c/Response\u003e\r\n    \"\"\";\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVMuleA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5LArNx",
                                           "createdAt":  "2022-09-26T18:53:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-09-26T18:53:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LA07e",
                                           "createdAt":  "2022-09-26T19:22:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThe addition of `StringSyntaxAttribute` (#62505) adds syntax highlighting and more to parameters, fields, and properties which is very helpful already.\r\nA lot of methods also construct strings of a specific syntax and return them, which could benefit from the syntax highlighting and tooling of the `StringSyntaxAttribute`.\n\n### API Proposal\n\nAdd `AttributeTargets.ReturnValue` to the list of targets of the `StringSyntaxAttribute`.\n\n### API Usage\n\n```csharp\r\n[return: StringSyntax(syntax: StringSyntaxAttribute.Xml)]\r\npublic static string BuildTwiml(string name) =\u003e $\"\"\"\r\n    \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\n    \u003cResponse\u003e\r\n        \u003cSay\u003eAhoy {name}!\u003c/Say\u003e\r\n    \u003c/Response\u003e\r\n    \"\"\";\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eSwimburger\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-26T19:22:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LA4ps",
                                           "createdAt":  "2022-09-26T19:34:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@stephentoub ",
                                           "updatedAt":  "2022-09-26T19:34:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LA5E8",
                                           "createdAt":  "2022-09-26T19:36:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@CyrusNajmabadi, would Roslyn be able to handle this?\r\n\r\n@Swimburger, your example uses interpolated strings.  They already don\u0027t get the syntax highlighting and related features you mention.  Do you have real examples that don\u0027t involve dynamically-generated content?",
                                           "updatedAt":  "2022-09-26T19:36:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LA60X",
                                           "createdAt":  "2022-09-26T19:43:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "Sure. We could handle this. But we still won\u0027t do anything special for interpolated strings as we have no idea how to interpret the content. We also won\u0027t do anything with xml as we lack an xml parser that gives things like positions (afaik)",
                                           "updatedAt":  "2022-09-26T19:43:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LA-Xi",
                                           "createdAt":  "2022-09-26T19:56:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Swimburger",
                                           "body":  "Without string interpolation, it would probably be better to store the string in a const, so I don\u0027t have another use-case.\r\nThe most common scenario would be to do some work, and at the end of the method interpolate strings with the result of the work.\r\nI wouldn\u0027t expect this to work for more complex scenarios.\r\n\r\nThe current implementation already supports string interpolation, at least in the IDE I tried (Rider 2022.3 EAP 1).\r\n\u003cimg width=\"416\" alt=\"Screenshot of C# code. The code passes an interpolated XML string to a method and the string has syntax highlighting for XML.\" src=\"https://user-images.githubusercontent.com/3382717/192367917-cd795662-cf7b-4af9-bd95-1802e37f0f15.png\"\u003e\r\n\r\n",
                                           "updatedAt":  "2022-09-26T19:57:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LA_Vy",
                                           "createdAt":  "2022-09-26T20:00:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "What happens if you have `var name = \"\u003c/Greeting\u003e\";`?\r\n\r\nWe could possibly attempt to support a subset of features here. But we very likely could not effectively do diagnostics. ",
                                           "updatedAt":  "2022-09-26T20:00:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LBDOL",
                                           "createdAt":  "2022-09-26T20:15:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Swimburger",
                                           "body":  "When I do that, the program works without errors or warnings.\r\n\r\nWhen I intentionally malform the XML, it also doesn\u0027t complain about it in combination with string interpolation.\r\nThe syntax highlighting works which is a big benefit, but the warnings/errors don\u0027t.\r\n\r\n\u003cimg width=\"480\" alt=\"Screen Shot 2022-09-26 at 4 14 11 PM\" src=\"https://user-images.githubusercontent.com/3382717/192371163-da5af83c-24f8-48a2-a8a5-5b417b56c30e.png\"\u003e\r\n\r\nWith the interpolation, there\u0027s still warnings for empty XML nodes, and code completion.\r\n",
                                           "updatedAt":  "2022-09-26T20:15:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LBQ2t",
                                           "createdAt":  "2022-09-26T20:55:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCs2uVA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Swimburger",
                                                                               "createdAt":  "2022-09-26T21:14:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2022-09-27T05:45:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "\u003e When I intentionally malform the XML, it also doesn\u0027t complain about it in combination with string interpolation.\r\n\r\nYeah, this makes it just a heuristic.  We could consider that, but it\u0027s feels like it\u0027s full of caveats and can easily make people think code is fine when it\u0027s really not. ",
                                           "updatedAt":  "2022-09-26T20:55:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LBV9H",
                                           "createdAt":  "2022-09-26T21:17:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Swimburger",
                                           "body":  "That makes sense, although the same would apply to the current attribute targets, no?\r\n\r\n",
                                           "updatedAt":  "2022-09-26T21:17:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LBu_l",
                                           "createdAt":  "2022-09-26T23:04:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "This is solely about interpolated strings. Normal non-interpolated strings are fine and can be correctly analyzed in all contexts. ",
                                           "updatedAt":  "2022-09-26T23:04:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LDCsq",
                                           "createdAt":  "2022-09-27T07:19:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCs5-Xw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Swimburger",
                                                                               "createdAt":  "2022-09-27T19:01:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "svick",
                                           "body":  "Attributes generally tell something about a method to something outside that method. But here, the attribute would be only used inside the method itself. Because of that, I think the `// lang=xml` syntax, which works today, would be a better fit here.",
                                           "updatedAt":  "2022-09-27T07:19:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Qymk5",
                                           "createdAt":  "2022-12-16T19:03:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e But here, the attribute would be only used inside the method itself.\r\n\r\n@svick , wouldn\u0027t it be possible for the IDE itself to be able to leverage the attribute to display the text in a formatted/syntax-highlighted manner when hovering over a variable for example when in debug mode?",
                                           "updatedAt":  "2022-12-16T19:03:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UrQ6v",
                                           "createdAt":  "2023-02-07T11:32:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arakis",
                                           "body":  "\u003e Because of that, I think the `// lang=xml` syntax, which works today, would be a better fit here.\r\n\r\nCan you explain more about that `// lang=xml` feature please? I never heard about it. Where to apply that comment?\r\n\r\nEdit: It seems to be a JetBrains Rider only feature: https://www.jetbrains.com/help/rider/Language_Injections.html#use-comments\r\nAny plans to integrate that in VS also?",
                                           "updatedAt":  "2023-02-07T11:47:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Urkbv",
                                           "createdAt":  "2023-02-07T12:39:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODH7oKw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "gao-artur",
                                                                               "createdAt":  "2023-09-27T10:09:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e Can you explain more about that `// lang=xml` feature please? I never heard about it. Where to apply that comment?\r\n\r\n@arakis  It is a comment that allows you to tell the format for a specific `string` argument/variable. Basically, an alternative to `[StringSyntaxAttribute]`.\r\n\r\n![image](https://user-images.githubusercontent.com/461579/217247299-6aaaedc2-fa08-4258-ace4-35702851386c.png)\r\n\r\n- https://github.com/dotnet/runtime/issues/62505\r\n\r\n\u003e Edit: It seems to be a JetBrains Rider only feature... Any plans to integrate that in VS also?\r\n\r\nIt is not Rider-specific. It is already part of VS.",
                                           "updatedAt":  "2023-02-07T12:39:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UtSRI",
                                           "createdAt":  "2023-02-07T17:26:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "arakis",
                                           "body":  "Amazing, i didn\u0027t know that. I never read about that little detail, is there any official documentation (except #62505).\r\n\r\nBy the way, it seems not to work with xml:\r\n\r\n![image](https://user-images.githubusercontent.com/1831942/217317153-3dd8bfa8-b015-4e73-a6fb-4456da8affc9.png)\r\n ",
                                           "updatedAt":  "2023-02-07T17:26:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UuCXJ",
                                           "createdAt":  "2023-02-07T19:50:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "no xml support has been added.  ",
                                           "updatedAt":  "2023-02-07T19:50:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Uy6V4",
                                           "createdAt":  "2023-02-08T13:52:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e ...is there any official documentation (except #62505).\r\n\r\nI\u0027m actually interested in the answer to this myself. When I was searching to reply to your post @arakis I also was not able to find anything on MSDN at all. Then only thing I found was that git item. ",
                                           "updatedAt":  "2023-02-08T13:52:18Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "[API Proposal]: Allow StringSyntaxAttribute to be applied to return values.",
        "labels":  [
                       "enhancement",
                       "api-suggestion",
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78125",
        "createdAt":  "2022-11-09T18:32:06Z",
        "number":  78125,
        "author":  "johncrim",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2Q0Yw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "KennethHoff",
                                            "createdAt":  "2024-03-03T09:49:41Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-15T18:25:44Z",
        "body":  "### Background and motivation\r\n\r\nAn aspect of `DiagnosticListener` that has puzzled me is the fact that all `DiagnosticListener` instances are added to a global (`DiagnosticListener.AllListeners`), which makes any use or validation of diagnostics in tests difficult / or it requires that all tests be run serially.\r\n\r\nTo clarify: If more than one test is run at a time, and some code in the test creates a `DiagnosticListener`, the events sent to that listener can come from any test, and the events received by a test can be triggered by an operation in any other test that is running.\r\n\r\nI\u0027m sure this is a well-known limitation, but I would appreciate feedback on whether this is something that the dotnet team is interested in fixing; or if it\u0027s never going to be fixed and I should just work around it; or if I should prefer a newer API (eg OpenTelemetry) for exposing non-message (`ILogger`) diagnostics.\r\n\r\nI\u0027m most interested in being able to scope listeners and events to a DI Container; so the listeners could be per test or per fixture.\r\n\r\n### API Proposal\r\n\r\nThe leading requirement is obviously backward compatibility; so by default `DiagnosticListener.AllListeners` should be a global and behave the same as before.\r\n\r\nA class like this would need to be added:\r\n```cs\r\npublic sealed class DiagnosticListenerCollection \r\n{\r\n    public void Add(DiagnosticListener listener);\r\n    // Other ICollection methods?\r\n}\r\n```\r\n\r\nAnd a constructor overload would need to be added to `DiagnosticListener` to store the `DiagnosticListener` in the `DiagnosticListenerCollection` instead of the global collection:\r\n\r\n```cs\r\npublic partial class DiagnosticListener \r\n{\r\n\r\n    public DiagnosticListener(string name, DiagnosticListenerCollection? listenerCollection)\r\n    {\r\n        Name = name;\r\n        if (listenerCollection != null)\r\n        {\r\n            listenerCollection.Add(this);\r\n        }\r\n        else \r\n        {\r\n            // Store listener in global list, same as current impl\r\n        }\r\n    }\r\n\r\n...\r\n```\r\n\r\nAnd then different libraries which provide one or more `DiagnosticListener`s would (ideally) add support for using a `DiagnosticListenerCollection`, if present, to put the listener into, like below.\r\n\r\n\r\n### API Usage\r\n\r\n```cs\r\n\r\nserviceCollection.AddSingleton\u003cDiagnosticListenerCollection\u003e();\r\nserviceCollection.AddSingleton\u003cHttpClientFactory\u003e();\r\nserviceCollection.AddTransient\u003cHttpClient\u003e((HttpClientFactory factory) =\u003e factory.CreateHttpClient());\r\n\r\n...\r\n\r\npublic class HttpClientFactory : IDisposable\r\n{\r\n    private readonly DiagnosticSource _httpLogger;\r\n\r\n    public HttpClientFactory(DiagnosticListenerCollection? diagnosticListeners) {\r\n        // Handle scoped or global DiagnosticListenerCollection\r\n        _httpLogger = new DiagnosticListener(\"System.Net.Http\", diagnosticListeners);\r\n    }\r\n\r\n    public HttpClient CreateHttpClient() =\u003e new HttpClient(_httpLogger);\r\n\r\n    public void Dispose() =\u003e _httpLogger.Dispose();\r\n}\r\n\r\npublic class HttpClient {\r\n\r\n    private readonly DiagnosticSource _httpLogger;\r\n\r\n    internal HttpClient(DiagnosticSource httpLogger)\r\n    {\r\n        _httpLogger; = httpLogger;\r\n    }\r\n\r\n    public byte[] SendWebRequest(string url)\r\n    {\r\n        if (_httpLogger.IsEnabled(\"RequestStart\"))\r\n        {\r\n            _httpLogger.Write(\"RequestStart\", new { Url = url });\r\n        }\r\n        //Pretend this sends an HTTP request to the url and gets back a reply.\r\n        byte[] reply = new byte[] { };\r\n        return reply;\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nAn alternative would be to try to split or filter the diagnostic events when receiving them based on other information, eg [HttpContextAccessor](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.httpcontextaccessor?view=aspnetcore-6.0). In order to filter events that only apply to a test, info would be have to placed into the `HttpContext` that can be used to identify the test.\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTiUF4w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5OCNdn",
                                           "createdAt":  "2022-11-09T18:39:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "johncrim",
                                           "body":  "Oops, looks like the \"area-System.Net.Http\" tag was mistakenly added based on my example. This should be label: \"area-System.Diagnostics\" or similar.",
                                           "updatedAt":  "2022-11-09T18:39:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OCZkK",
                                           "createdAt":  "2022-11-09T19:25:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nAn aspect of `DiagnosticListener` that has puzzled me is the fact that all `DiagnosticListener` instances are added to a global (`DiagnosticListener.AllListeners`), which makes any use or validation of diagnostics in tests difficult / or it requires that all tests be run serially.\r\n\r\nTo clarify: If more than one test is run at a time, and some code in the test creates a `DiagnosticListener`, the events sent to that listener can come from any test, and the events received by a test can be triggered by an operation in any other test that is running.\r\n\r\nI\u0027m sure this is a well-known limitation, but I would appreciate feedback on whether this is something that the dotnet team is interested in fixing; or if it\u0027s never going to be fixed and I should just work around it; or if I should prefer a newer API (eg OpenTelemetry) for exposing non-message (`ILogger`) diagnostics.\r\n\r\nI\u0027m most interested in being able to scope listeners and events to a DI Container; so the listeners could be per test or per fixture.\n\n### API Proposal\n\nThe leading requirement is obviously backward compatibility; so by default `DiagnosticListener.AllListeners` should be a global and behave the same as before.\r\n\r\nA class like this would need to be added:\r\n```cs\r\npublic sealed class DiagnosticListenerCollection \r\n{\r\n    public void Add(DiagnosticListener listener);\r\n    // Other ICollection methods?\r\n}\r\n```\r\n\r\nAnd a constructor overload would need to be added to `DiagnosticListener` to store the `DiagnosticListener` in the `DiagnosticListenerCollection` instead of the global collection:\r\n\r\n```cs\r\npublic partial class DiagnosticListener \r\n{\r\n\r\n    public DiagnosticListener(string name, DiagnosticListenerCollection listenerCollection)\r\n    {\r\n        Name = name;\r\n        listenerCollection.Add(this);\r\n    }\r\n\r\n...\r\n```\r\n\r\nAnd then different libraries which provide one or more `DiagnosticListener`s would (ideally) add support for using a `DiagnosticListenerCollection`, if present, to put the listener into, like below.\r\n\n\n### API Usage\n\n```cs\r\n\r\nserviceCollection.AddSingleton\u003cDiagnosticListenerCollection\u003e();\r\nserviceCollection.AddSingleton\u003cHttpClientFactory\u003e();\r\nserviceCollection.AddTransient\u003cHttpClient\u003e((HttpClientFactory factory) =\u003e factory.CreateHttpClient());\r\n\r\n...\r\n\r\npublic class HttpClientFactory : IDisposable\r\n{\r\n    private readonly DiagnosticSource _httpLogger;\r\n\r\n    public HttpClientFactory(DiagnosticListenerCollection? diagnosticListeners) {\r\n        // Handle scoped or global DiagnosticListenerCollection\r\n        _httpLogger = diagnosticListeners != null ? new DiagnosticListener(\"System.Net.Http\", diagnosticListeners)\r\n                                  : new DiagnosticListener(\"System.Net.Http\");\r\n    }\r\n\r\n    public HttpClient CreateHttpClient() =\u003e new HttpClient(_httpLogger);\r\n\r\n    public void Dispose() =\u003e _httpLogger.Dispose();\r\n}\r\n\r\npublic class HttpClient {\r\n\r\n    private readonly DiagnosticSource _httpLogger;\r\n\r\n    internal HttpClient(DiagnosticSource httpLogger)\r\n    {\r\n        _httpLogger; = httpLogger;\r\n    }\r\n\r\n    public byte[] SendWebRequest(string url)\r\n    {\r\n        if (_httpLogger.IsEnabled(\"RequestStart\"))\r\n        {\r\n            _httpLogger.Write(\"RequestStart\", new { Url = url });\r\n        }\r\n        //Pretend this sends an HTTP request to the url and gets back a reply.\r\n        byte[] reply = new byte[] { };\r\n        return reply;\r\n    }\r\n}\r\n```\r\n\n\n### Alternative Designs\n\nAn alternative would be to try to split or filter the diagnostic events when receiving them based on other information, eg [HttpContextAccessor](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.httpcontextaccessor?view=aspnetcore-6.0). In order to filter events that only apply to a test, info would be have to placed into the `HttpContext` that can be used to identify the test.\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejohncrim\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net.Http`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-09T19:25:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OCeQd",
                                           "createdAt":  "2022-11-09T19:44:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "johncrim",
                                           "body":  "@area-System.Diagnostics @tommcdon ",
                                           "updatedAt":  "2022-11-09T19:44:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OCw4n",
                                           "createdAt":  "2022-11-09T20:37:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@noahfalk ",
                                           "updatedAt":  "2022-11-09T20:37:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OFBe2",
                                           "createdAt":  "2022-11-10T08:31:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvaI9A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "johncrim",
                                                                               "createdAt":  "2022-11-10T22:54:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "Hi @johncrim, thanks for a nice write up of the issue!\r\n\r\n\u003e I\u0027m sure this is a well-known limitation, but I would appreciate feedback on whether this is something that the dotnet team is interested in fixing; or if it\u0027s never going to be fixed and I should just work around it; or if I should prefer a newer API (eg OpenTelemetry) for exposing non-message (ILogger) diagnostics.\r\n\r\nYeah this one is well-known and there is a similar global listener pattern at play for EventListener, ActivityListener, TraceListener, and MeterListener. Among .NET APIs ILogger is the odd one out in that regard :) Not sure if you find this history interesting, but beneath the covers this difference stems from ILogger being designed by the ASP.NET team which used to be in a separate part of Microsoft and they had different design principles in mind relative to many other .NET APIs. However lets dive into your questions!\r\n\r\n\u003e is something that the dotnet team is interested in fixing\r\n\r\nThere are probably two different levels of \"fixing\" to distinguish:\r\n1. DiagnosticListener exposes APIs that allows .NET developers who create their own instances of it to put those instances in a scoped container.\r\n2. .NET in-box components that create their own instance of DiagnosticListener would add a container to their constructor parameters and use that container when it was provided. Your example of changing HttpClientFactory and HttpClient would fall in this category.\r\n\r\nI think the short answer is that nothing seems inherently problematic with either of these solutions, but so far I haven\u0027t seen much demand for it from .NET developers. If we expected this would impact a lot of developers the priority would rise, but my understanding for now is that DiagnosticListener is somewhat obscure among our users and the impact would be low. Its possible the priority would rise as we learned more in the future, but I wouldn\u0027t feel right suggesting that you wait for a .NET in-box solution at this point.\r\n\r\n\u003e or if it\u0027s never going to be fixed and I should just work around it\r\n\r\nFor now I\u0027d guess even if does get updated in the future, it probably isn\u0027t certain enough that you would want to wait for it. \r\n\r\n\u003e if I should prefer a newer API\r\n\r\nAll of the diagnostic APIs new or old that I can think of (other than ILogger) tend to follow this global listener list pattern. If your data isn\u0027t suitable for ILogger than I don\u0027t expect you will dodge the issue regardless of what other API you pick. That said, knock on wood, this probably isn\u0027t too hard to work around. If you needed a solution for case 1 where you are in control of creating the Listener something like this might do it:\r\n\r\n```C#\r\nclass TaggedDiagnosticListener : DiagnosticListener\r\n{\r\n    object _tag;\r\n    public TaggedDiagnosticListener(string name, object tag) : base(name) { _tag = tag; }\r\n\r\n    public IObservable\u003cDiagnosticListener\u003e GetTaggedListeners(object tag) =\u003e new TaggedDiagnosticListenerObservable(tag);\r\n\r\n    class TaggedDiagnosticListenerObservable : IObservable\u003cDiagnosticListener\u003e\r\n    {\r\n        object _tag;\r\n        public TaggedDiagnosticListenerObservable(object tag) { _tag = tag; }\r\n        public IDisposable Subscribe(IObserver\u003cDiagnosticListener\u003e observer)\r\n        {\r\n            return DiagnosticListener.AllListeners.Subscribe(new FilteredObserver(observer, _tag));\r\n        }\r\n    }\r\n\r\n    class FilteredObserver : IObserver\u003cDiagnosticListener\u003e\r\n    {\r\n        IObserver\u003cDiagnosticListener\u003e _observer;\r\n        object _tag;\r\n        public FilteredObserver(IObserver\u003cDiagnosticListener\u003e inner, object tag) { _observer = inner; _tag = tag; }\r\n\r\n        public void OnCompleted() =\u003e _observer.OnCompleted();\r\n        public void OnError(Exception error) =\u003e _observer.OnError(error);\r\n        public void OnNext(DiagnosticListener value)\r\n        {\r\n            if(value is TaggedDiagnosticListener tagged \u0026\u0026 tagged._tag == _tag)\r\n            {\r\n                _observer.OnNext(value);\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nFor the API above you could treat that tag object like a collection though it could be anything as long as it is unique to your DI container and easily accessible. I didn\u0027t test that code above in any way so apologies in advance if it has some bugs.\r\n\r\n\r\nFor case 2 where you want different components in .NET to become DI or multi-tenant aware, that is probably more a case by case basis. The most broadly applicable solution I am aware of for that is to create an AsyncLocal and assign it some scope object prior to calling in to whatever .NET code, then check the value of that AsyncLocal in any callbacks. This allows you to flow a scope through the call and filter on it in the callback. \r\n\r\nOne last bit of context that maybe is useful - we have gotten some requests similar to this for MeterListener and EventListener. Those types I expect have more usage so the priority to address it is a bit higher and we are likely to look into further for .NET 8. If we wound up solving those cases that might create a precedent for how we add DI-awareness to these diagnostic APIs that aren\u0027t currently DI-aware, and then if it was simple enough maybe we would apply that same technique to all the other APIs such as DiagosticListener. I don\u0027t want to make any promises here, but just mentioning it so you aren\u0027t surprised if it does show up later.\r\n\r\nHope this all helps!",
                                           "updatedAt":  "2022-11-10T08:31:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OFqhv",
                                           "createdAt":  "2022-11-10T10:57:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nAn aspect of `DiagnosticListener` that has puzzled me is the fact that all `DiagnosticListener` instances are added to a global (`DiagnosticListener.AllListeners`), which makes any use or validation of diagnostics in tests difficult / or it requires that all tests be run serially.\r\n\r\nTo clarify: If more than one test is run at a time, and some code in the test creates a `DiagnosticListener`, the events sent to that listener can come from any test, and the events received by a test can be triggered by an operation in any other test that is running.\r\n\r\nI\u0027m sure this is a well-known limitation, but I would appreciate feedback on whether this is something that the dotnet team is interested in fixing; or if it\u0027s never going to be fixed and I should just work around it; or if I should prefer a newer API (eg OpenTelemetry) for exposing non-message (`ILogger`) diagnostics.\r\n\r\nI\u0027m most interested in being able to scope listeners and events to a DI Container; so the listeners could be per test or per fixture.\r\n\r\n### API Proposal\r\n\r\nThe leading requirement is obviously backward compatibility; so by default `DiagnosticListener.AllListeners` should be a global and behave the same as before.\r\n\r\nA class like this would need to be added:\r\n```cs\r\npublic sealed class DiagnosticListenerCollection \r\n{\r\n    public void Add(DiagnosticListener listener);\r\n    // Other ICollection methods?\r\n}\r\n```\r\n\r\nAnd a constructor overload would need to be added to `DiagnosticListener` to store the `DiagnosticListener` in the `DiagnosticListenerCollection` instead of the global collection:\r\n\r\n```cs\r\npublic partial class DiagnosticListener \r\n{\r\n\r\n    public DiagnosticListener(string name, DiagnosticListenerCollection? listenerCollection)\r\n    {\r\n        Name = name;\r\n        if (listenerCollection != null)\r\n        {\r\n            listenerCollection.Add(this);\r\n        }\r\n        else \r\n        {\r\n            // Store listener in global list, same as current impl\r\n        }\r\n    }\r\n\r\n...\r\n```\r\n\r\nAnd then different libraries which provide one or more `DiagnosticListener`s would (ideally) add support for using a `DiagnosticListenerCollection`, if present, to put the listener into, like below.\r\n\r\n\r\n### API Usage\r\n\r\n```cs\r\n\r\nserviceCollection.AddSingleton\u003cDiagnosticListenerCollection\u003e();\r\nserviceCollection.AddSingleton\u003cHttpClientFactory\u003e();\r\nserviceCollection.AddTransient\u003cHttpClient\u003e((HttpClientFactory factory) =\u003e factory.CreateHttpClient());\r\n\r\n...\r\n\r\npublic class HttpClientFactory : IDisposable\r\n{\r\n    private readonly DiagnosticSource _httpLogger;\r\n\r\n    public HttpClientFactory(DiagnosticListenerCollection? diagnosticListeners) {\r\n        // Handle scoped or global DiagnosticListenerCollection\r\n        _httpLogger = new DiagnosticListener(\"System.Net.Http\", diagnosticListeners);\r\n    }\r\n\r\n    public HttpClient CreateHttpClient() =\u003e new HttpClient(_httpLogger);\r\n\r\n    public void Dispose() =\u003e _httpLogger.Dispose();\r\n}\r\n\r\npublic class HttpClient {\r\n\r\n    private readonly DiagnosticSource _httpLogger;\r\n\r\n    internal HttpClient(DiagnosticSource httpLogger)\r\n    {\r\n        _httpLogger; = httpLogger;\r\n    }\r\n\r\n    public byte[] SendWebRequest(string url)\r\n    {\r\n        if (_httpLogger.IsEnabled(\"RequestStart\"))\r\n        {\r\n            _httpLogger.Write(\"RequestStart\", new { Url = url });\r\n        }\r\n        //Pretend this sends an HTTP request to the url and gets back a reply.\r\n        byte[] reply = new byte[] { };\r\n        return reply;\r\n    }\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nAn alternative would be to try to split or filter the diagnostic events when receiving them based on other information, eg [HttpContextAccessor](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.httpcontextaccessor?view=aspnetcore-6.0). In order to filter events that only apply to a test, info would be have to placed into the `HttpContext` that can be used to identify the test.\r\n\r\n### Risks\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejohncrim\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-10T10:57:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OGtx3",
                                           "createdAt":  "2022-11-10T14:34:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvaNTw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "johncrim",
                                                                               "createdAt":  "2022-11-10T23:27:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "If you are looking for this sort of functionality specifically when working with HttpClient, I would recommend you take a look at https://learn.microsoft.com/dotnet/fundamentals/networking/networking-telemetry. The majority of telemetry in the networking stack is done via `EventSource`, and that is the main approach for it that we will be improving in the future.",
                                           "updatedAt":  "2022-11-10T14:34:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OJNrO",
                                           "createdAt":  "2022-11-10T23:27:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "johncrim",
                                           "body":  "@noahfalk - thank you for the excellent reply! I have reported many issues on various Microsoft and .NET projects, and your reply above is the clearest and most useful I have received. The `TaggedDiagnosticListener` is a great suggestion, thank you for writing it out.\r\n\r\nI assume it\u0027s useful to keep this issue open to collect votes and similar, but your response was both complete and useful - my immediate questions are addressed.\r\n\r\nI haven\u0027t studied up on how the .NET runtime and/or App Insights is changing things to be OpenTelemetry compliant, but [if a new diagnostic collection API is added](https://m.xkcd.com/927/) I would think this type of isolation would be desirable (especially since App Domains are no longer a thing). \r\n\r\n",
                                           "updatedAt":  "2022-11-10T23:48:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OJQXj",
                                           "createdAt":  "2022-11-10T23:46:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "johncrim",
                                           "body":  "I wasn\u0027t asking specifically about HttpClient (that was just an obvious example), but thank you @MihaZupan - that is useful to know. It looks like `EventSource` has the same limitation as `DiagnosticListener`, in that all sources are added to a process global. It might be possible to use the same approach (Noah\u0027s `TaggedDiagnosticListener`) for both, for diagnostics on home-grown libraries.\r\n\r\nI dug in a little bit just now and it looks like HttpClient sends different but potentially overlapping data to both `EventSource` and `DiagnosticSource`. The app insights library is using the `DiagnosticListener` API for most of the HttpClient info that it collects. Part of the reason is that app insights needs to add HTTP headers for outgoing requests, and that\u0027s only possible via `DiagnosticListener`. \r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2022-11-10T23:46:02Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[API Proposal]: DiagnosticListener support for testing",
        "labels":  [
                       "enhancement",
                       "api-suggestion",
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79372",
        "createdAt":  "2022-12-08T01:02:53Z",
        "number":  79372,
        "author":  "samsp-msft",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-07T21:08:37Z",
        "body":  "*If a tree falls in a forest and nobody is listening, does it make a sound?*\r\n\r\nIf you need to upfront register your ears to listen to the sound of Tree.Falling then that question becomes more complicated. \r\n\r\ndotnet-counters has a `List` mode which appears to be a static list, a la help. This is better than nothing, but it doesn\u0027t help much as I don\u0027t think it has been updated since 3.1. For example, we added a bunch of counters for networking, that I don\u0027t believe are listed.\r\n\r\nThere should be a mode of dotnet-counters that will adapt itself and listen to any counters that are registered as the application is run. For example, something like:\r\n\r\n``` console\r\ndotnet-counters monitor -process-id 12345 -all-counters\r\n```\r\n\r\nIs this the most performance efficient way of running the application - no - but it\u0027ll make it much easier for developers/SRE to see what counters are available, and for when they are writing their own counters to be able to diagnose if they have made typos etc.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcCpNcQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5P-p_j",
                                           "createdAt":  "2022-12-08T01:02:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-12-08T01:02:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5P-rjZ",
                                           "createdAt":  "2022-12-08T01:10:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "The list of networking counters is kept up to date: https://github.com/dotnet/diagnostics/blob/433fd6a073fe29895c01ed1a70d5cba568a0e070/src/Tools/dotnet-counters/KnownData.cs#L91-L161\r\n(that said if the tool could do it automagically I wouldn\u0027t complain 🙂)",
                                           "updatedAt":  "2022-12-08T01:12:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QAwcl",
                                           "createdAt":  "2022-12-08T09:41:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pinkfloydx33",
                                           "body":  "It says the maxVersion/runtimeVersion is 6.0 and only includes 7.0 as a supported version in a handful of places. Perhaps that\u0027s why? ",
                                           "updatedAt":  "2022-12-08T09:41:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QKVzq",
                                           "createdAt":  "2022-12-09T23:34:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "samsp-msft",
                                           "body":  "The latest version of dotnet-counters seems to be 6.0.351802, which could well be before @MihaZupan\u0027s changes were included. \r\n\r\nHowever that still doesn\u0027t solve the problem that counters can be added by any code including the app and 3rd party libraries, and so having it be able to enumerate all the counters actually be used would be very useful.",
                                           "updatedAt":  "2022-12-09T23:34:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UCU_S",
                                           "createdAt":  "2023-01-31T07:33:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC1KBmg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2023-01-31T17:24:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "samsp-msft",
                                           "body":  "I ended up creating a utility to enumerate the counters and events exposed in a process\r\n\r\nhttps://gist.github.com/samsp-msft/cb4ba1e5bb4de0c6bb3aae5ecbeac162\r\n\r\nTo use:\r\n``` c#\r\nvar enumerateEvents = new EventEnumerator();\r\napp.MapGet(\"/Events\", () =\u003e enumerateEvents.DumpEvents());\r\n```",
                                           "updatedAt":  "2023-01-31T07:33:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wKk1x",
                                           "createdAt":  "2024-01-08T21:06:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n*If a tree falls in a forest and nobody is listening, does it make a sound?*\r\n\r\nIf you need to upfront register your ears to listen to the sound of Tree.Falling then that question becomes more complicated. \r\n\r\ndotnet-counters has a `List` mode which appears to be a static list, a la help. This is better than nothing, but it doesn\u0027t help much as I don\u0027t think it has been updated since 3.1. For example, we added a bunch of counters for networking, that I don\u0027t believe are listed.\r\n\r\nThere should be a mode of dotnet-counters that will adapt itself and listen to any counters that are registered as the application is run. For example, something like:\r\n\r\n``` console\r\ndotnet-counters monitor -process-id 12345 -all-counters\r\n```\r\n\r\nIs this the most performance efficient way of running the application - no - but it\u0027ll make it much easier for developers/SRE to see what counters are available, and for when they are writing their own counters to be able to diagnose if they have made typos etc.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esamsp-msft\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003enoahfalk, tommcdon\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`enhancement`, `area-System.Diagnostics`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-08T21:06:16Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "How do I discover what counters are available for dotnet-counters?",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79463",
        "createdAt":  "2022-12-09T18:14:49Z",
        "number":  79463,
        "author":  "jhudsoncedaron",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-15T18:24:48Z",
        "body":  "### Background and motivation\n\nEnable applications to provide self diagnostics:\r\n\r\nThis has come up a few times where we\u0027ve had a runaway thread in production (sometimes our hosted environment, sometimes the customer\u0027s environment). There doesn\u0027t be a better way to get the running stacks than attaching a debugger, taking a dump, and walking a dump. We did indeed look into doing exactly that but are unhappy with the half a gigabyte of temp space this allocates and the performance of the operation (atm that\u0027s secondary but if this becomes a standard debugging technique it won\u0027t be.... Think about it: if there\u0027s a diagnostics button support is going to push that button a lot whether or not it makes sense to push it).\r\n\r\nI looked into how to do it; found StackFrameHelper and discovered that it takes a Thread in its constructor. This looks ideal, so I tried it and found that it asserts that it is passed current thread or a thread that isn\u0027t running. The comments suggest that a suspended thread should be usable but the actual code at the point of assertion doesn\u0027t check for a suspended thread.\r\n\r\nNow at this point somebody\u0027s going to jump in and say that SuspendThread was banished for a reason and they\u0027d be right. I definitely don\u0027t want a SuspendThread as it was either. However consider this: the GC is able to suspend a thread and it doesn\u0027t cause the issues that SuspendThread normally causes. I ran out of puff attempting to determine how this works however we know the GC isn\u0027t troubled by threads currently being in native code when it walks their stacks, nor is it troubled by deadlocks when it suspends them for full mark/sweep GC. Stack walk itself is in native code and would not be troubled by a managed-suspend so we should be able to do this.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics;\r\n\r\npublic partial class StackTrace\r\n{\r\n    public StackTrace(System.Threading.Thread thread, int numFramesToSkip = 0);\r\n}\r\n```\r\n\n\n### API Usage\n\n````\r\n    IActionResult DebugGetWokerStacks() =\u003e\r\n        Content(string.Join(\"\\r\\n\", w.Name + \": \" + string.Join(\"\\r\\n\", WorkerThreads.Select((w) =\u003e new StackTrace(w).GetStackFrames()));\r\n}\r\n````\n\n### Alternative Designs\n\nI wouldn\u0027t have bothered with numFramesToSkip except for the source code already has it; all the work goes into unlocking the ability in native code; the argument is already passed to it.\n\n### Risks\n\nUnless I\u0027m very much mistaken there is no risk that comes into play unless somebody actually calls the function. I can see a bad enough bug in the implementation causing sporadic deadlocks, but such a bug would still only be triggered if somebody calls the function.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUEWTQQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5QJTRD",
                                           "createdAt":  "2022-12-09T18:14:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-12-09T18:14:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QJaWZ",
                                           "createdAt":  "2022-12-09T18:43:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nEnable applications to provide self diagnostics:\r\n\r\nThis has come up a few times where we\u0027ve had a runaway thread in production (sometimes our hosted environment, sometimes the customer\u0027s environment). There doesn\u0027t be a better way to get the running stacks than attaching a debugger, taking a dump, and walking a dump. We did indeed look into doing exactly that but are unhappy with the half a gigabyte of temp space this allocates and the performance of the operation (atm that\u0027s secondary but if this becomes a standard debugging technique it won\u0027t be.... Think about it: if there\u0027s a diagnostics button support is going to push that button a lot whether or not it makes sense to push it).\r\n\r\nI looked into how to do it; found StackFrameHelper and discovered that it takes a Thread in its constructor. This looks ideal, so I tried it and found that it asserts that it is passed current thread or a thread that isn\u0027t running. The comments suggest that a suspended thread should be usable but the actual code at the point of assertion doesn\u0027t check for a suspended thread.\r\n\r\nNow at this point somebody\u0027s going to jump in and say that SuspendThread was banished for a reason and they\u0027d be right. I definitely don\u0027t want a SuspendThread as it was either. However consider this: the GC is able to suspend a thread and it doesn\u0027t cause the issues that SuspendThread normally causes. I ran out of puff attempting to determine how this works however we know the GC isn\u0027t troubled by threads currently being in native code when it walks their stacks, nor is it troubled by deadlocks when it suspends them for full mark/sweep GC. Stack walk itself is in native code and would not be troubled by a managed-suspend so we should be able to do this.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics;\r\n\r\npublic partial class StackTrace\r\n{\r\n    public StackTrace(System.Threading.Thread thread, int numFramesToSkip = 0);\r\n}\r\n```\r\n\n\n### API Usage\n\n````\r\n    IActionResult DebugGetWokerStacks() =\u003e\r\n        Content(string.Join(\"\\r\\n\", w.Name + \": \" + string.Join(\"\\r\\n\", WorkerThreads.Select((w) =\u003e new StackTrace(w).GetStackFrames()));\r\n}\r\n````\n\n### Alternative Designs\n\nI wouldn\u0027t have bothered with numFramesToSkip except for the source code already has it; all the work goes into unlocking the ability in native code; the argument is already passed to it.\n\n### Risks\n\nUnless I\u0027m very much mistaken there is no risk that comes into play unless somebody actually calls the function. I can see a bad enough bug in the implementation causing sporadic deadlocks, but such a bug would still only be triggered if somebody calls the function.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejhudsoncedaron\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-09T18:43:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QJ7nE",
                                           "createdAt":  "2022-12-09T21:03:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jander-msft",
                                           "body":  "If you are open to using out-of-process tools rather than requiring an API, you can use:\r\n- [dotnet-stack](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-stack) tool; this runs completely out-of-process and only requires the diagnostic event pipe to be available\r\n- [dotnet-monitor](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-monitor) tool\u0027s [/stack](https://github.com/dotnet/dotnet-monitor/blob/release/6.x/documentation/api/stacks.md) route (currently experimental; this loads a profiler into the process to get the information)",
                                           "updatedAt":  "2022-12-09T21:03:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QJ929",
                                           "createdAt":  "2022-12-09T21:15:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@jander-msft : I\u0027m fine with out of process tools; the problem I ran into was taking the dump of the entire process to do so. It\u0027s quite overweight.",
                                           "updatedAt":  "2022-12-09T21:15:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QJ-0u",
                                           "createdAt":  "2022-12-09T21:20:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jander-msft",
                                           "body":  "Neither of these tools capture a dump of the process. They collect stack information directly from the runtime. However, you won\u0027t get as great of data fidelity as a dump since they only report the stack frames (modules, method names, argument types) for each thread.\r\n\r\nIf you use dotnet-stack and have feedback, feel free to log issues at https://github.com/dotnet/diagnostics/issues\r\nIf you use dotnet-monitor and have feedback, feel free to log issues at https://github.com/dotnet/dotnet-monitor/issues",
                                           "updatedAt":  "2022-12-09T21:20:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QKBfz",
                                           "createdAt":  "2022-12-09T21:36:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@jander-msft : Apparently these don\u0027t exist as libraries. (dotnet tool install isn\u0027t something that can be packaged up.)\r\n\r\nIf they were libraries I\u0027d just do Process.Start(...) to a bundled binary that takes care of the serialization to standard output.",
                                           "updatedAt":  "2022-12-09T21:37:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QKHBI",
                                           "createdAt":  "2022-12-09T22:09:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jander-msft",
                                           "body":  "[dotnet-stack](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-stack) has a direct download option (find \"Direct download\" in the Install section) that allows you to run a self-extracting framework-dependent executable.\r\n\r\nAt this time, dotnet-monitor is not offered as such a package (I\u0027ll look into see how this tool can provide a similar acquisition experience in the future) and requires the .NET SDK to install it. There\u0027s probably a way you can install it on one machine using the .NET SDK, zip up the bits, and unzip it on the target machine, but that\u0027s a bit unnatural to do.",
                                           "updatedAt":  "2022-12-09T22:09:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QKIk9",
                                           "createdAt":  "2022-12-09T22:14:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "\"framework-dependent executable\" Can\u0027t use. :( I\u0027ll gladly withdraw this for a nuget package I can link against though.",
                                           "updatedAt":  "2022-12-09T22:14:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QMqM7",
                                           "createdAt":  "2022-12-11T08:58:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "epeshk",
                                           "body":  "For example, Java has `Thread.getAllStackTraces()`. It is a quite useful API that can save a lot of time when ThreadPool starvation or deadlock issues appear. \r\n\r\nYes, external tools can be used, but these tools must be deployed on the server. And for self-contained apps, not only additional tools, but also an entire runtime. Maybe an option to include `dotnet-stack` to the application bundle (as it done for `createdump` by default) would be useful?\r\n\r\nOr it may be done manually when https://github.com/dotnet/runtime/issues/53834 will be done",
                                           "updatedAt":  "2022-12-11T08:58:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QRZNB",
                                           "createdAt":  "2022-12-12T15:40:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jhudsoncedaron",
                                           "body":  "@epeshk : I have a local solution to #53834 that depends on 1) all exe targets using the exact same runtimeframework version and target RID, 2) all exe targets being built framework independent, and 3) *.deps.json files being generated. I can handle references to different mutually incompatible versions of the same nuget package.",
                                           "updatedAt":  "2022-12-12T15:40:06Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "[API Proposal]: new System.Diagnostics.StackTrace(System.Threading.Thread)",
        "labels":  [
                       "enhancement",
                       "api-suggestion",
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79655",
        "createdAt":  "2022-12-14T16:21:57Z",
        "number":  79655,
        "author":  "NN---",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-15T18:23:49Z",
        "body":  "### Background and motivation\n\nThere is already StringSyntaxAttribute.GuidFormat but there is no syntax for GUID.\r\n\r\na proposal is to add StringSyntaxAttribute.Guid which expects GUID in one of allowed formats which Guid.Parse understands: B, D, X.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Collections.Generic;\r\n\r\npublic class MyFancyCollection\u003cT\u003e : IEnumerable\u003cT\u003e\r\n{\r\n    public void Fancy(T item);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvoid f([StringSyntaxAttribute.Guid)] string guid){}\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nNo risk ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhN7lAw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5QkaDh",
                                           "createdAt":  "2022-12-14T16:22:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-12-14T16:22:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5QlX33",
                                           "createdAt":  "2022-12-14T18:50:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThere is already StringSyntaxAttribute.GuidFormat but there is no syntax for GUID.\r\n\r\na proposal is to add StringSyntaxAttribute.Guid which expects GUID in one of allowed formats which Guid.Parse understands: B, D, X.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Collections.Generic;\r\n\r\npublic class MyFancyCollection\u003cT\u003e : IEnumerable\u003cT\u003e\r\n{\r\n    public void Fancy(T item);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvoid f([StringSyntaxAttribute.Guid)] string guid){}\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nNo risk \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eNN---\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-14T18:50:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SAlpw",
                                           "createdAt":  "2023-01-09T16:13:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@ericstj @karelz ",
                                           "updatedAt":  "2023-01-09T16:13:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SCjD7",
                                           "createdAt":  "2023-01-09T22:11:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "It looks like this is related to https://github.com/dotnet/runtime/issues/62505 and https://github.com/dotnet/runtime/issues/65634\r\n\r\n`GuidFormat` is only for specifying the [format specifiers](https://learn.microsoft.com/en-us/dotnet/api/system.guid.tostring?view=net-7.0) and we don\u0027t have anything that would validate a string for actual GUID syntax.  \r\n\r\n@stephentoub @CyrusNajmabadi it looks like you were involved with this feature during 7.0 - any thoughts on the request?",
                                           "updatedAt":  "2023-01-09T22:11:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SCuoS",
                                           "createdAt":  "2023-01-09T22:53:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I\u0027d be interested in seeing some examples where we expect this would be used, e.g. beyond Guid.Parse and friends, what APIs are taking guids as strings rather than Guids (and why)?  But assuming there\u0027s a reasonable number of them, it\u0027d be reasonable to add this.",
                                           "updatedAt":  "2023-01-09T22:53:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SC2HC",
                                           "createdAt":  "2023-01-09T23:19:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpkxSQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-12T21:35:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "NN---",
                                           "body":  "If it was possible to specify the validation using regular expression and not by only predefined types, this feature would be generic enough to cover almost any need.\n\nE.g.\n`[StringSyntax(@\"\\d{4}-\\d{4}\")] string twoNumbers`",
                                           "updatedAt":  "2023-01-09T23:19:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SDhPD",
                                           "createdAt":  "2023-01-10T02:51:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpkxdg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-12T21:35:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "So, from the roslyn perspective, what we\u0027re working on is making this an extensible system.  For example, the ASP.Net \u0027route syntax\u0027 support is provided through a plugin provided by the asp.net team.  This takes the costs off of us, and allows API owners to determine if they want to invest in this space.\r\n\r\nWe are committed to Regex and Json, but we\u0027re not likely to add more languages ourselves.  In a case like this, we would just expose the same extensibility point and let the Guid owners decide if they wanted to add anything here.",
                                           "updatedAt":  "2023-01-10T02:51:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SEwx3",
                                           "createdAt":  "2023-01-10T09:40:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "\u003e beyond Guid.Parse and friends, what APIs are taking guids as strings rather than Guids (and why)?\r\n\r\n`S.R.IS.GuidAttribute`? Or did you already count that as a \"friend\"?",
                                           "updatedAt":  "2023-01-10T09:40:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SNPUw",
                                           "createdAt":  "2023-01-11T17:13:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Or did you already count that as a \"friend\"?\r\n\r\nI was thinking of it as a \"friend\".  Mainly I\u0027m wondering about use outside of the core libraries.",
                                           "updatedAt":  "2023-01-11T17:13:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hI8Kw",
                                           "createdAt":  "2023-07-10T21:07:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Moving this feature request to .NET 9, feel free to pull back to .NET 8 if we plan on addressing this soon",
                                           "updatedAt":  "2023-07-10T21:07:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wuFp9",
                                           "createdAt":  "2024-01-15T00:24:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Can anyone point to concrete examples where this would be used outside of the core libraries? Thanks. ",
                                           "updatedAt":  "2024-01-15T00:24:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wvmJ7",
                                           "createdAt":  "2024-01-15T08:07:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODT0jqg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stephentoub",
                                                                               "createdAt":  "2024-01-23T23:17:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "NN---",
                                           "body":  "I have a project using string type for GUID. \r\nChanging everything to use type Guid is a big breaking change and there is no built-in way specifying whether I want braces or not when serializing data. ",
                                           "updatedAt":  "2024-01-15T08:07:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57wwoT",
                                           "createdAt":  "2024-04-25T05:18:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KennethHoff",
                                           "body":  "Anywhere GUIDs are used in attributes this would be highly appreciated, which comes up often in Optimizely (EPiServer) CMS.",
                                           "updatedAt":  "2024-04-25T05:18:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Es6K4",
                                           "createdAt":  "2024-07-12T21:16:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODpkyLA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "KennethHoff",
                                                                               "createdAt":  "2024-07-12T21:26:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-12T21:37:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "@CyrusNajmabadi @stephentoub what are your thoughts on supporting a Regex-based syntax representation as proposed [here](https://github.com/dotnet/runtime/issues/79655#issuecomment-1376477634)?\r\n\r\nSupporting open-ended Regexes has its issues, mostly because they could be written in a way that can make them dog-slow. However, I like the fact that it allows people to quickly add support for simple syntaxes with basic validation.",
                                           "updatedAt":  "2024-07-12T21:16:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E3nW7",
                                           "createdAt":  "2024-07-15T18:52:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e what are your thoughts on supporting a Regex-based syntax representation as proposed https://github.com/dotnet/runtime/issues/79655#issuecomment-1376477634?\n\nThere are multiple things that identifying an argument as a particular syntax enables, including colorization (e.g. different parts of a regex being colored differently), coarse valid / not-valid validation (e.g. does this parse or not), more fine-grained validation (e.g. the JSON string is missing a closing brace), IntelliSense menus (e.g. the drop-down you get showing all the different datetime format options), etc.\n\nThe regex you\u0027re citing would be solely about the coarse valid / not-valid validation and none of the other aspects?",
                                           "updatedAt":  "2024-07-15T18:52:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E3pn9",
                                           "createdAt":  "2024-07-15T18:58:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KennethHoff",
                                           "body":  "Roslyn could add something akin to `IStringSyntaxProvider`, but that\u0027s way bigger in scope.",
                                           "updatedAt":  "2024-07-15T18:58:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E3rEu",
                                           "createdAt":  "2024-07-15T19:01:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "I haven\u0027t designed this in detail; it was more of a question whether we want to lower the bar for simple syntaxes using data in the attribute, rather than having to build extensions into analyzers/IDE colorizers that process specific language names.\r\n\r\nI\u0027d imagine if we go down this path, then there are several aspects to coonsider:\r\n\r\n1. Expose a regex for tokenization which could be used for colorization. This would likely require named capture groups to indicate a specific built-in color group (e.g. \"number\", \"whitespace\", \"text\" etc).\r\n\r\n2. Expose a regex for validation. If the regex matches the entire input it\u0027s considered valid, if not a diagnostic is raised. Presumably this regex could be optional and if not provided use the first one to make sure the text is a sequence of tokens.\r\n\r\n3. Instead of an attribute, we could allow some kind of well-known file format (e.g. a TextMate file) that people can add to their project file that the IDE and an analyzer could use.\r\n\r\nI\u0027m not convinced that this is necessary yet. But if there are enough \"small languages\" like GUIDs, then this seems like a better direction than having to decide for each language if we add support for it or leave it to third parties as the barrier of entry for a third party seems fairly high.",
                                           "updatedAt":  "2024-07-15T19:06:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6E3uUD",
                                           "createdAt":  "2024-07-15T19:10:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "@KennethHoff \r\n\r\n\u003e Roslyn could add something akin to `IStringSyntaxProvider`, but that\u0027s way bigger in scope.\r\n\r\nI\u0027m not sure it\u0027s bigger in scope because if we go down the path to allow the user to provide data regardless of mechanism, we\u0027d want Roslyn to light up on this. I suspect this likely would result in an extension point like that, if that doesn\u0027t exist already anyway.\r\n\r\nHowever, from the user\u0027s perspective extending Roslyn (at the compiler level or IDE level) requires much more work.\r\n\r\nSo the question is really:\r\n\r\n1. How many \"small\" languages exist\r\n2. Can they be formalized sufficiently to allow for a data-driven approach\r\n3. How much do we care making this easy",
                                           "updatedAt":  "2024-07-15T19:10:07Z"
                                       }
                                   ],
                         "totalCount":  18
                     },
        "title":  "[API Proposal]: StringSyntaxAttribute.Guid",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80555",
        "createdAt":  "2023-01-12T15:54:26Z",
        "number":  80555,
        "author":  "DamirLisak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6S6UA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aagincic",
                                            "createdAt":  "2023-05-16T08:26:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "iveksp",
                                            "createdAt":  "2023-10-09T15:37:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MarioZitko",
                                            "createdAt":  "2023-10-10T06:15:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DamirLisak",
                                            "createdAt":  "2023-10-11T15:21:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ldfreenet",
                                            "createdAt":  "2024-02-20T14:33:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dhbprog",
                                            "createdAt":  "2024-03-28T13:27:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "timcassell",
                                            "createdAt":  "2024-08-19T06:37:33Z"
                                        }
                                    ],
                          "totalCount":  7
                      },
        "updatedAt":  "2023-10-06T07:47:26Z",
        "body":  "I wan\u0027t to come back to the sentence from  _Originally posted by @leculver in https://github.com/dotnet/runtime/issues/31508#issuecomment-555689331_\r\n\"It\u0027s just on my roadmap.  Feel free to create an issue in the clrmd github repo though if you\u0027d like to track it.\"\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.stacktrace.-ctor?view=net-7.0\r\n\r\nThis feature was automatically closed by the msftbot. Is this feature still planned to be implemented? If not - why?\r\nStack-Tracing of managed threads is not only useful for unresponsive threads, it\u0027s very useful for the diagnostic during runtime.\r\n1.) For example in very multithreaded projects to detect deadlocks and prevent deadlocks by lock leveling (https://learn.microsoft.com/en-us/archive/msdn-magazine/2007/october/net-matters-deadlock-monitor). Only by suspending all relevant threads, dumping the stack trace and resuming them afterwards is it possible to find problems on productive systems.\r\n2.) A another example for diagnosing performance issues when the processing time of a thread is to long because it waits for a lock, that is currently hold by another thread. Another monitoring thread would then temporarily stop the relevant threads and dump the stacks.\r\nI think there are far more examples where suspending and resuming threads is useful. Therefore, I cannot understand why such functionalities that existed in .NET 4 should no longer be available in .net core.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaFD6HA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5SSljb",
                                           "createdAt":  "2023-01-12T15:54:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-01-12T15:54:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SSnCf",
                                           "createdAt":  "2023-01-12T15:58:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamirLisak",
                                           "body":  "\u003e I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).\r\n\r\nLabel is:\r\narea-System.Diagnostics",
                                           "updatedAt":  "2023-01-12T15:58:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SSt6p",
                                           "createdAt":  "2023-01-12T16:10:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI wan\u0027t to come back to the sentence from  _Originally posted by @leculver in https://github.com/dotnet/runtime/issues/31508#issuecomment-555689331_\r\n\"It\u0027s just on my roadmap.  Feel free to create an issue in the clrmd github repo though if you\u0027d like to track it.\"\r\n\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.stacktrace.-ctor?view=net-7.0\r\n\r\nThis feature was automatically closed by the msftbot. Is this feature still planned to be implemented? If not - why?\r\nStack-Tracing of managed threads is not only useful for unresponsive threads, it\u0027s very useful for the diagnostic during runtime.\r\n1.) For example in very multithreaded projects to detect deadlocks and prevent deadlocks by lock leveling (https://learn.microsoft.com/en-us/archive/msdn-magazine/2007/october/net-matters-deadlock-monitor). Only by suspending all relevant threads, dumping the stack trace and resuming them afterwards is it possible to find problems on productive systems.\r\n2.) A another example for diagnosing performance issues when the processing time of a thread is to long because it waits for a lock, that is currently hold by another thread. Another monitoring thread would then temporarily stop the relevant threads and dump the stacks.\r\nI think there are far more examples where suspending and resuming threads is useful. Therefore, I cannot understand why such functionalities that existed in .NET 4 should no longer be available in .net core.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eDamirLisak\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-12T16:10:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SmNcq",
                                           "createdAt":  "2023-01-17T17:07:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@noahfalk ",
                                           "updatedAt":  "2023-01-17T17:07:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SqSdu",
                                           "createdAt":  "2023-01-18T10:22:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODcPtOA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "Peibalam",
                                                                               "createdAt":  "2023-07-11T10:05:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "dhbprog",
                                                                               "createdAt":  "2024-03-28T13:28:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e Originally posted by @leculver in https://github.com/dotnet/runtime/issues/31508#issuecomment-555689331\r\n\"It\u0027s just on my roadmap. Feel free to create an issue in the clrmd github repo though if you\u0027d like to track it.\"\r\nhttps://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.stacktrace.-ctor?view=net-7.0\r\n\u003e This feature was automatically closed by the msftbot. Is this feature still planned to be implemented? If not - why?\r\n\r\nThere may have been some confusion but I believe the \"It\" that Lee Culver was referring to implementing at that point in the discussion was the ability for the CLRMD library to attach to a running process on Linux. I\u0027ll defer to @leculver to understand what the current status of that work is.\r\n\r\nIn terms of StackTrace API that takes a Thread parameter, any attempt to recreate the API would require a new implementation because the underlying runtime code it relied on has undergone some significant changes. The more interest we see from developers to use that API the more priority we would give it, but so far I think requests have been few and far between.\r\n\r\nIn the meantime there are some potential alternatives that might fulfill what you are looking for. The [dotnet-stack](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-stack) tool can produce a textual version of stacktraces for all threads. It is intended for developers that are diagnosing hangs/deadlocks to understand where threads are blocked. If you didn\u0027t want to run a 2nd process there is also the [Microsoft.Diagnostics.NetCore.Client](https://learn.microsoft.com/en-us/dotnet/core/diagnostics/diagnostics-client-library) library which has the underlying APIs you could invoke directly and all the [code to dotnet-stack](https://github.com/dotnet/diagnostics/tree/main/src/Tools/dotnet-stack) is OSS if you want to see how it works. These APIs are a little more involved than a one-liner new StackTrace(...), but they are also considerably more powerful letting you capture complete profiling traces or dumps. For example with a trace you could distinguish whether the non-responsive thread is deadlocked, live locked, or just executing abnormally slowly.\r\nIf you captured dumps instead of profiling traces the [CLRMD library](https://github.com/microsoft/clrmd) Lee was refering to can help programmatically analyze them, or you can load them in a debugger like any other dump.\r\n\r\nSorry I know its not quite what you were hoping for, but hopefully some of the alternatives help. I\u0027m also happy to leave this issue open to allow other .NET devs to +1 their interest in the StackTrace(Thread, ...) APIs.",
                                           "updatedAt":  "2023-01-18T10:22:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oUPoc",
                                           "createdAt":  "2023-10-06T07:47:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DamirLisak",
                                           "body":  "@tommcdon : Thank you for adding to future milestone 🙏!",
                                           "updatedAt":  "2023-10-06T07:47:26Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Obsolete constructor public StackTrace(Thread targetThread, bool needFileInfo)",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80783",
        "createdAt":  "2023-01-18T13:41:21Z",
        "number":  80783,
        "author":  "AloisKraus",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-04T07:12:17Z",
        "body":  "Did you consider ETW to profile some key uses case during regular test execution to have something to analyze later? I know the amount of data can be huge, but this can help a lot to sort out environmental issues much quicker. If data size is an issue you could try to use ETWAnalyzer\r\n\r\nhttps://github.com/Siemens-Healthineers/ETWAnalyzer\r\n\r\nwhich also has some example how you can instrument build and tests.\r\n\r\nSee\r\n https://github.com/Siemens-Healthineers/ETWAnalyzer/blob/main/ETWAnalyzer/Documentation/BuildProfiling.md\r\nfor more information. \r\nThat can lead to interesting findings like: https://github.com/actions/runner/issues/2379 which would be very hard to spot otherwise. \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZMtQLA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5SrVyt",
                                           "createdAt":  "2023-01-18T13:41:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-01-18T13:41:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TRj5K",
                                           "createdAt":  "2023-01-19T15:01:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/runtime-infrastructure\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nDid you consider ETW to profile some key uses case during regular test execution to have something to analyze later? I know the amount of data can be huge, but this can help a lot to sort out environmental issues much quicker. If data size is an issue you could try to use ETWAnalyzer\r\n\r\nhttps://github.com/Siemens-Healthineers/ETWAnalyzer\r\n\r\nwhich also has some example how you can instrument build and tests.\r\n\r\nSee\r\n https://github.com/Siemens-Healthineers/ETWAnalyzer/blob/main/ETWAnalyzer/Documentation/BuildProfiling.md\r\nfor more information. \r\nThat can lead to interesting findings like: https://github.com/actions/runner/issues/2379 which would be very hard to spot otherwise. \r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAloisKraus\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-Infrastructure`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-19T15:01:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kTU9L",
                                           "createdAt":  "2023-08-17T18:44:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nDid you consider ETW to profile some key uses case during regular test execution to have something to analyze later? I know the amount of data can be huge, but this can help a lot to sort out environmental issues much quicker. If data size is an issue you could try to use ETWAnalyzer\r\n\r\nhttps://github.com/Siemens-Healthineers/ETWAnalyzer\r\n\r\nwhich also has some example how you can instrument build and tests.\r\n\r\nSee\r\n https://github.com/Siemens-Healthineers/ETWAnalyzer/blob/main/ETWAnalyzer/Documentation/BuildProfiling.md\r\nfor more information. \r\nThat can lead to interesting findings like: https://github.com/actions/runner/issues/2379 which would be very hard to spot otherwise. \r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eAloisKraus\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Diagnostics`, `area-Infrastructure`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-17T18:44:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kZIoq",
                                           "createdAt":  "2023-08-18T18:49:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Adding @davmason to comment on ETW-based testing",
                                           "updatedAt":  "2023-08-18T18:49:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ksXa2",
                                           "createdAt":  "2023-08-23T06:25:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davmason",
                                           "body":  "Adding @brianrob in case he has any thoughts.\r\n\r\nMy feeling is that ETW CPU sampling is not something we own so having tests specifically for that wouldn\u0027t be a good use of our time and infrastructure. We would only be testing on the specific lab machines we run CI on and would be unlikely to find meaningful issues.",
                                           "updatedAt":  "2023-08-23T06:25:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ktQYl",
                                           "createdAt":  "2023-08-23T09:12:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AloisKraus",
                                           "body":  "@davmason: For micro tests you are right, but for larger tests which test e.g. process startup it could be interesting to see the complete system. If you want to find fluctuations which originate from other processes (e.g. Antivirus) it is helpful to confirm or rule out such issues directly based on the test data. ",
                                           "updatedAt":  "2023-08-23T09:12:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kx6Mb",
                                           "createdAt":  "2023-08-24T00:18:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "brianrob",
                                           "body":  "I think that @AloisKraus is talking more about capturing data for analysis rather than testing the ETW functionality.  It\u0027s an interesting idea.  The concern that I have is that it would require admin elevation, and I\u0027m not sure we have a clean way to do this.",
                                           "updatedAt":  "2023-08-24T00:18:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ky1As",
                                           "createdAt":  "2023-08-24T05:53:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AloisKraus",
                                           "body":  "@brianrob: At least on the Github Builds I have Admin rights. See my build example https://github.com/Siemens-Healthineers/ETWAnalyzer/blob/main/ETWAnalyzer/Documentation/BuildProfiling.md\r\n![image](https://github.com/dotnet/runtime/assets/101576413/7a2e40e1-fd8d-44fb-aacd-be943ab2b305)\r\n\r\nI use it during the ETWAnalyzer builds to profile its own build and test with CPU Sampling/CSWitch, Disk, TCPIP, DNS, .NET Exceptions enabled. Then I get two extracted Json files which I can download later (e.g. https://github.com/Siemens-Healthineers/ETWAnalyzer/actions/runs/5949160940) when the test in the cloud machine has unusual long build/test times or if tests did behave strangely. With the extracted data I can check other processes like AV interference or other strange things. Since I get from ETW also all .NET Exceptions I see also all hidden exceptions during my tests which is very helpful to find test issues. When I want to drill deeper I can enable up to 8kHz Sampling to see practically all methods if I need to spot race conditions which are otherwise hard to see with normal tracing. \r\n\r\nThat gives new insights into your tests like this: https://aloiskraus.wordpress.com/2022/07/25/pdd-profiler-driven-development/\r\nor with some more stacktags for performance tests is here an example\r\nhttps://github.com/Alois-xx/SerializerTests\r\n\r\n",
                                           "updatedAt":  "2023-08-24T05:53:06Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Would for some tests system wide profiling be a good thing? ",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81574",
        "createdAt":  "2023-02-02T23:17:09Z",
        "number":  81574,
        "author":  "samsp-msft",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQugFg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "splitt3r",
                                            "createdAt":  "2025-09-15T20:23:55Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-15T18:23:12Z",
        "body":  "`Meter` and `ActivitySource` have a name that typically needs to be registered with whatever tool is being used to monitor the telemetry. Currently the whole name needs to be registered, which is going to be onerous when it comes to large apps with a number of counters.\r\n\r\nLogs uses a namespace style naming scheme, which enables a simplification of configuration as you can use a shortcut to set a log level for all items under that namespace and its descendants. We should use a similar approach with Meter and ActivitySource, and recommend an `a.b.c` style naming scheme, so that listening tools can use prefix matching to select the namespaces that will be tracked.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcCpEuQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5UT5IG",
                                           "createdAt":  "2023-02-02T23:17:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2023-02-02T23:17:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UT5Kj",
                                           "createdAt":  "2023-02-02T23:17:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "samsp-msft",
                                           "body":  "@noahfalk ",
                                           "updatedAt":  "2023-02-02T23:17:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UT84H",
                                           "createdAt":  "2023-02-02T23:40:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "The \"and other tools\" makes the scope of this issue unclear. As a generalized goal for better usability I have no opposition, but as an issue that tracks a specific set of work that we\u0027d like to mark complete at some point we need to decide which tools are in scope :) How about we use this issue to track dotnet-counters only?\r\n\r\nIn terms of the actual design, the big open question for me is what happens when the wildcard matches too many time series? There are two major limits I am aware of:\r\n- Limits on console UI rendering space - typically would allow 30-100 time series to be in view\r\n- Limits on in-proc memory - MetricsEventSource has default limits at 1000 time series and 100 histograms\r\n\r\ndotnet-counters needs to decide which time series to include within the limits and how do we expect the user to respond if the portion of results returned from the wildcard search isn\u0027t the portion they care about?",
                                           "updatedAt":  "2023-02-02T23:40:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UT-R5",
                                           "createdAt":  "2023-02-02T23:50:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "samsp-msft",
                                           "body":  "My plan is to link in issues for other tools / repos, based on deciding a pattern here.\r\nI don\u0027t know how much of this is documentation and patterns that all related tools need to implement - or base layer functionality as part of the APIs.\r\n",
                                           "updatedAt":  "2023-02-02T23:50:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UWTJ8",
                                           "createdAt":  "2023-02-03T06:39:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "\u003e I don\u0027t know how much of this is documentation and patterns that all related tools need to implement - or base layer functionality as part of the APIs.\r\n\r\nIf we were doing this in dotnet-counters I assume we\u0027d implement it by subscribing to the InstrumentPublishing event on the MetricsEventSource, enumerating all instruments as they were created and determining at the UI layer which of those discovered Meters/Instruments matches the wildcard. If the wildcard matching is only used to print matches we\u0027d print the names and be done. If we are trying to combine wildcard matching with a view that is expected to display live metric values and then as-needed dotnet-counters should update the configuration on the EventPipe session to tell MetricsEventSource to send data for whichever Instruments matched. We also need heuristics to determine which meters get tracked and displayed when the total set of matches exceeds screen space or tracking limits.\r\n\r\nNext we need a 2nd solution to handle EventCounters such as an EventCounter-\u003eMeter automatic bridge, manually creating parallel Meter instrmentation for existing EventCounter instrumentation, building new enumeration capabilities for EventSource and EventCounters from scratch, and/or deciding EventCounters aren\u0027t going to be supported for wildcard matching.\r\n\r\nOn the documentation side currently our docs recommend the assembly name as a hierarchal Meter name. We might want to change that to namespace instead, but its should be fairly usable even as-is.\r\n\r\nIf we are talking about dotnet-monitor or VS the story is probably similar. Anything that bridges EventCounters-\u003eMeters or adds parallel Meter instrumentation in-process could be work shared by all tools. The logic of doing the wildcard matching, deciding which Meters to track, and rendering the data back to UI or network streams probably wouldn\u0027t get shared. dotnet-monitor and VS don\u0027t have the console UI space limitations, but they would still have to contend with MetricsEventSource tracking limits.",
                                           "updatedAt":  "2023-02-03T07:03:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wKkS5",
                                           "createdAt":  "2024-01-08T21:04:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n`Meter` and `ActivitySource` have a name that typically needs to be registered with whatever tool is being used to monitor the telemetry. Currently the whole name needs to be registered, which is going to be onerous when it comes to large apps with a number of counters.\r\n\r\nLogs uses a namespace style naming scheme, which enables a simplification of configuration as you can use a shortcut to set a log level for all items under that namespace and its descendants. We should use a similar approach with Meter and ActivitySource, and recommend an `a.b.c` style naming scheme, so that listening tools can use prefix matching to select the namespaces that will be tracked.\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esamsp-msft\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`enhancement`, `area-System.Diagnostics`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e9.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-08T21:04:31Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Dotnet-counter and other tools for specifying meter and ActivitySource names should support namespace wildcards ",
        "labels":  [
                       "enhancement",
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87069",
        "createdAt":  "2023-06-02T17:42:40Z",
        "number":  87069,
        "author":  "LakshanF",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-21T06:01:30Z",
        "body":  "The 3 runtimes - Mono, `CoreCLR, NativeAOT` - have separate code that should be moved to a shared space:\r\n - `ipc_get_process_id_disambiguation_key`: Currently, very similar code is shared by the three runtimes separately ([mono](https://github.com/dotnet/runtime/blob/main/src/mono/mono/eventpipe/ds-rt-mono.c#L65), [CoreCLR](https://github.com/dotnet/runtime/blob/main/src/coreclr/pal/src/thread/process.cpp#L1607), [NativeAOT](https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/Runtime/eventpipe/ds-rt-aot.cpp#L17)) for ipc_get_process_id_disambiguation_key. We should move the code to the common code so as not to duplicate.\r\n - ep_rt_os_environment_get_utf16\r\n - Emulate PAL like functions for _tcslen (strlen) / _tcsrchr (wcsrchr, strrchr) to make the code easier to read in [ep_rt_aot_entrypoint_assembly_name_get_utf8](https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/Runtime/eventpipe/ep-rt-aot.cpp#L89)\r\n - Consider replacing with a new `PalInterlockedIncrement64, PalInterlockedDecrement64` for the current *Exchange* calls on `ep_rt_aot_atomic_inc_int64_t  and ep_rt_aot_atomic_dec_int64_t` \r\n - EventPipeActivityControlCode enum (ActivityControlCode in `CoreCLR and NativeAOT`)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOv0cluA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5d0xVY",
                                           "createdAt":  "2023-06-02T18:00:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @agocke, @MichalStrehovsky, @jkotas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrently, very similar code is shared by the three runtimes separately ([mono](https://github.com/dotnet/runtime/blob/main/src/mono/mono/eventpipe/ds-rt-mono.c#L65), [CoreCLR](https://github.com/dotnet/runtime/blob/main/src/coreclr/pal/src/thread/process.cpp#L1607), [NativeAOT](https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/Runtime/eventpipe/ds-rt-aot.cpp#L17)) for ipc_get_process_id_disambiguation_key. We should move the code to the common code so as not to duplicate.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eLakshanF\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`EventPipe`, `area-NativeAOT-coreclr`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-02T18:00:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5d1Cbt",
                                           "createdAt":  "2023-06-02T19:03:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "\u003e Currently, very similar code is shared by the three runtimes separately ([mono](https://github.com/dotnet/runtime/blob/main/src/mono/mono/eventpipe/ds-rt-mono.c#L65), [CoreCLR](https://github.com/dotnet/runtime/blob/main/src/coreclr/pal/src/thread/process.cpp#L1607), [NativeAOT](https://github.com/dotnet/runtime/blob/main/src/coreclr/nativeaot/Runtime/eventpipe/ds-rt-aot.cpp#L17)) for ipc_get_process_id_disambiguation_key.\r\n\r\n`ipc_get_process_id_disambiguation_key` is just one of many examples. All methods in the eventpipe OS PAL layer should be in shared file.",
                                           "updatedAt":  "2023-06-02T19:03:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6_RyW4",
                                           "createdAt":  "2025-08-21T06:01:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @dotnet/dotnet-diag\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-21T06:01:30Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Consider consolidating methods in the EventPipe OS PAL in to a shared file",
        "labels":  [
                       "area-System.Diagnostics",
                       "EventPipe"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91191",
        "createdAt":  "2023-08-28T07:34:07Z",
        "number":  91191,
        "author":  "huoyaoyuan",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-15T18:21:48Z",
        "body":  "### Background and motivation\r\n\r\nThere are APIs that accepts `object` and operates with object identity, thus boxed structs will not work.\r\n\r\nExamples including:\r\n- ~~GC.KeepAlive (For keeping the collectible type alive, will `KeepAlive(value.GetType())` be better?)~~\r\n- Monitor.Enter\r\n\r\nArgumentNullException.ThrowIfNull (#85154) is similar, but the motivation is different, and will have different meaning with nullable value type.\r\n\r\nWith such an attribute, we can have one analyzer for all these APIs, without recognizing them one by one, and also works for user code. Can it be reviewed together?\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Diagnostics.CodeAnalysis;\r\n\r\n[AttributeUsage(AttributeTargets.Parameter, Inherited = true)]\r\npublic class ObjectIdentyExpectedAttribute : Attribute\r\n{\r\n}\r\n```\r\nThe analyzer will warn if the declared type of the parameter is value type.\r\n\r\n### API Usage\r\n\r\n```csharp\r\n// Moitor.Enter annotated with ObjectIdentyExpected\r\n\r\nlock (myStruct) // analyzer warns here\r\n{\r\n\r\n}\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nShould it be named as what\u0027s *expected*, or what\u0027s *unexpected*?\r\n\r\nShould it be inherited?\r\n\r\nShould we include a custom diagnostic id for analyzer? Users are unlikely to suppress such warnings though.\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZRWpBQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5lCyVL",
                                           "createdAt":  "2023-08-28T08:04:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODFFqNA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Joe4evr",
                                                                               "createdAt":  "2023-08-28T09:12:01Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Enderlook",
                                                                               "createdAt":  "2023-08-28T11:09:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichalPetryka",
                                                                               "createdAt":  "2023-08-28T20:14:44Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jkoritzinsky",
                                                                               "createdAt":  "2023-08-29T06:55:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "It is valid to pass a struct to `GC.KeepAlive` if you want to keep its object fields alive, and I heard that the JIT optimizes it to not box.",
                                           "updatedAt":  "2023-08-28T08:04:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lDYKw",
                                           "createdAt":  "2023-08-28T09:47:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jakobbotsch",
                                           "body":  "\u003e and I heard that the JIT optimizes it to not box.\r\n\r\nCorrect -- #54412.",
                                           "updatedAt":  "2023-08-28T09:47:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5lFakF",
                                           "createdAt":  "2023-08-28T15:39:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThere are APIs that accepts `object` and operates with object identity, thus boxed structs will not work.\r\n\r\nExamples including:\r\n- GC.KeepAlive (For keeping the collectible type alive, will `KeepAlive(value.GetType())` be better?)\r\n- Monitor.Enter\r\n\r\nArgumentNullException.ThrowIfNull (#85154) is similar, but the motivation is different, and will have different meaning with nullable value type.\r\n\r\nWith such an attribute, we can have one analyzer for all these APIs, without recognizing them one by one, and also works for user code. Can it be reviewed together?\n\n### API Proposal\n\n```csharp\r\nnamespace System.Diagnostics.CodeAnalysis;\r\n\r\n[AttributeUsage(AttributeTargets.Parameter, Inherited = true)]\r\npublic class ObjectIdentyExpectedAttribute : Attribute\r\n{\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\n// Moitor.Enter annotated with ObjectIdentyExpected\r\n\r\nlock (myStruct) // analyzer warns here\r\n{\r\n\r\n}\r\n```\r\n\n\n### Alternative Designs\n\nShould it be named as what\u0027s *expected*, or what\u0027s *unexpected*?\r\n\r\nShould it be inherited?\r\n\r\nShould we include a custom diagnostic id for analyzer? Users are unlikely to suppress such warnings though.\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ehuoyaoyuan\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Diagnostics`, `untriaged`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-28T15:39:48Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: An attribute to indicate boxed value type is not expected for certain API",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/109780",
        "createdAt":  "2024-11-13T15:35:07Z",
        "number":  109780,
        "author":  "colejohnson66",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-15T18:21:10Z",
        "body":  "### Background and motivation\n\nIt is possible to have a `Debug.Assert`/`Trace.Assert` with a condition and no message: `Assert(bool)`. These methods (and the rest of the `Assert` family) are simple conditional forwards to `Fail(...)`. However, there\u0027s sometimes situations where we *want* to call `Fail` directly with *no* message. The accepted way to do this is to `Assert(false)` (as done [in the runtime](https://github.com/search?q=repo%3Adotnet%2Fruntime+assert%28false%29+language%3AC%23\u0026type=code\u0026l=C%23)). The closest equivalent would be `Fail(string.Empty)` (what `Assert(false)` calls internally).\n\nIt would be nice to simply call `Fail` directly with no message.\n\n### API Proposal\n\n```csharp\nnamespace System.Diagnostics;\n\npublic static class Debug\n{\n    [Conditional(\"DEBUG\")]\n    public bool Fail();\n}\n\npublic static class Trace\n{\n    [Conditional(\"TRACE\")]\n    public bool Fail();\n}\n```\n\n\n### API Usage\n\nFor an `IValueConverter`:\n\n```csharp\npublic object Convert(IList\u003cobject?\u003e values, Type targetType, object? parameter, CultureInfo culture)\n{\n    try\n    {\n        // ...\n    }\n    catch (Exception ex)\n    {\n        Debug.Fail();\n        return new BindingNotification(ex, BindingErrorType.Error);\n    }\n}\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOk59-Sw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6TdeBO",
                                           "createdAt":  "2024-11-13T15:38:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-11-13T15:38:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TeoVW",
                                           "createdAt":  "2024-11-13T17:26:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD6vcSQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MichalPetryka",
                                                                               "createdAt":  "2024-11-13T17:52:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "In your example, why do you want to do `Debug.Fail()` rather than e.g. `Debug.Fail(ex.ToString())`?\n\nWith Assert(bool), you\u0027ll now at least get an automatically generated message containing the code used in the first argument, so if you have:\n```C#\nDebug.Assert(x \u003e= 3);\n```\nthe message included with the assert will be `\"x \u003e= 3\"`.\n\nIf someone really doesn\u0027t want a message, they can already do `Debug.Fail(null);` or `Debug.Fail(\"\")`. I\u0027m not convinced there needs to be an easier way, especially since we actually want developers including messages here. With Assert, we can usually now generate something somewhat meaningful, but with Fail, there\u0027s nothing to go on.",
                                           "updatedAt":  "2024-11-13T17:26:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TfGXf",
                                           "createdAt":  "2024-11-13T18:22:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "I can understand your argument when used against `Trace`, but debug assertions/failures are a nice way to break to the debugger without setting (sometimes conditional) breakpoints everywhere. Most people\u0027s only debug listener *is* the debugger. It\u0027s why `Debug.Assert(false)` is even a thing; `OverloadPriorityAttribute` being used to automatically add the message `\"false\"` provides no extra information. It\u0027s essentially used as a `Debugger.BreakIfAttachedAndDebugIsDefined()` (should such a thing exist). In these cases, a message is useless: you can see the condition right there in the code. In my example code, `ex.ToString()` would tell me nothing more than hovering the cursor over `ex` would.",
                                           "updatedAt":  "2024-11-13T18:23:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TfJeM",
                                           "createdAt":  "2024-11-13T18:28:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Most people\u0027s only debug listener is the debugger.\n\nThe default listener fail fasts on assert, such that any information is provided flows through the fail fast, e.g. you\u0027ll see the information dumped out to the console, in a test failure, etc. It\u0027s definitely not just a \"break if attached and debug is defined\".",
                                           "updatedAt":  "2024-11-13T18:28:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TimfU",
                                           "createdAt":  "2024-11-14T03:09:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalPetryka",
                                           "body":  "\u003e Most people\u0027s only debug listener _is_ the debugger\n\nWhy not use `Debugger.Break()` then?",
                                           "updatedAt":  "2024-11-14T03:09:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6TnyDT",
                                           "createdAt":  "2024-11-14T15:18:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "colejohnson66",
                                           "body":  "\u003e \u003e Most people\u0027s only debug listener _is_ the debugger\n\u003e \n\u003e Why not use `Debugger.Break()` then?\n\nBecause that\u0027s not the same experience. It will be compiled into the output executable, which would then end up in end-users\u0027 hands, where breaking isn\u0027t ideal. The same logic would be either:\n\n```csharp\n#if DEBUG\nif (System.Diagnostics.Debugger.IsAttached)\n    System.Diagnostics.Debugger.Break();\n#endif\n```\nor\n```csharp\npublic static class DebugEx\n{\n    [Conditional(\"DEBUG\")]\n    public static void BreakIfAttached()\n    {\n        if (Debugger.IsAttached)\n            Debugger.Break();\n    }\n}\n```\n\nBut both of those are a lot more verbose than `Debug.Fail()` would be. With the first, in debug mode, your auto-formatter might interfere and try replacing the qualified class usage with a `System.Diagnostics`. However, if you switch to release mode, it might remove that unused `using` statement. With the second (in release mode), there\u0027s also now an unused method that you\u0027d need the trimmer to get, but not everyone has time to wrangle the trimmer (for many reasons).\n\nAs I\u0027ve stated earlier, `Debug.Assert(false)` already exists, and it provides no more information than the proposed `Debug.Fail()` would provide. The argument that \"we actually want developers including messages here\" doesn\u0027t mean anything *when the runtime itself* uses `Debug.Assert(false)` many times over. If it\u0027s so bad, why is there no out-of-the-box analyzer warning about its usage? Not to mention that `Debug.Fail()` would be a lot clearer than `Debug.Assert(false)`. With `Debug.Assert(false)`, there\u0027s effort involved because one has to think \"I\u0027m asserting `false` to be `true`, so it will fail\", but with `Debug.Fail()`, it\u0027s a clear \"I\u0027m failing right here\".",
                                           "updatedAt":  "2024-11-14T15:21:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Tn35L",
                                           "createdAt":  "2024-11-14T15:25:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e  The argument that \"we actually want developers including messages here\" doesn\u0027t mean anything when the runtime itself uses Debug.Assert(false) many times over.\n\nIt means we\u0027re fallible, too. These should be using Debug.Fail with a message explaining the reason. Adding a parameterless Debug.Fail only makes it more likely that such usage will increase.",
                                           "updatedAt":  "2024-11-14T15:25:58Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "[API Proposal]: `Debug.Fail()` and `Trace.Fail()`",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/110235",
        "createdAt":  "2024-11-27T23:48:01Z",
        "number":  110235,
        "author":  "codecat",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-15T18:20:15Z",
        "body":  "### Description\n\nWhen looking at the `System.Diagnostics.FileVersionInfo` output for the [TeamViewer Quicksupport](https://www.teamviewer.com/en/solutions/use-cases/quicksupport/) executable, I get all empty strings for fields like `ProductName` and `LegalCopyright`, while they do in fact exist, according to Windows Explorer:\n\n![Image](https://github.com/user-attachments/assets/d4672cb0-e493-4905-a496-218a73a2d120)\n\n\n### Reproduction Steps\n\nThis code will get a path to `TeamViewerQS_x64.exe` (see description above for download link), and print to console some of the properties from the file version info.\n```cs\n// Get path to downloads folder and TeamViewerQS_x64.exe\nvar userPath = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile);\nvar downloadsPath = Path.Combine(userPath, \"Downloads\");\nvar exePath = Path.Combine(downloadsPath, \"TeamViewerQS_x64.exe\");\n\n// Get file version info and print to console\nvar fvi = FileVersionInfo.GetVersionInfo(exePath);\nConsole.WriteLine($\"version major = {fvi.ProductMajorPart}\");\nConsole.WriteLine($\"version minor = {fvi.ProductMinorPart}\");\nConsole.WriteLine($\"product name = \\\"{fvi.ProductName}\\\"\");\nConsole.WriteLine($\"copyright = \\\"{fvi.LegalCopyright}\\\"\");\n```\n\n### Expected behavior\n\nThe expected output of the example code above should be (according to Windows Explorer):\n```\nversion major = 15\nversion minor = 60\nproduct name = \"TeamViewer QS\"\ncopyright = \"TeamViewer\"\n```\n\n### Actual behavior\n\nThe actual output of the example code is:\n```\nversion major = 15\nversion minor = 60\nproduct name = \"\"\ncopyright = \"\"\n```\nInteresting to note is the version integers are correct.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nI tried this on Windows 11, both .Net 8.0.400 and .Net 9.0.100. It also happens on Windows 10.\n\n### Other information\n\nConsidering the version integers are correct, perhaps this is some kind of string encoding issue? It appears that the TeamViewer QuickSupport exe is a compiled NSIS program, which may be relevant in helping to narrow this down.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlnivfg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6VXop4",
                                           "createdAt":  "2024-11-28T12:25:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD827rg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "codecat",
                                                                               "createdAt":  "2024-11-28T12:27:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Judging from \u003chttps://github.com/dotnet/runtime/blob/fe3d5b5f7039e9f38f022dac77aeb6f01025b19d/src/libraries/System.Diagnostics.FileVersionInfo/src/System/Diagnostics/FileVersionInfo.Windows.cs#L28-L34\u003e this could happen if the strings in the version resource are tagged with a language/codepage combination that is neither listed in the `\\VarFileInfo\\Translation` value nor any of the hardcoded guesses.",
                                           "updatedAt":  "2024-11-28T12:25:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Vb1Z-",
                                           "createdAt":  "2024-11-29T05:12:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "The version resource in TeamViewerQS_x64.exe has 0x04b00409 in its `\\VarFileInfo\\Translation` value, and the strings are under `\\StringFileInfo\\040904b0`, i.e. both have language 0x0409 (U.S. English) and codepage 0x04b0 (Unicode).  My previous hypothesis about the cause is then not correct.\n\nThe StringFileInfo lookups in FileVersionInfo.GetVersionInfoForCodePage look like they have excess backslashes.  That however shouldn\u0027t be the cause either, because .NET Framework has equivalent code.\n\nIf you had been using FileVersionInfo on an operating system other than Windows, then it would not have been able to parse the Win32 version resource at all and ProductMajorPart would also have been zero.",
                                           "updatedAt":  "2024-11-29T05:12:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6V7TQO",
                                           "createdAt":  "2024-12-03T18:57:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-12-03T18:57:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6V8zyj",
                                           "createdAt":  "2024-12-03T23:06:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@ericstj ",
                                           "updatedAt":  "2024-12-03T23:06:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WeK9-",
                                           "createdAt":  "2024-12-06T22:47:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "I think this might be Windows Defender or similar blocking that EXE.  Looks like that file is detected as [EUS:Win32/CustomCertEnterpriseBlock!cl](https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=EUS:Win32/CustomCertEnterpriseBlock!cl\u0026msockid=03b96cd02e0b6b000aec7dae2fb86a3e).",
                                           "updatedAt":  "2024-12-06T22:47:34Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Unable to get `FileVersionInfo` data from exe",
        "labels":  [
                       "area-System.Diagnostics",
                       "tracking-external-issue"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112130",
        "createdAt":  "2025-02-04T16:14:14Z",
        "number":  112130,
        "author":  "TonyValenti",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-11T13:51:58Z",
        "body":  "### Background and motivation\n\n.NET stack traces are an important element that helps developers diagnose bugs and exceptions.  However, diagnosing the actual location of the bug often involves developers skipping over unnecessary entries that should be hidden from the stack trace.\n\nTo alleviate this issue, the attribute ```[StackTraceHidden()]``` can be used to hide a single current method from the stack trace.  This is often used for throw helpers but is an incomplete solution due to there being no ability to prune an entire branch of code.\n\nTake the following program as an example:\n```\nDoTest();\n\nstatic void DoTest() {\n    //This will always throw\n    using var FS = System.IO.File.OpenRead($@\"\\\\0.0.0.0\\C$\\Testasdf.txt\");\n}\n```\n\nWhen this crashes, the stack trace will show:\n```\n[0] Unhandled exception. System.IO.FileNotFoundException: Could not find file \u0027\\\\CODE2024\\C$\\Testasdf.txt\u0027.\n[1] File name: \u0027\\\\CODE2024\\C$\\Testasdf.txt\u0027\n[2]    at Microsoft.Win32.SafeHandles.SafeFileHandle.CreateFile(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options)\n[3]    at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\n[4]    at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\n[5]    at System.IO.Strategies.FileStreamHelpers.ChooseStrategyCore(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\n[6]    at System.IO.File.OpenRead(String path)\n[7]    at Program.\u003c\u003cMain\u003e$\u003eg__DoTest|0_0() in C:\\Users\\Administrator\\source\\repos\\ConsoleApp16\\ConsoleApp16\\Program.cs:line 7\n[8]    at Program.\u003cMain\u003e$(String[] args) in C:\\Users\\Administrator\\source\\repos\\ConsoleApp16\\ConsoleApp16\\Program.cs:line 3\n```\n\nThe important part of the stack trace really begins at line 6 as lines 2-5 are essentially internal calls.\n\n.NET should expose a way of easily hiding internal stack trace trees.\n\n### API Proposal\n\n```csharp\nnamespace System.Diagnostics;\n\npublic enum StackTraceVisibility {\n   Default,\n   Hidden,\n   HideAllChildren,\n}\n\npublic partial class StackTraceHidden {\n  public StackTraceHidden(StackTraceVisibility Visibility) { }\n}\n\n```\n\n\n### API Usage\n\n```csharp\n\n[StackTraceHidden(StackTraceVisibility.HideAllChildren)]\npublic void MyMethod() { }\n```\n\n\n### Alternative Designs\n\nDevelopers could catch and re-throw exceptions to try to clean up stack traces.\n\n### Risks\n\nIt is possible that someone might actually want all the internal details of exactly where an internal call failed.  A method should exist that can retrieve them.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw43Afw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6dBpb8",
                                           "createdAt":  "2025-02-04T16:18:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-04T16:18:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dB0gI",
                                           "createdAt":  "2025-02-04T16:36:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFdZmw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "huoyaoyuan",
                                                                               "createdAt":  "2025-02-04T16:37:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "colejohnson66",
                                                                               "createdAt":  "2025-02-05T01:24:35Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AlgorithmsAreCool",
                                                                               "createdAt":  "2025-02-05T03:20:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jasper-d",
                                                                               "createdAt":  "2025-02-05T04:57:29Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "edwardneal",
                                                                               "createdAt":  "2025-02-06T07:13:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "\u003e The important part of the stack trace really begins at line 6 as lines 2-5 are essentially internal calls.\n\nInternal calls are in the overwhelming majority of cases very valuable in diagnosing the cause of an exception. Trivial methods like throw helpers can already be skipped from a stack trace, but a way to hide _all_ subsequent stack frames is a step too far and I cannot find a valid use case for it.",
                                           "updatedAt":  "2025-02-04T16:36:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dB6WE",
                                           "createdAt":  "2025-02-04T16:47:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "In your example program, would you decorate the `static void DoTest()` method with `[StackTraceHidden(StackTraceVisibility.HideAllChildren)]`?  Or would you want the attribute to be added to the File.OpenRead method?\n\nThe desired effects of the attribute don\u0027t seem trivial to define.  The stack trace output by the following program currently shows only C.M3() and C.M2(), not C.Main().  If C.Main() were decorated with `[StackTraceHidden(StackTraceVisibility.HideAllChildren)]`, I think that should not cause the stack trace to become entirely empty.\n\n```csharp\nusing System;\n\nclass C\n{\n    //[StackTraceHidden(StackTraceVisibility.HideAllChildren)]\n    static void Main()\n    {\n        M2();\n    }\n\n    static void M2()\n    {\n        try\n        {\n            M3();\n        }\n        catch (Exception exception)\n        {\n            Console.WriteLine(exception);\n        }\n    }\n\n    static void M3()\n    {\n        throw new Exception(\"what?\");\n    }\n}\n```\n",
                                           "updatedAt":  "2025-02-04T16:47:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dCRD6",
                                           "createdAt":  "2025-02-04T17:26:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "f2bo",
                                           "body":  "You could always define an extension method to hide these entries. For example, this extensions method will only print lines associated with a source file. \n\n``` C#\ntry\n{\n    DoTest();\n}\ncatch (Exception ex)\n{\n    Console.WriteLine(ex.UserStackTrace());\n}\n\nstatic class ExceptionExtensions\n{\n    public static string UserStackTrace(this Exception exception)\n    {\n        int offset = 0;\n        ReadOnlySpan\u003cchar\u003e stackTrace = exception.StackTrace;\n        foreach (var line in stackTrace.EnumerateLines())\n        {\n            if (line.IndexOf(\" in \") \u003e 0)\n            {\n                break;\n            }\n\n            offset += line.Length + Environment.NewLine.Length;\n        }\n\n        return stackTrace[offset..].ToString();\n    }\n}\n```\n\nNote: I\u0027ve only thought about this for about 5 minutes so the test for relevant lines might need to be a bit more sophisticated.",
                                           "updatedAt":  "2025-02-04T17:26:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eiizK",
                                           "createdAt":  "2025-02-14T17:09:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@noahfalk ",
                                           "updatedAt":  "2025-02-14T17:09:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ekxe9",
                                           "createdAt":  "2025-02-14T23:07:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "I understand the convenience of having a pruned callstack (this appears similar to the Visual Studio debugger JustMyCode feature). I also think there are substantial risks when pruning is overly aggressive. For example Visual Studio has an option to turn JMC off and an option to \u0027Show External Code\u0027 even when JMC is on. JMC can be a very polarizing feature - some devs love it and others turn it off immediately.\n\nUnlike debugging, with the StackTrace API the defaults are much more important because it may not be easy to switch behaviors. For example if a customer relayed a pruned stacktrace back to the developer in an error report, the developer might need to create and ship a new version of the software that disables pruning before the bug could be properly diagnosed.\n\nGiven how much effort might be involved to switch between pruned and un-pruned stacktraces, I think the default StackTrace behavior should be fairly conservative with any pruning it does. @f2bo\u0027s suggestion is one form of opt-in pruning that is available to any developer right away. I\u0027m sure there are other opt-in approaches as well.\n\nI\u0027d recommend we don\u0027t move forward with this proposal as-is, but happy to leave the issue open if folks want to discuss other alternatives for stack trace pruning that are opt-in or more conservative in scope. Hope that helps!",
                                           "updatedAt":  "2025-02-14T23:07:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7C81Jy",
                                           "createdAt":  "2025-09-09T13:21:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LWChris",
                                           "body":  "If the fear of losing valuable information is too big to warrant a hard pruning, how about having an attribute that \"divides\" the StackTrace into the stack that the developer thought is important and \"the rest\"?\n\nI\u0027m not quite sure how to format it, but the idea would be that it becomes second nature for developers to overlook certain lines if they just want a quick grasp of what\u0027s going on and focus on those lines if they want to look into root causes.\n\nSomething like this:\n\n```\n[StackTraceBoundary()]\npublic static FileStream OpenRead(string path) { ... }\n```\n\n```\nUnhandled exception. System.IO.FileNotFoundException: Could not find file \u0027\\\\CODE2024\\C$\\Testasdf.txt\u0027.\nFile name: \u0027\\\\CODE2024\\C$\\Testasdf.txt\u0027\n   // at Microsoft.Win32.SafeHandles.SafeFileHandle.CreateFile(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options)\n   // at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\n   // at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\n   // at System.IO.Strategies.FileStreamHelpers.ChooseStrategyCore(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\n   at System.IO.File.OpenRead(String path)\n   at Program.\u003c\u003cMain\u003e$\u003eg__DoTest|0_0() in C:\\Users\\Administrator\\source\\repos\\ConsoleApp16\\ConsoleApp16\\Program.cs:line 7\n   at Program.\u003cMain\u003e$(String[] args) in C:\\Users\\Administrator\\source\\repos\\ConsoleApp16\\ConsoleApp16\\Program.cs:line 3\n```\n\nOne could also imagine for that attribute to have an enum property `BoundaryType` that can define why the developer thinks this is an important boundary (public to internal, managed to unmanaged, this assembly to different assembly, hand-written to auto-generated code, ...).\n\nIn this case, the callstack could contain those boundaries as descriptive lines:\n\n```\nUnhandled exception. System.IO.FileNotFoundException: Could not find file \u0027\\\\CODE2024\\C$\\Testasdf.txt\u0027.\nFile name: \u0027\\\\CODE2024\\C$\\Testasdf.txt\u0027\n   // at Microsoft.Win32.SafeHandles.SafeFileHandle.CreateFile(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options)\n   // at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\n   // --- Assembly boundary ---\n   // at System.IO.Strategies.OSFileStreamStrategy..ctor(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\n   // at System.IO.Strategies.FileStreamHelpers.ChooseStrategyCore(String path, FileMode mode, FileAccess access, FileShare share, FileOptions options, Int64 preallocationSize, Nullable`1 unixCreateMode)\n   // --- Visiblity boundary ---\n   at System.IO.File.OpenRead(String path)\n   at Program.\u003c\u003cMain\u003e$\u003eg__DoTest|0_0() in C:\\Users\\Administrator\\source\\repos\\ConsoleApp16\\ConsoleApp16\\Program.cs:line 7\n   at Program.\u003cMain\u003e$(String[] args) in C:\\Users\\Administrator\\source\\repos\\ConsoleApp16\\ConsoleApp16\\Program.cs:line 3\n```\n\nIf you\u0027re not interested, delete all lines starting with `//`, if you are interested, delete lines starting with `// ---` and remove the `// ` for the rest.\n\nFor my liking the second option already goes a bit further than I think is necessary, but the first option is something I\u0027d feel could become very natural to handle.",
                                           "updatedAt":  "2025-09-09T13:21:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7C87n_",
                                           "createdAt":  "2025-09-09T13:27:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TonyValenti",
                                           "body":  "I really like the ```--- Assembly boundary ---``` insertions.  Even better if it had the actual assembly name:\n\n```--- Transitioning to assembly: System ---```",
                                           "updatedAt":  "2025-09-09T13:27:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DBVj-",
                                           "createdAt":  "2025-09-09T18:53:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "\u003e how about having an attribute that \"divides\" the StackTrace into the stack that the developer thought is important and \"the rest\"?\n\nThis can\u0027t work in practice, because not everybody agrees on where the important stack frames start; reusable libraries will be unable to effectively use that attribute, and can cause confusion when an internal method calls back to user code. What would also happen if many stack frames have this divider?\n\n\u003e One could also imagine for that attribute to have an enum property `BoundaryType` that can define why the developer thinks this is an important boundary (public to internal, managed to unmanaged, this assembly to different assembly, hand-written to auto-generated code, ...).\n\nThis is more compelling, but I don\u0027t think it\u0027s worth it either. It will make the stack trace text larger — which will only annoy those that haven\u0027t had any problems with reading stack traces, and will burden library authors with one more attribute that they should consider adding for improved experience. Furthermore, all given examples of boundaries can be automatically detected with reflection.",
                                           "updatedAt":  "2025-09-09T18:53:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DjcB_",
                                           "createdAt":  "2025-09-11T13:51:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LWChris",
                                           "body":  "\u003e \u003e how about having an attribute that \"divides\" the StackTrace into the stack that the developer thought is important and \"the rest\"?\n\u003e \n\u003e This can\u0027t work in practice, because not everybody agrees on where the important stack frames start; reusable libraries will be unable to effectively use that attribute, and can cause confusion when an internal method calls back to user code.\n\nMy idea was that developers judge where they feel the boundary between relevant API and irrelevant implementation detail is. That would be the same assumption as for hard pruning, but with the added benefit that if they misjudged, the stack trace is still there. So the \"worst\" thing that could happen is that the developer marked stack frames as \"probably not useful\" when they were.\n\nIn general I agree that tidying up potential stack traces is not that high on the priority list. For me, that even applies to `StacktraceHidden`. It is useful is when being applied to methods that were specifically designed to throw exceptions, but I don\u0027t think there is much value in adding that to normal smethod to preemptively compress a potential stack trace into a tidier list of methods. And I also agree that adding the burden to manage one more attribute for a marginal benefit in the rare case of an exception isn\u0027t time well spent.",
                                           "updatedAt":  "2025-09-11T13:51:58Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "[API Proposal]: ```[StackTraceHidden(StackTraceVisibility.HideAllChildren)]```",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112792",
        "createdAt":  "2025-02-21T17:51:43Z",
        "number":  112792,
        "author":  "antonfirsov",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-21T21:17:25Z",
        "body":  "#112426 captures 2 test failures: `TestW3CHeadersTraceStateAndCorrelationContext` is a test bug to be fixed by #112753. However the test `TestW3CHeaders` also fails on [this assertion](https://github.com/dotnet/runtime/blob/ea43e17c953a1230667c684a9f57d241e8a95171/src/libraries/System.Diagnostics.DiagnosticSource/tests/HttpHandlerDiagnosticListenerTests.cs#L179), which seems to be a product bug.\n\nThe reason behind the failure is that when \n1. `HttpClient` is used (vs `HttpWebRequest`)\n2. With `ActivityIdFormat.W3C` (vs the default Hierarchical format)\n3. To certain endpoints (eg. to `http://corefx-net-http11.azurewebsites.net/Echo.ashx` but not `http://example.com`)\n\nthe event `System.Net.Http.Desktop.HttpRequestOut.Start` is emitted 2 times for the same `HttpWebRequest`. There are no multiple physical requests being sent. All 3 conditions have to be met.\n\nA minimal repro can be found [here](https://gist.github.com/antonfirsov/f0336d6b50e01fb822a3af218f5db4fc).\n\nMy guess is this bug has been around for a long time, and no user reported it, so I would assess the priority as low, but I\u0027m letting the owners to triage.\n\nRelated: #38152",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOn3nKDA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6fdDZ7",
                                           "createdAt":  "2025-02-21T17:52:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-21T17:52:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fd2a5",
                                           "createdAt":  "2025-02-21T19:43:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "@karelz @tarekgh @noahfalk ",
                                           "updatedAt":  "2025-02-21T19:43:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6fecoM",
                                           "createdAt":  "2025-02-21T21:17:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEHOtUg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tommcdon",
                                                                               "createdAt":  "2025-02-21T21:18:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@antonfirsov is tracking to look at this as I understand. @antonfirsov please let me know if this is not the case. Thanks!",
                                           "updatedAt":  "2025-02-21T21:17:14Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "HttpHandlerDiagnosticListener might emit `HttpRequestOut.Start` 2 times for certain hosts with ActivityIdFormat.W3C",
        "labels":  [
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113774",
        "createdAt":  "2025-03-19T08:08:31Z",
        "number":  113774,
        "author":  "xaxledev",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-25T14:20:30Z",
        "body":  "Hi, \n\nI have created a simple Console application to test `TagList` but I am unable to add more than one value to it. Could this be a potential bug?\n\n```csproj\n\u003cProject Sdk=\"Microsoft.NET.Sdk\"\u003e\n  \u003cPropertyGroup\u003e\n    \u003cOutputType\u003eExe\u003c/OutputType\u003e\n    \u003cTargetFramework\u003enet9.0\u003c/TargetFramework\u003e\n    \u003cImplicitUsings\u003eenable\u003c/ImplicitUsings\u003e\n    \u003cNullable\u003eenable\u003c/Nullable\u003e\n  \u003c/PropertyGroup\u003e\n\u003c/Project\u003e\n```\n\n**[Issue]**\n\n![Image](https://github.com/user-attachments/assets/258700f4-4556-4621-99a3-a9d0f667c828)\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOo_94ng==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6jl-uB",
                                           "createdAt":  "2025-03-21T23:02:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-21T23:02:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6joRoT",
                                           "createdAt":  "2025-03-22T12:19:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "If the following correctly writes all three tags, then the problem is only in the debugger.\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Runtime.CompilerServices;\n\npublic class C {\n    public static void Main() {\n        var tagList = new TagList();\n        tagList.Add(\"key1\", \"value1\");\n        tagList.Add(\"key2\", \"value2\");\n        tagList.Add(\"key3\", \"value2\");\n\n        foreach (KeyValuePair\u003cstring, object?\u003e pair in GetTags(in tagList))\n        {\n            Console.WriteLine(pair);\n        }\n    }\n\n    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = \"get_Tags\")]\n    private extern static ReadOnlySpan\u003cKeyValuePair\u003cstring, object?\u003e\u003e GetTags(\n        [UnscopedRef] in TagList tagList);\n}\n```\n",
                                           "updatedAt":  "2025-03-22T12:19:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j0qJx",
                                           "createdAt":  "2025-03-24T15:15:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tommcdon",
                                           "body":  "Hi @xaxledev and @KalleOlaviNiemitalo! Thank you for reporting and providing the clear details on the bug report! The Visual Studio Debugger implements the front-end functionality for expression evaluation. I suggest opening a Visual Studio feedback item referencing this github issue, directions can be found [here](https://learn.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2022).  We will keep this issue open a while to help ensure that the feedback item is routed to the correct team.",
                                           "updatedAt":  "2025-03-24T15:15:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j_3ie",
                                           "createdAt":  "2025-03-25T14:20:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xaxledev",
                                           "body":  "Thanks @KalleOlaviNiemitalo @tommcdon for clarifying things here. That was indeed a visual glitch and the functionality works fine. ",
                                           "updatedAt":  "2025-03-25T14:20:28Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "TagList not working as expected",
        "labels":  [
                       "area-System.Diagnostics",
                       "tracking-external-issue"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114635",
        "createdAt":  "2025-04-14T17:00:58Z",
        "number":  114635,
        "author":  "pavelsavara",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-04-14T17:01:36Z",
        "body":  "ArrayPoolEventSource\nBinaryFormatterEventSource\nDataCommonEventSource\nDependencyInjectionEventSource\nDiagnosticSourceEventSource\nFrameworkEventSource\nHttpTelemetry\nMetricsEventSource\nNameResolutionTelemetry\nNativeRuntimeEventSource\nNetEventSource\nNetSecurityTelemetry\nOpenSslX509ChainEventSource\nSocketsTelemetry\nTplEventSource\nXmlSerializationEventSource\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpwhDzA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6nCECs",
                                           "createdAt":  "2025-04-14T17:01:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027size-reduction\u0027: @eerhardt, @SamMonoRT, @marek-safar\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-14T17:01:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nCEPM",
                                           "createdAt":  "2025-04-14T17:01:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @tommcdon\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-14T17:01:35Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "trim EventSource when System.Diagnostics.Tracing.EventSource.IsSupported is false",
        "labels":  [
                       "area-System.Diagnostics",
                       "size-reduction"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117785",
        "createdAt":  "2025-07-17T18:54:31Z",
        "number":  117785,
        "author":  "max-charlamb",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODHdrVQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elinor-fung",
                                            "createdAt":  "2025-07-17T20:14:09Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-20T21:43:59Z",
        "body":  "The cDAC SOS tests have intermittently been failing due to non-deterministic destruction of COM objects. SOS releases then immediately [frees the DAC library](https://github.com/dotnet/diagnostics/blob/4e46ba6fdb5073afb7b03b46e14f619d5ac456fa/src/SOS/SOS.Hosting/RuntimeWrapper.cs#L141-L174). The was okay with a native COM implementation as the objects are freed as soon as the ref count hits 0. However, this behavior is problematic with a managed COM implementation. The source generated COM implementation used in the cDAC only releases its held references on finalization. While it would be theoretically possible to shim the COM `Release` call to deterministically release held resources, the manage object would still not be freed deterministically and therefore would cause a memory leak. \n\nCurrently we occasionally see the following error in test runs. This is caused by a race condition between the GC and SOS unloading the DAC. The cDAC tries to release its handle to the DAC after the DAC is unloaded leading to an AV.\n\n```\nSTDERROR: 00:01.961:    at System.RuntimeExceptionHelpers.FailFast(String, Exception, String, RhFailFastReason, IntPtr, IntPtr) + 0x2b7\nSTDERROR: 00:01.961:    at System.RuntimeExceptionHelpers.GetRuntimeException(ExceptionIDs) + 0x231\nSTDERROR: 00:01.962:    at System.Runtime.EH.GetClasslibException(ExceptionIDs, IntPtr) + 0x5d\nSTDERROR: 00:01.962:    at System.Runtime.InteropServices.Marshal.Release(IntPtr) + 0x46\nSTDERROR: 00:01.962:    at System.Runtime.InteropServices.Marshalling.FreeThreadedStrategy.System.Runtime.InteropServices.Marshalling.IIUnknownStrategy.Release(Void*) + 0x1c\nSTDERROR: 00:01.962:    at System.Runtime.InteropServices.Marshalling.DefaultCaching.System.Runtime.InteropServices.Marshalling.IIUnknownCacheStrategy.Clear(IIUnknownStrategy) + 0xf8\nSTDERROR: 00:01.962:    at System.Runtime.InteropServices.Marshalling.ComObject.Finalize() + 0x59\nSTDERROR: 00:01.962:    at System.Runtime.__Finalizer.DrainQueue() + 0x8e\nSTDERROR: 00:01.962:    at System.Runtime.__Finalizer.ProcessFinalizers() + 0x42\n```\n\n\nFurthermore, [NativeAOT DLLs do not support unloading at all](https://github.com/dotnet/runtime/issues/103028#issuecomment-2147709895). In order to support the cDAC SOS should stop unloading the DAC/cDAC libraries between stop points.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOt-Lj5g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc634uJv",
                                           "createdAt":  "2025-07-17T18:55:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @dotnet/dotnet-diag\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-17T18:55:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc634uJ8",
                                           "createdAt":  "2025-07-17T18:55:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-17T18:55:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc634uPM",
                                           "createdAt":  "2025-07-17T18:55:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @dotnet/dotnet-diag\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-17T18:55:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc634uPm",
                                           "createdAt":  "2025-07-17T18:55:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/interop-contrib\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-17T18:55:21Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[cDAC] SOS expects deterministic destruction of COM objects",
        "labels":  [
                       "area-System.Diagnostics"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119519",
        "createdAt":  "2025-09-10T06:48:16Z",
        "number":  119519,
        "author":  "Peter-Juhasz",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-15T14:50:09Z",
        "body":  "### Background and motivation\n\nIt would help to support many web development scenarios (especially Blazor) and unlock potential cross-language editor features if we had a StringSyntax for CSS Class Lists:\n- syntax error checking\n- reference highlight of CSS class names\n- code completion for class names\n\n### API Proposal\n\n```csharp\nnamespace System.Diagnostics.CodeAnalysis;\n\npublic sealed class StringSyntaxAttribute : Attribute\n{\n    public const string CssClassList = \"CssClassList\";\n}\n```\n\n\n### API Usage\n\nCustomers could annotate that Blazor components which accept additional CSS classes:\n\n```csharp\nusing Microsoft.AspNetCore.Components;\nusing System.Diagnostics.CodeAnalysis;\n\npublic class MyComponent : ComponentBase\n{\n\t[Parameter]\n\t[StringSyntax(StringSyntaxAttribute.CssClassList)]\n   \tpublic string? CssClass { get; set; }\n}\n```\n\n```razor\n\u003cMyComponent CssClass=\"first second\" /\u003e\n```\n\nOr other helper methods:\n\n```csharp\nusing System.Diagnostics.CodeAnalysis;\n\npublic static class CssBuilder\n{\n\tpublic static string? Combine([StringSyntax(StringSyntaxAttribute.CssClassList)] string? class1, [StringSyntax(StringSyntaxAttribute.CssClassList)] string? class2) =\u003e (class1, class2) switch\n\t{\n\t\t(not null, null) =\u003e class1,\n\t\t(not null, not null) =\u003e $\"{class1} {class2}\",\n\t\t(null, null) =\u003e null,\n\t\t(null, not null) =\u003e class2,\n\t};\n}\n```\n\n```razor\n\u003cdiv class=\"@CssBuilder.Combine(\"first\", \"second\")\"\u003e\u003c/div\u003e\n```\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\nIt is a simple feature with a very simple grammar, which is broadly used everywhere, I see no risks with adding it.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw3ayqQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7DTpz4",
                                           "createdAt":  "2025-09-10T22:14:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-10T22:14:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DT0HW",
                                           "createdAt":  "2025-09-10T22:37:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "CC. @stephentoub and @CyrusNajmabadi as I think you’re the two that have done the most around this space\n\nI expect this would potentially require IDE work and other considerations",
                                           "updatedAt":  "2025-09-10T22:37:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DUGWB",
                                           "createdAt":  "2025-09-10T23:19:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhv-QA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2025-09-11T00:04:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "We (roslyn) woudl be willing to do the same thing we did with the runtime for ASP.Net route syntax.  Specifically, using an internal extensibility point to allow another 1p to do the lexing/parsing and other feature work.  We would expose the hookup points for this.\n\n--\n\nI\u0027d also have to lookup how we did the asp.net route stuff.  It\u0027s possible that this work can just piggy back off of what is already available there.  \n\nRoslyn is fine with helping with htis.  But we have a hard rule that we\u0027re not going to own any more languages (including having the code live in our repo).  That has to be owned by another team in an external repo.",
                                           "updatedAt":  "2025-09-10T23:19:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DXE56",
                                           "createdAt":  "2025-09-11T05:00:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @dotnet/dotnet-diag\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-11T05:00:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DdrKp",
                                           "createdAt":  "2025-09-11T09:03:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Peter-Juhasz",
                                           "body":  "\u003e I expect this would potentially require IDE work and other considerations\n\nI did not mean implementing the actual IDE tooling work or grammar in Roslyn in this ticket, only unlocking any potential work related by adding a new string syntax definition.\n\n\u003e I\u0027d also have to lookup how we did the asp.net route stuff. It\u0027s possible that this work can just piggy back off of what is already available there.\n\nI\u0027m not sure though this belongs to the `runtime` repository. Alongside `Json` and `Xml` it may make sense. Adding it to ASP.NET may also make sense just like the route syntax, but as it is right now in ASP.NET codebase, is not that easily consumable: because it is simply a `\"Route\"` constant without any registry like the `StringSyntaxAttribute` class itself. What do you think would be the right place?",
                                           "updatedAt":  "2025-09-11T09:03:59Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[API Proposal]: CSS Class List String Syntax",
        "labels":  [
                       "api-suggestion",
                       "area-System.Diagnostics"
                   ]
    }
]
