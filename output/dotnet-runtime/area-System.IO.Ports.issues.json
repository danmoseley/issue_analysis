[
    {
        "url":  "https://github.com/dotnet/runtime/issues/20149",
        "createdAt":  "2017-02-08T21:57:56Z",
        "number":  20149,
        "author":  "JeremyKuhne",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-23T02:31:28Z",
        "body":  "They don\u0027t play well with CI builds and take some time.\r\n\r\nWe need to:\r\n\r\n1. Pick some more generous thresholds for validation \r\n2. Try to make tests faster where possible\r\n3. Move the slowest tests to the outer loop\r\n\r\ndotnet/runtime#20091",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOEJ5SYA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODQ3ODU0MA==",
                                           "createdAt":  "2017-02-08T22:11:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "We really should avoid playing with the thread priority if at all possible. We should also look to reduce any unnecessary redundancy.",
                                           "updatedAt":  "2017-02-08T22:11:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODQ4NDQ5MA==",
                                           "createdAt":  "2017-02-08T22:34:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "willdean",
                                           "body":  "As I said on the PR, it\u0027s not just the timeout tests which are slow and flaky - there are lots and lots of slow and flaky tests in there, it\u0027s just that these are the ones which have caused trouble in the small subset which is currently running on the CI.\r\n\r\nHow would I go about marking all the \u0027needs a serial port\u0027 tests as non-CI?  I think that would be better for now anyway.\r\n\r\n",
                                           "updatedAt":  "2017-02-08T22:34:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODQ4NTI1MA==",
                                           "createdAt":  "2017-02-08T22:37:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@JeremyKuhne is it test bug or test enhancement?",
                                           "updatedAt":  "2017-02-08T22:37:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODQ4NjYwOA==",
                                           "createdAt":  "2017-02-08T22:43:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "@karelz Er, test bug I think.\r\n\r\n\u003e How would I go about marking all the \u0027needs a serial port\u0027 tests as non-CI?\r\n\r\n@willdean We can mark things as outer loop, but that doesn\u0027t address the problem. I don\u0027t know if there is a good way to do this. @weshaggard, @tarekgh: do we have any patterns established for running tests locally only?",
                                           "updatedAt":  "2017-02-08T22:43:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODQ4NzM4MQ==",
                                           "createdAt":  "2017-02-08T22:46:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weshaggard",
                                           "body":  "\u003e do we have any patterns established for running tests locally only?\r\n\r\nI would suggest a conditional fact, which you can add any logic you want in it to detect whether or not you have a serial port or not. ",
                                           "updatedAt":  "2017-02-08T22:46:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODQ4ODQ1NA==",
                                           "createdAt":  "2017-02-08T22:50:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "@weshaggard We already have that- the issue is that the CI machines have a serial port present and the tests don\u0027t work reliably in the CI environment.",
                                           "updatedAt":  "2017-02-08T22:50:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODQ4OTI1Ng==",
                                           "createdAt":  "2017-02-08T22:54:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "willdean",
                                           "body":  "We could just decide that the \u0027no loopback, just a single serial port\u0027 subset isn\u0027t very useful anyway, and effectively upgrade all the requirements to require either single-port loopback or null modem - that would mean that they\u0027d only get run if there was a deliberate attempt to equip a machine for serial port testing.\r\n\r\nThere\u0027s so much missing from the tests when you don\u0027t have at least a loopback plug that we\u0027re probably kidding ourselves that it\u0027s a useful automated defence against regression anyway - the false sense of security is perhaps worse than the less frequent testing.\r\n\r\n",
                                           "updatedAt":  "2017-02-08T22:56:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODQ4OTU2MQ==",
                                           "createdAt":  "2017-02-08T22:55:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weshaggard",
                                           "body":  "I see. The other potential way is to mark them as IgnoreForCI, see https://github.com/dotnet/corefx/blob/158800db40864779aadbe2b2e6916dbc495060b6/src/System.Runtime.Extensions/tests/System/EnvironmentTests.cs#L182. ",
                                           "updatedAt":  "2017-02-08T22:55:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODQ5Nzc4Nw==",
                                           "createdAt":  "2017-02-08T23:32:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "@weshaggard What does that do for outerloop? I assume these would struggle on that run as well...",
                                           "updatedAt":  "2017-02-08T23:32:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODUxMjkxOQ==",
                                           "createdAt":  "2017-02-09T00:56:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "It would be nice if there were at least SOME that were reliable/fast enough we could run in the CI even if all they do is little more than new up a serial port. ",
                                           "updatedAt":  "2017-02-09T00:56:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODUxNzYxMA==",
                                           "createdAt":  "2017-02-09T01:22:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "weshaggard",
                                           "body":  "See https://github.com/dotnet/corefx/blob/master/netci.groovy#L225 we pass IgnoreForCI in outerloop runs as well. ",
                                           "updatedAt":  "2017-02-09T01:22:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODUyMzIwMg==",
                                           "createdAt":  "2017-02-09T01:54:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "Thanks @weshaggard ",
                                           "updatedAt":  "2017-02-09T01:54:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODU4MDEzMg==",
                                           "createdAt":  "2017-02-09T08:42:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAGuR7Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2017-02-09T15:45:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "willdean",
                                           "body":  "@danmosemsft There are currently about 120 out of 760 that can run with no serial port at all.\r\n\r\nWith a serial port but no attached hardware, you get about 320 out of 760 running.  (This is what\u0027s trying to run on the CI at the moment)\r\n",
                                           "updatedAt":  "2017-02-09T08:42:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODc0MjY4MA==",
                                           "createdAt":  "2017-02-09T19:15:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAGu9OQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2017-02-09T20:53:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "The node.js community has configured Jenkins based test machine for testing their serial-port implementation: nodejs/hardware#13. Would be nice to have a similar system employed to test .NET Core implementation on a real hardware.",
                                           "updatedAt":  "2017-02-09T19:15:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI3ODgxMTIzMg==",
                                           "createdAt":  "2017-02-09T23:37:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAGvX_Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2017-02-10T00:57:57Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "willdean",
                                           "body":  "@am11 Thanks for that - very interesting.   In comparison with what we\u0027re trying to do they have very relaxed requirements for hardware but the principle is encouraging.\r\n\r\nSomewhere in Redmond there is (I like to think so, anyway) a machine running the SerialPort test suite on behalf of .NET 4.6 - what we really need is a clone of that...",
                                           "updatedAt":  "2017-02-09T23:37:01Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "SerialPort timeout tests are slow and flaky",
        "labels":  [
                       "disabled-test",
                       "test-bug",
                       "help wanted",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/20370",
        "createdAt":  "2017-02-28T21:46:01Z",
        "number":  20370,
        "author":  "willdean",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC02BGg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "freddyrios",
                                            "createdAt":  "2021-08-24T08:15:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "comfile-mike",
                                            "createdAt":  "2023-12-27T01:51:22Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-12-25T17:51:38Z",
        "body":  "With a \u0027real\u0027 (serial.sys / 16550) serial port, if you set up a `WriteTimeout` and then write to a port which is blocked by flow control, the write will eventually fail and throw a `TimeoutException`.  This is the expected behaviour.\r\n\r\nThis exception is thrown by a code in `SerialStream.Write`, which looks like this:\r\n```c#\r\nif (numBytes == 0)\r\n    throw new TimeoutException(SR.Write_timed_out);\r\n```\r\nWhere `numBytes` is passed back from the OS in the `lpNumberOfBytesWritten` argument of `WriteFile`.\r\n\r\nWith some usb serial devices (tested with FTDI) `lpNumberOfBytesWritten` is not zero in this situation - it\u0027s some non-zero number less than the size of the buffer which was written.  It\u0027s probably related to the difference in size between the buffer written and the amount of internal buffering within the driver/hardware stack..\r\n\r\nThis might be characterised as a bug within the FTDI product, but it\u0027s probably very difficult to fix - they have committed a certain amount of data to the USB stack and their hardware device, and once that\u0027s gone from their serial driver it is hard to know that it never made it out of the pins of the IC at the end of the USB cable.  It could be possibly made to work via reporting back from the hardware to the driver, but if that isn\u0027t in place in their existing protocol then it\u0027s probably not going to be.\r\n\r\nThis gives a situation where a `Write` has failed with a timeout but this fact is not visible to the application.\r\n\r\nInstead of the `numBytes == 0` test, we might consider having some other way of determining that a timeout occurred - perhaps something like `numBytes \u003c (bytesThatCouldbeWritten)`.  I\u0027m not currently sure what `(bytesThatCouldbeWritten)` would be, and how this would interact with overlapped writes, etc, but it\u0027s worth thinking about.\r\n\r\nThis can be left up-for-grabs for now.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmLCOJQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI4MzIxNDQ4Nw==",
                                           "createdAt":  "2017-03-01T01:17:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@willdean thanks for the \"up for grabs\" tip!",
                                           "updatedAt":  "2017-03-01T01:17:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzNzk5NDcwOA==",
                                           "createdAt":  "2018-11-12T19:07:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB3f-Jw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "freddyrios",
                                                                               "createdAt":  "2021-08-24T08:16:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "krwq",
                                           "body":  "This should now work correctly on Linux as long as the driver itself doesn\u0027t consume bytes but that we can\u0027t really control - not sure about Windows",
                                           "updatedAt":  "2018-11-12T19:07:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTc3NTI1Mw==",
                                           "createdAt":  "2020-01-17T20:04:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "Triage: This needs to be validated on Windows. Validation should be simple, we can close if it works or add further details and track fixing here.",
                                           "updatedAt":  "2020-01-17T20:04:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vTTJ4",
                                           "createdAt":  "2023-12-22T07:21:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "comfile-mike",
                                           "body":  "https://github.com/dotnet/runtime/issues/96267 demonstrates that this does *not* work on windows.",
                                           "updatedAt":  "2023-12-22T07:21:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6YsI4l",
                                           "createdAt":  "2024-12-25T08:16:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "codewitch-honey-crisis",
                                           "body":  "Can confirm that this is broken on Linux, because it\u0027s blocking me.\nYou can verify it with any ESP32S3 device connected via the S3\u0027s native USB port since that doesn\u0027t use a UART bridge chip, and seems to behave more or less like the FTDI hardware from above.\n\nI\u0027d at least like a workaround.\n\nEdit: Found one. It\u0027s just the Async calls that don\u0027t respect timeouts. Is this intended?",
                                           "updatedAt":  "2024-12-25T17:51:38Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "SerialPort: TimeoutException not always thrown for write timeouts",
        "labels":  [
                       "bug",
                       "os-windows",
                       "help wanted",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/20947",
        "createdAt":  "2017-04-06T21:09:29Z",
        "number":  20947,
        "author":  "shaggygi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4ML6w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "eduard-malakhov",
                                            "createdAt":  "2017-12-11T12:11:22Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "biradarsm",
                                            "createdAt":  "2018-02-14T06:57:24Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "runewake2",
                                            "createdAt":  "2018-07-02T20:17:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tedvanderveen",
                                            "createdAt":  "2018-08-26T07:02:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2021-07-25T08:50:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nguyenlamlll",
                                            "createdAt":  "2024-05-27T19:20:02Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2022-11-23T02:27:45Z",
        "body":  "This issue was created to continue the discussion on further support of SerialPort related APIs for other platforms/devices.  You can see related issues below:\r\n\r\n[Serial Port support on Windows](https://github.com/dotnet/corefx/issues/984)\r\n[Serial Port support on Unix/OSX](https://github.com/dotnet/corefx/issues/18012)\r\n\r\nI actually don\u0027t know what the ultimate expectation is for this topic as I hope others would chime in with better scenarios.  This will hopefully help contributors understand requirements when improving the APIs to support said features.\r\n\r\nFor example, what does \"support on RPi\" really mean?  If it runs under Windows IoT, does that mean support for UWP?  If support comes for Unix/OSx, does that mean the APIs will work running on Alpine/Ubuntu?  And how about Docker support?\r\n\r\nThere were also discussions on using the on-board UART or using USB (e.g. FTDI, etc.) dongles.\r\n\r\nCommunity, please add thoughts to get SerialPort APIs working in other areas in addition to Windows.\r\n\r\nThanks in advance.\r\n\r\nFYI... @willdean @JeremyKuhne @karelz @danmosemsft \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOF9Dzcg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MjMyOTA1Mw==",
                                           "createdAt":  "2017-04-06T21:29:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maitredede",
                                           "body":  "Hi, I think that the SerialPort on Raspberry Pi is :\r\n\r\n- Use of the on-board UART : usable as any serial port, if not used by default serial console\r\n- Use of USB dongle serial ports : should be usable when linux support is added, I don\u0027t think there will be specific work for RPi here.\r\n\r\nI don\u0027t know if Docker on Raspberry Pi is a common use case, but I think that it may just work when linux is supported.",
                                           "updatedAt":  "2017-04-06T21:29:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MjM5NDAwNg==",
                                           "createdAt":  "2017-04-07T01:42:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "@Petermarcu what are supported OS versions of Linux and Windows on Raspberry Pi?",
                                           "updatedAt":  "2017-04-07T01:42:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDI5MjQ0MTIxNw==",
                                           "createdAt":  "2017-04-07T05:10:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAIba4A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "enghch",
                                                                               "createdAt":  "2017-04-10T06:11:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Petermarcu",
                                           "body":  "I would expect Ubuntu mate and Raspbian to be the main ones. The first already works and the second will soon. Win10iot works as well.",
                                           "updatedAt":  "2017-04-07T05:10:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMTY5MjMzOA==",
                                           "createdAt":  "2017-05-16T06:54:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cStorm",
                                           "body":  "To what extent is Win IoT supposed to work?\r\n\r\nI am running a 2.0.0-preview2 build from a few days ago on v10.0.15026, but SerialPort.GetPortNames() returns no results when a USB serial dongle is connected.  (It is a Z-Wave controller that works well for the same build on a Windows 10 desktop.)\r\n\r\nI do see that in WinIoT the device does not appear in HKLM\\HARDWARE\\DEVICEMAP\\SERIALCOMM (as it does in on regular Windows), but I do not know whether that is expected behavior in WinIoT or whether I\u0027m completely missing something about the implementation.\r\n\r\nIf it matters, I can also say that the same device is discoverable on WinIoT using the Windows.Devices namespace from UWP.",
                                           "updatedAt":  "2017-05-16T06:54:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMTgzMTA5Nw==",
                                           "createdAt":  "2017-05-16T16:05:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOASqORg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cStorm",
                                                                               "createdAt":  "2017-05-16T19:17:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "biradarsm",
                                                                               "createdAt":  "2018-02-14T06:59:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@cStorm as you probably saw, `GetPortNames()` relies on that regkey but it [notes ](https://github.com/dotnet/corefx/blob/5c7af3d5a8098135a3d757385e723d6d7c12a005/src/System.IO.Ports/src/System/IO/Ports/SerialPort.cs#L565)that `QueryDosDevice` is an alternative. I also see [GetDefaultCommConfig ](https://msdn.microsoft.com/en-us/library/windows/desktop/aa363262(v=vs.85).aspx) might be an alternative also but [this](https://social.msdn.microsoft.com/Forums/windowshardware/en-US/3d759c8d-fb7e-4693-acf3-bb082f02fc1c/windows-10-getdefaultcommconfig-error-87-on-all-com-ports-handled-by-usbsersys?forum=wdk) suggests that it just reads the key.\r\n\r\nIf you\u0027re interested, you could try changing to `QueryDosDevice` [ripping off the code from the tests](https://github.com/dotnet/corefx/blob/910af877c821a023e2dc9b8120c6968e25b51a5e/src/System.IO.Ports/tests/SerialPort/DosDevices.cs#L11 )to see whether they\u0027re picked up. Perhaps the \"right\" way is to combine the answers from both.\r\n\r\nI don\u0027t know why IoT doesn\u0027t have the registry key. ",
                                           "updatedAt":  "2017-05-16T16:05:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjkwNDIwMQ==",
                                           "createdAt":  "2017-05-20T23:05:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAtLf4w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PRIMETSS",
                                                                               "createdAt":  "2019-07-25T10:03:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "cStorm",
                                           "body":  "So I got a proof of concept working, and the short of it is that QueryDosDevice does pick up the ports (with the naming scheme seen in UWP).  After relaxing SerialStream\u0027s requirement for a \"COM*\" port name, it seemed to communicate normally as well.\r\n\r\nI\u0027d like to share more of what I\u0027ve found and eventually make a pull request, but before really getting into it, I\u0027d like to confirm whether here or a new issue would be a better for this.",
                                           "updatedAt":  "2017-05-20T23:05:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjkwNDY2MA==",
                                           "createdAt":  "2017-05-20T23:17:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shaggygi",
                                           "body":  "@cStorm What platform does your code work on?  I\u0027d say just create a pull request and add link to this issue.  There is probably more work to do and this issue could be a method to group the progress on the different flavors (win iot, linux, etc).  Thx for your effort in helping this feature.",
                                           "updatedAt":  "2017-05-20T23:17:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjkwOTc4OA==",
                                           "createdAt":  "2017-05-21T01:51:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCCVyXA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "eduard-malakhov",
                                                                               "createdAt":  "2017-12-11T12:07:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danineuss",
                                                                               "createdAt":  "2021-11-12T15:52:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "cStorm",
                                           "body":  "@shaggygi The change is for Win IoT running on a Raspberry Pi, and I\u0027m using a Windows 10 desktop for building / basic regression testing.\r\n\r\nOn the topic of cross-platform support, there were actually a few things I wanted an opinion on.  First is concerning the best value to return from SerialPort.GetPortNames().  To illustrate the situation, these are the relevant results my desktop returns from the DosDevices code vs the current registry implementation:\r\n\r\n|QDD common name|QDD internal name|current equivalent|\r\n|-|-|-|\r\n|COM1|\\Device\\Serial0|COM1|\r\n|ACPI#PNP0501#1#{86e0d1e0-8089-11d0-9ce4-08003e301f73}|\\Device\\00000031|COM1|\r\n|COM4|\\Device\\USBSER000|COM4|\r\n|USB#VID_0658\u0026PID_0200#6\u002613add0ab\u00260\u00264#{86e0d1e0-8089-11d0-9ce4-08003e301f73}|\\Device\\USBPDO-10|COM4|\r\n\r\nThis is what Win IoT returns with the same USB device attached:\r\n\r\n|QDD common name|QDD internal name|current equivalent|\r\n|-|-|-|\r\n|ACPI#BCM2837#4#{86e0d1e0-8089-11d0-9ce4-08003e301f73}|\\Device\\0000001e|\r\n|USB#VID_0658\u0026PID_0200#5\u00263753427a\u00260\u00265#{86e0d1e0-8089-11d0-9ce4-08003e301f73}|\\Device\\00000ede||\r\n\r\nAs you can see, on desktop both the current-style and UWP-style names can be determined from QueryDosDevice, but on Win IoT the COM* names simply don\u0027t seem to function (even with an educated guess at what they are).  Would it be better to always return the same type of name for homogeneity, or return the COM* names when available for potential backward compatibility reasons?  (Alternately, we could return both when available, even though they seem to function identically.)\r\n\r\nSecond, I did find other places in the registry (on both desktop and Win IoT) that might lead to an alternative implementation.  While QueryDosDevice seems to execute more quickly, what I read in pinvoke-checker.md suggests that it is best to avoid adding new native calls.  I don\u0027t know how much more cross-platform-friendly registry calls would be, but I would appreciate a rundown on what the best practice is here.",
                                           "updatedAt":  "2017-05-21T01:51:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjkxNTUwNA==",
                                           "createdAt":  "2017-05-21T05:06:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@cStorm @shaggygi I changed the title to be specific to Windows IoT since as far as I know the general issue to get SerialPort on Unix would enable Raspberry Pi also.\r\n\r\nHere\u0027s some information I\u0027ve gotten from the dev in Windows who owns this:\r\n\r\n\u003e QueryDosDevice does not read the key,it asks the kernel object manager directly. SERIALCOMM key isn’t there on IOT because we don’t automatically assign COM names on IOT (b/c we don’t allow installer code to run on device setup on IOT). No COM name, no SERIALCOMM entry. [This article](https://developer.microsoft.com/de-de/windows/iot/Samples/CustomDeviceAccessor) shows devs how to fix it up after the fact. \r\n\r\nWe probably want to continue using SERIALCOMM because it seems preferred, it\u0027s proven, and it also may be easier for us on UWP. Would it make sense to fall back to try `QueryDosDevice` if SERIALCOMM gives us nothing? Or fall back only on IoT? I don\u0027t have an IoT device handy so it\u0027s very helpful that you are logging the results you get.",
                                           "updatedAt":  "2017-05-21T05:06:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjkyMTMyNg==",
                                           "createdAt":  "2017-05-21T07:53:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cStorm",
                                           "body":  "After some changes, I currently have it only calling `QueryDosDevice` if the SERIALCOMM key does not exist, and this works for me as it did before.\r\n\r\nOnly doing this on Win IoT seems like it might cheat other, unforeseen scenarios out of the fix, and I don\u0027t know how common it would be for that key to be absent on non-IoT machines anyway (if we\u0027re worried about wasting cycles).  That said, I don\u0027t object to limiting the scope of the change if that\u0027s preferred and someone knows the right way to detect the Windows IoT platform.\r\n\r\nAlso, if there is anything someone wants checked or verified on Windows IoT (for this or another issue), I\u0027m happy to do that and report back.",
                                           "updatedAt":  "2017-05-21T07:53:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjkyMTUyMg==",
                                           "createdAt":  "2017-05-21T07:59:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAJnkNw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2017-05-21T08:07:19Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "willdean",
                                           "body":  "@cStorm Personally I wouldn\u0027t worry about \"cheating other scenarios out of the fix\" - I think that\u0027s less important than not breaking existing stuff.\r\n\r\nRe what kind of name needs to be returned, it should definitely be a string which can then be passed, unmodified, to the SerialPort constructor - any other requirement is secondary to that.   If there are multiple possibilities for strings which meet that requirement (like there would be on full Windows), then we should choose the shortest string which is most like \"COMx\".\r\n\r\nYou can\u0027t return an artificial \"COMx\" name on IoT if that then doesn\u0027t work to open the port (it sounds like it wouldn\u0027t).\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2017-05-21T07:59:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjkyMTY2OQ==",
                                           "createdAt":  "2017-05-21T08:02:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAJnkMw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2017-05-21T08:06:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "willdean",
                                           "body":  "@danmosemsft  Said:\r\n\u003e @cStorm @shaggygi I changed the title to be specific to Windows IoT since as far as I know the general issue to get SerialPort on Unix would enable Raspberry Pi also.\r\n\r\nI don\u0027t think this is true, as there\u0027s little (other than physical hardware) which relates Windows IoT on Raspberry Pi to the conventional Linux-running Raspberry Pi. \r\n\r\nWe clearly (as the OP in this thread mused) need two Raspberry Pi threads, one for Linux and one for Win IoT.   This one has now become the latter, so that\u0027s fine.\r\n\r\n",
                                           "updatedAt":  "2017-05-21T08:02:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjkyMTg1Mw==",
                                           "createdAt":  "2017-05-21T08:07:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "willdean",
                                           "body":  "@cStorm \r\n\r\n\u003e Also, if there is anything someone wants checked or verified on Windows IoT (for this or another issue), I\u0027m happy to do that and report back.\r\n\r\nHow much of the test suite have you been able to run?  \r\n\r\n",
                                           "updatedAt":  "2017-05-21T08:07:11Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjkyNDA3Ng==",
                                           "createdAt":  "2017-05-21T08:55:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cStorm",
                                           "body":  "@willdean Right! In my current implementation, if SERIALCOMM exists, all results are from there and in the COMx format.  If not, we presume there is no other recourse and fall back to returning the longer names from `QueryDosDevice`.  Either of these name formats can be passed to `SerialPort` on Windows desktop, but only the latter seems to work on Win IoT.\r\n\r\nYou have a good point about targeting the change to Win IoT to reduce the potential for unexpected errors on other platforms, but it\u0027s worth considering that the platform detection code itself would increase that potential.  Is there an established way to do this that would be considered safer that the `QueryDosDevice` call?\r\n\r\nAs for the test suite, I\u0027ve only run it on desktop so far (having updated `SerialPort` constructor\u0027s argument-checking test) and have just manually tested specific changes on Win IoT.  I was under the impression that the build wouldn\u0027t run on WinIoT/ARM, and haven\u0027t gotten the chance to explore other ways of running the tests yet.  If there is any information on this I\u0027d be eager to have it.\r\n\r\nAs an aside, does anyone know if there is a name for that longer, specifically-formatted style of identifier (e.g. USB#VID_0658\u0026PID_0200#5\u00263753427a\u00260\u00265#{86e0d1e0-8089-11d0-9ce4-08003e301f73}) that UWP and IoT use?",
                                           "updatedAt":  "2017-05-21T08:55:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMwMjkyNjEwMg==",
                                           "createdAt":  "2017-05-21T09:42:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "willdean",
                                           "body":  "@cStorm I think [this](http://www.naughter.com/enumser.html) is considered the definitive reference on all the ways of enumerating ports.\r\n\r\nI don\u0027t know the proper name of the huge horrible string - it\u0027s appears to be a superset of what Device Manager calls the \u0027Device Instance Path\u0027, which might be a good enough name for your purposes.\r\n\r\nThe thing to be wary of with the test suite is that it adapts how much of it runs depending on what hardware it finds - if you run it with a single port with nothing connected, then only a small amount of stuff runs - you get much more if you arrange the port to loop-back the data, and only get the whole lot if you have two ports connected with a null-modem cable.\r\n\r\nThe test is also very picky about specific UART behaviour, so only fully passes with a 16x50 UART at at least one end of the null-modem - I\u0027m not sure what the UART details on the Raspberry Pi are, but come back if you have problems because we may need to make the tests smarter to get through it.",
                                           "updatedAt":  "2017-05-21T09:43:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjE2ODk0OQ==",
                                           "createdAt":  "2017-06-30T03:59:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "Should this be working in Iot Core?  I\u0027m trying with an ASP.NET Core application using the daily builds and targetting win10-arm fails to build so I have to target win-arm instead.  The issue I have then is that when deployed I get \"System.IO.Ports is currently only supported on Windows.\".  Reading this thread I\u0027m under the impression this is expected to work with this scenario.",
                                           "updatedAt":  "2017-06-30T03:59:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjI2MjM5Mg==",
                                           "createdAt":  "2017-06-30T13:07:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "willdean",
                                           "body":  "@los93sol I\u0027m not sure you should read this thread as being any claim it works at the moment.  I think @cStorm has done some work locally on enumerating ports on Win10-arm-iot or whatever it\u0027s called officially, but I don\u0027t think that\u0027s ever been committed back.",
                                           "updatedAt":  "2017-06-30T13:07:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjMwOTA3Mw==",
                                           "createdAt":  "2017-06-30T16:10:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@weshaggard I\u0027m curious why this message appears on IoT. It comes from `\u003cGeneratePlatformNotSupportedAssemblyMessage Condition=\"\u0027$(TargetGroup)\u0027 == \u0027netstandard\u0027 AND \u0027$(TargetsWindows)\u0027 != \u0027true\u0027\"\u003eSR.PlatformNotSupported_IOPorts\u003c/GeneratePlatformNotSupportedAssemblyMessage\u003e` ... but TargetsWindows seems like it should be true?",
                                           "updatedAt":  "2017-06-30T16:10:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjMyMzczMA==",
                                           "createdAt":  "2017-06-30T17:14:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "After looking at the source it appears as thought the issue I was experiencing is actually by design and is explicitly blocked in this case.  I was calling SerialPort.GetPortNames() where the exception was being returned.\r\n\r\nThe following is where it appears to be trapping....\r\n            if (PlatformDetection.IsWinRT)\r\n            {\r\n                return new string[0]; // we are waiting for a Win32 new QueryDosDevice API since the current doesn\u0027t work for Uap https://github.com/dotnet/corefx/issues/21156\r\n            }",
                                           "updatedAt":  "2017-06-30T17:14:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjMyNTk1NA==",
                                           "createdAt":  "2017-06-30T17:24:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "Thinking about it though, that still doesn\u0027t explain why I had to target win-arm instead of win10-arm, I would expect iot core to be a win10-arm target, but I supposed that is probably the RID for full windows 10 on arm?",
                                           "updatedAt":  "2017-06-30T17:24:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjMyNzM2MA==",
                                           "createdAt":  "2017-06-30T17:30:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@ericstj can you answer my question about $(TargetsWindows) and @los93sol \u0027s question about the RID of Windows IoT? Where are we at with that target platform?",
                                           "updatedAt":  "2017-06-30T17:30:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjMzMjYxMA==",
                                           "createdAt":  "2017-06-30T17:53:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e The following is where it appears to be trapping....\r\n\r\n@los93sol that should only happen if you\u0027re running in app container (eg., a UWP style app). The message you reported \"System.IO.Ports is currently only supported on Windows.\" is not from there.",
                                           "updatedAt":  "2017-06-30T17:53:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjM0NzE2MQ==",
                                           "createdAt":  "2017-06-30T18:55:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Petermarcu",
                                           "body":  "@los93sol , we simplified in .NET Core 2.0. win-arm should be all you need to use.",
                                           "updatedAt":  "2017-06-30T18:55:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjM1Mzg2Ng==",
                                           "createdAt":  "2017-06-30T19:27:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "@danmosemsft You are correct, I was seeing that snippet in the test and mixed it up.  I have ended up doing similar to @cStorm and modified it to use QueryDosDevice to list the ports and that is working as expected.  I then modified SerialStream to eliminate the check that the portName starts with \"COM\" as was suggested earlier in this thread.  I\u0027m not able to instantiate the SerialPort object but when I go to open it things get sketchy and I\u0027m troubleshooting blindly.  The remote debugger totally crashes and open powershell connections to the device die as well.  @cStorm Can you give any clue if there were any other modifications necessary to get it working?",
                                           "updatedAt":  "2017-06-30T19:27:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjM2MDIzNQ==",
                                           "createdAt":  "2017-06-30T20:00:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "\u003e I\u0027m curious why this message appears on IoT. It comes from \u003cGeneratePlatformNotSupportedAssemblyMessage Condition=\"\u0027$(TargetGroup)\u0027 == \u0027netstandard\u0027 AND \u0027$(TargetsWindows)\u0027 != \u0027true\u0027\"\u003eSR.PlatformNotSupported_IOPorts\u003c/GeneratePlatformNotSupportedAssemblyMessage\u003e ... but TargetsWindows seems like it should be true?\r\n\r\nTargetsWindows is a build time condition based on the project configuration.  That just means that any non-windows binary (including AnyOS binary) will get the not-supported-assembly.  You\u0027d see this if your app if you weren\u0027t restoring the correct asset from the package.  That\u0027d probably mean that the RID used for restore was wrong, or you had an out of date RID mapping from Microsoft.NETCore.Platforms.  If you shared your project.assets.json/project.lock.json I could look at it to tell you why.",
                                           "updatedAt":  "2017-06-30T20:00:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjM3MDE2NQ==",
                                           "createdAt":  "2017-06-30T20:51:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "@ericstj  Thank you, the file is too large for me to post here, what\u0027s the best way to get it to you?\r\n",
                                           "updatedAt":  "2017-06-30T20:51:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjM3NDE0OA==",
                                           "createdAt":  "2017-06-30T21:12:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Just put it in a [gist](https://gist.github.com/).",
                                           "updatedAt":  "2017-06-30T21:12:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjM3NjkyMg==",
                                           "createdAt":  "2017-06-30T21:28:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "@ericstj Eric, I have posted it [Here](https://gist.github.com/los93sol/11d77008a7c8b2c52d5fb921f0e93504)",
                                           "updatedAt":  "2017-06-30T21:28:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjM3OTA2Mg==",
                                           "createdAt":  "2017-06-30T21:41:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "Looking at it myself, I\u0027m pretty sure you are correct, Microsoft.Netcore.Platforms was something like 1.0.1. Can I just update it through nuget or is there some preferred way we are supposed to manage that?",
                                           "updatedAt":  "2017-06-30T21:41:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjM3OTM5OQ==",
                                           "createdAt":  "2017-06-30T21:43:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Here are your three targets:\r\n```\r\n    \".NETCoreApp,Version=v2.0\": {\r\n...\r\n\r\n        \"runtime\": {\r\n          \"lib/netstandard2.0/System.IO.Ports.dll\": {}\r\n        },\r\n        \"runtimeTargets\": {\r\n          \"runtimes/win/lib/netstandard2.0/System.IO.Ports.dll\": {\r\n            \"assetType\": \"runtime\",\r\n            \"rid\": \"win\"\r\n          }\r\n        }\r\n...\r\n    \".NETCoreApp,Version=v2.0/win-arm\": {\r\n...\r\n        \"runtime\": {\r\n          \"lib/netstandard2.0/System.IO.Ports.dll\": {}\r\n        }\r\n...\r\n    \".NETCoreApp,Version=v2.0/win10\": {\r\n...\r\n        \"runtime\": {\r\n          \"runtimes/win/lib/netstandard2.0/System.IO.Ports.dll\": {}\r\n        }\r\n```\r\n\r\nThis tells me that NuGet doesn\u0027t think `win-arm` is compatible with `win`.\r\n\r\nWhy?  Because the RID graph is old.  `win-arm` was added in https://github.com/dotnet/corefx/commit/179f1f25cccae75989a2b95c85e1ef6ce5cb6165, on May 23. `\"Microsoft.NETCore.Platforms/2.1.0-preview2-25319-04\"` referenced by this project is from May 19. \r\n\r\nCan you change your reference to System.IO.Ports 4.5.0-preview1-25430-01?  Even better, just choose the same build that matches the NETCore.App you are using.\r\n\r\nPS: The confusing 4.5.0-preview2 versions ought to be deleted.  Those are from a couple builds that happened after we branched for 2.0 but forgot to roll the pre-release back to preview1.  I filed https://github.com/dotnet/corefx/issues/21781 to track that.",
                                           "updatedAt":  "2017-06-30T21:51:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjQwMDMxNw==",
                                           "createdAt":  "2017-07-01T00:48:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "@ericstj Thanks for creating that and getting some action on it so quickly, you guys are awesome!",
                                           "updatedAt":  "2017-07-01T00:48:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjQ3MDYzNw==",
                                           "createdAt":  "2017-07-02T04:44:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "Interesting little development, I have two devices, one is a Serial-\u003eUSB device with an FTDI chipset that I can communicate with using a custom built version of System.IO.Ports that just relaxes the COM requirement in SerialStream.  The other is a UART-\u003eUSB device with a Silicon Labs chipset (it\u0027s the adafruit one).  Using that device as soon as SerialPort.Open is called the Pi reboots.  If anyone has a suggestion on how to obtain some logs so I can work through it that would be extremely helpful.  It is probably worth noting that using a UWP app both devices work as expected so I\u0027m thinking there\u0027s something else in System.IO.Ports that\u0027s the culprit here, I just have no way of stepping it to know exactly where it\u0027s dying.",
                                           "updatedAt":  "2017-07-02T04:44:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjQ3MzUzMA==",
                                           "createdAt":  "2017-07-02T06:21:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "Dug a little deeper and while I still don\u0027t know a good way to step it, I was able to comment enough code out and keep running to isolate the crash.  It looks like in SerialStream.EventLoopRunner.WaitForCommEvent the line causing issues appears to be...\r\n\r\n if (Interop.Kernel32.WaitCommEvent(handle, eventsOccurredPtr, intOverlapped) == false)\r\n\r\nFigured I\u0027d post it now in case anyone has any info about why that might causing the Pi to reboot with the Adafruit UART-\u003eUSB adapter",
                                           "updatedAt":  "2017-07-02T06:21:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjQ3NjMxNQ==",
                                           "createdAt":  "2017-07-02T07:44:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "I\u0027m stumped as it looks like it\u0027s crashing when pinvoking Interop.Kernel32.WaitCommEvent.  I really don\u0027t understand why it would crash with one device and work fine with the other.  I do have a kernel dump from the device, but not sure how to use windbg to figure anything out from it.",
                                           "updatedAt":  "2017-07-02T07:44:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjU2NTI1Nw==",
                                           "createdAt":  "2017-07-03T07:02:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "willdean",
                                           "body":  "@los93sol The stack looks like this when you\u0027re using USB-\u003eSerial drivers:\r\n\r\n1 .NET SerialPort - a fairly thin wrapper on Win32 the serial port API (MS / OSS)\r\n2 Win32 serial port API - an very thin wrapper on the kernel mode driver (MS)\r\n3 KM driver - an extremely complex kernel mode driver written by the USB chip vendor (chip vendor)\r\n\r\nYour problem is almost certainly in \u00273\u0027 (hence one device and not the other) - it\u0027s unlikely you\u0027re going to get much help with it on this GH repo.\r\n\r\nIf you have a BSOD crash dump then you can open it in WinDbg and type something like (it tells you anyway) `!analyze` and it will give you a bunch of sometimes-useful info, but most likely you\u0027ll just see a stack trace pointing the finger at the SiLabs driver.\r\n",
                                           "updatedAt":  "2017-07-03T07:02:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjYyOTg3MA==",
                                           "createdAt":  "2017-07-03T12:14:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "@willdean Thank you for that information, that\u0027s pretty much what I was expecting, but being new to working at this level I wasn\u0027t sure.  I was able to get the crash dump, but WinDbg failed to load symbols so I wasn\u0027t able to get anything useful from it yet.  I\u0027ll do some more digging to try to figure that part out.  In the meantime, the only thing that leads me to believe it is not manufacturer driver related is the fact that using the UWP UARTSerialSample that leverages the SerialDevice API works fine.\r\n\r\nI was looking to see if the UWP API\u0027s were open sourced to see what\u0027d different between how UWP monitors for com events and how .NET core API\u0027s are doing it, but I couldn\u0027t find it anywhere on GitHub.",
                                           "updatedAt":  "2017-07-03T12:14:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjYzNDE1NQ==",
                                           "createdAt":  "2017-07-03T12:36:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "willdean",
                                           "body":  "@los93sol Some symbol server info which might be useful is here: https://msdn.microsoft.com/en-us/library/windows/desktop/ms681416(v=vs.85).aspx\r\n\r\nIt\u0027s not always easy to repro these sort of problems (and also partly why it\u0027s hard to write good USB-\u003eSerial drivers) because the Win32 serial API is deceptively complex, and different applications use the port in lots of different ways - there are a bazillion IOCTLs and some fairly complex timers, and all sorts of different ways to use the port, particularly with respect to waiting for things.   It\u0027s possible/likely that the UWP sample uses the port differently to .NET SerialPort - neither is necessarily wrong, it\u0027s just that one works better with that specific driver than the other.\r\n",
                                           "updatedAt":  "2017-07-03T12:36:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjcwMDI5Ng==",
                                           "createdAt":  "2017-07-03T17:32:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "@danmosemsft @ericstj Can either of you tell me how UWP\u0027s SerialDevice API monitors for activity?  I know SerialStream pinvokes WaitCommEvent but using this particular Adafruit adapter it causes the device to reboot so curious to see what SerialDevice is doing differently since I\u0027m not having the issue on that API surface.",
                                           "updatedAt":  "2017-07-03T17:32:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjcxMDc4NQ==",
                                           "createdAt":  "2017-07-03T18:35:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@los93sol unfortunately we have no knowledge of how the stack works below the .NET level.",
                                           "updatedAt":  "2017-07-03T18:35:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjcxMzEyMA==",
                                           "createdAt":  "2017-07-03T18:49:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shaggygi",
                                           "body":  "@los93sol @ptorr-msft might be able to help, but not sure.",
                                           "updatedAt":  "2017-07-03T18:49:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjcyMjc2Mw==",
                                           "createdAt":  "2017-07-03T19:53:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Note - https://github.com/dotnet/corefx/issues/21156 covers making S.IO.Ports work in UWP/AppContainer, which has its own issues.",
                                           "updatedAt":  "2017-07-03T19:53:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjc0MjQ0Ng==",
                                           "createdAt":  "2017-07-03T22:16:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Microsoft\u0027s USB serial port driver is named usbser.sys . That should work. If you see something else, it\u0027s a 3rd party: you\u0027d have to contact the vendor. They should have the ability to figure out the problem, but they may not support IoT use unfortunately.",
                                           "updatedAt":  "2017-07-03T22:16:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMxMjc0MzYwNA==",
                                           "createdAt":  "2017-07-03T22:27:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "willdean",
                                           "body":  "usbser.sys is a communication device class (CDC) driver - to the best of my knowledge none of the mainstream USB-Serial products use CDC (they predate CDC and usbser.sys has, historically, been execrable anyway.  It was apparently rewritten for Win10, so it might be better now, but I doubt it\u0027s used in this case).\r\n\r\nA read of the release notes of the SiLabs driver should bring forth a chilly pallor and a few beads of sweat to the forehead:  http://www.silabs.com/documents/public/release-notes/v6-7-4-driver-release-notes.txt\r\n",
                                           "updatedAt":  "2017-07-03T22:28:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMjQwNDEyMQ==",
                                           "createdAt":  "2017-09-27T04:15:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "@danmosemsft I think it is worth noting that there is a disconnect here as the device I am using is on the supported list for Windows iot so i would expect the driver would also be supported.  I plan on digging into this again in the near future.  I was able to get it working, but my solution was to comment most of the code involved to avoid the crashes.",
                                           "updatedAt":  "2017-09-27T04:15:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDMzMzI1NTYzNg==",
                                           "createdAt":  "2017-09-29T22:41:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RoySalisbury",
                                           "body":  "I think its great that people are working on this issue, even if it is just testing at the moment.  However, it would be helpful for thoes having the same issue and wanting to possible help if you were to branch that code and at least commit what you have done/tried so far.\r\n\r\nI need the SerialPort class as well because the UWP SerialDevice is even in worse shape.  \r\n\r\nThanks!\r\n",
                                           "updatedAt":  "2017-09-29T22:41:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM2NTUxNTE0MA==",
                                           "createdAt":  "2018-02-14T07:07:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "biradarsm",
                                           "body":  "I have connected a Sample Weighing Machine to Raspberry Pi 3 using Serial (RS 232 ) to USB Converter Cable on the USB Port of Raspberry Pi 3, The Serial Port device is not getting Detected in UWP Sample application.",
                                           "updatedAt":  "2018-02-14T07:07:01Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5ODU3OTk5NQ==",
                                           "createdAt":  "2018-06-19T23:46:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "I think the issue here is that the status of this is not really clear.  If someone can point me to how to properly detect IOT core I am willing to do some work get things rolling a bit",
                                           "updatedAt":  "2018-06-19T23:46:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5OTU2ODYzNw==",
                                           "createdAt":  "2018-06-22T20:12:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "Bueller?  Anyone still interested in this?",
                                           "updatedAt":  "2018-06-22T20:12:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5OTU2OTYzNQ==",
                                           "createdAt":  "2018-06-22T20:16:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "@danmosemsft, @pjanotti can you help unblock @los93sol?",
                                           "updatedAt":  "2018-06-22T20:16:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5OTU2OTc3OA==",
                                           "createdAt":  "2018-06-22T20:17:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "If it were possible to use the UWP API from .net core then I would be good to go, but as it stands today that is not possible...this isn’t a total blocker for me as I hacked out the checks and forced a custom version of System.IO.Ports but I would like to do this properly and will do the PR for it if someone can point me to how to detect iot core",
                                           "updatedAt":  "2018-06-22T20:17:19Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5OTYwNDE2Ng==",
                                           "createdAt":  "2018-06-22T22:51:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pjanotti",
                                           "body":  "@los93sol can you explain the hacks that you needed to do in System.IO.Ports? UWP serial ports should work except for port enumeration, but you mention that you are trying to do it from .NET core, could you explain a bit of the scenario?",
                                           "updatedAt":  "2018-06-22T22:51:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5OTYyMDg1Mw==",
                                           "createdAt":  "2018-06-23T01:33:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "That’s correct, UWP does work but I’m running an ASP.NET core site on my iot device.  I’ve done a lot of hacking around, I modified System.IO.Ports and would manually copy that DLL over to eliminate the check that the name starts with COM.  I also hacked up MVC and leveraged the new Razor SDK to be able to host an ASP.NET core site in a UWP app but developing that way is terrible.  If I could just use SerialPort from .net core’s API life would be good.",
                                           "updatedAt":  "2018-06-23T01:33:49Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDAwOTg3Mg==",
                                           "createdAt":  "2018-06-25T16:17:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pjanotti",
                                           "body":  "Thanks @los93sol that makes more sense to me now. We have some PRs to bring IO.Ports to Unix, however, it seems that in your case a more general solution will be the ability to use UWP APIs, in general, from .NET Core.\r\n\r\n[EDIT: remove incorrect statement about .NET Core IO.Ports, change it to refer to PRs]",
                                           "updatedAt":  "2018-06-25T17:01:14Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDAxMjYzMQ==",
                                           "createdAt":  "2018-06-25T16:26:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shaggygi",
                                           "body":  "@pjanotti this is great news to hear regarding bringing \"IO.Ports to .NET Core\"!.  Understanding there are priorities and such, do you know of an ETA to do so?  There is something I was just looking at over the weekend that needs SerialPort for Linux and right now I\u0027m limited to use with Windows based on the earlier work from dotnet/runtime#14275.  Thx",
                                           "updatedAt":  "2018-06-25T16:26:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDAxMzM1Mg==",
                                           "createdAt":  "2018-06-25T16:28:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JensNordenbro",
                                           "body":  "I second that",
                                           "updatedAt":  "2018-06-25T16:28:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDAxNDk5MQ==",
                                           "createdAt":  "2018-06-25T16:33:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pjanotti",
                                           "body":  "There are two related PRs https://github.com/dotnet/corefx/pull/29033 and https://github.com/dotnet/corefx/pull/28415 to bring it to Unifx - @wfurt can better indicate the status of these 2.",
                                           "updatedAt":  "2018-06-25T16:33:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDAxODU5MA==",
                                           "createdAt":  "2018-06-25T16:45:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "@pjanotti To clarify, I am running Windows IOT core on my iot device.  I’m a bit confused because system.io.ports is already available in .net core.  Are you referring to bringing the UWP API’s to .net core?",
                                           "updatedAt":  "2018-06-25T16:45:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDAyMjY4Mw==",
                                           "createdAt":  "2018-06-25T16:58:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pjanotti",
                                           "body":  "I stated it wrongly: it is on .NET Core but only works on Windows, PNSE on others - that\u0027s what I meant (editing the previous statement to avoid confusion).\r\n\r\n\u003e Are you referring to bringing the UWP API’s to .net core?\r\n\r\nNot \"bringing\" them to .NET Core, but, making you able to call them from any .NET Core app - a kind of interop to UWP. To be fair I haven\u0027t looked into it and I am not sure if it can be done and what may be required.",
                                           "updatedAt":  "2018-06-25T16:58:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQwMDAzNDY0MQ==",
                                           "createdAt":  "2018-06-25T17:38:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "los93sol",
                                           "body":  "Okay, that makes sense.  If you can point me to how Windows iot core is detected in source somewhere I will submit a PR with the changes so that the current System.IO.Ports will work there.  I can’t submit what I have working currently as it will break other scenarios.",
                                           "updatedAt":  "2018-06-25T17:38:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MzEzMjAyNw==",
                                           "createdAt":  "2018-11-30T08:41:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dominikjeske",
                                           "body":  "I\u0027m also interested in using System.IO.Ports on Windows IoT (on RPI) using .NET Core. It was very confusing for me that Microsoft creates nuget that is in .NET Standard but is not working on its own windows (IoT). Is this platform is still in interest of company or it is going to be shut down and Linux will be the only system on RPI because now I have impression that MS is pushing in other directions and this part will share Windows Phone.\r\n@los93sol Can you share your code for handling UART on RPI? \r\n",
                                           "updatedAt":  "2018-11-30T09:00:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MzI4ODE5OA==",
                                           "createdAt":  "2018-11-30T18:03:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RoySalisbury",
                                           "body":  "Sort of off topic ... But I gave up on Windows IoT.  The serial port support was one of the main reasons (but not the only reason).  I am now using .NET Core on Raspbian.  There is a great \"clone\" library for System.IO.SerialPort that works great.  \r\n",
                                           "updatedAt":  "2018-11-30T18:03:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MzI4ODk4NQ==",
                                           "createdAt":  "2018-11-30T18:06:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "cc @richlander ",
                                           "updatedAt":  "2018-11-30T18:06:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2ODk2OTU0NQ==",
                                           "createdAt":  "2019-03-02T23:13:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Looks like (we?) dropped the ball here and never fixed this. I am setting up an official Windows IoT run(*) and this test is failing there dotnet/corefx#35722.\r\n\r\n(*) we have still not declared formal support but the test results otherwise look good.",
                                           "updatedAt":  "2019-03-02T23:13:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNDk4NzQ1OQ==",
                                           "createdAt":  "2019-07-25T10:18:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PRIMETSS",
                                           "body":  "\u003e So I got a proof of concept working, and the short of it is that QueryDosDevice does pick up the ports (with the naming scheme seen in UWP). After relaxing SerialStream\u0027s requirement for a \"COM*\" port name, it seemed to communicate normally as well.\r\n\u003e \r\n\u003e I\u0027d like to share more of what I\u0027ve found and eventually make a pull request, but before really getting into it, I\u0027d like to confirm whether here or a new issue would be a better for this.\r\n\r\nHi , Did you end up submitting PR for your test? As I cant find it so far?\r\n",
                                           "updatedAt":  "2019-07-25T10:18:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NTc4MjA4MQ==",
                                           "createdAt":  "2020-01-17T20:25:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "@PRIMETSS did your commit make it to an official PR?",
                                           "updatedAt":  "2020-01-17T20:25:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45prHR",
                                           "createdAt":  "2021-11-12T15:59:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danineuss",
                                           "body":  "Ping: do I understand correctly that this issue remains unresolved as of today? Thanks already for your hard work 💛 ",
                                           "updatedAt":  "2021-11-12T15:59:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc454oik",
                                           "createdAt":  "2021-11-17T03:44:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PRIMETSS",
                                           "body":  "I had (from memory) a near complete PR in the corefx repo, before the repos got up-shifted to the new \u0027runtime\u0027 repos that addressed the issue with SerialPort names on Win10IoT that I believe was working.\r\nWe were trying to complete it but ran out of time as the deadline expired \u0026 also something else happened like new version announced or something like that. Apologies! Never got back to it.\r\n\r\nJust tried it with Pi with dotnetcore v5.0.0403 (latest) on Linux (Raspbian) [Works as expected], and Win10IoTCore [Broken]\r\nCalling SerialPort.GetPortNames() returns garbage characters from un-initialised RegistryKey.\r\n\r\n`# of Ports: 1\r\nPorts: 줄膉￿￿敖苭ၔ裓藀↑☺쀀器苭竁腽﨔苭陉腽☻က蔀࿰뤂诅ꂀ膉☺뤂诅煮苭虵腶媗㼡媗㼡難苭螿腶♥槐쀢☺變苭璛腴敖苭쭐膉倀㼡☺ဈ裓槔쀢ৈজজঀজঀ觖♦\"뀴謣■\u0026﬘苭疃謣觖♦`\r\n\r\nIs that what your experiencing @danineuss ?\r\n\r\nBasically it\u0027s doing an Interop call to Interop.Kernel32.QueryDosDeviceW()\r\n\r\n[https://github.com/PRIMETSS/corefx/blob/primetss/system.io.ports/src/System.IO.Ports/src/System/IO/Ports/SerialPort.Win32.cs](url)",
                                           "updatedAt":  "2021-11-17T03:44:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc455gG7",
                                           "createdAt":  "2021-11-17T09:04:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danineuss",
                                           "body":  "@PRIMETSS \r\nYes exactly, this is what I could observe as well. First we tried using a specific class of `FTDX_NET`, but that caused other issues. I reverted to using `SerialPort.GetPortNames()` and indeed, using the `libftdi-dev` drivers, I managed to run it on a Raspbian installation. Win10IoTCore seems broken for me as well.",
                                           "updatedAt":  "2021-11-17T09:04:33Z"
                                       }
                                   ],
                         "totalCount":  68
                     },
        "title":  "Serial Port support for Raspberry Pi with Windows IoT",
        "labels":  [
                       "enhancement",
                       "os-linux",
                       "os-windows",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/27729",
        "createdAt":  "2018-10-25T00:19:49Z",
        "number":  27729,
        "author":  "maloo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-09-02T18:09:37Z",
        "body":  "Some USB serial port drivers does not support the EscapeCommFunction call made indirectly in SerialPort.Open at https://github.com/dotnet/corefx/blob/master/src/System.IO.Ports/src/System/IO/Ports/SerialStream.Windows.cs#L223.\r\nThese drivers don\u0027t use/support RTS/DTR so SerialPort.DtsEnable should always be false. SerialPort.Open always sets DtrEnable. This will trigger a DCB change with DTR_CONTROL_DISABLE (which succeeds). But this call is always followed by the EscapeCommFunction(DtsEnable ? SETDTR : CLRDTR) call which fails and triggers an IOException with error code 0x1f.\r\nI propose that you don\u0027t call EscapeCommFunction when you already disabled this function using the DCB just above. Or at least allow this behavior to be overridden so SerialPort can be used with all USB serial port drivers.\r\nUsing WSL cu, Win32 or other terminal programs works just fine with these drivers. It is only .Net SerialPort that can\u0027t handle this and throws an exception in this non fatal error case.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOipc7Ng==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMzQwNzAzNg==",
                                           "createdAt":  "2018-10-26T13:27:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maloo",
                                           "body":  "I dug a bit deeper and think the error reported back from Windows could be a compatibility issue between usbser.sys host driver and Linux Gadget (2.4 in this case) device driver. Linux kernel src/docs indicate that driver will stall if RTS function is received.\r\nBut my last conclusion still stands. It must be possible to skip sending RTS function when using the .Net SerialPort class w/o flow control enabled.",
                                           "updatedAt":  "2018-10-26T13:27:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzMzQwNzk0Mw==",
                                           "createdAt":  "2018-10-26T13:30:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "maloo",
                                           "body":  "BTW, same C# code works fine on same machine using WSL Ubuntu 18.04 and .Net Core 3.0 which just added SerialPort support.",
                                           "updatedAt":  "2018-10-26T13:30:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2NjU5OTU4Ng==",
                                           "createdAt":  "2019-02-23T01:07:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Do you want to propose a PR?",
                                           "updatedAt":  "2019-02-23T01:07:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44y4CO",
                                           "createdAt":  "2021-10-27T12:11:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "khdi",
                                           "body":  "Any update on this issue? I\u0027m still having this problem with the nuget System.IO.Ports 6.0.0.0.-rc.2.2.",
                                           "updatedAt":  "2021-10-27T12:11:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6JmbIn",
                                           "createdAt":  "2024-08-24T21:55:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eMuonTau",
                                           "body":  "I am getting `A device attached to the system is not functioning` error for a barcode reader which using GigaDevice GD32 MCU.\r\n\r\nUnix version of SerialStream is fixed by https://github.com/dotnet/runtime/pull/48577. @sleeuwen asked to change Windows version too but did not get a response. @sleeuwen, since you made the changes for Unix version, can you create another PR for Windows version? If you want me to create a PR with exact same changes please let me know",
                                           "updatedAt":  "2024-08-24T21:55:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Klzs2",
                                           "createdAt":  "2024-09-02T18:09:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eMuonTau",
                                           "body":  "@danmoseley I can create a PR based on https://github.com/dotnet/runtime/pull/48577",
                                           "updatedAt":  "2024-09-02T18:09:37Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "SerialPort Open fails with 0x8007001f",
        "labels":  [
                       "bug",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/27773",
        "createdAt":  "2018-10-30T21:36:03Z",
        "number":  27773,
        "author":  "krwq",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCRmA1w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SupinePandora43",
                                            "createdAt":  "2022-03-06T15:54:52Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-03-19T11:01:09Z",
        "body":  "Collective issue for all issues while work is still happening.\r\nMost of the issues were identified when working on async implementation: https://github.com/dotnet/corefx/pull/33027\r\n\r\nThere are still lots of failures, all of them are marked with custom `[KnownFailure]` - most of the tests won\u0027t run on CI because it doesn\u0027t have physical port.\r\n\r\nThings known to still be broken on Linux:\r\n- [x] (Issue dotnet/corefx#33374; PR dotnet/corefx#35126) System.IO.Ports package cannot be used with netcoreapp2.1 even though it depends on netstandard2.0 (requires 3.0)\r\n- [ ] software emulated RTS (XonXoff) is not working (or at least all related tests are failing)\r\n- [ ] There are issues with parity replacement - likely just doesn\u0027t work\r\n- [ ] There are issues with DTREnable - those could be test issues\r\n- [ ] BytesToWrite (looks ok through code inspection but seem to be misreporting, possibly data from the queue should be added there)\r\n- [ ] SerialPort.ReadBufferSize is not respected (see below conversation)\r\n- [ ] in certain cases DataReceived event can fire more than once (SerialStream does it correctly but code on top of that in SerialPort is not) - this is likely also issue on Windows - I\u0027ve added a comment why this happens how this can be fixed on Linux (likely something similar can be done on Windows) - we need to explore if this is something we want to fix\r\n- [ ] Some tests related to StopBits are failing when measuring the transmission time - this is likely a test issue but needs to be looked at to double check\r\n- [x] non standard BaudRates are currently not supported but I\u0027ve seen some article explaining how to emulate those - there are also couple of test failures (or rather hangs) but likely those are test issues (except for when non-standard baud rate is used) - currently allowed baud rate ranges are hard coded on linux (couldn\u0027t find an easy way to get that info from OS - perhaps just trying to set it and seeing if OS allows it is a way to go)\r\n  - [x] (#33747) High baud rates - I\u0027ve removed the artificial limit\r\n  - [X] (#80534) Custom baud rates\r\n- [x] flushing is not working (currently no-op)\r\n- [ ] BytesToRead may return -1 when error occurs which is causing APIs such SerialPort.ReadLine throw ArgumentException in some cases where there are errors during communication\r\n- [ ] [test] HasHardwareFlowControl is not working correctly - this can be checked similarly as RTS related tests are doing it (this might have a broader meaning than just RTS/CTS so needs more look)\r\n- [x] (#33258) Uart port is not always detected\r\n- [x] (#33221) Dispose implementation (i.e. Shutdown call might need to be moved to a new SafeHandle class)\r\n  - [x] exclusive access need to be removed explicitly since some devices do not get rid of it making device not openable after closing",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOV-3oWQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4NjQ2OTg5MQ==",
                                           "createdAt":  "2019-04-24T23:58:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "Moving this to future since I\u0027ve addressed issues which I found useful to fix. Remainder is stuff which is very rarely used and we can address as we need.\r\n\r\nPlease upvote/comment on issues if you find this and want to have something sooner so that we can prioritize accordingly.",
                                           "updatedAt":  "2019-04-24T23:58:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1Mjk1MzMxNQ==",
                                           "createdAt":  "2019-11-12T15:50:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ss4adam",
                                           "body":  "Setting SerialPort.ReadBufferSize property doesn\u0027t seem to affect the Linux tty buffer:\r\n\r\n_serialPort.ReadBufferSize = 3000000; // three megabytes, this works fine in windows and lets me read a massive chunk of data, but in Linux I can\u0027t seem to read anything past 4096 bytes.\r\n\r\nlater if I use _serialPort.Read(dataBuffer, 0, dataBuffer.Length); then I miss anything outside of this 4K range. I like reading a large buffer rather than lots of small reads because I\u0027m sending files and worried that the computer freezing up could make me lose a piece of the data in the middle of the transfer\r\n\r\nI know in the past the linux kernel had an internal buffer of 4096 bytes.\r\nIf this buffer is full and a new character arrives on the serial port,\r\nthe oldest character in the buffer will be overwritten and thus will be lost. I\u0027m using RedHat7\r\n\r\nIs this a problem that .NET can even fix if the kernel is limiting the buffer size? I\u0027m not strong at Linux so I\u0027m not sure. If this can\u0027t be fixed, should an exception be thrown?",
                                           "updatedAt":  "2019-11-12T15:50:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MzE1ODI3OQ==",
                                           "createdAt":  "2019-11-12T23:05:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "Hi @ss4adam, yes, this is fixable (assuming kernel allows you to do so) although we might not have cycles to fix this so any help would be appreciated (note: we will be doing repo move soon so might be better to wait until that\u0027s finished).\r\n\r\nI\u0027ll update the list shortly",
                                           "updatedAt":  "2019-11-12T23:05:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MzE3MTAwOQ==",
                                           "createdAt":  "2019-11-12T23:50:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA047-g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krwq",
                                                                               "createdAt":  "2019-11-13T00:23:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ss4adam",
                                           "body":  "Hey @krwq, not sure what \"might not have cycles to fix\" means, but I would love to help. Just give me some direction so that I know where I\u0027m looking to make the fix since I\u0027m new to github (I\u0027ll probably need to brush up on com development). Another solution I was thinking about in the case that tty buffer might not be dynamically changeable (I looked at some linux source and saw it was hardcoded in a header file N_TTY_BUF_SIZE), maybe have it just read the 4k buffer in a looping/polling manner under the covers and update bigger buffer incrementing the index as it moves along, much like normal stream reading, but then .NET users will be able to use _serialPort.ReadBufferSize = 3000000 and never know the that the linux buffer was actually never changed. ",
                                           "updatedAt":  "2019-11-13T00:07:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MzE4MTMzOA==",
                                           "createdAt":  "2019-11-13T00:30:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@ss4adam \"no cycles\" = no time\r\n\r\nThanks for offering the help!\r\n\r\nNote corefx will not merge any PRs after tomorrow and new repo will show up which merges coreclr and corefx. I\u0027d recommend to wait until then before making PRs.\r\n\r\nThe fix will likely be here:\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.IO.Ports/src/System/IO/Ports/SerialStream.Unix.cs#L373\r\n\r\nbut you can also backtrace from here:\r\nI\u0027d start with searching who uses this:\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.IO.Ports/src/System/IO/Ports/SerialPort.cs#L377\r\n\r\nYou\u0027ll likely need to add whatever syscall you need in one of those places:\r\nhttps://github.com/dotnet/corefx/tree/master/src/System.IO.Ports/src/Interop/Unix\r\nhttps://github.com/dotnet/corefx/tree/master/src/Common/src/Interop/Unix\r\n\r\n\r\n",
                                           "updatedAt":  "2019-11-13T00:30:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MzE4NzU0Mg==",
                                           "createdAt":  "2019-11-13T00:56:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@ss4adam also, general contributing info here: https://github.com/dotnet/corefx/#contributing-guide\r\n\r\nNote, this repo will be merging into another one in a few days. Don\u0027t panic -- if you start your work against this one, it will be trivial to continue the work in the new one.",
                                           "updatedAt":  "2019-11-13T00:56:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MzI5MDk2Mw==",
                                           "createdAt":  "2019-11-13T08:20:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "valeriob",
                                           "body":  "Just out of curiosity, @ss4adam why do you need such a large buffer ?\r\nWhat speed is the serial configured to, and why are\u0027nt you able to keep up ?\r\n",
                                           "updatedAt":  "2019-11-13T08:20:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MzQzNTIzOQ==",
                                           "createdAt":  "2019-11-13T14:47:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ss4adam",
                                           "body":  "@valeriob Each machine I use is different, the highest is usually over 300K baud, but most are 115200 (which would never have a problem with 4k buffer). I am able to keep up using BaseStream.Read() in a polling manner, but on windows environments I\u0027m able to make the buffer bigger, which is useful if the application freezes and I miss one of my polling iterations.",
                                           "updatedAt":  "2019-11-13T14:47:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MzQ0MDQxOQ==",
                                           "createdAt":  "2019-11-13T14:59:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "valeriob",
                                           "body":  "Thanks for explaining @ss4adam, my 2c : if you need that reliabilty you should think about doing your own polling loop in a different thread, that\u0027s how i handle it, it works fine 😄 ",
                                           "updatedAt":  "2019-11-13T14:59:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MzQ0MjU0MA==",
                                           "createdAt":  "2019-11-13T15:04:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ss4adam",
                                           "body":  "@valeriob I actually do it it\u0027s own thread, but I\u0027m still seeing dropped data when the machine gets overloaded with other applications, not exactly sure why yet.",
                                           "updatedAt":  "2019-11-13T15:04:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1OTY1OTE0Mg==",
                                           "createdAt":  "2019-11-29T04:53:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "skang0401",
                                           "body":  "I have a device with a baud rate of 14400. How can I use it under Linux with system.IO.Ports",
                                           "updatedAt":  "2019-11-29T04:53:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MDE0MjY4Nw==",
                                           "createdAt":  "2019-12-01T18:41:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@skang0401 currently not supported. See note above about \"Non-standard low baud rates\" if you\u0027re interested in adding support",
                                           "updatedAt":  "2019-12-01T18:41:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MTA2MDQ2Nw==",
                                           "createdAt":  "2019-12-03T08:42:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ellerbach",
                                           "body":  "\u003e I have a device with a baud rate of 14400. How can I use it under Linux with system.IO.Ports\r\n\r\n@skang0401 if you need this quite fast, you can use a project I\u0027ve been doing before the Linux System.IO.Ports which is perfectly working for low baud rates starting at 50. Check here: https://github.com/Ellerbach/serialapp/, there is an existing Nuget as well: https://www.nuget.org/packages/NetCoreSerial/",
                                           "updatedAt":  "2019-12-03T08:42:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MTQwMTQzOA==",
                                           "createdAt":  "2019-12-03T23:18:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@Ellerbach I\u0027m not seeing you using any custom dividers in your code, I wonder if we could just simply add this specific baud rate in order to get this supported (assuming it\u0027s available on all OSes)",
                                           "updatedAt":  "2019-12-03T23:18:41Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MTUzMDg5Nw==",
                                           "createdAt":  "2019-12-04T08:25:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Ellerbach",
                                           "body":  "\u003e using any custom dividers in your code\r\n\r\nCorrect, those are the official baud rates. \r\n\r\n\r\n\u003e I wonder if we could just simply add this specific baud rate in order to get this supported\r\n\r\nIt needs to be tested. My guess regarding the various sources is that the final check of being or not a valid baud rate is done at the driver level. So if the hardware supports any baud rate and the driver will be ok with any value, it should just support it. Historically, those baud rates are what they are because of specific oscillators used and then frequencies were basically multiplied. In our days, most serial related hardware can support a larger range of rates based either on software serial either on precise high frequency dividers. ",
                                           "updatedAt":  "2019-12-04T08:25:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MTk3NDE1Ng==",
                                           "createdAt":  "2019-12-05T05:21:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "skang0401",
                                           "body":  "@Ellerbach \r\nI have also tested the serialapp project. Although it can be started normally, it does not seem to work properly at the baudrate I want.The result is that the custom baudrate does not take effect.\r\n@krwq \r\nI use ”cutecom” on the official Linux OS of the Raspberry Pi4. It can work normally at a baud rate of 14400.\r\nHere is the repository of cutecom: https://gitlab.com/cutecom/cutecom\r\nIs it possible to refer to his implementation？",
                                           "updatedAt":  "2019-12-05T05:22:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2MjI1MDYzMQ==",
                                           "createdAt":  "2019-12-05T18:18:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@skang0401 unfortunately that\u0027s GPL project which we can\u0027t reference here. As mentioned above I think this can be achieved with\r\n`serial_struct.baud_base` \u0026 `serial_struct.custom_divisor` but this will require a bit of testing to claim that we support it and I currently don\u0027t have much time to do that (leaving on paternal leave in ~1month with some vacation in between).\r\n\r\nIf you have some time doing the testing I can support you with the pull request",
                                           "updatedAt":  "2019-12-05T18:18:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CtM-d",
                                           "createdAt":  "2022-05-05T23:49:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gmkado",
                                           "body":  "@krwq has there been any progress on the non-standard low baud rates?  This [pyserial implementation](https://github.com/pyserial/pyserial/blob/master/serial/serialposix.py#L155) seems to work for my application but now I\u0027m trying to port it over to dotnet and would be nice if this were supported",
                                           "updatedAt":  "2022-05-05T23:49:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CudtD",
                                           "createdAt":  "2022-05-06T10:31:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCbrWfw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gmkado",
                                                                               "createdAt":  "2022-05-06T16:19:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "jfsanchezaguilar",
                                                                               "createdAt":  "2022-05-06T23:06:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "krwq",
                                           "body":  "@gmkado unfortunately we\u0027re not currently doing any active work for serial ports in dotnet/runtime. There is an orthogonal effort going on in dotnet/iot though: https://github.com/dotnet/iot/issues/1832 - you can mention your scenario in there.\r\n\r\nI\u0027d be happy to review any contributions here...",
                                           "updatedAt":  "2022-05-06T10:31:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RVMGj",
                                           "createdAt":  "2022-12-24T10:54:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GryBsh",
                                           "body":  "\u003e @krwq has there been any progress on the non-standard low baud rates? This [pyserial implementation](https://github.com/pyserial/pyserial/blob/master/serial/serialposix.py#L155) seems to work for my application but now I\u0027m trying to port it over to dotnet and would be nice if this were supported\r\n\r\nIt doesn\u0027t support non-standard high bit rates on anything but Windows it seems either. I\u0027m trying to set 111856, and it chokes on it. I\u0027m sorry but the above deflection to the IoT team is subpar. This isn\u0027t some implementational difference of opinion, this is the behavior of straight broken software.",
                                           "updatedAt":  "2022-12-24T10:54:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Sl6c-",
                                           "createdAt":  "2023-01-17T16:14:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC0kP_g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "GryBsh",
                                                                               "createdAt":  "2023-01-20T20:05:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "krwq",
                                           "body":  "@GryBsh seems the issue you\u0027re mentioning might be addressed here: https://github.com/dotnet/runtime/pull/80534",
                                           "updatedAt":  "2023-01-17T16:14:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5X54sr",
                                           "createdAt":  "2023-03-18T09:57:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "slyshykO",
                                           "body":  "Is it possible to add an ability to enable RS-485 support on Linux according to https://www.kernel.org/doc/Documentation/serial/serial-rs485.txt ?\r\n\r\nThanks in advance.",
                                           "updatedAt":  "2023-03-18T09:57:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5X6Enw",
                                           "createdAt":  "2023-03-18T12:44:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4FtJw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krwq",
                                                                               "createdAt":  "2023-03-18T13:03:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Would that need a new API @slyshykO ?\nWould it be something you\u0027d be interested in working on?",
                                           "updatedAt":  "2023-03-18T12:44:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5X7ehZ",
                                           "createdAt":  "2023-03-19T11:01:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "slyshykO",
                                           "body":  "@danmoseley \r\nIt looks like this feature needed a new API.\r\nIt needs to cover struct serial_rs485 from Linux API and add the possibility to apply it through ioctl call to the serial port file descriptor.\r\n\r\nI can help with tests on the proper device, but I have a little experience in C#.",
                                           "updatedAt":  "2023-03-19T11:01:08Z"
                                       }
                                   ],
                         "totalCount":  24
                     },
        "title":  "SerialPorts Linux issues",
        "labels":  [
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/27941",
        "createdAt":  "2018-11-16T21:21:09Z",
        "number":  27941,
        "author":  "BenjaminHolland",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODP6k-Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YZahringer",
                                            "createdAt":  "2019-09-14T16:25:50Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "danielchalmers",
                                            "createdAt":  "2019-09-15T04:35:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WilliamForsdal",
                                            "createdAt":  "2020-02-12T22:50:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mrtaikandi",
                                            "createdAt":  "2020-09-04T06:26:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jonsagara",
                                            "createdAt":  "2020-09-13T20:22:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "QubitTooLate",
                                            "createdAt":  "2021-01-14T19:42:30Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kronic",
                                            "createdAt":  "2021-12-24T06:44:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "SupinePandora43",
                                            "createdAt":  "2022-03-06T15:56:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2022-09-30T16:17:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jnnrz",
                                            "createdAt":  "2022-10-10T23:18:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "RobMalvern",
                                            "createdAt":  "2022-11-10T13:06:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lamer0k",
                                            "createdAt":  "2023-12-27T18:04:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Levi--G",
                                            "createdAt":  "2024-07-08T12:18:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "c0nstexpr",
                                            "createdAt":  "2025-02-25T12:12:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Charlieface",
                                            "createdAt":  "2025-09-11T16:11:20Z"
                                        }
                                    ],
                          "totalCount":  15
                      },
        "updatedAt":  "2025-02-25T12:13:12Z",
        "body":  "The API for the serial port has barely changed since it was introduced, despite significant changes in language features and even tools. Now that the package can be updated OOB, it would seem like a good time to finally update this component, or do something similar to what happened with the .net JSON serializer and designate a pseudo-official third party option. I\u0027d like to start brainstorming how this API should evolve. \r\n\r\n\r\n### Async\r\nApplications utilizing serial ports are arguably more susceptible to slowdowns than network apps due to the relatively slow speeds of serial ports. Having an API that forces an app blocking until a device that\u0027s communicating at 2800 baud completes the transfer when every other IO facility, most of which are consistently faster, has had some form of asynchronous ability built in is just sad.\r\n\r\nI propose adding async overloads for then Read, Write, Open, and Close methods. For targets that don\u0027t support async, Begin/End methods should be provided instead. These methods should respect the timeout settings on the port, or provide additional overloads that specify a timeout. \r\n\r\n### Memory/Span Overloads\r\nThe work being done on efficient buffers is extremely useful for applications using serial ports. Serial Ports are often used in IoT and embedded applications where memory and processing power is at a premium. \r\n\r\nI propose adding Read/Write overloads that use Span\u003cbyte/char\u003e and ReadOnlySpan\u003cbyte/char\u003e. This would allow easy integration with the Pipelines namespace. \r\n\r\n### Stream Compatibility\r\nIt would be extremely useful to be able to treat the serial port as a stream, but using the serial ports BaseStream property is more or less undocumented and it\u0027s behavior is undefined. Something should be done to make this compatible with core IO stream utilities.\r\nOptions:\r\n\r\n- Provide a method for producing a reader and a writer stream\r\n- Provide documentation for the BaseStream\r\n- Change SerialPort to directly subclass BaseStream\r\n- Attach the serial port interface directly to the SerialStream class and expose it.\r\n\r\n### Mocking/Testing Interface\r\nNot having an interface for a serial port complicates testing. Providing an interface would make this easier. \r\n\r\n### Remove or Explain Component Superclass.\r\nI\u0027m not sure why, and I can\u0027t find any justification for, attaching UI dev facilities directly onto a mid-level IO facility. Socket isn\u0027t a component. Nor are Pipes. Both seem to allow remoting by inheriting from `MarshalByRefObject`. Can this dependency be removed? Especially in .net core, it seems out of place.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOn9hpyg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQzOTYxNjAzOQ==",
                                           "createdAt":  "2018-11-17T13:15:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "shaggygi",
                                           "body":  "Referencing...\r\n- https://github.com/dotnet/corefx/issues/18012\r\n- https://github.com/dotnet/corefx/issues/33374",
                                           "updatedAt":  "2018-11-17T13:15:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MDA0NDE0MQ==",
                                           "createdAt":  "2018-11-19T21:15:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "So just for reference SerialPort.BaseStream has async APIs and they currently work on Linux - I saw Windows is using completion ports so I presume that also works but I haven\u0027t tested.",
                                           "updatedAt":  "2018-11-19T21:16:13Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ0MDM3OTY0Nw==",
                                           "createdAt":  "2018-11-20T18:21:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BenjaminHolland",
                                           "body":  "@krwq Yeah, BaseStream \"works\" in the sense that you can call ReadAsync and WriteAsync and have them work under ideal conditions. I can only assume they follow the behavior described in the `Stream` documentation.",
                                           "updatedAt":  "2018-11-20T18:21:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MTk3NTAwMw==",
                                           "createdAt":  "2019-02-08T22:54:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCH02_Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "BinaryCraX",
                                                                               "createdAt":  "2021-02-10T19:22:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "kronic",
                                                                               "createdAt":  "2021-12-24T06:45:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "hansmbakker",
                                           "body":  "What about an implementation of [`IDuplexPipe`](https://docs.microsoft.com/en-us/dotnet/api/system.io.pipelines.iduplexpipe?view=dotnet-plat-ext-2.1) for SerialPort?\r\n\r\n(also explained at https://blog.marcgravell.com/2018/07/pipe-dreams-part-2.html)",
                                           "updatedAt":  "2019-02-08T22:56:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ2MTk4MDgxNA==",
                                           "createdAt":  "2019-02-08T23:22:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BenjaminHolland",
                                           "body":  "That seems like a great idea, but I haven\u0027t looked at the Pipelines project\nin a bit. From what i remember it supports most of the operations.\n\nOn Fri, Feb 8, 2019, 14:55 Hans Bakker \u003cnotifications@github.com wrote:\n\n\u003e What about an implementation of IDuplexPipe\n\u003e \u003chttps://docs.microsoft.com/en-us/dotnet/api/system.io.pipelines.iduplexpipe?view=dotnet-plat-ext-2.1\u003e\n\u003e for SerialPort?\n\u003e\n\u003e —\n\u003e You are receiving this because you authored the thread.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/dotnet/corefx/issues/33560#issuecomment-461975003\u003e,\n\u003e or mute the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/ACYwXf6fIJjloe3kVthsvSsvBsxI0Z4Yks5vLgBTgaJpZM4Ym_GU\u003e\n\u003e .\n\u003e\n",
                                           "updatedAt":  "2019-02-08T23:22:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNjkxMjc3Mw==",
                                           "createdAt":  "2020-03-31T22:23:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "cc: @krwq ",
                                           "updatedAt":  "2020-03-31T22:23:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6f2GnK",
                                           "createdAt":  "2025-02-25T12:13:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "c0nstexpr",
                                           "body":  "Is there any progress? Especially the async overloads",
                                           "updatedAt":  "2025-02-25T12:13:11Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "SerialPort API Update",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67461",
        "createdAt":  "2018-12-17T00:46:46Z",
        "number":  67461,
        "author":  "gmgallo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCV4yMA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kewudu",
                                            "createdAt":  "2019-06-22T02:31:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YZahringer",
                                            "createdAt":  "2019-09-25T11:00:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "juaal12",
                                            "createdAt":  "2019-10-08T11:19:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martinjoshua",
                                            "createdAt":  "2020-04-29T18:41:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "rolfik",
                                            "createdAt":  "2019-04-09T12:43:26Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "cBashTN",
                                            "createdAt":  "2019-04-18T19:43:33Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2022-11-23T02:26:24Z",
        "body":  "System.PlatformNotSupportedException: \u0027Enumeration of serial port names is not supported on the current platform.\u0027\n.NET Core also has a Windows.Devices.SerialCommunication.SerialDevice() class, which lacks a port enumeration function. A clarification is needed to know if SerialDevice() is deprecated in favor of SerialPort() but kept for backward compatibility with older code.\n\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: fa765d00-19f8-74e4-4be1-1d7f1e7dc6ce\n* Version Independent ID: 260749e3-69c6-a370-89b0-4f90d944fac7\n* Content: [SerialPort Class (System.IO.Ports)](https://docs.microsoft.com/en-us/dotnet/api/system.io.ports.serialport?view=netframework-4.7.2)\n* Content Source: [xml/System.IO.Ports/SerialPort.xml](https://github.com/dotnet/dotnet-api-docs/blob/master/xml/System.IO.Ports/SerialPort.xml)\n* Product: **dotnet-api**\n* GitHub Login: @mairaw\n* Microsoft Alias: **mairaw**",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSj0kEg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5AwK5I",
                                           "createdAt":  "2022-03-20T08:55:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "misaya",
                                           "body":  "did this issue solved?",
                                           "updatedAt":  "2022-03-20T08:55:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AwK5M",
                                           "createdAt":  "2022-03-22T12:15:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "misaya",
                                           "body":  "The ```SerialDevice``` class was suggested in UWP.",
                                           "updatedAt":  "2022-03-22T12:15:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AwNcc",
                                           "createdAt":  "2022-04-01T22:19:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "cc @krwq @wfurt ",
                                           "updatedAt":  "2022-04-01T22:19:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Js2ve",
                                           "createdAt":  "2022-09-05T02:53:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "trantamcdt92",
                                           "body":  "I also encountered this issue on MacOS (12.0), is there a way to fix this issue? ",
                                           "updatedAt":  "2022-09-05T02:53:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KPSQS",
                                           "createdAt":  "2022-09-13T14:45:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gmgallo",
                                           "body":  "I ended up writing my own serial port enumeration lib using Win32 system calls. Unfortunately I know nothing about MacOS. You will have to write your own. Sorry.\r\nBe aware that the NET SerialPort module also has problems. Under heavy data streams it randomly misplaces a bunch of bytes out of order specially at the start of the stream. I also ended up writing my own C++ lib with native system calls to avoid it. There is ample discussion about this problem in StackOverflow.",
                                           "updatedAt":  "2022-09-13T14:45:07Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "SerialPort.GetPortNames() throws a PlatformNotSupportedException in UWP ARM platforms",
        "labels":  [
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/28639",
        "createdAt":  "2019-02-07T15:01:04Z",
        "number":  28639,
        "author":  "davidwallis",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-23T02:26:10Z",
        "body":  "I\u0027ve got a device that uses XON/XOFF Flow control..\r\n\r\nI\u0027ve knocked up some sample code to send data to it... please excuse the hacked together nature of it but it is here: https://github.com/davidwallis3101/SerialGateway/blob/master/SerialGateway/SerialHelper.cs\r\n\r\nIm using the latest nuget pre-release in .net core 3 with visual studio 2019 preview 2..\r\n\r\nIf I run the code on windows 10 - works fine the, the device gets the \u0027on\u0027 and \u0027off\u0027 toggled correctly.\r\n\r\nif I then try it on Ubuntu 16.04 - it doesnt work and appears like its ignoring the XON/XOFF values, which the device uses to block comms when it cannot process them, so there is a window when they are permitted..\r\n\r\nI\u0027m using the same USB-RS232 adapter between the machines, I\u0027ve tried different chipsets CH vs PL and no difference.. \r\n\r\nIs there something that needs doing on the host, outside of dotnet for the this to work on linux, is it supported / tested?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOJRLkQQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ3MjEzNjQzOQ==",
                                           "createdAt":  "2019-03-12T18:55:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "We\u0027re depending on the community for the Unix implementation of System.IO.Ports. Marking as up-for-grabs for anyone interested in this space to dig into.",
                                           "updatedAt":  "2019-03-12T18:55:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNzc3MzIxOQ==",
                                           "createdAt":  "2019-08-02T16:56:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwallis",
                                           "body":  "been doing various amounts of digging, all seem to refer back to it could be an underlying issue in linux kernels and not related to this implementation. \r\n\r\nhttps://bugzilla.kernel.org/show_bug.cgi?id=197109",
                                           "updatedAt":  "2019-08-02T16:56:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUxNzk1OTQ3OQ==",
                                           "createdAt":  "2019-08-03T22:42:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "davidwallis",
                                           "body":  "Ok, so based on digging around on those links I decided to try a cable with the FTDI232RL chipset - and this works a lot better! So ultimately I think this is not related to this code base rather a limitation of the available drivers for the underlying OS.\r\n\r\nSo if someone stumbles on this post, I\u0027ve tried using the following USB to DB9 adapters:\r\n\r\nUnsuccessful when on linux or docker (aspnet:3.0-buster-slim):\r\n\r\nProlific 2303\r\nCH340\r\n\r\nWorking: \r\n\r\nFTDI232RL\r\n\r\n(full description to aid searching when links are broken in 2 weeks time!) DSD TECH SH-RS232A USB to RS232 Serial DB9 Adapter Cable with FTDI FT232 Chip for \r\nWindows,Linux,Mac OS(5.9FT/1.8M) From amazon here: \r\nhttps://www.amazon.co.uk/dp/B07MYYCMJT/ref=cm_sw_em_r_mt_dp_U_C0GrDbF2EGDCT\r\n\r\nInitial testing only - but my code retries sending a control command up to 25 times until I see an ACK and I add a delay on each iteration of the retry loop, I could get up to 20 retries reliably... \r\n\r\nI\u0027ve hit a max of 2 so far!\r\n\r\nI think realistically this issue could be closed but it might be worth calling out in the docs that not all functionality is supported by every driver implementation.\r\n\r\nDavid",
                                           "updatedAt":  "2019-08-03T22:42:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyMTk5NTA3Mw==",
                                           "createdAt":  "2020-04-30T17:29:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "Just a sanity check, have you set Handshake field on SerialPort? I recall there were some issues around this on Linux but can\u0027t remember the details anymore (I also didn\u0027t have good device to test this scenario further)",
                                           "updatedAt":  "2020-04-30T17:29:07Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "System.IO.Ports Flow Control?",
        "labels":  [
                       "help wanted",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30850",
        "createdAt":  "2019-09-13T17:02:20Z",
        "number":  30850,
        "author":  "krwq",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODP6nNA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dquist",
                                            "createdAt":  "2019-09-13T17:10:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "YZahringer",
                                            "createdAt":  "2019-09-28T16:09:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Tragetaschen",
                                            "createdAt":  "2019-10-11T14:10:54Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "binki",
                                            "createdAt":  "2019-12-17T18:27:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ptasev",
                                            "createdAt":  "2021-03-24T19:24:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ygoe",
                                            "createdAt":  "2022-11-30T19:56:07Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "chsbuffer",
                                            "createdAt":  "2024-04-10T01:16:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lizalc",
                                            "createdAt":  "2024-11-26T23:52:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Outlivier",
                                            "createdAt":  "2025-03-07T11:18:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ChristofferGersen",
                                            "createdAt":  "2025-06-25T12:30:16Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Charlieface",
                                            "createdAt":  "2025-09-11T16:13:32Z"
                                        }
                                    ],
                          "totalCount":  11
                      },
        "updatedAt":  "2024-04-12T17:39:44Z",
        "body":  "Current Windows implementation does not respect cancellation but Unix implementation does.\r\n\r\nWe should consider doing similar effort for Windows.\r\n\r\ncc: @dquist\r\nCreated per: https://github.com/dotnet/corefx/issues/25154#issuecomment-531217979\r\n\r\nMarking as 5.0 to consider. Note that netfx also does not support cancellation there.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOelIK2g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMTMyODE4NA==",
                                           "createdAt":  "2019-09-13T17:41:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dquist",
                                           "body":  "\u003e most of the time the Read/WriteTimeout should be used for cancellation since this covers most typical scenarios and I believe they work correctly on both platforms\r\n\r\nHow would that work since that\u0027s a `SerialPort` property and `SerialPort` doesn\u0027t have any async methods? The only way to do an async read is through the BaseStream instance.\r\n\r\nIf I set a timeout value and call `SerialPort.Read`, that\u0027s a synchronous call and will block my UI thread, forcing me to wrap it in a Task.Run(). Is that correct?",
                                           "updatedAt":  "2019-09-13T17:41:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMTMyODcwOQ==",
                                           "createdAt":  "2019-09-13T17:43:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dquist",
                                           "body":  "Btw here\u0027s an extension method I wrote to wrap the `ReadAsync` call in a Task.Run. It asynchronously waits on the cancellation token which allows me to use it for any stream instance and guarantee that the cancellation will be respected.\r\n\r\n```c#\r\npublic static async ValueTask\u003cint\u003e ReadAsyncCancellable(this Stream stream, Memory\u003cbyte\u003e buffer, CancellationToken cancellationToken = default)\r\n{\r\n    int bytesRead = 0;\r\n    await Task.Run(() =\u003e\r\n    {\r\n        while (bytesRead \u003c buffer.Length)\r\n        {\r\n            if (cancellationToken.IsCancellationRequested)\r\n            {\r\n                throw new OperationCanceledException(cancellationToken);\r\n            }\r\n            var task = stream.ReadAsync(buffer.Slice(bytesRead)).AsTask();\r\n            task.Wait(cancellationToken);\r\n            bytesRead += task.Result;\r\n        }\r\n    });\r\n    return bytesRead;\r\n}\r\n```",
                                           "updatedAt":  "2019-09-13T17:44:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMTM2Nzk2Mg==",
                                           "createdAt":  "2019-09-13T19:46:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA3fAEg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "binki",
                                                                               "createdAt":  "2019-12-17T18:27:34Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "krwq",
                                           "body":  "\u003e How would that work since that\u0027s a SerialPort property and SerialPort doesn\u0027t have any async methods? The only way to do an async read is through the BaseStream instance.\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.IO.Ports/src/System/IO/Ports/SerialStream.Windows.cs#L659\r\n\r\n@dquist I\u0027m not sure what Task.Run gives you in that method - I\u0027d expect cancellation to behave mostly the same with or without Task.Run",
                                           "updatedAt":  "2019-09-13T19:46:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MTY3MjEyOA==",
                                           "createdAt":  "2020-02-26T22:15:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "Triage: Reasonable request, needs more investigation.",
                                           "updatedAt":  "2020-02-26T22:15:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Pb0HS",
                                           "createdAt":  "2022-11-30T20:18:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygoe",
                                           "body":  "Oh, \"Future\" milestone. You might as well remove that API altogether until then. If the CancellationToken is effectively ignored and ReadAsync cannot be cancelled, there is no async .NET API for the UART hardware. BTW, the \"A\" stands for \"asynchronous\". An API for that should only be async and nothing else. So if reading data that is never sent will block your application forever, could you call that usable? The SerialPort data received event has already been found unreliable, don\u0027t use that.\r\n\r\nI see the workaround with \"not waiting for a task any longer\" but what does it do with the ongoing Read method call? That\u0027ll still be reading into nowhere. After all, if nobody tells it to stop, how should it know about that? I see a memory leak and some data loss at later read calls here, if not greater trouble. Do I have to close the entire serial port every time I decide I want to stop waiting for incoming data for now?\r\n\r\nMaybe USB serial adapters should not be used with .NET. Instead, an Ethernet serial adapter might be more suitable for this development platform. TCP streams are a lot more robust. I really didn\u0027t want to spend my time building a new Win32/Linux serial port wrapper.\r\n\r\nI\u0027m trying to implement a very simple request/response communication protocol for TCP and serial. TCP was easy and works. Serial can\u0027t be done for now, given the usual reliability and responsiveness requirements of a public API.",
                                           "updatedAt":  "2022-11-30T20:18:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fDfus",
                                           "createdAt":  "2023-06-16T14:13:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygoe",
                                           "body":  "Considering the untouched open issues for this project, the misleading wishful documentation and the lack of any progress or even life signs, I now officially consider this library **unmaintained**. I guess that\u0027s what happens when a commercial product with a broken design is given to a community of volunteers.\r\n\r\nThere is a workaround explained here: https://stackoverflow.com/a/54610437 It seems to do the job for now, but this hack (and others) need to be copied to each application now. I\u0027m only waiting for the day when it all falls apart and we can scratch serial port support from .NET.",
                                           "updatedAt":  "2023-06-16T14:13:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fDqpj",
                                           "createdAt":  "2023-06-16T14:35:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@ygoe Are you interested in offering a change?",
                                           "updatedAt":  "2023-06-16T14:35:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fFH4t",
                                           "createdAt":  "2023-06-16T19:18:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygoe",
                                           "body":  "I\u0027d be happy to help. I\u0027ll let you know when I\u0027ve learnt how to use the Win32 serial communication API and corresponding APIs on Linux and other platforms (excl. Mac). Actually, I wanted to use .NET to create other things before that. Needing to create .NET first might make me use another environment altogether.\r\n\r\nUsually it\u0027s also wiser to let more experienced project members deal with this, but I don\u0027t see any this time.\r\n\r\nResources I found, in case somebody wants to start this:\r\n\r\n* https://sparxeng.com/blog/software/must-use-net-system-io-ports-serialport\r\n* https://learn.microsoft.com/en-us/windows/win32/devio/configuring-a-communications-resource\r\n* http://web.archive.org/web/20150822192836/http://www.codeproject.com:80/Articles/28827/Serial-Port-Communication-and-Implementation-of-th\r\n* https://metacpan.org/pod/Win32::SerialPort\r\n* https://stackoverflow.com/questions/15752272/serial-communication-with-minimal-delay",
                                           "updatedAt":  "2023-06-16T19:18:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56Ugra",
                                           "createdAt":  "2024-04-12T17:39:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEh3_PA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Charlieface",
                                                                               "createdAt":  "2025-09-11T16:13:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ThaDaVos",
                                           "body":  "Why hasn\u0027t this be fixed 5 years later... I just ran into the issue of the `ReadAsync` not following the `CancellationToken`... ",
                                           "updatedAt":  "2024-04-12T17:39:43Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "SerialStream does not support cancellation on Windows",
        "labels":  [
                       "enhancement",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/30877",
        "createdAt":  "2019-09-17T09:05:29Z",
        "number":  30877,
        "author":  "YZahringer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOAwvStQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "dirkolene",
                                            "createdAt":  "2019-09-17T11:30:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Samoulou",
                                            "createdAt":  "2019-09-17T11:30:57Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-11-23T02:26:16Z",
        "body":  "I\u0027m trying to access a Virtual Serial Port for USB with `System.IO.Ports.SerialPort` and I get the error `The given port name (COM5) does not resolve to a valid serial` when I try to open the port. Here is the code, it works with physical serial ports:\r\n````cs\r\nusing (var serialPort = new System.IO.Ports.SerialPort(\"COM5\", 9600))\r\n{\r\n    try\r\n    {\r\n        serialPort.Open(); // ERROR: The given port name (COM5) does not resolve to a valid serial port.\r\n        serialPort.WriteLine(\"SerialPort Write Test\");\r\n        serialPort.Close();\r\n    }\r\n    catch (Exception exception)\r\n    {\r\n        Console.WriteLine(exception);\r\n    }\r\n}\r\n````\r\n\r\nI did several tests with `.NET 4.7`, `.NET Core 3.0-RC1`, the `4.6.0-rc1` of nuget `System.IO.Ports`, UWP application with `Windows.Devices.SerialCommunication.SerialDevice`. Always the same error.\r\n\r\nThe Virtual Serial Port works well with other programs, such as [Termite by Compuphase](https://www.compuphase.com/software_termite.htm) or [Serial Port Terminal by Eltima](https://www.virtual-serial-port.org/products/serial-port-terminal/).\r\n\r\nI have also tried with an alternative .NET library [SerialPortStream](https://github.com/jcurl/SerialPortStream) and the access to the COM Port works fine.\r\n\r\nLooking at the [code](https://github.com/dotnet/corefx/blob/4aea703673e942756c02b222e6b5babaf8612a25/src/System.IO.Ports/src/System/IO/Ports/SerialStream.Windows.cs#L584), I see that if the `fileType` is different from `FILE_TYPE_CHAR` and `FILE_TYPE_UNKNOWN`, the error is reported. The problem is that my Virtual Service Port returns `FILE_TYPE_DISK`. Is there a reason to refuse `FILE_TYPE_DISK`? Is it possible to accept it or make it configurable?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONeR1hA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMjk2ODA1Nw==",
                                           "createdAt":  "2019-09-19T05:08:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAw6EmA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "YZahringer",
                                                                               "createdAt":  "2019-09-19T06:30:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "cc: @krwq ",
                                           "updatedAt":  "2019-09-19T05:08:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTEzNzgzNA==",
                                           "createdAt":  "2019-11-18T18:07:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JTrotta",
                                           "body":  "The same problem occurs on Linux using \"/dev/ttyUSBX\" port.\r\nThe Linux problem should be related to the DTR setting. It cannot be done on virtual ports.\r\n\r\nThis is the error opening a /dev/ttyUSB7 port:\r\n`Hello World!\r\nUnhandled exception. System.IO.IOException: Broken pipe\r\n   at System.IO.Ports.SerialStream.set_DtrEnable(Boolean value)\r\n   at System.IO.Ports.SerialStream..ctor(String portName, Int32 baudRate, Parity parity, Int32 dataBits, StopBits stopBits, Int32 readTimeout, Int32 writeTimeout, Handshake handshake, Boolean dtrEnable, Boolean rtsEnable, Boolean discardNull, Byte parityReplace)\r\n   at System.IO.Ports.SerialPort.Open()\r\n   at RPTestcore3.Program.Start7() in D:\\Visual Studio 2019\\Projects\\RPTestcore3\\RPTestcore3\\Program.cs:line 43\r\n   at RPTestcore3.Program.Main(String[] args) in D:\\Visual Studio 2019\\Projects\\RPTestcore3\\RPTestcore3\\Program.cs:line 32\r\nAborted\r\n`\r\n",
                                           "updatedAt":  "2019-11-18T18:26:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTE4NDUwOQ==",
                                           "createdAt":  "2019-11-18T20:00:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@JTrotta can you file separate issue on your problem, I don\u0027t think they\u0027re related - I\u0027ve tried using Linux with some ttyUSB devies without issue so I suspect problem is different, we can merge the issues together if we notice it\u0027s same.\r\n\r\n@YZahringer \r\n\r\n\u003e The problem is that my Virtual Service Port returns FILE_TYPE_DISK. Is there a reason to refuse FILE_TYPE_DISK?\r\n\r\nI don\u0027t believe we\u0027ve ever encountered any device which has done that.\r\nI\u0027m sceptical we should be checking file type at all but if we are then FILE_TYPE_CHAR actually seems like the only reasonable option. Assuming there is a good reason we should check for file type: If we find enough evidence (i.e. docs) this is not a software issue I\u0027m fine with adding this (considering two separate apps produce FILE_TYPE_DISK it suggests it might be documented somewhere in which case it should be fine to change this).",
                                           "updatedAt":  "2019-11-18T20:00:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTE5NjUyNQ==",
                                           "createdAt":  "2019-11-18T20:32:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JTrotta",
                                           "body":  "@YZahringer \r\nMay you share any working code on linux (debian)and virtual serial port? \r\nThank you",
                                           "updatedAt":  "2019-11-18T20:32:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTIxMTkwMg==",
                                           "createdAt":  "2019-11-18T21:14:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@JTrotta all APIs should just work the same (use SerialPort.GetPortNames for linux port names)",
                                           "updatedAt":  "2019-11-18T21:14:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NTg4NDQ1NA==",
                                           "createdAt":  "2019-11-20T07:57:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "YZahringer",
                                           "body":  "@krwq Thank you for the answer. The different programs I use to debug the serial port works, it\u0027s only .NET that denies access to `FILE_TYPE_DISK` type. I don\u0027t really see any reason for that.\r\n\r\nIf this cannot be supported, it may be appropriate to provide a more detailed error message?",
                                           "updatedAt":  "2019-11-20T07:57:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NjE4NTc4NA==",
                                           "createdAt":  "2019-11-20T18:05:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "I don\u0027t have any strong objections to remove the restriction. @wfurt, @JeremyKuhne do you know of any objections to remove this check: https://github.com/dotnet/corefx/blob/88f40addc220c73794f962f10d288c20c416ede1/src/System.IO.Ports/src/System/IO/Ports/SerialStream.Windows.cs#L587? Seems We have some devices which use FILE_TYPE_DISK and possibly other values",
                                           "updatedAt":  "2019-11-20T18:05:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NjI1NTE4NQ==",
                                           "createdAt":  "2019-11-20T19:04:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA1kDAQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krwq",
                                                                               "createdAt":  "2019-11-20T19:34:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "YZahringer",
                                                                               "createdAt":  "2019-11-21T08:34:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I\u0027m not sure about type on Windows but for Linux we should be able to use anything as far as termios() succeed. ",
                                           "updatedAt":  "2019-11-20T19:04:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1Njk3NjUzMg==",
                                           "createdAt":  "2019-11-21T08:33:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA1oWSA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "krwq",
                                                                               "createdAt":  "2019-11-21T21:01:08Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JTrotta",
                                           "body":  "\r\n\r\n\r\n\u003e @JTrotta all APIs should just work the same (use SerialPort.GetPortNames for linux port names)\r\n\r\n@krwq  SerialPort.GetPortNames simply works. The error occurs when you open a virtual usb port on Linux. The problem was well known in Mono, and was solved avoiding any access to DTR.\r\nAnyway I opened a new issue [524967076](https://github.com/dotnet/corefx/issues/42638#issue-524967076)",
                                           "updatedAt":  "2019-11-21T08:33:36Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1NzMwNzcwMg==",
                                           "createdAt":  "2019-11-21T22:49:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA1q7Zg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "YZahringer",
                                                                               "createdAt":  "2019-11-22T09:52:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "krwq",
                                           "body":  "Let\u0027s see if @JeremyKuhne has any push backs against changing Windows logic, if not or no response I think this is fine to remove the restriction (at least cannot see why it should be there).",
                                           "updatedAt":  "2019-11-21T22:50:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MTY3NjA3Ng==",
                                           "createdAt":  "2020-02-26T22:25:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA_r-ng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "YZahringer",
                                                                               "createdAt":  "2020-03-31T16:35:16Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "I think removing the `FILE_TYPE_DISK` type check is fine for Core.",
                                           "updatedAt":  "2020-02-26T22:25:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5MTY3NjI0MA==",
                                           "createdAt":  "2020-02-26T22:25:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "Whoops, didn\u0027t mean to close. :)",
                                           "updatedAt":  "2020-02-26T22:25:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczNTg1NjA5Mg==",
                                           "createdAt":  "2020-11-30T15:28:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBoVVdg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GiorgosBetsos",
                                                                               "createdAt":  "2021-04-23T11:48:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "YZahringer",
                                           "body":  "any news about this?",
                                           "updatedAt":  "2020-11-30T15:28:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc410_Te",
                                           "createdAt":  "2021-08-21T08:38:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "YZahringer",
                                           "body":  "could be a candidate for .NET 6?",
                                           "updatedAt":  "2021-08-21T08:38:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc415HWE",
                                           "createdAt":  "2021-08-23T22:04:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "We should start with removing the check in main branch but I can\u0027t promise 6.0 port. @YZahringer are you interested in sending a PR?",
                                           "updatedAt":  "2021-08-23T22:04:23Z"
                                       }
                                   ],
                         "totalCount":  15
                     },
        "title":  "SerialPort error on Virtual Serial Port for USB",
        "labels":  [
                       "os-windows",
                       "help wanted",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/563",
        "createdAt":  "2019-12-05T14:09:45Z",
        "number":  563,
        "author":  "pawelpetruch",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-23T02:31:27Z",
        "body":  "Hi,\r\n\r\nI am experiencing a problem when trying to open a serial port using 128000 baudrate on RPi 3 Model B v 1.2. The Pi supports this baudrate using Python serial library just fine. \r\n\r\nThe issue doesn\u0027t occur with other baudrates. The issue is also not present on a Windows PC. \r\n\r\nIs there any quick workaround this?  \r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     raspbian\r\n OS Version:  10\r\n OS Platform: Linux\r\n RID:         linux-arm\r\n Base Path:   /home/pi/dotnet-arm32/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100 [/home/pi/dotnet-arm32/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0 [/home/pi/dotnet-arm32/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/home/pi/dotnet-arm32/shared/Microsoft.NETCore.App]\r\n```\r\n\r\nCode:\r\n\r\n```\r\nAvailable serial ports:\r\n0. /dev/ttyAMA0\r\n1. /dev/ttyACM0\r\n\r\nSelected com port: /dev/ttyACM0 with baudrate: 128000.\r\nUnhandled exception. System.ArgumentException: Value does not fall within the expected range.\r\n   at System.IO.Ports.SerialStream..ctor(String portName, Int32 baudRate, Parity parity, Int32 dataBits, StopBits stopBits, Int32 readTimeout, Int32 writeTimeout, Handshake handshake, Boolean dtrEnable, Boolean rtsEnable, Boolean discardNull, Byte parityReplace)\r\n   at System.IO.Ports.SerialPort.Open()\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKgOX6Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NDY4MTY1NA==",
                                           "createdAt":  "2019-12-11T18:51:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@pawelpetruch this is not RPi specific, it\u0027s related to the issue already mentioned in here: https://github.com/dotnet/corefx/issues/33146#issuecomment-559659142\r\n\r\nIn short, we only support following baud rates at the moment:\r\nhttps://github.com/dotnet/runtime/blob/master/src/libraries/Native/Unix/System.IO.Ports.Native/pal_termios.c#L147\r\n\r\nin order to support baud rates in between those values we would need to set custom_divisor as mentioned in here:\r\nhttps://github.com/dotnet/corefx/issues/33146#issuecomment-562250631\r\n\r\nUnfortunately I don\u0027t know of any workarounds 😞 \r\n",
                                           "updatedAt":  "2019-12-11T18:54:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NDY4NjQ1Mg==",
                                           "createdAt":  "2019-12-11T19:03:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@wfurt did you perhaps had a chance to play with higher baud rates? I can\u0027t see any larger baud rate which would divide nicely to give 128000 so I\u0027m not sure if we can use similar baud rate or if python is doing something different (assuming the license allows it we can probably check)",
                                           "updatedAt":  "2019-12-11T19:03:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NDY5OTEzMA==",
                                           "createdAt":  "2019-12-11T19:36:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "no I don\u0027t @krwq. If we can trace of what Python does (or get simple C example) we can probably fix it. I look at termios.h on Linux and there are higher speeds but 128000 is not there. \r\nOne can execute setserial or pinvoke functions. As far as I know we will try to set speed only once and that can be changed later without impacting IO.Ports AFAIK.  ",
                                           "updatedAt":  "2019-12-11T19:36:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU2NzkyMTc0NQ==",
                                           "createdAt":  "2019-12-20T13:19:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dmrayt",
                                           "body":  "I had the same error as i tried to connect to serial port on an embedded linux with a baud rate of 750000.\r\n\r\nI found the following C code to set a custom baud rate on linux at [https://developer.toradex.com/knowledge-base/uart-(linux)#vybrid-modules](https://developer.toradex.com/knowledge-base/uart-(linux)#vybrid-modules)\r\n\r\n```c\r\n#include \u003cstdio.h\u003e\r\n#include \u003cfcntl.h\u003e\r\n#include \u003cerrno.h\u003e\r\n#include \u003casm/termios.h\u003e\r\n \r\nint main(int argc, char* argv[]) {\r\n \r\n\tint retval, fd, speed;\r\n\tstruct termios2 ntio;\r\n \r\n\tif (argc != 3) {\r\n\t\tprintf(\"Usage: %s /dev/ttyXXX 20000\\n\", argv[0], argv[0]);                   \r\n\t\treturn -1;\r\n\t}\r\n \r\n\tspeed = atoi(argv[2]);\r\n\tfd = open(argv[1], O_RDONLY);\r\n\tif (fd \u003c 0) {\r\n\t\tperror(\"Open\");\r\n\t\treturn -1;\r\n\t}\r\n \r\n\tioctl(fd, TCGETS2, \u0026ntio);\r\n\tntio.c_cflag \u0026= ~CBAUD;\r\n\tntio.c_cflag |= BOTHER;\r\n\tntio.c_ispeed = speed;\r\n\tntio.c_ospeed = speed;\r\n\tretval = ioctl(fd, TCSETS2, \u0026ntio);\r\n\tclose(fd);\r\n \r\n\tif (retval == 0)\r\n\t\tprintf(\"New baud configured\\n\");\r\n\telse\r\n\t\tperror(\"ioctl\");\r\n \r\n\treturn 0;\r\n}\r\n```\r\n\r\nI hope this can help you.",
                                           "updatedAt":  "2019-12-20T13:19:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDg3ODU2OQ==",
                                           "createdAt":  "2020-10-07T11:42:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichaelCarey",
                                           "body":  "@carlossanlop  Hi, I noticed that this is marked as \"future\". Is there any update on when this might be released?? \r\ndotnet appears to reset the uart clock freq to a default setting when the port is opened which closes any back door to playing with the base baud. I may have missed some other \"back door\" but not savvy enough to figure it out.  So... appreciate any news on a release to allows non-standard baud rates. Thanks much! ",
                                           "updatedAt":  "2020-10-07T11:42:05Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "SerialPort: Cannot open with 128000 baudrate.",
        "labels":  [
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/2077",
        "createdAt":  "2020-01-23T14:15:14Z",
        "number":  2077,
        "author":  "tester346",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCTuCmw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "freddyrios",
                                            "createdAt":  "2021-08-24T06:53:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Wasenshi123",
                                            "createdAt":  "2022-03-19T04:34:41Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-11-23T02:26:08Z",
        "body":  "Hi!\r\n\r\nI\u0027ve been messing with connecting USB based card scanner to my raspberry pi and handling from C# app things like detecting port when user disconnects device and plugs it again\r\n\r\neverything worked fine on Windows, but on Linux I noticed that my method\r\n\r\n```csharp\r\n\tpublic bool IsOpen()\r\n\t{\r\n\t\treturn USB != null \u0026\u0026 USB.IsOpen;\r\n\t}\r\n```\r\ndoesn\u0027t exactly work as intended. For some reason `USB.IsOpen` is returning `True` when my device is unplugged.\r\n\r\nI found that on Linux devices are treated as files, so I came with this work around\r\n\r\n```csharp\r\n\tpublic bool IsOpen()\r\n\t{\r\n\t\tvar result = USB != null \u0026\u0026 USB.IsOpen;\r\n\r\n\t\t// on windows everything works fine\r\n\t\tif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\r\n\t\t\treturn result;\r\n\r\n\t\t// if result was false, then it was correct even on linux, because the reason of it probably was that USB is null\r\n\t\tif (!result)\r\n\t\t\treturn false;\r\n\r\n\t\t// if on Linux it was TRUE, then it was probably incorrectly reported by USB.IsOpen(), then we can ensure that file exists\r\n\t\tvar exists = File.Exists(PortName);\r\n\r\n\t\treturn exists;\r\n\t}\r\n```\r\n\r\nI don\u0027t think it is completed solution for this problem, but I\u0027d just want to report it.\r\n\r\n.NET Core 3.1\r\n\r\n\tPRETTY_NAME=\"Raspbian GNU/Linux 10 (buster)\"\r\n\tNAME=\"Raspbian GNU/Linux\"\r\n\tVERSION_ID=\"10\"\r\n\tVERSION=\"10 (buster)\"\r\n\tVERSION_CODENAME=buster\r\n\tID=raspbian\r\n\tID_LIKE=debian\r\n\r\nThanks for reply!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOI3Zfqg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3NzgyNzM2MA==",
                                           "createdAt":  "2020-01-23T19:05:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "\r\n\r\n\u003e Remarks\r\n\u003e The IsOpen property tracks whether the port is open for use by the caller, not whether the port is open by any application on the machine.\r\n\r\n\r\nI would expect the device to disappear from /sysfs when disconnected and then disappear from list of ports. Does it not? \r\ncc: @krwq ",
                                           "updatedAt":  "2020-01-23T19:05:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3ODQ3MDAxMQ==",
                                           "createdAt":  "2020-01-26T05:25:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@tester346 does the device file disappear from `/dev/` when you unplug? We rely on the OS to tell us if the file is open so we would likely need to do something special to get it to work correctly if we even can detect it.",
                                           "updatedAt":  "2020-01-26T05:25:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3ODcwNTE2Nw==",
                                           "createdAt":  "2020-01-27T11:25:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tester346",
                                           "body":  "@krwq \r\n\r\nHi!\r\n\r\n\r\nI\u0027ll provide code \u0026 screens, and flow:\r\n\r\n\r\nI\u0027m starting Raspberry Pi with 3rd device connected via usb connected\r\n\r\nthen I\u0027m starting this simple console app which finds which port is used by 3rd party device (basing on response)\r\n\r\nand then I\u0027m displaying date in `while (USB.IsOpen)` loop.\r\n\r\nThe thing is, that this loop doesn\u0027t end even when I disconnect device and there is no `file` in `/dev/`\r\n\r\nBefore unplugging (as you can see on right screen shoot there\u0027s device called `ttyUSB1`\r\n![before](https://user-images.githubusercontent.com/42267919/73170642-3b108d00-40ff-11ea-98c5-b22bb70bf7b8.png)\r\n\r\nAfter unplugging (there\u0027s no file cuz USB is disconnected)\r\n![after](https://user-images.githubusercontent.com/42267919/73170652-3f3caa80-40ff-11ea-90fe-1c06f9b89509.png)\r\n\r\nAnd as we can see the program is still looping, but it shouldnt.\r\n\r\nFULL Code without my custom method (code below, below):\r\n\r\n```csharp\r\n    using System;\r\n    using System.IO.Ports;\r\n    using System.Threading;\r\n\r\n    namespace usb_report\r\n    {\r\n        class Program\r\n        {\r\n            static void Main(string[] args)\r\n            {\r\n                var port = FindPortNameWhereDeviceIsConnected();\r\n\r\n                if (string.IsNullOrEmpty(port))\r\n                    throw new Exception(\"Cannot find device\");\r\n\r\n                Console.WriteLine($\"Used port: {port}\");\r\n\r\n                var USB = new SerialPort(port, 9600, Parity.None, 8, StopBits.One);\r\n                USB.ReadTimeout = 1000;\r\n                USB.Open();\r\n            \r\n                while (USB.IsOpen)\r\n                {\r\n                    Console.WriteLine(DateTime.Now);\r\n                    Thread.Sleep(5000);\r\n                }\r\n\r\n                Console.WriteLine(\"USB connection has ended\");\r\n            }\r\n\r\n            public static string FindPortNameWhereDeviceIsConnected()\r\n            {\r\n                var ports = SerialPort.GetPortNames();\r\n\r\n                foreach (var port in ports)\r\n                {\r\n                    try\r\n                    {\r\n                        var USB = new SerialPort(port, 9600, Parity.None, 8, StopBits.One);\r\n                        USB.ReadTimeout = 1000;\r\n                        USB.Open();\r\n                        USB.WriteTimeout = 900;\r\n\r\n                        USB.Write(new byte[] { 0x1b, 0 }, 0, 2);\r\n                        Thread.Sleep(100);\r\n\r\n                        var read = USB.ReadExisting();\r\n\r\n                        if (read.Contains(\"1290\"))\r\n                        {\r\n                            return port;\r\n                        }\r\n                        continue;\r\n                    }\r\n                    catch\r\n                    {\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                return \"\";\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nCustom check method:\r\n\r\nWhen I use my own `.IsOpen` method which inside performs `File.Exists` then it works fine\r\n\r\nMy Method used here:\r\n\r\n```csharp\r\n\tpublic static bool IsOpen(SerialPort USB)\r\n\t{\r\n\t\t// this probably isnt going to work on Windows, it\u0027s just PoC\r\n\t\treturn USB.IsOpen \u0026\u0026 File.Exists(USB.PortName); \r\n\t}\r\n```\r\n\r\nSmall change in Loop:\r\n\r\n```csharp\r\n\twhile (IsOpen(USB))\r\n\t{\r\n\t\tConsole.WriteLine(DateTime.Now);\r\n\t\tThread.Sleep(5000);\r\n\t}\r\n```\r\n\r\nOutput:\r\n\r\n![result](https://user-images.githubusercontent.com/42267919/73171775-d86cc080-4101-11ea-9a07-35f3d843f63b.png)\r\n\r\n\r\nIt stopped looping after I unplugged device \r\n",
                                           "updatedAt":  "2020-03-05T00:03:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU3ODkxNjg5OA==",
                                           "createdAt":  "2020-01-27T19:40:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "Perhaps possible solution could be that we probe for the file existence whenever the IsOpen is called and manually close the file handle, @wfurt?",
                                           "updatedAt":  "2020-01-27T19:40:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NjI3MDMxNw==",
                                           "createdAt":  "2020-02-14T12:36:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tester346",
                                           "body":  "hmm, any info on that issue?",
                                           "updatedAt":  "2020-02-14T12:36:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4NjQ4MzMwMw==",
                                           "createdAt":  "2020-02-14T21:39:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I\u0027m wondering if we should throw @krwq if the device disappears when in use. When the class was designed long time ago, it was not possible to remove a serial port from the system on the fly. \r\nI\u0027ll try to do some more testing next week. ",
                                           "updatedAt":  "2020-02-14T21:39:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NDk1MDQ3Mw==",
                                           "createdAt":  "2020-03-05T00:02:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JeremyKuhne",
                                           "body":  "Triage: @wfurt Have you had a chance to do the testing on this?",
                                           "updatedAt":  "2020-03-05T00:02:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU5NDk2MDI5OA==",
                                           "createdAt":  "2020-03-05T00:22:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB3fM2w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "freddyrios",
                                                                               "createdAt":  "2021-08-24T06:53:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "lpereira",
                                           "body":  "What I think is happening here is that, when a file in Unix is removed while open by a process, the file name might be removed from the directory that pointed to that inode, but will still exist in the filesystem.  It just can\u0027t be referenced by another process anymore, but you should still be able to write or read to that file just fine until the process closes it.  (In this case it\u0027s not really being removed from the filesystem as it\u0027s likely to be a devtmpfs -- which is a virtual FS managed by the kernel, that creates and destroy device nodes as they\u0027re made available or are not needed anymore -- but the same principle applies.)\r\n",
                                           "updatedAt":  "2020-03-05T00:25:43Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "System.IO.Ports SerialPort.IsOpen on Linux (Raspbian) returns `true` when USB is not plugged ",
        "labels":  [
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/2379",
        "createdAt":  "2020-01-30T08:43:20Z",
        "number":  2379,
        "author":  "michaldobrodenka",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_ovuQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ptasev",
                                            "createdAt":  "2021-03-24T19:30:33Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "sergioprates",
                                            "createdAt":  "2024-03-25T15:50:14Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ghishadow",
                                            "createdAt":  "2024-10-24T11:46:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "UrielZyx",
                                            "createdAt":  "2024-11-26T18:16:18Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Apflkuacha",
                                            "createdAt":  "2025-03-03T08:39:20Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-02-09T12:23:09Z",
        "body":  "Tested on Linux. I have a embedded application where I have a separate thread with sync Read/Write operations in loop and after migrating from mono, this thread CPU usage went from 5% to 25%. \r\n\r\nTypical use case for SerialPort like ModBus with small poll intervals, where serial port sends \u0026 recieive small packets many times per second make .NET Core Serial consume a lot of resources.\r\n\r\nSee:\r\nhttps://stackoverflow.com/questions/54903630/net-core-3-0-system-io-ports-serialport-uses-5-10-cpu-on-rpi-all-the-time",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbnnoA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MDM1NDYzOQ==",
                                           "createdAt":  "2020-01-30T17:05:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jkotas",
                                           "body":  "cc @wfurt ",
                                           "updatedAt":  "2020-01-30T17:05:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU4MTAwNzIzNA==",
                                           "createdAt":  "2020-02-01T08:20:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBHUn6w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "igor-betin",
                                                                               "createdAt":  "2020-06-09T20:58:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeroenwalter",
                                                                               "createdAt":  "2020-06-14T09:51:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "michaldobrodenka",
                                           "body":  "When I look at the implementation, for every simple blocking read/write operation - multiple objects on heap are created: SerialStreamIORequest, CancellationTokenSource for timeout or ReadTask/WriteTasks.\r\n\r\nWhen you consider high performance scenario, like modbus on 115200 line where you send and receive a few bytes like 50 times per second, pressure for GC and object creation is not really light.\r\n\r\nMaybe we can improve code by checking in Read/Write if other IO operation is running and if not, complete synchronously. But then we still have to deal with timeout. I\u0027m not an OS expert, but probably using linux \u0027select\u0027 would be more efficient than creating CancellationTokenSource object 100 times per second. But I understand that this is probably not a priority for now.",
                                           "updatedAt":  "2020-02-01T08:20:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODk0MDI2NA==",
                                           "createdAt":  "2020-05-14T23:33:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@michaldobrodenka it\u0027s not that simple, I agree we could reduce CTS creation here but I doubt this would reduce any high CPU usage or have any visible impact.\r\n\r\nAs for using select - we are currently using poll which in a sense is very similar but the problem is we cannot just wait until it timeouts because SerialPort was designed such that it also supports events which mess up the perf capabilities really bad (perhaps one solution would be to use different code when there are events vs when there are none). I suspect the error here is that we\u0027re waiting for data but we\u0027re not getting any and we\u0027re trading off quick response time with CPU usage here. I.e. if we slept here then OS will wait minimum of 10ms which would reduce any responsiveness, I suspect we should do some kind of SpinWait in a loop which would give us something in between looping and sleeping - this will need to be investigated a bit more to not regress any scenarios.",
                                           "updatedAt":  "2020-05-14T23:33:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyOTA0OTkwOQ==",
                                           "createdAt":  "2020-05-15T06:14:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC0h-Kw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeroenwalter",
                                                                               "createdAt":  "2020-06-14T09:51:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "bacol89",
                                                                               "createdAt":  "2021-03-15T22:29:26Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ondrejhluchy",
                                                                               "createdAt":  "2023-01-20T09:50:44Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "michaldobrodenka",
                                           "body":  "I solved this by extracting serial port from Mono. https://github.com/michaldobrodenka/System.IO.Ports.Mono",
                                           "updatedAt":  "2020-05-15T06:14:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0Mzc0NDc0Nw==",
                                           "createdAt":  "2020-06-14T10:01:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeroenwalter",
                                           "body":  "I\u0027m using the serialport on a Rpi3 connected to an Arduino via usb. The arduino is sending continuous data to the serialport.\r\nEven just reading the data without doing anything with it via the DataReceived event results in about 50 - 80 threads consumed by the serialport, all waiting for some other serialport thread. Data is being received seconds after they are sent. \r\nThe cpu load generated by this implementation is much too high for serious applications.\r\nWhen I saw the implementation I was baffled by all the async/await stuff, even for reading a single byte. \r\nPlease consider completely rewriting this class, as now it is just a cpu hog and useless for serious data throughput use on rpi and similar boards. \r\n",
                                           "updatedAt":  "2020-06-14T10:01:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0Mzc1MzY1MQ==",
                                           "createdAt":  "2020-06-14T11:28:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7kU7A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "michaldobrodenka",
                                                                               "createdAt":  "2021-05-12T12:43:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JoakimOgren",
                                                                               "createdAt":  "2023-05-11T21:04:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jeroenwalter",
                                           "body":  "\u003e I solved this by extracting serial port from Mono. https://github.com/michaldobrodenka/System.IO.Ports.Mono\r\n\r\nI\u0027ve just implemented a DataReceived event for your implementation. cpu load is 2% on rpi vs 25% with the dotnet serialport implementation. \r\nVM-size also doesn\u0027t keep growing, as it does with the dotnet implementation.\r\n",
                                           "updatedAt":  "2020-06-14T11:31:31Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NDA4MjY5Mw==",
                                           "createdAt":  "2020-06-15T11:53:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janvorli",
                                           "body":  "\u003e DataReceived event results in about 50 - 80 threads consumed by the serialport\r\n\r\nThis sounds pretty bad. One of the overheads (obviously not the only one) caused by this is that so many threads result in a lot of virtual memory consumption due to thread stacks. It is a problem especially on 32 bit systems where the virtual address space is very limited.\r\n@krwq, @wfurt, do we understand why would so many threads be created?",
                                           "updatedAt":  "2020-06-15T11:53:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NDIzNjA1Nw==",
                                           "createdAt":  "2020-06-15T16:24:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeroenwalter",
                                           "body":  "I can confirm that the virtual memory consumption of the application rose to about 1GB within a matter of minutes on the Rpi... using the dotnet serialport class that is.\r\nThe other implementation from michaldobrenka doesn\u0027t have this problem, VM size doesn\u0027t grow.",
                                           "updatedAt":  "2020-06-15T17:21:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NDI2MjY4NQ==",
                                           "createdAt":  "2020-06-15T17:17:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeroenwalter",
                                           "body":  "\u003e @krwq, @wfurt, do we understand why would so many threads be created?\r\n\r\nJust take a look at https://github.com/dotnet/runtime/blob/master/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialStream.Unix.cs\r\n\r\nMy guess is because every call to ReadByte(), which you typically do in a loop in the DataReceived event, results in a Task being created and awaited. This takes some time, in the meantime new data can arrive, which results in firing the DataReceived event via RaiseDataReceivedChars using a ThreadPool.QueueUserWorkItem.\r\nNow, if you use a lock in the DataReceived handler, because you don\u0027t want to read the serialport from 2 threads simultaneously, then all other DataReceived events have to wait until you release the lock. This will make all those worker threads wait.\r\n\r\n\r\n\r\n",
                                           "updatedAt":  "2020-06-15T19:36:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MDM2Mzk4Mg==",
                                           "createdAt":  "2021-01-31T11:02:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sandervandegeijn",
                                           "body":  "I\u0027m probably having the same issue, seeing 30-50% cpu = half a core on Linux. On Windows however with exactly the same code, cpu usage is doing next to nothing. There is a performance gap between my Linux box (nuc with 4 core celeron) and my Windows machine (I5 9600), but this is significant enough.\r\n\r\nAt first I suspected my own implementation due to many tasks, but refactored it, think that\u0027s okay now but still having issues. When I increase the load on the serial bus it gets worse.\r\n\r\nI\u0027m using easymodbustcp as the modbus lib for a .net5 console app, can anyone give me some pointers on how to swap out the default implementation withthe mono one?\r\n\r\nFound another thread: https://stackoverflow.com/questions/59577676/c-sharp-serialport-multithread-send-receive-collisions\r\n\r\n",
                                           "updatedAt":  "2021-01-31T21:40:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MTQ4MjE0Mg==",
                                           "createdAt":  "2021-02-02T09:04:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sandervandegeijn",
                                           "body":  "Okay performance is definitely terrible on Linux... On Windows it\u0027s fine. How can we get this higher on the backlog, this is barely usable, even sending 3 modbusrequests / second at 9600bps is eating up a lot of cpu time while doing some basic string manipulations. I\u0027m not capable of fixing this library myself.",
                                           "updatedAt":  "2021-02-02T11:46:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MTU1MTUzNg==",
                                           "createdAt":  "2021-02-02T10:56:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeroenwalter",
                                           "body":  "\u003e Okay performance is definitely terrible on Linux... On Windows it\u0027s fine. How can we get this higher on the backlog, this is barely usable in, even sending 3 modbusrequests / second on 9600bps is eating up a lot of cpu time while doing some basic string manipulations. I\u0027m not capable of fixing this library myself.\r\n\r\nI ran into the same issues, also addressed them some posts back, but no feedback from the dotnet team unfortunately.\r\nYou may take a look in my solution in https://github.com/jeroenwalter/Arduino/tree/netcore30/System.IO.Ports.Mono\r\nMy Arduino solution uses an implementation that I found on https://github.com/michaldobrodenka/System.IO.Ports.Mono\r\nIt works well on the raspberry pi 3.\r\n\r\n\r\n",
                                           "updatedAt":  "2021-02-02T10:56:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MTU1Njg5Ng==",
                                           "createdAt":  "2021-02-02T11:05:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBeiEAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sandervandegeijn",
                                                                               "createdAt":  "2021-02-02T11:44:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janvorli",
                                           "body":  "@wfurt is this something you can look into fixing?",
                                           "updatedAt":  "2021-02-02T11:05:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MTg2NDk0Nw==",
                                           "createdAt":  "2021-02-02T18:23:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCtG51Q==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sandervandegeijn",
                                                                               "createdAt":  "2021-02-02T19:38:45Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2022-09-30T16:16:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "wfurt",
                                           "body":  "possibly. I\u0027m mostly focused on other areas right now but the work needed may not be too large. I\u0027ll chat with @krwq about plan. \r\n\r\nIt would be great if people could  share simple projects so we have good baseline how this is used. I can make some guesses from the discussion but having some code easy to run and measure would be nice. ",
                                           "updatedAt":  "2021-02-02T18:23:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MTg5MzE0NA==",
                                           "createdAt":  "2021-02-02T19:00:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "hrocha1",
                                           "body":  "It seems like the common use case is Raspberry Pi communicating with microcontrollers. So the \"minimum sample project\" might probably be something like Arduino talking to Raspberry via serial? There is a decent chance that many people have that hardware available and are able to test potential changes.",
                                           "updatedAt":  "2021-02-02T19:00:08Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MTkxNTkzNQ==",
                                           "createdAt":  "2021-02-02T19:30:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I have few RPi and I used it with serial USB connected to my x64 VM. I\u0027m mostly interested in coding patterns. For example ReadByte() can be greatly simplified but I\u0027m not sure how much that matters. ",
                                           "updatedAt":  "2021-02-02T19:30:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MTkyMjY5Mg==",
                                           "createdAt":  "2021-02-02T19:39:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sandervandegeijn",
                                           "body":  "\u003e \r\n\u003e \r\n\u003e It seems like the common use case is Raspberry Pi communicating with microcontrollers. So the \"minimum sample project\" might probably be something like Arduino talking to Raspberry via serial? There is a decent chance that many people have that hardware available and are able to test potential changes.\r\n\r\nNot only for those home/hobby projects. Serial is still relevant, especially for industrial applications. I\u0027m using a Intel NUC as a modbus master with a CH340G/RS485 USB stick to communicate with multiple energy meters, solar inverters and charge controllers. Still in a home situation, but a lot of industrial appliances / sensors use Modbus RTU (which mainly runs over RS232/RS485).",
                                           "updatedAt":  "2021-02-02T19:41:58Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3MjA2MTA1OQ==",
                                           "createdAt":  "2021-02-02T22:39:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBfKRHA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sandervandegeijn",
                                                                               "createdAt":  "2021-02-07T14:48:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jeroenwalter",
                                           "body":  "\u003e It seems like the common use case is Raspberry Pi communicating with microcontrollers. So the \"minimum sample project\" might probably be something like Arduino talking to Raspberry via serial? There is a decent chance that many people have that hardware available and are able to test potential changes.\r\n\r\nI use my own .netcore fork of the SolidSoils Arduino library on a rpi3. The rpi is not sending commands to initiate data transfer. Instead the Arduino is constantly sending firmata messages to the rpi. \r\nThe SolidSoils code (my fork as well as the original SolidSoils lib) uses the ReadByte() method in the DataReceived event to parse firmata messages. \r\nSee the method SerialDataReceived() in https://github.com/jeroenwalter/Arduino/blob/netcore30/Solid.Arduino.Firmata/FirmataSession.cs\r\nor in https://github.com/SolidSoils/Arduino/blob/master/Solid.Arduino/ArduinoSession.cs\r\n\r\nFor event driven serial communication like this, I think ReadByte() for a single byte should be as fast as possible, no async tasks or enqueued action or such, just read the byte. In this case you can only read 1 byte at once, as you don\u0027t know how many bytes are available and can\u0027t wait for extra bytes to arrive before processing a complete firmata message.\r\n\r\n\r\n",
                                           "updatedAt":  "2021-02-02T22:39:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3NDY4NTY1Nw==",
                                           "createdAt":  "2021-02-07T14:44:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sandervandegeijn",
                                           "body":  "Okay, on Windows with .net 5.0 it isn\u0027t fully stable either. Although I\u0027m not noticing the high cpu usage on my Windows 10 boxes it does trigger a dirty error;\r\n\r\n```\r\nUnhandled exception. info: Modbus2Mqtt.Eventing.ModbusResult.ModbusRegisterResultHandler[0]\r\n      Result for: eastron_test register: reactive power : 0\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.IO.Ports.SerialStream.EventLoopRunner.CallReceiveEvents(Object state)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\nUnhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.IO.Ports.SerialStream.EventLoopRunner.CallReceiveEvents(Object state)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n```\r\n\r\nI can reproduce this quite easily.",
                                           "updatedAt":  "2021-02-07T14:48:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc3ODU4MDk0Mw==",
                                           "createdAt":  "2021-02-13T08:04:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Priyantha",
                                           "body":  "\u003e Okay, on Windows with .net 5.0 it isn\u0027t fully stable either. Although I\u0027m not noticing the high cpu usage on my Windows 10 boxes it does trigger a dirty error;\r\n\u003e \r\n\u003e ```\r\n\u003e Unhandled exception. info: Modbus2Mqtt.Eventing.ModbusResult.ModbusRegisterResultHandler[0]\r\n\u003e       Result for: eastron_test register: reactive power : 0\r\n\u003e System.NullReferenceException: Object reference not set to an instance of an object.\r\n\u003e    at System.IO.Ports.SerialStream.EventLoopRunner.CallReceiveEvents(Object state)\r\n\u003e    at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n\u003e Unhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\r\n\u003e    at System.IO.Ports.SerialStream.EventLoopRunner.CallReceiveEvents(Object state)\r\n\u003e    at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n\u003e ```\r\n\u003e \r\n\u003e I can reproduce this quite easily.\r\n\r\nDuring running the same piece of tooling, in this case something to communicate with Modbus, I am experiencing the same issue as @ict-one-nl. ",
                                           "updatedAt":  "2021-02-13T08:04:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NzA0NTc5MA==",
                                           "createdAt":  "2021-03-11T21:01:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Alex-111",
                                           "body":  "Maybe the eventloop in the serialportstream could be started lazyly. In most use cases only reading and writing to the stream is necessary. I do not understand why the loop is also started when just reading from the stream without caring about the events",
                                           "updatedAt":  "2021-03-11T21:01:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5NzM0ODkyMA==",
                                           "createdAt":  "2021-03-12T09:09:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCtG55A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vbornand",
                                                                               "createdAt":  "2021-03-17T13:49:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "sandervandegeijn",
                                                                               "createdAt":  "2021-03-20T21:42:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ptasev",
                                                                               "createdAt":  "2021-03-24T19:30:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2021-06-15T16:18:06Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "hrocha1",
                                                                               "createdAt":  "2021-11-08T22:03:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2022-09-30T16:16:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  6
                                                         },
                                           "author":  "krwq",
                                           "body":  "I did some quick investigation and have couple of ideas\r\n\r\n1. The loop in the Unix stream (SerialStream) shouldn\u0027t start unless unless you subscribe to the event. Also it should stop if nothing is happening for certain amount of time. I think the problem might be that SerialPort class always subscribes to the events:\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialPort.cs#L603-L604\r\nand other related piece here https://github.com/dotnet/runtime/blob/main/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialStream.Unix.cs#L799\r\nI think this shouldn\u0027t be happening at least not on linux. I think I might have regressed it here: https://github.com/dotnet/runtime/commit/98361c13a0d5d71c412aece04ac9c84bda316a31#diff-efd183ff76a828527dffa9f7370a0459922121146a211b15fd9a4863d4be70d5\r\n2. Regardless of events or whatever is happening there loop shouldn\u0027t take 100% CPU cycles unless the read/write queue is full. Not sure why it\u0027s happening yet. If nothing is happening in the loop we should be calling Thread.Sleep which should bring usage to zero.\r\n3. We should probably investigate into bypassing the loop for simple IO operations. So as long as you don\u0027t use async or events the loop shouldn\u0027t start at all.\r\n4. Perhaps if there are many serial ports used by app we should consider sharing the loop with other ports to save some resources - not sure if that is an actual problem.\r\n5. Improve events:\r\n  - We should investigate if Linux APIs allow better way to handle events asynchronously\r\n  - If above can\u0027t be done we should investigate if dropping event support (or at least using different code when you\u0027re not subscribed) wouldn\u0027t be better solution - lack of events makes to code much simpler and allows do do everything much more efficiently\r\n\r\nI think we should investigate it one problem at a time.",
                                           "updatedAt":  "2021-03-12T09:10:47Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzOTczMzc0Nw==",
                                           "createdAt":  "2021-05-12T12:33:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sandervandegeijn",
                                           "body":  "Is there any activity on this? It\u0027s really terrible, the current implementation even triggers locking up cpu cores.",
                                           "updatedAt":  "2021-05-12T12:33:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjAyODYwMQ==",
                                           "createdAt":  "2021-06-07T15:21:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@ict-one-nl unfortunatelly not on our focus at the moment. We will most likely need some help from community to move this forward faster. From my end I can only ask to focus on this in vNext but I can\u0027t promise this will happen.",
                                           "updatedAt":  "2021-06-07T15:21:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1NjE1Mjg3NQ==",
                                           "createdAt":  "2021-06-07T18:11:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Alex-111",
                                           "body":  "Couldn‘t you just implement the eventloop lazyly. Most users do not need the events. So at least for the majority of users the serialport is usable then. Othwise it is useless on linux...",
                                           "updatedAt":  "2021-06-07T18:11:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MDU3OTYzNg==",
                                           "createdAt":  "2021-06-14T10:32:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD8lFeA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeroenwalter",
                                                                               "createdAt":  "2021-06-14T13:01:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "UrielZ-SG",
                                                                               "createdAt":  "2024-11-26T15:46:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "sandervandegeijn",
                                           "body":  "Well it\u0027s so bad that I think it should be considered to drop serial support for the Linux builds all together for now. That way there are no false expectations... The risk is that it never gets fixed at all, but still.\r\n\r\nI\u0027m seeing more than 35-50% cpu and occasional system instability with very mild loads. ",
                                           "updatedAt":  "2021-06-14T10:32:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43q6LA",
                                           "createdAt":  "2021-10-05T01:57:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dlukach",
                                           "body":  "is there any updates on this? This is really impacting a commercial product I\u0027m developing. Tried to use the mono ports posted above but it is locking up on the reading of a serial line. The .net 5 implementation of ports is killing my RPI from functioning properly. If there is any way my team can assist in expediting this issue please let me know.",
                                           "updatedAt":  "2021-10-05T01:57:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43q7r2",
                                           "createdAt":  "2021-10-05T02:14:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dlukach",
                                           "body":  "So the issue with the mono port, it defaults to \"\\r\\n\" for new line when it should be \"\\n\" like the .net implementation. I didn\u0027t look why since the default value is \"\\n\" yet the private var doesn\u0027t have that set",
                                           "updatedAt":  "2021-10-05T02:14:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43s5GW",
                                           "createdAt":  "2021-10-05T15:29:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@dlukach for \\r\\n issue please create a new issue so this won\u0027t get missed. As for updates... well I didn\u0027t really have time to pick this up 😞",
                                           "updatedAt":  "2021-10-05T15:29:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45br9T",
                                           "createdAt":  "2021-11-08T20:47:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sandervandegeijn",
                                           "body":  "Now that .net6 has left the building (great job!) can you guys to spare some time to fix this? It would be more correct to simply drop serial port as it is now entirely until it\u0027s fixed than leaving as it is now. ",
                                           "updatedAt":  "2021-11-08T20:47:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-XKrb",
                                           "createdAt":  "2022-02-20T15:19:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sandervandegeijn",
                                           "body":  "I really hope this gets fixed in 7, basically you could throw a notimplemented exception tbh ;)",
                                           "updatedAt":  "2022-02-20T15:19:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_P8zR",
                                           "createdAt":  "2022-03-07T21:17:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "markus-fischbacher",
                                           "body":  "I\u0027m facing the same bad performance on my Linux embedded system. I have to deal with two UARTs in parallel. CPU usage approx. 80%. On MacOS it\u0027s working better (maybe because of more CPU power). I will try the Mono implementation.",
                                           "updatedAt":  "2022-03-07T21:17:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5I63rW",
                                           "createdAt":  "2022-08-23T01:05:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sicode",
                                           "body":  "\u003e Okay, on Windows with .net 5.0 it isn\u0027t fully stable either. Although I\u0027m not noticing the high cpu usage on my Windows 10 boxes it does trigger a dirty error;\r\n\u003e \r\n\u003e ```\r\n\u003e Unhandled exception. info: Modbus2Mqtt.Eventing.ModbusResult.ModbusRegisterResultHandler[0]\r\n\u003e       Result for: eastron_test register: reactive power : 0\r\n\u003e System.NullReferenceException: Object reference not set to an instance of an object.\r\n\u003e    at System.IO.Ports.SerialStream.EventLoopRunner.CallReceiveEvents(Object state)\r\n\u003e    at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n\u003e Unhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\r\n\u003e    at System.IO.Ports.SerialStream.EventLoopRunner.CallReceiveEvents(Object state)\r\n\u003e    at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n\u003e ```\r\n\u003e \r\n\u003e I can reproduce this quite easily.\r\n\r\nYes，When Cpu uage 90% ，100% crash",
                                           "updatedAt":  "2022-08-23T01:05:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bHxuo",
                                           "createdAt":  "2023-04-29T11:29:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Alex-111",
                                           "body":  "If there is no fix available in the near future, I suggest to include the mono code instead of the current one….",
                                           "updatedAt":  "2023-04-29T11:29:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bHzeQ",
                                           "createdAt":  "2023-04-29T12:02:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kasperk81",
                                           "body":  "@Alex-111 try the latest one https://www.nuget.org/packages/System.IO.Ports#versions-body-tab (8 preview3)",
                                           "updatedAt":  "2023-04-29T12:02:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bIhGZ",
                                           "createdAt":  "2023-04-30T07:29:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Alex-111",
                                           "body":  "@kasperk81 \r\nWhy do you suggest this? Can you explain, what has been  changed to reduce CPU usage?",
                                           "updatedAt":  "2023-04-30T07:29:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bIjfl",
                                           "createdAt":  "2023-04-30T08:27:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeroenwalter",
                                           "body":  "\u003e @kasperk81 Why do you suggest this? Can you explain, what has been changed to reduce CPU usage?\r\n\r\nhttps://github.com/dotnet/runtime/blob/main/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialStream.Unix.cs\r\n\r\nAs far as I can see, the implementation didn\u0027t change much and is still using Tasks and queuing threads anytime a byte arrives on the serial port. \r\nSo my guess is that nothing has been improved performance-wise on a Raspberry Pi.\r\nWould be nice if the .net team does some performance testing / benchmarking vs old Mono implementation on non-Windows platforms.\r\n",
                                           "updatedAt":  "2023-04-30T08:27:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bIsej",
                                           "createdAt":  "2023-04-30T11:49:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC7kViA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeroenwalter",
                                                                               "createdAt":  "2023-04-30T11:55:43Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "michaldobrodenka",
                                                                               "createdAt":  "2023-04-30T15:55:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JoakimOgren",
                                                                               "createdAt":  "2023-05-11T21:07:30Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "sandervandegeijn",
                                           "body":  "I gave up on this, it\u0027s completely unusable. Throwing a not implemented exception would be cleaner than leaving this **** in.",
                                           "updatedAt":  "2023-04-30T11:49:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bI5t-",
                                           "createdAt":  "2023-04-30T15:58:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC9HFzQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "JoakimOgren",
                                                                               "createdAt":  "2023-05-11T21:07:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "schotime",
                                                                               "createdAt":  "2023-06-05T03:34:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "michaldobrodenka",
                                           "body":  "If you want I can share mono serial port implementation rewritten to pure c# + libc dllimport. (so it\u0027s not dependent on monoposixhelper native libraries) ",
                                           "updatedAt":  "2023-04-30T15:58:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5d77O-",
                                           "createdAt":  "2023-06-05T03:37:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "schotime",
                                           "body":  "@michaldobrodenka This would be fantastic. I\u0027m struggling with deadlocks bigtime with the MS one.",
                                           "updatedAt":  "2023-06-05T03:37:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eHGGg",
                                           "createdAt":  "2023-06-06T14:52:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOENC3CQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "schotime",
                                                                               "createdAt":  "2023-06-07T11:56:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "slyshykO",
                                                                               "createdAt":  "2024-11-27T08:10:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "dlukitsch",
                                                                               "createdAt":  "2025-02-09T12:28:31Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "khoatbd55",
                                                                               "createdAt":  "2025-04-05T18:51:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "michaldobrodenka",
                                           "body":  "@schotime this is source I use heavily on low end ARM machines (I made some namespace changes, hope it will work :) ) https://github.com/michaldobrodenka/Mono.IO.Ports-managed",
                                           "updatedAt":  "2023-06-06T14:52:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5eOHny",
                                           "createdAt":  "2023-06-07T12:54:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC9YhMg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "michaldobrodenka",
                                                                               "createdAt":  "2023-06-07T16:44:05Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "schotime",
                                           "body":  "@michaldobrodenka It works!!!! Thankyou! I\u0027m using it on ARM PI like devices. Hopefully these rotten errors can be gone.",
                                           "updatedAt":  "2023-06-07T12:54:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VG_XS",
                                           "createdAt":  "2024-11-26T18:19:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "UrielZyx",
                                           "body":  "Is there any news regarding this issue? This is causing a lot of problems for us...",
                                           "updatedAt":  "2024-11-26T18:19:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6VM7JD",
                                           "createdAt":  "2024-11-27T08:09:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "grisharav",
                                           "body":  "\u003e Is there any news regarding this issue? This is causing a lot of problems for us...\n\nJoining the question",
                                           "updatedAt":  "2024-11-27T08:09:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dueeg",
                                           "createdAt":  "2025-02-09T12:23:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "I don\u0027t expect our team to be able to investigate this further any time soon, and it looks like @michaldobrodenka [shared a library](https://github.com/dotnet/runtime/issues/2379#issuecomment-1578918304) that works for at least one other person. Keeping this in Future though.",
                                           "updatedAt":  "2025-02-09T12:23:05Z"
                                       }
                                   ],
                         "totalCount":  45
                     },
        "title":  "SerialPort - high CPU usage ",
        "labels":  [
                       "enhancement",
                       "os-linux",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/36332",
        "createdAt":  "2020-05-13T10:36:55Z",
        "number":  36332,
        "author":  "kpakur",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBT5yjw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "NullEntity",
                                            "createdAt":  "2020-05-13T15:38:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "Gnbrkm41",
                                            "createdAt":  "2020-05-13T15:38:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "patrickklaeren",
                                            "createdAt":  "2020-05-13T15:39:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rstepnowski",
                                            "createdAt":  "2020-05-13T16:11:20Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "jkoritzinsky",
                                            "createdAt":  "2020-05-13T18:55:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "john-h-k",
                                            "createdAt":  "2020-05-13T21:18:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "RubyNova",
                                            "createdAt":  "2020-05-14T12:21:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nathanpovo",
                                            "createdAt":  "2020-10-19T11:33:19Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2022-11-23T02:24:13Z",
        "body":  "Hi, \r\ndotnet core 3.1, System.IO.Ports 4.7.0. \r\n\r\nMethods and properties in the SerialPort class are not virtual and therefore it is not possible to mock them with tools like Moq.\r\nSimilar issue with SerialDataReceivedEventArgs is not possible to use in Moq Raise.\r\n\r\nPlease make the SerialPort class methods and properties virtual.\r\nsrc/libraries/System.IO.Ports/src/System/IO/Ports/SerialPort.cs\r\nand also SerialDataReceivedEventArgs constructor public (instead of internal)\r\n\r\nNote: Arguing that it should not be mocked and other techniques should be used is not intended to be part of this discussion. There are different approaches and opinions about it and that\u0027s fine as long as all options are possible.\r\n\r\nThanks,\r\nKamil\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKnHO5g==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODA3Mzg0NA==",
                                           "createdAt":  "2020-05-13T15:39:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBT5ylQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Gnbrkm41",
                                                                               "createdAt":  "2020-05-13T15:40:58Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "Topping",
                                                                               "createdAt":  "2020-05-13T15:40:59Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "NullEntity",
                                                                               "createdAt":  "2020-05-13T15:42:04Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "kpakur",
                                                                               "createdAt":  "2020-05-13T16:27:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "john-h-k",
                                                                               "createdAt":  "2020-05-13T21:18:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RubyNova",
                                                                               "createdAt":  "2020-05-14T12:21:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "strangeman375",
                                                                               "createdAt":  "2020-05-16T11:48:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_DOWN",
                                                                               "user":  "nathanpovo",
                                                                               "createdAt":  "2020-10-19T11:33:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  8
                                                         },
                                           "author":  "patrickklaeren",
                                           "body":  "Put a facade around `SerialPort` and achieve your specific usecase. @kpakur ",
                                           "updatedAt":  "2020-05-13T15:39:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODA4MDY4MQ==",
                                           "createdAt":  "2020-05-13T15:50:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kpakur",
                                           "body":  "@Inzanit That\u0027s what I did eventually (3 facades needed btw for `SerialPort`, `SerialDataReceivedEventHandler`, `SerialDataReceivedEventArgs` to be able to handle `DataRecived `event). Now I have 3 additional classes that actually do nothing but just allow unit testing of my custom logic around data received from the serial port.\r\n\r\nI consider this as a waste of time. \r\n\r\nAgain I want to point out that it was not my intention to start a topic of how to overcome this, or a \"do not mock a type you do not own\" type of discussion but rather to improve and make the life easier for anyone dealing with that implementation.",
                                           "updatedAt":  "2020-05-13T15:50:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODI1MTU5Mw==",
                                           "createdAt":  "2020-05-13T21:19:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "john-h-k",
                                           "body":  "\u003e I consider this as a waste of time.\r\n\r\nWhy will they hurt performance and change design by making stuff abstract when there is a perfectly good and relatively simple workaround?",
                                           "updatedAt":  "2020-05-13T21:19:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODU3OTQ2NA==",
                                           "createdAt":  "2020-05-14T11:45:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kpakur",
                                           "body":  "@john-h-k I have one class that has my bespoke logic to handle data coming in from the SerialPort and I wanted to test that logic. In order to test my class I wanted to isolate my class from the hardware. Injecting mock of SerialPort into my class, pretending it sends some data and assert my logic works as expected.\r\n\r\nHowever it was not possible to do such mock. So I ended up writing 3 wrapper classes that do nothing more than make all properties, methods and events virtual for SerialPort class. And it was a waste of time because if the members of SerialPort were virtual already I would not need to write that workaround. Especially that writing these wrapper classes took me more than actually writing my bespoke logic that I wanted to test in the first instance.\r\n\r\nSo if we take a wider view, and actually look at my little IoT Edge C# module that has 2 classes Program.cs and MySimpleLogic.cs plus 4+ wrapper classes just to make it possible to inject mocks to test my code then it does look a bit overwritten to be honest. (yes 4+ because the IoT Edge is using `ModuleClient` to handle events which is a sealed class... so I needed to wrap it too).\r\n\r\nYes they are relatively simple workarounds for someone who likes WET principle (WET - we enjoy typing).\r\n\r\n",
                                           "updatedAt":  "2020-05-14T11:45:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODU5OTAzNQ==",
                                           "createdAt":  "2020-05-14T12:24:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBENy3A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "patrickklaeren",
                                                                               "createdAt":  "2020-05-14T12:27:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "john-h-k",
                                           "body":  "\u003e Yes they are relatively simple workarounds for someone who likes WET principle (WET - we enjoy typing).\r\n\r\nIs this RANAODIJMYWUCGYHTEIIAA? (RANAODIJMYWUCGYHTEIIAA- really a necessary abbreviation, or does it just make your writing unnecessarily confusing, given you have to explain it immediately afterwards anyway).  😄 \r\n\r\nMaking methods virtual can have a non trivial performance effect. It seems a non-starter to regress performance for this purpose when there is a workaround, even if it isn\u0027t that nice. However it depends on the general overhead of SerialPort, which I can\u0027t speak for, to whether making them virtual is an issue",
                                           "updatedAt":  "2020-05-14T12:38:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODYwMzI5OA==",
                                           "createdAt":  "2020-05-14T12:33:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kpakur",
                                           "body":  "\u003e Making methods virtual can have a non trivial performance effect. \r\n\r\n@john-h-k please provide a _trusted_ and up to date source of that information.",
                                           "updatedAt":  "2020-05-14T12:33:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODYwNjE2Ng==",
                                           "createdAt":  "2020-05-14T12:38:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "john-h-k",
                                           "body":  "@kpakur literally just look at the asm for a virt/non virt call. When it can\u0027t be devirtualised it is an indirect call. It also prevents inlining \u003chttps://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIAYACY8gOgCUBXAOwwEt8YLAMIR8AB14AbGFADKMgG68wMXAG4aNYgGYmpBgDVeUDB2ySaAbxoNbDANoBZGBgAWEACYBJcZIAUzm6ePmKSAPJifBBcuCwAchBeXJK8XKkA5gCUALo2djoMSiZmkgypGAwAYhAQfpkMlkwA7Ax0agwAvjRd1Fq6ZAwJXEbF5lZ5tk4u7t6+AdPBvhFRMfGJyakZORNMuuVVNXUNza3tPT19egxCDTsF+yMYfo8lhfXW1HZfJwos1bX1ABUDFIGk+dh6Xzuex4gwgGEefiGL3Mb1u4O+Pz+hyBILBX3OQA==\u003e",
                                           "updatedAt":  "2020-05-14T12:39:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYyODYwNzk1OA==",
                                           "createdAt":  "2020-05-14T12:42:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kpakur",
                                           "body":  "@john-h-k Indeed there is an additional step, however you mentioned it is non-trivial performance effect when I think actually it does not make a huge difference with the hardware we have nowadays. So are there any up to date benchmarks so we can compare how much does it matter? Especially that we talk here about SerialPort...",
                                           "updatedAt":  "2020-05-14T12:43:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMjEwMTYwNg==",
                                           "createdAt":  "2020-10-19T11:46:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCuLf_w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mattbaker-digital",
                                                                               "createdAt":  "2022-10-20T09:31:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "nathanpovo",
                                           "body":  "I agree that with @kpakur that it is tedious to create additional classes just to be able to mock the [`SerialPort`](https://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialPort.cs) class.\r\n\r\nPerhaps it would make more sense to create an interface and implement that interface in the `SerialPort` class rather than converting it to an abstract class? Would that reduce the possible performance penalty mentioned by @john-h-k ?\r\n\r\nHaving an interface of the `SerialPort` class would make consumers of the interface much more easily testable without having to go through the work of creating additional classes/interfaces or without having to use third-party libraries (such as https://github.com/jcurl/SerialPortStream).",
                                           "updatedAt":  "2020-10-19T11:46:24Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Not able to mock SerialPort",
        "labels":  [
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/41032",
        "createdAt":  "2020-08-19T14:41:40Z",
        "number":  41032,
        "author":  "georgeoprescu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-23T02:23:44Z",
        "body":  "Platform: RPi v4 Model B (armv71)\r\ndotnet runtime version: 3.1\r\nOS: Dietpi v6.26.3\r\n\r\n\r\nWhen using System.IO.Ports.SerialPort class with a baud rate set to 5787 there is no communication with the connected device.\r\nIf baud rate is changed to 4800 it works.\r\n\r\nIf I switch to .net framework on windows, I can connect to the device using either of the bad rates and works just fine.\r\n\r\nPhysical connection is accomplished in all cases using the same FTDI USB/Serial adapter  \r\n\r\nBest regards,\r\nGeorge\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOKGrbOQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjQ3OTM4MQ==",
                                           "createdAt":  "2020-08-19T14:59:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Thanks for the report. Would you like to investigate a little bit?",
                                           "updatedAt":  "2020-08-19T14:59:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjU1NzM1Nw==",
                                           "createdAt":  "2020-08-19T17:23:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "georgeoprescu",
                                           "body":  "\u003e Thanks for the report. Would you like to investigate a little bit?\r\n\r\nAfter setting the baud rate to 5787, when calling Open() an ArgumentException with the message:  \"Value does not fall within the expected range.\" is thrown.\r\n\r\nThanks, \r\nGeorge",
                                           "updatedAt":  "2020-08-19T17:23:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjU2MzQzOQ==",
                                           "createdAt":  "2020-08-19T17:35:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I don\u0027t know this code at all, but my guess is that we\u0027re trying to set that speed, and the OS is rejecting it. Looks like we set it here:\r\nhttps://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/Native/Unix/System.IO.Ports.Native/pal_termios.c#L364-L369\r\n\r\nIf you\u0027re motivated, the next step is probably to write a small C program that tries to set it explicitly, and see whether it works. If it does not: it\u0027s hardware/OS. If it does: it suggests the issue may be in .NET.\r\n\r\nBTW, I am not sure whether `strace` will trace these OS calls. It might be worth a try-  you can see exactly what it is doing.",
                                           "updatedAt":  "2020-08-19T17:35:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjU2NDYxMg==",
                                           "createdAt":  "2020-08-19T17:37:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Actually I think here\r\nhttps://github.com/dotnet/runtime/blob/6072e4d3a7a2a1493f514cdf4be75a3d56580e84/src/libraries/Native/Unix/System.IO.Ports.Native/pal_termios.c#L513-L517\r\nand thatt\u0027s failing causing us to throw here\r\nhttps://github.com/dotnet/runtime/blob/c87e75e8ef260ccc6e979f9df1cc012536ee036f/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialStream.Unix.cs#L564",
                                           "updatedAt":  "2020-08-19T17:37:28Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjU3NjkwMA==",
                                           "createdAt":  "2020-08-19T18:03:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "georgeoprescu",
                                           "body":  "For sure the OS is not a problem.\r\nI use as alternative the SerialPortStream (https://github.com/jcurl/SerialPortStream) and I modified there the libnserial C code in order to support custom baud rates, I rebuild it and it works.\r\nI was hopping that the implementation that comes with netcore 3.x offers a better approach.\r\n\r\nI used termios2 struct instead of termios and I ended up with something like:\r\n\tstruct termios2 term;\r\n\tterm.c_cflag \u0026= ~cbaud;    \t\t       //remove current baud rate\r\n\tterm.c_cflag |= BOTHER;    \t               //allow custom baud rate\r\n\tterm.c_ispeed = custom_baud_rate;      //set the input\r\n\tterm.c_ospeed = custom_baud_rate;    //set the output \r\n",
                                           "updatedAt":  "2020-08-19T18:03:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjU3OTI4Mg==",
                                           "createdAt":  "2020-08-19T18:08:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "You\u0027re saying that `cfset*speed` does fail, but setting via `termios2` does not? I wonder why.\r\n\r\n@krwq any thoughts?",
                                           "updatedAt":  "2020-08-19T18:08:30Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjU4ODUxMQ==",
                                           "createdAt":  "2020-08-19T18:27:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "georgeoprescu",
                                           "body":  "Not exactly, the baud rate is an Enum, that is why it fails to set custom baud rate.\r\nYou set an arbitrary baud rate and using termios2 you override that arbitrary baud rate with the custom one",
                                           "updatedAt":  "2020-08-19T18:27:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3NjYwNzk5OQ==",
                                           "createdAt":  "2020-08-19T19:09:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "georgeoprescu",
                                           "body":  "If it helps, here are some links I used when I had to modify the C libnserial library to support custom baud rate:\r\nhttps://stackoverflow.com/questions/49025424/uncommon-baud-rate-on-serial-port-linux\r\nhttps://stackoverflow.com/questions/12646324/how-can-i-set-a-custom-baud-rate-on-linux\r\nhttps://github.com/jcurl/SerialPortStream/pull/19/files\r\n\r\nThanks,\r\nGeorge",
                                           "updatedAt":  "2020-08-19T19:09:16Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3ODA0MTMzNg==",
                                           "createdAt":  "2020-08-21T05:09:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@georgeoprescu do I understand correctly that the OS will correctly transmit at the arbitrary baud rate or will it rather automatically round to a value it supports? Is that support on any Unix or will we have to ship multiple binaries for different flavors?",
                                           "updatedAt":  "2020-08-21T05:09:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3ODA4NzIyMg==",
                                           "createdAt":  "2020-08-21T07:21:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Looks like `struct termios2` / `TCGETS2` / `TCSETS2` are not supported on WSL1: \u003chttps://github.com/microsoft/WSL/issues/2595\u003e\r\n",
                                           "updatedAt":  "2020-08-21T07:21:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY3ODA5MTU3Nw==",
                                           "createdAt":  "2020-08-21T07:31:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "georgeoprescu",
                                           "body":  "@krwq OS will use the custom baud rate, otherwise the device on the other end would not communicate. As I understood it, and it worked for me, cfsetspeed, cfsetispeed and cfsetospeed tests the baud rate received as parameter against a set on standard baud rates that defined in termios.h (using #define...). From what I learned from others, I used termios2 struct to bypass this check and set the speed to the integer value needed.\r\n\r\n\r\n",
                                           "updatedAt":  "2020-08-21T07:31:54Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "System.IO.Ports - custom baud rate 5787 not working",
        "labels":  [
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/44952",
        "createdAt":  "2020-11-19T17:50:56Z",
        "number":  44952,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-LTng==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "carlreinke",
                                            "createdAt":  "2025-01-15T20:24:20Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-04-15T10:53:01Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity2.visualstudio.com/t/race-condition-during-SerialPortClose-i/1260381?preview=true)._\n\n---\n\u003cp\u003e.NET Core 3.1\u003c/p\u003e\u003cp\u003eA \u003cstrong\u003eNullReferenceException\u003c/strong\u003e occurs very regularly when my code calls SerialPort.Close because the attached device is (by design) sending UART traffic so SerialStream.CallEvents is called.\u003c/p\u003e \u003cp\u003eIn \u003ca href=\"https://referencesource.microsoft.com/#System/sys/system/io/ports/SerialStream.cs%2c5627eae274870333\" target=_blank\u003eSerialStream.CallReceiveEvents\u003c/a\u003e, \u003cstrong\u003estream. DataRecevied\u003c/strong\u003e is checked at line 1888 on a ThreadPoolWorkQueue thread but if that thread goes to sleep after 1888 is evaluated and my \u0026quot;main\u0026quot; thread calls SerialPort.Close or otherwise unregisters my DataReceived callback before ThreadPoolWorkQueue thread resumes, the \u003cstrong\u003estream. DataReceived\u003c/strong\u003e dereference at line 1890 or 1892 will cause the \u003cstrong\u003eNullReferenceException\u003c/strong\u003e. \u003c/p\u003e\n\n---\n### Original Comments\n\n#### Charlie Arcuri [MSFT] on 11/18/2020, 11:37 AM: \n\n\u003cp\u003eNOTE: The line numbers in the analysis in the original post refer to .NET Framework source because that was easy to hyper-link to in the explanation.  I have downloaded .NET Core symbols and source and the analysis holds true even though line numbers are different.\u003c/p\u003e\n\n#### Feedback Bot on 11/19/2020, 00:26 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n\n---\n### Original Solutions\n(no solutions)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOepRSTA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMDUzODMyMQ==",
                                           "createdAt":  "2020-11-19T17:53:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBXjnXw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "carlossanlop",
                                                                               "createdAt":  "2020-11-20T23:06:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "Here is the right link of the code in .NET Core https://github.com/dotnet/runtime/blob/5b48caed15190568f3573cc9a1f96bfec357b485/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialStream.Windows.cs#L1772",
                                           "updatedAt":  "2020-11-19T17:53:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTQ1NTQ5OA==",
                                           "createdAt":  "2020-11-20T23:16:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "carlossanlop",
                                           "body":  "@CharlieArcuri I assume you logged the original issue. Is this a blocker for you? Do you have a code snippet you can share with a repro? Is this something we could try to repro with a normal serial cable with two usb adapters connected to the same computer, or maybe a serial port loop back adapter? cc @krwq ",
                                           "updatedAt":  "2020-11-20T23:16:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjA3Mjg2OQ==",
                                           "createdAt":  "2020-11-23T10:33:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "simple fix could be to store DataReceived into local first and then operate on the local but we should look into what will happen in the user code (can/should they get the event after the dispose?). I generally do not recommend people to use DataReceived as there are also different ambiguities and issues with that (i.e. what should happen when callback is being executed for longer and another event happens during that period, should you get another event or should it wait?).\r\n\r\nI suspect this should repro with any setup but it might not be trivial to hit without many retries",
                                           "updatedAt":  "2020-11-23T10:35:09Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjI4OTIzMw==",
                                           "createdAt":  "2020-11-23T16:56:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODchsFQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeeshenlee",
                                                                               "createdAt":  "2024-04-01T04:39:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "charliearcuri",
                                           "body":  "@carlossanlop , yes it is a blocker for us.  I will circle back with a code snippet after I do some work to get the minimal repro.\r\n\r\nGetting it to repro with a normal serial cable seems cost prohibitive from my point-of-view but I propose the following alternatives:\r\n1) I can share a VS2019 remote of my set-up and/or otherwise set-up a \"joint debugging\" session.\r\n2) Is there an equivalent of \"Time Travel Debug\" tracing I could capture?\r\n3) How about logging?\r\n4) Is my code inspection correct (that it appears be - based solely on code inspection - a race condition?)\r\n\r\nRegarding @krwq\u0027s comments, if the recommendation is to avoid DataReceived, shouldn\u0027t DataReceived be marked as \"deprecated\" with a pointer to a supported method?  What is the supported/recommended alternative?\r\nI do have to run through several hundred iterations to get a repro - but I\u0027m expecting the framework to be stable such that it wouldn\u0027t have an internal race condition that would manifest as a NullReferenceException-related crash so that my domain-specific test automation is reliable/never produces false positive failures/etc.\r\n\r\nI\u0027ll circle back before end-of-day with what I come up with for a \"minimal repro.\"  It will be based on a proprietary \"debug card\" we use in Surface - it\u0027s based on an FTDI chip - the serial communication is also a proprietary (relatively simple) protocol we use in Surface devices.  Let me know if the repro using the standard issue serial cable is greatly preferred (or if we can proceed with logging/joint debugging/etc.)\r\n\r\nThanks for the help!",
                                           "updatedAt":  "2020-11-23T16:56:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMjQ4NDk5Nw==",
                                           "createdAt":  "2020-11-23T23:27:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "@charliearcuri I\u0027d recommend to use just Read/Write APIs (simply read and wait for result/timeout). The DataReceived event can run on any thread and there are consequences of that (doing operation on main thread and in the event may cause some weird behaviors and I think we do not guarantee any thread-safety on instance methods). It probably should be deprecated because it\u0027s a pitfall, we\u0027d need to investigate this a bit more though (also other factor is if there is many people using this API might be a good idea to fix this but from my experience there are just issues with these kind of events).\r\n\r\nFor time travel debugging, have you tried https://devblogs.microsoft.com/dotnet/debugging-net-apps-with-time-travel-debugging-ttd/ ? I\u0027m not sure you\u0027ll still be able to repro if you setup like that though (the app will become slower and the debugger might affect the repro).\r\n\r\nThe easiest way to verify would likely be to simply apply the fix locally, rebuilt IO.Ports and see if you\u0027re still able to repro. Also if there are threading issues in that code I\u0027d assume there might be more than one so there is no guarantee this will 100% help.\r\n",
                                           "updatedAt":  "2020-11-23T23:27:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc46_MBj",
                                           "createdAt":  "2021-12-09T08:56:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fatihyildizhan",
                                           "body":  "Hi, I upgraded .NET5 project to .NET6 and SerialPort.Close() throws an exception.\r\n\r\n.NET6 comes with `System.IO.Ports 6.0`\r\n\r\n```\r\n  System.NullReferenceException\r\n  HResult=0x80004003\r\n  Message=Object reference not set to an instance of an object.\r\n  Source=System.IO.Ports\r\n  StackTrace:\r\n   at System.IO.Ports.SerialStream.EventLoopRunner.CallReceiveEvents(Object state)\r\n   at System.Threading.QueueUserWorkItemCallback.\u003c\u003ec.\u003c.cctor\u003eb__6_0(QueueUserWorkItemCallback quwi)\r\n   at System.Threading.ExecutionContext.RunForThreadPoolUnsafe[TState](ExecutionContext executionContext, Action`1 callback, TState\u0026 state)\r\n   at System.Threading.QueueUserWorkItemCallback.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\n   at System.Threading.Thread.StartCallback()\r\n```",
                                           "updatedAt":  "2021-12-09T08:56:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ipm0_",
                                           "createdAt":  "2022-08-18T01:25:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "sicode",
                                           "body":  "Same exception\r\n\r\nException object: 00000000030c5848\r\nException type:   System.NullReferenceException\r\nMessage:          Object reference not set to an instance of an object.\r\nInnerException:   \u003cnone\u003e\r\nStackTrace (generated):\r\n    SP               IP               Function\r\n    000000002E30F1C0 000007FE8CB36F49 System_IO_Ports!System.IO.Ports.SerialStream+EventLoopRunner.CallReceiveEvents(System.Object)+0xffc1fe59\r\n    000000002E30F240 000007FEE96572C9 System_Private_CoreLib!System.Threading.QueueUserWorkItemCallback+\u003c\u003ec.\u003c.cctor\u003eb__6_0(System.Threading.QueueUserWorkItemCallback)+0x5c7584f9\r\n    000000002E30F270 000007FEE9886FE8 System_Private_CoreLib!System.Threading.ExecutionContext.RunForThreadPoolUnsafe[[System.__Canon, System.Private.CoreLib]](System.Threading.ExecutionContext, System.Action`1\u003cSystem.__Canon\u003e, System.__Canon ByRef)+0x5c988298\r\n    000000002E30F2B0 000007FEE965720F System_Private_CoreLib!System.Threading.QueueUserWorkItemCallback.Execute()+0x5c75855f\r\n    000000002E30F2F0 000007FEE9656290 System_Private_CoreLib!System.Threading.ThreadPoolWorkQueue.Dispatch()+0x5c75ac30\r\n    000000002E30F390 000007FEE965DD8A System_Private_CoreLib!System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()+0x14a\r\n    000000002E30F4A0 000007FEE964278F System_Private_CoreLib!System.Threading.Thread.StartCallback()+0x3f",
                                           "updatedAt":  "2022-08-18T01:25:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bXWa_",
                                           "createdAt":  "2023-05-03T11:11:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODchsuw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "unaizorrilla",
                                                                               "createdAt":  "2023-05-03T11:12:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "migueBarrera",
                                                                               "createdAt":  "2023-05-04T10:43:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeeshenlee",
                                                                               "createdAt":  "2024-04-01T04:43:32Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "juanlao",
                                           "body":  "I have been dealing with this issue, or a very similar one. \r\nIn my case I was subscribing to DataReceived event too many times.\r\nBy only subscribing once, it solved the problem.\r\nThe point here is that the object that manages the subscription was created in one thread, and the subscription was done in another thread.\r\n\r\nHope this helps :)",
                                           "updatedAt":  "2023-05-03T11:11:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wxAHo",
                                           "createdAt":  "2024-01-15T10:55:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rd0220",
                                           "body":  "I am facing a similar issue.\r\n![image](https://github.com/dotnet/runtime/assets/64055139/2ba2a7f8-eda9-4dc3-bf59-afc346556f9e)\r\nEnvironment: \r\n.Net 8.0.101\r\nSystem.IO.Ports 8.0.0\r\nVS 2022 Version 17.8.4\r\n\r\nPlease let me know how to fix this issue\r\n\r\nBelow is the error\r\n\r\nThe active test run was aborted. Reason: Test host process crashed : Unhandled exception. Unhandled exception. Unhandled exception. Unhandled exception. Unhandled exception. Unhandled exception. Unhandled exception. System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.IO.Ports.SerialStream.EventLoopRunner.CallReceiveEvents(Object state)\r\n   at System.Threading.QueueUserWorkItemCallback.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.IO.Ports.SerialStream.EventLoopRunner.CallReceiveEvents(Object state)\r\n   at System.Threading.QueueUserWorkItemCallback.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.IO.Ports.SerialStream.EventLoopRunner.CallReceiveEvents(Object state)\r\n   at System.Threading.QueueUserWorkItemCallback.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.IO.Ports.SerialStream.EventLoopRunner.CallReceiveEvents(Object state)\r\n   at System.Threading.QueueUserWorkItemCallback.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.IO.Ports.SerialStream.EventLoopRunner.CallReceiveEvents(Object state)\r\n   at System.Threading.QueueUserWorkItemCallback.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.IO.Ports.SerialStream.EventLoopRunner.CallReceiveEvents(Object state)\r\n   at System.Threading.QueueUserWorkItemCallback.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at System.IO.Ports.SerialStream.EventLoopRunner.CallReceiveEvents(Object state)\r\n   at System.Threading.QueueUserWorkItemCallback.Execute()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\n",
                                           "updatedAt":  "2024-01-15T10:55:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5w1h18",
                                           "createdAt":  "2024-01-16T05:11:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODchs1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeeshenlee",
                                                                               "createdAt":  "2024-04-01T04:44:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rd0220",
                                           "body":  "\u003e Hi, I upgraded .NET5 project to .NET6 and SerialPort.Close() throws an exception.\r\n\u003e \r\n\u003e .NET6 comes with `System.IO.Ports 6.0`\r\n\u003e \r\n\u003e ```\r\n\u003e   System.NullReferenceException\r\n\u003e   HResult=0x80004003\r\n\u003e   Message=Object reference not set to an instance of an object.\r\n\u003e   Source=System.IO.Ports\r\n\u003e   StackTrace:\r\n\u003e    at System.IO.Ports.SerialStream.EventLoopRunner.CallReceiveEvents(Object state)\r\n\u003e    at System.Threading.QueueUserWorkItemCallback.\u003c\u003ec.\u003c.cctor\u003eb__6_0(QueueUserWorkItemCallback quwi)\r\n\u003e    at System.Threading.ExecutionContext.RunForThreadPoolUnsafe[TState](ExecutionContext executionContext, Action`1 callback, TState\u0026 state)\r\n\u003e    at System.Threading.QueueUserWorkItemCallback.Execute()\r\n\u003e    at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n\u003e    at System.Threading.PortableThreadPool.WorkerThread.WorkerThreadStart()\r\n\u003e    at System.Threading.Thread.StartCallback()\r\n\u003e ```\r\n\r\nI am encountering the same issue after we move from .Net Framework 4.8 to .Net 8.0, Are you able to resolve this issue",
                                           "updatedAt":  "2024-01-16T05:11:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc56lFJM",
                                           "createdAt":  "2024-04-15T10:53:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOECpCvw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexx-grand",
                                                                               "createdAt":  "2024-09-04T14:21:47Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "carlreinke",
                                                                               "createdAt":  "2025-01-15T20:27:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "pggh",
                                           "body":  "I\u0027m hit by the same error in CallReceiveEvents when detaching an handler from SerialPort\r\n```serialPort.DataReceived -= OnDataReceived;```\r\nwhen using \"System.IO.Ports\" Version=\"8.0.0\" on Windows.\r\n\r\nThe source of CallReceiveEvents\r\n```\r\nif (stream.DataReceived != null)\r\n{\r\n    if ((nativeEvents \u0026 (int)SerialData.Chars) != 0)\r\n        stream.DataReceived(stream, new SerialDataReceivedEventArgs(SerialData.Chars));\r\n    if ((nativeEvents \u0026 (int)SerialData.Eof) != 0)\r\n        stream.DataReceived(stream, new SerialDataReceivedEventArgs(SerialData.Eof));\r\n}\r\n```\r\nis just wrong in multi-threaded context. Either use a temporary local copy of the event or use\r\n```\r\n    if ((nativeEvents \u0026 (int)SerialData.Chars) != 0)\r\n        stream.DataReceived?.Invoke(stream, new SerialDataReceivedEventArgs(SerialData.Chars));\r\n   ...\r\n```\r\n",
                                           "updatedAt":  "2024-04-15T10:53:00Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "race condition during SerialPort.Close in System.IO.Ports.SerialStream.EventLoopRunner.CallReceiveEvents",
        "labels":  [
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/45635",
        "createdAt":  "2020-12-05T11:24:12Z",
        "number":  45635,
        "author":  "meee1",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-23T02:22:39Z",
        "body":  "https://github.com/dotnet/runtime/blob/dc0e11d2e681659fc20feebf4c092082e75706af/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialStream.Unix.cs#L841\r\n\r\nif you short read the available bytes, there is a 1ms delay between reads as all reads now go via an async process and queue\r\neg\r\nport.BytesToRead \u003e 4\r\n\r\nport.ReadByte();\r\n// 1ms\r\nport.ReadByte();\r\n// 1ms\r\nport.ReadByte();\r\n// 1ms\r\nport.ReadByte();",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOLIqusg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NzEyMDgxNw==",
                                           "createdAt":  "2020-12-17T00:23:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jozkee",
                                           "body":  "cc @krwq @wfurt ",
                                           "updatedAt":  "2020-12-17T00:23:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NzI2NzM4MQ==",
                                           "createdAt":  "2020-12-17T07:33:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "The sleep is not great. Further more, each ReadByte() will create new Task and that is not cheap either. Some of the complexity is there to deal with signal notification. I\u0027m wondering if it would make sense to simplify all this in case of synchronous reads e.g. no async and no signal tracking. It seems like reading byte is quite common and it would make sense to optimize for it IMHO.",
                                           "updatedAt":  "2020-12-17T07:33:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc0NzI4NjE5NA==",
                                           "createdAt":  "2020-12-17T08:18:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "krwq",
                                           "body":  "There are couple of ways we can deal with that I can think of:\r\n- use different code paths when there are no signals\r\n- buffering (but then, should write return immediately while we send in the background?)\r\n- deprecate signals (I do not recommend people to use them anyway) and make the whole library lighter",
                                           "updatedAt":  "2020-12-17T08:18:02Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "SerialPort read latency on linux",
        "labels":  [
                       "help wanted",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60209",
        "createdAt":  "2021-10-09T01:04:06Z",
        "number":  60209,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-09T12:30:15Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Input-SerialPort-binary--byte-value-17-H/1419827)._\n\n---\n I am communicating with a device via SerialPort. I have an 11 Byte frame with a. in byte 9 and 10 I receive a counter and this when it matches the value 17 Hex (11) omits the byte and the frame is cut\n\n---\n### Original Comments\n\n#### null on 5/12/2021, 08:23 PM: \n\n\u003cp\u003eJust double confirm with you, Is this a problem with Visual Studio?\u003cbr\u003e\nDoes this reproduce for all project or specific project? If it’s reproduce with the specific project, which project do you use? It would be very helpful if you can provide a screenshot of this issue. Thanks for your help!\u003c/p\u003e\n\n#### Manel Juni Marín on 5/13/2021, 01:53 AM: \n\n(private comment, text removed)\n#### Feedback Bot on 5/13/2021, 02:44 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### Amy Li [MSFT] on 5/14/2021, 04:37 AM: \n\n\u003cp\u003eHi Manel,\u003c/p\u003e\n\u003cp\u003eIn order to investigate this issue further could you please share your sample app for us.\u003c/p\u003e\n\u003cp\u003eIn addition, this problem occurs on which VS version? You can install the latet VS from here: \u003ca target=\u0027_blank\u0027 href=\"https://visualstudio.microsoft.com/downloads/\"\u003ehttps://visualstudio.microsoft.com/downloads/\u003c/a\u003e to check whether it still reproduced.\u003c/p\u003e\n\u003cp\u003eThanks for help us build a better visual studio!\u003c/p\u003e\n\n#### Manel Juni Marín on 5/14/2021, 07:54 AM: \n\n(private comment, text removed)\n#### Feedback Bot on 5/19/2021, 08:02 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### Manel Juni Marín on 6/25/2021, 03:27 AM: \n\n\u003cp\u003eGood morning, I observe that you are passing days without having news on the subject. Can you tell me news?\u003cbr\u003e\nThank you!\u003c/p\u003e\n\n#### Tracy Wang [MSFT] on 8/23/2021, 02:00 AM: \n\n\u003cp\u003eThank you for taking the time to log this issue! Did you still reproduce this issue in the latest stable version of Visual Studio installed from \u003ca target=\u0027_blank\u0027 href=\"https://visualstudio.microsoft.com/downloads\"\u003ehttps://visualstudio.microsoft.com/downloads\u003c/a\u003e ?\u003cbr\u003e\nIf so, in order for us to investigate this further, could you please provide repro steps, a more detailed description of the faulty behavior and the actions you were taking when the issue appeared to help us better understand this scenario? It would be very helpful if you could provide some screenshots of this problem.\u003c/p\u003e\n\u003cp\u003eWe look forward to hearing from you!\u003c/p\u003e\n\n#### Manel Juni Marín on 9/5/2021, 00:10 PM: \n\n(private comment, text removed)\n#### Feedback Bot on 8/31/2021, 07:20 PM: \n\nWe will close this report in 14 days because we don’t have enough information to investigate further. To keep the problem open, please provide the requested details.\n\n#### Feedback Bot on 9/8/2021, 11:02 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n\n---\n### Original Solutions\n\n#### Jeff Handley [MSFT] solved on 9/21/2021, 10:24 PM, 0 votes: \n\n\u003cp\u003ePlease see the previous comment about the root cause being in a different component. Thank you.\u003c/p\u003e\n\n#### Manel Juni Marín on 9/21/2021, 11:20 PM: \n\n\u003cp\u003eCan you explain the reason for its closure, please\u003c/p\u003e\n\n#### Manel Juni Marín on 9/28/2021, 11:58 PM: \n\n\u003cp\u003eIn the event that you do not see the error I invite you to perform a remote session to show you the detail. If, on the other hand, you consider that this problem does not derive from your department, give instructions to channel it in the right place. Thank you\u003c/p\u003e\n\n#### Mila Zhou[MSFT] solved on 5/19/2021, 01:34 AM, -1 votes: \n\n\u003cp\u003ePosted by Amy Li :Thank you for your valuable feedback. Even though the issue you reported is surfacing in Visual Studio, we have determined it is caused by an issue in Siemens. Please report directly to the component provider. For your convenience here is a link: \u003ca target=\u0027_blank\u0027 href=\"https://new.siemens.com/ca/en/products/buildingtechnologies/customer-feedback.html\"\u003ehttps://new.siemens.com/ca/en/products/buildingtechnologies/customer-feedback.html\u003c/a\u003e where the issue can be submitted.\u003c/p\u003e\n\n#### Manel Juni Marín on 5/19/2021, 03:50 AM: \n\n\u003cp\u003eI have performed the reception broadcast with two Windows interlocutors in Visual Studio 2019 between 2 ports of the same computer and the result also shows the same error. In this case, no external equipment has intervened. I await your suggestions\u003c/p\u003e\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbnxYQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc43-v-j",
                                           "createdAt":  "2021-10-09T01:04:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/Input-SerialPort-binary--byte-value-17-H/1419827)._\n\n---\n I am communicating with a device via SerialPort. I have an 11 Byte frame with a. in byte 9 and 10 I receive a counter and this when it matches the value 17 Hex (11) omits the byte and the frame is cut\n\n---\n### Original Comments\n\n#### null on 5/12/2021, 08:23 PM: \n\n\u003cp\u003eJust double confirm with you, Is this a problem with Visual Studio?\u003cbr\u003e\nDoes this reproduce for all project or specific project? If it’s reproduce with the specific project, which project do you use? It would be very helpful if you can provide a screenshot of this issue. Thanks for your help!\u003c/p\u003e\n\n#### Manel Juni Marín on 5/13/2021, 01:53 AM: \n\n(private comment, text removed)\n#### Feedback Bot on 5/13/2021, 02:44 AM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### Amy Li [MSFT] on 5/14/2021, 04:37 AM: \n\n\u003cp\u003eHi Manel,\u003c/p\u003e\n\u003cp\u003eIn order to investigate this issue further could you please share your sample app for us.\u003c/p\u003e\n\u003cp\u003eIn addition, this problem occurs on which VS version? You can install the latet VS from here: \u003ca target=\u0027_blank\u0027 href=\"https://visualstudio.microsoft.com/downloads/\"\u003ehttps://visualstudio.microsoft.com/downloads/\u003c/a\u003e to check whether it still reproduced.\u003c/p\u003e\n\u003cp\u003eThanks for help us build a better visual studio!\u003c/p\u003e\n\n#### Manel Juni Marín on 5/14/2021, 07:54 AM: \n\n(private comment, text removed)\n#### Feedback Bot on 5/19/2021, 08:02 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n#### Manel Juni Marín on 6/25/2021, 03:27 AM: \n\n\u003cp\u003eGood morning, I observe that you are passing days without having news on the subject. Can you tell me news?\u003cbr\u003e\nThank you!\u003c/p\u003e\n\n#### Tracy Wang [MSFT] on 8/23/2021, 02:00 AM: \n\n\u003cp\u003eThank you for taking the time to log this issue! Did you still reproduce this issue in the latest stable version of Visual Studio installed from \u003ca target=\u0027_blank\u0027 href=\"https://visualstudio.microsoft.com/downloads\"\u003ehttps://visualstudio.microsoft.com/downloads\u003c/a\u003e ?\u003cbr\u003e\nIf so, in order for us to investigate this further, could you please provide repro steps, a more detailed description of the faulty behavior and the actions you were taking when the issue appeared to help us better understand this scenario? It would be very helpful if you could provide some screenshots of this problem.\u003c/p\u003e\n\u003cp\u003eWe look forward to hearing from you!\u003c/p\u003e\n\n#### Manel Juni Marín on 9/5/2021, 00:10 PM: \n\n(private comment, text removed)\n#### Feedback Bot on 8/31/2021, 07:20 PM: \n\nWe will close this report in 14 days because we don’t have enough information to investigate further. To keep the problem open, please provide the requested details.\n\n#### Feedback Bot on 9/8/2021, 11:02 PM: \n\n\u003cp\u003eWe have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\u003c/p\u003e\n\n\n---\n### Original Solutions\n\n#### Jeff Handley [MSFT] solved on 9/21/2021, 10:24 PM, 0 votes: \n\n\u003cp\u003ePlease see the previous comment about the root cause being in a different component. Thank you.\u003c/p\u003e\n\n#### Manel Juni Marín on 9/21/2021, 11:20 PM: \n\n\u003cp\u003eCan you explain the reason for its closure, please\u003c/p\u003e\n\n#### Manel Juni Marín on 9/28/2021, 11:58 PM: \n\n\u003cp\u003eIn the event that you do not see the error I invite you to perform a remote session to show you the detail. If, on the other hand, you consider that this problem does not derive from your department, give instructions to channel it in the right place. Thank you\u003c/p\u003e\n\n#### Mila Zhou[MSFT] solved on 5/19/2021, 01:34 AM, -1 votes: \n\n\u003cp\u003ePosted by Amy Li :Thank you for your valuable feedback. Even though the issue you reported is surfacing in Visual Studio, we have determined it is caused by an issue in Siemens. Please report directly to the component provider. For your convenience here is a link: \u003ca target=\u0027_blank\u0027 href=\"https://new.siemens.com/ca/en/products/buildingtechnologies/customer-feedback.html\"\u003ehttps://new.siemens.com/ca/en/products/buildingtechnologies/customer-feedback.html\u003c/a\u003e where the issue can be submitted.\u003c/p\u003e\n\n#### Manel Juni Marín on 5/19/2021, 03:50 AM: \n\n\u003cp\u003eI have performed the reception broadcast with two Windows interlocutors in Visual Studio 2019 between 2 ports of the same computer and the result also shows the same error. In this case, no external equipment has intervened. I await your suggestions\u003c/p\u003e\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-09T01:04:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43-wW3",
                                           "createdAt":  "2021-10-09T01:12:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "I had previously misunderstood the thread on this issue and thought it was an external issue. I\u0027ve transferred this over to GitHub for investigation since it\u0027s unresolved.",
                                           "updatedAt":  "2021-10-09T01:12:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dufFh",
                                           "createdAt":  "2025-02-09T12:30:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "I don\u0027t expect our team will be able to investigate this soon. I\u0027m marking it as https://github.com/dotnet/runtime/labels/help%20wanted in case a community member is interested in debugging this further to try to find a root cause and possible fix.",
                                           "updatedAt":  "2025-02-09T12:30:08Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Input SerialPort binary  byte value 17 Hex (11) omits the byte and the frame is cut",
        "labels":  [
                       "help wanted",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64507",
        "createdAt":  "2022-01-30T05:04:08Z",
        "number":  64507,
        "author":  "ctacke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCMMjKQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bryancostanich",
                                            "createdAt":  "2022-01-30T05:24:21Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-01-24T19:18:28Z",
        "body":  "### Description\r\n\r\nTrying to open a System.IO.Ports.SerialPort for 250000 baud under Linux gives an argument exception.  Even if it didn\u0027t the underlying code would still fail to properly open that rate.\r\n\r\nThis is a common serial rate for many 3D printers, such as all Lulzbot printers.\r\n\r\nBot said to add an Area, but didn\u0027t say where.  So here it is: @adamsitnik \r\n\r\n### Reproduction Steps\r\n\r\nRunning on any version of .NET (fails in 5 and 6) on a Raspberry Pi with the latest 32-bit Rasberry Pi OS, attempt to open a serial port:\r\n\r\n```\r\nvar port port = new SerialPort(\"/dev/ttyACM0\", 250000, Parity.None, 8, StopBits.One);\r\n```\r\n\r\n### Expected behavior\r\n\r\nI expect it to open and be usable.\r\n\r\n### Actual behavior\r\n\r\nAn exception is thrown.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nI have a known-good, working workaround.  It\u0027s ugly, but works.\r\nFirst, open the port with a supported rate, like 115200.  then run this code:\r\n\r\n```\r\n[DllImport(\"libc\", SetLastError = true)]\r\nprivate static extern int ioctl(IntPtr fd, uint request, int[] data);\r\n\r\nprivate void SetNonStandardBaudRateIfRequired()\r\n{\r\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux)\r\n        \u0026\u0026 _baudRate \u003e 115200)\r\n    {\r\n        // due to limitations/behavior of Linux driver, we need to work around setting the baud rate above 115200\r\n        var stream = m_port.GetType()\r\n            .GetField(\"_internalSerialStream\", BindingFlags.NonPublic | BindingFlags.Instance)\r\n            .GetValue(m_port);\r\n        var handle = (SafeHandle)stream.GetType()\r\n            .GetField(\"_handle\", BindingFlags.NonPublic | BindingFlags.Instance)\r\n            .GetValue(stream);\r\n\r\n        uint TCGETS2 = 0x802C542A;\r\n        uint TCSETS2 = 0x402C542B;\r\n        var BOTHER = 0x1000; // 0o010000;\r\n        var CBAUD = 0x100F; // 0o010017;\r\n\r\n        var buffer = new int[64];\r\n\r\n        // get the current value\r\n        var fd = handle.DangerousGetHandle();\r\n        ioctl(fd, TCGETS2, buffer);\r\n        buffer[2] \u0026= ~CBAUD; // turn off the standard baud flag\r\n        buffer[2] |= BOTHER; // turn on the \"other baud rate\" flag\r\n        buffer[9] = buffer[10] = _baudRate; // set the same rate in both directions\r\n        Console.WriteLine($\"BAUD RATE WORKAROUND\");\r\n        // write the new value\r\n        var result = ioctl(fd, TCSETS2, buffer);\r\n        if (result != 0)\r\n        {\r\n            // failure\r\n            Console.WriteLine($\"IOCTL FAILED: {Marshal.GetLastWin32Error()}\");\r\n            return;\r\n        }\r\n        // verify\r\n        ioctl(fd, TCGETS2, buffer);\r\n        if (buffer[9] != _baudRate || buffer[10] != _baudRate)\r\n        {\r\n            // failure\r\n            Console.WriteLine($\"IOCTL FAILED: read != write\");\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nI told you it was ugly.\r\n\r\n*NOTE* that this code is unsetting the `CBAUD` flag and then setting the `BOTHER` flag, which the BCL does not do.  Simply allowing 250000 baud through is not enough, the logic above must be applied.\r\n\r\n*NOTE 2* the above is not the right way to do it in the BCL.  The proper fix should be done in C in the PAL, somewhere in this method:\r\n\r\nhttps://github.com/dotnet/runtime/blob/c12bea880a2f1290d16adf97ec1000aa63631da2/src/native/libs/System.IO.Ports.Native/pal_termios.c#L350\r\n\r\nI would have done a fork and PR, but honestly I don\u0027t have the native toolchain set up, and that feels like a huge headache.  Anyone with a little C knowledge can port the above into that file.\r\n\r\n\r\n### Configuration\r\n\r\n.NET 5.0\r\nRaspberry Pi 4\r\nARM\r\n```\r\npi@raspberrypi:~/marlin $ cat /etc/os-release\r\nPRETTY_NAME=\"Raspbian GNU/Linux 11 (bullseye)\"\r\nNAME=\"Raspbian GNU/Linux\"\r\nVERSION_ID=\"11\"\r\nVERSION=\"11 (bullseye)\"\r\nVERSION_CODENAME=bullseye\r\n```\r\nThis is not specific to this configuration.  I\u0027m willing to bet it will fail on any Linux kernel.\r\n\r\n### Other information\r\n\r\nFix and where it belongs are detailed above",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOccV71g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc49GVeB",
                                           "createdAt":  "2022-01-30T05:04:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2022-01-30T05:04:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49GWO9",
                                           "createdAt":  "2022-01-30T05:30:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\nTrying to open a System.IO.Ports.SerialPort for 250000 baud under Linux gives an argument exception.  Even if it didn\u0027t the underlying code would still fail to properly open that rate.\r\n\r\nThis is a common serial rate for many 3D printers, such as all Lulzbot printers.\r\n\r\nBot said to add an Area, but didn\u0027t say where.  So here it is: @adamsitnik \r\n\r\n### Reproduction Steps\r\n\r\nRunning on any version of .NET (fails in 5 and 6) on a Raspberry Pi with the latest 32-bit Rasberry Pi OS, attempt to open a serial port:\r\n\r\n```\r\nvar port port = new SerialPort(\"/dev/ttyACM0\", 250000, Parity.None, 8, StopBits.One);\r\n```\r\n\r\n### Expected behavior\r\n\r\nI expect it to open and be usable.\r\n\r\n### Actual behavior\r\n\r\nAn exception is thrown.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nI have a known-good, working workaround.  It\u0027s ugly, but works.\r\nFirst, open the port with a supported rate, like 115200.  then run this code:\r\n\r\n```\r\n[DllImport(\"libc\", SetLastError = true)]\r\nprivate static extern int ioctl(IntPtr fd, uint request, int[] data);\r\n\r\nprivate void SetNonStandardBaudRateIfRequired()\r\n{\r\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux)\r\n        \u0026\u0026 _baudRate \u003e 115200)\r\n    {\r\n        // due to limitations/behavior of Linux driver, we need to work around setting the baud rate above 115200\r\n        var stream = m_port.GetType()\r\n            .GetField(\"_internalSerialStream\", BindingFlags.NonPublic | BindingFlags.Instance)\r\n            .GetValue(m_port);\r\n        var handle = (SafeHandle)stream.GetType()\r\n            .GetField(\"_handle\", BindingFlags.NonPublic | BindingFlags.Instance)\r\n            .GetValue(stream);\r\n\r\n        uint TCGETS2 = 0x802C542A;\r\n        uint TCSETS2 = 0x402C542B;\r\n        var BOTHER = 0x1000; // 0o010000;\r\n        var CBAUD = 0x100F; // 0o010017;\r\n\r\n        var buffer = new int[64];\r\n\r\n        // get the current value\r\n        var fd = handle.DangerousGetHandle();\r\n        ioctl(fd, TCGETS2, buffer);\r\n        buffer[2] \u0026= ~CBAUD; // turn off the standard baud flag\r\n        buffer[2] |= BOTHER; // turn on the \"other baud rate\" flag\r\n        buffer[9] = buffer[10] = _baudRate; // set the same rate in both directions\r\n        Console.WriteLine($\"BAUD RATE WORKAROUND\");\r\n        // write the new value\r\n        var result = ioctl(fd, TCSETS2, buffer);\r\n        if (result != 0)\r\n        {\r\n            // failure\r\n            Console.WriteLine($\"IOCTL FAILED: {Marshal.GetLastWin32Error()}\");\r\n            return;\r\n        }\r\n        // verify\r\n        ioctl(fd, TCGETS2, buffer);\r\n        if (buffer[9] != _baudRate || buffer[10] != _baudRate)\r\n        {\r\n            // failure\r\n            Console.WriteLine($\"IOCTL FAILED: read != write\");\r\n            return;\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nI told you it was ugly.\r\n\r\n*NOTE* that this code is unsetting the `CBAUD` flag and then setting the `BOTHER` flag, which the BCL does not do.  Simply allowing 250000 baud through is not enough, the logic above must be applied.\r\n\r\n*NOTE 2* the above is not the right way to do it in the BCL.  The proper fix should be done in C in the PAL, somewhere in this method:\r\n\r\nhttps://github.com/dotnet/runtime/blob/c12bea880a2f1290d16adf97ec1000aa63631da2/src/native/libs/System.IO.Ports.Native/pal_termios.c#L350\r\n\r\nI would have done a fork and PR, but honestly I don\u0027t have the native toolchain set up, and that feels like a huge headache.  Anyone with a little C knowledge can port the above into that file.\r\n\r\n\r\n### Configuration\r\n\r\n.NET 5.0\r\nRaspberry Pi 4\r\nARM\r\n```\r\npi@raspberrypi:~/marlin $ cat /etc/os-release\r\nPRETTY_NAME=\"Raspbian GNU/Linux 11 (bullseye)\"\r\nNAME=\"Raspbian GNU/Linux\"\r\nVERSION_ID=\"11\"\r\nVERSION=\"11 (bullseye)\"\r\nVERSION_CODENAME=bullseye\r\n```\r\nThis is not specific to this configuration.  I\u0027m willing to bet it will fail on any Linux kernel.\r\n\r\n### Other information\r\n\r\nFix and where it belongs are detailed above\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ectacke\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-30T05:30:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49H-kc",
                                           "createdAt":  "2022-01-31T08:46:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "adamsitnik",
                                           "body":  "We are most likely missing a mapping for the `250000` rate:\r\n\r\nThe managed layer checks only if the value is negative:\r\n\r\nhttps://github.com/dotnet/runtime/blob/6de7147b9266d7730b0d73ba67632b0c198cb11e/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialStream.Unix.cs#L115-L117\r\n\r\nThe native layer maps the value and returns a default value if no mapping is defined:\r\n\r\nhttps://github.com/dotnet/runtime/blob/71192eacd5194e8afce9686e701aa5f072972b8d/src/native/libs/System.IO.Ports.Native/pal_termios.c#L242\r\n\r\nFor default value, when `HAVE_IOSS_H` is not defined an error is set and the method returns:\r\n\r\nhttps://github.com/dotnet/runtime/blob/71192eacd5194e8afce9686e701aa5f072972b8d/src/native/libs/System.IO.Ports.Native/pal_termios.c#L518-L525\r\n\r\nAnd then the managed layer throws:\r\n\r\nhttps://github.com/dotnet/runtime/blob/6de7147b9266d7730b0d73ba67632b0c198cb11e/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialStream.Unix.cs#L596-L598\r\n\r\n@wfurt @krwq I am not familiar with how the `TermiosSpeed2Rate` mapping works. Could you briefly explain what it does and how can we solve the problem?",
                                           "updatedAt":  "2022-01-31T08:46:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49JlZy",
                                           "createdAt":  "2022-01-31T15:47:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCMWtRQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-01-31T17:15:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ctacke",
                                           "body":  "termios supports even non-standard rates.  It seems that instead of returning B0 and throwing an error, it would be more robust to use the supported TCSETS2 struct with BOTHER (like I\u0027m doing in my workaround) to attempt to set the rate the user is requesting and only throw if that is unsuccessful.  Let the underlying platform driver tell you if the requested rate is or is not supported.  Beyond these common printers and their 250kbaud, if someone builds some custom machine with some strange clock and supported baud rate, it would still let managed code call it.",
                                           "updatedAt":  "2022-01-31T15:47:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49LopK",
                                           "createdAt":  "2022-02-01T04:09:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCSxQ2g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-03-14T12:18:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Part of the problem is fact that the PAL code is but agains some headers and it may miss capability of never kernels. \r\nIt may be worth of adding missing defines as needed to support known speeds even if the build machine does not. \r\nAnd trying it as custom speed makes sense to me as well. I\u0027m not sure how common that is but trying it and leaving the decision to the driver make sense to me.  ",
                                           "updatedAt":  "2022-02-01T04:09:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5xxXvW",
                                           "createdAt":  "2024-01-24T19:18:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "I know this is old issue, but is 8.0 working for you @ctacke? I finally got setup where I can play with it and it seems to be working OK e.g. should be fixed by #80534.  I think this issue could be closed. ",
                                           "updatedAt":  "2024-01-24T19:18:27Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "SerialPort on Linux fails to open for 250k baud",
        "labels":  [
                       "help wanted",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66506",
        "createdAt":  "2022-03-11T14:58:19Z",
        "number":  66506,
        "author":  "JansthcirlU",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-23T02:21:13Z",
        "body":  "### Background and motivation\r\n\r\nIn the current implementation of the [`SerialPort` class](https://github.com/dotnet/runtime/blob/main/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialPort.cs), the default value of `DataBits` (i.e. bits per byte) is set to 8, but the default `Encoding` is set to ASCII, which is a 7-bit character encoding. Whenever the `ReadChar()` or `ReadExisting()` methods are called—respectively returning the next byte as a character or the next bytes as a whole string—the port assumes that the read bytes are of the ubiquitous 8-bit variation, but tries to encode them into 7-bit characters. As a result, any byte values greater than 127 yield invalid ASCII characters and are returned as `?`s instead.\r\n\r\n\u003e In data transmission systems, the byte is used as a contiguous sequence of bits in a serial data stream, representing the smallest distinguished unit of data. A transmission unit might additionally include start bits, stop bits, and [parity bits](https://en.wikipedia.org/wiki/Parity_bit), and thus its size may vary from seven to twelve bits to contain a single seven-bit [ASCII](https://en.wikipedia.org/wiki/ASCII)[](https://en.wikipedia.org/wiki/Byte#cite_note-NWU-71) code.\r\n\r\nAccording to this quote from the [Wikipedia article on the *Byte*](https://en.wikipedia.org/wiki/Byte#Common_uses), serial communication allows for byte values that aren\u0027t necessarily always 8 bits in size, so it makes sense that there is a constructor parameter called `DataBits` in the `SerialPort` class. However, there is no constructor parameter to set the `Encoding` that corresponds with that data bit size. This means that consumers of the `SerialPort` class may receive corrupted data because they\u0027re not aware that they have to set the `Encoding` property in order to read out the default byte size correctly.\r\n\r\nI would like to suggest setting the default value of `SerialPort._encoding` to `Encoding.Latin1` (or `Encoding.GetEncoding(28591)` for backward compatibility), which is an 8-bit character encoding that matches the default value of `SerialPort.DefaultDataBits`.\r\n\r\n### API Proposal\r\n\r\n```C#\r\nusing Microsoft.Win32;\r\nusing System.ComponentModel;\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nnamespace System.IO.Ports\r\n{\r\n    public partial class SerialPort : Component\r\n    {\r\n        ...\r\n        // --------- members supporting exposed properties ------------*\r\n        // Latin1 (ISO/IEC 8859-1) accommodates 8-bit bytes unlike ASCII\r\n        private static Encoding Latin1 = Encoding.GetEncoding(28591);\r\n        private Encoding _encoding = Latin1;\r\n        private Decoder _decoder = Latin1.GetDecoder();\r\n        private int _maxByteCountForSingleChar = Latin1.GetMaxByteCount(1);\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```C#\r\nSerialPort port = new SerialPort(\"COM1\"); // Suggested defaults: 8-bit bytes and Latin1 encoding\r\n\r\n// 1) Read bytes directly from the received serial data\r\nbyte[] receivedBytes = new byte[8];\r\nint bytesRead = port.Read(receivedBytes, 0, receivedBytes.Length);\r\n\r\n// 2) Read serial data string and convert to a byte array\r\nstring receivedData = port.ReadExisting();\r\nbyte[] receivedBytesFromData = port.Encoding.GetBytes(receivedData);\r\n```\r\nScenario (1) is the more traditional way to read out serial data, where the serial port\u0027s data stream is partially copied over to the provided byte array. Scenario (2) calls a method that does the same as (1) under the hood with the added step of encoding the received data to a string, which can then be decoded to get the original byte array again.\r\n\r\n|  | Bytes read |\r\n| --- | --- |\r\n| Example data | `[8, 13, 21, 34, 55, 89, 144, 233]` |\r\n| Scenario (1) | `[8, 13, 21, 34, 55, 89, 144, 233]` |\r\n| Scenario (2) currently | `[8, 13, 21, 34, 55, 89, 63, 63]` |\r\n| Scenario (2) proposed | `[8, 13, 21, 34, 55, 89, 144, 233]` |\r\n\r\nRegardless of which is more readable or useful or efficient, if the `SerialPort` class exposes these character-level and string-level interactions, then they should yield the same results as the more traditional byte array methods when reading the same data.\r\n\r\n### Alternative Designs\r\n\r\nI would also suggest adding an `Encoding encoding` parameter to the `SerialPort` constructors where `int dataBits` is customisable, just to make sure that the character and string-level interactions yield the same results as the traditional byte-level interactions.\r\n\r\n```csharp\r\nusing Microsoft.Win32;\r\nusing System.ComponentModel;\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nnamespace System.IO.Ports\r\n{\r\n    public partial class SerialPort : Component\r\n    {\r\n        // Latin1 (ISO/IEC 8859-1) accommodates 8-bit bytes unlike ASCII\r\n        private static Encoding Latin1 = Encoding.GetEncoding(28591);\r\n        ...\r\n        // -------- SECTION: constructors -----------------*\r\n        public SerialPort()\r\n        {\r\n            _dataReceivedHandler = new SerialDataReceivedEventHandler(CatchReceivedEvents);\r\n        }\r\n\r\n        public SerialPort(IContainer container) : this()\r\n        {\r\n            // Required for Windows.Forms Class Composition Designer support\r\n            container.Add(this);\r\n        }\r\n\r\n        // Non-design SerialPort constructors here chain, using default values for members left unspecified by parameters\r\n        // Note: Calling SerialPort() does not open a port connection but merely instantiates an object.\r\n        //     : A connection must be made using SerialPort\u0027s Open() method.\r\n\r\n        // Added Latin1 as the default parameter value of encoding in existing constructors\r\n        public SerialPort(string portName)\r\n            : this(portName, DefaultBaudRate, DefaultParity, DefaultDataBits, DefaultStopBits, Latin1)\r\n        {\r\n        }\r\n\r\n        public SerialPort(string portName, int baudRate)\r\n            : this(portName, baudRate, DefaultParity, DefaultDataBits, DefaultStopBits, Latin1)\r\n        {\r\n        }\r\n\r\n        public SerialPort(string portName, int baudRate, Parity parity)\r\n            : this(portName, baudRate, parity, DefaultDataBits, DefaultStopBits, Latin1)\r\n        {\r\n        }\r\n\r\n        public SerialPort(string portName, int baudRate, Parity parity, int dataBits)\r\n            : this(portName, baudRate, parity, dataBits, DefaultStopBits, Latin1)\r\n        {\r\n        }\r\n\r\n        // all the magic happens in the call to the instance\u0027s .Open() method.\r\n        // Internally, the SerialStream constructor opens the file handle, sets the device\r\n        // control block and associated Win32 structures, and begins the event-watching cycle.\r\n        public SerialPort(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits)\r\n            : this(portName, baudRate, parity, dataBits, stopBits, Latin1)\r\n        {\r\n        }\r\n\r\n        // Newly added constructor that includes a parameter for the encoding\r\n        public SerialPort(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits, Encoding encoding)\r\n            : this()\r\n        {\r\n            PortName = portName;\r\n            BaudRate = baudRate;\r\n            Parity = parity;\r\n            DataBits = dataBits;\r\n            StopBits = stopBits;\r\n            Encoding = encoding;\r\n        }\r\n        ...\r\n    }\r\n}\r\n```\r\n\r\n### Risks\r\n\r\nThe `Encoding.Latin1` property was only added in .NET 5, so to be backward compatible the encoding would have to be called using the `Encoding.GetEncoding(int codepage)` method, which all .NET versions (including Framework) have in common. I\u0027ve used a static field called `Latin1` for simplicity, but it might be safer to call the `GetEncoding` method wherever I\u0027ve written `Latin1`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOP32E3w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4_fYTf",
                                           "createdAt":  "2022-03-11T14:58:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nIn the current implementation of the [`SerialPort` class](https://github.com/dotnet/runtime/blob/main/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialPort.cs), the default value of `DataBits` (i.e. bits per byte) is set to 8, but the default `Encoding` is set to ASCII, which is a 7-bit character encoding. Whenever the `ReadChar()` or `ReadExisting()` methods are called—respectively returning the next byte as a character or the next bytes as a whole string—the port assumes that the read bytes are of the ubiquitous 8-bit variation, but tries to encode them into 7-bit characters. As a result, any byte values greater than 127 yield invalid ASCII characters and are returned as `?`s instead.\r\n\r\n\u003e In data transmission systems, the byte is used as a contiguous sequence of bits in a serial data stream, representing the smallest distinguished unit of data. A transmission unit might additionally include start bits, stop bits, and [parity bits](https://en.wikipedia.org/wiki/Parity_bit), and thus its size may vary from seven to twelve bits to contain a single seven-bit [ASCII](https://en.wikipedia.org/wiki/ASCII)[](https://en.wikipedia.org/wiki/Byte#cite_note-NWU-71) code.\r\n\r\nAccording to this quote from the [Wikipedia article on the *Byte*](https://en.wikipedia.org/wiki/Byte#Common_uses), serial communication allows for byte values that aren\u0027t necessarily always 8 bits in size, so it makes sense that there is a constructor parameter called `DataBits` in the `SerialPort` class. However, there is no constructor parameter to set the `Encoding` that corresponds with that data bit size. This means that consumers of the `SerialPort` class may receive corrupted data because they\u0027re not aware that they have to set the `Encoding` property in order to read out the default byte size correctly.\r\n\r\nI would like to suggest setting the default value of `SerialPort._encoding` to `Encoding.Latin1` (or `Encoding.GetEncoding(28591)` for backward compatibility), which is an 8-bit character encoding that matches the default value of `SerialPort.DefaultDataBits`.\n\n### API Proposal\n\n```C#\r\nusing Microsoft.Win32;\r\nusing System.ComponentModel;\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nnamespace System.IO.Ports\r\n{\r\n    public partial class SerialPort : Component\r\n    {\r\n        ...\r\n        // --------- members supporting exposed properties ------------*\r\n        private static Encoding Latin1 = Encoding.GetEncoding(28591); // Latin1 (ISO/IEC 8859-1) accommodates 8-bit bytes unlike ASCII\r\n        private Encoding _encoding = Latin1;\r\n        private Decoder _decoder = Latin1.GetDecoder();\r\n        private int _maxByteCountForSingleChar = Latin1.GetMaxByteCount(1);\r\n        ...\r\n    }\r\n}\r\n```\r\n\n\n### API Usage\n\n```C#\r\nSerialPort port = new SerialPort(\"COM1\"); // Suggested defaults: 8-bit bytes and Latin1 encoding\r\n\r\n// 1) Read bytes directly from the received serial data\r\nbyte[] receivedBytes = new byte[8];\r\nint bytesRead = port.Read(receivedBytes, 0, receivedBytes.Length);\r\n\r\n// 2) Read serial data string and convert to a byte array\r\nstring receivedData = port.ReadExisting();\r\nbyte[] receivedBytesFromData = port.Encoding.GetBytes(receivedData);\r\n```\r\nScenario (1) is the more traditional way to read out serial data, where the serial port\u0027s data stream is partially copied over to the provided byte array. Scenario (2) calls a method that does the same as (1) under the hood with the added step of encoding the received data to a string, which can then be decoded to get the original byte array again.\r\n\r\n| Example data | Scenario (1) | Scenario (2) |\r\n| --- | --- | --- |\r\n| `[8, 13, 21, 34, 55, 89, 144, 233]` | `[8, 13, 21, 34, 55, 89, 63, 63]` | `[8, 13, 21, 34, 55, 89, 144, 233]` |\r\n\r\nRegardless of which is more readable or useful or efficient, if the `SerialPort` class exposes these character-level and string-level interactions, then they should yield the same results as the more traditional byte array methods when reading the same data.\n\n### Alternative Designs\n\nI would also suggest adding an `Encoding encoding` parameter to the `SerialPort` constructors where `int dataBits` is customisable, just to make sure that the character and string-level interactions yield the same results as the traditional byte-level interactions.\r\n\r\n```csharp\r\nusing Microsoft.Win32;\r\nusing System.ComponentModel;\r\nusing System.Diagnostics;\r\nusing System.Text;\r\n\r\nnamespace System.IO.Ports\r\n{\r\n    public partial class SerialPort : Component\r\n    {\r\n        private static Encoding Latin1 = Encoding.GetEncoding(28591); // Latin1 (ISO/IEC 8859-1) accommodates 8-bit bytes unlike ASCII\r\n        ...\r\n        // -------- SECTION: constructors -----------------*\r\n        public SerialPort()\r\n        {\r\n            _dataReceivedHandler = new SerialDataReceivedEventHandler(CatchReceivedEvents);\r\n        }\r\n\r\n        public SerialPort(IContainer container) : this()\r\n        {\r\n            // Required for Windows.Forms Class Composition Designer support\r\n            container.Add(this);\r\n        }\r\n\r\n        // Non-design SerialPort constructors here chain, using default values for members left unspecified by parameters\r\n        // Note: Calling SerialPort() does not open a port connection but merely instantiates an object.\r\n        //     : A connection must be made using SerialPort\u0027s Open() method.\r\n\r\n        // Added Latin1 as the default parameter value of encoding in existing constructors\r\n        public SerialPort(string portName) : this(portName, DefaultBaudRate, DefaultParity, DefaultDataBits, DefaultStopBits, Latin1)\r\n        {\r\n        }\r\n\r\n        public SerialPort(string portName, int baudRate) : this(portName, baudRate, DefaultParity, DefaultDataBits, DefaultStopBits, Latin1)\r\n        {\r\n        }\r\n\r\n        public SerialPort(string portName, int baudRate, Parity parity) : this(portName, baudRate, parity, DefaultDataBits, DefaultStopBits, Latin1)\r\n        {\r\n        }\r\n\r\n        public SerialPort(string portName, int baudRate, Parity parity, int dataBits) : this(portName, baudRate, parity, dataBits, DefaultStopBits, Latin1)\r\n        {\r\n        }\r\n\r\n        // all the magic happens in the call to the instance\u0027s .Open() method.\r\n        // Internally, the SerialStream constructor opens the file handle, sets the device\r\n        // control block and associated Win32 structures, and begins the event-watching cycle.\r\n        public SerialPort(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits) : this(portName, baudRate, parity, dataBits, stopBits, Latin1)\r\n        {\r\n        }\r\n\r\n        // Newly added constructor that includes a parameter for the encoding\r\n        public SerialPort(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits, Encoding encoding) : this()\r\n        {\r\n            PortName = portName;\r\n            BaudRate = baudRate;\r\n            Parity = parity;\r\n            DataBits = dataBits;\r\n            StopBits = stopBits;\r\n            Encoding = encoding;\r\n        }\r\n        ...\r\n    }\r\n}\r\n```\n\n### Risks\n\nThe `Encoding.Latin1` property was only added in .NET 5, so to be backward compatible the encoding would have to be called using the `Encoding.GetEncoding(int codepage)` method, which all .NET versions (including Framework) have in common. I\u0027ve used a static field called `Latin1` for simplicity, but it might be safer to call the `GetEncoding` method wherever I\u0027ve written `Latin1`.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJansthcirlU\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.IO`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-11T14:58:24Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: Set the default encoding of the serial port class to ISO/IEC 8859-1 to accommodate 8-bit bytes out of the box",
        "labels":  [
                       "api-suggestion",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68389",
        "createdAt":  "2022-04-22T13:04:33Z",
        "number":  68389,
        "author":  "Ben3094",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCwWBGw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "bxjg1987",
                                            "createdAt":  "2022-12-09T07:36:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "DoubleDBE",
                                            "createdAt":  "2023-05-28T04:36:50Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-11-23T02:26:25Z",
        "body":  "Hello,\r\nAll is almost ready for SerialPort access for Android devices (thanks to Linux).\r\nIs the System.IO.Ports support for Android near to deploy?\r\nThank you in advance,\r\nPS: thank you for this wonderful framework",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR6VKyg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5B88OQ",
                                           "createdAt":  "2022-04-22T13:04:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHello,\r\nAll is almost ready for SerialPort access for Android devices (thanks to Linux).\r\nIs the System.IO.Ports support for Android near to deploy?\r\nThank you in advance,\r\nPS: thank you for this wonderful framework\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eBen3094\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-22T13:04:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HpUrK",
                                           "createdAt":  "2022-08-02T04:51:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHello,\r\nAll is almost ready for SerialPort access for Android devices (thanks to Linux).\r\nIs the System.IO.Ports support for Android near to deploy?\r\nThank you in advance,\r\nPS: thank you for this wonderful framework\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eBen3094\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO`, `os-android`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-02T04:51:43Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "System.IO.Ports support for Android",
        "labels":  [
                       "os-android",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70130",
        "createdAt":  "2022-06-02T06:34:14Z",
        "number":  70130,
        "author":  "KalibGao",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-20T16:10:20Z",
        "body":  "### Description\r\n\r\nIn windows 10, when the first `TimeoutException` has occurred at `SerialStream` =\u003e `Write`.  then the next requests written to the serial port will fail and throw by the same exception.\r\n\r\n\r\n### Reproduction Steps\r\n```\r\n2022-06-02 09:03:27.122 +08:00 [WRN] cmd execute error at COM19, request: Channel: COM19-1-1, Request time:  06-02 09:03:26:998, Cmd: [ 81 01 16 1E 46 19 11 4A 49 38 F6 E0 01 00 00 00 00 00 00 00 00 00 00 00 00 00 05 01 00 00 00 00 00 00 CE ]..\r\nSystem.TimeoutException: The write timed out.\r\n   at System.IO.Ports.SerialStream.Write(Byte[] array, Int32 offset, Int32 count, Int32 timeout)\r\n   at System.IO.Ports.SerialPort.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.WriteAndReadCStarCmd(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.Execute(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Processers.PortProcesser.ProcessRequestInQueue(CancellationToken stoppingToken)\r\n2022-06-02 09:03:27.351 +08:00 [WRN] cmd execute error at COM19, request: Channel: COM19-1-1, Request time:  06-02 09:03:26:998, Cmd: [ 81 01 16 1E 46 19 11 4A 49 38 F6 E0 01 00 00 00 00 00 00 00 00 00 00 00 00 00 05 01 00 00 00 00 00 00 CE ]..\r\nSystem.TimeoutException: The write timed out.\r\n   at System.IO.Ports.SerialStream.Write(Byte[] array, Int32 offset, Int32 count, Int32 timeout)\r\n   at System.IO.Ports.SerialPort.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.WriteAndReadCStarCmd(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.Execute(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Processers.PortProcesser.ProcessRequestInQueue(CancellationToken stoppingToken)\r\n2022-06-02 09:03:27.604 +08:00 [WRN] cmd execute error at COM19, request: Channel: COM19-1-1, Request time:  06-02 09:03:26:998, Cmd: [ 81 01 16 1E 46 19 11 4A 49 38 F6 E0 01 00 00 00 00 00 00 00 00 00 00 00 00 00 05 01 00 00 00 00 00 00 CE ]..\r\nSystem.TimeoutException: The write timed out.\r\n   at System.IO.Ports.SerialStream.Write(Byte[] array, Int32 offset, Int32 count, Int32 timeout)\r\n   at System.IO.Ports.SerialPort.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.WriteAndReadCStarCmd(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.Execute(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Processers.PortProcesser.ProcessRequestInQueue(CancellationToken stoppingToken)\r\n2022-06-02 09:03:27.840 +08:00 [WRN] cmd execute error at COM19, request: Channel: COM19-1-1, Request time:  06-02 09:03:26:998, Cmd: [ 81 01 16 1E 46 19 11 4A 49 38 F6 E0 01 00 00 00 00 00 00 00 00 00 00 00 00 00 05 01 00 00 00 00 00 00 CE ]..\r\nSystem.TimeoutException: The write timed out.\r\n   at System.IO.Ports.SerialStream.Write(Byte[] array, Int32 offset, Int32 count, Int32 timeout)\r\n   at System.IO.Ports.SerialPort.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.WriteAndReadCStarCmd(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.Execute(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Processers.PortProcesser.ProcessRequestInQueue(CancellationToken stoppingToken)\r\n2022-06-02 09:03:28.070 +08:00 [WRN] cmd execute error at COM19, request: Channel: COM19-1-1, Request time:  06-02 09:03:26:998, Cmd: [ 81 01 16 1E 46 19 11 4A 49 38 F6 E0 01 00 00 00 00 00 00 00 00 00 00 00 00 00 05 01 00 00 00 00 00 00 CE ]..\r\nSystem.TimeoutException: The write timed out.\r\n   at System.IO.Ports.SerialStream.Write(Byte[] array, Int32 offset, Int32 count, Int32 timeout)\r\n   at System.IO.Ports.SerialPort.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.WriteAndReadCStarCmd(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.Execute(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Processers.PortProcesser.ProcessRequestInQueue(CancellationToken stoppingToken)\r\n2022-06-02 09:03:28.081 +08:00 [WRN] runner has been stopped, connect point: A-1-1, response: Request time:  06-02 09:03:26:998, Cmd: [ 81 01 16 1E 46 19 11 4A 49 38 F6 E0 01 00 00 00 00 00 00 00 00 00 00 00 00 00 05 01 00 00 00 00 00 00 CE ], Reply: [ ], druation: 0.\r\n2022-06-02 09:03:28.319 +08:00 [WRN] cmd execute error at COM19, request: Channel: COM19-1-1, Request time:  06-02 09:03:28:081, Cmd: [ 81 01 07 01 04 8E ]..\r\nSystem.TimeoutException: The write timed out.\r\n   at System.IO.Ports.SerialStream.Write(Byte[] array, Int32 offset, Int32 count, Int32 timeout)\r\n   at System.IO.Ports.SerialPort.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.WriteAndReadCStarCmd(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.Execute(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Processers.PortProcesser.ProcessRequestInQueue(CancellationToken stoppingToken)\r\n```\r\n\r\n### Expected behavior\r\n- the previous write `TimeoutException` will affect the next write() method?\r\n- Is it reasonable logic for my report warning logs?\r\n- Any suggestion to prevent the 2nd, third... `TimeoutException`?\r\n\r\n### Actual behavior\r\nwhen I look into the source code, the write method throw `TimeoutException` is here. \r\n\r\nhttps://github.com/dotnet/runtime/blob/f5d308df7f179a2e31d3ab49cc727832ef0a4a5d/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialStream.Windows.cs#L1067-L1101\r\n\r\n### Regression?\r\n_No response_\r\n\r\n### Known Workarounds\r\n- The issue has some related to  #20370, it is hanging still,  any update?\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOX1BNcw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5EN41x",
                                           "createdAt":  "2022-06-02T06:34:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIn windows 10, when the first TimeoutException has occurred at `SerialStream` =\u003e `Write`.  then the next requests written to the serial port will fail and throw by the same exception. I look into the source code, the only write exception is here. \r\nthe previous write error will affect the next write()?\r\n\n\n### Reproduction Steps\n\nhttps://github.com/dotnet/runtime/blob/f5d308df7f179a2e31d3ab49cc727832ef0a4a5d/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialStream.Windows.cs#L1067-L1101\n\n### Expected behavior\n\nThe issue has some related to  #20370, it is hanging still,  any update?\n\n### Actual behavior\n\n```\r\n2022-06-02 09:03:27.122 +08:00 [WRN] cmd execute error at COM19, request: Channel: COM19-1-1, Request time:  06-02 09:03:26:998, Cmd: [ 81 01 16 1E 46 19 11 4A 49 38 F6 E0 01 00 00 00 00 00 00 00 00 00 00 00 00 00 05 01 00 00 00 00 00 00 CE ]..\r\nSystem.TimeoutException: The write timed out.\r\n   at System.IO.Ports.SerialStream.Write(Byte[] array, Int32 offset, Int32 count, Int32 timeout)\r\n   at System.IO.Ports.SerialPort.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.WriteAndReadCStarCmd(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.Execute(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Processers.PortProcesser.ProcessRequestInQueue(CancellationToken stoppingToken)\r\n2022-06-02 09:03:27.351 +08:00 [WRN] cmd execute error at COM19, request: Channel: COM19-1-1, Request time:  06-02 09:03:26:998, Cmd: [ 81 01 16 1E 46 19 11 4A 49 38 F6 E0 01 00 00 00 00 00 00 00 00 00 00 00 00 00 05 01 00 00 00 00 00 00 CE ]..\r\nSystem.TimeoutException: The write timed out.\r\n   at System.IO.Ports.SerialStream.Write(Byte[] array, Int32 offset, Int32 count, Int32 timeout)\r\n   at System.IO.Ports.SerialPort.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.WriteAndReadCStarCmd(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.Execute(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Processers.PortProcesser.ProcessRequestInQueue(CancellationToken stoppingToken)\r\n2022-06-02 09:03:27.604 +08:00 [WRN] cmd execute error at COM19, request: Channel: COM19-1-1, Request time:  06-02 09:03:26:998, Cmd: [ 81 01 16 1E 46 19 11 4A 49 38 F6 E0 01 00 00 00 00 00 00 00 00 00 00 00 00 00 05 01 00 00 00 00 00 00 CE ]..\r\nSystem.TimeoutException: The write timed out.\r\n   at System.IO.Ports.SerialStream.Write(Byte[] array, Int32 offset, Int32 count, Int32 timeout)\r\n   at System.IO.Ports.SerialPort.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.WriteAndReadCStarCmd(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.Execute(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Processers.PortProcesser.ProcessRequestInQueue(CancellationToken stoppingToken)\r\n2022-06-02 09:03:27.840 +08:00 [WRN] cmd execute error at COM19, request: Channel: COM19-1-1, Request time:  06-02 09:03:26:998, Cmd: [ 81 01 16 1E 46 19 11 4A 49 38 F6 E0 01 00 00 00 00 00 00 00 00 00 00 00 00 00 05 01 00 00 00 00 00 00 CE ]..\r\nSystem.TimeoutException: The write timed out.\r\n   at System.IO.Ports.SerialStream.Write(Byte[] array, Int32 offset, Int32 count, Int32 timeout)\r\n   at System.IO.Ports.SerialPort.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.WriteAndReadCStarCmd(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.Execute(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Processers.PortProcesser.ProcessRequestInQueue(CancellationToken stoppingToken)\r\n2022-06-02 09:03:28.070 +08:00 [WRN] cmd execute error at COM19, request: Channel: COM19-1-1, Request time:  06-02 09:03:26:998, Cmd: [ 81 01 16 1E 46 19 11 4A 49 38 F6 E0 01 00 00 00 00 00 00 00 00 00 00 00 00 00 05 01 00 00 00 00 00 00 CE ]..\r\nSystem.TimeoutException: The write timed out.\r\n   at System.IO.Ports.SerialStream.Write(Byte[] array, Int32 offset, Int32 count, Int32 timeout)\r\n   at System.IO.Ports.SerialPort.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.WriteAndReadCStarCmd(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.Execute(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Processers.PortProcesser.ProcessRequestInQueue(CancellationToken stoppingToken)\r\n2022-06-02 09:03:28.081 +08:00 [WRN] runner has been stopped, connect point: A-1-1, response: Request time:  06-02 09:03:26:998, Cmd: [ 81 01 16 1E 46 19 11 4A 49 38 F6 E0 01 00 00 00 00 00 00 00 00 00 00 00 00 00 05 01 00 00 00 00 00 00 CE ], Reply: [ ], druation: 0.\r\n2022-06-02 09:03:28.319 +08:00 [WRN] cmd execute error at COM19, request: Channel: COM19-1-1, Request time:  06-02 09:03:28:081, Cmd: [ 81 01 07 01 04 8E ]..\r\nSystem.TimeoutException: The write timed out.\r\n   at System.IO.Ports.SerialStream.Write(Byte[] array, Int32 offset, Int32 count, Int32 timeout)\r\n   at System.IO.Ports.SerialPort.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.WriteAndReadCStarCmd(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Executors.BothExecutor.Execute(Cmd cmd)\r\n   at Learning.Devices.Infrastructure.Processers.PortProcesser.ProcessRequestInQueue(CancellationToken stoppingToken)\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eKalibGao\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-02T06:34:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fUE1z",
                                           "createdAt":  "2023-06-20T16:10:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "valeriob",
                                           "body":  "I\u0027m having the same problem, thanks for reporting this.",
                                           "updatedAt":  "2023-06-20T16:10:19Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "SerialPort: continuously `TimeoutException` when write bytes first time failed.",
        "labels":  [
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70477",
        "createdAt":  "2022-06-09T12:32:57Z",
        "number":  70477,
        "author":  "olavt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-23T02:21:16Z",
        "body":  "### Description\r\n\r\nCalling SerialPort.BytesToRead on a disconnected serial port will succeed. That doesn\u0027t feel right.\r\n\r\nI typically use this to call from async code (to avoid blocking on Read):\r\n\r\n        private int ReadBytes(byte[] buffer)\r\n        {\r\n            int bytesToRead = _serialPort.BytesToRead;\r\n            if (bytesToRead \u003c= 0)\r\n                return 0;\r\n\r\n            // Make sure to not read more than the buffer length\r\n            bytesToRead = buffer.Length;\r\n\r\n            int bytesRead = _serialPort.Read(buffer, 0, bytesToRead);\r\n\r\n            return bytesRead;\r\n        }\r\n\r\nThe problem is that the code will never cause any errors or exceptions when the serial port is disconnected, since BytesToRead always will suceeed (and 0 will be returned).\r\n\r\nAs a workaround I found that calling SerialPort.CDHolding will fail and the code can be written as:\r\n\r\n        private int ReadBytes(byte[] buffer)\r\n        {\r\n            int bytesToRead = _serialPort.BytesToRead;\r\n            if (bytesToRead \u003c= 0)\r\n            {\r\n                // This will trigger an exception if serial port has been disconnected (SerialPort.BytesToRead will not)\r\n                _ = _serialPort.CDHolding;\r\n\r\n                return 0;\r\n            }\r\n\r\n            // Make sure to not read more than the buffer length\r\n            bytesToRead = buffer.Length;\r\n\r\n            int bytesRead = _serialPort.Read(buffer, 0, bytesToRead);\r\n\r\n            return bytesRead;\r\n        }\r\n\r\nIf the serial port is diconnected it will signal an exception like this:\r\n\r\nSystem.IO.IOException: Input/output error\r\n   at System.IO.Ports.SerialStream.get_CDHolding()\r\n   at System.IO.Ports.SerialPort.get_CDHolding()\r\n\r\nI think that BytesToRead ideally should also fail on a disconnected serial port.\r\n\r\n\r\n### Reproduction Steps\r\n\r\nCall SerialPort.BytesToRead after disconnecting an USB serial port.\r\n\r\n### Expected behavior\r\n\r\nSerialPort.BytesToRead should raise an exception when called on a disconnected serial port.\r\n\r\n### Actual behavior\r\n\r\nSerialPort.BytesToRead succeeds when called on a disconnected serial port.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\nCall SerialPort.CDHolding to get exception if serial port is disconnected.\r\n\r\n### Configuration\r\n\r\n.net 6 running in Docker on Raspberry Pi Arm32 (latest versions).\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORJvUFA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Em9QU",
                                           "createdAt":  "2022-06-09T12:33:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nCalling SerialPort.BytesToRead on a disconnected serial port will succeed. That doesn\u0027t feel right.\r\n\r\nI typically use this to call from async code (to avoid blocking on Read):\r\n\r\n        private int ReadBytes(byte[] buffer)\r\n        {\r\n            int bytesToRead = _serialPort.BytesToRead;\r\n            if (bytesToRead \u003c= 0)\r\n                return 0;\r\n\r\n            // Make sure to not read more than the buffer length\r\n            bytesToRead = buffer.Length;\r\n\r\n            int bytesRead = _serialPort.Read(buffer, 0, bytesToRead);\r\n\r\n            return bytesRead;\r\n        }\r\n\r\nThe problem is that the code will never cause any errors or exceptions when the serial port is disconnected, since BytesToRead always will suceeed (and 0 will be returned).\r\n\r\nAs a workaround I found that calling SerialPort.CDHolding will fail and the code can be written as:\r\n\r\n        private int ReadBytes(byte[] buffer)\r\n        {\r\n            // This will trigger an exception if serial port has been disconnected (SerialPort.BytesToRead will not)\r\n            _ = _serialPort.CDHolding;\r\n\r\n            int bytesToRead = _serialPort.BytesToRead;\r\n            if (bytesToRead \u003c= 0)\r\n                return 0;\r\n\r\n            // Make sure to not read more than the buffer length\r\n            bytesToRead = buffer.Length;\r\n\r\n            int bytesRead = _serialPort.Read(buffer, 0, bytesToRead);\r\n\r\n            return bytesRead;\r\n        }\r\n\r\nIf the serial port is diconnected it will signal an exception like this:\r\n\r\nSystem.IO.IOException: Input/output error\r\n   at System.IO.Ports.SerialStream.get_CDHolding()\r\n   at System.IO.Ports.SerialPort.get_CDHolding()\r\n\r\nI think that BytesToRead ideally should also fail on a disconnected serial port.\r\n\n\n### Reproduction Steps\n\nCall SerialPort.BytesToRead after disconnecting an USB serial port.\n\n### Expected behavior\n\nSerialPort.BytesToRead should raise an exception when called on a disconnected serial port.\n\n### Actual behavior\n\nSerialPort.BytesToRead succeeds when called on a disconnected serial port.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nCall SerialPort.CDHolding to get exception is serial port is disconnected.\n\n### Configuration\n\n.net 6 running in Docker on Raspberry Pi Arm32 (latest versions).\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eolavt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-09T12:33:05Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "SerialPort.BytesToRead succeeds on disconnected serial port",
        "labels":  [
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72987",
        "createdAt":  "2022-07-28T06:14:19Z",
        "number":  72987,
        "author":  "MichalStrehovsky",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCppTeg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ViktorHofer",
                                            "createdAt":  "2022-08-02T07:46:53Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-11-23T02:21:17Z",
        "body":  "When compiling System.IO.Ports tests on NativeAOT+Linux (`build.sh clr.aot+libs -rc Release -lc Release` followed by `dotnet build System.IO.Ports.Tests.csproj -p:TestNativeAot=true -p:RuntimeConfiguration=Release -p:LibrariesConfiguration=Release`), the test doesn\u0027t copy libSystem.IO.Ports.Native.so to the output directory and we get:\r\n\r\n```\r\nRunning assembly:System.IO.Ports.Tests, Version=7.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\nInstalled ports : /dev/ttyS0,/dev/ttyS1\r\nException opening port /dev/ttyS0: System.DllNotFoundException: Unable to load shared library \u0027libSystem.IO.Ports.Native\u0027 or one of its dependencies. In order to help diagnose loading problems, consider using a tool like strace. If you\u0027re using glibc, consider setting the LD_DEBUG environment variable: \r\nlibSystem.IO.Ports.Native.so: cannot open shared object file: No such file or directory\r\nliblibSystem.IO.Ports.Native.so: cannot open shared object file: No such file or directory\r\nlibSystem.IO.Ports.Native: cannot open shared object file: No such file or directory\r\nliblibSystem.IO.Ports.Native: cannot open shared object file: No such file or directory\r\n\r\n   at System.Runtime.InteropServices.NativeLibrary.LoadLibErrorTracker.Throw(String) + 0x4e\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.FixupModuleCell(InteropHelpers.ModuleFixupCell*) + 0x103\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.ResolvePInvokeSlow(InteropHelpers.MethodFixupCell*) + 0x35\r\n   at Interop.Serial.\u003cSerialPortOpen\u003eg____PInvoke|0_0(Byte*) + 0x22\r\n   at Interop.Serial.SerialPortOpen(String) + 0x82\r\n   at System.IO.Ports.SafeSerialDeviceHandle.Open(String) + 0x1c\r\n   at System.IO.Ports.SerialStream..ctor(String, Int32, Parity, Int32, StopBits, Int32, Int32, Handshake, Boolean, Boolean, Boolean, Byte) + 0xcb\r\n   at System.IO.Ports.SerialPort.Open() + 0xee\r\n   at Legacy.Support.TCSupport.CheckPortsCanBeOpened(IEnumerable`1) + 0xdd\r\n```\r\n\r\nThis works for customer scenarios since the library is a native asset in the NuGet package. It just blocks running the tests in this repo.\r\n\r\nRunning System.IO.Ports tests will be blocked on this issue for non-Windows platforms.\r\n\r\nNot sure why this works with JITted runtimes. Do we just dump the .so into the runtimepack even though it\u0027s not an inbox assembly? If we fix this the \"right way\" for JITted runtime (make sure the .so is next to the executable, the same way it will be there for customers), NativeAOT fix will just fall out.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR6ckNQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HY5mF",
                                           "createdAt":  "2022-07-28T06:14:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhen compiling System.IO.Ports tests on NativeAOT+Linux (`build.sh clr.aot+libs -rc Release -lc Release` followed by `dotnet build System.IO.Ports.Tests.csproj -p:TestNativeAot=true -p:RuntimeConfiguration=Release -p:LibrariesConfiguration=Release`), the test doesn\u0027t copy libSystem.IO.Ports.Native.so to the output directory and we get:\r\n\r\n```\r\nRunning assembly:System.IO.Ports.Tests, Version=7.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\r\nInstalled ports : /dev/ttyS0,/dev/ttyS1\r\nException opening port /dev/ttyS0: System.DllNotFoundException: Unable to load shared library \u0027libSystem.IO.Ports.Native\u0027 or one of its dependencies. In order to help diagnose loading problems, consider using a tool like strace. If you\u0027re using glibc, consider setting the LD_DEBUG environment variable: \r\nlibSystem.IO.Ports.Native.so: cannot open shared object file: No such file or directory\r\nliblibSystem.IO.Ports.Native.so: cannot open shared object file: No such file or directory\r\nlibSystem.IO.Ports.Native: cannot open shared object file: No such file or directory\r\nliblibSystem.IO.Ports.Native: cannot open shared object file: No such file or directory\r\n\r\n   at System.Runtime.InteropServices.NativeLibrary.LoadLibErrorTracker.Throw(String) + 0x4e\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.FixupModuleCell(InteropHelpers.ModuleFixupCell*) + 0x103\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.ResolvePInvokeSlow(InteropHelpers.MethodFixupCell*) + 0x35\r\n   at Interop.Serial.\u003cSerialPortOpen\u003eg____PInvoke|0_0(Byte*) + 0x22\r\n   at Interop.Serial.SerialPortOpen(String) + 0x82\r\n   at System.IO.Ports.SafeSerialDeviceHandle.Open(String) + 0x1c\r\n   at System.IO.Ports.SerialStream..ctor(String, Int32, Parity, Int32, StopBits, Int32, Int32, Handshake, Boolean, Boolean, Boolean, Byte) + 0xcb\r\n   at System.IO.Ports.SerialPort.Open() + 0xee\r\n   at Legacy.Support.TCSupport.CheckPortsCanBeOpened(IEnumerable`1) + 0xdd\r\n```\r\n\r\nThis works for customer scenarios since the library is a native asset in the NuGet package. It just blocks running the tests in this repo.\r\n\r\nRunning System.IO.Ports tests will be blocked on this issue for non-Windows platforms.\r\n\r\nNot sure why this works with JITted runtimes. Do we just dump the .so into the runtimepack even though it\u0027s not an inbox assembly? If we fix this the \"right way\" for JITted runtime (make sure the .so is next to the executable, the same way it will be there for customers), NativeAOT fix will just fall out.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalStrehovsky\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-28T06:14:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HiCkn",
                                           "createdAt":  "2022-07-30T07:04:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCpbkZw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adamsitnik",
                                                                               "createdAt":  "2022-08-01T07:23:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "am11",
                                           "body":  "@ViktorHofer, do we still need this workaround for System.IO.Ports tests: https://github.com/dotnet/runtime/blob/b12fa3b5728c0a6edc81cbcb2997317a4e88b278/src/libraries/testPackages/packageSettings/System.IO.Ports/workaroundDowngrade.targets#L3-L4 or can we now switch to live build of native assets (and delete `runtimenativeSystemIOPortsVersion` from `eng/Versions.props`)?",
                                           "updatedAt":  "2022-07-30T07:04:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HpyQ1",
                                           "createdAt":  "2022-08-02T07:45:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "\u003e @ViktorHofer, do we still need this workaround for System.IO.Ports tests:\r\n\r\nAFAIK we still depend on this hack as we can\u0027t build all native runtime packages for System.IO.Ports on a single machine. Today, the `testPackages` validation runs as part of the windows allconfigurations legs.",
                                           "updatedAt":  "2022-08-02T07:45:23Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "System.IO.Ports tests don\u0027t copy their native dependency",
        "labels":  [
                       "test-bug",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73576",
        "createdAt":  "2022-08-08T17:21:31Z",
        "number":  73576,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-23T02:21:17Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/VB-2019-SerialPortNames-duplicate-port-n/1543908)._\n\n---\n[severity:It bothers me. A fix would be nice]\r\nMicrosoft Visual Studio Community 2019\nVersion 16.11.2\n.NET version 4.8.04084\nVisual Basic\n\nCode snippet:\n\ncboCOMPort.Items.Clear()\n        For Each COMString As String In My.Computer.Ports.SerialPortNames\n\ncboCOMPort.Items.Add(COMString)\n\nNext\n\nISSUE #1 \n\nSerialPort1.PortNames shows incorrect number of ports\n\nExample:\n\nRun VB app, shows COM3, COM4 and COM5\n\nDisconnect COM4, still shows COM3, COM4 and COM5\n\nISSUE #2\n\nSerialPort1.PortNames shows duplicate port names\n\nExample:\n\nRun VB app, shows COM3, COM4 and COM5\n\nDisconnect COM4 , still shows COM3, COM4 and COM5\nAdd COM4 , now shows COM3, COM4, COM4 and COM5\n\nWhen I compile for NET 3.5, I don\u0027t have these issues.\n\nPlease review and advise.\n\nThanks\n\nKen\n\n---\n### Original Comments\n\n#### Feedback Bot on 10/4/2021, 06:01 PM: \n\n(private comment, text removed)\n#### Feedback Bot on 12/1/2021, 08:20 AM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSAauiw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5IBq6L",
                                           "createdAt":  "2022-08-08T17:21:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/VB-2019-SerialPortNames-duplicate-port-n/1543908)._\n\n---\n[severity:It bothers me. A fix would be nice]\r\nMicrosoft Visual Studio Community 2019\nVersion 16.11.2\n.NET version 4.8.04084\nVisual Basic\n\nCode snippet:\n\ncboCOMPort.Items.Clear()\n        For Each COMString As String In My.Computer.Ports.SerialPortNames\n\ncboCOMPort.Items.Add(COMString)\n\nNext\n\nISSUE #1 \n\nSerialPort1.PortNames shows incorrect number of ports\n\nExample:\n\nRun VB app, shows COM3, COM4 and COM5\n\nDisconnect COM4, still shows COM3, COM4 and COM5\n\nISSUE #2\n\nSerialPort1.PortNames shows duplicate port names\n\nExample:\n\nRun VB app, shows COM3, COM4 and COM5\n\nDisconnect COM4 , still shows COM3, COM4 and COM5\nAdd COM4 , now shows COM3, COM4, COM4 and COM5\n\nWhen I compile for NET 3.5, I don\u0027t have these issues.\n\nPlease review and advise.\n\nThanks\n\nKen\n\n---\n### Original Comments\n\n#### Feedback Bot on 10/4/2021, 06:01 PM: \n\n(private comment, text removed)\n#### Feedback Bot on 12/1/2021, 08:20 AM: \n\n(private comment, text removed)\n\n---\n### Original Solutions\n(no solutions)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-08T17:21:41Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "VB 2019 SerialPortNames duplicate port names",
        "labels":  [
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93240",
        "createdAt":  "2023-10-09T16:47:24Z",
        "number":  93240,
        "author":  "ctacke",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-19T03:29:29Z",
        "body":  "### Description\n\nWorking with a device using a SiliconLabs CP210x USB To UART bridge (device is a M-Bus Mikro-Master) on Windows 11.\r\n\r\nWhen I use `SerialPort.GetPortNames` the name is reported as:\r\n\r\n\"COM9\\0\\0\\0\\0\\0\\0\\0\\0춖쪆\\uffffɆ\\u0004\\0\\0懛睄\\uffff초ㄐ龜\\uffff춖쪆\\uffff\\0\\0\\0\\0颰뻺鴇\\uffff\\0\\0\\0\\0춖쪆\\uffff\\u0004\\0\\0\\0\\u0002\\0\\0\\0䚠뻯鴇\\uffff\\0\\0\\0\\0\\u0001\\0\\0\\0춖쪆\\uffff\\u0002\\0\\0\\0\\u0004\\0\\0\\0䚠뻯鴇\\uffff\\0\\0\\0\\0䚠뻯鴇\\uffff麌籀\\uffff\\0\\0쪆\\uffff춖쪆\\uffff\\0\\0\\0\\0ᾷ沰誗\\uffff䱓䉁\\uffff\\0\\0\\0\\0컰ㄐ龜\\uffff䬖闎\\uffffỷ\"\r\n\r\nDevice manager lists it plainly as \"`\"COM9\"\r\n\r\nLooking at the source, the code reads the value from the registry.\r\n\r\nRegEdit displays the value clearly as just COM9.\r\n\r\nHowever, when I duplicate the code to read the registry entry with a `GetValue` call, I see the same problematic value returned.\n\n### Reproduction Steps\n\nInstall the SiLabs driver.\r\nPlug in the device\r\nQuery port names via `SerialPort.GetPortNames()\n\n### Expected behavior\n\nReturn \"COM9\"\n\n### Actual behavior\n\nReturns \"COM9\\0\\0\\0\\0\\0\\0\\0\\0춖쪆\\uffffɆ\\u0004\\0\\0懛睄\\uffff초ㄐ龜\\uffff춖쪆\\uffff\\0\\0\\0\\0颰뻺鴇\\uffff\\0\\0\\0\\0춖쪆\\uffff\\u0004\\0\\0\\0\\u0002\\0\\0\\0䚠뻯鴇\\uffff\\0\\0\\0\\0\\u0001\\0\\0\\0춖쪆\\uffff\\u0002\\0\\0\\0\\u0004\\0\\0\\0䚠뻯鴇\\uffff\\0\\0\\0\\0䚠뻯鴇\\uffff麌籀\\uffff\\0\\0쪆\\uffff춖쪆\\uffff\\0\\0\\0\\0ᾷ沰誗\\uffff䱓䉁\\uffff\\0\\0\\0\\0컰ㄐ龜\\uffff䬖闎\\uffffỷ\"\n\n### Regression?\n\nUnknown\n\n### Known Workarounds\n\nDon\u0027t use SerialPort.GetPortNames, but instead read the registry manually and sanitize the values yourself\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaITTdQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5ogipm",
                                           "createdAt":  "2023-10-09T17:00:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ctacke",
                                           "body":  "Not sure how to link the issue to the PR, but the PR is here:\r\nhttps://github.com/dotnet/runtime/pull/93242",
                                           "updatedAt":  "2023-10-09T17:00:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ohNN1",
                                           "createdAt":  "2023-10-09T19:11:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-ports\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWorking with a device using a SiliconLabs CP210x USB To UART bridge (device is a M-Bus Mikro-Master) on Windows 11.\r\n\r\nWhen I use `SerialPort.GetPortNames` the name is reported as:\r\n\r\n\"COM9\\0\\0\\0\\0\\0\\0\\0\\0춖쪆\\uffffɆ\\u0004\\0\\0懛睄\\uffff초ㄐ龜\\uffff춖쪆\\uffff\\0\\0\\0\\0颰뻺鴇\\uffff\\0\\0\\0\\0춖쪆\\uffff\\u0004\\0\\0\\0\\u0002\\0\\0\\0䚠뻯鴇\\uffff\\0\\0\\0\\0\\u0001\\0\\0\\0춖쪆\\uffff\\u0002\\0\\0\\0\\u0004\\0\\0\\0䚠뻯鴇\\uffff\\0\\0\\0\\0䚠뻯鴇\\uffff麌籀\\uffff\\0\\0쪆\\uffff춖쪆\\uffff\\0\\0\\0\\0ᾷ沰誗\\uffff䱓䉁\\uffff\\0\\0\\0\\0컰ㄐ龜\\uffff䬖闎\\uffffỷ\"\r\n\r\nDevice manager lists it plainly as \"`\"COM9\"\r\n\r\nLooking at the source, the code reads the value from the registry.\r\n\r\nRegEdit displays the value clearly as just COM9.\r\n\r\nHowever, when I duplicate the code to read the registry entry with a `GetValue` call, I see the same problematic value returned.\n\n### Reproduction Steps\n\nInstall the SiLabs driver.\r\nPlug in the device\r\nQuery port names via `SerialPort.GetPortNames()\n\n### Expected behavior\n\nReturn \"COM9\"\n\n### Actual behavior\n\nReturns \"COM9\\0\\0\\0\\0\\0\\0\\0\\0춖쪆\\uffffɆ\\u0004\\0\\0懛睄\\uffff초ㄐ龜\\uffff춖쪆\\uffff\\0\\0\\0\\0颰뻺鴇\\uffff\\0\\0\\0\\0춖쪆\\uffff\\u0004\\0\\0\\0\\u0002\\0\\0\\0䚠뻯鴇\\uffff\\0\\0\\0\\0\\u0001\\0\\0\\0춖쪆\\uffff\\u0002\\0\\0\\0\\u0004\\0\\0\\0䚠뻯鴇\\uffff\\0\\0\\0\\0䚠뻯鴇\\uffff麌籀\\uffff\\0\\0쪆\\uffff춖쪆\\uffff\\0\\0\\0\\0ᾷ沰誗\\uffff䱓䉁\\uffff\\0\\0\\0\\0컰ㄐ龜\\uffff䬖闎\\uffffỷ\"\n\n### Regression?\n\nUnknown\n\n### Known Workarounds\n\nDon\u0027t use SerialPort.GetPortNames, but instead read the registry manually and sanitize the values yourself\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ectacke\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-System.IO.Ports`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-09T19:11:45Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "SerialPort.GetPortNames not handling poor registry data",
        "labels":  [
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96267",
        "createdAt":  "2023-12-22T06:48:41Z",
        "number":  96267,
        "author":  "comfile-mike",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-05T15:51:22Z",
        "body":  "### Description\r\n\r\n`SerialPort.Write()` does not block until all data is written.  Also, no `TimeoutException` is thrown if it fails to write all data by the time the `WriteTimeout` expires.\r\n\r\nOne can see at https://github.com/dotnet/runtime/blob/0cf461b302f58c7add3f6dc405873fb2212b513f/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialStream.Windows.cs#L1446-L1492 and https://github.com/dotnet/runtime/blob/0cf461b302f58c7add3f6dc405873fb2212b513f/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialStream.Windows.cs#L1352-L1395 that the number of bytes written is ignored.  \r\n\r\nPerhaps it should be checked and an error thrown if it is not correct.  \r\n\r\nOr, perhaps, the `Write...` functions should be called repeatedly until all data is written.\r\n\r\nOr, perhaps, the `Write...` functions should return the number of bytes actually written, so the user can do something about it.\r\n\r\n### Reproduction Steps\r\n\r\nThe following code will reproduce the issue.  This is a loopback test, so the port\u0027s TX and RX pins must be shorted.\r\n\r\n```C#\r\n\r\nusing System.IO.Ports;\r\n\r\nint[] BaudRates =\r\n{\r\n    9600,\r\n    19200,\r\n    38400,\r\n    57600,\r\n    115200,\r\n    230400,\r\n    460800\r\n};\r\n\r\nParity[] Parities =\r\n{\r\n    Parity.None,\r\n    Parity.Odd,\r\n    Parity.Even\r\n};\r\n\r\nstring Device = args.Length \u003c 1 ? \"COM1\" : args[0];\r\n\r\nusing (var port = new SerialPort(Device))\r\n{\r\n    const int timeout = 100;\r\n    port.ReadTimeout = timeout;\r\n\r\n    // 100ms is too short of a time to send 256 bytes to the tx buffer\r\n    // on some devices.\r\n    port.WriteTimeout = timeout;\r\n\r\n    const int portBufferSize = 4096;\r\n    port.ReadBufferSize = portBufferSize;\r\n    port.WriteBufferSize = portBufferSize;\r\n\r\n    foreach (var baud in BaudRates)\r\n    {\r\n        foreach (var parity in Parities)\r\n        {\r\n            Console.WriteLine($\"Starting loopback test for {Device} - {baud}, {parity}\");\r\n\r\n            try\r\n            {\r\n                port.Open();\r\n                port.DiscardInBuffer();\r\n                port.DiscardOutBuffer();\r\n\r\n                const int numOfBytes = 2048;\r\n\r\n                // Fill the txBytes\r\n                byte[] txBytes = new byte[numOfBytes];\r\n                for (int i = 0; i \u003c numOfBytes; i++)\r\n                {\r\n                    txBytes[i] = (byte)(i \u0026 0xFF);\r\n                }\r\n\r\n                // This succeeds, but it shouldn\u0027t.  Because the `WriteTimeout` was too short\r\n                // only a fraction of the bytes have been written.  You won\u0027t be able to observe\r\n                // this until `port.Read()` is called and the data returned is only a fraction\r\n                // of what it should be.\r\n                port.Write(txBytes, 0, txBytes.Length);\r\n\r\n                // This will report 0, but it\u0027s a lie.  `port.Write()` failed to write all bytes\r\n                Console.WriteLine($\"{port.BytesToWrite} bytes to write.\");\r\n\r\n                // Give time for data to traverse and fill the rx buffer.  This is more than\r\n                // enough time for the data to traverse to the rx buffer.\r\n                Thread.Sleep(1000);\r\n\r\n                // Read the data from the port\u0027s rx buffer.  \r\n                byte[] rxBytes = new byte[numOfBytes];\r\n                var numBytesRead = port.Read(rxBytes, 0, rxBytes.Length);\r\n                if (numBytesRead \u003c numOfBytes)\r\n                {\r\n                    Console.Error.WriteLine($\"`port.Read()` was only able to read {numBytesRead} bytes\");\r\n                }\r\n\r\n                // Verify all bytes received are correct.\r\n                for (int i = 0; i \u003c numOfBytes; i++)\r\n                {\r\n                    if (rxBytes[i] != txBytes[i])\r\n                    {\r\n                        Console.Error.WriteLine(string.Format(\"{0} - {1}, {2}: Expected {3}, received {4}.\", Device, baud.ToString(), parity.ToString(), i.ToString(), rxBytes[i].ToString()));\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine($\"{Device} - {baud}, {parity}:  {ex.Message}\");\r\n                return;\r\n            }\r\n            finally\r\n            {\r\n                port.Close();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n### Expected behavior\r\n\r\n`SerialPort.Write()` should block until all data has been written, or should throw a `TimeoutException` if all data cannot be written by the time `WriteTimeout` expires.\r\n\r\n### Actual behavior\r\n\r\nThe program fails after the call to `port.Read()` when it starts verifying that each byte received matches each byte sent.  Since the `WriteTimeout` expired, only some of the data was sent, yet no `TimeoutException` was thrown.  So, when verifying the data, it will only succeed with the few bytes that it received.  After which it will fail.\r\n\r\n### Regression?\r\n\r\nNot sure.\r\n\r\n### Known Workarounds\r\n\r\nAs long as `WriteTimeout` in increased to a high enough value to allow enough time for the data to be written to the serial port\u0027s TX buffer, everything will work fine.  The problem, though, is when it fails, it does so silently, and you\u0027ll only know it failed by verifying the data on the receiving end of the serial transmission.\r\n\r\nAlso, if data is transmitted in small chucks (e.g. 64 bytes at a time) then one can avoid the symptom.\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvBiKvw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5vTS3K",
                                           "createdAt":  "2023-12-22T07:19:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "comfile-mike",
                                           "body":  "This might be a duplicate of https://github.com/dotnet/runtime/issues/20370, but please don\u0027t close this without careful review.",
                                           "updatedAt":  "2023-12-22T07:27:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vTS8k",
                                           "createdAt":  "2023-12-22T07:19:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-ports\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\n`SerialPort.Write()` does not block until all data is written.  Also, no `TimeoutException` is thrown if it fails to write all data by the time the `WriteTimeout` expires.\r\n\r\nOne can see at https://github.com/dotnet/runtime/blob/0cf461b302f58c7add3f6dc405873fb2212b513f/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialStream.Windows.cs#L1446-L1492 and https://github.com/dotnet/runtime/blob/0cf461b302f58c7add3f6dc405873fb2212b513f/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialStream.Windows.cs#L1352-L1395 that the number of bytes written is ignored.  \r\n\r\nPerhaps it should be checked and an error thrown if it is not correct.  \r\n\r\nOr, perhaps, the `Write...` functions should be called repeatedly until all data is written.\r\n\r\nOr, perhaps, the `Write...` functions should return the number of bytes actually written, so the user can do something about it.\r\n\r\n### Reproduction Steps\r\n\r\nThe following code will reproduce the issue.  This is a loopback test, so the port\u0027s TX and RX pins must be shorted.\r\n\r\n```C#\r\n\r\nusing System.IO.Ports;\r\n\r\nint[] BaudRates =\r\n{\r\n    9600,\r\n    19200,\r\n    38400,\r\n    57600,\r\n    115200,\r\n    230400,\r\n    460800\r\n};\r\n\r\nParity[] Parities =\r\n{\r\n    Parity.None,\r\n    Parity.Odd,\r\n    Parity.Even\r\n};\r\n\r\nstring Device = args.Length \u003c 1 ? \"COM1\" : args[0];\r\n\r\nusing (var port = new SerialPort(Device))\r\n{\r\n    const int timeout = 100;\r\n    port.ReadTimeout = timeout;\r\n\r\n    // 100ms is too short of a time to send 256 bytes to the tx buffer\r\n    // on some devices.\r\n    port.WriteTimeout = timeout;\r\n\r\n    const int portBufferSize = 4096;\r\n    port.ReadBufferSize = portBufferSize;\r\n    port.WriteBufferSize = portBufferSize;\r\n\r\n    foreach (var baud in BaudRates)\r\n    {\r\n        foreach (var parity in Parities)\r\n        {\r\n            Console.WriteLine($\"Starting loopback test for {Device} - {baud}, {parity}\");\r\n\r\n            try\r\n            {\r\n                port.Open();\r\n                port.DiscardInBuffer();\r\n                port.DiscardOutBuffer();\r\n\r\n                const int numOfBytes = 2048;\r\n\r\n                // Fill the txBytes\r\n                byte[] txBytes = new byte[numOfBytes];\r\n                for (int i = 0; i \u003c numOfBytes; i++)\r\n                {\r\n                    txBytes[i] = (byte)(i \u0026 0xFF);\r\n                }\r\n\r\n                // This succeeds, but it shouldn\u0027t.  Because the `WriteTimeout` was too short\r\n                // only a fraction of the bytes have been written.  You won\u0027t be able to observe\r\n                // this until `port.Read()` is called and the data returned is only a fraction\r\n                // of what it should be.\r\n                port.Write(txBytes, 0, txBytes.Length);\r\n\r\n                // This will report 0, but it\u0027s a lie.  `port.Write()` failed to write all bytes\r\n                Console.WriteLine($\"{port.BytesToWrite} bytes to write.\");\r\n\r\n                // Give time for data to traverse and fill the rx buffer.  This is more than\r\n                // enough time for the data to traverse to the rx buffer.\r\n                Thread.Sleep(1000);\r\n\r\n                // Read the data from the port\u0027s rx buffer.  \r\n                byte[] rxBytes = new byte[numOfBytes];\r\n                var numBytesRead = port.Read(rxBytes, 0, rxBytes.Length);\r\n                if (numBytesRead \u003c numOfBytes)\r\n                {\r\n                    Console.Error.WriteLine($\"`port.Read()` was only able to read {numBytesRead} bytes\");\r\n                }\r\n\r\n                // Verify all bytes received are correct.\r\n                for (int i = 0; i \u003c numOfBytes; i++)\r\n                {\r\n                    if (rxBytes[i] != txBytes[i])\r\n                    {\r\n                        Console.Error.WriteLine(string.Format(\"{0} - {1}, {2}: Expected {3}, received {4}.\", Device, baud.ToString(), parity.ToString(), i.ToString(), rxBytes[i].ToString()));\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            catch (Exception ex)\r\n            {\r\n                Console.WriteLine($\"{Device} - {baud}, {parity}:  {ex.Message}\");\r\n                return;\r\n            }\r\n            finally\r\n            {\r\n                port.Close();\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n### Expected behavior\r\n\r\n`SerialPort.Write()` should block until all data has been written, or should throw a `TimeoutException` if all data cannot be written by the time `WriteTimeout` expires.\r\n\r\n### Actual behavior\r\n\r\nThe program fails after the call to `port.Read()` when it starts verifying that each byte received matches each byte sent.  Since the `WriteTimeout` expired, only some of the data was sent, yet no `TimeoutException` was thrown.  So, when verifying the data, it will only succeed with the few bytes that it received.  After which it will fail.\r\n\r\n### Regression?\r\n\r\nNot sure.\r\n\r\n### Known Workarounds\r\n\r\nAs long as `WriteTimeout` in increased to a high enough value to allow enough time for the data to be written to the serial port\u0027s TX buffer, everything will work fine.  The problem, though, is when it fails, it does so silently, and you\u0027ll only know it failed by verifying the data on the receiving end of the serial transmission.\r\n\r\nAlso, if data is transmitted in small chucks (e.g. 64 bytes at a time) then one can avoid the symptom.\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ecomfile-mike\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-System.IO.Ports`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-22T07:19:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dufC4",
                                           "createdAt":  "2025-02-09T12:29:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "I don\u0027t expect our team will be able to investigate this soon. I\u0027m marking it as https://github.com/dotnet/runtime/labels/help%20wanted in case a community member is interested in debugging this further to try to find a root cause and possible fix.",
                                           "updatedAt":  "2025-02-09T12:29:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6dwN5u",
                                           "createdAt":  "2025-02-09T23:55:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JinShil",
                                           "body":  "I think the root cause was described in the first post of this issue, specifically that the number of bytes written is ignored.  A few suggestions were offered.  Help was provided, but the \"owner\" of that code needs to make a decision how they want it to work, and/or what API they want exposed.",
                                           "updatedAt":  "2025-02-09T23:55:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68GIq_",
                                           "createdAt":  "2025-08-05T15:51:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThaDaVos",
                                           "body":  "Just ran into this when reading a file and sending it through serial - because `SerialPort.Write` does not block, it overloaded the buffer (kept writing new data, even though not everything was processed), resulting in garbled data on the receiving end - fixed it by using `SerialPort.BaseStream.WriteAsync` and `SerialPort.BaseStream.FlushAsync`",
                                           "updatedAt":  "2025-08-05T15:51:22Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "`SerialPort.Write()` does not block until all data is written.",
        "labels":  [
                       "help wanted",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97549",
        "createdAt":  "2024-01-26T13:00:29Z",
        "number":  97549,
        "author":  "vsfeedback",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC8_SZQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "lizalc",
                                            "createdAt":  "2024-11-26T23:52:18Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-02-09T12:28:21Z",
        "body":  "_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/SerialStream-discards-numBytes-result/10533699)._\n\n---\n[severity:It\u0027s more difficult to complete my work]\nThe `SerialStream` implementation discards `numBytes` returned by the async write:\nhttps://github.com/microsoft/referencesource/blob/master/System/sys/system/IO/ports/SerialStream.cs#L1186-L1209\n\nConsequently, the caller of `Write()` has no clue on how much data got written during the operation, that would allow the caller to retransmit the yet missing data. The `SerialStream` implementation should return the number of bytes written as return value of `Write()`, allowing e.g. `SerialPort.Write()` returning the value as well.\n\nThe attached app demonstrates the issue. Requirements:\n- Visual Studio 2022 or above\n- Two interconnected serial COM ports (loopback)\n\n[DataLoss.zip](https://aka.ms/dc/file?name=B623cca0624df41fb822eaa11d20c4a27638373590443646695_DataLoss.zip\u0026tid=623cca0624df41fb822eaa11d20c4a27638373590443646695)\n\nThe app demonstrates how a write operation times out, i.e. only part of the data of 2048 is actually written to Tx, but there neither is a `TimeoutException` nor can the caller retrieve the number of effectively written bytes, as `numBytes` is discarded by the `SerialStream` implementation.\n\n![grafik.png](https://aka.ms/dc/image?name=Bd8c23eb36b594708a089ef18b099ea59638373589384195097_20231205-084218-grafik.png\u0026tid=d8c23eb36b594708a089ef18b099ea59638373589384195097)\n\nNote that increasing `WriteTimeout` would eventually fix the issue in this very app, it could even use the default of `InfiniteTimeout`. However, if hardware or software flow control is required, simply increasing `WriteTimeout` is no good idea, the port would hang in `Write()`. Worst case: The counterpart disables flow control and then crashes or breaks, resulting in the port hanging forever. Therefore, `WriteTimeout` must be set to a small enough value.\n\nReturning `numBytes` would be a pretty simple solution to this issue. And since no caller today excepts `Write()` to return a value, the change would only be breaking in terms of the function\u0027s signature, not its behavior.\n\n---\n### Original Comments\n\n#### Feedback Bot on 06/12/2023, 04:51 AM: \n\n(private comment, text removed)\n#### Eirik George Tsarpalis [MSFT] on 26/01/2024, 01:00 PM: \n\n(private comment, text removed)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbnugw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5x91qQ",
                                           "createdAt":  "2024-01-26T13:02:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "eiriktsarpalis",
                                           "body":  "Moved to github for triage since the impacted implementation appears to be unchanged in .NET Core (at least for Windows):\r\n\r\nhttps://github.com/dotnet/runtime/blob/328ef208049cb7ea515723e33467ffb5ecfde5dd/src/libraries/System.IO.Ports/src/System/IO/Ports/SerialStream.Windows.cs#L1075-L1097",
                                           "updatedAt":  "2024-01-26T13:03:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5x92BO",
                                           "createdAt":  "2024-01-26T13:03:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-ports\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/t/SerialStream-discards-numBytes-result/10533699)._\n\n---\n[severity:It\u0027s more difficult to complete my work]\nThe `SerialStream` implementation discards `numBytes` returned by the async write:\nhttps://github.com/microsoft/referencesource/blob/master/System/sys/system/IO/ports/SerialStream.cs#L1186-L1209\n\nConsequently, the caller of `Write()` has no clue on how much data got written during the operation, that would allow the caller to retransmit the yet missing data. The `SerialStream` implementation should return the number of bytes written as return value of `Write()`, allowing e.g. `SerialPort.Write()` returning the value as well.\n\nThe attached app demonstrates the issue. Requirements:\n- Visual Studio 2022 or above\n- Two interconnected serial COM ports (loopback)\n\n[DataLoss.zip](https://aka.ms/dc/file?name=B623cca0624df41fb822eaa11d20c4a27638373590443646695_DataLoss.zip\u0026tid=623cca0624df41fb822eaa11d20c4a27638373590443646695)\n\nThe app demonstrates how a write operation times out, i.e. only part of the data of 2048 is actually written to Tx, but there neither is a `TimeoutException` nor can the caller retrieve the number of effectively written bytes, as `numBytes` is discarded by the `SerialStream` implementation.\n\n![grafik.png](https://aka.ms/dc/image?name=Bd8c23eb36b594708a089ef18b099ea59638373589384195097_20231205-084218-grafik.png\u0026tid=d8c23eb36b594708a089ef18b099ea59638373589384195097)\n\nNote that increasing `WriteTimeout` would eventually fix the issue in this very app, it could even use the default of `InfiniteTimeout`. However, if hardware or software flow control is required, simply increasing `WriteTimeout` is no good idea, the port would hang in `Write()`. Worst case: The counterpart disables flow control and then crashes or breaks, resulting in the port hanging forever. Therefore, `WriteTimeout` must be set to a small enough value.\n\nReturning `numBytes` would be a pretty simple solution to this issue. And since no caller today excepts `Write()` to return a value, the change would only be breaking in terms of the function\u0027s signature, not its behavior.\n\n---\n### Original Comments\n\n#### Feedback Bot on 06/12/2023, 04:51 AM: \n\n(private comment, text removed)\n#### Eirik George Tsarpalis [MSFT] on 26/01/2024, 01:00 PM: \n\n(private comment, text removed)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003evsfeedback\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-System.IO.Ports`, `needs-area-label`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-26T13:03:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6due6D",
                                           "createdAt":  "2025-02-09T12:28:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "I don\u0027t expect our team will be able to investigate this soon. I\u0027m marking it as https://github.com/dotnet/runtime/labels/help%20wanted in case a community member is interested in debugging this further to try to find a root cause and possible fix.",
                                           "updatedAt":  "2025-02-09T12:28:15Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "SerialStream discards \u0027numBytes\u0027, resulting in data loss",
        "labels":  [
                       "help wanted",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97646",
        "createdAt":  "2024-01-29T14:18:55Z",
        "number":  97646,
        "author":  "MichalOplt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-09T12:27:23Z",
        "body":  "### Description\n\nI have purchased this device ([external link](https://www.ruggedi.com/latest-new-arrival-rugged-smartphone-with-lf-134-2khz-rfid-reader-built-in.html)) in order to read card number whenever a card is presented to the inbuilt 125 kHz card reader.\r\n\r\nPreinstalled, there is an java application (to which I was provided with source code) which can read the number and display it.\r\n\r\nBased on that, I have created a .NET MAUI application that can connect to the internal port /dev/ttyS1 and start to listen for received data. It uses the System.IO.Ports library.\r\n\r\nMy MAUI application works great and whenever I present a 125 kHz card, I can see its number. BUT when I restart the mobile device and launch my application, no data is received upon presenting the card. I have to start the preinstalled application, then I can quit it, launch my application and only then my MAUI application starts to listen for data.\r\n\r\nSince I am not a Java programmer, I do not know, what I am missing that the preinstalled application does have and mine does not.\r\n\r\nMoreover, in the project, I had to include \r\n`\u003cPackageReference Include=\"System.IO.Ports\" Version=\"9.0.0-alpha.1.24058.11\" /\u003e`\r\n\r\nbecause with the current latest stable versions I was getting an error when deploying the code to the device (to a simulator as well, only Windows machine was working).\r\n\r\n\n\n### Reproduction Steps\n\n```\r\nusing System.IO.Ports;\r\n\r\nprivate SerialPort port = new(\"/dev/ttyS1\")\r\n{\r\n    BaudRate = 9600,\r\n};\r\n\r\nport.Open();\r\nport.DataReceived += new SerialDataReceivedEventHandler(port_DataReceived);\r\n\r\nprivate async void port_DataReceived(object sender, SerialDataReceivedEventArgs e)\r\n{\r\n    port.ReadExisting();\r\n}\r\n\r\n```\n\n### Expected behavior\n\nWhen I present a 125 kHz card to the reader, the program should enter the `port_DataReceived` method.\n\n### Actual behavior\n\nI put breakpoint right at the beginning of the `port_DataReceived` method, but it did not enter it.\r\n\r\nThe debugger, though, says that the port is open.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nOnly way to get it working, after a device restart, is to launch the pre-installed Java application. Only after then the MAUI application is working flawlessly.\n\n### Configuration\n\n`\u003cTargetFrameworks\u003enet8.0-android;net8.0-maccatalyst\u003c/TargetFrameworks\u003e`\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbntKA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5yIVuG",
                                           "createdAt":  "2024-01-29T14:19:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-ports\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI have purchased this device ([external link](https://www.ruggedi.com/latest-new-arrival-rugged-smartphone-with-lf-134-2khz-rfid-reader-built-in.html)) in order to read card number whenever a card is presented to the inbuilt 125 kHz card reader.\r\n\r\nPreinstalled, there is an java application (to which I was provided with source code) which can read the number and display it.\r\n\r\nBased on that, I have created a .NET MAUI application that can connect to the internal port /dev/ttyS1 and start to listen for received data. It uses the System.IO.Ports library.\r\n\r\nMy MAUI application works great and whenever I present a 125 kHz card, I can see its number. BUT when I restart the mobile device and launch my application, no data is received upon presenting the card. I have to start the preinstalled application, then I can quit it, launch my application and only then my MAUI application starts to listen for data.\r\n\r\nSince I am not a Java programmer, I do not know, what I am missing that the preinstalled application does have and mine does not.\r\n\r\nMoreover, in the project, I had to include \r\n`\u003cPackageReference Include=\"System.IO.Ports\" Version=\"9.0.0-alpha.1.24058.11\" /\u003e`\r\n\r\nbecause with the current latest stable versions I was getting an error when deploying the code to the device (to a simulator as well, only Windows machine was working).\r\n\r\n\n\n### Reproduction Steps\n\n```\r\nusing System.IO.Ports;\r\n\r\nprivate SerialPort port = new(\"/dev/ttyS1\")\r\n{\r\n    BaudRate = 9600,\r\n};\r\n\r\nport.Open();\r\nport.DataReceived += new SerialDataReceivedEventHandler(port_DataReceived);\r\n\r\nprivate async void port_DataReceived(object sender, SerialDataReceivedEventArgs e)\r\n{\r\n    port.ReadExisting();\r\n}\r\n\r\n```\n\n### Expected behavior\n\nWhen I present a 125 kHz card to the reader, the program should enter the `port_DataReceived` method.\n\n### Actual behavior\n\nI put breakpoint right at the beginning of the `port_DataReceived` method, but it did not enter it.\r\n\r\nThe debugger, though, says that the port is open.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nOnly way to get it working, after a device restart, is to launch the pre-installed Java application. Only after then the MAUI application is working flawlessly.\n\n### Configuration\n\n`\u003cTargetFrameworks\u003enet8.0-android;net8.0-maccatalyst\u003c/TargetFrameworks\u003e`\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMichalOplt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO.Ports`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-29T14:19:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc51mH9c",
                                           "createdAt":  "2024-03-01T10:27:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalOplt",
                                           "body":  "Bump",
                                           "updatedAt":  "2024-03-01T10:27:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc522P84",
                                           "createdAt":  "2024-03-13T09:32:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MichalOplt",
                                           "body":  "I have updated the System.IO.Ports library to version 9.0.0-preview-2.24128.5 but the problem persists",
                                           "updatedAt":  "2024-03-13T10:21:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Th6KS",
                                           "createdAt":  "2024-11-14T01:06:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "clocksea",
                                           "body":  "Hi Michal.\nDo you fix the issue? \nBut I meet the similar issue: MAUI .net8 android14, I used System.IO.Ports. but When I run it on target, ERROR: no found the target DLL. Do you know How to fix? ",
                                           "updatedAt":  "2024-11-14T01:06:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6due0o",
                                           "createdAt":  "2025-02-09T12:27:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "I don\u0027t expect our team will be able to investigate this soon. I\u0027m marking it as https://github.com/dotnet/runtime/labels/help%20wanted in case a community member is interested in debugging this further to try to find a root cause and possible fix.",
                                           "updatedAt":  "2025-02-09T12:27:15Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "System.IO.Ports - SerialDataReceivedEventHandler not fired after device restart",
        "labels":  [
                       "help wanted",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/97741",
        "createdAt":  "2024-01-31T06:13:29Z",
        "number":  97741,
        "author":  "Sputnik24",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-09T12:28:51Z",
        "body":  "### Description\n\nOS: DietPi arm64 bookworm on Raspberry Pi 4\r\nArduino connected via USB2 to the Pi\r\n\r\nHUPCL (hang up on close) is disabled either by stty or a small Python program. When the serial port is closed using a .NET program, this is ignored and HUPCL is signaled leading to a reset of Arduino. Using the same with a Python program, HUPCL is not signaled on close.\n\n### Reproduction Steps\n\n2 ways to disable HUPCL:\r\n`stty -F /dev/ttyUSB0 -hupcl`\r\n\r\nor\r\n\r\nsmall Python program:\r\nhttps://raspberrypi.stackexchange.com/a/31298\r\n\r\nMinimal CLI program\r\n\r\n```csharp\r\nvar serialPort = new SerialPort(\"/dev/ttyUSB0\") {\r\n    ReadTimeout = 500,\r\n    BaudRate = 250000,\r\n    Parity = Parity.None,\r\n    DataBits = 8,\r\n    StopBits = StopBits.One,\r\n    Handshake = Handshake.None,\r\n    NewLine = \"\\r\\n\"\r\n};\r\nserialPort.Open();\r\nserialPort.Close();\r\n```\n\n### Expected behavior\n\n- HUPCL shall not be signaled an serialPort.Close();\r\n- A method to disable HUPCL using C#/.NET would be helpful\n\n### Actual behavior\n\nHUPCL is signaled on serialPort.Close(); leading Arduino to reset\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nOn Windows it is working as excpected.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOnbnvMQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5yWUf5",
                                           "createdAt":  "2024-01-31T06:13:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-ports\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nOS: DietPi arm64 bookworm on Raspberry Pi 4\r\nArduino connected via USB2 to the Pi\r\n\r\nHUPCL (hang up on close) is disabled either by stty or a small Python program. When the serial port is closed using a .NET program, this is ignored and HUPCL is signaled leading to a reset of Arduino. Using the same with a Python program, HUPCL is not signaled on close.\n\n### Reproduction Steps\n\n2 ways to disable HUPCL:\r\n`stty -F /dev/ttyUSB0 -hupcl`\r\n\r\nor\r\n\r\nsmall Python program:\r\nhttps://raspberrypi.stackexchange.com/a/31298\r\n\r\nMinimal CLI program\r\n\r\n```csharp\r\nvar serialPort = new SerialPort(\"/dev/ttyUSB0\") {\r\n    ReadTimeout = 500,\r\n    BaudRate = 250000,\r\n    Parity = Parity.None,\r\n    DataBits = 8,\r\n    StopBits = StopBits.One,\r\n    Handshake = Handshake.None,\r\n    NewLine = \"\\r\\n\"\r\n};\r\nserialPort.Open();\r\nserialPort.Close();\r\n```\n\n### Expected behavior\n\n- HUPCL shall not be signaled an serialPort.Close();\r\n- A method to disable HUPCL using C#/.NET would be helpful\n\n### Actual behavior\n\nHUPCL is signaled on serialPort.Close(); leading Arduino to reset\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nOn Windows it is working as excpected.\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eSputnik24\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.IO.Ports`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-31T06:13:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6due8x",
                                           "createdAt":  "2025-02-09T12:28:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "I don\u0027t expect our team will be able to investigate this soon. I\u0027m marking it as https://github.com/dotnet/runtime/labels/help%20wanted in case a community member is interested in debugging this further to try to find a root cause and possible fix.",
                                           "updatedAt":  "2025-02-09T12:28:44Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "System.IO.Ports.SerialPort.Close() ignores disabled HUPCL flag on Linux",
        "labels":  [
                       "help wanted",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100690",
        "createdAt":  "2024-04-05T16:44:08Z",
        "number":  100690,
        "author":  "sylvainouel",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-19T09:44:51Z",
        "body":  "### Description\n\nIf you write from one thread and close the port from another, it is possible for the Write to lockup and never return.\r\nIt doesn\u0027t repro on Windows.\r\n\n\n### Reproduction Steps\n\nThe following reproduces the issue very quickly.\r\n\r\n```\r\nusing System.IO.Ports;\r\n\r\nvar s = new SerialPort();\r\ns.PortName = args[0];\r\nConsole.WriteLine(\"Using port {0}\",s.PortName);\r\n\r\nvar t = new Thread(() =\u003e\r\n{\r\n    while (true)\r\n    {\r\n        try {\r\n            Console.WriteLine(\"Say hello\");\r\n            s.Write(\"Hello World\");\r\n        } catch (Exception e)\r\n        {}\r\n    }\r\n});\r\nt.Start();\r\n\r\nwhile (true)\r\n{\r\n    s.Open();\r\n    Thread.Sleep(1);\r\n    s.Close();\r\n}\r\n```\r\nIn SerialStreamUnix.cs:\r\nWrite eventually calls WriteAsync which queues a SerialStreamWriteRequest then calls EnsureIOLoopRunning.\r\nEnsureIOLoopRunning acquires a lock (_ioLoopLock), however, Dispose does not, stops the ioLoop and writes to _ioLoop.\r\nThe IOLoop is stopped, and the request never completes.\r\n\r\n\n\n### Expected behavior\n\nWrite should always return or throw.\n\n### Actual behavior\n\nit locks up after only a few iteration\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n- add lock around Close and Write\r\n- Set a WriteTimeout\n\n### Configuration\n\ntested with:\r\n.NET 7.0.17\r\nLinux ARM64\r\n\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOeZuf7A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc55m5_s",
                                           "createdAt":  "2024-04-05T16:44:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-05T16:44:25Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "System.IO.Ports.SerialPort: Under Linux, closing the port while writing cause a deadlock.",
        "labels":  [
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106631",
        "createdAt":  "2024-08-15T22:38:24Z",
        "number":  106631,
        "author":  "johngardner58work",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-02-09T12:25:24Z",
        "body":  "For sometime there have been many internet posts about problems with System.IO.Ports.SerialPort especially when **reading** higher speed data (e.g. 115200).   We\u0027ve had to resort to using interop and MSCOMM32.ocx or making DLLImport winapi kernel calls.  Or using a 3rd party library (often written in C or C++) and also requiring DLLImport.   These are not portable.\r\n\r\nTransmit seems to work OK, but waiting for bytes on the receive side is flaky.   We tend to use 115,200, n, 8, 1 with no handshaking.   That works fine with  MSCOMM32.ocx or Win32Api or C style software.\r\n\r\nIt is high time that this implementation is revisited and is made rock solid and performant.  It needs to work well with both physical COM ports and also USB to Serial converters (e.g. with FTDI or Prolific chipsets).  MSCOMM32.ocx works well with both.\r\n\r\nSince some VCP and USB to serial devices are capable of going faster than 115200, MS should try to optimize throughput and latency.   It would be nice if .NET Framework 4.8 and laterl .NET core implementations be fixed.\r\n\r\nSerial ports are used extensively in the embedded world instead of direct USB.   For this reason we need robust .net support.\r\n\r\nOur device is a heart simulator,  Commands (transmit) tend to be infrequent, while we send up Markers much more frequently.   Mixed in there is that sent Commands get ACKs / Response (sometimes with payload), that\u0027s the only handshaking.   Markers are asynchronous events related to the Heart beating in various chambers and if a pacemaker is attached pace detection events with some measurement payloads.   As you can see this is more complex that many simple serial port needs.   And it all works fine with mscomm32.ocx.   We can distinquish between markers and ACKs.   Each command gets an ID that must match the ACKs ID.   \r\n\r\n\r\nThanks!\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiONxqg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6I422z",
                                           "createdAt":  "2024-08-15T22:51:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOECpD2g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "carlreinke",
                                                                               "createdAt":  "2025-01-15T20:30:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "johngardner58work",
                                           "body":  "I should say System.IO.Ports.SerialPort\r\n\r\nHere is a snippet comment from Ben Voigt  https://sparxeng.com/blog/software/must-use-net-system-io-ports-serialport:\r\n\"The worst offending System.IO.Ports.SerialPort members, ones that not only should not be used but are signs of a deep code smell and the need to rearchitect all IOPSP usage:\r\n\r\n    The DataReceived event (100% redundant, also completely unreliable)\r\n    The BytesToRead property (completely unreliable)\r\n    The Read, ReadExisting, ReadLine methods (handle errors completely wrong, and are synchronous)\r\n    The PinChanged event (delivered out of order with respect to every interesting thing you might want to know about it)\r\n\"\r\n",
                                           "updatedAt":  "2024-08-15T22:51:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6I43Gq",
                                           "createdAt":  "2024-08-19T13:40:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-ports\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-19T13:40:18Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "System.IO.SerialPort  DataReceived drops bytes, not reliable.  For serious RS232 use this library has been unusable.",
        "labels":  [
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/112643",
        "createdAt":  "2025-02-18T02:36:37Z",
        "number":  112643,
        "author":  "MatinxHT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T09:25:03Z",
        "body":  "\u003c!--\nPlease keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.\n\nIf you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.\nFor other types of questions, consider using [StackOverflow](https://stackoverflow.com).\n\n--\u003e\n\n### Describe the bug\nHello I am coding a program to control a device like \"camera\". It works like a call device how long to expose to light,and I wait for the time to check what came back.My code is using **System.IO.Ports** to do this job and wait for enough time the code properly works on **Windows**.\n\nHowever,in Ubuntu even i set a long enough time the buffer (which I read) size never goes well. Whatever `serialPort.ReadBufferSize` I set still get a maxmimn 4095 length buffer.\n\nAnd I check Ubuntu system settings about /dev/ttyACM0 has 1Mb cache. So I wondering if this is probrom is  about the dotnet runtime.\n\n\n### To Reproduce\n\u003c!--\nWe ❤ code! Point us to a minimalistic repro project hosted in a GitHub repo, Gist snippet, or other means to see the isolated behavior.\n\nWe may close this issue if:\n- the repro project you share with us is complex. We can\u0027t investigate custom projects, so don\u0027t point us to such, please.\n- if we will not be able to repro the behavior you\u0027re reporting\n--\u003e\n**My code as follow:**\n**Main**\n\n```\nusing SerialPort serialPort = new(SelectedDevice, 115200, Parity.None, 8, StopBits.One);\nserialPort.WriteBufferSize = 8192;\nserialPort.ReadBufferSize = 8192;\nserialPort.Open();\nbyte[] buffer = Sender.AcquireSpectra(ExposureTime, AverageTimes);\n int delay = (int)(ExposureTime * AverageTimes * 2);\nvar response = await SendNReadData(serialPort, buffer, delay, 4106);\nif (response.Length == 4106)\n {\n        var sp = Receiver.ReadSpectrum(response, 0);\n        int[] ins = sp.m_nIntensity;\n         SpectraPlotModel = SpectraPlot.OnUpdatedGraph(ins);\n}\n```\n\n\n**Serial** \n\n```\nprivate static async Task\u003cbyte[]\u003e SendNReadData(SerialPort serialPort, byte[] sendBuffer, int delay, int responseBufferLength)\n        {\n            serialPort.Write(sendBuffer, 0, sendBuffer.Length);\n            int timeout = delay * 5;\n            using var cancellationTokenSource = new CancellationTokenSource();\n            cancellationTokenSource.CancelAfter(timeout);\n            await Task.Delay(delay); //必须保留 在windows下会出现4k分包问题\n            byte[] responseBuffer = new byte[responseBufferLength];\n            var readTask = serialPort.BaseStream.ReadAsync(responseBuffer, 0, responseBuffer.Length, cancellationTokenSource.Token);\n            var completedTask = await Task.WhenAny(readTask, Task.Delay(delay, cancellationTokenSource.Token));\n            if (completedTask == readTask)\n            {\n                int bytesRead = await readTask;\n                byte[] dataBuffer = new byte[bytesRead];\n                Array.Copy(responseBuffer, dataBuffer, bytesRead);\n                return dataBuffer;\n            }\n            else\n            {\n                return new byte[4];\n            }\n        }\n```\n\n\n### Further technical details\nSDK Version: 9.0.103\nSystem.IO.Ports.dll 8.0.0.0",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOntEQBA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6e0RAE",
                                           "createdAt":  "2025-02-18T03:04:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-ports\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-02-18T03:04:10Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "SerialPort ReadBufferSize cant set properly in Ubuntu",
        "labels":  [
                       "help wanted",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113296",
        "createdAt":  "2025-03-08T22:48:42Z",
        "number":  113296,
        "author":  "ygoe",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T03:10:22Z",
        "body":  "### Description\n\nThe SerialPort seems to be broken in .NET 9. It throws this exception all the time: System.IO.IOException: \"The I/O operation has been aborted because of either a thread exit or an application request.\"\n\nThis code has worked wonderfully in older versions of .NET but now it only fails. I can read and write from the serial port synchronously, i.e. wait for a response after sending a request. But for this project I need constant awareness on the port to always handle incoming data.\n\nSee attached demo code that reproduces the bug immediately. SerialPort is unusable like this. Run the project with the name of a serial port as only command line argument.\n\n### Reproduction Steps\n\nRun attached code.\n\n### Expected behavior\n\nReading whatever bytes have been received.\n\n### Actual behavior\n\nSystem.IO.IOException: \"The I/O operation has been aborted because of either a thread exit or an application request.\"\n\n### Regression?\n\nI think so.\n\n### Known Workarounds\n\nNone\n\n### Configuration\n\n.NET 9\nWindows 11 x64\nNot tested anything else\n\n### Other information\n\nThe web suggests that something is tampering with the serial port. But that\u0027s not the case. I can verify with PuTTY that the serial port is working fine and receiving data. I can also send data over the port from .NET (ignoring these exceptions) and the data is properly received on the other end. I just can\u0027t receive any of the data that is sent, and I have these exceptions in a very tight loop.\n\n[SerialPortTest.zip](https://github.com/user-attachments/files/19146262/SerialPortTest.zip)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOonUNjQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6hcL7H",
                                           "createdAt":  "2025-03-08T22:49:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-ports\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-08T22:49:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hpkst",
                                           "createdAt":  "2025-03-10T22:56:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygoe",
                                           "body":  "Minimal repro code:\n\n```cs\nusing System.IO.Ports;\n\nnamespace SerialPortTest;\n\ninternal class Program\n{\n\tpublic static async Task Main(string[] args)\n\t{\n\t\tif (args.Length != 1)\n\t\t{\n\t\t\tConsole.WriteLine(\"Usage: SerialPortTest \u003cport\u003e\");\n\t\t\treturn;\n\t\t}\n\n\t\tvar serialPort = new SerialPort(args[0], 115200, Parity.None, 8, StopBits.One);\n\t\tserialPort.Open();\n\n\t\tbyte[] buffer = new byte[512];\n\t\tawait serialPort.BaseStream.ReadAsync(buffer);\n\t}\n}\n```\n\nRun with .NET 9. Throws an exception immediately. With different USB serial adapters I have here. Sending or waiting first before reading doesn\u0027t help. The reading is just broken. Unfortunately, that\u0027s exactly what I need now.",
                                           "updatedAt":  "2025-03-10T22:56:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6htJj_",
                                           "createdAt":  "2025-03-11T07:29:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygoe",
                                           "body":  "The bug now also occurs with .NET 6 and 8. And it does not on another computer using .NET 9 and Windows. I don\u0027t know what happened. But the error message is not helpful at all to resolve the problem. There is no usable stack trace or problem description.",
                                           "updatedAt":  "2025-03-11T07:29:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iBzDD",
                                           "createdAt":  "2025-03-12T16:03:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ygoe",
                                           "body":  "The exception is only thrown on one out of two Windows machines and only for CH340 USB-serial devices, not for FT232 devices. Uninstalling the device with drivers, using different USB ports, or playing with the device driver settings does not help. .NET has compatibility issues with CH340 devices on Windows. Other Windows applications work normally.",
                                           "updatedAt":  "2025-03-12T16:03:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6idQ2N",
                                           "createdAt":  "2025-03-14T19:32:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "prmartinuk",
                                           "body":  "I am getting the same issue with two CH340 USB-serial devices.\n\nThe devices have been happily running in a .NET 6 web app for the last 2 and a half years. A few weeks ago I upgraded the web app to use .NET 8 and upgraded to System.IO.Ports 9.0.1 at the same time. After upgrading it continued working correctly.\nSometime in the week after the upgrade it started to fail with the IOException, no changes were made during that week and there doesn\u0027t seem to be any Windows or driver updates that happened.\n\nReverting back to the older code on .NET 6 with System.IO.Port 7.0.0 didn\u0027t cure the issue.\n\nInitially when I tried to connect to the CH340 USB-serial device using a non-.NET application I still had issues communicating - no errors were given but I was receiving no replies from messages sent.\nAfter unplugged the USB and power cycling the CH340 USB-serial device, the non-.NET application was able to happily communicate with the devices on the other end of the serial link.\nUnfortunately the .NET web app still gave the IOException and after a time seemed to prevent the CH340 USB-serial device from talking to the non-.NET application again.\n\nChanging to use a different Serial Port implementation (RJCP.SerialPortStream) from the one in System.IO.Ports has allowed the .NET web app to work without issues.",
                                           "updatedAt":  "2025-03-14T19:32:10Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "SerialPort constantly throws IOException",
        "labels":  [
                       "help wanted",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113889",
        "createdAt":  "2025-03-25T19:20:31Z",
        "number":  113889,
        "author":  "severa-astrosysteme",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T02:08:15Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\n\n### Description\nHello, I have really big performance issues for method ReadByte() - the performance is more than 10 times slower.\n\nThe problem were tested and confirmed from my side on \nNET7/8/9\nLast stable version is NET6\n\nI tried to use  serialPort.Read instead, but when I converted it to chars the recieved chars are different (last part in video)\n\nhttps://github.com/user-attachments/assets/cae65e0c-c574-41c6-8e68-220fc058b715\n\nNET6 example\n\n![Image](https://github.com/user-attachments/assets/81bfcd90-cc74-4d3e-9037-30a31f3218e3)\n\nNET9 example \n![Image](https://github.com/user-attachments/assets/f7c07979-8fd1-4406-ab37-29380bbbbec9)\n\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOpCX_-w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6kDOLt",
                                           "createdAt":  "2025-03-25T19:25:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-ports\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-25T19:25:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kI8YV",
                                           "createdAt":  "2025-03-26T09:52:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOELgbdg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "severa-astrosysteme",
                                                                               "createdAt":  "2025-03-26T10:19:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "elgonzo",
                                           "body":  "`SerialPort.Read` reads bytes, not chars. While i don\u0027t know nothing about your code, i still assume that the unexpected characters you got is due to your code doing byte array to string conversion incorrectly in some way (like for example not using the correct text encoding/code page perhaps...)\n\nAlso, regarding the alleged 10x slower performance of `SerialPort.ReadByte`, any code example to share that exhibits such a \"slowness\" of this order of magnitude? It might very well be a case that a substantial part of that \"slowness\" isn\u0027t being the `SerialPort.ReadByte` API itself but caused by your code using `SerialPort.ReadByte` and processing bytes one at a time. Without knowing the code in question, it\u0027s hard to tell...",
                                           "updatedAt":  "2025-03-26T10:05:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kJZdH",
                                           "createdAt":  "2025-03-26T10:28:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "severa-astrosysteme",
                                           "body":  "using System;\nusing System.IO.Ports;\n\nnamespace Demo\n{\n    class Program\n    {\n        public static SerialPort serialPort;\n        static void Main(string[] args)\n        {\n            string portName = \"COM1\"; // Change according to your port\n            int baudRate = 19200; // Set the appropriate baud rate\n\n            serialPort = new SerialPort(portName, baudRate);\n\n            try\n            {\n                serialPort.DataReceived += SerialPort_DataReceived;\n                serialPort.Open();\n\n                Console.WriteLine($\"Serial port {portName} opened. Waiting for data...\");\n                Console.ReadLine(); // Waits for user input to prevent the program from ending immediately\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"Error: {ex.Message}\");\n            }\n            finally\n            {\n                if (serialPort.IsOpen)\n                {\n                    serialPort.Close();\n                    Console.WriteLine(\"Serial port closed.\");\n                }\n            }\n        }\n\n        public static void ReadDemo()\n        {\n            int receivedInt = serialPort.ReadByte();\n\n            Console.WriteLine($\"{DateTime.Now}:{(char)receivedInt}\");\n        }\n        private static void SerialPort_DataReceived(object sender, SerialDataReceivedEventArgs e)\n        {\n            ReadDemo();\n        }\n\n    }\n}",
                                           "updatedAt":  "2025-03-26T10:31:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kJf_7",
                                           "createdAt":  "2025-03-26T10:35:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "severa-astrosysteme",
                                           "body":  "\u003e `SerialPort.Read` reads bytes, not chars. While i don\u0027t know nothing about your code, i still assume that the unexpected characters you got is due to your code doing byte array to string conversion incorrectly in some way (like for example not using the correct text encoding/code page perhaps...)\n\u003e \n\u003e Also, regarding the alleged 10x slower performance of `SerialPort.ReadByte`, any code example to share that exhibits such a \"slowness\" of this order of magnitude? It might very well be a case that a substantial part of that \"slowness\" isn\u0027t being the `SerialPort.ReadByte` API itself but caused by your code using `SerialPort.ReadByte` and processing bytes one at a time. Without knowing the code in question, it\u0027s hard to tell...\n\nI placed some simple code so if I run it in NET6 - with System.IO.Ports 6.0.0 and then in NET9 - with 9.0.3\ncode is compleatly same\n\nhttps://github.com/user-attachments/assets/8e7175ab-76a0-4105-ad05-bf12a86de3e0\n",
                                           "updatedAt":  "2025-03-26T10:35:02Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "System.IO.Ports.ReadByte()",
        "labels":  [
                       "tenet-performance",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118485",
        "createdAt":  "2025-08-07T10:57:46Z",
        "number":  118485,
        "author":  "RaulRG",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-31T17:28:21Z",
        "body":  "### Description\n\nA customer is complaining about our application consuming 27 GB of memory. We did an analysis of a dump and found that there were more than 96 million instances of the internal class SerialStreamAsyncResult (System.IO.Ports.SerialStream).\n\nWe think we have identified the problem in the method WaitForCommEvent in file SerialStream.Windows.cs.\n\nThere is an infinite loop\n\n`while (! ShutdownLoop)`\n\nYou only leave the loop if you get any of three error codes:\n\n```\n  if (hr == Interop.Errors.ERROR_ACCESS_DENIED || hr == Interop.Errors.ERROR_BAD_COMMAND || hr == ERROR_DEVICE_REMOVED)\n  {\n      doCleanup = true;\n      break;\n  }\n```\n\nor if at the end of the loop and the completion callback decrements the variable _numBytes twice (the variable is initialized to 2):\n\n```\nif (Interlocked.Decrement(ref asyncResult._numBytes) == 0)\n    threadPoolBinding.FreeNativeOverlapped(intOverlapped);\n```\n\nThe completion callback is not being called because there is an error, so it never decrements the _numBytes. \n\nProbably the error returned by Citrix is none of these three errors and the loop never leaves and creates all these instances killing the system.\n\nThere is even this code inside the loop that in reality documents that this could happen:\n\n```\nelse if (hr != Interop.Errors.ERROR_INVALID_PARAMETER)\n{\n    // ignore ERROR_INVALID_PARAMETER errors.  WaitCommError seems to return this\n    // when SetCommMask is changed while it\u0027s blocking (like we do in Dispose())\n    Debug.Fail(\"WaitCommEvent returned error \" + hr);\n}\n```\n\nIf the error code was ERROR_INVALID_PARAMETER or something other than the three error codes above or ERROR_IO_PENDING, then the loop would never end. There is a comment saying that there are **at least** three error codes Windows or drivers may return. I think we are getting a fourth one.\n\nThis is a huge issue as is consumes this incredible amount of memory till the session gets killed and the server gets really slow.\n\n \n\n### Reproduction Steps\n\nDifficult to reproduce as it just happens sometimes under Citrix. We could imagine that using a driver that returns a different error code could at least show that there is an error in the logic. Anyways, if a driver returns an error that is not being handled in the method, it will enter an endless loop.\n\n### Expected behavior\n\nThe implementation should not enter an endless loop creating millions of objects. It would be better to really fail in this case, instead of what it is happening now.\n\n### Actual behavior\n\nThe memory dump is 27 GB, but we think that we already identified the issue.\n\n### Regression?\n\nYes, the customer has been working for years with our older version based on .NET Framework. We migrated to .NET 8 last year and now they are having the issues.\n\n### Known Workarounds\n\nWe didn\u0027t find any workaround. \n\n### Configuration\n\nWe are using .NET 8, but we looked at the current code and it has the problems we described, so it must be the same for at least all releases since .NET 8.\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvKjJKg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc68qMkq",
                                           "createdAt":  "2025-08-07T17:47:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-ports\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-07T17:47:38Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Gigantic memory usage when using the SerialPort class under Citrix (but could happen everywhere else)",
        "labels":  [
                       "help wanted",
                       "needs-further-triage",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119105",
        "createdAt":  "2025-08-26T16:08:27Z",
        "number":  119105,
        "author":  "emrsn-mspant",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-31T18:00:45Z",
        "body":  "### Description\n\nCOMMPROP describes dwMaxBaud as max baud rate in a table of enumerations but the code in SerialStream.Windows.cs compares the max baud rate directly to the baud rate in several place.  If commProp.dwMaxBaud is 64 (1200 bps) and baudRate is 1200 bps, the exception is thrown that it\u0027s out of range.\n\nLines 626-627\n`               \n if (_commProp.dwMaxBaud != 0 \u0026\u0026 baudRate \u003e _commProp.dwMaxBaud)\n                    throw new ArgumentOutOfRangeException(nameof(baudRate), SR.Format(SR.Max_Baud,_commProp.dwMaxBaud));`\n\n### Reproduction Steps\n\n1. Find a com port device that has a max baud rate defined as an enum\n2. Attempt to open a com port created with the max baud rate.\n3. Observe the exception thrown.\n`\n          // COM6 max baud rate is 64, which is enum for 1200.\n          using (var sp = new SerialPort(\"COM6\", 1200))\n          {\n            sp.Open(); // throws exception that max baud rate is 64.\n          }\n\n`        \n\n### Expected behavior\n\nSuccessful opening of com port when dwMaxBaud is not zero by converting the dwMaxBaud enum to a baud rate value.\n\n### Actual behavior\n\nException thrown because it\u0027s comparing an enum to a value\n\n### Regression?\n\nNo idea.\n\n### Known Workarounds\n\nFor the com port device we have this issue, it does work if setting the baud rate to 64 since only one baud rate is valid for the device.\n\n### Configuration\n\n.netstandard20\nWindows 11\nAny CPU (x64)\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwDu8SA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7AOVU1",
                                           "createdAt":  "2025-08-26T16:51:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEgSqcg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jeffhandley",
                                                                               "createdAt":  "2025-08-31T18:00:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "Both .NET Framework and .NET 9.0.8 have this bug.\n\nIt belongs in `area-System.IO.Ports`.  In this area, there are a few other open issues about baud rates, but none of them is for Windows.",
                                           "updatedAt":  "2025-08-26T16:51:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AO7xI",
                                           "createdAt":  "2025-08-26T17:48:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-ports\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-26T17:48:02Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "SerialStream.Windows.cs treats dwMaxBaud as a baud rate when it\u0027s defined as an enum",
        "labels":  [
                       "help wanted",
                       "needs-further-triage",
                       "area-System.IO.Ports"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119156",
        "createdAt":  "2025-08-27T23:56:31Z",
        "number":  119156,
        "author":  "ernest-morariu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-31T18:01:09Z",
        "body":  "### Description\n\n.NET may raise NullReferenceException if the handler of the event SerialPort.DataReceived unsubscribes from this event. \n\nThe problem is in System.IO.Ports.SerialStream. EventLoopRunner\t\n\nThe function CallReceiveEvents(object state) may raise the event DataReceived twice, but it checks for the presence of the handler only once. \nWhen the first event-raise happens, the application may decide to unsubscribe from this event, or even to dispose the SerialPort instance, then, when the control returns to CallReceiveEvents, it attempts to raise the same event again (without checking again against null), but, at this time, the event may be null if the application unsubscribed from it during the first event-raise, and ==\u003e NullReferenceException; the application crushes. See the screenshot:\n\n\u003cimg width=\"1370\" height=\"750\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/d9934dcf-ac8d-45a3-b8b2-2bfae1562e51\" /\u003eack to \n\n### Reproduction Steps\n\n- subscribe to the event SerialPort.DataReceived\n- in the event handler, unsubscribe from SerialPort.DataReceived\n- the issue happens only if the serial port has the Eof in its internal buffer. \n\nThe problem should be clear enough from the Description.\n\n### Expected behavior\n\nSerialPort should check for the event against null before attempting to raise it. \n\n### Actual behavior\n\n.NET raises NullReferenceException and the application crushes. \n\nLooking at the source code, I noticed that all Call*Events functions have the same problem: CallErrorEvents, CallPinEvents, and CallReceiveEvents.  \n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOwI3x1Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7AiR6Z",
                                           "createdAt":  "2025-08-28T00:00:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here is a possible related and/or duplicate issue (I may be wrong):\n- https://github.com/dotnet/runtime/issues/44952",
                                           "updatedAt":  "2025-08-28T00:00:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7AjfHV",
                                           "createdAt":  "2025-08-28T00:42:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-io-ports\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-28T00:42:16Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "SerialPort: NullReferenceException",
        "labels":  [
                       "help wanted",
                       "needs-further-triage",
                       "area-System.IO.Ports"
                   ]
    }
]
