[
    {
        "url":  "https://github.com/dotnet/runtime/issues/16922",
        "createdAt":  "2016-04-07T12:45:08Z",
        "number":  16922,
        "author":  "MaceWindu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODKU4SQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rampaa",
                                            "createdAt":  "2025-03-08T12:25:58Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jozkee",
                                            "createdAt":  "2025-08-07T17:35:07Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-03-06T23:33:09Z",
        "body":  "This defect makes regex useless when you need to match string using unicode categories and string could contain surrogate pairs:\n\n``` c#\n        [Test]\n        public void ClassifySurrogates_Test()\n        {\n            var value = \"𦕒\";\n            var regexLetters = new Regex(@\"^\\p{Lo}$\");\n\n            var regexSurrogates = new Regex(@\"^\\p{Cs}{2}$\");\n\n            Assert.AreEqual(UnicodeCategory.OtherLetter, char.GetUnicodeCategory(value, 0));\n            Assert.AreEqual(UnicodeCategory.OtherLetter, CharUnicodeInfo.GetUnicodeCategory(value, 0));\n            Assert.True(regexSurrogates.IsMatch(value));\n\n            // Fails here\n            Assert.True(regexLetters.IsMatch(value));\n        }\n```\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoT2Xag==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIwNjkzOTg3NQ==",
                                           "createdAt":  "2016-04-07T14:52:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joshfree",
                                           "body":  "I suspect this issue exists in desktop and isn\u0027t unique to core\n",
                                           "updatedAt":  "2016-04-07T14:52:18Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIwNjk1MTc5Ng==",
                                           "createdAt":  "2016-04-07T15:24:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "@Priya91 Unicode Categories looks fine here so the issue looks with regex. \n",
                                           "updatedAt":  "2016-04-07T15:24:29Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDIwNjk3NzYyNg==",
                                           "createdAt":  "2016-04-07T16:18:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MaceWindu",
                                           "body":  "@joshfree, you are right.\nI didn\u0027t dig into source, but I suspect that code responsible for this uses GetUnicodeCategory(char) instead of GetUnicodeCategory(string, charIndex)\n",
                                           "updatedAt":  "2016-04-07T16:20:12Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDA4MjQ3OA==",
                                           "createdAt":  "2018-06-02T12:05:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "peltco",
                                           "body":  "I\u0027ll take a stab at this as part of the hackaton",
                                           "updatedAt":  "2018-06-02T12:05:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY0NTYyMTcyNw==",
                                           "createdAt":  "2020-06-17T20:59:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@peltco I\u0027ll unassign you unless you still have an interest 2 years later 😄 ",
                                           "updatedAt":  "2020-06-17T20:59:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDczMTc2NTI2Mw==",
                                           "createdAt":  "2020-11-22T15:31:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wzchua",
                                           "body":  "Regex doesn\u0027t take surrogate pairs into consideration.\r\n`RegexCharClass` operates on `char`\r\n`public static bool CharInClass(char ch, string set, ref int[]? asciiResultCache)`\r\nMaybe this is where [Rune](https://docs.microsoft.com/en-us/dotnet/api/system.text.rune?view=net-5.0) comes in? ",
                                           "updatedAt":  "2020-11-22T15:31:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NbEYU",
                                           "createdAt":  "2022-11-01T18:30:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2022-11-01T18:30:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NbHs5",
                                           "createdAt":  "2022-11-01T18:42:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODIvs9w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tarekgh",
                                                                               "createdAt":  "2022-11-01T18:47:25Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikesamuel",
                                                                               "createdAt":  "2022-11-03T21:36:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Aloso",
                                                                               "createdAt":  "2023-10-05T16:05:55Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "tjpalmer",
                                           "body":  "This absolutely is a huge weakness in dotnet regex. An issue that I don\u0027t have in JS, Python, or Java, for example.",
                                           "updatedAt":  "2022-11-01T18:42:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NksGL",
                                           "createdAt":  "2022-11-02T22:48:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "\u003eThis absolutely is a huge weakness in dotnet regex.\r\n\r\nCan you ellaborate a bit more on that? We haven\u0027t seen many requests on adding surrogate support in Regex other than [this issue](https://github.com/dotnet/runtime/issues/36425) which got closed as not planned given that we haven\u0027t seen a lot of people trying to perform searches on text that have surrogates in them. It would be good to understand your scenario (more specifically, why are you searching for surrogates in text) in order to be able to re-evaluate our focus.",
                                           "updatedAt":  "2022-11-02T22:48:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Nk7zA",
                                           "createdAt":  "2022-11-03T00:45:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tjpalmer",
                                           "body":  "I\u0027m working on a system (not public right now) where we expect to promote regex for text parsing, including of natural text, and lacking proper unicode support inhibits compatibility across different regex engines.\r\n\r\nCurrent workaround plan is either (1) skip compatibility or (2) expand to giant charsets at runtime based on unicode tables.",
                                           "updatedAt":  "2022-11-03T00:46:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5No2Il",
                                           "createdAt":  "2022-11-03T19:09:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCu_9Fw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tjpalmer",
                                                                               "createdAt":  "2022-11-03T21:34:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "joperezr",
                                           "body":  "I see, thanks for sharing. Our implementation of Regex does assume we are operating over single characters in a lot of places, and no one has really researched on what it would take to add support for surrogates (but I do expect it would likely be a **lot of work**). In order to move forward, we would need someone to design it and to ensure that we can do it in a way that it won\u0027t regress any existing case (as we only really expect surrogates to be less than the 1% case). For anyone interested in coming up with this proposal, I would be happy to review it, but this is not one of our current priorities.",
                                           "updatedAt":  "2022-11-03T19:09:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NpXGY",
                                           "createdAt":  "2022-11-03T21:34:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvAELg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "joperezr",
                                                                               "createdAt":  "2022-11-03T22:19:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tjpalmer",
                                           "body":  "Makes sense. Thanks for the feedback. Once we get to that point on our project, we can discuss option (3) contribute surrogate pair support to dotnet. I\u0027m not sure if this is likely, but if we think it seems like a good idea, I\u0027ll get back in touch here. Feel free to do with this issue as you see fit meanwhile.",
                                           "updatedAt":  "2022-11-03T21:34:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NpayD",
                                           "createdAt":  "2022-11-03T21:40:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikesamuel",
                                           "body":  "Even ignoring natural language text, regular expressions are often used for splitting source code into tokens.\r\nThose tokens include identifiers, and there are extant human languages with letter and number code-points outside the basic plane.\r\n\r\nFor example, https://en.wikipedia.org/wiki/Miao_(Unicode_block)",
                                           "updatedAt":  "2022-11-03T21:40:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NpqfN",
                                           "createdAt":  "2022-11-03T22:55:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "It might be interesting to know more about how JS/python/Java (or PCRE and Rust) handle this. Is it user-visible? Our engine has a pretty firm context of 2 byte characters. I know PCRE has a 16 bit character mode and an 8 bit character mode. What does it look like to support varying width characters.",
                                           "updatedAt":  "2022-11-03T22:55:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NsD26",
                                           "createdAt":  "2022-11-04T12:19:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tjpalmer",
                                           "body":  "For Python, I should clarify that it emphasizes 32-bit code points for all strings, including for regex needs, such as `.` meaning a full code point. But its `re` module doesn\u0027t have Unicode property names built in. For that, it recommends [3rd party `regex`](https://pypi.org/project/regex/). And I haven\u0027t looked at implementation details much for the engines in question.",
                                           "updatedAt":  "2022-11-04T12:19:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NszXX",
                                           "createdAt":  "2022-11-04T13:57:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xanatos",
                                           "body":  "In Javascript you have a `u` flag that enables the unicode mode (`\\foo\\u`, or `new RegExp(\u0027foo\u0027, \u0027u\u0027)`). It enables `\\u{12345}` codepoints, it makes the `.` match surrogate pairs (and even matches unpaired low/high surrogate pairs), and enables the `\\p{characterclass}` and `\\P{characterclass}`. Note that, for example, `\\[^x]\\u` will match any surrogate pair (plus any character that isn\u0027t an `x`)",
                                           "updatedAt":  "2022-11-04T14:30:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NtEft",
                                           "createdAt":  "2022-11-04T14:38:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikesamuel",
                                           "body":  "Besides enabling extra *RegExpr* syntax as @xanatos notes, the JS `u` flag affects how the matcher sees string chunks.\r\n\r\nhttps://tc39.es/ecma262/#sec-regexpbuiltinexec\r\n\r\n\u003e 22.2.7.2 RegExpBuiltinExec ( R, S )\r\n\u003e\r\n\u003e ...\r\n\u003e 9. If flags contains \"u\", let fullUnicode be true; else let fullUnicode be false.\r\n\u003e ...\r\n\u003e 11. If fullUnicode is true, let input be [StringToCodePoints](https://tc39.es/ecma262/#sec-stringtocodepoints)(S). Otherwise, let input be a [List](https://tc39.es/ecma262/#sec-list-and-record-specification-type) whose elements are the code units that are the elements of S.",
                                           "updatedAt":  "2022-11-04T14:38:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NtTyF",
                                           "createdAt":  "2022-11-04T15:11:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikesamuel",
                                           "body":  "That view, computing the code-points ahead of matching, is a useful abstraction.\r\n\r\nIn practice, if your underlying representation of a string is a list of bytes known to be valid UTF-8, you can iterate forward and backwards over code-points.\r\n\r\nI see there\u0027s a [*RightToLeft*](https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regexoptions?view=net-6.0#system-text-regularexpressions-regexoptions-righttoleft) mode which iiuc has semantic significance for which group in `/(a+)(a+)/someflags` is not length 1 so you need to iterate in reverse.\r\n\r\nIs there anything in the current implementation that necessitates random access to characters in the input?",
                                           "updatedAt":  "2022-11-04T15:11:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ntbeb",
                                           "createdAt":  "2022-11-04T15:22:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvDLtA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mikesamuel",
                                                                               "createdAt":  "2022-11-04T15:55:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e if your underlying representation of a string is a list of bytes known to be valid UTF-8\r\n\r\nThe representation is a UTF-16 `ReadOnlySpan\u003cchar\u003e`.  The implementation today looks at individual char (16-bit) values.\r\n\r\n\u003e Is there anything in the current implementation that necessitates random access to characters in the input?\r\n\r\nBacktracking requires the ability to randomly access data in the input, but only to locations previously seen.  There are also optimizations that utilize random access to jump forwards, such as jumping to some offset from the end of the input in some cases involving end anchors. Etc.\r\n\r\n\u003e That view, computing the code-points ahead of matching, is a useful abstraction.\r\n\r\n_If_ we were to do anything here, we\u0027d want to compute as much as possible as part of the construction/codegen phase, e.g. as part of the Regex ctor / parsing / tree optimization and/or as part of the source generator.  It would also very likely need to be opt-in, such as with a new RegexOptions flag, both for compatibility and for performance.  We already use RegexOptions to impact how parsing / tree optimization is performed, e.g. RegexOptions.IgnoreCase causes individual characters in the pattern to be translated at construction/parsing time into the corresponding case-insensitive sets.  We\u0027d likely do some amount of similar transformation as part of constructing the tree.  We\u0027d also probably need a new representation for known categories like `\\w`, which would then allow matching and code generation to continue current optimizations for such sets and making the more expensive Unicode matching pay-for-play.",
                                           "updatedAt":  "2022-11-04T15:22:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ntd2I",
                                           "createdAt":  "2022-11-04T15:28:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "And just to add one more thing, we would also need to consider the case of someone opting into this mode as well as using RegexOptions.IgnoreCase, since IIRC there are various cases for upper or lower case mappings between surrogates and 16-bit unicode characters, so those would need to get added to our logic for case-insensitive comparisons.",
                                           "updatedAt":  "2022-11-04T15:28:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NteSO",
                                           "createdAt":  "2022-11-04T15:30:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xanatos",
                                           "body":  "Note that considering the string as codepoints makes a big difference. Example in Javascript:\r\n\r\n```\r\nconst rx1 = /\\uDE00..$/;\r\nconst rx2 = /\\uDE00..$/u;\r\nconsole.log(rx1.test(\u0027\\uD83D\\uDE00xx\u0027)); // true\r\nconsole.log(rx2.test(\u0027\\uD83D\\uDE00xx\u0027)); // false: \\uD83D\\uDE00 is a single codepoint, it can\u0027t be partially matched by the RegExp\r\n```",
                                           "updatedAt":  "2022-11-04T15:30:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ntlss",
                                           "createdAt":  "2022-11-04T15:53:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikesamuel",
                                           "body":  "\u003e The representation is a UTF-16 `ReadOnlySpan\u003cchar\u003e`. The implementation today looks at individual char (16-bit) values.\r\n\r\nAh, right.  In that case, reverse iteration over code-points is pretty straightforward.\r\n\r\n\u003e Backtracking requires the ability to randomly access data in the input, but only to locations previously seen.\r\n\r\nAh.  An int known to be at a code-point boundary should be just as good then.\r\n\r\n\u003e There are also optimizations that utilize random access to jump forwards, such as jumping to some offset from the end of the input in some cases involving end anchors. Etc.\r\n\r\nAh, so in `/^(.{100})x$/`, you offset from end to look for `x` but don\u0027t jump forward by 100 based on a precomputation of the UTF-16 width of `(.{100})`?\r\n\r\n\u003e We\u0027d also probably need a new representation for known categories like `\\w`\r\n\r\nI think https://unicode.org/reports/tr18/#Compatibility_Properties has recommendations on what goes in `\\w`.\r\n\r\niirc, the ICU4J people did a lot of experimentation of representations of unicode sets for UTF-16 strings.\r\n\r\nI think their representation of [*UnicodeSet*s](https://unicode-org.github.io/icu-docs/apidoc/dev/icu4j/com/ibm/icu/text/UnicodeSet.html) that didn\u0027t fit in a `boolean[256]` was a sorted set of ints that they could binsearch into.  So `/[\\u0000-\\uD7FFF\\uE000-\\UFFFF]/` would be represented as [0, 0xD800, 0xE000, 0x10000] which means *([0, 0xD800) \u0026cup; [0xE000, 0x10000))*.\r\n\r\n\r\n",
                                           "updatedAt":  "2022-11-04T15:53:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NtoDv",
                                           "createdAt":  "2022-11-04T16:01:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikesamuel",
                                           "body":  "\u003e And just to add one more thing, we would also need to consider the case of someone opting into this mode as well as using RegexOptions.IgnoreCase\r\n\r\nhttps://unicode.org/reports/tr18/#Default_Loose_Matches recommends semantics for that.\r\n\r\nTheir suggestion of default case folding means that matching is locale-insensitive: `/\u003cscript\u003e/ui` matches `\"\u003cSCRIPT\u003e\"` but not `\"\u003cSCRİPT\u003e\"` (note the dotted I) regardless of whether there\u0027s a current locale that suggests additional Turkish/Azeri case folding.\r\n",
                                           "updatedAt":  "2022-11-04T16:01:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Nto1H",
                                           "createdAt":  "2022-11-04T16:04:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Ah, so in /^(.{100})x$/, you offset from end to look for x but don\u0027t jump forward by 100 based on a precomputation of the UTF-16 width of (.{100})?\r\n\r\nThe `$` anchor is a little complicated because it can match either the end or a \\n at the end, and the beginning anchor in your example complicates things as that also impacts what we do, but tweaking your example to be `.{100}x\\z` to get at the heart of your question, the implementation will jump to 101 chars from the end, validate that the next 100 aren\u0027t `\\n`, and validate that the ending character is `x`.",
                                           "updatedAt":  "2022-11-04T16:04:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ntp5D",
                                           "createdAt":  "2022-11-04T16:06:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mikesamuel",
                                           "body":  "\u003e The `$` anchor is a little complicated\r\n\r\nQuite right.  Thanks for reading past that.  And instead of `.` I should have said `[\\s\\S]` (or `[^]` if that\u0027s a thing in your syntax).",
                                           "updatedAt":  "2022-11-04T16:06:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Nu1uE",
                                           "createdAt":  "2022-11-04T20:04:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tjpalmer",
                                           "body":  "On this topic, what\u0027s the right forum for review of proposed semantics for any work in this area? And does it makes sense to conform to [Unicode TR18](https://unicode.org/reports/tr18/) as much as possible? Looks like the [ICU regex implementation](https://unicode-org.github.io/icu/userguide/strings/regexp.html) (which claims TR18 conformance) has [some test data](https://github.com/unicode-org/icu/blob/main/icu4c/source/test/testdata/regextst.txt), which might be handy.\r\n\r\nAnd yeah, for dotnet, requiring an opt-in flag makes lots of sense, for sure.\r\n\r\nAnyway, bringing this up in case someone has the chance to work on this. At my employer, we have some interest in this in the future though not immediate resources to work it. But at whatever time someone gets the chance to work this, it might be nice to have some approximate agreement on appropriate semantics.",
                                           "updatedAt":  "2022-11-04T20:04:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Nu22a",
                                           "createdAt":  "2022-11-04T20:06:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Presumably this issue. As noted, no one on the .NET team itself is intending to work on this any time soon.",
                                           "updatedAt":  "2022-11-04T20:06:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Nu3jx",
                                           "createdAt":  "2022-11-04T20:07:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tjpalmer",
                                           "body":  "Understood. Thanks for the feedback!",
                                           "updatedAt":  "2022-11-04T20:07:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NvE0P",
                                           "createdAt":  "2022-11-04T20:28:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@tjpalmer is pinvoke to PCRE feasible? I\u0027m not sure of the level of support for surrogates in PCRE but [their docs](https://www.pcre.org/current/doc/html/pcre2unicode.html) suggest a flavor of support.",
                                           "updatedAt":  "2022-11-04T20:28:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NvFVN",
                                           "createdAt":  "2022-11-04T20:29:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tjpalmer",
                                           "body":  "We can consider that option as well. Thanks!",
                                           "updatedAt":  "2022-11-04T20:29:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NvG8U",
                                           "createdAt":  "2022-11-04T20:32:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvFAnQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tjpalmer",
                                                                               "createdAt":  "2022-11-04T20:49:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2022-11-05T12:00:18Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Cool if you end up doing that it would be interesting to share back here how it went.",
                                           "updatedAt":  "2022-11-04T20:32:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ymikl",
                                           "createdAt":  "2023-03-28T09:14:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ltrzesniewski",
                                           "body":  "Sorry for the ad, but no need to use pinvoke, I made a PCRE2 wrapper: [PCRE.NET](https://github.com/ltrzesniewski/pcre-net) 🙂 \r\n\r\nI just tried the code from the OP, and replaced `Regex` with `PcreRegex`: it handles surrogate pairs, since `regexLetters.IsMatch` is true, but `regexSurrogates.IsMatch` is false.",
                                           "updatedAt":  "2023-03-28T09:14:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ynyw0",
                                           "createdAt":  "2023-03-28T12:48:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4tK5g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "danmoseley",
                                                                               "createdAt":  "2023-03-28T13:22:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "BurntSushi",
                                           "body":  "@danmoseley \r\n\r\n\u003e It might be interesting to know more about how JS/python/Java (or PCRE and Rust) handle this. Is it user-visible?\r\n\r\nI\u0027m the author of the Rust regex engine and I\u0027d be happy to answer questions. I\u0027m not sure my experience will be terribly relevant here because the Rust regex engine doesn\u0027t consider UTF-16 at all. It works on arbitrary byte sequences that are conventionally valid UTF-8. When Unicode mode is enabled (the `u` flag, the default), then it treats the _codepoint_, not the _code unit_, as the fundamental atom of matching. Now internally, it still does its search one byte at a time, and achieves the \"match one codepoint at a time\" property by constructing UTF-8 automata. (Which I imagine are far more complex than what you\u0027d need for UTF-16.) But you might not need automata at all. It might \"just\" require moving your internal engines from working one code unit at a time to one codepoint at a time. Of course, that is likely very much easier said than done.\r\n\r\nAnyway, I\u0027ll stop there, but I\u0027d be happy to brainstorm.",
                                           "updatedAt":  "2023-03-28T12:48:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Yvstq",
                                           "createdAt":  "2023-03-29T16:06:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BurntSushi",
                                           "body":  "As an addendum to my previous comment, it _looks_ like Java might handle these cases directly, despite I believe having a very similar representation for strings. Just as one example, `𝛅` does _not_ match `\\p{L}` in .NET, but it _does_ in Java. I mention this because whatever implementation strategy Java uses is far more likely to be relevant to .NET than anything the Rust regex crate does.",
                                           "updatedAt":  "2023-03-29T16:07:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZkgM5",
                                           "createdAt":  "2023-04-11T06:13:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cabo",
                                           "body":  "\u003e ```cs\r\n\u003e             var regexSurrogates = new Regex(@\"^\\p{Cs}{2}$\");\r\n\u003e ```\r\n\r\nAny discussion that assumes `\\p{Cs}` has a meaning does not apply to regexps based on Unicode characters.\r\nThese are used in languages with a modern text string type such as Rust, so I don\u0027t think we can learn much from Rust about various dotnet legacy string modes here.\r\n",
                                           "updatedAt":  "2023-04-11T06:13:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ll5dr",
                                           "createdAt":  "2023-09-03T23:24:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "gfody",
                                           "body":  "this bug was the root cause of a discrepancy in the C# version of a function that strips non-alphanumeric characters, eg:\r\n```cs\r\nstring StripNonAlphaNumeric(string s) =\u003e Regex.Replace(s, @\"[^\\p{L}\\p{N}]\", \"\");\r\n```\r\n\r\nfor the input `เสื้อยืด` (thai word for \"t-shirt\") the C# version strips the sara uees resulting in `เสอยด` (thai for the verb \"crowd\" according to google translate) where the other languages (Ruby and Javascript) correctly strip nothing.\r\n\r\nthe non-regex workaround is sort of complicated:\r\n```cs\r\nstring StripNonAlphaNumeric(string s)\r\n{\r\n\tvar result = new List\u003cchar\u003e(s.Length);\r\n\tbool last = false, none = true;\r\n\r\n\tfor (int i = 0; i \u003c s.Length; i++)\r\n\t{\r\n\t\tif (char.IsLetterOrDigit(s, i) || (last \u0026\u0026 char.IsSurrogatePair(s, i - 1)))\r\n\t\t{\r\n\t\t\tresult.Add(s[i]);\r\n\t\t\tlast = true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tlast = false;\r\n\t\t\tnone = false;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn none ? s : new string(result.ToArray());\r\n}\r\n\r\n```",
                                           "updatedAt":  "2023-09-03T23:24:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hJCxN",
                                           "createdAt":  "2025-03-06T10:55:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIza1g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rampaa",
                                                                               "createdAt":  "2025-03-06T15:41:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tats-u",
                                           "body":  ".NET must add a field e.g. `Unicode` representing the Unicode aware mode like JavaScript\u0027s `u` or `v` flag to the `RegexOptions` enum.\n\n```cs\nvar regexLetters = new Regex(@\"^\\p{Lo}$\", RegexOptions.Unicode);\n```\n",
                                           "updatedAt":  "2025-03-06T10:55:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hLw_L",
                                           "createdAt":  "2025-03-06T15:41:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rampaa",
                                           "body":  "A Unicode aware mode would be really great but Microsoft doesn\u0027t seem to be interested at all.",
                                           "updatedAt":  "2025-03-06T15:41:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hPXFP",
                                           "createdAt":  "2025-03-06T23:23:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tats-u",
                                           "body":  "I wonder why Microsoft has rejected or not come up with this idea for more than 5 years.",
                                           "updatedAt":  "2025-03-06T23:23:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hPYya",
                                           "createdAt":  "2025-03-06T23:29:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tats-u",
                                           "body":  "Java: JSR-204 \"Java Specification Request for Unicode Supplementary Character Support\"\n\nhttps://www.oracle.com/technical-resources/articles/javase/supplementary.html\n\nHowever we are too late to do this without a RegexOptions revision in .NET, or it introduces breaking changes.",
                                           "updatedAt":  "2025-03-06T23:29:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hPZdq",
                                           "createdAt":  "2025-03-06T23:31:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tats-u",
                                           "body":  ".NET is shamefully the only CPU-architecture-independent code execution platform that lacks supplementary characters support in regex for Unicode-native character types.",
                                           "updatedAt":  "2025-03-06T23:33:09Z"
                                       }
                                   ],
                         "totalCount":  41
                     },
        "title":  "Regex incorrectly identify surrogate pair unicode category",
        "labels":  [
                       "bug",
                       "area-System.Text.RegularExpressions",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/24381",
        "createdAt":  "2017-12-07T05:35:15Z",
        "number":  24381,
        "author":  "ViktorHofer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCkVBGQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "hmvs",
                                            "createdAt":  "2018-02-14T13:30:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "trir262",
                                            "createdAt":  "2018-03-07T23:34:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ltrzesniewski",
                                            "createdAt":  "2022-05-13T15:19:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vslee",
                                            "createdAt":  "2022-05-16T04:54:13Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TheConstructor",
                                            "createdAt":  "2022-06-29T11:01:15Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2023-11-24T12:32:31Z",
        "body":  "Current popular regex engines like `java.util.regex` or `PCRE` support greedy, lazy and possessive quantifiers. The current .NET regex engine does only support the former two. Though possessive quantifiers are syntactic sugar and can be mimicked with atomic grouping today, consider supporting them as they gained popularity over the last years. \r\n\r\nAbstract:\r\nPossessive quantifiers work the same as greedy quantifiers but without backtracking on the input string. That means that the following pattern `D++[A-Z]+` matches the input string `DDDDE` but not `DDDD`.\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXS1YCA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Fuma9",
                                           "createdAt":  "2022-06-29T11:03:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheConstructor",
                                           "body":  "I personally prefer `abc*+` over `(?\u003eabc*)`, as it allows switching behaviors quicker and brings the behavior-change closer to the affected operation (the single `*` in this case).",
                                           "updatedAt":  "2022-06-29T11:03:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GDGOg",
                                           "createdAt":  "2022-07-05T15:50:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "Even though Regex doesn\u0027t accept that specific notation, you can achieve exactly the same by using Atomic groups, which are supported. As @TheConstructor points out, you could write the example above by doing `(?\u003eD+)[A-Z]+`. Given there hasn\u0027t been a lot of interaction on this issue in the past 5 years, I will go ahead and close it for now until we get more feedback about supporting these quantifier\u0027s notation.",
                                           "updatedAt":  "2022-07-05T15:50:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GDKU5",
                                           "createdAt":  "2022-07-05T16:08:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheConstructor",
                                           "body":  "@joperezr would you accept a PR that tries to translate `x*+` to `(?\u003ex*)`?",
                                           "updatedAt":  "2022-07-05T16:08:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GDSlM",
                                           "createdAt":  "2022-07-05T16:43:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "Our Regex engine at parse time already tries to make groups atomic if possible, so today if you have a pattern like `x*` we are already translating that to instead be `(?\u003ex*)`, since that is much more performant as it doesn\u0027t backtrack. This, however, doesn\u0027t happen if the loop can\u0027t automatically be made atomic, for example, a pattern like `x*\\w` won\u0027t automatically turn the `x` into an atomic group, since that might conflict with the `\\w` as inputs like `xxxx` won\u0027t match that pattern anymore.\r\n\r\n\u003e would you accept a PR that tries to translate x*+ to (?\u003ex*)?\r\n\r\nThis would require some consideration as it would be a breaking change (Today, this pattern will throw an exception at construction time since today we don\u0027t allow nested quantifiers like that unless you use parentheses). I think we should do this only if it is justified by this being a highly used feature, and I don\u0027t think that\u0027s the case. @stephentoub I suppose that the data you have for those millions of patterns are all used in .NET and hence won\u0027t be using this feature, but do we also have some data of non-.NET patterns to see how many of them use possessive quantifiers?",
                                           "updatedAt":  "2022-07-05T16:43:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GS0Mq",
                                           "createdAt":  "2022-07-08T20:28:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e  @stephentoub I suppose that the data you have for those millions of patterns are all used in .NET and hence won\u0027t be using this feature, but do we also have some data of non-.NET patterns to see how many of them use possessive quantifiers?\r\n\r\nRight, the .NET syntax doesn\u0027t support the possessive quantifer syntactic sugar, so none of the patterns in our collection will use them, since they all parse correctly.\r\n\r\nYou could look through the multilingual corpus of regexes in the links from https://github.com/dotnet/runtime/issues/62971 to see how popular possessive quantifiers are there.",
                                           "updatedAt":  "2022-07-08T20:28:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GuU1A",
                                           "createdAt":  "2022-07-17T15:36:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheConstructor",
                                           "body":  "@joperezr\r\n\r\n\u003e This would require some consideration as it would be a breaking change (Today, this pattern will throw an exception at construction time since today we don\u0027t allow nested quantifiers like that unless you use parentheses). I think we should do this only if it is justified by this being a highly used feature, and I don\u0027t think that\u0027s the case. @stephentoub I suppose that the data you have for those millions of patterns are all used in .NET and hence won\u0027t be using this feature, but do we also have some data of non-.NET patterns to see how many of them use possessive quantifiers?\r\n\r\nI put together this short LINQPad-script to get an upper-boundary from the data-set mentioned in #62971:\r\n```cs\r\nasync Task Main()\r\n{\r\n\tvar lines = File.ReadLines(Path.Combine(Path.GetDirectoryName(LINQPad.Util.CurrentQueryPath), \"uniq-regexes-8.json\"));\r\n\tvar count = 0L;\r\n\tvar useCount_IStype_to_nPosts = new Dictionary\u003cstring, long\u003e();\r\n\tvar useCount_registry_to_nModules = new Dictionary\u003cstring, long\u003e();\r\n\tforeach(var line in lines)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\tvar pattern = JsonSerializer.Deserialize\u003cRegPattern\u003e(line);\r\n\t\t\tif (pattern.pattern.Contains(\"++\") || pattern.pattern.Contains(\"?+\") || pattern.pattern.Contains(\"*+\"))\r\n\t\t\t{\r\n\t\t\t\t//pattern.Dump(pattern.pattern, collapseTo: 0);\r\n\t\t\t\tMergeDictionaries(useCount_IStype_to_nPosts, pattern.useCount_IStype_to_nPosts);\r\n\t\t\t\tMergeDictionaries(useCount_registry_to_nModules, pattern.useCount_registry_to_nModules);\r\n\t\t\t\tcount++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(JsonException e)\r\n\t\t{\r\n\t\t\te.Dump(line, collapseTo: 0);\r\n\t\t}\r\n\t}\r\n\tcount.Dump();\r\n\tuseCount_IStype_to_nPosts.Dump(\"useCount_IStype_to_nPosts\");\r\n\tuseCount_registry_to_nModules.Dump(\"useCount_registry_to_nModules\");\r\n}\r\n\r\nrecord RegPattern(string pattern, string[] supportedLangs, string type, Dictionary\u003cstring, long\u003e useCount_IStype_to_nPosts, Dictionary\u003cstring, long\u003e useCount_registry_to_nModules);\r\n\r\nprivate static void MergeDictionaries(IDictionary\u003cstring, long\u003e target, IReadOnlyDictionary\u003cstring, long\u003e source)\r\n{\r\n\tforeach(var (key,value) in source)\r\n\t{\r\n\t\ttarget.TryGetValue(key, out var targetValue);\r\n\t\ttarget[key] = targetValue + value;\r\n\t}\r\n}\r\n```\r\n\r\nIt finds 2088 unique pattern with useCount_IStype_to_nPosts\r\n\r\n| Key | Value |\r\n| :--- | :--- |\r\n| StackOverflowRegexSource | 179 |\r\n| RegExLibRegexSource | 1 |\r\n\r\nand useCount_registry_to_nModules\r\n\r\n| Key | Value |\r\n| :--- | :--- |\r\n| packagist | 889 |\r\n| npm | 5830 |\r\n| cpan | 293 |\r\n| pypi | 159 |\r\n| rubygems | 554 |\r\n| maven | 113 |\r\n| godoc | 146 |\r\n| crates.io | 15 |\r\n\r\nWhat I didn\u0027t realize, but the paper found, is that possessive quantifiers using `+` are supported in Java, PHP, Ruby and Perl, not supported in JavaScript and Go, but worst: the `+` is seemingly ignored in Rust (see [paper](https://web.archive.org/web/20211218134919/https://people.cs.vt.edu/~davisjam/downloads/publications/DavisMichaelCoghlanServantLee-LinguaFranca-ESECFSE19.pdf) page 7 or 449).\r\n\r\nI do realize, that supporting this would change the behaviour of the Regular Expression Engine, but I can hardly see where replacing an exception by an actual implementation would yield to severely broken programs. In the end, why would you have a pattern, that always throws an exception in your program? And why is this exception driving your program? There is of course a certain chance of accidental usage in new source code.\r\n\r\nLastly possessive quantifiers are one of the lesser performance hogs (compared to regular quantifiers, recursive patterns or balancing groups), as they rule out backtracking. Having them offers a more concise way of eliminating backtracking than atomic groups, and possessive quantifiers are (in my opinion) easier to maintain, as the are directly obvious at the respective quantifier.\r\n\r\nI understand, that they are not high up on your priority list, but I would like to have the opportunity to submit a PR into review.",
                                           "updatedAt":  "2022-07-17T15:36:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GujjA",
                                           "createdAt":  "2022-07-17T21:21:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCnKb-A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ViktorHofer",
                                                                               "createdAt":  "2022-07-18T12:14:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I\u0027m not concerned about taking something that fails to parse and making it valid; that is, for example, the case for pretty much every new C# feature. My concern would be if there\u0027s anything that today is valid with one meaning and this would introduce an ambiguity, or if it would lead to any kind of inconsistencies, or if it would cause any meaningful slowdown in the parser. If adding this syntactic sugar doesn\u0027t harm anything existing, I\u0027d personally be ok seeing it added, but it\u0027s not a priority for our team to implement.",
                                           "updatedAt":  "2022-07-17T21:21:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dLT-j",
                                           "createdAt":  "2023-05-25T17:14:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODVY6vA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TheConstructor",
                                                                               "createdAt":  "2024-02-04T17:36:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@stephentoub since it sounds like we\u0027d take a change for this in principle, can we keep this open in case a community members is interested?",
                                           "updatedAt":  "2023-05-25T17:14:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dLVgI",
                                           "createdAt":  "2023-05-25T17:19:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "If it\u0027s doable in non-breaking manner (e.g. something that parses one way today changes tomorrow), sure.",
                                           "updatedAt":  "2023-05-25T17:19:15Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Regex - Support Possessive Quantifiers",
        "labels":  [
                       "enhancement",
                       "area-System.Text.RegularExpressions",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/25598",
        "createdAt":  "2018-03-23T15:39:59Z",
        "number":  25598,
        "author":  "jzabroski",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC97Z4Q==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mmiller678",
                                            "createdAt":  "2018-03-23T16:56:44Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jnm2",
                                            "createdAt":  "2018-03-23T18:15:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jzabroski",
                                            "createdAt":  "2018-05-29T19:16:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "shishirchawla",
                                            "createdAt":  "2019-10-07T18:03:03Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Narvey",
                                            "createdAt":  "2020-11-02T15:58:05Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PieterjanDeClippel",
                                            "createdAt":  "2024-08-30T13:34:09Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "erikweisz29",
                                            "createdAt":  "2024-10-25T07:29:19Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "AlexRadch",
                                            "createdAt":  "2025-01-07T09:18:00Z"
                                        }
                                    ],
                          "totalCount":  8
                      },
        "updatedAt":  "2025-03-06T07:04:53Z",
        "body":  "From [MSDN](https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-options#Multiline):\r\n\r\n\u003e By default, $ matches only the end of the input string. If you specify the RegexOptions.Multiline option, it matches either the newline character (\\n) or the end of the input string. It does not, however, match the carriage return/line feed character combination. To successfully match them, use the subexpression \\r?$ instead of just $.\r\n\r\nThis is by far one of the biggest gotchas with using .NET Regex class.\r\n\r\nI suggest adding a RegexOptions.AnyNewLine which treats $ as matching _both_ Windows\u0027 Environment.NewLine and UNIX\u0027 Environment.NewLine, regardless of the Environment running corefx.\r\n\r\n*Portability concerns*\r\nAccording to Wikipedia, there are a ton of different operating systems, all with different line ending settings. The current implementation hardcodes Unix line-ending style. RegexOptions.AnyNewLine, defined as (?=[\\r\\n]|\\z), would add support for Windows line-ending style.\r\n\r\nThe advise written in the current docs is actually not portable on Unix, which is becoming a more popular option. As it is suggested, \\r?$ will capture one or two lines on Unix, and one on Windows. If you try running Windows assemblies with this hack on Linux, you will change the semantics of programs.\r\n\r\n*Backward compatibility concerns*\r\nFully backward compatible: This RegexOptions enum extension would not be a default, and so it would not break any clients with reasonably written code. The only existing code that might display different behavior would be reflection code that sets every option on RegexOptions enum variable. I really can\u0027t envision anyone doing this on purpose.\r\n\r\nHere is Petr Onderka (@svick)\u0027s summary: \r\n\r\nOS | Line-ending style | Current | Environment.NewLine | AnyNewLine\r\n-- | -- | -- | -- | --\r\nWindows | Windows | ✗ | ✓ | ✓\r\nWindows | Unix | ✓ | ✗ | ✓\r\nUnix | Windows | ✗ | ✗ | ✓\r\nUnix | Unix | ✓ | ✓ | ✓\r\n\r\n## Api Proposal\r\nedit by @ViktorHofer\r\n\r\n```diff\r\nnamespace System.Text.RegularExpressions\r\n{\r\n    [Flags]\r\n    public enum RegexOptions\r\n    {\r\n        None                    = 0x0000,\r\n        IgnoreCase              = 0x0001, // \"i\"\r\n        Multiline               = 0x0002, // \"m\"\r\n        ExplicitCapture         = 0x0004, // \"n\"\r\n        Compiled                = 0x0008, // \"c\"\r\n        Singleline              = 0x0010, // \"s\"\r\n        IgnorePatternWhitespace = 0x0020, // \"x\"\r\n        RightToLeft             = 0x0040, // \"r\"\r\n\r\n#if DEBUG\r\n        Debug                   = 0x0080, // \"d\"\r\n#endif\r\n\r\n        ECMAScript              = 0x0100, // \"e\"\r\n        CultureInvariant        = 0x0200,\r\n+       AnyNewLine              = 0x0400 // Treat \"$\" as (?=[\\r\\n]|\\z)\r\n    }\r\n}\r\n```\r\n\r\n## [API Review Notes](https://github.com/dotnet/corefx/issues/28410#issuecomment-392863409)\r\n\r\n[Video](https://www.youtube.com/watch?v=ZHKLi8qWTCs\u0026t=0h0m0s)\r\n\r\nLooks good. A few comments:\r\n\r\n* ~~We cannot use the proposed value of 128 because it\u0027s already taken (see #if DBG in code)~~ Spec updated so that `AnyNewLine = 0x400` (1024).\r\n* ~~The table looks wrong (Windows on Windows on the Current should work IMHO)~~ The table is correct. The fact this trips up experts just speaks to why this is a profound GOTCHA in the Core SDK.\r\n* ~~May be AcceptAllLineEndings?~~ Some hallway testing I\u0027ve done indicates AnyNewLine is a good name.  Plus, (argument after the final name was chosen) this enumeration will be transliterated into a checkbox on Regular Expression Visualization tools like Regex Hero, so it is preferable to have a concise explanation for the feature to avoid excessive screen space.\r\n\r\n## PR Review Notes\r\nAfter work had started on the approved proposal, @danmosemsft [asked if the scope of this feature should be changed](https://github.com/dotnet/corefx/pull/41195#issuecomment-538600562) to also adjust the meaning `\\Z` anchor.  @jzabroski suggested writing how the end user documentation will look after this change, as good docs will determine if it is a function step improvement in usability and reducing gotchas.\r\n\r\nAlso, during the PR, it seems @shishirchawla also proposed AnyEndZ as a way to use AnyNewLine as an \"Anchor Modifier\", which will alter the meaning of \u0027\\Z\u0027 anchor **in addition to altering the meaning of \u0027$\u0027 anchor**.  The intent of this improvement appears to be to remove all platform-specific language from the [Anchors documentation](https://docs.microsoft.com/en-us/dotnet/standard/base-types/anchors-in-regular-expressions), which seems like a great improvement.\r\n\r\n# AnyNewLine as Anchor Modifier to \\Z and $ Anchors\r\n\r\n| flags | $ is treated as | $ documentation | \\Z is treated as | \\Z documentation |\r\n| ----- | --------------- | ------------------- | ----------------- | -------------------- |\r\n| neither | `(?=\\n\\z\\|\\z)` | The match must occur at the end of the string or before `\\n` at the end of the string. | (Same as `$` with this option.) | (Same as `$` with this option.) |\r\n| `RegexOptions.Multiline` | `(?=\\n\\|\\n\\z\\|\\z)` | The match must occur at the end of the string or before `\\n` anywhere in the string. | `(?=\\n\\z\\|\\z)` | The match must occur at the end of the string or before `\\n` at the end of the string. |\r\n| `RegexOptions.Multiline \\| RegexOptions.AnyNewLine` | `(?=\\r\\n\\|\\r\\|\\n\\|\\r\\n\\z\\|\\r\\z\\|\\n\\z\\|\\z)` | The match must occur at the end of the string or before `\\r\\n`, `\\n` or `\\r` anywhere in the string. | `(?=\\r\\n\\z\\|\\r\\z\\|\\n\\z\\|\\z)` | The match must occur at the end of the string or before `\\r\\n`, `\\n` or `\\r` at the end of the string. |\r\n| `RegexOptions.AnyNewLine` | `(?=\\r\\n\\z\\|\\r\\z\\|\\n\\z\\|\\z)` | The match must occur at the end of the string or before `\\r\\n`, `\\n` or `\\r` at the end of the string. | (Same as `$` with this option.) | (Same as `$` with this option.) |\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOY-0KVw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NTg4NDUzNw==",
                                           "createdAt":  "2018-03-24T12:31:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDg4QQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2018-03-24T13:01:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2018-03-24T16:12:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ViktorHofer",
                                                                               "createdAt":  "2018-03-27T09:55:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "GSPP",
                                                                               "createdAt":  "2018-04-03T15:30:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "neon-sunset",
                                                                               "createdAt":  "2023-08-13T22:36:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  5
                                                         },
                                           "author":  "svick",
                                           "body":  "I don\u0027t like that this would depend on `Environment.NewLine`. Transferring files between different OSes is common, so I think there is a good chance you will need to process files with different line endings than those that are native to your OS. Instead, I think a setting that would match any line ending (independent of the current OS) would be better. It could be called something like `AnyNewLine`.\r\n\r\nHere is a table comparing the options (✓ means processing files with the given line-ending style works well on the given OS, ✗ means it does not):\r\n\r\n| OS | Line-ending style | Current | `EnvironmentNewLine` | `AnyNewLine` |\r\n|:-:|:-:|:-:|:-:|:-:|\r\n| Windows | Windows | ✗ | ✓ | ✓ |\r\n| Windows | Unix | ✓ | ✗ | ✓ |\r\n| Unix | Windows | ✗ | ✗ | ✓ |\r\n| Unix | Unix | ✓ | ✓ | ✓ |",
                                           "updatedAt":  "2018-03-24T12:31:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NTkwMzU2MA==",
                                           "createdAt":  "2018-03-24T16:10:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "Petr, that is exactly what I meant if you looked at how I defined it:\n(?=[\\r\\n|\\z) can match any mix of line endings, even files trashed by mixed\nline endings. AnyNewline is a MUCH better name than what I came up with.\nLove teamwork!\n\nAdding a portable sigil for Environment.NewLine probably isn\u0027t a bad idea,\nbut the only pragmatic way I could think of doing it would be to export all\nRegex sigils and let the consumer of the API reprogram the sigil mapping. I\nthought about this, but felt it was too complicated and also ruin the\ntooling around current .NET regular expressions. Sites like RegexHero make\nwriting Regex so easy that I wanted a solution that would be easy for tools\nto adopt.\n\nThe only gotchas I typically encounter are forgetting to escape a pipe, and\nthen forgetting about how line ending semantics works. Tools help me with\nthe former, but the latter always trips me up.\n\nOn Sat, Mar 24, 2018, 8:32 AM Petr Onderka \u003cnotifications@github.com\u003e wrote:\n\n\u003e I don\u0027t like that this would depend on Environment.NewLine. Transferring\n\u003e files between different OSes is common, so I think there is a good chance\n\u003e you will need to process files with different line endings than those that\n\u003e are native to your OS. Instead, I think a setting that would match any line\n\u003e ending (independent of the current OS) would be better. It could be called\n\u003e something like AnyNewLine.\n\u003e\n\u003e Here is a table comparing the options (✓ means processing files with the\n\u003e given line-ending style works well on the given OS, ✗ means it does not):\n\u003e OS Line-ending style Current EnvironmentNewLine AnyNewLine\n\u003e Windows Windows ✗ ✓ ✓\n\u003e Windows Unix ✓ ✗ ✓\n\u003e Unix Windows ✗ ✗ ✓\n\u003e Unix Unix ✓ ✓ ✓\n\u003e\n\u003e —\n\u003e You are receiving this because you authored the thread.\n\u003e Reply to this email directly, view it on GitHub\n\u003e \u003chttps://github.com/dotnet/corefx/issues/28410#issuecomment-375884537\u003e,\n\u003e or mute the thread\n\u003e \u003chttps://github.com/notifications/unsubscribe-auth/AAbT_WOjuiqujVh1zPVyNau26LElEe-aks5thjzMgaJpZM4S473p\u003e\n\u003e .\n\u003e\n",
                                           "updatedAt":  "2018-03-24T16:10:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NTkwNDE0OA==",
                                           "createdAt":  "2018-03-24T16:15:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "Actually, I see now that in my original description my description of the behavior is inconsistent. Thank you for that wonderful table. I will update the first post with it. ",
                                           "updatedAt":  "2018-03-24T16:15:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NjIxMDgxMg==",
                                           "createdAt":  "2018-03-26T15:38:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAUZ4CA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jnm2",
                                                                               "createdAt":  "2018-03-26T17:51:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "@jnm2 @svick  I updated the original description. Please give feedback.",
                                           "updatedAt":  "2018-03-26T15:38:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NjQ2ODQxNA==",
                                           "createdAt":  "2018-03-27T10:01:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "I like the idea and its cross-platform benefit.\r\n\r\n\u003e I think a setting that would match any line ending\r\n\r\nHow is _any line ending_ defined? The name suggests that it can handle *any* line ending, are there more than Unix and Windows line ending chars? We could probably refine the name.",
                                           "updatedAt":  "2018-03-27T10:01:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NjYxMTgwNQ==",
                                           "createdAt":  "2018-03-27T17:39:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@ViktorHofer \r\n\r\n\u003e How is any line ending defined?\r\n\r\nAccording to [Wikipedia\u0027s summary of the Unicode standard](https://en.wikipedia.org/wiki/Newline#Unicode), there are 8 character sequences that form a line break (7 single characters, including CR and LF, and the sequence CR+LF).\r\n\r\nThough I think those other characters are not widely used, so supporting only either LF and CR+LF (Unix and Windows) or CR, LF and CR+LF (old Mac, Unix and Windows) would be fine, especially if it lead to better performance than fully supporting the Unicode definition of line break.\r\n\r\n@jzabroski\r\n\r\n\u003e (?=[\\r\\n]|\\z)\r\n\r\nI don\u0027t understand this regex, as far as I can tell, it wouldn\u0027t match `\\r\\n`, and so `\\r\\n` would be reported as two line breaks.",
                                           "updatedAt":  "2018-03-27T17:39:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM3NjYzOTQ1Ng==",
                                           "createdAt":  "2018-03-27T19:06:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "I\u0027ll write some test cases with XUnit and use that as a specification. We can then tweak the test cases to come up with a final specification/acceptance criteria. [Fare](https://github.com/moodmosaic/Fare) could also be used to confirm.",
                                           "updatedAt":  "2018-03-27T19:06:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MTgwNzM4MQ==",
                                           "createdAt":  "2018-05-24T18:05:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAXAbMg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2018-05-24T18:45:26Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "potential hackathon candidate if we review the API addition in time.\r\n\r\ncc @karelz ",
                                           "updatedAt":  "2018-05-24T18:05:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Mjg2MzQwOQ==",
                                           "createdAt":  "2018-05-29T17:21:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "[Video](https://www.youtube.com/watch?v=ZHKLi8qWTCs\u0026t=0h0m0s)\n\nLooks good. A few comments:\r\n\r\n* We cannot use the proposed value of 128 because it\u0027s already taken (see `#if DBG` in code)\r\n* The table looks wrong (Windows on Windows on the Current should work IMHO)\r\n* May be `AcceptAllLineEndings`?",
                                           "updatedAt":  "2019-10-04T22:21:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Mjg4NDk3NQ==",
                                           "createdAt":  "2018-05-29T18:25:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAXLyAw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2018-05-29T19:17:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "svick",
                                           "body":  "@terrajobst \r\n\r\n\u003e The table looks wrong (Windows on Windows on the Current should work IMHO)\r\n\r\nI don\u0027t think the table is wrong, see [the documentation](https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-options#Multiline) linked in the top post, where it says that you should use `\\r?$` to match Windows-style line endings in multiline mode.\r\n\r\nYou can also try running code like the following:\r\n\r\n```c#\r\nvar match = Regex.Match(\"foo\\r\\nbar\", \".*$\", RegexOptions.Multiline);\r\n\r\nforeach (char c in match.Value)\r\n    Console.WriteLine($\"{c} (0x{(int)c:X2})\");\r\n```\r\n\r\nFor me, running it on .Net Core 2.1 RTM on Windows 10 prints:\r\n\r\n```\r\nf (0x66)\r\no (0x6F)\r\no (0x6F)\r\n (0x0D)\r\n```\r\n\r\nWhile if this was \"working well\", I would expect to get just the three characters of `\"foo\"` as the match, not `\"foo\\r\"`.",
                                           "updatedAt":  "2018-05-29T18:25:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5MjkwOTg4MQ==",
                                           "createdAt":  "2018-05-29T19:23:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "@terrajobst  I agree with @svick . Intuitively, all his table is saying is that neither $ nor Environment.NewLine is fully portable solution for the two ubiquitous platforms.  AnyNewLine therefore proposes to fill that gap.",
                                           "updatedAt":  "2018-05-29T19:23:05Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5Mjk5NDUxNw==",
                                           "createdAt":  "2018-05-30T00:45:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "@terrajobst \r\n\r\nI\u0027ll update the original post to modify the enum options to be 0x0400 (1024)",
                                           "updatedAt":  "2018-05-30T00:45:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDA4MjIzOA==",
                                           "createdAt":  "2018-06-02T12:01:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Mpdreamz",
                                           "body":  "Taking a stab at this for the Hackaton",
                                           "updatedAt":  "2018-06-02T12:01:59Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDA4MjU1NA==",
                                           "createdAt":  "2018-06-02T12:06:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "Ok, assigned you.",
                                           "updatedAt":  "2018-06-02T12:06:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDA5Mjk1MQ==",
                                           "createdAt":  "2018-06-02T14:52:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAYJNMQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "ViktorHofer",
                                                                               "createdAt":  "2018-06-02T14:57:09Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2018-06-19T20:33:39Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "Mpdreamz",
                                           "body":  "Had some fun this afternoon going through the internals of `System.Text.RegularExpressions`\r\n\r\nI pushed what I have so far here: https://github.com/Mpdreamz/corefx/commit/4c4d6882802feae0a50e19dd18033ab6af648270\r\n\r\nI might pick it up for fun at some point again, feel free to unassign me 😄 ",
                                           "updatedAt":  "2018-06-02T14:52:26Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDM5NDA5MzI3Mg==",
                                           "createdAt":  "2018-06-02T14:57:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ViktorHofer",
                                           "body":  "wow that\u0027s great progress! it\u0027s up to you if you want to continue working on it or pass it on to me / other community members.",
                                           "updatedAt":  "2018-06-02T14:57:03Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMDAwMTEyMQ==",
                                           "createdAt":  "2019-09-10T15:50:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Unassigning for someone else to look. Thanks for the start!",
                                           "updatedAt":  "2019-09-10T15:50:48Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMDY3NTEwOQ==",
                                           "createdAt":  "2019-09-12T05:47:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAwdUdw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2019-09-12T12:44:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2019-09-12T12:44:12Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2019-09-12T12:44:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2019-09-12T12:44:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "shishirchawla",
                                           "body":  "Hi @danmosemsft, I would like to have a go at this. Can you please get this assigned to me. Thanks.",
                                           "updatedAt":  "2019-09-12T05:47:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMDg4NTQ4OA==",
                                           "createdAt":  "2019-09-12T15:43:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAwenvg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2019-09-12T16:15:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@shishirchawla sounds great, go ahead! BTW I sent you a collaborator invite. When you accept LMK and I will assign this formally. ",
                                           "updatedAt":  "2019-09-12T15:43:06Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMDk4NTM2MA==",
                                           "createdAt":  "2019-09-12T20:08:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAwgKgQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2019-09-12T20:42:03Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2019-09-12T20:42:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shishirchawla",
                                                                               "createdAt":  "2019-09-12T21:23:29Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Assigned, it\u0027s all yours @shishirchawla work on any cadence you want and just post here if you have any questions or issues. ",
                                           "updatedAt":  "2019-09-12T20:08:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzMzAwNDg3OQ==",
                                           "createdAt":  "2019-09-19T07:28:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAw8q8g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "watfordgnf",
                                                                               "createdAt":  "2019-09-19T14:57:11Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "shishirchawla",
                                           "body":  "Hi @danmosemsft / @jzabroski  ,\r\n\r\nHeres my PR for the new API - https://github.com/dotnet/corefx/pull/41195 . This is my first PR on the project, so please bare with me. \r\n\r\nLooking forward to your feedback.\r\n\r\nShishir",
                                           "updatedAt":  "2019-09-19T07:28:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUzOTExNzUwNg==",
                                           "createdAt":  "2019-10-07T17:23:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOAylcrQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "shishirchawla",
                                                                               "createdAt":  "2019-10-07T17:58:56Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "svick",
                                                                               "createdAt":  "2019-10-12T15:26:59Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "@danmosemsft @terrajobst @ViktorHofer @svick  It seems that during the process of implementing this feature, @shishirchawla discovered an area to improve the API a tiny bit further.  If you go to the Anchors documentation, there are two anchors, `$` and `\\Z`, which mention Unix-specific `\\n` line ending.  I\u0027ve updated the top post of this issue with the full notes, including @terrajobst API review notes, so that everything is consolidated in one post.\r\n\r\nI like @shishirchawla \u0027s improvement, but I think the final focus should be on how this is communicated in the Docs, such as [https://docs.microsoft.com/en-us/dotnet/standard/base-types/anchors-in-regular-expressions](https://docs.microsoft.com/en-us/dotnet/standard/base-types/anchors-in-regular-expressions) and ensuring full test coverage.",
                                           "updatedAt":  "2019-10-07T18:05:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MjAxNzkxMQ==",
                                           "createdAt":  "2019-10-15T03:17:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@terrajobst could you please give your take on the `\\Z` change? Does this need to go back to review or is it arguably what was intended?",
                                           "updatedAt":  "2019-10-15T03:17:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0MjIwMzEzMQ==",
                                           "createdAt":  "2019-10-15T13:09:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "@danmosemsft  So sorry I\u0027m a foot dragger on this.  Been trying to keep up with my own open source project, life, work, etc.\r\n\r\nRelevant examples / test cases:\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/standard/base-types/anchors-in-regular-expressions#end-of-string-or-line-\r\nhttps://docs.microsoft.com/en-us/dotnet/standard/base-types/anchors-in-regular-expressions#end-of-string-or-before-ending-newline-z\r\nhttps://docs.microsoft.com/en-us/dotnet/standard/base-types/anchors-in-regular-expressions#end-of-string-only-z\r\n\r\nThe examples are a bit idiosyncratic in that they reference `Environment.NewLine`, and it probably isn\u0027t immediately clear to the documentation writer that the example output will change depending on the runtime OS environment.",
                                           "updatedAt":  "2019-10-15T13:09:40Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0NjcxMTM2NA==",
                                           "createdAt":  "2019-10-27T16:34:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "ping @terrajobst ",
                                           "updatedAt":  "2019-10-27T16:34:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0OTU5NDkwMw==",
                                           "createdAt":  "2019-11-04T23:30:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "terrajobst",
                                           "body":  "The name `AnyNewLine` works for me. Unless someone of @dotnet/fxdc disagress, I wouldn\u0027t bring this back to API review. Our feedback was mostly around semantics, and that seems to have been take care of.",
                                           "updatedAt":  "2019-11-04T23:30:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0OTYwMzE0Ng==",
                                           "createdAt":  "2019-11-05T00:04:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA0QTog==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2019-11-05T00:05:52Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@terrajobst The question wasn\u0027t about `AnyNewLine` (that was what was originally approved) but confirming that you expected the new behavior for `\\Z` as well as `$`. I cannot imagine you don\u0027t...",
                                           "updatedAt":  "2019-11-05T00:04:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0OTYwMzc1Ng==",
                                           "createdAt":  "2019-11-05T00:06:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "I still owe you all some sample documentation, I think, too... been stuck on various other projects and _yak shaving_.",
                                           "updatedAt":  "2019-11-05T00:06:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0OTYxNjY2Nw==",
                                           "createdAt":  "2019-11-05T01:01:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOA0QhHQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2019-11-05T01:21:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@jzabroski @shishirchawla , @terrajobst remark is sufficient for me. We can assume `\\Z` is desired as well.\r\n",
                                           "updatedAt":  "2019-11-05T01:01:46Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU0OTYyMTM1Nw==",
                                           "createdAt":  "2019-11-05T01:22:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "@danmosemsft Great - @shishirchawla still needs to update the PR with the review comments.  I do think we want to explicitly cover the test case given by @svick  earlier, as its _exactly_ the scenario that confuses everyone.  My head hurts every time I try to predict the right answer after not looking at this thread for a week.",
                                           "updatedAt":  "2019-11-05T01:22:55Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDU1MjQ1Njk4OQ==",
                                           "createdAt":  "2019-11-11T14:00:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "@danmosemsft @shishirchawla Updated the this Issue Title to reflect reality.",
                                           "updatedAt":  "2019-11-11T14:00:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2Njk1NTQxMA==",
                                           "createdAt":  "2020-07-31T06:33:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I was working to rebase #1449 on master, but it needs partly reimplementing at this point. And I realized there are some omissions, but a larger issue is that adding support in the same way for the other 3-5 kinds of newlines in [TR18#1.6](http://www.unicode.org/reports/tr18/#RL1.6) will make the code unwieldy. Currently `\\n` is already specially treated in 13 places in the interpreter, compiler, and each of those would need an update to recognize the other line endings, lengthening hot code paths, with on top of that the special complication that `\\r\\n` is two characters and should be treated as one.\r\n\r\nI thought about this for some time and realized that we could instead \"lower\" several of these into equivalent primitive components, so that nothing but the parser need know about them. Here is how they would \"lower\", as best I can determine:\r\n\r\n\r\n| flags                                              | ^ lowered to (no capture)                           | $ lowered to (no capture)                              | \\Z lowered to (no capture)                   |\r\n|----------------------------------------------------|-----------------------------------------------------|--------------------------------------------------------|----------------------------------------------|\r\n| neither                                            | `\\A`                                                | `(?=\\z\\|\\n\\z)`                                          | (Same as `$` with neither)                   |\r\n| `RegexOptions.AnyNewLine` (new)                         | `\\A`                                                | `(?=\\r\\n\\z\\|[\\r\\u0085\\u2028\\u2029]?\\z)\\|(?\u003c!\\r)(?=\\n\\z)` | (Same as `$` with `RegexOptions.AnyNewLine`) |\r\n| `RegexOptions.Multiline`                           | `(?\u003c=\\A\\|\\n)`                                        | `(?=\\z\\|\\n)`                                            | (Same as `$` with neither)                   |\r\n| `RegexOptions.Multiline \\| RegexOptions.AnyNewLine` (new) | `(?\u003c=\\A\\|\\r\\n\\|[\\n\\u0085\\u2028\\u2029])\\|(?\u003c=\\r)(?!\\n)` | `(?=\\r\\n\\|[\\r\\u0085\\u2028\\u2029]\\|\\z)\\|(?\u003c!\\r)(?=\\n)`     | (Same as `$` with `RegexOptions.AnyNewLine`) |\r\n\r\n| flags                                               | . lowered to (it captures)  |\r\n|-----------------------------------------------------|-----------------------------|\r\n| neither                                             | `[^\\n]` |\r\n| `RegexOptions.AnyNewLine` (new) | `[^\\n\\r\\u0085\\u2028\\u2029]` |\r\n| `RegexOptions.SingleLine`                           | `.`                         |\r\n| `RegexOptions.SingleLine \\| RegexOptions.AnyNewLine` (new) | `(\\r\\n\\|(?!\\r\\n).)`          |\r\n\r\nThe above encapsulates some special behaviors:\r\n\r\n*  `$` and `.` (assuming AnyNewLine) must be satisfied only once in `\\r\\n`, but otherwise everything else is fair game - eg., `\\r\\r` is two matches.\r\n*  `$` and `^` are asymmetrical. `$` is satisfied in \"abc\\n\" twice - both at the ` \\n` and the end (same as PCRE, but not Python) whereas `^` is only satisfied in \"\\nabc\" one time. (Of course, if you\u0027re not matching `\\n` then you\u0027ll never notice.). This is the same with `\\Z` - it will be satisfied twice in \"abc\\n\".\r\n\r\nTR18#1.6 also recommends a `\\R` to match any newline. That\u0027s a separate proposal, but it could be easily accommodated in the parser by lowering it:\r\n\r\n| flags | \\R (if added) lowered to    (it captures)        |\r\n|-------|--------------------------------------------------|\r\n| any   | `\\r\\n\\|(?!\\r\\n)[\\n\\r\\u0085\\u2028\\u2029]`        |\r\n\r\nNote this is not the same as the example pattern in TR18.\r\n\r\nAll the above excludes `\\v` and `\\f`: it\u0027s clear from TR18 they MAY match, but it\u0027s not clear whether they MUST. The neat thing about lowering is that if we want them, it\u0027s just a matter of adding them next to `\\u0085` etc in the parser and not in 13 other places.\r\n\r\nOf course, for efficiency reasons we probably want to leave today\u0027s special knowledge of line endings in the runners, because we probably can\u0027t currently evaluate `(?=\\z|\\n\\z)` as efficiently as a simple length and single character check. But the new AnyNewLine behavior could lower, as it\u0027s probably OK if it\u0027s not quite as fast. The performance without AnyNewLine would not be affected. Later, we could look at optimizing, since for example `(?=\\r\\n|[\\r\\u0085\\u2028\\u2029]|\\z)|(?\u003c!\\r)(?=\\n)` is not going to be an efficient way to match `\\n`.\r\n\r\nIn short, I think we should start again and this time only touch the parser.\r\n\r\nThoughts -- @stephentoub @jzabroski ?",
                                           "updatedAt":  "2023-06-18T03:12:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NzA1MDEwOA==",
                                           "createdAt":  "2020-07-31T10:21:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "svick",
                                           "body":  "@danmosemsft \r\n\r\n\u003e  But the new AnyNewLine behavior could lower, as it\u0027s probably OK if it\u0027s not quite as fast. […] Later, we could look at optimizing […]\r\n\r\nI think that the speed of `AnyNewLine` should be on par with the current behavior, at least as long as we\u0027re talking about the common case of dealing only with `\\n` and `\\r\\n`. Would it be reasonable to somehow detect the presence of the less common line endings and only switch to the less efficient approach if they are found?\r\n\r\nOr are you saying that the performance of `AnyNewLine` with your proposed implementation *could* be on par with the current behavior, but it\u0027s not necessary for the initial implementation to get there?",
                                           "updatedAt":  "2020-07-31T10:21:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NzA1NDA1Mg==",
                                           "createdAt":  "2020-07-31T10:31:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e that the performance of AnyNewLine with your proposed implementation could be on par with the current behavior, but it\u0027s not necessary for the initial implementation to get there?\r\n\r\nThis, although it\u0027s never going to be possible to be as good given there\u0027s necessarily more tests and branches.",
                                           "updatedAt":  "2020-07-31T10:31:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY2NzE2NjY3NA==",
                                           "createdAt":  "2020-07-31T15:02:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "@danmosemsft Thanks for putting this together. This issue has been on my mind for some time, but life keeps getting in the way!\r\n\r\nThe main reason I did not put this on my plate is precisely the risk of causing a regression in behavior that you highlight by the thirteen different places that need to be considered.  Perhaps I am too detail-oriented, but as we are nearing .NET Core 5, my thought was, \"Maybe this should wait for the next minor version?\"\r\n\r\nIn terms of your design proposal, I agree that making the code long-term easier to understand and maintain is a big win.  Having the parser handle the phrase as a token makes sense, and also cuts down the risk of a major regression due to unforeseen feature combinations.  It would also be easier to lift back up to the interpreter / compiler the token.  Plus, you could have a compiler that analyzes the parse tree to determine if it is an \"extended Regular Expression\" or actual \"regular language Regular Expression.\"  Similar to how .NET Expression tree API allows preferInterpretation.  In most cases, it would be convenient to have the high-level language services just transparently do what\u0027s optimal.",
                                           "updatedAt":  "2020-07-31T15:02:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMjMyOTg1NQ==",
                                           "createdAt":  "2020-10-01T18:49:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "@stephentoub  For .NET vNext, can you comment on @danmosemsft ideas to lift this: https://github.com/dotnet/runtime/issues/25598#issuecomment-666955410",
                                           "updatedAt":  "2020-10-01T18:49:50Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMjk1ODA0OQ==",
                                           "createdAt":  "2020-10-02T21:06:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I like the simplicity and isolated nature of that approach, and I think it\u0027s reasonable to start, at least for a prototype, and see a) whether it\u0027s functionally correct with all the various new tests we throw at it, and b) what the performance hit is without further optimization.  Assuming it\u0027s functionally sound and the perf hit is reasonable, it sounds like a good way to go for now; if in the future the perf of it became more of an issue, we could address that in a variety of ways, either by adding more optimizations for the patterns it employs, or by switching away from doing it purely in the parser as a lowering step.",
                                           "updatedAt":  "2020-10-02T21:06:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMjk2NDE5NA==",
                                           "createdAt":  "2020-10-02T21:23:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Now we just need a volunteer...",
                                           "updatedAt":  "2020-10-02T21:23:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMjI4MDk2NQ==",
                                           "createdAt":  "2020-10-19T16:25:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "(Just got back from vacation.) I\u0027m interested in doing it, and think I almost got my two open source projects in a state where they\u0027re ready for v5.  Anyway, I think it would be a lot of fun to do - if I use that word. :)",
                                           "updatedAt":  "2020-10-19T16:25:04Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxMjMxODM0OQ==",
                                           "createdAt":  "2020-10-19T17:31:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBT96ng==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2020-10-19T20:04:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Great, I assigned you @jzabroski . As @stephentoub mentions, you\u0027ll probably want to start by prototyping and getting perf measurements. Thanks!",
                                           "updatedAt":  "2020-10-19T17:31:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_7zgJ",
                                           "createdAt":  "2022-03-18T17:38:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@jzabroski I cleared your assignment. ",
                                           "updatedAt":  "2022-03-18T17:38:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_75AN",
                                           "createdAt":  "2022-03-18T18:07:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jzabroski",
                                           "body":  "@danmoseley Thanks. Sorry about not finishing this. I caught Covid shortly after you assigned this and my time for additional work outside my normal hours diminished (long recovery).",
                                           "updatedAt":  "2022-03-18T18:07:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4_7_he",
                                           "createdAt":  "2022-03-18T18:32:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCTsG3w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jzabroski",
                                                                               "createdAt":  "2022-03-18T19:28:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "no problem! sorry to hear about that 😿 you\u0027re always welcome to contribute here or to anything else in the repo.",
                                           "updatedAt":  "2022-03-18T18:32:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fHy7G",
                                           "createdAt":  "2023-06-17T22:49:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Returning to this briefly, I wanted to point out that the behavior described in the top post is not what we want. It says that \"The match must occur at the end of the string or before \\r\\n, \\n or \\r at the end of the string.\"\r\n\r\nThat is not desirable, because `\\r\\n` is logically a single line break. This how it is treated by all text editors, that is what is intended when code (usually on Windows) writes it. Also, the Unicode regex standard [TR18](https://www.unicode.org/reports/tr18/#RL1.6) explicitly indicates that they go together indivisibly. And it is the behavior of PCRE, Perl, Java etc when you use \\R.\r\n\r\nThat\u0027s why in my table above, I have $ equivalent to (effectively) `(?=\\r\\n\\z|\\r?\\z)|(?\u003c!\\r)(?=\\n\\z)` (in non multiline) and not `(?=\\r\\n\\z|\\r\\z|\\n\\z|\\z)` as in the topmost post.",
                                           "updatedAt":  "2023-06-17T22:49:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5fIPfN",
                                           "createdAt":  "2023-06-18T06:54:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@stephentoub I hacked up what lowering might look like -- see https://github.com/dotnet/runtime/compare/main...danmoseley:runtime:anynewline?expand=1#diff-548465bb4dbdd05024f0676c944e3c2b89677c48257bf28dfb0afccde31ded0aR19\r\n\r\nI wrapped the pattern in an iterator with the idea that it could show \"real\" locations in the pattern in error messages, but not sure whether it\u0027s worth that abstraction.\r\n\r\nDo you think this is a worthwhile direction?\n\nEdit: The approach makes those handful of tests pass. I\u0027d need to do more tests/inspection to see whether there\u0027s other positional state that would need correction on inserting into the pattern like this, and update that too.\n\nI suspect perf with this lowering approach may be more of a worry than the parser. Once the flag exists, folks may update existing patterns to use it, which may then be a perf trap if they are \"hot\". Possibly adding \\R would be less of a problem in this respect as it would require modifying the pattern, so less \"easy\", and by putting \\R in a non capturing group or an assertion as appropriate you can achieve some of the same things as AnyNewLine albeit potentially in a clumsy way (but a standard way).\n\nSo a possible approach might be to implement \\R for .NET 8 then at a future point add AnyNewLine but properly, as it\u0027s own node type that the engines accommodate.\n\n(In this model \\R would match any new line out of the gate, but that\u0027s the same as PCRE: by default in PCRE, . $ \\Z recognize only \\n but \\R recognizes all newline flavors.)",
                                           "updatedAt":  "2023-06-18T12:20:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j7NPu",
                                           "createdAt":  "2023-08-13T21:19:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I didn\u0027t like the parser approach -- it\u0027s clumsy and will run slow.\r\nI\u0027m working on supporting this properly, but in the generator only -- that way we can do it efficiently plus avoid adding any runtime cost for the regular case.\r\n\r\nworking in  https://github.com/dotnet/runtime/compare/main...danmoseley:anynewline2?expand=1",
                                           "updatedAt":  "2023-08-13T21:19:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j7NcP",
                                           "createdAt":  "2023-08-13T21:22:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I\u0027m working on supporting this properly, but in the generator only\r\n\r\nYou mean someone else would add it for the other engines? ",
                                           "updatedAt":  "2023-08-13T21:22:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j7Pfr",
                                           "createdAt":  "2023-08-13T22:05:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Potentially, in future, with care to avoid impacting perf in existing cases. As AnyNewLine would be new, I think it\u0027s OK if only the new engine supports it (meaning it will only work for static patterns) initially.\n\nJust checking for more than \\n is easy, the complexity is dealing with \\r\\n atomically",
                                           "updatedAt":  "2023-08-13T22:05:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j7QlQ",
                                           "createdAt":  "2023-08-13T22:21:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "What are your thoughts, would it be acceptable to only support for static patterns (generator) ",
                                           "updatedAt":  "2023-08-13T22:21:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j7QpX",
                                           "createdAt":  "2023-08-13T22:23:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDg5XQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2023-08-13T22:45:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I think it\u0027s OK if only the new engine supports it (meaning it will only work for static patterns)\r\n\r\nI\u0027m not a fan of that. At a minimum, when we support it, it should be in all but the NonBacktracking engine, but ideally all of them. There are currently zero differences in supported functionality between the interpreter, compiler, and source generator; I\u0027m not excited to add any. Plus, there are cases where the source generator will fall back to the other engines, eg case-insensitive back references, so whether this new option would work would be very confusing. ",
                                           "updatedAt":  "2023-08-13T22:38:34Z"
                                       }
                                   ],
                         "totalCount":  51
                     },
        "title":  "Regex Match, Split and Matches should support RegexOptions.AnyNewLine as (?=\\r\\z|\\n\\z|\\r\\n\\z|\\z)",
        "labels":  [
                       "api-approved",
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/29174",
        "createdAt":  "2019-04-05T14:16:43Z",
        "number":  29174,
        "author":  "yetanotherchris",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-01T21:39:51Z",
        "body":  "I have the following C# regular expression\r\n\r\n```\r\nvar regex = new Regex(@\"^*_.$\");\r\nstring input = \"THIS_LINE_HAS_MANY_UNDERSCORES_L\";\r\n\r\nstring result = regex.Match(input).Groups[0].Value;\r\nConsole.WriteLine(result);\r\n```\r\n\r\nEven though to the best of my knowledge the regex is invalid (* has no element to match on), it outputs the following (which is really just the `_.$` part):\r\n\r\n```\r\n_L\r\n```\r\n\r\nIs `^` treated as a character class by the .NET Regex engine?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTXDMnQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDQ4MDM0OTUxNQ==",
                                           "createdAt":  "2019-04-05T17:02:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Other engines seem to give \"The preceding token is not quantifiable\" which seems appropriate. The question is whether this is worth fixing (given cost/risk of doing so, and potential to break someone who would be surprised)",
                                           "updatedAt":  "2019-04-05T17:02:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzQ0NTc2OQ==",
                                           "createdAt":  "2019-09-03T12:55:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Bartolomeus-649",
                                           "body":  "@danmosemsft  it\u0027a bug!   fix it!\r\n* make it a compile error\r\n* for existing code that has a quantifier for non-quantifiable tokens, then just silently remove/ignore the quantifier (which I guess is what you already do today?).",
                                           "updatedAt":  "2019-09-03T12:55:24Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDUyNzU0NDc0NQ==",
                                           "createdAt":  "2019-09-03T16:53:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e @danmosemsft it\u0027a bug! fix it!\r\n\r\nWe cannot fix all bugs. We allocate engineering time based on considerations like customer impact, cost of fix and so forth. This has presumably been an issue for a long time and so the impact seems low. That being said, we\u0027d likely accept a PR for it if you\u0027re offering to make one. It would need tests and also care to make sure the compiled and interpreted paths behave the same (I\u0027m guessing this is easy because it\u0027s at the parsing stage)\r\n\r\nIt seems to me that if other engines fail on this, and it\u0027s very unlikely anyone is relying on it, we could make it an error. @ViktorHofer as area expert, thoughts?",
                                           "updatedAt":  "2019-09-03T16:53:07Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY4NzkwODk1Nw==",
                                           "createdAt":  "2020-09-06T21:40:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "If this changes, please let me know and I\u0027ll update the Roslyn side :-)",
                                           "updatedAt":  "2020-09-06T21:40:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NbFat",
                                           "createdAt":  "2022-11-01T18:34:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2022-11-01T18:34:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NcMyd",
                                           "createdAt":  "2022-11-01T21:39:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "would we take a PR to error on this syntax? if so, seems worth keeping open for that.\r\n\r\neven if not, perhaps we should add a test to ensure the behavior doesn\u0027t change. at least it\u0027s the same for all engines (makes sense as it\u0027s the parser I guess)\r\n```c#\r\n    static void Main()\r\n    {\r\n        string input = \"^abc_d\";\r\n        Console.WriteLine(Regex.Match(input, @\"^*_.$\").Groups[0].Value);\r\n        Console.WriteLine(Regex.Match(input, @\"^*_.$\", RegexOptions.Compiled).Groups[0].Value);\r\n        Console.WriteLine(Regex.Match(input, @\"^*_.$\", RegexOptions.NonBacktracking).Groups[0].Value);\r\n        Console.WriteLine(GeneratedRegex().Match(input).Groups[0].Value);\r\n    }\r\n\r\n    [GeneratedRegex(@\"^*_.$\")]\r\n    private static partial Regex GeneratedRegex();\r\n```\r\n```\r\n_d\r\n_d\r\n_d\r\n_d\r\n```",
                                           "updatedAt":  "2022-11-01T21:39:45Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Regex should fail to parse \"^*\"",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43314",
        "createdAt":  "2020-10-12T17:23:26Z",
        "number":  43314,
        "author":  "dlclark",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBqHviA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "mstoykov",
                                            "createdAt":  "2020-11-17T09:13:09Z"
                                        },
                                        {
                                            "content":  "EYES",
                                            "user":  "paulomorgado",
                                            "createdAt":  "2021-05-08T23:11:03Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-01-09T15:02:40Z",
        "body":  "### Description\r\n\r\nExample pattern: `(?:(?:0?)+?(?:a?)+?)?`\r\nExample Input: `0a`\r\nShould return 2 matches: index 0, length 2; index 2, length 0.\r\nActually returns: infinite matches: index 0, length 2; index 1, length 1; index 1, length 1...etc\r\n\r\n### Other information\r\nThe first match seems to work fine.  The second match doesn\u0027t.  \r\n\r\nI did some digging--it may not be helpful, but figured I\u0027d drop my notes in here.  It appears that the `Lazybranchmark` operation pushes some data to regex stack assuming that a backtrace will happen.  However, in this example the backtrace doesn\u0027t happen and the stack is left in a bad state with the extra item.  So by the time `Capturemark` tries to build the match for Group 0 from the stack it has the wrong value and builds a match based on bad data.  This causes our match to appear to move backwards in the string and get stuck with infinite matches.\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOx8eYg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzI0ODEzNA==",
                                           "createdAt":  "2020-10-12T17:23:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @pgovind, @jeffhandley\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-12T17:23:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzI1OTc5OA==",
                                           "createdAt":  "2020-10-12T17:46:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Reproes on 3.1 and on .NET Framework 4.8: not a regression.",
                                           "updatedAt":  "2020-10-12T17:46:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzI4MzQ1NQ==",
                                           "createdAt":  "2020-10-12T18:38:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "am11",
                                           "body":  "Repros in 5.0 too, this program does not return:\r\n\r\n```c#\r\nusing System;\r\nusing System.Text.RegularExpressions;\r\nstatic class Program \r\n{\r\n    static void Main() =\u003e Console.WriteLine(\r\n        new Regex(\"(?:(?:0?)+?(?:a?)+?)?\").Matches(\"0a\").Count);\r\n}\r\n```",
                                           "updatedAt":  "2020-10-12T18:38:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNzI4NDI1OQ==",
                                           "createdAt":  "2020-10-12T18:40:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBTOHKw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "am11",
                                                                               "createdAt":  "2020-10-12T18:42:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@am11 correct - I should have been clearer - was mainly checking this wasn\u0027t urgent, as it might be if this was a break relative to 3.1.",
                                           "updatedAt":  "2020-10-12T18:40:51Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNTUwMDk2Mg==",
                                           "createdAt":  "2021-05-08T20:30:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Here\u0027s another scenario that was reported by @paulomorgado that leads to an infinite loop (ostensibly):\r\n\r\n```csharp\r\nRegex.Match(\r\n    \"RuntimeHelpers.ExecuteCodeWithGuaranteedCleanup(System.Runtime.CompilerServices.RuntimeHelpers.TryCode,System.Runtime.CompilerServices.RuntimeHelpers.CleanupCode,System.Object)\",\r\n    @\"(?\u003c=\\()((?\u003ca\u003e\\w+(\\.\\w+)*)(,(?\u003ca\u003e\\w+(\\.\\w+)*)*)?)(?=\\))\",\r\n    RegexOptions.IgnoreCase)\r\n```\r\n\r\nThis was repro\u0027d using:\r\n\r\n* .NET Framework 4.8\r\n* .NET Core 3.1.14\r\n* .NET 5.0.5\r\n* .NET 6.0.0-preview.3.21201.13\r\n* LINQPad\r\n* PowerShell 7.1\r\n",
                                           "updatedAt":  "2021-05-08T20:30:27Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgzNjk5NTM5NQ==",
                                           "createdAt":  "2021-05-10T17:18:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Since it\u0027s possible to write regexes that take arbitrary amounts of time (at least with our NFA based engine) in my mind a \"hang\" is interesting if it\u0027s a regression from a previous release, and/or the pattern \"should\" not involve pathological backtracking.\r\n\r\nIn the case immediately above, I expect there\u0027s substantial backtracking going on, because of the nested `*`. The first one may just be a bug.\r\n\r\n@veanes thoughts about the performance of the regex above in your engine?",
                                           "updatedAt":  "2021-05-10T17:18:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc400mP-",
                                           "createdAt":  "2021-07-25T13:37:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GSPP",
                                           "body":  "An infinite loop is one thing but there also is a case in the opening post that generates infinite matches. That must be a bug.",
                                           "updatedAt":  "2021-07-25T13:37:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc400ylm",
                                           "createdAt":  "2021-07-25T20:30:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "veanes",
                                           "body":  "In **DFA** mode in feature/regexsrm:\r\n\r\npattern: \"\"((?:0*)+?(?:.*)+?)?\"\"\r\ninput:  \"0a\"\r\nreturns 2 matches: index 0, length 2; index 2, length 0.\r\n\r\npattern: \"(?:(?:0?)+?(?:a?)+?)?\"\r\ninput:  \"0a\"\r\nreturns 2 matches: index 0, length 2; index 2, length 0.\r\n\r\nregarding the regex `@\"(?\u003c=\\()((?\u003ca\u003e\\w+(\\.\\w+)*)(,(?\u003ca\u003e\\w+(\\.\\w+)*)*)?)(?=\\))\"`\r\nDFA mode does not support positive lookbehind (?\u003c= ...) \r\nand it does not support positive lookahead (?= ...) (**as of now**)\r\n\r\n\r\n",
                                           "updatedAt":  "2021-07-26T00:19:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc47Hx5i",
                                           "createdAt":  "2021-12-12T13:05:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "With the rewritten RegexCompiler in .NET 7, this no longer repros for either RegexOptions.Compiled or RegexGenerator.  It still repros for the interpreter.",
                                           "updatedAt":  "2021-12-12T13:05:50Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Regex pattern returns infinite matches",
        "labels":  [
                       "bug",
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43771",
        "createdAt":  "2020-10-23T15:18:25Z",
        "number":  43771,
        "author":  "KalleOlaviNiemitalo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-09T15:02:39Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\r\n\r\n### Description\r\n\r\nThe effect of `RegexOptions.ECMAScript` deviates from ECMA-262 if the regular expression contains a backreference to a capturing group that starts after a named group. ECMA-262 regular expressions consider named groups as possible targets for numbered backreferences, but .NET regular expressions don\u0027t, even when `RegexOptions.ECMAScript` is specified.\r\n\r\nFor example, run in PowerShell:\r\n\r\n```PowerShell\r\n[System.Text.RegularExpressions.Regex]::IsMatch(\"all\", \"^(?\u003clead\u003ea)(.)\\1$\", \"ECMAScript\")\r\n```\r\n\r\nAnd run JavaScript in a Web browser:\r\n\r\n```JavaScript\r\n\"all\".match(/^(?\u003clead\u003ea)(.)\\1$/)\r\n```\r\n\r\n* According to [ECMA-262 section 21.2.2.1](http://www.ecma-international.org/ecma-262/11.0/index.html#sec-notation), the opening parenthesis of `(?\u003clead\u003ea)` is a _left-capturing parenthesis_ because `?\u003clead\u003e` is a _GroupSpecifier_. The opening parenthesis of `(.)` is another left-capturing parenthesis. Then, `\\1` refers to `(?\u003clead\u003ea)`, so the whole regular expression does not match the string `all`, but would match `ala`.\r\n* In .NET, `\\1` instead refers to `(.)`, so the whole regular expression matches `all` and does not match `ala`.\r\n\r\nI expect that `RegexOptions.ECMAScript` should count groups the same way as ECMA-262, at least for backreferences even if not for the [GroupCollection.Item[Int32] property](https://docs.microsoft.com/dotnet/api/system.text.regularexpressions.groupcollection.item?view=netstandard-2.0#System_Text_RegularExpressions_GroupCollection_Item_System_Int32_).\r\n\r\n### Configuration\r\n\r\nPowerShell 7.1.0-rc.1 using .NET 5.0.0-rc.1.20451.14 on Microsoft Windows \\[Version 10.0.19042.572\\] x64.\r\n\r\n### Regression?\r\n\r\nNot a regression; .NET 5.0.0-rc.1.20451.14 behaves the same as .NET Framework 4.8 and .NET Framework 2.0.\r\n\r\n### Other information\r\n\r\nBecause correcting this would be a breaking change in .NET Runtime, you may want to document the deviation in \u003chttps://docs.microsoft.com/dotnet/standard/base-types/regular-expression-options#ecmascript-matching-behavior\u003e instead.\r\n\r\nFound while trying to validate Windows Terminal key bindings against the provided schema: \u003chttps://github.com/microsoft/terminal/blob/327ddd702307952c315b07fc7a815d56fd68f7ba/doc/cascadia/profiles.schema.json#L7\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONirQHA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNTQwNjg3Nw==",
                                           "createdAt":  "2020-10-23T15:18:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @pgovind, @jeffhandley\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-23T15:18:35Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2OTQ0MDQ3Mw==",
                                           "createdAt":  "2021-01-28T22:26:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pgovind",
                                           "body":  "Marking this as a bug for now. IIRC, support for the `ECMAScript` option is not 100% complete. That being said, I haven\u0027t investigated where/how to fix this yet. ",
                                           "updatedAt":  "2021-01-28T22:26:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40nbtP",
                                           "createdAt":  "2021-07-19T18:08:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "KalleOlaviNiemitalo",
                                           "body":  "It seems \u003chttps://github.com/microsoft/terminal/pull/9783\u003e replaced the numbered backreferences with named backreferences in the Windows Terminal settings JSON schema, so this issue no longer affects the validation of those files.",
                                           "updatedAt":  "2021-07-19T18:08:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42KtAc",
                                           "createdAt":  "2021-08-30T23:25:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Not sure that anyone else has reported this: there may not be sufficient reason to make a breaking change.",
                                           "updatedAt":  "2021-08-30T23:25:02Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Regex backreference does not count named groups even with RegexOptions.ECMAScript, but ECMA-262 does",
        "labels":  [
                       "bug",
                       "area-System.Text.RegularExpressions",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53316",
        "createdAt":  "2021-05-26T18:46:19Z",
        "number":  53316,
        "author":  "rstm-sf",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-06T11:15:11Z",
        "body":  "### Is your feature request related to a problem? Please describe.\r\nNot so long ago there was an [issue](https://github.com/dotnet/aspnetcore/issues/16904) where it was told about `RegularExpressionAttribute` problems. This eventually led to a [clarification in the documentation](https://github.com/dotnet/AspNetCore.Docs/pull/15984).\r\n\r\n(By the way, it ended up in the wrong section. Therefore, in the documentation, we see it only for a version below `aspnetcore-3.0`)\r\n\r\nBut, ECMAScript 2015 does support language elements such as the Unicode category or block elements `\\p` and `\\P`. Now we have to write workarounds. See this [SO-answer](https://stackoverflow.com/a/280762).\r\n\r\n(If I understand correctly, this is now supported by all browsers in [this](https://kangax.github.io/compat-table/es6/#test-RegExp_y_and_u_flags) table, except Konq 4.14 and IE 11)\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoSRGbw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTEyNTc2NQ==",
                                           "createdAt":  "2021-05-26T21:18:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-05-26T21:18:23Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0OTE5MDU0Ng==",
                                           "createdAt":  "2021-05-26T23:40:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @pgovind\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Is your feature request related to a problem? Please describe.\r\nNot so long ago there was an [issue](https://github.com/dotnet/aspnetcore/issues/16904) where it was told about `RegularExpressionAttribute` problems. This eventually led to a [clarification in the documentation](https://github.com/dotnet/AspNetCore.Docs/pull/15984).\r\n\r\n(By the way, it ended up in the wrong section. Therefore, in the documentation, we see it only for a version below `aspnetcore-3.0`)\r\n\r\nBut, ECMAScript 2015 does support language elements such as the Unicode category or block elements `\\p` and `\\P`. Now we have to write workarounds. See this [SO-answer](https://stackoverflow.com/a/280762).\r\n\r\n(If I understand correctly, this is now supported by all browsers in [this](https://kangax.github.io/compat-table/es6/#test-RegExp_y_and_u_flags) table)\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erstm-sf\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-05-26T23:40:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc40q06d",
                                           "createdAt":  "2021-07-20T19:32:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pgovind",
                                           "body":  "So the ECMAScript option in S.T.RegEx is not complete IIRC. I\u0027ll investigate this early in the .NET 7 release to see what we can do here",
                                           "updatedAt":  "2021-07-20T19:32:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5NbHv3",
                                           "createdAt":  "2022-11-01T18:42:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Due to lack of recent activity, this issue has been marked as a candidate for backlog cleanup.  It will be closed if no further activity occurs within 14 more days. Any new comment (by anyone, not necessarily the author) will undo this process.\n\nThis process is part of our [issue cleanup automation](https://github.com/dotnet/runtime/blob/main/docs/issue-cleanup.md).",
                                           "updatedAt":  "2022-11-01T18:42:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5N2Fhi",
                                           "createdAt":  "2022-11-07T18:33:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rstm-sf",
                                           "body":  "Hello, what do you think about this?",
                                           "updatedAt":  "2022-11-07T18:33:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Obpsq",
                                           "createdAt":  "2022-11-15T21:14:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "I think the proposal es reasonable, but this is not a priority currently for .NET 8. We marked it as a cleanup candidate mostly because there didn\u0027t seem to be enough interest in adding this support based on the activity here, but we can keep it open for longer to see if more people want this. In the meantime, we can also mark this as help-wanted so that interested parties can contribute a design and implementation for this.",
                                           "updatedAt":  "2022-11-15T21:14:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6C2dCA",
                                           "createdAt":  "2024-06-27T17:52:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rstm-sf",
                                           "body":  "Look likes similar https://github.com/dotnet/runtime/issues/16922",
                                           "updatedAt":  "2024-06-27T17:52:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hJEZv",
                                           "createdAt":  "2025-03-06T10:58:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tats-u",
                                           "body":  "We need another field of the `RegexOptions` enum to prevent breaking changes. e.g. `RegexOptions.ESUnicode` or  `RegexOptions.ESUnicodeSets`",
                                           "updatedAt":  "2025-03-06T11:15:11Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Consider supports the unicode-aware regular expressions in ECMAScript 2015",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/57038",
        "createdAt":  "2021-08-08T02:44:08Z",
        "number":  57038,
        "author":  "TheAstrologic",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC_uu-w==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Dubzer",
                                            "createdAt":  "2024-05-14T22:16:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "maxkagamine",
                                            "createdAt":  "2024-07-31T01:52:29Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tats-u",
                                            "createdAt":  "2025-03-05T13:44:57Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2021-08-24T06:46:33Z",
        "body":  "I noticed in .NET, there seems to be no support for the regex scripts for Kanji.  There\u0027s \\p{IsCJKUnifiedIdeographs}, but that will also find Chinese and Korean characters, and not Kanji specifically. I noticed other versions use \"Han\" - which includes Chinese characters and Kanji.  I don\u0027t know if there is a difference between Kanji and Chinese characters, but I do believe there\u0027s simplified Chinese, and I do feel if there are distinctions to be made, then there are distinctions to be reflected within the \\p scripts.\r\n\r\nSorry if I didn\u0027t submit this in the right spot, I got sick of trying to match the criteria of other formats and settled with this one.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONecdyQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc41VI7j",
                                           "createdAt":  "2021-08-08T02:44:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-08-08T02:44:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41VJme",
                                           "createdAt":  "2021-08-08T03:23:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nI noticed in .NET, there seems to be no support for the regex scripts for Kanji.  There\u0027s \\p{IsCJKUnifiedIdeographs}, but that will also find Chinese and Korean characters, and not Kanji specifically. I noticed other versions use \"Han\" - which includes Chinese characters and Kanji.  I don\u0027t know if there is a difference between Kanji and Chinese characters, but I do believe there\u0027s simplified Chinese, and I do feel if there are distinctions to be made, then there are distinctions to be reflected within the \\p scripts.\r\n\r\nSorry if I didn\u0027t submit this in the right spot, I got sick of trying to match the criteria of other formats and settled with this one.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eTheAstrologic\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-08-08T03:23:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41VJ4p",
                                           "createdAt":  "2021-08-08T03:42:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e I noticed other versions use \"Han\"\r\n\r\n@TheAstrologic could you point to docs on another engine that uses Han, and ideally what block(s) it maps to?\r\n\r\neg., I do not see it in the list for Perl, which is generally a super set of what we have.\r\nhttps://perldoc.perl.org/perluniprops#Properties-accessible-through-%5Cp%7B%7D-and-%5CP%7B%7D\r\n\r\ncc @tarekgh who may know what the named Unicode range is that covers Kanji.",
                                           "updatedAt":  "2021-08-08T03:42:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41VLvp",
                                           "createdAt":  "2021-08-08T05:25:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "DaZombieKiller",
                                           "body":  "@danmoseley \r\n\u003e \r\n\u003e eg., I do not see it in the list for Perl, which is generally a super set of what we have.\r\n\u003e https://perldoc.perl.org/perluniprops#Properties-accessible-through-%5Cp%7B%7D-and-%5CP%7B%7D\r\n\u003e \r\n\r\nI searched the page for `{Han}` and this popped up:\r\n```\r\n\\p{Script_Extensions: Han} (Short: \\p{Scx=Han}, \\p{Han}) (94_492:\r\n                          U+2E80..2E99, U+2E9B..2EF3,\r\n                          U+2F00..2FD5, U+3001..3003,\r\n                          U+3005..3011, U+3013..301F ...)\r\n```",
                                           "updatedAt":  "2021-08-08T05:25:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41VL6K",
                                           "createdAt":  "2021-08-08T05:34:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "TheAstrologic",
                                           "body":  "![image](https://user-images.githubusercontent.com/88603553/128621980-5e28f360-2651-4181-9b52-369cb84a68aa.png)\r\n",
                                           "updatedAt":  "2021-08-08T05:34:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41VTP3",
                                           "createdAt":  "2021-08-08T10:30:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Joe4evr",
                                           "body":  "\u003e I don\u0027t know if there is a difference between Kanji and Chinese characters\r\n\r\nNot an expert in this field, but far as I know there is no difference there. I *think* \"simplified Chinese\" could be mostly the subset of characters under a certain amount of strokes, but that\u0027s a bit of a guess.",
                                           "updatedAt":  "2021-08-08T10:30:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41Vf_m",
                                           "createdAt":  "2021-08-08T17:21:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB3eoCw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ufcpp",
                                                                               "createdAt":  "2021-08-24T05:16:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "\u003e I don\u0027t know if there is a difference between Kanji and Chinese characters\r\n\r\nThe **CJKV Unified Ideographs** are meant to use same code point for the same character from different languages. It\u0027s meant to be undistinguishable if I\u0027ve understood correctly.",
                                           "updatedAt":  "2021-08-08T17:21:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41VgdY",
                                           "createdAt":  "2021-08-08T17:39:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCrfBHw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DaZombieKiller",
                                                                               "createdAt":  "2021-08-08T17:40:48Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "m2nlight",
                                                                               "createdAt":  "2022-09-01T02:05:15Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@DaZombieKiller I am not knowledgeable about this. But that apparently is a script extension, not a block. What we support today seems to be only Unicode categories, and Unicode blocks.\r\n\r\nEg., we support `\\p{IsGurmukhi}` which maps to [\\u0A00\\u0A79](https://github.com/danmoseley/runtime/blob/b432e9892e8cf10d30891f207dbccb4b3de2c3df/src/libraries/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexCharClass.cs#L186) (note that the datastructures in the code always record the start through one past the end.)\r\n\r\nPerl apparently supports this as ` \\p{Block: Gurmukhi}`\r\n```\r\n \\p{Block: Gurmukhi}     (NOT \\p{Gurmukhi} NOR \\p{Is_Gurmukhi})\r\n                            (128: U+0A00..0A7F)\r\n```\r\n(Unicode also [defines this block](https://www.unicode.org/Public/13.0.0/ucd/Blocks.txt) as 0A00-0A7F so it may be time to update our tables here.)\r\n\r\nPerl supports `\\p{Gurmukhi}` for the [Unicode script range](https://www.unicode.org/Public/13.0.0/ucd/Scripts.txt)\r\n```\r\n  \\p{Gurmukhi}            \\p{Script_Extensions=Gurmukhi} (Short:\r\n                            \\p{Guru}; NOT \\p{Block=Gurmukhi}) (94)\r\n\\p{Script: Gurmukhi}    (Short: \\p{Sc=Guru}) (80: U+0A01..0A03,\r\n                            U+0A05..0A0A, U+0A0F..0A10,\r\n                            U+0A13..0A28, U+0A2A..0A30, U+0A32..0A33\r\n                            ...)\r\n  \\p{Script_Extensions: Gurmukhi} (Short: \\p{Scx=Guru}, \\p{Guru})\r\n                            (94: U+0951..0952, U+0964..0965,\r\n                            U+0A01..0A03, U+0A05..0A0A,\r\n                            U+0A0F..0A10, U+0A13..0A28 ...)\r\n```\r\n\r\nInterestingly the [Unicode regex document](https://www.unicode.org/reports/tr18/#Blocks), it recommends that for regular expressions \"Script values are generally preferred to Block values\" due to issues it enumerates. So Perl seems to be doing the right thing.\r\n\r\nThe .NET regex approach probably dates back 20 years. I wonder whether we should now support script properties and if so how we would disambiguate with blocks without changing the existing meaning of patterns. Happily we\u0027re currently prefixing with \"Is\". So maybe `\\p{Gurmukhi}` could be introduced for the script and the existing `\\p{IsGurmukhi}` remains the block.\r\n\r\nThe full [Unicode definition](https://www.unicode.org/Public/13.0.0/ucd/Scripts.txt) of Han is\r\n```\r\n2E80..2E99    ; Han # So  [26] CJK RADICAL REPEAT..CJK RADICAL RAP\r\n2E9B..2EF3    ; Han # So  [89] CJK RADICAL CHOKE..CJK RADICAL C-SIMPLIFIED TURTLE\r\n2F00..2FD5    ; Han # So [214] KANGXI RADICAL ONE..KANGXI RADICAL FLUTE\r\n3005          ; Han # Lm       IDEOGRAPHIC ITERATION MARK\r\n3007          ; Han # Nl       IDEOGRAPHIC NUMBER ZERO\r\n3021..3029    ; Han # Nl   [9] HANGZHOU NUMERAL ONE..HANGZHOU NUMERAL NINE\r\n3038..303A    ; Han # Nl   [3] HANGZHOU NUMERAL TEN..HANGZHOU NUMERAL THIRTY\r\n303B          ; Han # Lm       VERTICAL IDEOGRAPHIC ITERATION MARK\r\n3400..4DBF    ; Han # Lo [6592] CJK UNIFIED IDEOGRAPH-3400..CJK UNIFIED IDEOGRAPH-4DBF\r\n4E00..9FFC    ; Han # Lo [20989] CJK UNIFIED IDEOGRAPH-4E00..CJK UNIFIED IDEOGRAPH-9FFC\r\nF900..FA6D    ; Han # Lo [366] CJK COMPATIBILITY IDEOGRAPH-F900..CJK COMPATIBILITY IDEOGRAPH-FA6D\r\nFA70..FAD9    ; Han # Lo [106] CJK COMPATIBILITY IDEOGRAPH-FA70..CJK COMPATIBILITY IDEOGRAPH-FAD9\r\n16FF0..16FF1  ; Han # Mc   [2] VIETNAMESE ALTERNATE READING MARK CA..VIETNAMESE ALTERNATE READING MARK NHAY\r\n20000..2A6DD  ; Han # Lo [42718] CJK UNIFIED IDEOGRAPH-20000..CJK UNIFIED IDEOGRAPH-2A6DD\r\n2A700..2B734  ; Han # Lo [4149] CJK UNIFIED IDEOGRAPH-2A700..CJK UNIFIED IDEOGRAPH-2B734\r\n2B740..2B81D  ; Han # Lo [222] CJK UNIFIED IDEOGRAPH-2B740..CJK UNIFIED IDEOGRAPH-2B81D\r\n2B820..2CEA1  ; Han # Lo [5762] CJK UNIFIED IDEOGRAPH-2B820..CJK UNIFIED IDEOGRAPH-2CEA1\r\n2CEB0..2EBE0  ; Han # Lo [7473] CJK UNIFIED IDEOGRAPH-2CEB0..CJK UNIFIED IDEOGRAPH-2EBE0\r\n2F800..2FA1D  ; Han # Lo [542] CJK COMPATIBILITY IDEOGRAPH-2F800..CJK COMPATIBILITY IDEOGRAPH-2FA1D\r\n30000..3134A  ; Han # Lo [4939] CJK UNIFIED IDEOGRAPH-30000..CJK UNIFIED IDEOGRAPH-3134A\r\n```\r\nDoes that look like what you need?\r\n\r\ncc @tarekgh @GrabYourPitchforks to check I\u0027m correctly understanding this block/script distinction.",
                                           "updatedAt":  "2021-08-08T17:39:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41Vgii",
                                           "createdAt":  "2021-08-08T17:41:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Also note that part of the script ranges above include 3 byte code points. I believe the engine currently operates only on `char` which is only 2 byte. To handle those we would need a hypothetical future engine that operates on UTF-8 strings/buffers. Is that right @GrabYourPitchforks ?",
                                           "updatedAt":  "2021-08-08T17:41:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc41Vjyg",
                                           "createdAt":  "2021-08-08T19:28:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tarekgh",
                                           "body":  "The [CJK Unified Ideographs](https://unicode.org/charts/PDF/U4E00.pdf) doc has the ranges supported by Unicode.\r\n\r\nWhat @danmoseley mentioned in the comment is the complete `Han` script including the unified Ideograph, but it has more than that (like `CJK Compatibility Ideographs`). The details are mentioned in the [Section 18.1 Han](http://www.unicode.org/versions/Unicode13.0.0/ch18.pdf)",
                                           "updatedAt":  "2021-08-08T19:31:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc411Yq2",
                                           "createdAt":  "2021-08-21T23:12:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "I think the next step here is for someone to investigate what it would take to support Unicode scripts and make a proposal (presumably, broader than just support Han). My guess is that it would not need extensive changes, as these just boil down to more character classes.\r\n\r\nhttps://www.regular-expressions.info/unicode.html#category is helpful here.\r\n\r\nRe the format, it seems Perl supports both `\\p{IsScript}` and `\\p{IsBlock}` and `\\p{Category}` so perhaps that\u0027s the right approach for .NET. This is helpful: https://www.regular-expressions.info/refunicode.html",
                                           "updatedAt":  "2021-08-21T23:15:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc415pnY",
                                           "createdAt":  "2021-08-24T04:04:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "GrabYourPitchforks",
                                           "body":  "@danmoseley @tarekgh I\u0027m not sure what capabilities our current Regex class has with respect to supplementary plane code points (everything `U+10000` and above). However, even if support for supplementary plane code points isn\u0027t on the horizon, I\u0027d expect it\u0027d be not too much work to support the following ranges, since they all cleanly fit into a single `char`.\r\n\r\n```txt\r\n2E80..2E99    ; Han # So  [26] CJK RADICAL REPEAT..CJK RADICAL RAP\r\n2E9B..2EF3    ; Han # So  [89] CJK RADICAL CHOKE..CJK RADICAL C-SIMPLIFIED TURTLE\r\n2F00..2FD5    ; Han # So [214] KANGXI RADICAL ONE..KANGXI RADICAL FLUTE\r\n3005          ; Han # Lm       IDEOGRAPHIC ITERATION MARK\r\n3007          ; Han # Nl       IDEOGRAPHIC NUMBER ZERO\r\n3021..3029    ; Han # Nl   [9] HANGZHOU NUMERAL ONE..HANGZHOU NUMERAL NINE\r\n3038..303A    ; Han # Nl   [3] HANGZHOU NUMERAL TEN..HANGZHOU NUMERAL THIRTY\r\n303B          ; Han # Lm       VERTICAL IDEOGRAPHIC ITERATION MARK\r\n3400..4DBF    ; Han # Lo [6592] CJK UNIFIED IDEOGRAPH-3400..CJK UNIFIED IDEOGRAPH-4DBF\r\n4E00..9FFC    ; Han # Lo [20989] CJK UNIFIED IDEOGRAPH-4E00..CJK UNIFIED IDEOGRAPH-9FFC\r\nF900..FA6D    ; Han # Lo [366] CJK COMPATIBILITY IDEOGRAPH-F900..CJK COMPATIBILITY IDEOGRAPH-FA6D\r\nFA70..FAD9    ; Han # Lo [106] CJK COMPATIBILITY IDEOGRAPH-FA70..CJK COMPATIBILITY IDEOGRAPH-FAD9\r\n```",
                                           "updatedAt":  "2021-08-24T04:04:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc415x3J",
                                           "createdAt":  "2021-08-24T05:42:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ufcpp",
                                           "body":  "As some mentioned , Unicode has unified Han characters between Japanese, simplified Chinese, and traditional Chinese. \"Kanji\" in Japanese and \"Han\" in Unicode terminology are the same thing, but many characters in Unicode\u0027s Han script blocks are only used in one of Japanese, simplified Chinese, or traditional Chinese.\r\n\r\n@TheAstrologic might be looking for a way to determine the Japanese Kanji. That\u0027s not an easy task, but it seems to be possible to make an heuristic determination based on [UAX#38](https://unicode.org/reports/tr38/) (Unihan Database). However, it is not responsibility of the Regex.\r\n",
                                           "updatedAt":  "2021-08-24T06:46:33Z"
                                       }
                                   ],
                         "totalCount":  13
                     },
        "title":  "Support Unicode Script character classes in regular expressions",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "help wanted",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/58786",
        "createdAt":  "2021-09-08T03:13:37Z",
        "number":  58786,
        "author":  "danmoseley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-06T15:09:25Z",
        "body":  "\r\nFrom fuzzing, these are 3 distinct stacks, with relatively-reduced patterns. Note, the inputs are almost anything - not specially crafted. the examples below are in the interpreter, but I\u0027ve seen similar crashes/stacks when using compiled mode.\r\n\r\nRegexRunner, the base class, maintains several stacks (as managed arrays) and allows its derived classes (RegexInterpreter and CompiledRegexRunner) to push and pop from them. They are responsible for calling EnsureStorage() on RegexRunner to enlarge them if that may be necessary. Both do this in certain places, but not all the places they push to them, and the paths below cause the end of the `runtrack` (backtracking) stack to be hit.\r\n\r\nIt\u0027s not clear to me what the right fix is here: it seems the author assumed that only certain paths would need the check. The simplest thing would be to remove responsibility from the derived classes and check on every push, if that isn\u0027t measurably slower. EnsureStorage() would have to stay, as it\u0027s part of the public contract (for precompiled regex assemblies)\r\n\r\nThese bugs are not regressions - they repro in .NET Framework. So clearly, low priority.\r\n```\r\n================\r\nRegex.IsMatch(\"x\", @\"(?:){93}\");\r\n\r\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at System.Text.RegularExpressions.RegexInterpreter.TrackPush(Int32 i1)\r\n   at System.Text.RegularExpressions.RegexInterpreter.Go()\r\n   at System.Text.RegularExpressions.RegexRunner.Scan(Regex regex, String text, Int32 textbeg, Int32 textend, Int32 textstart, Int32 prevlen, Boolean quick, TimeSpan timeout)\r\n   at System.Text.RegularExpressions.Regex.Run(Boolean quick, Int32 prevlen, String input, Int32 beginning, Int32 length, Int32 startat)\r\n   at System.Text.RegularExpressions.Regex.IsMatch(String input)\r\n   at X.Main() in C:\\proj\\test\\tester.cs:line 12\r\n================\r\n================\r\nRegex.IsMatch(\"x\", @\"(?\u003c!a*(?:a?)+?)\");\r\n\r\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at System.Text.RegularExpressions.RegexInterpreter.Backtrack()\r\n   at System.Text.RegularExpressions.RegexInterpreter.Go()\r\n   at System.Text.RegularExpressions.RegexRunner.Scan(Regex regex, String text, Int32 textbeg, Int32 textend, Int32 textstart, Int32 prevlen, Boolean quick, TimeSpan timeout)\r\n   at System.Text.RegularExpressions.Regex.Run(Boolean quick, Int32 prevlen, String input, Int32 beginning, Int32 length, Int32 startat)\r\n   at System.Text.RegularExpressions.Regex.IsMatch(String input)\r\n   at X.Main() in C:\\proj\\test\\tester.cs:line 12\r\n================\r\n================\r\nRegex.IsMatch(\"xxxx\", @\"()(?\u003e\\1+?).\\b\");\r\n\r\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at System.Text.RegularExpressions.RegexInterpreter.Go()\r\n   at System.Text.RegularExpressions.RegexRunner.Scan(Regex regex, String text, Int32 textbeg, Int32 textend, Int32 textstart, Int32 prevlen, Boolean quick, TimeSpan timeout)\r\n   at System.Text.RegularExpressions.Regex.Run(Boolean quick, Int32 prevlen, String input, Int32 beginning, Int32 length, Int32 startat)\r\n   at System.Text.RegularExpressions.Regex.IsMatch(String input)\r\n   at X.Main() in C:\\proj\\test\\tester.cs:line 12\r\n================\r\n\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOlmjpWg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc42h-NR",
                                           "createdAt":  "2021-09-08T03:13:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\nFrom fuzzing, these are 3 distinct stacks, with relatively-reduced patterns. Note, the inputs are almost anything - not specially crafted. the examples below are in the interpreter, but I\u0027ve seen similar crashes/stacks when using compiled mode.\r\n\r\nRegexRunner, the base class, maintains several stacks (as managed arrays) and allows its derived classes (RegexInterpreter and CompiledRegexRunner) to push and pop from them. They are responsible for calling EnsureStorage() on RegexRunner to enlarge them if that may be necessary. Both do this in certain places, but not all the places they push to them, and the paths below cause the end of the `runtrack` (backtracking) stack to be hit.\r\n\r\nIt\u0027s not clear to me what the right fix is here: it seems the author assumed that only certain paths would need the check. The simplest thing would be to remove responsibility from the derived classes and check on every push, if that isn\u0027t measurably slower. EnsureStorage() would have to stay, as it\u0027s part of the public contract (for precompiled regex assemblies)\r\n\r\nThese bugs are not regressions - they repro in .NET Framework. So clearly, low priority.\r\n```\r\n================\r\nRegex.IsMatch(\"x\", @\"(?:){93}\");\r\n\r\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at System.Text.RegularExpressions.RegexInterpreter.TrackPush(Int32 i1)\r\n   at System.Text.RegularExpressions.RegexInterpreter.Go()\r\n   at System.Text.RegularExpressions.RegexRunner.Scan(Regex regex, String text, Int32 textbeg, Int32 textend, Int32 textstart, Int32 prevlen, Boolean quick, TimeSpan timeout)\r\n   at System.Text.RegularExpressions.Regex.Run(Boolean quick, Int32 prevlen, String input, Int32 beginning, Int32 length, Int32 startat)\r\n   at System.Text.RegularExpressions.Regex.IsMatch(String input)\r\n   at X.Main() in C:\\proj\\test\\tester.cs:line 12\r\n================\r\n================\r\nRegex.IsMatch(\"x\", @\"(?\u003c!a*(?:a?)+?)\");\r\n\r\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at System.Text.RegularExpressions.RegexInterpreter.Backtrack()\r\n   at System.Text.RegularExpressions.RegexInterpreter.Go()\r\n   at System.Text.RegularExpressions.RegexRunner.Scan(Regex regex, String text, Int32 textbeg, Int32 textend, Int32 textstart, Int32 prevlen, Boolean quick, TimeSpan timeout)\r\n   at System.Text.RegularExpressions.Regex.Run(Boolean quick, Int32 prevlen, String input, Int32 beginning, Int32 length, Int32 startat)\r\n   at System.Text.RegularExpressions.Regex.IsMatch(String input)\r\n   at X.Main() in C:\\proj\\test\\tester.cs:line 12\r\n================\r\n================\r\nRegex.IsMatch(\"xxxx\", @\"()(?\u003e\\1+?).\\b\");\r\n\r\nSystem.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at System.Text.RegularExpressions.RegexInterpreter.Go()\r\n   at System.Text.RegularExpressions.RegexRunner.Scan(Regex regex, String text, Int32 textbeg, Int32 textend, Int32 textstart, Int32 prevlen, Boolean quick, TimeSpan timeout)\r\n   at System.Text.RegularExpressions.Regex.Run(Boolean quick, Int32 prevlen, String input, Int32 beginning, Int32 length, Int32 startat)\r\n   at System.Text.RegularExpressions.Regex.IsMatch(String input)\r\n   at X.Main() in C:\\proj\\test\\tester.cs:line 12\r\n================\r\n\r\n```\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edanmoseley\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-09-08T03:13:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42h-Ze",
                                           "createdAt":  "2021-09-08T03:14:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Actually, I only debugged the first case. It\u0027s possible that one or both of the others are due to attempting to read out of bounds, rather than write. It\u0027s also conceivable that there are other variations, but these are the only 3 distinct stacks.",
                                           "updatedAt":  "2021-09-08T03:14:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WaOla",
                                           "createdAt":  "2024-12-06T15:09:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "This no longer repros for the 1st or 3rd cases. It still repros for the second.\n```csharp\nRegex.IsMatch(\"x\", @\"(?\u003c!a*(?:a?)+?)\");\n```",
                                           "updatedAt":  "2024-12-06T15:09:24Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "IndexOutOfRangeException in RegexInterpreter caused by not always resizing its stack appropriately",
        "labels":  [
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/61903",
        "createdAt":  "2021-11-22T02:23:31Z",
        "number":  61903,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7-Q2g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "joperezr",
                                            "createdAt":  "2021-11-22T23:43:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "austindrenski",
                                            "createdAt":  "2022-06-16T16:05:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mokarchi",
                                            "createdAt":  "2022-10-22T07:56:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jeffhandley",
                                            "createdAt":  "2022-10-29T19:25:57Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jodydonetti",
                                            "createdAt":  "2022-11-10T10:13:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Timovzl",
                                            "createdAt":  "2022-11-18T14:43:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "cheesi",
                                            "createdAt":  "2023-01-04T08:42:27Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aradalvand",
                                            "createdAt":  "2023-10-13T20:12:28Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GerardSmit",
                                            "createdAt":  "2024-01-02T14:02:48Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "aromaa",
                                            "createdAt":  "2024-03-21T23:03:46Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "issue-dispenser",
                                            "createdAt":  "2024-10-19T15:28:02Z"
                                        }
                                    ],
                          "totalCount":  11
                      },
        "updatedAt":  "2023-02-04T01:10:13Z",
        "body":  "Currently, if you specify RegexOptions.NonBacktracking with the Regex source generator, e.g.\r\n```C#\r\n[RegexGenerator(\"abc\", RegexOptions.NonBacktracking)]\r\nprivate static partial Regex Example();\r\n```\r\nyou get code like this:\r\n```C#\r\n    private static partial Regex Example() =\u003e GeneratedRegex_Example_A6B1D425.Instance;\r\n    \r\n    private sealed class GeneratedRegex_Example_A6B1D425 : Regex\r\n    {\r\n        public static Regex Instance { get; } = new Regex(\"abc\", RegexOptions.NonBacktracking);\r\n    }\r\n```\r\nIn other words, you just get a cached instance of constructing `Regex` rather than having the implementation actually output in the source.  That\u0027s because we currently special-case this flag:\r\nhttps://github.com/dotnet/runtime/blob/69b5d67d9418d672609aa6e2c418a3d4ae00ad18/src/libraries/System.Text.RegularExpressions/gen/RegexGenerator.Emitter.cs#L107-L110\r\ndue to it not yet being implemented:\r\nhttps://github.com/dotnet/runtime/blob/69b5d67d9418d672609aa6e2c418a3d4ae00ad18/src/libraries/System.Text.RegularExpressions/gen/RegexGenerator.Emitter.cs#L676-L680\r\n\r\nWe should implement it :smile:, at least for a subset of expressions, e.g. ones where we can fully construct a reasonably-sized DFA graph at build time and emit an executable representation of it into the source.\r\n\r\ncc: @olsaarik, @veanes, @joperezr, @danmoseley ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOVG8A4g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc46HYMU",
                                           "createdAt":  "2021-11-22T02:23:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @eerhardt, @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrently, if you specify RegexOptions.NonBacktracking with the Regex source generator, e.g.\r\n```C#\r\n[RegexGenerator(\"abc\", RegexOptions.NonBacktracking)]\r\nprivate static partial Regex Example();\r\n```\r\nyou get code like this:\r\n```C#\r\n    private static partial Regex Example() =\u003e GeneratedRegex_Example_A6B1D425.Instance;\r\n    \r\n    private sealed class GeneratedRegex_Example_A6B1D425 : Regex\r\n    {\r\n        public static Regex Instance { get; } = new Regex(\"abc\", RegexOptions.NonBacktracking);\r\n    }\r\n```\r\nIn other words, you just get a cached instance of constructing `Regex` rather than having the implementation actually output in the source.  That\u0027s because we currently special-case this flag:\r\nhttps://github.com/dotnet/runtime/blob/69b5d67d9418d672609aa6e2c418a3d4ae00ad18/src/libraries/System.Text.RegularExpressions/gen/RegexGenerator.Emitter.cs#L107-L110\r\ndue to it not yet being implemented:\r\nhttps://github.com/dotnet/runtime/blob/69b5d67d9418d672609aa6e2c418a3d4ae00ad18/src/libraries/System.Text.RegularExpressions/gen/RegexGenerator.Emitter.cs#L676-L680\r\n\r\nWe should implement it :smile:, at least for a subset of expressions, e.g. ones where we can fully construct a reasonably-sized DFA graph at build time and emit an executable representation of it into the source.\r\n\r\ncc: @olsaarik, @veanes, @joperezr, @danmoseley \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-11-22T02:23:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UUUkt",
                                           "createdAt":  "2023-02-03T01:51:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LennoxP90",
                                           "body":  "has any headway happened on this subject?",
                                           "updatedAt":  "2023-02-03T01:51:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UUjTZ",
                                           "createdAt":  "2023-02-03T02:16:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e has any headway happened on this subject?\r\n\r\nNo",
                                           "updatedAt":  "2023-02-03T02:16:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UZane",
                                           "createdAt":  "2023-02-03T14:30:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@LennoxP90 can you share what motivates your interest?",
                                           "updatedAt":  "2023-02-03T14:30:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UZsEV",
                                           "createdAt":  "2023-02-03T15:21:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LennoxP90",
                                           "body":  "just the non backtracking feature so we can have the best of both worlds fast startup and non backtracking support",
                                           "updatedAt":  "2023-02-03T15:21:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UZ74V",
                                           "createdAt":  "2023-02-03T16:12:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@LennoxP90  just curious what is your use case for non backtracking - defense in depth against flawed patterns, use of untrusted patterns, better perf in particular case, etc..",
                                           "updatedAt":  "2023-02-03T16:12:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UZ8IA",
                                           "createdAt":  "2023-02-03T16:13:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "(Your post makes complete sense of course just interested to learn more about users of this engine)",
                                           "updatedAt":  "2023-02-03T16:13:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UaDDd",
                                           "createdAt":  "2023-02-03T16:35:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LennoxP90",
                                           "body":  "i may not need it but i have a regex that determines if an input is a link or not here is my regex:\r\n`@\"\\b(?:https?://)\\S+\\b\"`\r\nI just blanketly set all my regex to use non backtracking for a possible optimization maybe I am using the feature incorrectly I do not know.",
                                           "updatedAt":  "2023-02-03T16:35:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5UbwDi",
                                           "createdAt":  "2023-02-04T00:38:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODJoERA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "aradalvand",
                                                                               "createdAt":  "2023-10-13T21:17:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "joperezr",
                                           "body":  "The `RegexOptions.NonBacktracking` engine\u0027s main use case, is to ensure performance that it is linear to the length of the input, which is something that people care about in order to prevent catastrophic backtracking, also known as a ReDOS attack. In other words, there are patterns that have some characteristics which makes them prone to be exploited by specially crafted short inputs which can make a backtracking engine to loop excessively to the point it may crash the process. A non-backtracking engine on the other hand, won\u0027t loop in cycles the same way, so the only way to have one of those engines do more work, is literally by having a super large input.\r\n\r\nThat said, for the vast majority of cases a backtracking engine will be much faster into looking for a match (especially for the cases when a match exists) which is why most people that care about performance and know what their pattern is at compile time should opt for the source generated or compiled engine. For your specific pattern called above, there are only two loops, the optional `s` in https (which will be made an atomic loop so this makes this loop no longer relevant), and the `\\S+` part. One potential thing to consider is to remove the `\\b` at the end, as the `\\S+` will already be a greedy loop and match as many non-whitespace characters as possible until it reaches a boundary. Another option is to mark that part as atomic loop so you prevent backtracking like `(?\u003e\\S+)`. In any case, your pattern is not very likely to hit catastrophic backtracking (unless I\u0027m missing something obvious) so if you want an optimized performance, you\u0027d probably want to use the Source generated engine instead of RegexOptions.NonBacktracking.\r\n\r\nI believe this is why @danmoseley above asked if your use case involved running unkown or untrusted patterns, which is a very valid reason why to use `RegexOptions.NonBacktracking` and sacrifice a bit of perf for cases there is a match, for the advantage of reducing the likelihood of having a ReDOS attack. Our colleague @stephentoub wrote a very good explanation of all of this and a description of the `NonBacktracking` feature in [this blog post](https://devblogs.microsoft.com/dotnet/regular-expression-improvements-in-dotnet-7/#backtracking-and-regexoptions-nonbacktracking), I\u0027d highly recommend checking it out 😉",
                                           "updatedAt":  "2023-02-04T01:10:13Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Add RegexGenerator support for RegexOptions.NonBacktracking",
        "labels":  [
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/63385",
        "createdAt":  "2022-01-05T02:56:34Z",
        "number":  63385,
        "author":  "joperezr",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-08T22:58:11Z",
        "body":  "There are some Regex pattern and input pairs that can trigger an OOM Exception with the Interpreted engine only. The issue seems to be that these crafted inputs are causing the interpreted engine to fail to exit out from a loop and increment the size of runstack array on RegexRunner until eventually an OOM happens. This doesn’t repro on the Compiled, NonBacktracking or source generated engines. \r\n\r\nOne example pattern that can be problematic is `(|)+?$` which can repro with pretty much all non empty inputs, for example `11`.\r\n\r\nThis issue is to track the investigation and resolution of this issue.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSAtXMA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc477EFu",
                                           "createdAt":  "2022-01-05T02:56:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThere are some Regex pattern and input pairs that can trigger an OOM Exception with the Interpreted engine only. The issue seems to be that these crafted inputs are causing the interpreted engine to fail to exit out from a loop and increment the size of runstack array on RegexRunner until eventually an OOM happens. This doesn’t repro on the Compiled, NonBacktracking or source generated engines. \r\n\r\nOne example pattern that can be problematic is `(|)+?$` which can repro with pretty much all non empty inputs, for example `11`.\r\n\r\nThis issue is to track the investigation and resolution of this issue.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejoperezr\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`bug`, `area-System.Text.RegularExpressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-05T02:56:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G-jt_",
                                           "createdAt":  "2022-07-20T21:59:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "I just tried this out in preview 7 and I can\u0027t seem to be able to reproduce the issue any longer, so I\u0027ll go ahead close this for now.",
                                           "updatedAt":  "2022-07-20T21:59:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G-7ka",
                                           "createdAt":  "2022-07-21T00:28:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I just tried this out in preview 7 and I can\u0027t seem to be able to reproduce the issue any longer, so I\u0027ll go ahead close this for now.\r\n\r\nI can\u0027t repro it even on .NET 6.  Are we sure the cited pattern / input are the right ones?",
                                           "updatedAt":  "2022-07-21T00:28:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G-8FI",
                                           "createdAt":  "2022-07-21T00:32:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "I believe this is still an issue.  Try:\r\n```C#\r\nusing System;\r\nusing System.Text.RegularExpressions;\r\n\r\nvar r = new Regex(@\"(^+?)?()\");\r\nr.Match(\"1\");\r\n```",
                                           "updatedAt":  "2022-07-21T00:32:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IC1cw",
                                           "createdAt":  "2022-08-08T22:58:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "You are right, that pattern does repro in both 7.0 and 6.0. Given this is not a regression from 6 and the limited time we have for 7.0, I\u0027m adjusting the milestone.",
                                           "updatedAt":  "2022-08-08T22:58:06Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Investigate OutOfMemory Exception happening woth Regex.Match for some patterns in the interpreted engine.",
        "labels":  [
                       "bug",
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/64097",
        "createdAt":  "2022-01-21T14:45:22Z",
        "number":  64097,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-09-30T19:14:35Z",
        "body":  "From looking at our corpus of real-world regex patterns, it looks reasonably common for developers to write patterns like:\r\n```\r\n\\d{5}$|\\d{5}-\\d{4}$\r\n```\r\nwith the same end anchor at the end of each branch.  In such cases, we could refactor this into:\r\n```\r\n(?:\\d{5}|\\d{5}-\\d{4})$\r\n```\r\nmaking the `$` anchor then available to an optimization like https://github.com/dotnet/runtime/issues/62697. For this particular pattern, we could also augment our optimization that factors out common prefixes from branches, and turn it into:\r\n```\r\n\\d{5}(?:|-\\d{4})$\r\n```\r\n\r\nIt also appears to be reasonably common to look for something at the beginning or end of the input, e.g.\r\n```\r\n^\\d{15}|\\d{18}$\r\n```\r\nOur FindFirstChar optimizations don\u0027t help with such a construct because of the alternation, but we could special-case such a pattern in code generation.  For example, if we restricted it to just patterns rooted in an alternation with just two branches, one with a beginning anchor and one with an end anchor, and we can compute a fixed length for the second branch, we could generate code along the lines of:\r\n```C#\r\nFindFirstChar() =\u003e return true iff at the beginning;\r\nGo()\r\n{\r\n   // Try to match first branch.  If it succeeds, match.\r\n   // Otherwise, jump to and update bumpalong to input.Length - ComputedFixedLength(secondBranch).\r\n   // Try to match second branch.  If it succeeds, match. Else, fail.\r\n}\r\n```\r\nThis could be generalized to alternations of more than two branches, as long as every branch is rooted with an anchor, just iterating through each branch, jumping to either the beginning for a beginning anchor or to end - fixed length for an ending anchor, and running the match.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPMLEfg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc48tiqj",
                                           "createdAt":  "2022-01-21T14:45:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nFrom looking at our corpus of real-world regex patterns, it looks reasonably common for developers to write patterns like:\r\n```\r\n\\d{5}$|\\d{5}-\\d{4}$\r\n```\r\nwith the same end anchor at the end of each branch.  In such cases, we could refactor this into:\r\n```\r\n(?:\\d{5}|\\d{5}-\\d{4})$\r\n```\r\nmaking the `$` anchor then available to an optimization like https://github.com/dotnet/runtime/issues/62697. For this particular pattern, we could also augment our optimization that factors out common prefixes from branches, and turn it into:\r\n```\r\n\\d{5}(?:|-\\d{4})$\r\n```\r\n\r\nIt also appears to be reasonably common to look for something at the beginning or end of the input, e.g.\r\n```\r\n^\\d{15}|\\d{18}$\r\n```\r\nOur FindFirstChar optimizations don\u0027t help with such a construct because of the alternation, but we could special-case such a pattern in code generation.  For example, if we restricted it to just patterns rooted in an alternation with just two branches, one with a beginning anchor and one with an end anchor, and we can compute a fixed length for the second branch, we could generate code along the lines of:\r\n```C#\r\nFindFirstChar() =\u003e return true iff at the beginning;\r\nGo()\r\n{\r\n   // Try to match first branch.  If it succeeds, match.\r\n   // Otherwise, jump to and update bumpalong to input.Length - ComputedFixedLength(secondBranch).\r\n   // Try to match second branch.  If it succeeds, match. Else, fail.\r\n}\r\n```\r\nThis could be generalized to alternations of more than two branches, as long as every branch is rooted with an anchor, just iterating through each branch, jumping to either the beginning for a beginning anchor or to end - fixed length for an ending anchor, and running the match.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-01-21T14:45:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48uSy6",
                                           "createdAt":  "2022-01-21T18:44:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "\u003e \\d{5}$|\\d{5}-\\d{4}$\r\n\r\nDo we have a Go optimization (in the source generator) for patterns like this so that we detect that we could easily eliminate branches by just checking one character in the input where both branches are different? For example, in this particular case we could easily discard (and avoid backtracking) the second branch with a check like `if (input.Length \u003c 10 || input[input.Length-5] != \u0027-\u0027)`.",
                                           "updatedAt":  "2022-01-21T18:44:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc48wsR-",
                                           "createdAt":  "2022-01-23T02:12:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Do we have a Go optimization (in the source generator) for patterns like this so that we detect that we could easily eliminate branches by just checking one character in the input where both branches are different? For example, in this particular case we could easily discard (and avoid backtracking) the second branch with a check like if (input.Length \u003c 10 || input[input.Length-5] != \u0027-\u0027).\r\n\r\n_If_ we were to add the transformation I mentioned that factored:\r\n```\r\n\\d{5}$|\\d{5}-\\d{4}$\r\n```\r\ninto\r\n```\r\n\\d{5}(?:|-\\d{4})$\r\n```\r\nthen it does basically what you suggested (though I\u0027m not sure what you mean about eliminating backtracking... it still needs to try with the empty branch and then if that fails try with the dash).  Here\u0027s what the source generator produces today for the relevant portion of that latter expression:\r\n```C#\r\n                    // Match a Unicode digit exactly 5 times.\r\n                    {\r\n                        if ((uint)slice.Length \u003c 5 ||\r\n                            !char.IsDigit(slice[0]) ||\r\n                            !char.IsDigit(slice[1]) ||\r\n                            !char.IsDigit(slice[2]) ||\r\n                            !char.IsDigit(slice[3]) ||\r\n                            !char.IsDigit(slice[4]))\r\n                        {\r\n                            goto NoMatch;\r\n                        }\r\n                    }\r\n                    \r\n                    // Match with 2 alternative expressions.\r\n                    //{\r\n                        int alternation_starting_pos = pos;\r\n                        \r\n                        // Branch 0\r\n                        //{\r\n                            \r\n                            StackPush2(ref base.runstack!, ref stackpos, 0, alternation_starting_pos);\r\n                            pos += 5;\r\n                            slice = slice.Slice(5);\r\n                            goto AlternationMatch;\r\n                            \r\n                            AlternationBranch:\r\n                            pos = alternation_starting_pos;\r\n                            slice = inputSpan.Slice(pos, end - pos);\r\n                        //}\r\n                        \r\n                        // Branch 1\r\n                        //{\r\n                            if ((uint)slice.Length \u003c 10 ||\r\n                                slice[5] != \u0027-\u0027 || // Match \u0027-\u0027.\r\n                                !char.IsDigit(slice[6]) || // Match a Unicode digit exactly 4 times.\r\n                                !char.IsDigit(slice[7]) ||\r\n                                !char.IsDigit(slice[8]) ||\r\n                                !char.IsDigit(slice[9]))\r\n                            {\r\n                                goto NoMatch;\r\n                            }\r\n                            \r\n                            StackPush2(ref base.runstack!, ref stackpos, 1, alternation_starting_pos);\r\n                            pos += 10;\r\n                            slice = slice.Slice(10);\r\n                            goto AlternationMatch;\r\n                        //}\r\n                        \r\n                        AlternationBacktrack:\r\n                        alternation_starting_pos = base.runstack![--stackpos];\r\n                        switch (base.runstack![--stackpos])\r\n                        {\r\n                            case 0: goto AlternationBranch;\r\n                            case 1: goto NoMatch;\r\n                        }\r\n                        \r\n                        AlternationMatch:;\r\n                    //}\r\n```",
                                           "updatedAt":  "2022-01-23T02:12:52Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Special-case alternation with anchors in Regex analysis and code gen",
        "labels":  [
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65605",
        "createdAt":  "2022-02-19T01:53:08Z",
        "number":  65605,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-08T22:59:19Z",
        "body":  "We now have a bunch of regex performance tests in dotnet/performance, but they only cover the interpreter, compiler, and nonbacktracking implementations.  We need to add some that cover the source generator.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOSAtZfw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-Uak5",
                                           "createdAt":  "2022-02-19T01:53:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe now have a bunch of regex performance tests in dotnet/performance, but they only cover the interpreter, compiler, and nonbacktracking implementations.  We need to add some that cover the source generator.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-19T01:53:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IC1l_",
                                           "createdAt":  "2022-08-08T22:59:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "I\u0027m working on this and will finish it before 7.0 ships, however, this is not a blocker for 7.0 so I\u0027m adjusting the milestone.",
                                           "updatedAt":  "2022-08-08T22:59:15Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Add RegexGenerator perf tests",
        "labels":  [
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/66031",
        "createdAt":  "2022-03-01T21:41:35Z",
        "number":  66031,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-12-18T20:20:24Z",
        "body":  "We currently do some optimizations (as part of Reduce method calls) while parsing as nodes are being added to the tree.  We currently do other optimizations as part of a final pass over the graph once the whole tree has been parsed.  We should re-examine what we do when, whether we\u0027re doing unnecessary work to rerun optimizations as we move nodes around in the tree, whether there\u0027d be a better ordering that would result in more improvements being found for the same amount of work, and whether we\u0027re leaving any optimizations on the table by not allowing for another round of optimizations (e.g. the source generator has a larger time budget and so could rerun the optimizations one or more times to mop up after any opportunities exposed after the previous passes).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPu-TNA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-75M0",
                                           "createdAt":  "2022-03-01T21:41:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe currently do some optimizations (as part of Reduce method calls) while parsing as nodes are being added to the tree.  We currently do other optimizations as part of a final pass over the graph once the whole tree has been parsed.  We should re-examine what we do when, whether we\u0027re doing unnecessary work to rerun optimizations as we move nodes around in the tree, whether there\u0027d be a better ordering that would result in more improvements being found for the same amount of work, and whether we\u0027re leaving any optimizations on the table by not allowing for another round of optimizations (e.g. the source generator has a larger time budget and so could rerun the optimizations one or more times to mop up after any opportunities exposed after the previous passes).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`, `tenet-performance`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-03-01T21:41:38Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Re-examine order / structure of regex optimization passes",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "tenet-performance",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67793",
        "createdAt":  "2022-04-09T05:43:16Z",
        "number":  67793,
        "author":  "joperezr",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-18T18:13:38Z",
        "body":  "While fixing some tests in https://github.com/dotnet/runtime/pull/67709 it was discovered that a recently added test seems to be causing OOM exceptions on some of the platforms. We should investigate if the test can be re-written so as to not OOM on any platform, or if not possible then skip the test in those platforms.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQpzzCA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5BMLFM",
                                           "createdAt":  "2022-04-09T05:43:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhile fixing some tests in https://github.com/dotnet/runtime/pull/67709 it was discovered that a recently added test seems to be causing OOM exceptions on some of the platforms. We should investigate if the test can be re-written so as to not OOM on any platform, or if not possible then skip the test in those platforms.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejoperezr\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003ejoperezr\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`, `test-bug`, `blocking-outerloop`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-09T05:43:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Cmhf_",
                                           "createdAt":  "2022-05-04T14:35:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@joperezr, is this the same as https://github.com/dotnet/runtime/issues/68545?",
                                           "updatedAt":  "2022-05-04T14:35:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5CnPMI",
                                           "createdAt":  "2022-05-04T16:53:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "Yes, I closed the other one as a dupe.",
                                           "updatedAt":  "2022-05-04T16:53:52Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "RegexIgnoreCase Outerloop is causing OOM exceptions on some platforms",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "disabled-test",
                       "test-bug"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/68783",
        "createdAt":  "2022-05-02T20:27:38Z",
        "number":  68783,
        "author":  "olsaarik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-12-06T15:02:02Z",
        "body":  "The match generation algorithm for `RegexOptions.NonBacktracking` uses a third pass over the input whenever the pattern has subcaptures and the user call need to know them. This third pass is an NFA simulation with additional bookkeeping to record subcapture starts and ends, and as such is quite a bit slower than the first two passes.\r\n\r\nFor a patterns like `(fo+)|(bar)` the third pass could be skipped by detecting which subpattern, `fo+` or `bar`, actually matched, since in both cases only one subcapture matches and also coincides with the start and end of the whole pattern (which are found by the second and first pass, respectively). This optimization could also apply to patterns with fixed-length prefixes like `abc((fo+)|(bar))`.\r\n\r\nThe likely way to implement this would be to add something similar to the markers appended to fixed-length paths in patterns to skip the second pass (e.g. in `abc((fo+)|(bar))` the `bar` option would be marked to be length 6). The new markers would indicate \"if you end the match in this state, then all relevant subcapture positions are known and they occur at these offsets from the top level start and end positions\".\r\n\r\nWe know at least one important use case for this optimization where the customer has a large corpus of patterns and they want to find if any of them match and if so which ones. Using a big alternation of named captures, like `(?\u003cname1\u003eR1)|(?\u003cname2\u003eR2)|(?\u003cname3\u003eR3)|...` together with `RegexOptions.ExplicitCapture` they can match all patterns together (getting great performance with the automata based engine of `RegexOptions.NonBacktracking`) and still find which pattern is the matching one for further processing.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQnqhuQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5CeqG5",
                                           "createdAt":  "2022-05-02T20:27:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe match generation algorithm for `RegexOptions.NonBacktracking` uses a third pass over the input whenever the pattern has subcaptures and the user call need to know them. This third pass is an NFA simulation with additional bookkeeping to record subcapture starts and ends, and as such is quite a bit slower than the first two passes.\r\n\r\nFor a patterns like `(fo+)|(bar)` the third pass could be skipped by detecting which subpattern, `fo+` or `bar`, actually matched, since in both cases only one subcapture matches and also coincides with the start and end of the whole pattern (which are found by the second and first pass, respectively). This optimization could also apply to patterns with fixed-length prefixes like `abc((fo+)|(bar))`.\r\n\r\nThe likely way to implement this would be to add something similar to the markers appended to fixed-length paths in patterns to skip the second pass (e.g. in `abc((fo+)|(bar))` the `bar` option would be marked to be length 6). The new markers would indicate \"if you end the match in this state, then all relevant subcapture positions are known and they occur at these offsets from the top level start and end positions\".\r\n\r\nWe know at least one important use case for this optimization where the customer has a large corpus of patterns and they want to find if any of them match and if so which ones. Using a big alternation of named captures, like `(?\u003cname1\u003eR1)|(?\u003cname2\u003eR2)|(?\u003cname3\u003eR3)|...` together with `RegexOptions.ExplicitCapture` they can match all patterns together (getting great performance with the automata based engine of `RegexOptions.NonBacktracking`) and still find which pattern is the matching one for further processing.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eolsaarik\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eolsaarik\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`, `optimization`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-02T20:27:42Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Skip finding subcaptures when position is known from top level match in RegexOptions.NonBacktracking",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "optimization"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/69415",
        "createdAt":  "2022-05-17T00:28:27Z",
        "number":  69415,
        "author":  "xtofs",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-05T21:14:33Z",
        "body":  "### Background and motivation\r\n\r\nEspecially with the recent improvements in regexs it is very much feasible to write large alteration regexes for tokenization like \r\n    `(?\u003cwhitespace\u003e\\s+)|(?\u003cident\u003e[_a-z][_a-z0-9]*)|(?\u003cnumber\u003e[0-9]+)|(?\u003ccomma\u003e,)`\r\nThe Match for this Regex has all groups in the `Groups` collection but only one has Success == true. So to find the one that succeeded, one needs to iterate through all of them and check. Something like:\r\n`match.Groups.Values.Where(g =\u003e g.Success)` (or similar to disregard the 0th group and find the single reemaining0\r\nThis eats into the performance of the regex since internally it is smarter and does not have to try all groups linearly but this is a linear search after the match.\r\nIs it possible to add a SucceededGroups (or SuccessfulGroups) collection to Match ?\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Collections.Generic;\r\n\r\npublic class Match : Group\r\n{\r\n    public virtual ISet\u003cGroup\u003e SuccessfulGroups { get; } \r\n    // remaining members\r\n}\r\n```\r\n\r\n\r\n### API Usage\r\n\r\n```csharp\r\nvar regex = new Regex(@\"\\G(?\u003cspace\u003e\\s+)|(?\u003cident\u003e[_a-z][_a-z0-9]*)|(?\u003cnum\u003e[0-9]+)|(?\u003ccomma\u003e,)\");\r\n\r\nwhile (true)\r\n{\r\n    var match = regex.Match(input, position);\r\n    if (!match.Success)\r\n    {\r\n        break;\r\n    }\r\n    // var grp = match.Groups.Values.Skip(1).Single(g =\u003e g.Success).Name;\r\n    var grp = match.SuccessfulGroups.Skip(1).Single().Name;\r\n    System.Console.WriteLine(grp);\r\n    position += match.Length;\r\n}\r\n\r\n```\r\n\r\n\r\n### Alternative Designs\r\n\r\nThe successful group collection could also be a property on the GroupCollection type. \r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORhDIMw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5DQAn1",
                                           "createdAt":  "2022-05-17T00:28:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nEspecially with the recent improvements in regexs it is very much feasible to write large alteration regexes for tokenization like \r\n    `(?\u003cwhitespace\u003e\\s+)|(?\u003cident\u003e[_a-z][_a-z0-9]*)|(?\u003cnumber\u003e[0-9]+)|(?\u003ccomma\u003e,)`\r\nThe Match for this Regex has all groups in the `Groups` collection but only one has Success == true. So to find the one that succeeded, one needs to iterate through all of them and check. Something like:\r\n`match.Groups.Values.Where(g =\u003e g.Success)` (or similar to disregard the 0th group and find the single reemaining0\r\nThis eats into the performance of the regex since internally it is smarter and does not have to try all groups linearly but this is a linear search after the match.\r\nIs it possible to add a SucceededGroups (or SuccessfulGroups) collection to Match ?\n\n### API Proposal\n\n```csharp\r\nnamespace System.Collections.Generic;\r\n\r\npublic class Match : Group\r\n{\r\n    public virtual ISet\u003cGroup\u003e SuccessfulGroups { get; } \r\n    // remaining members\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar regex = new Regex(@\"\\G(?\u003cspace\u003e\\s+)|(?\u003cident\u003e[_a-z][_a-z0-9]*)|(?\u003cnum\u003e[0-9]+)|(?\u003ccomma\u003e,)\");\r\n\r\nwhile (true)\r\n{\r\n    var match = regex.Match(input, position);\r\n    if (!match.Success)\r\n    {\r\n        break;\r\n    }\r\n    // var grp = match.Groups.Values.Skip(1).Single(g =\u003e g.Success).Name;\r\n    var grp = match.SuccessfulGroups.Skip(1).Single().Name;\r\n    System.Console.WriteLine(grp);\r\n    position += match.Length;\r\n}\r\n\r\n```\r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003extofs\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Text.RegularExpressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-17T00:28:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E8hxg",
                                           "createdAt":  "2022-06-15T17:00:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "cc: @olsaarik since we recently were discussing offline something very similar.\r\n\r\nGiven this is a niche case, I\u0027m not sure if having a property off of Match for Successful Groups might be confusing for other consumers which are not using this top-level alternation. We should make sure that whatever we add here won\u0027t confuse existing uses. That said, I have seen enough of this pattern that I do agree that it might be valuable to add. @stephentoub thoughts?",
                                           "updatedAt":  "2022-06-15T17:00:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5E87EO",
                                           "createdAt":  "2022-06-15T19:00:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Other regex libraries have APIs that are the equivalent of something that takes multiple patterns and tells you which one matched. We could consider something like that, too, in the future.",
                                           "updatedAt":  "2022-06-15T19:00:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GEMgz",
                                           "createdAt":  "2022-07-05T21:14:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "xtofs",
                                           "body":  "I agree with Olli\u0027s concern and like Stephen\u0027s suggestion.\r\nAn API like\r\n```Csharp\r\n public static Group MatchOne(IDictionary\u003cstring, string\u003e alternatives, string input)\r\n```\r\nthat avoids iterating through all matching group would work great.\r\nI can implement this with the given API but as mentioned before requires that in the Success case one has to iterate through the list of (top level) Groups and find the one that is a success. \r\n",
                                           "updatedAt":  "2022-07-05T21:14:32Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: improved API to find succeeded top level alternation groups.",
        "labels":  [
                       "api-suggestion",
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/69616",
        "createdAt":  "2022-05-20T17:39:24Z",
        "number":  69616,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7-mzw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GSPP",
                                            "createdAt":  "2022-05-22T10:06:00Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2022-05-22T16:26:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "WeihanLi",
                                            "createdAt":  "2024-10-20T02:14:20Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2022-12-18T20:19:29Z",
        "body":  "If a developer specifies `RegexOptions.IgnorePatternWhitespace` or uses the `(?x)` inline option, they can embed `# comments` inside their regex pattern.  Today the parser simply throws these away.  When in the context of the source generator, we could instead store them and try to propagate them to the generated C# code as C# comments at an appropriate location in the source.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORC5SIA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5DipzQ",
                                           "createdAt":  "2022-05-20T17:39:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIf a developer specifies `RegexOptions.IgnorePatternWhitespace` or uses the `(?x)` inline option, they can embed `# comments` inside their regex pattern.  Today the parser simply throws these away.  When in the context of the source generator, we could instead store them and try to propagate them to the generated C# code at an appropriate location.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-05-20T17:39:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Dmu3z",
                                           "createdAt":  "2022-05-23T06:16:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCeNQTg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "joperezr",
                                                                               "createdAt":  "2022-05-23T17:23:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "GSPP",
                                           "body":  "It is amazing to see all this regex work happening. I can see the amount of sophistication that goes into building this new engine. This is going to be state of the art. 👍 ",
                                           "updatedAt":  "2022-05-23T06:16:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ELje8",
                                           "createdAt":  "2022-06-01T17:00:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "I suppose the parser would only create the comment nodes when being called from the source generator? I assume we wouldn\u0027t want to create these extra nodes (even when people enable the option for ignoring whitespaces) for any of the other engines.",
                                           "updatedAt":  "2022-06-01T17:00:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ELlIg",
                                           "createdAt":  "2022-06-01T17:06:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I suppose the parser would only create the comment nodes when being called from the source generator?\r\n\r\nThat was my thinking.\r\n\r\nThe hard part here I think is figuring out to which node the comments actually apply.  We also have a lot of assumptions in the tree about how many children each kind of node can have, and we probably don\u0027t want to disrupt that for this, so we\u0027d likely need some side-channel.",
                                           "updatedAt":  "2022-06-01T17:06:13Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Consider propagating regex comments to source-generated code",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72834",
        "createdAt":  "2022-07-26T07:00:30Z",
        "number":  72834,
        "author":  "runfoapp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-10T15:00:38Z",
        "body":  "Build terminating in CI with little indication why on TvOS:\r\nhttps://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-03666e5d9e604c64bd/System.Text.RegularExpressions.Tests/1/console.adbd082e.log?%3Fhelixlogtype%3Dresult\r\n\r\n```\r\n  [211/217] xunit.execution.dotnet.dll -\u003e xunit.execution.dotnet.dll.s, xunit.execution.dotnet.dll-llvm.o, xunit.execution.dotnet.aotdata\r\n  [212/217] xunit.runner.utility.netcoreapp10.dll -\u003e xunit.runner.utility.netcoreapp10.dll.s, xunit.runner.utility.netcoreapp10.dll-llvm.o, xunit.runner.utility.netcoreapp10.aotdata\r\n  [213/217] System.Text.RegularExpressions.Tests.dll -\u003e System.Text.RegularExpressions.Tests.dll.s, System.Text.RegularExpressions.Tests.dll-llvm.o, System.Text.RegularExpressions.Tests.aotdata\r\n./xharness-runner.apple.sh: line 173: 16241 Terminated: 15          source command.sh\r\nRemoving empty log files:\r\nls: /tmp/helix/working/AADA097D/w/AF48095E/uploads/xunit-*.xml: No such file or directory\r\n+ exit_code=143\r\n```\r\n\r\n\u003c!-- runfo report start --\u003e\r\nRunfo Tracking Issue: [system.text.regularexpressions.tests work item](https://runfo.azurewebsites.net/tracking/issue/394)\r\n|Build|Definition|Kind|Run Name|\r\n|---|---|---|---|\r\n\r\n\r\n\r\nBuild Result Summary\r\n|Day Hit Count|Week Hit Count|Month Hit Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\r\n\u003c!-- runfo report end --\u003e\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR5C7rQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HO4-w",
                                           "createdAt":  "2022-07-26T07:00:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\u003c!-- runfo report start --\u003e\r\nRunfo Creating Tracking Issue (data being generated)\r\n\u003c!-- runfo report end --\u003e\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erunfoapp[bot]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-26T07:00:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HO7Z1",
                                           "createdAt":  "2022-07-26T07:11:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-tvos\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nBuild terminating in CI with little indication why on TvOS:\r\nhttps://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-03666e5d9e604c64bd/System.Text.RegularExpressions.Tests/1/console.adbd082e.log?%3Fhelixlogtype%3Dresult\r\n\r\n```\r\n  [211/217] xunit.execution.dotnet.dll -\u003e xunit.execution.dotnet.dll.s, xunit.execution.dotnet.dll-llvm.o, xunit.execution.dotnet.aotdata\r\n  [212/217] xunit.runner.utility.netcoreapp10.dll -\u003e xunit.runner.utility.netcoreapp10.dll.s, xunit.runner.utility.netcoreapp10.dll-llvm.o, xunit.runner.utility.netcoreapp10.aotdata\r\n  [213/217] System.Text.RegularExpressions.Tests.dll -\u003e System.Text.RegularExpressions.Tests.dll.s, System.Text.RegularExpressions.Tests.dll-llvm.o, System.Text.RegularExpressions.Tests.aotdata\r\n./xharness-runner.apple.sh: line 173: 16241 Terminated: 15          source command.sh\r\nRemoving empty log files:\r\nls: /tmp/helix/working/AADA097D/w/AF48095E/uploads/xunit-*.xml: No such file or directory\r\n+ exit_code=143\r\n```\r\n\r\n\u003c!-- runfo report start --\u003e\r\nRunfo Tracking Issue: [system.text.regularexpressions.tests work item](https://runfo.azurewebsites.net/tracking/issue/394)\r\n|Build|Definition|Kind|Run Name|Console|Core Dump|Test Results|Run Client|\r\n|---|---|---|---|---|---|---|---|\r\n|[1902387](https://dev.azure.com/dnceng/public/_build/results?buildId=1902387)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|Rolling|net7.0-tvOS-Release-arm64-Mono_Release-OSX.1100.Amd64.AppleTV.Open|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-03666e5d9e604c64bd/System.Text.RegularExpressions.Tests/1/console.adbd082e.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-03666e5d9e604c64bd/System.Text.RegularExpressions.Tests/475798eb-92c6-4bb7-a464-8be08c2a25a7.log?%3F%253Fhelixlogtype%253Dresult)|\r\n|[1902034](https://dev.azure.com/dnceng/public/_build/results?buildId=1902034)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|Rolling|net7.0-Linux-Release-x64-CoreCLR_release-(Fedora.34.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-34-helix-20220523150939-4f64125|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-preview5f9d1e71459d7430b83/System.Text.RegularExpressions.Tests.Attempt.3/1/console.08d42a74.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-preview5f9d1e71459d7430b83/System.Text.RegularExpressions.Tests.Attempt.3/c1a65451-dd63-4a55-a4e1-315b825ce4ef.log?%3F%253Fhelixlogtype%253Dresult)|\r\n|[1902000](https://dev.azure.com/dnceng/public/_build/results?buildId=1902000)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|[PR 72706](https://github.com/dotnet/runtime/pull/72706)|net7.0-tvOS-Release-arm64-Mono_Release-OSX.1100.Amd64.AppleTV.Open|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-72706-merge-4d0ae06c2a124cacac/System.Text.RegularExpressions.Tests/1/console.a48298d2.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-72706-merge-4d0ae06c2a124cacac/System.Text.RegularExpressions.Tests/6b2513ac-1209-4abc-9d47-3c8485805916.log?%3F%253Fhelixlogtype%253Dresult)|\r\n|[1902000](https://dev.azure.com/dnceng/public/_build/results?buildId=1902000)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|[PR 72706](https://github.com/dotnet/runtime/pull/72706)|net7.0-tvOS-Release-arm64-Mono_Release-OSX.1100.Amd64.AppleTV.Open|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-72706-merge-bc58e551e43d4e80b9/System.Text.RegularExpressions.Tests/1/console.609a916c.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-72706-merge-bc58e551e43d4e80b9/System.Text.RegularExpressions.Tests/677f09d2-6128-4ab9-8ed8-6d97b570cb2a.log?%3F%253Fhelixlogtype%253Dresult)|\r\n|[1901961](https://dev.azure.com/dnceng/public/_build/results?buildId=1901961)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|[PR 72802](https://github.com/dotnet/runtime/pull/72802)|net7.0-tvOS-Release-arm64-Mono_Release-OSX.1100.Amd64.AppleTV.Open|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-72802-merge-26bf2b49bbc1486e94/System.Text.RegularExpressions.Tests/1/console.2afb4cb8.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-72802-merge-26bf2b49bbc1486e94/System.Text.RegularExpressions.Tests/2381b9fb-fcf5-4394-accb-1c55f27fa504.log?%3F%253Fhelixlogtype%253Dresult)|\r\n|[1901750](https://dev.azure.com/dnceng/public/_build/results?buildId=1901750)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|[PR 72545](https://github.com/dotnet/runtime/pull/72545)|net7.0-tvOS-Release-arm64-Mono_Release-OSX.1100.Amd64.AppleTV.Open|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-72545-merge-ec5b40769f2c446698/System.Text.RegularExpressions.Tests/1/console.51cb57d8.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-72545-merge-ec5b40769f2c446698/System.Text.RegularExpressions.Tests/a613d1a8-26a9-4859-9bc5-fcf175c70b3c.log?%3F%253Fhelixlogtype%253Dresult)|\r\n|[1901717](https://dev.azure.com/dnceng/public/_build/results?buildId=1901717)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|[PR 72554](https://github.com/dotnet/runtime/pull/72554)|net7.0-tvOS-Release-arm64-Mono_Release-OSX.1100.Amd64.AppleTV.Open|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-72554-merge-9ce6ab00321749a096/System.Text.RegularExpressions.Tests/1/console.d4d2155e.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-72554-merge-9ce6ab00321749a096/System.Text.RegularExpressions.Tests/992edb47-f7de-4bf3-8503-045a05b4bdc1.log?%3F%253Fhelixlogtype%253Dresult)|\r\n|[1901444](https://dev.azure.com/dnceng/public/_build/results?buildId=1901444)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|[PR 72707](https://github.com/dotnet/runtime/pull/72707)|net7.0-tvOS-Release-arm64-Mono_Release-OSX.1100.Amd64.AppleTV.Open|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-72707-merge-8544b7cf64c8470b9a/System.Text.RegularExpressions.Tests/1/console.99e3fe4a.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-72707-merge-8544b7cf64c8470b9a/System.Text.RegularExpressions.Tests/4abced96-13b6-43b5-b283-8d7dfd08829b.log?%3F%253Fhelixlogtype%253Dresult)|\r\n|[1901068](https://dev.azure.com/dnceng/public/_build/results?buildId=1901068)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|Rolling|net7.0-tvOS-Release-arm64-Mono_Release-OSX.1100.Amd64.AppleTV.Open|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-3c788309d25e4f659e/System.Text.RegularExpressions.Tests/1/console.3e184b9e.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-3c788309d25e4f659e/System.Text.RegularExpressions.Tests/d64a2122-dbee-4b03-bce6-b2f9043b4c2d.log?%3F%253Fhelixlogtype%253Dresult)|\r\n|[1900887](https://dev.azure.com/dnceng/public/_build/results?buildId=1900887)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|Rolling|net7.0-Linux-Release-x64-CoreCLR_release-(Fedora.34.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-34-helix-20220523150939-4f64125|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-preview5eaddb923c77e422c8d/System.Text.RegularExpressions.Tests.Attempt.3/1/console.0180da11.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-preview5eaddb923c77e422c8d/System.Text.RegularExpressions.Tests.Attempt.3/ff777c07-6e68-4486-a441-05e49e1fbe9b.log?%3F%253Fhelixlogtype%253Dresult)|\r\n|[1900783](https://dev.azure.com/dnceng/public/_build/results?buildId=1900783)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|[PR 67861](https://github.com/dotnet/runtime/pull/67861)|net7.0-tvOS-Release-arm64-Mono_Release-OSX.1100.Amd64.AppleTV.Open|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-67861-merge-37b41f16f15a4215bf/System.Text.RegularExpressions.Tests/1/console.2b429584.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-67861-merge-37b41f16f15a4215bf/System.Text.RegularExpressions.Tests/4236cf27-b87b-4925-a382-5fa0f3eb2d06.log?%3F%253Fhelixlogtype%253Dresult)|\r\n|[1900774](https://dev.azure.com/dnceng/public/_build/results?buildId=1900774)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|[PR 72545](https://github.com/dotnet/runtime/pull/72545)|net7.0-tvOS-Release-arm64-Mono_Release-OSX.1100.Amd64.AppleTV.Open|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-72545-merge-e6afcf1cb81a48cbba/System.Text.RegularExpressions.Tests/1/console.e696515a.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-72545-merge-e6afcf1cb81a48cbba/System.Text.RegularExpressions.Tests/a45ee6fb-6ec8-44c9-a248-4db879c10407.log?%3F%253Fhelixlogtype%253Dresult)|\r\n|[1900774](https://dev.azure.com/dnceng/public/_build/results?buildId=1900774)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|[PR 72545](https://github.com/dotnet/runtime/pull/72545)|net7.0-MacCatalyst-Release-arm64-Mono_Release-OSX.1200.Arm64.Open|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-72545-merge-3946d3e07e544e96ac/System.Text.RegularExpressions.Tests/1/console.29935e77.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-72545-merge-3946d3e07e544e96ac/System.Text.RegularExpressions.Tests/204dc287-0e90-4fef-a760-11debd18a200.log?%3F%253Fhelixlogtype%253Dresult)|\r\n|[1900571](https://dev.azure.com/dnceng/public/_build/results?buildId=1900571)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|Rolling|net7.0-tvOS-Release-arm64-Mono_Release-OSX.1100.Amd64.AppleTV.Open|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-dea66078b2b04bc19b/System.Text.RegularExpressions.Tests/1/console.4b86be11.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-dea66078b2b04bc19b/System.Text.RegularExpressions.Tests/a9ce062f-6cd2-4348-882b-6958f8601cdf.log?%3F%253Fhelixlogtype%253Dresult)|\r\n|[1900480](https://dev.azure.com/dnceng/public/_build/results?buildId=1900480)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|Rolling|net7.0-Linux-Release-x64-CoreCLR_release-(Fedora.34.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-34-helix-20220523150939-4f64125|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-preview5d1d9a4ca352f4ff7b7/System.Text.RegularExpressions.Tests.Attempt.3/1/console.fe40903a.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-preview5d1d9a4ca352f4ff7b7/System.Text.RegularExpressions.Tests.Attempt.3/27f95b2f-4979-48dd-ba4c-19f2d804354f.log?%3F%253Fhelixlogtype%253Dresult)|\r\n|[1900064](https://dev.azure.com/dnceng/public/_build/results?buildId=1900064)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|Rolling|net7.0-Linux-Release-x64-CoreCLR_release-(Fedora.34.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-34-helix-20220523150939-4f64125|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-preview54ec82d7b2b1247f8b0/System.Text.RegularExpressions.Tests.Attempt.3/1/console.1b505e66.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-preview54ec82d7b2b1247f8b0/System.Text.RegularExpressions.Tests.Attempt.3/31e05cc4-d0a1-4b0f-80d2-4fdfabafe62f.log?%3F%253Fhelixlogtype%253Dresult)|\r\n|[1899653](https://dev.azure.com/dnceng/public/_build/results?buildId=1899653)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|Rolling|net7.0-Linux-Release-x64-CoreCLR_release-(Fedora.34.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-34-helix-20220523150939-4f64125|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-preview53668bf0519394b7b87/System.Text.RegularExpressions.Tests.Attempt.3/1/console.64ddbbb2.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-preview53668bf0519394b7b87/System.Text.RegularExpressions.Tests.Attempt.3/00a2d86e-27bd-429d-b654-13819297960a.log?%3F%253Fhelixlogtype%253Dresult)|\r\n|[1899117](https://dev.azure.com/dnceng/public/_build/results?buildId=1899117)|[runtime-extra-platforms](https://dnceng.visualstudio.com/public/_build?definitionId=1080)|Rolling|net7.0-Linux-Release-x64-CoreCLR_release-(Fedora.34.Amd64.Open)ubuntu.1604.amd64.open@mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-34-helix-20220523150939-4f64125|[console.log](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-preview529b3617ad9104826bc/System.Text.RegularExpressions.Tests.Attempt.3/1/console.120393bb.log?%3F%253Fhelixlogtype%253Dresult)|||[runclient.py](https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-release-70-preview529b3617ad9104826bc/System.Text.RegularExpressions.Tests.Attempt.3/01370b9d-3f46-40df-8570-2f744c079f18.log?%3F%253Fhelixlogtype%253Dresult)|\r\n\r\n\r\n\r\nBuild Result Summary\r\n|Day Hit Count|Week Hit Count|Month Hit Count|\r\n|---|---|---|\r\n|8|16|16|\r\n\r\n\u003c!-- runfo report end --\u003e\r\n\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erunfoapp[bot]\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`, `blocking-clean-ci`, `untriaged`, `os-tvos`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-26T07:11:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HO7f0",
                                           "createdAt":  "2022-07-26T07:12:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "noahfalk",
                                           "body":  "This may be the same build issue as: https://github.com/dotnet/runtime/issues/72836",
                                           "updatedAt":  "2022-07-26T07:12:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HQKUL",
                                           "createdAt":  "2022-07-26T12:28:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "The issue is the test suite untrimmed will generate an app size around 1GB.  For whatever reason, the helix machines churn when trying to build it and end up timing out. The solution I think will work is to bring over the aggressive trimming test targets that exist in https://github.com/dotnet/runtime/blob/73374e8ee580b86204a8aafa95e4b04e948baa24/eng/testing/tests.mobile.targets#L179-L217\r\n\r\nThat will bring the app size down to about 300MB, which the helix machines should be able to handle without much trouble.  Until the targets and xml descriptor files are sent over, the tests should be skipped.",
                                           "updatedAt":  "2022-07-26T12:28:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HkLut",
                                           "createdAt":  "2022-08-01T04:01:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "Suite was disabled and will look to bring it back in 8.0",
                                           "updatedAt":  "2022-08-01T04:01:24Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "system.text.regularexpressions.tests work item",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "disabled-test",
                       "os-tvos"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73206",
        "createdAt":  "2022-08-02T03:27:42Z",
        "number":  73206,
        "author":  "joperezr",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-02T03:31:47Z",
        "body":  "While porting PCRE2 tests suite, one of the failing tests is:\r\n\r\n```c#\r\nbool isMatch = Regex.IsMatch(\"ab\", \"a\\vb\", RegexOptions.IgnorePatternWhitespace);\r\nAssert.True(isMatch);\r\n```\r\n\r\nThis should probably be true and match other engines like PCRE as `\\v` character should be ignored as whitespace and just have the pattern be `ab`\r\n\r\ncc: @stephentoub ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR6SuvA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HpKeH",
                                           "createdAt":  "2022-08-02T03:27:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhile porting PCRE2 tests suite, one of the failing tests is:\r\n\r\n```c#\r\nbool isMatch = Regex.IsMatch(\"ab\", \"a\\vb\", RegexOptions.IgnorePatternWhitespace);\r\nAssert.True(isMatch);\r\n```\r\n\r\nThis should probably be true and match other engines like PCRE as `\\v` character should be ignored as whitespace and just have the pattern be `ab`\r\n\r\ncc: @stephentoub \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejoperezr\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-02T03:27:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HpK68",
                                           "createdAt":  "2022-08-02T03:31:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "This does seem like a bug; `char.IsWhitespace(\u0027\\v\u0027)` is true, as is `Regex.IsMatch(\"\\v\", @\"\\s\")`.  Presumably it\u0027d be as simple as changing the `Category[0xB]` value in the following table to be \u0027X\u0027:\r\nhttps://github.com/dotnet/runtime/blob/aac729ff906a31f327823587748687c0308a4043/src/libraries/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexParser.cs#L2060-L2062\r\nWe might want to dig a tad deeper, as it feels a little deliberate that cell was left as 0 rather than X.",
                                           "updatedAt":  "2022-08-02T03:31:46Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Regex parser doesn\u0027t ignore vertical tabs in patter when using RegexOptions.IgnorePatternWhiteSpace",
        "labels":  [
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73208",
        "createdAt":  "2022-08-02T03:39:20Z",
        "number":  73208,
        "author":  "joperezr",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-02T13:37:55Z",
        "body":  "While porting PCRE2 tests, one of the tests which is intentionally crafted to ensure that the engine won\u0027t end up in a catastrophic backtracking situation is actually not avoiding it when running it against our .NET engines. The test is:\r\n```c#\r\nRegex.IsMatch(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \"(a+)*b\");\r\n```\r\n\r\nMost of the rest of the engines will quickly find that the input doesn\u0027t match the pattern but we fail to do so and instead end up with catastrophic backtracking. The issue seems to be that when we try to reduce the loops into a simpler pattern like `(a)*b` we fail to do so given that the `a` is in a  capturing group, so we can\u0027t reduce the loops or else that capturing group\u0027s result would be wrong in a successful  match. This is likely something we may just not fix and be just a difference in behavior between our engines and the rest, but logging in here just in case so we can explore if we can do a bit better for these cases.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR635pQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HpLzT",
                                           "createdAt":  "2022-08-02T03:39:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhile porting PCRE2 tests, one of the tests which is intentionally crafted to ensure that the engine won\u0027t end up in a catastrophic backtracking situation is actually not avoiding it when running it against our .NET engines. The test is:\r\n```c#\r\nRegex.IsMatch(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \"(a+)*b\");\r\n```\r\n\r\nMost of the rest of the engines will quickly find that the input doesn\u0027t match the pattern but we fail to do so and instead end up with catastrophic backtracking. The issue seems to be that when we try to reduce the loops into a simpler pattern like `(a)*b` we fail to do so given that the `a` is in a  capturing group, so we can\u0027t reduce the loops or else that capturing group\u0027s result would be wrong in a successful  match. This is likely something we may just not fix and be just a difference in behavior between our engines and the rest, but logging in here just in case so we can explore if we can do a bit better for these cases.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejoperezr\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-02T03:39:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hrfml",
                                           "createdAt":  "2022-08-02T13:37:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e The issue seems to be that when we try to reduce the loops into a simpler pattern like (a)*b we fail to do so given that the a is in a capturing group, so we can\u0027t reduce the loops or else that capturing group\u0027s result would be wrong in a successful match.\r\n\r\nWhat are the other engines actually doing?  I see Java hits catastrophic backtracking.  PCRE doesn\u0027t. But translating the expression in the suggested manner is invalid, so they can\u0027t be doing that.  I suspect what they\u0027re actually doing is issuing a search for the `b` to avoid doing work if there\u0027s no chance the expression would match.  For example, if you tweak your expression from `(a+)*b` to `(a+)*[bc]` (just replacing the single `b` with a character class for `b` or `c`), which I\u0027m guessing defeats whatever single-literal search they\u0027re doing, then PCRE also hits catastrophic backtracking.\r\n\r\nI\u0027ve considered issuing such a search, but I\u0027ve been hesitant to do so as in the case of a successful match, it represents useless work; the upside of course is it avoids potentially a lot of work in the case of no match.  We might apply additional heuristics to try to decide whether the cost of the literal search is likely to be overshadowed, e.g. if we see non-atomic loops in the pattern, then look for such literals to fail-fast if not found.",
                                           "updatedAt":  "2022-08-02T13:37:55Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Regex parser is not reducing some loops which causes some patterns to not be able to avoid catastrophic backtracking",
        "labels":  [
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73223",
        "createdAt":  "2022-08-02T09:20:45Z",
        "number":  73223,
        "author":  "ronaldvdv",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODDaQkQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2022-08-02T16:28:01Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "jyrkive",
                                            "createdAt":  "2023-04-05T13:33:40Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Measurity",
                                            "createdAt":  "2024-07-26T12:38:51Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "elgonzo",
                                            "createdAt":  "2024-09-08T17:37:11Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-09-09T10:07:08Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "CyrusNajmabadi",
                                            "createdAt":  "2024-09-09T19:34:17Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "frasten",
                                            "createdAt":  "2024-09-25T01:24:06Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "raulsntos",
                                            "createdAt":  "2024-10-13T05:41:38Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "GoodSimonVM",
                                            "createdAt":  "2024-10-27T11:51:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "alrz",
                                            "createdAt":  "2024-12-04T03:21:49Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "vchirikov",
                                            "createdAt":  "2025-05-18T15:25:23Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "LanderVanlaer",
                                            "createdAt":  "2025-05-21T11:46:52Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Xpl0itR",
                                            "createdAt":  "2025-05-24T23:04:31Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "xPaw",
                                            "createdAt":  "2025-06-07T17:01:52Z"
                                        }
                                    ],
                          "totalCount":  14
                      },
        "updatedAt":  "2025-04-15T19:54:28Z",
        "body":  "### Background and motivation\n\nIn class `Capture` (namespace `System.Text.RegularExpressions`) we now have the nice addition of the `ValueSpan` property which allows me to access the captured text efficiently. However, to be able to access that property I would still need to access `Match.Groups[num]` which would allocate the full `GroupCollection` and all `Group` instances, which (for my specific use case) defeats the purpose a bit. \n\n### API Proposal\n\n```csharp\r\nnamespace System.Text.RegularExpressions;\r\n\r\npublic class Match : Group\r\n{\r\n    public ReadOnlySpan\u003cchar\u003e GetGroupValueSpan(int groupnum);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nstring text = \"One car red car blue car\";\r\nstring pat = @\"(\\w+)\\s+(car)\";\r\nRegex r = new Regex(pat, RegexOptions.IgnoreCase);\r\nMatch m = r.Match(text);\r\nReadOnlySpan\u003cchar\u003e word = m.GetGroupValueSpan(1); // matches \"One\"\r\n```\r\n\n\n### Alternative Designs\n\n- We might need similar methods for returning the captured text as a `string`\r\n- We may need overloads that accept the group name as a `string`\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp1R6KQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HqKnz",
                                           "createdAt":  "2022-08-02T09:20:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nIn class `Capture` (namespace `System.Text.RegularExpressions`) we now have the nice addition of the `ValueSpan` property which allows me to access the captured text efficiently. However, to be able to access that property I would still need to access `Match.Groups[num]` which would allocate the full `GroupCollection` and all `Group` instances, which (for my specific use case) defeats the purpose a bit. \n\n### API Proposal\n\n```csharp\r\nnamespace System.Text.RegularExpressions;\r\n\r\npublic class Match : Group\r\n{\r\n    public ReadOnlySpan\u003cchar\u003e GetGroupValueSpan(int groupnum);\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nstring text = \"One car red car blue car\";\r\nstring pat = @\"(\\w+)\\s+(car)\";\r\nRegex r = new Regex(pat, RegexOptions.IgnoreCase);\r\nMatch m = r.Match(text);\r\nReadOnlySpan\u003cchar\u003e word = m.GetGroupValueSpan(1); // matches \"One\"\r\n```\r\n\n\n### Alternative Designs\n\n- We might need similar methods for returning the captured text as a `string`\r\n- We may need overloads that accept the group name as a `string`\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eronaldvdv\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Text.RegularExpressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-08-02T09:20:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HqpfV",
                                           "createdAt":  "2022-08-02T11:30:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODhBumw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ClickRick",
                                                                               "createdAt":  "2024-05-07T22:14:12Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "svick",
                                           "body":  "\u003e We might need similar methods for returning the captured text as a `string`\r\n\r\nWhat would be the reason for that? The whole point of this new method is to avoid allocations, but then you also add a version that has an extra allocation? Especially since anyone who does need a `string` can just call `ToString()` on the returned span.\r\n\r\n\u003e We may need overloads that accept the group name as a `string`\r\n\r\nThis one does sound useful to me.",
                                           "updatedAt":  "2022-08-02T11:30:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hqp3X",
                                           "createdAt":  "2022-08-02T11:32:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ronaldvdv",
                                           "body":  "Agree! The idea/question mark came from the fact that we provide both `ValueSpan` and `Value` on `Capture`, but I suspect that is for backward compatibility only.",
                                           "updatedAt":  "2022-08-02T11:32:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HtJnJ",
                                           "createdAt":  "2022-08-02T17:29:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdqR7w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DrummerB",
                                                                               "createdAt":  "2025-08-08T19:17:02Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "joperezr",
                                           "body":  "Thanks for the proposal @ronaldvdv. Not sure if you are aware, but we added some amortized-allocation free APIs that loop through matches in .NET 7, in particular, we added `regex.EnumerateMatches(ReadOnlySpan\u003cchar\u003e input)`.  Today, this returns an enumerator that eventually gets you `ValueMatch` structs which contain the index and the length of the match. We didn\u0027t have time to add groups and captures support on that ValueMatch yet as there are still some things we need to consider in terms of design in order to continue having this be allocation-free. My uber point here, is that I think we would probably prefer to have this sort of support on that `ValueMatch` type as opposed to `Match` since if you really care about allocations, `Match` object is probably still not the best alternative now that we have other options.",
                                           "updatedAt":  "2022-08-02T17:29:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HtScI",
                                           "createdAt":  "2022-08-02T18:06:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ronaldvdv",
                                           "body":  "Interesting!! Yes, indeed if we have an amortized-allocation free option, it\u0027s nice to extend that to include access to individual captures within the match.\r\n- If we would match a single `Regex` pattern against a large set of strings consecutively, would I be sharing the same single `Match` instance throughout those many calls to `Regex.EnumerateMatches()`?\r\n- If we would reuse that `Match` instance, can we also reuse or pool the two-dimensional integer arrays in `Match._matches` (which I think are still being used by `ValueMatch` under the hood)?",
                                           "updatedAt":  "2022-08-02T18:06:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Ht7Ym",
                                           "createdAt":  "2022-08-02T21:16:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "\u003e If we would match a single Regex pattern against a large set of strings consecutively, would I be sharing the same single Match instance throughout those many calls to Regex.EnumerateMatches()?\r\n\r\nAssuming you are using the same regex object to call for the different inputs, then yes. When `EnumerateMatches` is called, only one internal `Match` object will be created `RegexRunner._runmatch` (if it wasn\u0027t created already by a previous call to the same regex instance) and this will get reused both while enumerating all of the results on each input, as well as everytime you provide a new input to match (in which case it just gets reset first before it gets used).\r\n\r\n\u003e If we would reuse that Match instance, can we also reuse or pool the two-dimensional integer arrays in Match._matches (which I think are still being used by ValueMatch under the hood)?\r\n\r\nThat is the tricky part and why it wasn\u0027t added yet for 7.0. `ValueSpan` is a ref struct which only contains the index and length of the match, it can\u0027t really keep a reference to the `_runmatch` object it was used to create it since as we\u0027ve discussed above, this will get reused so there is no guarantees that the group or `_matches` info will be accurate/relevant when we are querying it. Also, if possible we would like to avoid having to allocate arrays for the groups and matches when creating a `ValueSpan` as that would make it no longer alloc-free. I added a draft of a proposal of what it would look like to add this where you can optionally ask EnumerateMatches to also include Capture data with the expense of knowing that this might incur in few allocations: https://github.com/dotnet/runtime/issues/65011#issuecomment-1093163459",
                                           "updatedAt":  "2022-08-02T21:16:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hy5Ak",
                                           "createdAt":  "2022-08-03T21:51:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ronaldvdv",
                                           "body":  "Thanks for providing more background! I still struggle a little bit to understand how the approach described in #65011 would help for the original question in this issue. I hope you don\u0027t mind me asking a follow-up here.\r\n\r\nIf we would tell `EnumerateMatches` to also store capture data, would that mean `Match` instance(s) are populated just like when we would _not_ be using `ValueMatch` at all? Then how would that improve the performance for getting group data compared to the existing implementation?\r\n\r\nIt seems to me we would still need an additional method that skips the creation of `Group` instances as proposed above. That method could either be placed in either `ValueMatch` (if it has access to the group data within its `Match` instance) or on `Match` itself, but ultimately it would be using data from `Match` so I\u0027m not sure what the added value of `ValueMatch` would be in the solution to the problem at hand. Would it provide pooling/reuse of the `Match` instance and would `EnumerateMatches` be the only way to enjoy that benefit, r is there something else I\u0027m missing?",
                                           "updatedAt":  "2022-08-03T21:51:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hy-PJ",
                                           "createdAt":  "2022-08-03T22:22:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "\u003e I hope you don\u0027t mind me asking a follow-up here.\r\n\r\nNot at all, questions are always welcomed 😄 \r\n\r\n\u003e If we would tell EnumerateMatches to also store capture data, would that mean Match instance(s) are populated just like when we would not be using ValueMatch at all? \r\n\r\nNothing would change with the internal Match object, that would still have the same fields that track capture data, but remember that this Match object gets reused, so we can\u0027t rely on it to get the capture groups data. That means that the way to get this info would have to be through the `ValueMatch` instance that gets returned for each match, meaning we would need to copy this data over to that match. The current info on that match are only two ints, which means that this match instance is allocation-free today. If we wanted to also store the capture data on it, we would have to then allocate a `ValueTuple\u003cint index, int length\u003e` array to store that capture data, but that means our `ValueMatch` is no longer allocation free, as it needs to allocate that array. This is why we would want that to be an opt-in option in case you care about capture data, but if your pattern doesn\u0027t have captures or you don\u0027t care about them, then we remain allocation-free.\r\n\r\n\u003e Then how would that improve the performance for getting group data compared to the existing implementation?\r\n\r\nIt would improve since we wouldn\u0027t have to return a `Match` object, as we could instead just reuse the internal runner\u0027s `runmatch` field and we could also operate over passed in spans. Current implementation is never allocation-free, as whenever you get a `Match` object back, it means we have to allocate that match object for every match you try. That\u0027s the main advantage of working with `EnumerateMatches` and `ValueMatch` matches instead, since those are ref structs (which don\u0027t need allocation) and for every match you try we just reuse the only-one-time-allocated internal `runmatch`.\r\n\r\n\u003e Would it provide pooling/reuse of the Match instance and would EnumerateMatches be the only way to enjoy that benefit, r is there something else I\u0027m missing?\r\n\r\nExactly. With this approach you only allocate `Match` and it\u0027s fields (including groups) once, and reuse them, and all `ValueMatch` returned only have one `ValueTuple\u003cint,int\u003e[]` allocation in case you had capturing groups and you cared about the capture data.\r\n\r\n",
                                           "updatedAt":  "2022-08-03T22:22:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6WpHsu",
                                           "createdAt":  "2024-12-09T09:19:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alrz",
                                           "body":  "I have commented this as an alternative in #110383\n\n```cs\nnamespace System.Text.RegularExpressions;\n\npublic readonly ref struct ValueMatch\n{\n     // only returns successful matches \n+    public ValueGroupEnumerator EnumerateGroups();\n}\n```\nThe drawback is that this doesn\u0027t match the majority of the use cases where you want to collect specific groups.\n\nI\u0027d argue with  many struct enumerators being added, https://github.com/dotnet/roslyn/pull/66553 would be actually a nice addition to work with these APIs.\n\n```cs\nif (match.EnumerateGroups() is [var first, var second, ..])\nif (span.Split(\u0027:\u0027) is [var first, var second])\n```\nHowever I think it also makes sense to have both APIs next to each other. \n\nPS: It could also support named groups through \"dictionary/indexer patterns\" but I think that\u0027s [another discussion altogether](https://github.com/dotnet/csharplang/discussions/4889).",
                                           "updatedAt":  "2024-12-09T10:19:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bpOUs",
                                           "createdAt":  "2025-01-24T00:15:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ChadNedzlek",
                                           "body":  "I just ran into this issue today when trying to handle a large log file parsing. If I want to do any reading of the values that I regexed (which I almost _always_ do... I can\u0027t remember the last time I wrote a non-capturing regex), I have no choice but to stringify the entire span I want to search... which in this case means stringifying a gigabyte long log file, which I\u0027d really like to avoid. Or whenever a match is hit, stringify the match and then run the Regex a second time (which in my case _still_ ends up stringifying the whole file AND double running every regex)",
                                           "updatedAt":  "2025-01-24T00:39:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nVHop",
                                           "createdAt":  "2025-04-15T19:54:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEhePwA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "RobertGiesecke",
                                                                               "createdAt":  "2025-06-06T10:58:55Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xPaw",
                                                                               "createdAt":  "2025-06-07T17:05:13Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "DrummerB",
                                                                               "createdAt":  "2025-08-08T19:17:38Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "vborovikov",
                                                                               "createdAt":  "2025-09-09T11:41:51Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "rbnswartz",
                                           "body":  "This would be really appreciated. The current enumerable is wonderful but having indexes for where the groups are would open up so many more opportunities.",
                                           "updatedAt":  "2025-04-15T19:54:26Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[API Proposal]: Access Regex group without allocations",
        "labels":  [
                       "api-suggestion",
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77409",
        "createdAt":  "2022-10-24T21:24:52Z",
        "number":  77409,
        "author":  "timmydo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-27T14:38:09Z",
        "body":  "### Description\n\nIf A.cs and B.cs both have `public partial class C` and both have methods needing a `new Regex()` -\u003e `[GeneratedRegex]` replacement, the source generator fix puts `MyRegex()` in both files, which causes a compilation error. I invoked the fix by running `dotnet-format project.csproj --diagnostics SYSLIB1045 --no-restore`.\n\n### Reproduction Steps\n\n```\r\nusing System.Text.RegularExpressions;\r\n\r\nnamespace RegexReplacement\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello, World!\");\r\n        }\r\n    }\r\n\r\n    internal partial class C\r\n    {\r\n        public static Regex A()\r\n        {\r\n            var r = new Regex(\"abc\");\r\n            return r;\r\n        }\r\n    }\r\n\r\n    internal partial class C\r\n    {\r\n        public static Regex B()\r\n        {\r\n            var r = new Regex(\"def\");\r\n            return r;\r\n        }\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\n```\r\nusing System.Text.RegularExpressions;\r\n\r\nnamespace RegexReplacement\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello, World!\");\r\n        }\r\n    }\r\n\r\n    internal partial class C\r\n    {\r\n        public static Regex A()\r\n        {\r\n            var r = MyRegex();\r\n            return r;\r\n        }\r\n\r\n        [GeneratedRegex(\"abc\")]\r\n        private static partial Regex MyRegex();\r\n    }\r\n\r\n    internal partial class C\r\n    {\r\n        public static Regex B()\r\n        {\r\n            var r = MyRegex();\r\n            return r;\r\n        }\r\n\r\n        [GeneratedRegex(\"def\")]\r\n        private static partial Regex MyRegex2();\r\n    }\r\n}\r\n```\n\n### Actual behavior\n\n```\r\nusing System.Text.RegularExpressions;\r\n\r\nnamespace RegexReplacement\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello, World!\");\r\n        }\r\n    }\r\n\r\n    internal partial class C\r\n    {\r\n        public static Regex A()\r\n        {\r\n            var r = MyRegex();\r\n            return r;\r\n        }\r\n\r\n        [GeneratedRegex(\"abc\")]\r\n        private static partial Regex MyRegex();\r\n    }\r\n\r\n    internal partial class C\r\n    {\r\n        public static Regex B()\r\n        {\r\n            var r = MyRegex();\r\n            return r;\r\n        }\r\n\r\n        [GeneratedRegex(\"def\")]\r\n        private static partial Regex MyRegex();\r\n    }\r\n}\r\n```\n\n### Regression?\n\nno\n\n### Known Workarounds\n\nmanual fix\n\n### Configuration\n\n$ dotnet-format --version\r\n7.0.351204+c1136d16ab588f45727fe908212b90578edc2aff\r\n\r\n7.0.100-rc.1.22431.12 [C:\\Program Files\\dotnet\\sdk]\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTOAh2A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5M3kr5",
                                           "createdAt":  "2022-10-24T21:24:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIf A.cs and B.cs both have `public partial class C` and both have methods needing a `new Regex()` -\u003e `[GeneratedRegex]` replacement, the source generator fix puts `MyRegex()` in both files, which causes a compilation error. I invoked the fix by running `dotnet-format project.csproj --diagnostics SYSLIB1045 --no-restore`.\n\n### Reproduction Steps\n\n```\r\nusing System.Text.RegularExpressions;\r\n\r\nnamespace RegexReplacement\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello, World!\");\r\n        }\r\n    }\r\n\r\n    internal partial class C\r\n    {\r\n        public static Regex A()\r\n        {\r\n            var r = new Regex(\"abc\");\r\n            return r;\r\n        }\r\n    }\r\n\r\n    internal partial class C\r\n    {\r\n        public static Regex B()\r\n        {\r\n            var r = new Regex(\"def\");\r\n            return r;\r\n        }\r\n    }\r\n}\r\n```\n\n### Expected behavior\n\n```\r\nusing System.Text.RegularExpressions;\r\n\r\nnamespace RegexReplacement\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello, World!\");\r\n        }\r\n    }\r\n\r\n    internal partial class C\r\n    {\r\n        public static Regex A()\r\n        {\r\n            var r = MyRegex();\r\n            return r;\r\n        }\r\n\r\n        [GeneratedRegex(\"abc\")]\r\n        private static partial Regex MyRegex();\r\n    }\r\n\r\n    internal partial class C\r\n    {\r\n        public static Regex B()\r\n        {\r\n            var r = MyRegex();\r\n            return r;\r\n        }\r\n\r\n        [GeneratedRegex(\"def\")]\r\n        private static partial Regex MyRegex2();\r\n    }\r\n}\r\n```\n\n### Actual behavior\n\n```\r\nusing System.Text.RegularExpressions;\r\n\r\nnamespace RegexReplacement\r\n{\r\n    internal class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello, World!\");\r\n        }\r\n    }\r\n\r\n    internal partial class C\r\n    {\r\n        public static Regex A()\r\n        {\r\n            var r = MyRegex();\r\n            return r;\r\n        }\r\n\r\n        [GeneratedRegex(\"abc\")]\r\n        private static partial Regex MyRegex();\r\n    }\r\n\r\n    internal partial class C\r\n    {\r\n        public static Regex B()\r\n        {\r\n            var r = MyRegex();\r\n            return r;\r\n        }\r\n\r\n        [GeneratedRegex(\"def\")]\r\n        private static partial Regex MyRegex();\r\n    }\r\n}\r\n```\n\n### Regression?\n\nno\n\n### Known Workarounds\n\nmanual fix\n\n### Configuration\n\n$ dotnet-format --version\r\n7.0.351204+c1136d16ab588f45727fe908212b90578edc2aff\r\n\r\n7.0.100-rc.1.22431.12 [C:\\Program Files\\dotnet\\sdk]\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etimmydo\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-10-24T21:24:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M3lCb",
                                           "createdAt":  "2022-10-24T21:26:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "timmydo",
                                           "body":  "@joperezr ",
                                           "updatedAt":  "2022-10-24T21:26:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5M4CHY",
                                           "createdAt":  "2022-10-24T23:09:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "Thanks for logging this @timmydo. I think the issue is not so much on the fact that you have a type defined in separate files, I think the issue is essentially due to the way you are invoking the code fixer instead. We do have some code in the code fixer that will handle name clashes and ensure this doesn\u0027t happen:\r\nhttps://github.com/dotnet/runtime/blob/9290f85d9cd4e6dd523f11f0c3fef7a2b7e15ee4/src/libraries/System.Text.RegularExpressions/gen/UpgradeToGeneratedRegexCodeFixer.cs#L105-L120\r\n\r\nbut I think that this is not working correctly when multiple code fixers are being invoked at the same time, so we should fix this issue.",
                                           "updatedAt":  "2022-10-24T23:09:56Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "SYSLIB1045 Use GeneratedRegex auto-correct causes CS0756 multiple defining declarations",
        "labels":  [
                       "bug",
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/77994",
        "createdAt":  "2022-11-07T22:54:47Z",
        "number":  77994,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-11-07T22:54:52Z",
        "body":  "While processing the regex node tree, we normalize certain forms of sets. One such case is normalizing a set like [\\u0001-\\uFFFF], which includes everything but \\0, into a negated set of just \\0.  This negation, however, impairs later ability to \"merge\" this character class with another.  In FindFirstCharClass, for example, the analyzer looks at the expression and tries to determine an upper bound on the characters that could possibly match at the beginning of the expression.  For example, given the expression \"a*c+e*\", it would create the set [ac], as a valid match could begin with either \u0027a\u0027 or \u0027c\u0027.  It does this by building up a character class, and any time it wants to add an additional set into the one being built up, it checks the CanMerge property.  Once CanMerge returns false, it gives up, and FindFirstCharClass returns null.  The problem here is CanMerge returns false for negated sets, so if we have a pattern like \"[\\u0000-\\uFFFE]*a\", the analyzer will give up, because this will be translated into \"[^\\uFFFF]*a\", and it will fail to merge the \u0027a\u0027 into the negated set it\u0027s built up as part of the analysis. We should improve the merging to support at least some form of negated sets, and we should also reconsider the normalization (but the same issue in this example would have happened if the developer wrote the transformed pattern out manually).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOTd0XxA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5N3RfE",
                                           "createdAt":  "2022-11-07T22:54:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWhile processing the regex node tree, we normalize certain forms of sets. One such case is normalizing a set like [\\u0001-\\uFFFF], which includes everything but \\0, into a negated set of just \\0.  This negation, however, impairs later ability to \"merge\" this character class with another.  In FindFirstCharClass, for example, the analyzer looks at the expression and tries to determine an upper bound on the characters that could possibly match at the beginning of the expression.  For example, given the expression \"a*c+e*\", it would create the set [ac], as a valid match could begin with either \u0027a\u0027 or \u0027c\u0027.  It does this by building up a character class, and any time it wants to add an additional set into the one being built up, it checks the CanMerge property.  Once CanMerge returns false, it gives up, and FindFirstCharClass returns null.  The problem here is CanMerge returns false for negated sets, so if we have a pattern like \"[\\u0000-\\uFFFE]*a\", the analyzer will give up, because this will be translated into \"[^\\uFFFF]*a\", and it will fail to merge the \u0027a\u0027 into the negated set it\u0027s built up as part of the analysis. We should improve the merging to support at least some form of negated sets, and we should also reconsider the normalization (but the same issue in this example would have happened if the developer wrote the transformed pattern out manually).\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-07T22:54:52Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "RegexCharClass.CanMerge inhibits optimization based on previous optimization",
        "labels":  [
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/78115",
        "createdAt":  "2022-11-09T17:06:53Z",
        "number":  78115,
        "author":  "MaceWindu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-11T05:31:09Z",
        "body":  "### Description\n\nWhen regular expression defined in #if-#else-#endif scope, generated partial method placed at the end of class which requires manual edit to move it to desired position. What is interesting, if there is no code between directives and end of class, generated code is placed inside of directive scope as expected.\r\n\r\n\n\n### Reproduction Steps\n\n```cs\r\npublic class SomeClass\r\n{\r\n#if NET7_0_OR_GREATER\r\n        private static readonly Regex _escapeIfdef = MyRegex();\r\n#endif\r\n\r\n        public void Method()\r\n        {\r\n        }\r\n}\r\n```\n\n### Expected behavior\n\n```cs\r\npublic class SomeClass\r\n{\r\n#if NET7_0_OR_GREATER\r\n        private static readonly Regex _escapeIfdef = MyRegex();\r\n\r\n        [GeneratedRegex(\"regex\")]\r\n        private static partial Regex MyRegex();\r\n#endif\r\n\r\n        public void Method()\r\n        {\r\n        }\r\n}\r\n```\n\n### Actual behavior\n\n```cs\r\npublic class SomeClass\r\n{\r\n#if NET7_0_OR_GREATER\r\n        private static readonly Regex _escapeIfdef = MyRegex();\r\n#endif\r\n\r\n        public void Method()\r\n        {\r\n        }\r\n\r\n        // problem! we build this code against .net framework too\r\n        [GeneratedRegex(\"regex\")]\r\n        private static partial Regex MyRegex();\r\n}\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXQJ70A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5OBxFl",
                                           "createdAt":  "2022-11-09T17:19:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@joperezr, do you want to take a look?",
                                           "updatedAt":  "2022-11-09T17:19:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OCWUi",
                                           "createdAt":  "2022-11-09T19:12:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nWhen regular expression defined in #if-#else-#endif scope, generated partial method placed at the end of class which requires manual edit to move it to desired position. What is interesting, if there is no code between directives and end of class, generated code is placed inside of directive scope as expected.\r\n\r\n\n\n### Reproduction Steps\n\n```cs\r\npublic class SomeClass\r\n{\r\n#if NET7_0_OR_GREATER\r\n        private static readonly Regex _escapeIfdef = MyRegex();\r\n#endif\r\n\r\n        public void Method()\r\n        {\r\n        }\r\n}\r\n```\n\n### Expected behavior\n\n```cs\r\npublic class SomeClass\r\n{\r\n#if NET7_0_OR_GREATER\r\n        private static readonly Regex _escapeIfdef = MyRegex();\r\n\r\n        [GeneratedRegex(\"regex\")]\r\n        private static partial Regex MyRegex();\r\n#endif\r\n\r\n        public void Method()\r\n        {\r\n        }\r\n}\r\n```\n\n### Actual behavior\n\n```cs\r\npublic class SomeClass\r\n{\r\n#if NET7_0_OR_GREATER\r\n        private static readonly Regex _escapeIfdef = MyRegex();\r\n#endif\r\n\r\n        public void Method()\r\n        {\r\n        }\r\n\r\n        // problem! we build this code against .net framework too\r\n        [GeneratedRegex(\"regex\")]\r\n        private static partial Regex MyRegex();\r\n}\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMaceWindu\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-11-09T19:12:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ODhb2",
                                           "createdAt":  "2022-11-09T23:40:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "joperezr",
                                           "body":  "I started taking a look at this a bit. Unfortunately, there doesn\u0027t seem to be a good API when in a syntax node for checking whether or not you are inside of an `#ifdef` directive. The best way that I found so far on how to achieve this is by traversing through all ancestors and check for `ContainsDirectives` on each node and then for those that do have directives to call on `GetFirstDirective` (and then traverse using `GetNextDirective`) to try to find cases where we are on an `#ifelse` case.\r\n\r\n@sharwell is the above the (right) way to accomplish this? Or did I miss an API that would make this simpler (and hopefully with better perf)?",
                                           "updatedAt":  "2022-11-09T23:40:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c_Klu",
                                           "createdAt":  "2023-05-23T20:13:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "cc @buyaa-n ",
                                           "updatedAt":  "2023-05-23T20:13:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dAnvQ",
                                           "createdAt":  "2023-05-24T04:32:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "I had similar [issue](https://github.com/dotnet/roslyn-analyzers/issues/5938) with PCA (case 3). I think that time @mavasani said that there is no way to check if the expression is within #if-def conditional directive within analyzer, there is an issue for adding such support: [Expose IsPreprocessorSymbolDefined](https://github.com/dotnet/roslyn/issues/24569). If I understood correctly the #if-def condition is not included within the compiled source context\r\n\r\nWe could try adding the generated partial method right after the regex field, but not sure that would work.",
                                           "updatedAt":  "2023-05-24T04:32:41Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "\"SYSLIB1045 Use GeneratedRegexAttribute\" doesn\u0027t respect #ifdef regions",
        "labels":  [
                       "bug",
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79373",
        "createdAt":  "2022-12-08T01:28:43Z",
        "number":  79373,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-12-08T01:28:52Z",
        "body":  "https://github.com/dotnet/runtime/pull/79364 added a new test that iterates through all of the patterns we have in our [patterns database](https://github.com/dotnet/runtime-assets/blob/main/src/System.Text.RegularExpressions.TestData/Regex_RealWorldPatterns.json) and for each:\r\n- uses the NonBacktracking engine\u0027s SampleMatches function to generate inputs that match the pattern\r\n- calls IsMatch with each of those inputs on a Regex created for that pattern/option with each of our engines\r\n\r\nThe test is still disabled, however, as there\u0027s a variety of work required to get it \"production ready\":\r\n- SampleMatches ends up asserting on some patterns and hanging on others.  This is likely one or more bugs in the SampleMatches implementation.\r\n- The test takes a _really_ long time to execute.\r\n- It\u0027s only currently able to validate inputs expected to match.  We also want to validate inputs expected to not match.\r\n- It\u0027s possible for some patterns it could generate inputs that take too long to process.  We\u0027ll want to explore using timeouts.\r\n\r\ncc: @olsaarik, @veanes ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOT_rtMw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5P-u0z",
                                           "createdAt":  "2022-12-08T01:28:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://github.com/dotnet/runtime/pull/79364 added a new test that iterates through all of the patterns we have in our [patterns database](https://github.com/dotnet/runtime-assets/blob/main/src/System.Text.RegularExpressions.TestData/Regex_RealWorldPatterns.json) and for each:\r\n- uses the NonBacktracking engine\u0027s SampleMatches function to generate inputs that match the pattern\r\n- calls IsMatch with each of those inputs on a Regex created for that pattern/option with each of our engines\r\n\r\nThe test is still disabled, however, as there\u0027s a variety of work required to get it \"production ready\":\r\n- SampleMatches ends up asserting on some patterns and hanging on others.  This is likely one or more bugs in the SampleMatches implementation.\r\n- The test takes a _really_ long time to execute.\r\n- It\u0027s only currently able to validate inputs expected to match.  We also want to validate inputs expected to not match.\r\n- It\u0027s possible for some patterns it could generate inputs that take too long to process.  We\u0027ll want to explore using timeouts.\r\n\r\ncc: @olsaarik, @veanes \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`, `disabled-test`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-08T01:28:51Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Fix and enable the PatternsDataSet_GenerateInputsWithNonBacktracking_MatchWithAllEngines test",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "disabled-test"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79891",
        "createdAt":  "2022-12-21T21:46:11Z",
        "number":  79891,
        "author":  "danmoseley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-27T14:38:10Z",
        "body":  "\r\nConsider\r\n```c#\r\n   private static Regex r = new Regex(@\"a\r\n             b\r\n             c\", RegexOptions.IgnorePatternWhitespace);\r\n```\r\nrun the fixer, now I have\r\n```c#\r\n    [GeneratedRegex(\"a\\r\\n             b\\r\\n             c\", RegexOptions.IgnorePatternWhitespace)]\r\n    private static partial Regex MyRegex();\r\n```\r\nThe semantics are the same, but the readability is gone. I would expect\r\n```c#\r\n    [GeneratedRegex(@\"a\r\n         b\r\n         c\", RegexOptions.IgnorePatternWhitespace)]\r\n    private static partial Regex MyRegex();\r\n```\r\n\r\nI see https://github.com/dotnet/runtime/issues/69616 which implies that whitespace is preserved but not comments. I don\u0027t see whitespace preserved, or at least not in the original form.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUTHQpw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5RMIGQ",
                                           "createdAt":  "2022-12-21T21:46:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n\r\n```\r\nConsider\r\n ```c#\r\n   private static Regex r = new Regex(@\"a\r\n             b\r\n             c\", RegexOptions.IgnorePatternWhitespace);\r\n```\r\nrun the fixer, now I have\r\n```c#\r\n    [GeneratedRegex(\"a\\r\\n             b\\r\\n             c\", RegexOptions.IgnorePatternWhitespace)]\r\n    private static partial Regex MyRegex();\r\n```\r\nThe semantics are the same, but the readability is gone. I would expect\r\n```c#\r\n    [GeneratedRegex(@\"a\r\n         b\r\n         c\", RegexOptions.IgnorePatternWhitespace)]\r\n    private static partial Regex MyRegex();\r\n```\r\n\r\nI see https://github.com/dotnet/runtime/issues/69616 which implies that whitespace is preserved but not comments. I don\u0027t see whitespace preserved, or at least not in the original form.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edanmoseley\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-21T21:46:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RMKFN",
                                           "createdAt":  "2022-12-21T21:50:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "This comes up eg., in this MSBuild example\r\n```c#\r\n    const string itemMetadataSpecification =\r\n          @\"%\\(\\s*;\r\n                (?\u003cITEM_SPECIFICATION\u003e(?\u003cTYPE\u003e[A-Za-z_][A-Za-z_0-9\\-]*)\\s*\\.\\s*)?\r\n                (?\u003cNAME\u003e[A-Za-z_][A-Za-z_0-9\\-]*@\r\n            \\s*\\)\";\r\n    private Regex s_itemMetadataPattern = new(itemMetadataSpecification, RegexOptions.IgnorePatternWhitespace | RegexOptions.ExplicitCapture);\r\n```\r\nnice and pretty, I run the fixer and it produces this ugly thing\r\n```c#\r\n    [GeneratedRegex(\"%\\\\(\\\\s*;\\r\\n                (?\u003cITEM_SPECIFICATION\u003e(?\u003cTYPE\u003e[A-Za-z_][A-Za-z_0-9\\\\-]*)\\\\s*\\\\.\\\\s*)?\\r\\n                (?\u003cNAME\u003e[A-Za-z_][A-Za-z_0-9\\\\-]*@\\r\\n            \\\\s*\\\\)\", RegexOptions.ExplicitCapture | RegexOptions.IgnorePatternWhitespace)]\r\n    private static partial Regex MyRegex();\r\n```\r\nas an aside, by running the fixer I\u0027m implicitly okaying it inlining the compound strings, which I think is fine (and inevitable)",
                                           "updatedAt":  "2022-12-21T21:50:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RMWHF",
                                           "createdAt":  "2022-12-21T22:44:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Built latest bits and found it\u0027s already fixed by #78172",
                                           "updatedAt":  "2022-12-21T22:44:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RMdCn",
                                           "createdAt":  "2022-12-21T23:32:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Actually, it\u0027s only partially fixed. Consider\r\n```c#\r\n    private const string foo = \"bar\";\r\n    private static Regex r1 = new Regex(@\"a        \" + foo + @\"\r\n                                            b\r\n                                            c\", RegexOptions.IgnorePatternWhitespace);\r\n\r\n    private static Regex r2 = new Regex(@\"a        bar\r\n                                            b\r\n                                            c\", RegexOptions.IgnorePatternWhitespace);\r\n```\r\nBoth should produce identical results. However, in the first case, I lose the visible whitespace --\r\n```c#\r\n    [GeneratedRegex(\"a        bar\\r\\n                                            b\\r\\n                                            c\", RegexOptions.IgnorePatternWhitespace)]\r\n    private static partial Regex MyRegex();\r\n   \r\n   [GeneratedRegex(@\"a        bar\r\n                                            b\r\n                                            c\", RegexOptions.IgnorePatternWhitespace)]\r\n    private static partial Regex MyRegex1();\r\n```\r\n\r\nUnfortunately many of the dotnet/msbuild regexes are built up by compounding reused string fragments, which in some cases are compounded other ones, and use IgnorePatternWhitespace. This means after running the generator, they need to be fixed by hand.",
                                           "updatedAt":  "2022-12-21T23:34:05Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "GeneratedRegex fixer forces pattern onto a single line",
        "labels":  [
                       "enhancement",
                       "area-System.Text.RegularExpressions",
                       "needs-further-triage",
                       "source-generator"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/79982",
        "createdAt":  "2022-12-26T23:35:46Z",
        "number":  79982,
        "author":  "jogibear9988",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-08-02T18:23:21Z",
        "body":  "Browsers now support \"--\" in Regex, see: https://v8.dev/features/regexp-v-flag#difference\r\n\r\nso for example this works:\r\n\r\n      ^[_--[0-9]]+$\r\n\r\nbut this would not work in C#, cause \"--\" is not supported.\r\nWould it be possible to add this?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYxtFnQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5RZAJG",
                                           "createdAt":  "2022-12-26T23:35:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nBrowsers now support \"--\" in Regex, see: https://v8.dev/features/regexp-v-flag#difference\r\n\r\nso for example this works:\r\n\r\n      ^[_--[0-9]]+$\r\n\r\nbut this would not work in C#, cause \"--\" is not supported.\r\nWould it be possible to add this?\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ejogibear9988\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-12-26T23:35:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RZufg",
                                           "createdAt":  "2022-12-27T08:12:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jogibear9988",
                                           "body":  "also another difference:\r\n\r\ncapturegroup names in javascript could for example be \"$\" or unicode characters. In C# it\u0027s not allowed",
                                           "updatedAt":  "2022-12-27T08:12:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RbCKN",
                                           "createdAt":  "2022-12-27T16:52:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "\u003e also another difference\n\nPlease open a separate issue for this if you want to propose it.\n\nIn general it\u0027s not a goal to support everything other engines do; they are all different, although .NET is broadly a subset of Perl flavor, it has its own features. \n\nTo evaluate a feature request then, considerations would likely include\n* how useful it is, and whether it can be already accomplished in another way\n* evidence it is widely used - data shows most people only use a small set of existing features today\n* whether it might change the behavior of existing patterns\n* the cost of doing the work",
                                           "updatedAt":  "2022-12-27T16:53:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rno1f",
                                           "createdAt":  "2023-01-03T02:58:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Browsers now support \"--\"\r\n\r\nThe feature this refers to is subtraction, which .NET\u0027s regex already supports, just with a single `-` instead of `--`.  For example, `[a-z-[m-p]]` is the same as `[a-lq-z]`, i.e. all the letters a through z except for m through p.",
                                           "updatedAt":  "2023-01-03T02:58:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rn_zz",
                                           "createdAt":  "2023-01-03T06:47:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jogibear9988",
                                           "body":  "@stephentoub I know that c# already supports it. They issue is more about, if we additionally support more syntax, so javascript regex could be used in c# as well.\r\nI got this issue while running test262 testsuite against esprima.net javascript parser, cause it uses directly net regexes instead of a own javascript engine.\r\n\r\nThere are a few more issues, for example capture group names and maybe more.\r\nSo here I wanted to ask, would we work on supporting more of the javascript regex syntax?",
                                           "updatedAt":  "2023-01-03T06:47:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RpVpq",
                                           "createdAt":  "2023-01-03T13:49:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e They issue is more about, if we additionally support more syntax, so javascript regex could be used in c# as well.\r\n\r\nThere are tons of minute differences between regex syntaxes across languages. https://davisjam.medium.com/why-arent-regexes-a-lingua-franca-esecfse19-a36348df3a2 is a nice paper highlighting how incompatible regexes actually are across platforms.",
                                           "updatedAt":  "2023-01-03T13:49:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rs3Yw",
                                           "createdAt":  "2023-01-04T10:00:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jogibear9988",
                                           "body":  "@stephentoub know that there are many differences, the question is, are tickets/issues/pull requests to remove them allowed, planed to resolve? Or is this not an option?",
                                           "updatedAt":  "2023-01-04T10:00:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Rs4Ke",
                                           "createdAt":  "2023-01-04T10:02:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jogibear9988",
                                           "body":  "As for example, using esprima-net (https://github.com/sebastienros/esprima-dotnet), or jint (https://github.com/sebastienros/jint) i think for this projects it should be a win if regexes wich work in javascript also work in their engines. ",
                                           "updatedAt":  "2023-01-04T10:02:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RtmXV",
                                           "createdAt":  "2023-01-04T13:06:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Every such change is almost certainly a breaking change, e.g. if I change your example to `^[!---[0-9]]+$`, that\u0027s already valid syntax and means something different (the range between ! and - without the digits 0 through 9). There would need to be _very_ strong justification for breaking existing expressions, and making the syntax closer to that used by another language (and further from that used by other languages) is not strong-enough justification. ",
                                           "updatedAt":  "2023-01-04T13:29:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RtpSb",
                                           "createdAt":  "2023-01-04T13:18:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC4T9TA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "adams85",
                                                                               "createdAt":  "2023-02-25T19:08:32Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cyraid",
                                                                               "createdAt":  "2023-03-22T10:28:25Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "lahma",
                                           "body":  "I wonder whether the [RegexOptions.ECMAScript](https://learn.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regexoptions?view=net-7.0#system-text-regularexpressions-regexoptions-ecmascript) would allow such changes in behavior, based on documentation it\u0027s meant to support ECMAScript behavior after all and as end user I would expect that JS Regexes would work somewhat similarly. It has a bold sales pitch:\r\n\r\n\u003e Enables ECMAScript-compliant behavior for the expression\r\n\r\nI do understand the worry about breaking changes, maybe a new option like `ESNext` would be needed for cutting-edge behavior 🙂 \r\n",
                                           "updatedAt":  "2023-01-04T13:18:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5RuPo9",
                                           "createdAt":  "2023-01-04T15:31:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jogibear9988",
                                           "body":  "Never saw (and tried) the ECMAScript option, but as you said, if it\u0027s set I think we then should support the same regexes.\r\nMaybe we should check what of the Test262 Regexes do not work (and disable also our hacks). So we could create an issue what needs to be fixed.",
                                           "updatedAt":  "2023-01-04T15:31:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YLFzy",
                                           "createdAt":  "2023-03-22T10:34:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cyraid",
                                           "body":  "I\u0027m not sure if @stephentoub knew about the RegexOptions.ECMAScript, but the problem with adding ESNext option would be, what new option would have to be added for the next version? IMO, ECMAScript should mean just that.. If you have it on, your regex should work in ECMAScript compliants mode. If you have a Javascript, and the interpreter gets upgraded, would your existing script be no longer working? I\u0027m sure ECMAScript also has regex backwards compatibility. That\u0027s just my 2 cents.",
                                           "updatedAt":  "2023-03-22T10:34:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YMZYf",
                                           "createdAt":  "2023-03-22T14:16:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "Changing ECMAScript mode would involve the same breaking change concerns. Apps break when customers upgrade. We\u0027d have to have strong reason and convince ourselves that very few apps uses pattern that would be broken.",
                                           "updatedAt":  "2023-03-22T14:16:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YMrR9",
                                           "createdAt":  "2023-03-22T14:55:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jogibear9988",
                                           "body":  "I don\u0027t see a point for EcmaScript mode, if it don\u0027t run ecmascript regex...",
                                           "updatedAt":  "2023-03-22T14:55:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5YNQ48",
                                           "createdAt":  "2023-03-22T16:17:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "cyraid",
                                           "body":  "\u003e I don\u0027t see a point for EcmaScript mode, if it don\u0027t run ecmascript regex...\r\n\r\nExactly. Using a special compliants mode would be your opt-in for that behavior whatever it entails. Using the normal regex from c# would be the case I would be hesitant to change.\r\n\r\nCustomers working around a solution that is broken, would be happy to have the ecmascript mode working as intended and removing their workarounds to make it work, no? Again, my $0.02.",
                                           "updatedAt":  "2023-03-22T16:17:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jGjn_",
                                           "createdAt":  "2023-08-02T17:28:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Closing; based on above conversation the `--` is rarely used and at this point not worth a breaking change.\r\n\r\nWe can re-open this if we get additional asks here.",
                                           "updatedAt":  "2023-08-02T17:28:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jGm2Y",
                                           "createdAt":  "2023-08-02T17:37:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lahma",
                                           "body":  "The whole EcmaScript mode is basically broken when it comes to any JS feature released in last ten years (or more) so maybe the problem is still present?",
                                           "updatedAt":  "2023-08-02T17:37:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jGpm2",
                                           "createdAt":  "2023-08-02T17:47:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Just to clarify that the request for this issue is to support more EcmaScript features, including `--`. This could be implemented by using the existing `RegexOptions.ECMAScript` option but that would still be breaking. We could add a new flag if that is better.\r\n\r\nFYI: the current EcmaSpec behavior: https://learn.microsoft.com/dotnet/standard/base-types/regular-expression-options#ecmascript-matching-behavior",
                                           "updatedAt":  "2023-08-02T17:47:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jGqth",
                                           "createdAt":  "2023-08-02T17:51:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODCiIUw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "lahma",
                                                                               "createdAt":  "2023-08-02T18:42:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Re-opened and moved to Future; not clear what the priority of adding additional EcmaScript support is.",
                                           "updatedAt":  "2023-08-02T17:51:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jG0Wd",
                                           "createdAt":  "2023-08-02T18:23:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODCiIOw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "lahma",
                                                                               "createdAt":  "2023-08-02T18:42:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "jogibear9988",
                                           "body":  "When I search github for RegexOptions.ECMAScript I found over 3600 files includeing it, so the chance of breaking something is not as low as I thought, so I think best way would be to introduce a new flag maybe (if this would be done).\r\n\r\nAnd if it would be done, it would be nice if all the test262 regexp tests would be run against. Maybe this then could be achived via jint",
                                           "updatedAt":  "2023-08-02T18:23:21Z"
                                       }
                                   ],
                         "totalCount":  20
                     },
        "title":  "Javascript RegEx could not be used in C# cause of not supported \"--\" in ",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84149",
        "createdAt":  "2023-03-30T21:40:30Z",
        "number":  84149,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-10T15:36:55Z",
        "body":  "Consider an expression like `\\w{10,}42`.  That will search for at least 10 word characters followed by the number 42.  If the `\\w{10,}` successfully matches at least 10 characters, then if matching the 42 fails, we\u0027ll still successfully bump the bumpalong position so that the next time we start the matching process, we don\u0027t have to match the same \\w characters again.  However, if we don\u0027t successfully match the minimum, we\u0027re not incrementing that bumpalong position, which means for an input like \"abcdefghi...\" where there are only 9 word characters, we\u0027ll try to match at \u0027a\u0027 through \u0027i\u0027, determine we haven\u0027t met the minimum, return to the scan loop, bump to \u0027b\u0027 and match through \u0027i\u0027, determine we haven\u0027t met the minimum, etc., repeating all of that work even though we know there\u0027s no chance we\u0027ll meet the minimum if we didn\u0027t meet it to start.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWN7kPA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Y3uQ8",
                                           "createdAt":  "2023-03-30T21:40:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nConsider an expression like `\\w{10,}42`.  That will search for at least 10 word characters followed by the number 42.  If the `\\w{10,}` successfully matches at least 10 characters, then if matching the 42 fails, we\u0027ll still successfully bump the bumpalong position so that the next time we start the matching process, we don\u0027t have to match the same \\w characters again.  However, if we don\u0027t successfully match the minimum, we\u0027re not incrementing that bumpalong position, which means for an input like \"abcdefghi...\" where there are only 9 word characters, we\u0027ll try to match at \u0027a\u0027 through \u0027i\u0027, determine we haven\u0027t met the minimum, return to the scan loop, bump to \u0027b\u0027 and match through \u0027i\u0027, determine we haven\u0027t met the minimum, etc., repeating all of that work even though we know there\u0027s no chance we\u0027ll meet the minimum if we didn\u0027t meet it to start.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-30T21:40:36Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Regex should advance bumpalong position for partially-matched starting loop minimums",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84188",
        "createdAt":  "2023-03-31T21:10:45Z",
        "number":  84188,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-27T14:38:10Z",
        "body":  "## Build Information\r\nBuild: https://dev.azure.com/dnceng-public/public/_build/results?buildId=369767\r\nBuild error leg or test failing: System.Text.RegularExpressions.Tests.RegexMatchTests.StressTestDeepNestingOfLoops\r\nPull request: https://github.com/dotnet/runtime/pull/90318/\r\n\r\n\u003c!-- Error message template  --\u003e\r\n### Known Issue Error Message\r\n\r\n```json\r\n{\r\n  \"BuildRetry\": false,\r\n  \"ErrorMessage\": \"System.Text.RegularExpressions.Tests.RegexMatchTests.StressTestDeepNestingOfLoops(engine: NonBacktracking\",\r\n  \"ExcludeConsoleLog\": false\r\n}\r\n```\r\n\r\n\u003c!--Known issue error report start --\u003e\r\n### Report\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|0|0|0|\r\n\u003c!--Known issue error report end --\u003e\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** \r\n**Result validation: :warning:** Provided build not found. Provide a valid build in the \"**Build: :mag_right:**\" line.\r\n**Validation performed at:** 8/22/2023 7:37:08 PM UTC\r\n\u003c!-- Known issue validation end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOdDHpkA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Y93IY",
                                           "createdAt":  "2023-03-31T21:10:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nAt least it is for me locally.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003estephentoub\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eolsaarik\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`, `test-bug`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-31T21:10:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ei91A",
                                           "createdAt":  "2023-06-11T15:54:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "from PR:\r\n\r\nIt\u0027s just `yield return new object[] { engine, \"(\", \"a\", \")*\", \"a\", 2000, 1000 };` that is pathological.\r\n\r\n| pattern repetition | input repetition | Interpreted | Compiled | NonBacktracking |\r\n|--------------------|------------------|-------------|----------|-----------------|\r\n| 1                  | 1000             | 0.01        | 0.18     | 0.29            |\r\n| 10                 | 1000             |             | 0.019    | 0.32            |\r\n| 15                 | 1000             | 0.01            | 0.019    | 1.62            |\r\n| 17                 | 1000             | 0.011            | 0.019    | 5.93            |\r\n| 20                 | 1000             | 0.011       | 0.0012   | \u003e 60s           |\r\n| 40                 | 1000             | 0.011       | 0.001    | \u003e 60s           |\r\n| 2000               | 1000             | 0.39        | 0.37     | \u003e 60s           |\r\n| 2000               | 10               | 0.39        | 0.36     | 10.8            |\r\n| 2000               | 1                | 0.38        | 0.37     | 10.7            |\r\n\r\n\r\nOn the other two variants, NonBacktracking takes less than a second (but still slower than the others)",
                                           "updatedAt":  "2023-06-11T15:58:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ei93Q",
                                           "createdAt":  "2023-06-11T15:54:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "cc @olsaarik ",
                                           "updatedAt":  "2023-06-11T15:54:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ei-PU",
                                           "createdAt":  "2023-06-11T15:58:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "top of the stack looks something like \r\n```\r\n                        Thread #7 (OS 0x4650) [Thread pool worker] [Background] [MTA]\r\n                                System.Text.RegularExpressions.Symbolic.SymbolicRegexInfo.Create(Boolean, Boolean, Bool\r\n  ean, Boolean, Boolean, Boolean, Boolean, Boolean)\r\n                                System.Text.RegularExpressions.Symbolic.SymbolicRegexInfo.Concat(System.Text.RegularExp\r\n  ressions.Symbolic.SymbolicRegexInfo, System.Text.RegularExpressions.Symbolic.SymbolicRegexInfo)\r\n                                System.Text.RegularExpressions.Symbolic.SymbolicRegexNode`1[[System.UInt64, System.Priv\r\n  ate.CoreLib]].CreateConcat(System.Text.RegularExpressions.Symbolic.SymbolicRegexBuilder`1\u003cUInt64\u003e, System.Text.Regula\r\n  rExpressions.Symbolic.SymbolicRegexNode`1\u003cUInt64\u003e, System.Text.RegularExpressions.Symbolic.SymbolicRegexNode`1\u003cUInt64\r\n  \u003e)\r\n                                System.Text.RegularExpressions.Symbolic.SymbolicRegexBuilder`1[[System.UInt64, System.P\r\n  rivate.CoreLib]].CreateConcat(System.Text.RegularExpressions.Symbolic.SymbolicRegexNode`1\u003cUInt64\u003e, System.Text.Regula\r\n  rExpressions.Symbolic.SymbolicRegexNode`1\u003cUInt64\u003e)\r\n                                System.Text.RegularExpressions.Symbolic.SymbolicRegexNode`1[[System.UInt64, System.Priv\r\n  ate.CoreLib]].StripEffects(System.Text.RegularExpressions.Symbolic.SymbolicRegexBuilder`1\u003cUInt64\u003e)\r\n                                System.Text.RegularExpressions.Symbolic.SymbolicRegexNode`1[[System.UInt64, System.Priv\r\n  ate.CoreLib]].StripEffects(System.Text.RegularExpressions.Symbolic.SymbolicRegexBuilder`1\u003cUInt64\u003e)\r\n                                System.Text.RegularExpressions.Symbolic.SymbolicRegexNode`1[[System.UInt64, System.Priv\r\n  ate.CoreLib]].StripEffects(System.Text.RegularExpressions.Symbolic.SymbolicRegexBuilder`1\u003cUInt64\u003e)\r\n                                System.Text.RegularExpressions.Symbolic.SymbolicRegexNode`1[[System.UInt64, System.Priv\r\n  ate.CoreLib]].StripEffects(System.Text.RegularExpressions.Symbolic.SymbolicRegexBuilder`1\u003cUInt64\u003e)\r\n                                System.Text.RegularExpressions.Symbolic.SymbolicRegexNode`1[[System.UInt64, System.Priv\r\n  ate.CoreLib]].StripEffects(System.Text.RegularExpressions.Symbolic.SymbolicRegexBuilder`1\u003cUInt64\u003e)\r\n                                System.Text.RegularExpressions.Symbolic.SymbolicRegexNode`1[[System.UInt64, System.Priv\r\n  ate.CoreLib]].StripEffects(System.Text.RegularExpressions.Symbolic.SymbolicRegexBuilder`1\u003cUInt64\u003e)\r\n                                System.Text.RegularExpressions.Symbolic.SymbolicRegexNode`1[[System.UInt64, System.Priv\r\n  ate.CoreLib]].StripEffects(System.Text.RegularExpressions.Symbolic.SymbolicRegexBuilder`1\u003cUInt64\u003e)\r\n                                System.Text.RegularExpressions.Symbolic.SymbolicRegexNode`1[[System.UInt64, System.Priv\r\n  ate.CoreLib]].StripEffects(System.Text.RegularExpressions.Symbolic.SymbolicRegexBuilder`1\u003cUInt64\u003e)\r\n\r\n.... lots of frames ...\r\n\r\n                                System.Text.RegularExpressions.Symbolic.SymbolicRegexNode`1[[System.UInt64, System.Priv\r\n  ate.CoreLib]].StripEffects(System.Text.RegularExpressions.Symbolic.SymbolicRegexBuilder`1\u003cUInt64\u003e)\r\n                                System.Threading.StackHelper+\u003c\u003ec__DisplayClass8_0`2[[System.__Canon, System.Private.Cor\r\n  eLib],[System.__Canon, System.Private.CoreLib]].\u003cCallOnEmptyStack\u003eb__0()\r\n                                System.Threading.Tasks.Task`1[[System.__Canon, System.Private.CoreLib]].InnerInvoke()\r\n                                System.Threading.Tasks.Task+\u003c\u003ec.\u003c.cctor\u003eb__278_0(System.Object)\r\n                                System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(System.Threading.Thread\r\n  , System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n                                System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef, S\r\n  ystem.Threading.Thread)\r\n                                System.Threading.Tasks.Task.ExecuteEntryUnsafe(System.Threading.Thread)\r\n                                System.Threading.Tasks.Task.ExecuteFromThreadPool(System.Threading.Thread)\r\n                                System.Threading.ThreadPoolWorkQueue.DispatchWorkItem(System.Object, System.Threading.T\r\n  hread)\r\n                                System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n                                System.Threading.PortableThreadPool+WorkerThread.WorkerDoWork(System.Threading.Portable\r\n  ThreadPool, Boolean ByRef)\r\n                                System.Threading.PortableThreadPool+WorkerThread.WorkerThreadStart()\r\n                                System.Threading.Thread+StartHelper.RunWorker()\r\n                                System.Threading.Thread+StartHelper.Run()\r\n                                System.Threading.Thread.StartCallback()\r\n                                [DebuggerU2MCatchHandlerFrame]\r\n```\r\nNote that stack helper has switched threads to avoid a stack overflow. There appears to be recursion in `System.Text.RegularExpressions.Symbolic.SymbolicRegexNode``1[[System.UInt64, System.Priv\r\n  ate.CoreLib]].StripEffects(System.Text.RegularExpressions.Symbolic.SymbolicRegexBuilder``1\u003cUInt64\u003e)` that we should avoid for efficiency\u0027s sake, and that may possibly fix the performance problem on its own.\r\n\r\nStripEffects seems to be going down the SymbolicRegexNodeKind.Concat branch of the switch. There are other branches. Can the whole thing be made non recursive?\r\n\r\nAside, there are ~20 places where we\u0027re protected with `StackHelper.CallOnEmptyStack`. Do any of those trigger on a reasonable regex of some kind?",
                                           "updatedAt":  "2023-06-11T16:10:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ejBY4",
                                           "createdAt":  "2023-06-11T16:28:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "BTW, I think I\u0027d expect to see it in ` case SymbolicRegexNodeKind.Loop:` so perhaps I\u0027m misreading the stack. The structure of the RegexTree is thus:\r\n\r\n```\r\n((((((((((((((((((((a)*)*)*)*)*)*)*)*)*)*)*)*)*)*)*)*)*)*)*)* \r\n\r\nCapture index = 0\r\n  Atomic\r\n    Loop*\r\n      Capture index = 1\r\n        Loop*\r\n          Capture index = 2\r\n            Loop*\r\n              Capture index = 3\r\n                Loop*\r\n                  Capture index = 4\r\n                    Loop*\r\n....\r\n                      Capture index = nnn\r\n                        One \u0027a\u0027\r\n```\r\n\r\nI\u0027ll let the area expert take this further 😄 ",
                                           "updatedAt":  "2023-06-11T16:28:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jwwTZ",
                                           "createdAt":  "2023-08-10T18:41:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "This is still occurring; https://github.com/dotnet/runtime/pull/87369/files did not address all cases.\r\n\r\nAdding known issue template to offload from the too-general-purpose error message in https://github.com/dotnet/runtime/issues/84323.",
                                           "updatedAt":  "2023-08-10T18:47:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc50MemQ",
                                           "createdAt":  "2024-02-16T22:33:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffschwMSFT",
                                           "body":  "removing blocking-clean-ci as it has not failed in 30 days\r\n\r\n24-Hour Hit Count | 7-Day Hit Count | 1-Month Count\r\n-- | -- | --\r\n0 | 0 | 0",
                                           "updatedAt":  "2024-02-16T22:33:05Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "NonBacktracking engine is pathologically slow on patterns like \"((((((((a)*)*)*)*)*)*)*\" and input like \"aaaaaaa\" which other engines handle fine",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "disabled-test"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88418",
        "createdAt":  "2023-07-05T13:07:54Z",
        "number":  88418,
        "author":  "uweigand",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-27T14:38:11Z",
        "body":  "Hi @stephentoub , we\u0027re now seeing failures in the `System.Text.RegularExpressions.Tests.RegexMatchTests.Match_TestThatTimeoutHappens` test case on s390x, see e.g. here:\r\nhttps://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-fb56ebe47ad240c79f/System.Text.RegularExpressions.Tests/1/console.86e3fbb5.log?helixlogtype=result\r\n\r\nUnfortunately, these seem to be nondeterministic - in some CI runs the test passes, in others it fails.  I\u0027m not sure if this related to this PR or any of your other recent RegEx changes in the first place, but I cannot recall seeing this particular failure before about mid-April.  When running the test locally on my system, so far I was completely unable to reproduce the failure, so I\u0027m not sure how to start debugging this problem.\r\n\r\nIf we see the failure, it seems to be in either the `Compiler` or `SourceGenerator` flavor of the test case.   Also, given the total run time shown in the CI logs, the problem doesn\u0027t appear to be that the regex test runs a long time and the timeout just doesn\u0027t trigger, but rather that the test completes quickly.  (I don\u0027t know if the regex also matches *correctly* or not - the test doesn\u0027t seem to verify that.)\r\n\r\nDo you have any ideas what could cause this failure?  Or any suggestions on how to debug this?   Thanks for your help!\r\n\r\n_Originally posted by @uweigand in https://github.com/dotnet/runtime/issues/84370#issuecomment-1540073531_\r\n            ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOe3XzhQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5gqY6B",
                                           "createdAt":  "2023-07-05T13:08:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n              Hi @stephentoub , we\u0027re now seeing failures in the `System.Text.RegularExpressions.Tests.RegexMatchTests.Match_TestThatTimeoutHappens` test case on s390x, see e.g. here:\r\nhttps://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-heads-main-fb56ebe47ad240c79f/System.Text.RegularExpressions.Tests/1/console.86e3fbb5.log?helixlogtype=result\r\n\r\nUnfortunately, these seem to be nondeterministic - in some CI runs the test passes, in others it fails.  I\u0027m not sure if this related to this PR or any of your other recent RegEx changes in the first place, but I cannot recall seeing this particular failure before about mid-April.  When running the test locally on my system, so far I was completely unable to reproduce the failure, so I\u0027m not sure how to start debugging this problem.\r\n\r\nIf we see the failure, it seems to be in either the `Compiler` or `SourceGenerator` flavor of the test case.   Also, given the total run time shown in the CI logs, the problem doesn\u0027t appear to be that the regex test runs a long time and the timeout just doesn\u0027t trigger, but rather that the test completes quickly.  (I don\u0027t know if the regex also matches *correctly* or not - the test doesn\u0027t seem to verify that.)\r\n\r\nDo you have any ideas what could cause this failure?  Or any suggestions on how to debug this?   Thanks for your help!\r\n\r\n_Originally posted by @uweigand in https://github.com/dotnet/runtime/issues/84370#issuecomment-1540073531_\r\n            \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003euweigand\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-07-05T13:08:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gqatO",
                                           "createdAt":  "2023-07-05T13:12:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "uweigand",
                                           "body":  "@stephentoub wrote:\r\n\u003e@uweigand, sorry for the delay in responding.\r\n\u003e\r\n\u003eAre you still seeing this?\r\n\u003e\r\n\u003eRight, this test is validating that when the processing of the regex takes long enough, a timeout exception gets thrown. I can\u0027t see the failure you cited anymore, but presumably the processing of the regex just happened so fast that it didn\u0027t time out and thus the test failed. I don\u0027t have an explanation for why that would be, though.\r\n\r\nI\u0027m no longer able to reply on the original PR as it has been locked, so I\u0027ve opened this new issue.\r\n\r\nThe problem described above still occurs sporadically, last time I saw it June 27:\r\nhttps://dev.azure.com/dnceng-public/public/_build/results?buildId=322772\u0026view=results\r\n\r\nThis time the failing test is System.Text.RegularExpressions.Tests.RegexMatchTests.Match_Timeout_Throws, but this appears to be the same symptom.\r\n\r\n(As of about a week ago, all CI tests are failing due to an unrelated issue described here: https://github.com/dotnet/runtime/pull/88417, which might have masked more recent occurrences.)\r\n",
                                           "updatedAt":  "2023-07-05T13:12:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gqb9q",
                                           "createdAt":  "2023-07-05T13:15:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Thanks.  Is it always the same arguments failing?  That test is a theory, with most of the inputs passing in that run, and two failures:\r\n```\r\n    System.Text.RegularExpressions.Tests.RegexMatchTests.Match_Timeout_Throws(engine: Compiled, pattern: \"((?!(?\u003e[^a]*))a)+\", input: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"...) [FAIL]\r\n      Assert.Throws() Failure\r\n      Expected: typeof(System.Text.RegularExpressions.RegexMatchTimeoutException)\r\n      Actual:   (No exception was thrown)\r\n      Stack Trace:\r\n        /_/src/libraries/System.Text.RegularExpressions/tests/FunctionalTests/Regex.Match.Tests.cs(1258,0): at System.Text.RegularExpressions.Tests.RegexMatchTests.Match_Timeout_Throws(RegexEngine engine, String pattern, String input)\r\n        --- End of stack trace from previous location ---\r\n    System.Text.RegularExpressions.Tests.RegexMatchTests.Match_Timeout_Throws(engine: Compiled, pattern: \"((?\u003c!(?\u003e[^a]*))a)+\", input: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"...) [FAIL]\r\n      Assert.Throws() Failure\r\n      Expected: typeof(System.Text.RegularExpressions.RegexMatchTimeoutException)\r\n      Actual:   (No exception was thrown)\r\n      Stack Trace:\r\n        /_/src/libraries/System.Text.RegularExpressions/tests/FunctionalTests/Regex.Match.Tests.cs(1258,0): at System.Text.RegularExpressions.Tests.RegexMatchTests.Match_Timeout_Throws(RegexEngine engine, String pattern, String input)\r\n        --- End of stack trace from previous location ---\r\n```",
                                           "updatedAt":  "2023-07-05T13:15:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gqhB-",
                                           "createdAt":  "2023-07-05T13:26:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "uweigand",
                                           "body":  "In addition to the June 27 failure I also see this failure on June 26, which appears to be the same pattern:\r\n```   \r\n System.Text.RegularExpressions.Tests.RegexMatchTests.Match_Timeout_Throws(engine: Compiled, pattern: \"((?\u003c!(?\u003e[^a]*))a)+\", input: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"...) [FAIL]\r\n```\r\n\r\nI\u0027m not seeing any other instance of this failure in the CI history (seems to be preserved for about a month).  [ I\u0027ve never been able to reproduce the issue locally, it only happens in the CI if at all. ]\r\n\r\n",
                                           "updatedAt":  "2023-07-05T13:26:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jGggI",
                                           "createdAt":  "2023-08-02T17:22:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Flagging as bug for now",
                                           "updatedAt":  "2023-08-02T17:22:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jwfbm",
                                           "createdAt":  "2023-08-10T17:52:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "The test has a short-circuit for non-backtracking check:\r\nhttps://github.com/dotnet/runtime/blob/ecb3b2003c624ae1f116915e9f0f0b11ae264094/src/libraries/System.Text.RegularExpressions/tests/FunctionalTests/Regex.Match.Tests.cs#L1222-L1227\r\nand thus a timeout may not occur.\r\n\r\nFlagging as test bug and moving to V9.",
                                           "updatedAt":  "2023-08-10T17:52:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc57dfOF",
                                           "createdAt":  "2024-04-23T03:10:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e The test has a short-circuit for non-backtracking check:\r\n\u003e \r\n\u003e https://github.com/dotnet/runtime/blob/ecb3b2003c624ae1f116915e9f0f0b11ae264094/src/libraries/System.Text.RegularExpressions/tests/FunctionalTests/Regex.Match.Tests.cs#L1222-L1227\r\n\u003e \r\n\u003e \r\n\u003e and thus a timeout may not occur.\r\n\u003e Flagging as test bug and moving to V9.\r\n\r\nThe cited failures are all for `engine: Compiled`.",
                                           "updatedAt":  "2024-04-23T03:10:46Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Sporadic failures in RegexMatchTests test cases on s390x",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "test-bug",
                       "arch-s390x"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/93787",
        "createdAt":  "2023-09-18T23:50:58Z",
        "number":  93787,
        "author":  "tmat",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-27T14:38:12Z",
        "body":  "Having the dots adornment on every single line of the string is cluttering the editor.\r\n![image](https://github.com/dotnet/roslyn/assets/41759/4514db12-7da4-4611-b77f-49caaab5bb7f)",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOajmLbw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5pse7i",
                                           "createdAt":  "2023-09-19T01:23:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "no clue what this is.  will have to see  if this even is roslyn...",
                                           "updatedAt":  "2023-09-19T01:23:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5pse_X",
                                           "createdAt":  "2023-10-20T19:11:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "@stephentoub do you know who owns this analyzer?",
                                           "updatedAt":  "2023-10-20T19:11:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ps1FA",
                                           "createdAt":  "2023-10-20T20:33:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nHaving the dots adornment on every single line of the string is cluttering the editor.\r\n![image](https://github.com/dotnet/roslyn/assets/41759/4514db12-7da4-4611-b77f-49caaab5bb7f)\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003etmat\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003eCyrusNajmabadi\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`, `untriaged`, `code-analyzer`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-20T20:33:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ps9bp",
                                           "createdAt":  "2023-10-20T21:05:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e @stephentoub do you know who owns this analyzer?\r\n\r\nProbably me at this point.\r\n\r\nIs this something the analyzer is doing incorrectly?",
                                           "updatedAt":  "2023-10-20T21:05:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ptAUW",
                                           "createdAt":  "2023-10-20T21:16:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "tmat",
                                           "body":  "If the analyzer is reporting a single location span then my guess is that it\u0027s the editor/LSP client, who creates the \"...\" tags for the diagnostic.",
                                           "updatedAt":  "2023-10-20T21:16:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qOBqM",
                                           "createdAt":  "2023-10-26T23:24:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e If the analyzer is reporting a single location span then my guess is that it\u0027s the editor/LSP client, who creates the \"...\" tags for the diagnostic.\r\n\r\nIn that case, @CyrusNajmabadi, why move this to runtime? ",
                                           "updatedAt":  "2023-10-26T23:24:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qOYtv",
                                           "createdAt":  "2023-10-27T01:36:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "The desired change here would be too have the analyzer select a smaller span. Perhaps from the start of a string to the end of the line.  ",
                                           "updatedAt":  "2023-10-27T01:36:00Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Show only a single suggestion adornment for a multi-line string",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "help wanted",
                       "code-analyzer"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/94760",
        "createdAt":  "2023-11-15T08:57:33Z",
        "number":  94760,
        "author":  "pawchen",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-01-09T14:57:58Z",
        "body":  "See #88175, the screenshot was showing `\\.` for the IP address regex, which is expected.\r\n\r\n![screenshot](https://user-images.githubusercontent.com/2642209/249657422-05926ca0-0f01-4fee-bd65-af9f015ad0d9.png)\r\n\r\nBut somehow I don\u0027t see the same behavior in VS17.8?\r\n\r\n![image](https://github.com/dotnet/runtime/assets/159110/ac5885dc-be74-4578-b731-0f62ff8e0260)\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOcD9cDQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5sCA4W",
                                           "createdAt":  "2023-11-15T12:40:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSee #88175, the screenshot was showing `\\.` for the IP address regex, which is expected.\r\n\r\n![screenshot](https://user-images.githubusercontent.com/2642209/249657422-05926ca0-0f01-4fee-bd65-af9f015ad0d9.png)\r\n\r\nBut somehow I don\u0027t see the same behavior in VS17.8?\r\n\r\n![image](https://github.com/dotnet/runtime/assets/159110/ac5885dc-be74-4578-b731-0f62ff8e0260)\r\n\r\n\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003epawchen\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-15T12:40:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ujvko",
                                           "createdAt":  "2023-12-13T23:44:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "buyaa-n",
                                           "body":  "I can see the escaped pattern in VS 17.9.0 Preview 1.1 too, though not sure if this is really an issue, it might depend on our VS config. \r\n\r\n@stephentoub  is this a real issue?",
                                           "updatedAt":  "2023-12-13T23:44:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vzWtN",
                                           "createdAt":  "2024-01-03T17:39:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODRJs2g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "buyaa-n",
                                                                               "createdAt":  "2024-01-03T17:52:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e is this a real issue?\r\n\r\nYes, it appears to be.  We probably shouldn\u0027t be using the `Literal(...)` function, which I expect is what is doing that escaping.\r\n\r\nI can\u0027t explain why, though, it wasn\u0027t escaped from my initial change, which included the use of this function, so it\u0027s possible my explanation is incorrect.",
                                           "updatedAt":  "2024-01-03T17:39:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vz9LN",
                                           "createdAt":  "2024-01-03T19:54:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@pawchen Want to try that change and see whether it fixes it for you? We\u0027d welcome a PR if so",
                                           "updatedAt":  "2024-01-03T19:54:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5v4uSo",
                                           "createdAt":  "2024-01-04T14:00:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pawchen",
                                           "body":  "After checking the source code of [ObjectDisplay.FormatLiteral](https://sourceroslyn.io/#Microsoft.CodeAnalysis.CSharp/SymbolDisplay/ObjectDisplay.cs,a959aad47bb15753,references), yes, the `Literal(value)` helper outputs what `value` would look like as a C# string, with `quote` on or off just means you want `\"\\\\n\"` or `\\\\n`.\r\n\r\nI could open a PR for this change, but please note that I haven\u0027t worked on this repo before, and it\u0027s likely that I don\u0027t have a powerful enough machine to load and build the debug runtime locally. I\u0027ll try what GitHub provides.",
                                           "updatedAt":  "2024-01-04T14:00:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wCcTG",
                                           "createdAt":  "2024-01-06T13:31:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pawchen",
                                           "body":  "Well, surprise number one, it\u0027s more involved than I initially thought, we do need some sort of escaping as the pattern could contain:\r\n\r\n1. Illegal xml chars, such as 0x00 and 0xFFFF\r\n1. Multiple lines, which break the /// as single line comment\r\n1. Other invisible chars\r\n\r\nSo my PR handles those using syntaxes that are the same for C# escape and Regex escape. That means the result will be slightly opinionated. For example, both `\"\\n\"` and `@\"\\n\"` will match a line feed despite the string value, we will display `\\n` for both cases. For patterns like `\"0x00\"`, we will display `\\u0000`.\r\n\r\nSurprise number two, I underestimated my machine. This weekend I cloned this repo locally, then ran `.\\build.cmd clr+libs -rc release`, the build took only 5.5 minutes LOL I thought it would be 40mins or more! The biggest headache was actually git failing to clone the 1.2G size of this repo over the wire multiple times until it finally succeeded. Impressive!",
                                           "updatedAt":  "2024-01-06T13:31:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wP1wN",
                                           "createdAt":  "2024-01-09T14:54:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pawchen",
                                           "body":  "Ops, it turns out this is a lot more involved, my current PR is heading towards the wrong direction. I need to reconsider the implementation and send another PR.",
                                           "updatedAt":  "2024-01-09T14:54:49Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "Escaped pattern in the summary of GeneratedRegex",
        "labels":  [
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96413",
        "createdAt":  "2024-01-02T18:17:26Z",
        "number":  96413,
        "author":  "danmoseley",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-27T14:38:13Z",
        "body":  "The Rebar regex benchmarks have been updated to 8.0. The good news is that we are now in aggregate faster than PCRE on this benchmark, apparently, and faster than Rust regex on a few individual benchmarks. However there are a few outliers where .NET are significantly behind Rust regex, which is one of the fastest available.\r\n\r\nSee \r\nhttps://github.com/BurntSushi/rebar/pull/10#issuecomment-1832997519\r\nhttps://github.com/BurntSushi/rebar/pull/10#issuecomment-1872949200\r\nthese include the command line to reproduce the numbers -- and the repo itself is very well documented and has powerful scripts.\r\n\r\nTask here is to investigate any of the biggest outliers of which these are the largest\r\n```\r\nbenchmark                                       dotnet/compiled        rust/regex\r\n---------                                       ---------------        ----------\r\ncurated/03-date/ascii                           1162.4 KB/s (139.40x)  158.2 MB/s (1.00x)\r\ncurated/03-date/unicode                         1167.8 KB/s (137.05x)  156.3 MB/s (1.00x)\r\ncurated/12-dictionary/single                    1436.7 KB/s (507.60x)  712.2 MB/s (1.00x)\r\n```\r\nand determine whether there is an optimization we are missing that would help close the gap.\r\n\r\nIt is OK to look at the code in https://docs.rs/crate/regex/latest/source/LICENSE-MIT.\r\n\r\nNOTE -- this benchmark does not support source generated regex: these are from compiled. However, almost all optimizations in one apply to the other.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOb7lR2w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5vuMJ5",
                                           "createdAt":  "2024-01-02T18:17:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe Rebar regex benchmarks have been updated to 8.0. The good news is that we are now in aggregate faster than PCRE on this benchmark, apparently, and faster than Rust regex on a few individual benchmarks. However there are a few outliers where .NET are significantly behind Rust regex, which is one of the fastest available.\r\n\r\nSee \r\nhttps://github.com/BurntSushi/rebar/pull/10#issuecomment-1832997519\r\nhttps://github.com/BurntSushi/rebar/pull/10#issuecomment-1872949200\r\nthese include the command line to reproduce the numbers -- and the repo itself is very well documented and has powerful scripts.\r\n\r\nTask here is to investigate any of the biggest outliers of which these are the largest\r\n```\r\nbenchmark                                       dotnet/compiled        rust/regex\r\n---------                                       ---------------        ----------\r\ncurated/03-date/ascii                           1162.4 KB/s (139.40x)  158.2 MB/s (1.00x)\r\ncurated/03-date/unicode                         1167.8 KB/s (137.05x)  156.3 MB/s (1.00x)\r\ncurated/12-dictionary/single                    1436.7 KB/s (507.60x)  712.2 MB/s (1.00x)\r\n```\r\nand determine whether there is an optimization we are missing that would help close the gap.\r\n\r\nIt is OK to look at the code in https://docs.rs/crate/regex/latest/source/LICENSE-MIT.\r\n\r\nNOTE -- this benchmark does not support source generated regex: these are from compiled. However, almost all optimizations in one apply to the other.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003edanmoseley\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Text.RegularExpressions`, `help wanted`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2024-01-02T18:17:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vuVHb",
                                           "createdAt":  "2024-01-02T18:53:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODhHfbQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2024-01-02T20:09:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2024-05-08T12:52:49Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "If memory serves from when I previously looked at these, they\u0027re all cases that involve monstrous alternations, e.g. the dictionary one was an alternation of thousands of words, and I think the date ones were a bunch of complicated regexes or\u0027d together for handling different date patterns, basically a date parser.  I expect that once we incorporate `SearchValues.Create\u003cstring\u003e` in, the dictionary one will get much better, utilizing the fallback in `SearchValues.Create` that handles an arbitrary number of strings via Aho-Corasick (though that might need further optimization to do super well, @MihaZupan).\r\n\r\n@danmoseley, can you try those specific benchmarks with NonBacktracking? I expect it should do much better with than without.",
                                           "updatedAt":  "2024-01-02T18:53:07Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "investigate outliers in Rebar regex benchmarks",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/103438",
        "createdAt":  "2024-06-13T18:53:44Z",
        "number":  103438,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC4wb9A==",
                          "nodes":  [
                                        {
                                            "content":  "HOORAY",
                                            "user":  "PaulusParssinen",
                                            "createdAt":  "2024-06-13T20:29:25Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2024-06-14T00:23:12Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "kyoyama-kazusa",
                                            "createdAt":  "2024-06-14T14:02:18Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "D3-LucaPiombino",
                                            "createdAt":  "2024-06-16T22:35:32Z"
                                        },
                                        {
                                            "content":  "HOORAY",
                                            "user":  "RenderMichael",
                                            "createdAt":  "2024-06-20T02:42:20Z"
                                        }
                                    ],
                          "totalCount":  5
                      },
        "updatedAt":  "2025-07-01T03:33:28Z",
        "body":  "The analyzer will currently flag fields like:\n```C#\nprivate static readonly Regex s_regex = new Regex(...);\n```\nand the fixer will propose generating a new method instead. Now that partial properties are a thing and are supported by the generator, the fixer can instead just change the field to be a property (and a user can subsequently rename it if desired), e.g.\n```C#\n[GeneratedRegex(...)]\nprivate static partial Regex s_regex { get; }\n```\n\nFor cases where the analyzer flags a property, it\u0027s even easier: it can just make the property partial, remove the initialization, and add the attribute.\n\nAnd for cases where something new still needs to be generated, the fixer could offer the choice of a method or property.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgSMCfA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6BIwJ8",
                                           "createdAt":  "2024-06-13T18:54:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-13T18:54:01Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Update [GeneratedRegex] analyzer/fixer for partial properties",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104212",
        "createdAt":  "2024-06-30T13:49:21Z",
        "number":  104212,
        "author":  "madelson",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-03T21:59:11Z",
        "body":  "### Description\n\nIn multitargeted projects (e.g. netstandard2.0 + .net8.0), the regex analyzer often suggests a refactor to use `GeneratedRegex`.\r\n\r\nHowever, GeneratedRegex isn\u0027t compatible with older frameworks, both because the attribute does not exist and because the source generator doesn\u0027t run on the older frameworks.\r\n\r\nIt would be nice if the generator would simply emit a cached field for frameworks that don\u0027t support full source generation, just like it does today for older language versions. The user would still have to shim the attribute themselves, but this is easy to do, could be done by the codefix, or could probably even be part of the generator itself.\r\n\r\nThis would allow multi-targeted libraries to take advantage of generated regex performance for the builds that target newer frameworks while still supporting netstandard2.0.\n\n### Reproduction Steps\n\nTry to use GeneratedRegex in a multi-targeted project\n\n### Expected behavior\n\nIt would be nice if this \"just worked\", but at least it should stop suggesting a codefix which breaks the build.\n\n### Actual behavior\n\nGenerator does not run\n\n### Regression?\n\nNo\n\n### Known Workarounds\n\nI can manually fork the generation with #if:\r\n\r\n```\r\n#if NET\r\n    [StringSyntax(StringSyntaxAttribute.Regex)]\r\n#endif\r\n    private const string MyRegexPattern = @\"a.*b\";\r\n\r\n#if !NET\r\n    private static Regex? MyRegexCache;\r\n    private static Regex MyRegex() =\u003e MyRegexCache ??= new(MyRegexPattern);\r\n#else\r\n    [GeneratedRegex(MyRegex)]\r\n    private static partial Regex MyRegex();\r\n#endif\r\n```\n\n### Configuration\n\n.NET 8\n\n### Other information\n\nn/a",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOg5H50Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6DC4R5",
                                           "createdAt":  "2024-06-30T13:49:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-06-30T13:49:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DC4rX",
                                           "createdAt":  "2024-06-30T13:55:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e It would be nice if the generator would simply emit a cached field for frameworks that don\u0027t support full source generation\n\nIt\u0027s part of the ref pack for the target framework. It\u0027s not that it doesn\u0027t emit code downlevel, it\u0027s that it doesn\u0027t even exist downlevel.",
                                           "updatedAt":  "2024-06-30T13:55:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DC411",
                                           "createdAt":  "2024-06-30T13:58:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e It would be nice if this \"just worked\", but at least it should stop suggesting a codefix which breaks the build.\n\nThis is the case for all analyzers in .NET that look for a particular newer API and suggest upgrading to it, not just the regex analyzer.",
                                           "updatedAt":  "2024-06-30T13:58:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DC6GS",
                                           "createdAt":  "2024-06-30T14:15:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madelson",
                                           "body":  "\u003e It\u0027s part of the ref pack for the target framework. It\u0027s not that it doesn\u0027t emit code downlevel, it\u0027s that it doesn\u0027t even exist downlevel.\r\n\r\nI can see that, but it seems like the System.Text.Json generator does exist in older frameworks, so I wondered if it were possible for the same to be true with regex generation.\r\n\r\n\u003e This is the case for all analyzers in .NET that look for a particular newer API and suggest upgrading to it, not just the regex analyzer.\r\n\r\nAgreed. I wish this weren\u0027t the case and it seems like it should be solvable, but that would be a very different project.",
                                           "updatedAt":  "2024-06-30T14:15:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DDBFV",
                                           "createdAt":  "2024-06-30T15:59:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODn4NGw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2024-07-01T10:51:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e but it seems like the System.Text.Json generator does exist in older frameworks\n\nSTJ ships as a nuget package for downlevel use and never shipped in-box on .NET Framework.",
                                           "updatedAt":  "2024-06-30T15:59:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DETho",
                                           "createdAt":  "2024-07-01T02:05:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD-zkXQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Daniel-Svensson",
                                                                               "createdAt":  "2024-07-01T06:06:34Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "madelson",
                                                                               "createdAt":  "2024-07-01T10:51:30Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "gsino",
                                                                               "createdAt":  "2024-12-12T20:42:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "RenderMichael",
                                           "body":  "I agree with the sentiment, it would be very nice if the Regex generator could ship for standard 2.x, even if it does nothing but make a normal cached regex instance. It would remove the complexity/ optimization tradeoff here. ",
                                           "updatedAt":  "2024-07-01T02:05:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DIkXm",
                                           "createdAt":  "2024-07-01T12:51:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "julealgon",
                                           "body":  "\u003e \u003e It would be nice if the generator would simply emit a cached field for frameworks that don\u0027t support full source generation\r\n\u003e \r\n\u003e It\u0027s part of the ref pack for the target framework. It\u0027s not that it doesn\u0027t emit code downlevel, it\u0027s that it doesn\u0027t even exist downlevel.\r\n\r\n@stephentoub I ran into this scenario last week when trying to see if I could get Regex generation on our older project to work, and saw that the dll where the generator is implemented is not exposed in NuGet but only as part of the app.ref packages.\r\n\r\nIs that purely a maintenance-related matter on your side, in the sense that you don\u0027t need to worry about exposing a lot of some of these \"base\" libraries as a dedicated NuGet, or is there more to it?\r\n\r\nI assume that\u0027s why the decision was made but figured I\u0027d ask to clarify.",
                                           "updatedAt":  "2024-07-01T12:51:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DKDsq",
                                           "createdAt":  "2024-07-01T15:24:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODn6lzA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2024-07-01T15:34:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Is that purely a maintenance-related matter on your side, in the sense that you don\u0027t need to worry about exposing a lot of some of these \"base\" libraries as a dedicated NuGet, or is there more to it?\n\nIt\u0027s related but more about the complexity of the source generator. Today, the source generator is part of a .NET version, effectively providing the implementation of APIs in that release. That means it needn\u0027t be concerned about things like using APIs that aren\u0027t available, having different code paths to follow based on which APIs exist and which don\u0027t. It means it can be kept in sync with RegexOptions.Compiled, as the code for each is effectively 1:1. It means it doesn\u0027t need to be concerned about being used on newer or older versions, just the one it\u0027s a part of. Etc. Changing that adds significant complexity, both in implementation, in deployment management, in support, etc. We\u0027ve accepted that cost when we\u0027ve effectively had to, e.g. when the library with which the generator is associated itself ships out-of-band in a nuget package, but we\u0027ve avoided doing so otherwise. We do not currently intend to do otherwise for regex.",
                                           "updatedAt":  "2024-07-01T15:24:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Djm8D",
                                           "createdAt":  "2024-07-03T20:08:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Moving to future; please close if the discussion leads that way (i.e. not adding an additional target for netstandard).",
                                           "updatedAt":  "2024-07-03T20:08:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DkY4s",
                                           "createdAt":  "2024-07-03T21:36:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "madelson",
                                           "body":  "WRT maintenance, I feel like this could be done in a way that wouldn’t touch the core generator code at all.\r\n\r\nImagine there were a new package targeting netstandard that did 2 things:\r\n1) shimmed the GeneratedRegexAttribute in the same way as packages like IsExternalInit\r\n2) Provided a source generator that would generate the cached field _behind a framework #if that ensure it won’t light up on any framework that supports real regex generation_.\r\n\r\nThis only code this package would want to potentially share with the main dotnet runtime source is the attribute definition and the source generator logic for locating the attribute usages, but frankly both of those are optional.",
                                           "updatedAt":  "2024-07-03T21:36:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6DkfnR",
                                           "createdAt":  "2024-07-03T21:59:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "RenderMichael",
                                           "body":  "I think the main concern here with targeting netstandard is that eg. .NET 7 would be a supported platform, but which is incompatible with the source gen (eg. `SearchValues` is unavailable). The generator code is only meant to work with the latest source gen.\r\n\r\nI have a more unconventional suggestion. What if a nuget package is released which targets every platform in netstandard 2.0 that doesn’t support `GeneratedRegex` (that’s .NET 6 and below)? That way, .NET 7 is not a supported target, but it’s not an issue because support is there out of the box. ",
                                           "updatedAt":  "2024-07-03T21:59:11Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "System.Text.RegularExpressions.Generator doesn\u0027t support multi-targeted projects, even if GeneratedRegexAttribute is shimmed",
        "labels":  [
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/108335",
        "createdAt":  "2024-09-27T08:09:43Z",
        "number":  108335,
        "author":  "ItaiTzur76",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC7YSYw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "gtzures",
                                            "createdAt":  "2024-09-27T12:16:01Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-09-30T15:17:28Z",
        "body":  "### URL(s)\r\n\r\nhttps://GitHub.com/microsoft/referencesource/blob/master/README.md\r\n\r\n### Description\r\n\r\nI need to match `+`, `-`, `.`, `/` or a digit. Since all characters from `-` to `9` are in [the ASCII range I need](https://www.AsciiTable.com) I used `@\"[+\\--9]\"` (i.e. \"match `+` or any single character from `-` to `9`\") as the Regex pattern.\r\nHowever, the following expression:\r\n```cs\r\nSystem.Text.RegularExpressions.Regex.IsMatch(input: \"3\", pattern: @\"[+\\--9]\")\r\n```\r\nreturns `false`.\r\nI made sure I followed Microsoft\u0027s [Positive character group](https://learn.microsoft.com/en-us/dotnet/standard/base-types/character-classes-in-regular-expressions#positive-character-group--) instructions.\r\nTo double-check, I tried it at various online Regex tester websites ([Regex101](https://regex101.com), [RegExr](https://RegExr.com), [RegexLearn](https://RegexLearn.com/playground)) and they all matched `3` when I provided `[+\\--9]` as pattern and `3` as input.\r\n#### Expected behavior:\r\nThe expression\r\n```cs\r\nSystem.Text.RegularExpressions.Regex.IsMatch(input: \"3\", pattern: @\"[+\\--9]\")\r\n```\r\nreturns `true`.\r\n#### Actual behavior:\r\nThe expression\r\n```cs\r\nSystem.Text.RegularExpressions.Regex.IsMatch(input: \"3\", pattern: @\"[+\\--9]\")\r\n```\r\nreturns `false`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOjhFQww==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6N1mGk",
                                           "createdAt":  "2024-09-27T16:17:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-27T16:17:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OELJf",
                                           "createdAt":  "2024-09-30T15:01:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "As mentioned above, the other RegEx tools find a match with `[+\\--9]` and the input value \"3\".\r\n\r\nThe positive character group doc linked above has a sample that doesn\u0027t work as it should. It states `To include a hyphen as a nonperipheral member of a character group, escape it. For instance, to create a character group for the character a and the characters from - to /, the correct syntax is [a\\--/]` however, passing in \".\" (ASCII 46) (which is in-between 45 `-` and 47 `/`) doesn\u0027t return a match. E.g. `Regex.IsMatch(input: \".\", pattern: @\"[a\\--/]\")`.\r\n\r\nChanging the range from `[+\\--9]` to `[+.-9]` results in \"3\" being a match.\r\n\r\nThus the problem appears to be with `-` and the need to escape it.",
                                           "updatedAt":  "2024-09-30T15:01:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OELqm",
                                           "createdAt":  "2024-09-30T15:02:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "PTAL @stephentoub for priority.",
                                           "updatedAt":  "2024-09-30T15:02:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OEOQb",
                                           "createdAt":  "2024-09-30T15:05:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e PTAL [@stephentoub](https://github.com/stephentoub) for priority.\n\nI\u0027ve not looked in detail, but priority-wise, it\u0027s always behaved this way (e.g. netfx produces the same result).",
                                           "updatedAt":  "2024-09-30T15:05:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OEPTV",
                                           "createdAt":  "2024-09-30T15:07:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "\u003e Since all characters from - to 9 are in the ASCII range I need I used @\"[+\\--9]\"\r\n\r\nSide note: Doing that isn\u0027t necessary perf-wise as Regex can figure it out if it mattered, but it does make the pattern harder to understand.",
                                           "updatedAt":  "2024-09-30T15:07:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OEVDD",
                                           "createdAt":  "2024-09-30T15:17:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "I\u0027ll move it to future for now. Fixing will be a breaking change, so that needs to be factored into the decision to fix or not.",
                                           "updatedAt":  "2024-09-30T15:17:17Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Regex does not match, given a character-range from non-peripheral minus",
        "labels":  [
                       "bug",
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111051",
        "createdAt":  "2025-01-03T04:18:32Z",
        "number":  111051,
        "author":  "longxya",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:53:10Z",
        "body":  "### Description\n\nIf pattern includes `()+?`, then `Regex.Match(input,pattern)` will match differnet `new Regex(pattern ,RegexOptions.Compiled).Match(input)`\n\nSome discussions in [GitHub Discussion #110976](https://github.com/dotnet/runtime/discussions/110976#discussion-7751566)\n\n### Reproduction Steps\n\n```\nusing System.Text.RegularExpressions;\n\nstring input = \"wtfb\";\nstring pattern=\"^(.)+()+?b\";\nMatch matchInterpreted = new Regex(pattern, RegexOptions.None).Match(input);\nMatch matchCompiled = new Regex(pattern, RegexOptions.Compiled).Match(input);\n\nConsole.WriteLine($\"Interpreted: {matchInterpreted.Value}\");\nConsole.WriteLine($\"Compiled: {matchCompiled.Value}\");\n```\nOutput:\n```\nInterpreted: b\nCompiled: wtfb\n```\n\n\n### Expected behavior\n\nOutput:\n```\nInterpreted: wtfb\nCompiled: wtfb\n```\n\n### Actual behavior\n\nOutput:\n```\nInterpreted: b\nCompiled: wtfb\n```\nIt looks like `()+?` would make nearest outside brackets start at where the empty loop began, and this effect maybe gradually spread to group 0 or not. \n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrlxOnw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ZGt28",
                                           "createdAt":  "2025-01-03T04:18:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-03T04:18:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZHNbO",
                                           "createdAt":  "2025-01-03T07:42:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEA8SHA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "longxya",
                                                                               "createdAt":  "2025-01-03T15:28:21Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "DL444",
                                           "body":  "\u003e Interpreted: b\n\nTypo in the expected behavior. It is expected that the interpreted result matches compiled.",
                                           "updatedAt":  "2025-01-03T07:42:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6aaeeR",
                                           "createdAt":  "2025-01-14T17:24:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Verified - the interpreted mode has a different result than both compiled and generated via `[GeneratedRegex]` and .NET v8, v9 and current v10 have the same issue.\n\nI\u0027ll mark this as a bug and for v10 however with \"help wanted\".\n\ncc @stephentoub\n",
                                           "updatedAt":  "2025-01-14T17:24:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ac1G4",
                                           "createdAt":  "2025-01-14T22:36:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "longxya",
                                           "body":  "Do I need to submit new issues for other regular expression problems that appear to be bugs? Such as:\n\u003eUsing `new Regex(\"(.)(?\u00272-1\u0027(?\u0027-1\u0027.))\", RegexOptions.Compiled).Matches(\"wtf\")`  will throw an exception \"Index was outside the bounds of the array\". \n\n- For regularexpression `(?\u00272-1\u0027(?\u00271\u0027.))` , the interpreted mode has a different result than both compiled and generated via [GeneratedRegex].",
                                           "updatedAt":  "2025-01-15T00:22:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6asJu6",
                                           "createdAt":  "2025-01-16T11:25:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ovidiucosteanet",
                                           "body":  "Hello! I\u0027d like to create a PR for this. Can you please assign the issue to me?",
                                           "updatedAt":  "2025-01-16T11:32:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6c7R9Q",
                                           "createdAt":  "2025-02-04T04:23:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEFJCog==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ovidiucosteanet",
                                                                               "createdAt":  "2025-02-04T07:47:36Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@ovidiucosteanet, if you\u0027d like to give it a go, we\u0027d welcome the help. Thanks.",
                                           "updatedAt":  "2025-02-04T04:23:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j5W1K",
                                           "createdAt":  "2025-03-25T00:26:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "longxya",
                                           "body":  "@stephentoub @ovidiucosteanet \nSimilar regular expressions can cause infinite matching\n\nMaybe it is related to [this issue](https://github.com/dotnet/runtime/issues/43314)\n\n```csharp\nusing System;\nusing System.Text.RegularExpressions;\n\nstring pattern = @\"(()+?){2}\";\n//pattern = @\"(()+?)+\";\n//pattern = @\"(()+?)*\";\n//pattern = @\"(()+?){1,2}\";\nstring input = \"WTF123a1\";\nint timeOut = 10;\nRegex regex = new Regex(pattern, RegexOptions.None, TimeSpan.FromMilliseconds(timeOut));\nvar mhes = regex.Matches(input);\ntry\n{\n\t//var matchCount = mhes.Count;// will throw TimeOutException if memory is enough\n\tfor (var i = 0; i \u003c 1000; i++)\n\t{\n\t\tConsole.WriteLine(mhes[i].Index + \" , \" + mhes[i].Length);\n\t}\n}catch(Exception e)\n{\n\tConsole.WriteLine(\"Interpreted : \"+e.Message);\n}\n```\nOutput:\n```\n0 , 3\n0 , 3\n0 , 3\n0 , 3\n0 , 3\n0 , 3\n  ·\n  ·\n  ·\n```\n\nAnd I do not know why changing the quantifier to something like `{2,100}` would directly throw an exception `System.OutOfMemoryException`\n```csharp\nusing System;\nusing System.Text.RegularExpressions;\n\nstring pattern = @\"(()+?){2,100}\";\nstring input = \"WTF123a1\";\nint timeOut = 10;\nRegex regex = new Regex(pattern, RegexOptions.None, TimeSpan.FromMilliseconds(timeOut));\nvar mhes = regex.Matches(input);\ntry\n{\n\tfor (var i = 0; i \u003c 1000; i++)\n\t{\n\t\tConsole.WriteLine(mhes[i].Index + \" , \" + mhes[i].Length);\n\t}\n}catch(Exception e)\n{\n\tConsole.WriteLine(\"Interpreted : \"+e.Message);\n}\n```\nOutput:\n```\nInterpreted : Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.\n```",
                                           "updatedAt":  "2025-03-25T00:26:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j5oxA",
                                           "createdAt":  "2025-03-25T01:21:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "longxya",
                                           "body":  "```csharp\nusing System;\nusing System.Text.RegularExpressions;\n\nstring pattern = @\"(()+?){2,100}\";\nstring input = \"1\";\nint timeOut = 10;\nRegex regex = new Regex(pattern, RegexOptions.None, TimeSpan.FromMilliseconds(timeOut));\n//var match = regex.Match(input);\ntry\n{\n\tvar b = regex.IsMatch(input);\n\t//Console.WriteLine(match.Index + \" , \" + match.Length);\n}catch(Exception e)\n{\n\tConsole.WriteLine(\"Interpreted : \"+e.Message);\n}\n```\nOutput:\n```\nInterpreted : Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.\n```",
                                           "updatedAt":  "2025-03-25T01:21:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uXE6f",
                                           "createdAt":  "2025-05-31T14:49:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@ovidiucosteanet are you still looking at this?",
                                           "updatedAt":  "2025-05-31T14:49:29Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Result of Regex.Match(\"wtfb\",@\"(.)()+?b\") is not same as new Regex(@\"(.)()+?b\",RegexOptions.Compiled).Match(\"wtfb\")",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111161",
        "createdAt":  "2025-01-07T15:39:49Z",
        "number":  111161,
        "author":  "longxya",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCjcOg==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Copilot",
                                            "createdAt":  "2025-05-19T21:18:10Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-05-19T21:18:07Z",
        "body":  "### Description\n\nIn the balancing group `(?\u0027g1-g2\u0027exp)`, when the content matched by `exp` precedes the latest capture of `g2`,  `g1.Captures.Count` and the actual behavior of `g1` are inconsistent.\n\nBy checking the captures of the group using `Group.Captures`, you will find that the captures appear empty. However, when using `(?(g1)yes|no)` for conditional evaluation, it will match `yes`, indicating that there actually is a capture.\n\n\n更多关于平衡组的bug，可以参考[平衡组的bug·其二](https://github.com/longxya/dotNetRegexBug/blob/main/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8Fbug%E6%B1%87%E6%80%BB.md#%E5%B9%B3%E8%A1%A1%E7%BB%84%E7%9A%84bug%E5%85%B6%E4%BA%8C)\nFor more information about this bug, please refer to [Bug in Balancing Groups - Part 2](https://github.com/longxya/dotNetRegexBug/blob/main/Summary%20of%20Regular%20Expression%20Bugs.md#bug-in-balancing-groups---part-2)\n\n测试用例中，使用到了比较复杂的正则表达式。\n\u003e复杂的正则表达式，可视化可参考[正则可视化与调试工具](https://github.com/longxya/regexDEV)\n\nIn the test cases, more complex regular expressions are used.\n\u003e For visualizing and debugging complex regular expressions, you can refer to [Regex Visualization and Debugging Tool](https://github.com/longxya/regexDEV)\n\n### Reproduction Steps\n\n```\nusing System.Text.RegularExpressions;\n\nstring input = \"00123xzacvb1\";\nstring pattern=@\"\\d+((?\u0027x\u0027[a-z-[b]]+)).(?\u003c=(?\u00272-1\u0027(?\u0027x1\u0027..)).{6})b(?(2)(?\u0027Group2Captured\u0027.)|(?\u0027Group2NotCaptured\u0027.))\";\ntry\n{\n\tMatch matchInterpreted = new Regex(pattern, RegexOptions.None).Match(input);\n\tConsole.WriteLine($\"Interpreted Group2: {matchInterpreted.Groups[2].Captures.Count}\");\n\tConsole.WriteLine($\"Interpreted Group2Captured: {matchInterpreted.Groups[\"Group2Captured\"].Captures.Count\u003e0}\");\n\tConsole.WriteLine($\"Interpreted Group2NotCaptured: {matchInterpreted.Groups[\"Group2NotCaptured\"].Captures.Count\u003e0}\");\n}catch(Exception ex)\n{\n\tConsole.WriteLine($\"Interpreted Exception: {ex.Message}\");\n}\n\n\ntry\n{\n\tMatch matchCompiled = new Regex(pattern, RegexOptions.Compiled).Match(input);\n\tConsole.WriteLine($\"Compiled Group2: {matchCompiled.Groups[2].Captures.Count}\");\n\tConsole.WriteLine($\"Compiled Group2Captured: {matchCompiled.Groups[\"Group2Captured\"].Captures.Count\u003e0}\");\n\tConsole.WriteLine($\"Compiled Group2NotCaptured: {matchCompiled.Groups[\"Group2NotCaptured\"].Captures.Count\u003e0}\");\n}catch(Exception ex)\n{\n\tConsole.WriteLine($\"Compiled Exception: {ex.Message}\");\n}\n```\nOutput:\n```\nInterpreted Group2: 0\nInterpreted Group2Captured: True\nInterpreted Group2NotCaptured: False\nCompiled Group2: 0\nCompiled Group2Captured: True\nCompiled Group2NotCaptured: False\n````\n\n### Expected behavior\n\n```\nInterpreted Group2: 1\nInterpreted Group2Captured: True\nInterpreted Group2NotCaptured: False\nCompiled Group2: 1\nCompiled Group2Captured: True\nCompiled Group2NotCaptured: False\n```\n\nOr\n\n```\nInterpreted Group2: 0\nInterpreted Group2Captured: False\nInterpreted Group2NotCaptured: True\nCompiled Group2: 0\nCompiled Group2Captured: False\nCompiled Group2NotCaptured: True\n```\n\n### Actual behavior\n\n```\nInterpreted Group2: 0\nInterpreted Group2Captured: True\nInterpreted Group2NotCaptured: False\nCompiled Group2: 0\nCompiled Group2Captured: True\nCompiled Group2NotCaptured: False\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOovpR5g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6aZ6N4",
                                           "createdAt":  "2025-01-14T16:33:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Verified the repro, including verifying generated results via `[GeneratedRegex]` match the interpreted and compiled results.\n\nHowever, the repro should be simplified if possible so that it is easier to verify that the result is not correct and to help find the root cause.\n\nIs the discussion at https://github.com/dotnet/runtime/discussions/110976 for issues with `()+?` relevant here?\n\n\u003cdetails\u003e\n  \u003csummary\u003eFWIW: Generated C# results\u003c/summary\u003e\n\n```cs\n// \u003cauto-generated/\u003e\n#nullable enable\n#pragma warning disable CS0162 // Unreachable code\n#pragma warning disable CS0164 // Unreferenced label\n#pragma warning disable CS0219 // Variable assigned but never used\n\nnamespace ConsoleApp332\n{\n    partial class Program\n    {\n        /// \u003cremarks\u003e\n        /// Pattern:\u003cbr/\u003e\n        /// \u003ccode\u003e\\\\d+((?\u0027x\u0027[a-z-[b]]+)).(?\u0026lt;=(?\u00272-1\u0027(?\u0027x1\u0027..)).{6})b(?(2)(?\u0027Group2Captured\u0027.)|(?\u0027Group2NotCaptured\u0027.))\u003c/code\u003e\u003cbr/\u003e\n        /// Options:\u003cbr/\u003e\n        /// \u003ccode\u003eRegexOptions.IgnoreCase\u003c/code\u003e\u003cbr/\u003e\n        /// Explanation:\u003cbr/\u003e\n        /// \u003ccode\u003e\n        /// ○ Match a Unicode digit greedily at least once.\u003cbr/\u003e\n        /// ○ 1st capture group.\u003cbr/\u003e\n        ///     ○ \"x\" capture group.\u003cbr/\u003e\n        ///         ○ Match a character in the set [A-Za-z\\u0130\\u212A-[Bb]] greedily at least once.\u003cbr/\u003e\n        /// ○ Match any character other than \u0027\\n\u0027.\u003cbr/\u003e\n        /// ○ Zero-width positive lookbehind.\u003cbr/\u003e\n        ///     ○ Match a character other than \u0027\\n\u0027 exactly 6 times right-to-left.\u003cbr/\u003e\n        ///     ○ Balancing group. Captures the 2nd capture group and uncaptures the 1st capture group.\u003cbr/\u003e\n        ///         ○ \"x1\" capture group.\u003cbr/\u003e\n        ///             ○ Match a character other than \u0027\\n\u0027 exactly 2 times right-to-left.\u003cbr/\u003e\n        /// ○ Match a character in the set [Bb].\u003cbr/\u003e\n        /// ○ Atomic group.\u003cbr/\u003e\n        ///     ○ Conditionally match one of two expressions depending on whether the 2nd capture group matched.\u003cbr/\u003e\n        ///         ○ Matched: \"Group2Captured\" capture group.\u003cbr/\u003e\n        ///             ○ Match any character other than \u0027\\n\u0027.\u003cbr/\u003e\n        ///         ○ Not Matched: \"Group2NotCaptured\" capture group.\u003cbr/\u003e\n        ///             ○ Match any character other than \u0027\\n\u0027.\u003cbr/\u003e\n        /// \u003c/code\u003e\n        /// \u003c/remarks\u003e\n        [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Text.RegularExpressions.Generator\", \"10.0.11.11703\")]\n        private static partial global::System.Text.RegularExpressions.Regex TestRegex() =\u003e global::System.Text.RegularExpressions.Generated.TestRegex_0.Instance;\n    }\n}\n\nnamespace System.Text.RegularExpressions.Generated\n{\n    using System;\n    using System.Buffers;\n    using System.CodeDom.Compiler;\n    using System.Collections;\n    using System.ComponentModel;\n    using System.Globalization;\n    using System.Runtime.CompilerServices;\n    using System.Text.RegularExpressions;\n    using System.Threading;\n\n    /// \u003csummary\u003eCustom \u003csee cref=\"Regex\"/\u003e-derived type for the TestRegex method.\u003c/summary\u003e\n    [GeneratedCodeAttribute(\"System.Text.RegularExpressions.Generator\", \"10.0.11.11703\")]\n    file sealed class TestRegex_0 : Regex\n    {\n        /// \u003csummary\u003eCached, thread-safe singleton instance.\u003c/summary\u003e\n        internal static readonly TestRegex_0 Instance = new();\n    \n        /// \u003csummary\u003eInitializes the instance.\u003c/summary\u003e\n        private TestRegex_0()\n        {\n            base.pattern = \"\\\\d+((?\u0027x\u0027[a-z-[b]]+)).(?\u003c=(?\u00272-1\u0027(?\u0027x1\u0027..)).{6})b(?(2)(?\u0027Group2Captured\u0027.)|(?\u0027Group2NotCaptured\u0027.))\";\n            base.roptions = RegexOptions.IgnoreCase;\n            ValidateMatchTimeout(Utilities.s_defaultTimeout);\n            base.internalMatchTimeout = Utilities.s_defaultTimeout;\n            base.factory = new RunnerFactory();\n            base.CapNames = new Hashtable { { \"0\", 0 } ,  { \"1\", 1 } ,  { \"2\", 2 } ,  { \"Group2Captured\", 5 } ,  { \"Group2NotCaptured\", 6 } ,  { \"x\", 3 } ,  { \"x1\", 4 }  };\n            base.capslist = new string[] {\"0\", \"1\", \"2\", \"x\", \"x1\", \"Group2Captured\", \"Group2NotCaptured\" };\n            base.capsize = 7;\n        }\n    \n        /// \u003csummary\u003eProvides a factory for creating \u003csee cref=\"RegexRunner\"/\u003e instances to be used by methods on \u003csee cref=\"Regex\"/\u003e.\u003c/summary\u003e\n        private sealed class RunnerFactory : RegexRunnerFactory\n        {\n            /// \u003csummary\u003eCreates an instance of a \u003csee cref=\"RegexRunner\"/\u003e used by methods on \u003csee cref=\"Regex\"/\u003e.\u003c/summary\u003e\n            protected override RegexRunner CreateInstance() =\u003e new Runner();\n        \n            /// \u003csummary\u003eProvides the runner that contains the custom logic implementing the specified regular expression.\u003c/summary\u003e\n            private sealed class Runner : RegexRunner\n            {\n                /// \u003csummary\u003eScan the \u003cparamref name=\"inputSpan\"/\u003e starting from base.runtextstart for the next match.\u003c/summary\u003e\n                /// \u003cparam name=\"inputSpan\"\u003eThe text being scanned by the regular expression.\u003c/param\u003e\n                protected override void Scan(ReadOnlySpan\u003cchar\u003e inputSpan)\n                {\n                    // Search until we can\u0027t find a valid starting position, we find a match, or we reach the end of the input.\n                    while (TryFindNextPossibleStartingPosition(inputSpan) \u0026\u0026\n                           !TryMatchAtCurrentPosition(inputSpan) \u0026\u0026\n                           base.runtextpos != inputSpan.Length)\n                    {\n                        base.runtextpos++;\n                        if (Utilities.s_hasTimeout)\n                        {\n                            base.CheckTimeout();\n                        }\n                    }\n                }\n        \n                /// \u003csummary\u003eSearch \u003cparamref name=\"inputSpan\"/\u003e starting from base.runtextpos for the next location a match could possibly start.\u003c/summary\u003e\n                /// \u003cparam name=\"inputSpan\"\u003eThe text being scanned by the regular expression.\u003c/param\u003e\n                /// \u003creturns\u003etrue if a possible match was found; false if no more matches are possible.\u003c/returns\u003e\n                private bool TryFindNextPossibleStartingPosition(ReadOnlySpan\u003cchar\u003e inputSpan)\n                {\n                    int pos = base.runtextpos;\n                    \n                    // Any possible match is at least 5 characters.\n                    if (pos \u003c= inputSpan.Length - 5)\n                    {\n                        // The pattern begins with a Unicode digit.\n                        // Find the next occurrence. If it can\u0027t be found, there\u0027s no match.\n                        int i = inputSpan.Slice(pos).IndexOfAnyDigit();\n                        if (i \u003e= 0)\n                        {\n                            base.runtextpos = pos + i;\n                            return true;\n                        }\n                    }\n                    \n                    // No match found.\n                    base.runtextpos = inputSpan.Length;\n                    return false;\n                }\n        \n                /// \u003csummary\u003eDetermine whether \u003cparamref name=\"inputSpan\"/\u003e at base.runtextpos is a match for the regular expression.\u003c/summary\u003e\n                /// \u003cparam name=\"inputSpan\"\u003eThe text being scanned by the regular expression.\u003c/param\u003e\n                /// \u003creturns\u003etrue if the regular expression matches at the current position; otherwise, false.\u003c/returns\u003e\n                private bool TryMatchAtCurrentPosition(ReadOnlySpan\u003cchar\u003e inputSpan)\n                {\n                    int pos = base.runtextpos;\n                    int matchStart = pos;\n                    int capture_starting_pos = 0;\n                    int capture_starting_pos1 = 0;\n                    int capture_starting_pos2 = 0;\n                    int capture_starting_pos3 = 0;\n                    int capture_starting_pos4 = 0;\n                    int capture_starting_pos5 = 0;\n                    int charloop_capture_pos = 0;\n                    int charloop_capture_pos1 = 0;\n                    int charloop_starting_pos = 0, charloop_ending_pos = 0;\n                    int charloop_starting_pos1 = 0, charloop_ending_pos1 = 0;\n                    ReadOnlySpan\u003cchar\u003e slice = inputSpan.Slice(pos);\n                    \n                    // Match a Unicode digit greedily at least once.\n                    //{\n                        charloop_starting_pos = pos;\n                        \n                        int iteration = 0;\n                        while ((uint)iteration \u003c (uint)slice.Length \u0026\u0026 char.IsDigit(slice[iteration]))\n                        {\n                            iteration++;\n                        }\n                        \n                        if (iteration == 0)\n                        {\n                            UncaptureUntil(0);\n                            return false; // The input didn\u0027t match.\n                        }\n                        \n                        slice = slice.Slice(iteration);\n                        pos += iteration;\n                        \n                        charloop_ending_pos = pos;\n                        charloop_starting_pos++;\n                        goto CharLoopEnd;\n                        \n                        CharLoopBacktrack:\n                        UncaptureUntil(charloop_capture_pos);\n                        \n                        if (Utilities.s_hasTimeout)\n                        {\n                            base.CheckTimeout();\n                        }\n                        \n                        if (charloop_starting_pos \u003e= charloop_ending_pos ||\n                            (charloop_ending_pos = inputSpan.Slice(charloop_starting_pos, charloop_ending_pos - charloop_starting_pos).LastIndexOfAny(Utilities.s_nonAscii_53BE860A7BB3C901EBE8EECDBB69D761C6C74DF0564F8B7A7926DECC0EC263B1)) \u003c 0)\n                        {\n                            UncaptureUntil(0);\n                            return false; // The input didn\u0027t match.\n                        }\n                        charloop_ending_pos += charloop_starting_pos;\n                        pos = charloop_ending_pos;\n                        slice = inputSpan.Slice(pos);\n                        \n                        CharLoopEnd:\n                        charloop_capture_pos = base.Crawlpos();\n                    //}\n                    \n                    // Advance the next matching position.\n                    if (base.runtextpos \u003c pos)\n                    {\n                        base.runtextpos = pos;\n                    }\n                    \n                    // 1st capture group.\n                    //{\n                        capture_starting_pos = pos;\n                        \n                        // \"x\" capture group.\n                        //{\n                            capture_starting_pos1 = pos;\n                            \n                            // Match a character in the set [A-Za-z\\u0130\\u212A-[Bb]] greedily at least once.\n                            //{\n                                charloop_starting_pos1 = pos;\n                                \n                                int iteration1 = slice.IndexOfAnyExcept(Utilities.s_nonAscii_53BE860A7BB3C901EBE8EECDBB69D761C6C74DF0564F8B7A7926DECC0EC263B1);\n                                if (iteration1 \u003c 0)\n                                {\n                                    iteration1 = slice.Length;\n                                }\n                                \n                                if (iteration1 == 0)\n                                {\n                                    goto CharLoopBacktrack;\n                                }\n                                \n                                slice = slice.Slice(iteration1);\n                                pos += iteration1;\n                                \n                                charloop_ending_pos1 = pos;\n                                charloop_starting_pos1++;\n                                goto CharLoopEnd1;\n                                \n                                CharLoopBacktrack1:\n                                UncaptureUntil(charloop_capture_pos1);\n                                \n                                if (Utilities.s_hasTimeout)\n                                {\n                                    base.CheckTimeout();\n                                }\n                                \n                                if (charloop_starting_pos1 \u003e= charloop_ending_pos1 ||\n                                    (charloop_ending_pos1 = inputSpan.Slice(charloop_starting_pos1, charloop_ending_pos1 - charloop_starting_pos1).LastIndexOfAnyExcept(\u0027\\n\u0027)) \u003c 0)\n                                {\n                                    goto CharLoopBacktrack;\n                                }\n                                charloop_ending_pos1 += charloop_starting_pos1;\n                                pos = charloop_ending_pos1;\n                                slice = inputSpan.Slice(pos);\n                                \n                                CharLoopEnd1:\n                                charloop_capture_pos1 = base.Crawlpos();\n                            //}\n                            \n                            base.Capture(3, capture_starting_pos1, pos);\n                            \n                            goto CaptureSkipBacktrack;\n                            \n                            CaptureBacktrack:\n                            goto CharLoopBacktrack1;\n                            \n                            CaptureSkipBacktrack:;\n                        //}\n                        \n                        base.Capture(1, capture_starting_pos, pos);\n                        \n                        goto CaptureSkipBacktrack1;\n                        \n                        CaptureBacktrack1:\n                        goto CaptureBacktrack;\n                        \n                        CaptureSkipBacktrack1:;\n                    //}\n                    \n                    // Match any character other than \u0027\\n\u0027.\n                    if (slice.IsEmpty || slice[0] == \u0027\\n\u0027)\n                    {\n                        goto CaptureBacktrack1;\n                    }\n                    \n                    pos++;\n                    slice = inputSpan.Slice(pos);\n                    // Zero-width positive lookbehind.\n                    {\n                        slice = inputSpan.Slice(pos);\n                        int positivelookbehind_starting_pos = pos;\n                        \n                        if (Utilities.s_hasTimeout)\n                        {\n                            base.CheckTimeout();\n                        }\n                        \n                        // Match a character other than \u0027\\n\u0027 exactly 6 times right-to-left.\n                        {\n                            for (int i = 0; i \u003c 6; i++)\n                            {\n                                if ((uint)(pos - 1) \u003e= inputSpan.Length || inputSpan[pos - 1] == \u0027\\n\u0027)\n                                {\n                                    goto CaptureBacktrack1;\n                                }\n                                pos--;\n                            }\n                        }\n                        \n                        // Balancing group. Captures the 2nd capture group and uncaptures the 1st capture group.\n                        {\n                            capture_starting_pos2 = pos;\n                            \n                            if (!base.IsMatched(1))\n                            {\n                                goto CaptureBacktrack1;\n                            }\n                            \n                            // \"x1\" capture group.\n                            {\n                                capture_starting_pos3 = pos;\n                                \n                                // Match a character other than \u0027\\n\u0027 exactly 2 times right-to-left.\n                                {\n                                    for (int i = 0; i \u003c 2; i++)\n                                    {\n                                        if ((uint)(pos - 1) \u003e= inputSpan.Length || inputSpan[pos - 1] == \u0027\\n\u0027)\n                                        {\n                                            goto CaptureBacktrack1;\n                                        }\n                                        pos--;\n                                    }\n                                }\n                                \n                                base.Capture(4, capture_starting_pos3, pos);\n                            }\n                            \n                            base.TransferCapture(2, 1, capture_starting_pos2, pos);\n                        }\n                        \n                        pos = positivelookbehind_starting_pos;\n                        slice = inputSpan.Slice(pos);\n                    }\n                    \n                    // Match a character in the set [Bb].\n                    if (slice.IsEmpty || ((slice[0] | 0x20) != \u0027b\u0027))\n                    {\n                        goto CaptureBacktrack1;\n                    }\n                    \n                    // Conditionally match one of two expressions depending on whether the 2nd capture group matched.\n                    {\n                        pos++;\n                        slice = inputSpan.Slice(pos);\n                        if (base.IsMatched(2))\n                        {\n                            // The 2nd capture group captured a value.  Match the first branch.\n                            // \"Group2Captured\" capture group.\n                            {\n                                capture_starting_pos4 = pos;\n                                \n                                // Match any character other than \u0027\\n\u0027.\n                                if (slice.IsEmpty || slice[0] == \u0027\\n\u0027)\n                                {\n                                    goto CaptureBacktrack1;\n                                }\n                                \n                                pos++;\n                                slice = inputSpan.Slice(pos);\n                                base.Capture(5, capture_starting_pos4, pos);\n                            }\n                            \n                        }\n                        else\n                        {\n                            // Otherwise, match the second branch.\n                            // \"Group2NotCaptured\" capture group.\n                            {\n                                capture_starting_pos5 = pos;\n                                \n                                // Match any character other than \u0027\\n\u0027.\n                                if (slice.IsEmpty || slice[0] == \u0027\\n\u0027)\n                                {\n                                    goto CaptureBacktrack1;\n                                }\n                                \n                                pos++;\n                                slice = inputSpan.Slice(pos);\n                                base.Capture(6, capture_starting_pos5, pos);\n                            }\n                            \n                        }\n                    }\n                    \n                    // The input matched.\n                    base.runtextpos = pos;\n                    base.Capture(0, matchStart, pos);\n                    return true;\n                    \n                    // \u003csummary\u003eUndo captures until it reaches the specified capture position.\u003c/summary\u003e\n                    [MethodImpl(MethodImplOptions.AggressiveInlining)]\n                    void UncaptureUntil(int capturePosition)\n                    {\n                        while (base.Crawlpos() \u003e capturePosition)\n                        {\n                            base.Uncapture();\n                        }\n                    }\n                }\n            }\n        }\n\n    }\n    \n    /// \u003csummary\u003eHelper methods used by generated \u003csee cref=\"Regex\"/\u003e-derived implementations.\u003c/summary\u003e\n    [GeneratedCodeAttribute(\"System.Text.RegularExpressions.Generator\", \"10.0.11.11703\")]\n    file static class Utilities\n    {\n        /// \u003csummary\u003eDefault timeout value set in \u003csee cref=\"AppContext\"/\u003e, or \u003csee cref=\"Regex.InfiniteMatchTimeout\"/\u003e if none was set.\u003c/summary\u003e\n        internal static readonly TimeSpan s_defaultTimeout = AppContext.GetData(\"REGEX_DEFAULT_MATCH_TIMEOUT\") is TimeSpan timeout ? timeout : Regex.InfiniteMatchTimeout;\n        \n        /// \u003csummary\u003eWhether \u003csee cref=\"s_defaultTimeout\"/\u003e is non-infinite.\u003c/summary\u003e\n        internal static readonly bool s_hasTimeout = s_defaultTimeout != Regex.InfiniteMatchTimeout;\n        \n        /// \u003csummary\u003eFinds the next index of any character that matches a Unicode digit.\u003c/summary\u003e\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        internal static int IndexOfAnyDigit(this ReadOnlySpan\u003cchar\u003e span)\n        {\n            int i = span.IndexOfAnyExcept(Utilities.s_asciiExceptDigits);\n            if ((uint)i \u003c (uint)span.Length)\n            {\n                if (char.IsAscii(span[i]))\n                {\n                    return i;\n                }\n        \n                do\n                {\n                    if (char.IsDigit(span[i]))\n                    {\n                        return i;\n                    }\n                    i++;\n                }\n                while ((uint)i \u003c (uint)span.Length);\n            }\n        \n            return -1;\n        }\n        \n        /// \u003csummary\u003eSupports searching for characters in or not in \"\\0\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\a\\b\\t\\n\\v\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%\u0026amp;\u0027()*+,-./:;\u0026lt;=\u0026gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u007f\".\u003c/summary\u003e\n        internal static readonly SearchValues\u003cchar\u003e s_asciiExceptDigits = SearchValues.Create(\"\\0\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\a\\b\\t\\n\\v\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%\u0026\u0027()*+,-./:;\u003c=\u003e?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\\u007f\");\n        \n        /// \u003csummary\u003eSupports searching for characters in or not in \"ACDEFGHIJKLMNOPQRSTUVWXYZacdefghijklmnopqrstuvwxyzİK\".\u003c/summary\u003e\n        internal static readonly SearchValues\u003cchar\u003e s_nonAscii_53BE860A7BB3C901EBE8EECDBB69D761C6C74DF0564F8B7A7926DECC0EC263B1 = SearchValues.Create(\"ACDEFGHIJKLMNOPQRSTUVWXYZacdefghijklmnopqrstuvwxyzİK\");\n    }\n}\n```\n\u003c/details\u003e\n",
                                           "updatedAt":  "2025-01-14T17:12:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6acyNV",
                                           "createdAt":  "2025-01-14T22:27:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "longxya",
                                           "body":  "\u003e Is the discussion at [#110976](https://github.com/dotnet/runtime/discussions/110976) for issues with ()+? relevant here?\n\nDiscussion at [#110976](https://github.com/dotnet/runtime/discussions/110976) for issues with `()+?` is not relevant here. They are two separate problems, I think.\n\nThe main problem of the current issue is not the inconsistency between the interpreted mode and the compiled regular expression match results.   \nHowever, for the regular expressions raised in the current issue, they do sometimes match inconsistently.\n\nIn mircosoft\u0027s document [Balancing group definitions](https://learn.microsoft.com/en-us/dotnet/standard/base-types/grouping-constructs-in-regular-expressions#balancing-group-definitions), when this Balancing grouping construct has the following format:\n`(?\u003cname1-name2\u003esubexpression)`\n\u003eThe balancing group definition deletes the definition of name2 and stores the interval between name2 and name1 in name1. \n\nBut, what happens if match of `subexpression` comes before `name2`(`Groups[\"name2\"].Index`)?  \nBoth in interpreted and compiled mode, `name1` will capture an negative value, but `Groups[\"name1\"].Captures` is empty.\nIn this situation, if use `(?(name1)yes|no)`, or `\\k\u0027name1\u0027`, `(?\u0027-name1\u0027)`, it will provoke a series of problems:\n\n- If the capture group contains both normal content and negative length content, a fake pop phenomenon occurs during the balancing group pop operation. When the capture group first captures normal content and then captures negative length content, performing the balancing group pop operation will actually only pop the negative length content, leaving the normal content intact. However, querying the captures of the group using `Group.Captures` will show that the capture group has no captures left.  \ncase: `(?\u00272\u0027\\d+)([a-z-[b]]+).(?\u003c=(?\u00272-1\u0027..).{6})b(?(2)(?\u0027Group2Captured\u0027.)|(?\u0027Group2NotCaptured\u0027.))(?\u00272\u0027)(?\u0027-2\u0027)(?\u0027-2\u0027)\\2` match `00123xzacvb100123`\n- For a group with negative length capture, performing a balancing group pop operation, if you consider the negative length capture as part of the captures and continue popping until all captures (including negative length captures) are cleared, then the first attempt to retrieve the group information via `Match.Group[groupName]` or `Match.Group[groupNumber]` will throw an exception. On the second attempt, it will return null, and all subsequent groups after this group will also be null.  \ncase: `(?\u00272\u0027\\d+)([a-z-[b]]+).(?\u003c=(?\u00272-1\u0027..).{6})b(?(2)(?\u0027Group2Captured\u0027.)|(?\u0027Group2NotCaptured\u0027.))(?\u00272\u0027)(?\u0027-2\u0027)(?\u0027-2\u0027)(?\u0027-2\u0027)` match `00123xzacvb1`\n- If a group with recent negative length capture is back-referenced, it will result in a match failure in interpreter mode. In compiled mode, if the content matched by `exp` is exactly `L` characters ahead of the latest capture of `g2`, it will cause the current `input` index to move `L` characters in the opposite direction of the match.  \ncase: `\\d+([a-z-[b]]+).(?\u003c=(?\u00272-1\u0027.).{9})b(?(2)(?\u0027Group2Captured\u0027.)|(?\u0027Group2NotCaptured\u0027.))\\2` match `00123xzacvb1`\n- However, if the content matched by `exp` is exactly two characters ahead of the latest capture of `name2`, `name1` will behave quite \"normally\". But not entirely normal, after the push and pop operations on Group `name1` with `(?\u0027name1\u0027)(?\u0027-name1\u0027)`, the properties of `name1` are inconsistent before and after the operations.  \ncase: `\\d+([a-z-[b]]+).(?\u003c=(?\u00272-1\u0027..).{7})b(?(2)(?\u0027Group2Captured\u0027.)|(?\u0027Group2NotCaptured\u0027.))(?\u00272\u0027)(?\u0027-2\u0027)(?(2)(?\u0027Group2Captured\u0027.)|(?\u0027Group2NotCaptured\u0027.))` match `00123xzacvb21`\n- etc...",
                                           "updatedAt":  "2025-03-11T07:51:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6hpsGi",
                                           "createdAt":  "2025-03-10T23:18:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@stephentoub what is your take on this behavior?  Is it expected and we just need to document it better, or should we look into balancing groups deeper to see if there is a bug?  The [docs](https://learn.microsoft.com/en-us/dotnet/standard/base-types/grouping-constructs-in-regular-expressions?redirectedfrom=MSDN#balancing-group-definitions) mention that the balancing group `deletes` the previously defined group - is that why this behavior is observed?\n\nFWIW I tested the repo on a few different framework versions and it behaves consistently.  I also wasn\u0027t sure about group numbering, so I added logging to that.  Here\u0027s the updated source and output:\n\n```C#\nusing System.Text.RegularExpressions;\n\nstring input = \"00123xzacvb1\";\nstring pattern=@\"\\d+((?\u0027x\u0027[a-z-[b]]+)).(?\u003c=(?\u00272-1\u0027(?\u0027x1\u0027..)).{6})b(?(2)(?\u0027Group2Captured\u0027.)|(?\u0027Group2NotCaptured\u0027.))\";\ntry\n{\n\tMatch match = new Regex(pattern, RegexOptions.None).Match(input);\n\tfor (int i = 0; i \u003c match.Groups.Count; i++)\n\t\tConsole.WriteLine($\"Group{i} : \u0027{match.Groups[i]}\u0027 : Success {match.Groups[i].Success} : {match.Groups[i].Captures.Count}\");\n\tConsole.WriteLine($\"Group2Captured: {match.Groups[\"Group2Captured\"].Captures.Count\u003e0}\");\n\tConsole.WriteLine($\"Group2NotCaptured: {match.Groups[\"Group2NotCaptured\"].Captures.Count\u003e0}\");\n}\ncatch(Exception ex)\n{\n\tConsole.WriteLine($\"Interpreted Exception: {ex.Message}\");\n}\n```\n\nOutput:\n```\nGroup0 : \u002700123xzacvb1\u0027 : Success True : 1\nGroup1 : \u0027\u0027 : Success False : 0\nGroup2 : \u0027\u0027 : Success False : 0\nGroup3 : \u0027xzac\u0027 : Success True : 1\nGroup4 : \u002712\u0027 : Success True : 1\nGroup5 : \u00271\u0027 : Success True : 1\nGroup6 : \u0027\u0027 : Success False : 0\nGroup2Captured: True\nGroup2NotCaptured: False\n```",
                                           "updatedAt":  "2025-03-10T23:18:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6h5NsO",
                                           "createdAt":  "2025-03-12T01:20:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "longxya",
                                           "body":  "@stephentoub @steveharter @ericstj \nA new discovery:\n### In Compiled mode\n``` C#\nusing System;\nusing System.Text.RegularExpressions;\n\nstring input = \"00123xzacvb1\";\nstring pattern=@\"\\d+((?\u0027x\u0027[a-z-[b]]+)).(?\u003c=(?\u00272-1\u0027(?\u0027x1\u0027..)).{6})b(?(2)(?\u0027Group2Captured\u0027.)|(?\u0027Group2NotCaptured\u0027.))(?\u00272\u0027)(?\u0027-2\u0027)(?\u003c=(?\u0027wtf\u0027\\2))\";\ntry\n{\n\tMatch match = new Regex(pattern, RegexOptions.Compiled).Match(input);\n\ttry\n\t{\n\t\tfor (int i = 0; i \u003c match.Groups.Count; i++)\n\t\t{\n\t\t\tConsole.Write($\"Group{i} : Name:\u0027{match.Groups[i].Name}\u0027 : \\t\");\n\t\t\tConsole.WriteLine($\"Value:\u0027{match.Groups[i]}\u0027 :\\t Success {match.Groups[i].Success} : {match.Groups[i].Captures.Count}\");\n\t\t}\n\t}catch(Exception ex)\n\t{\n\t\tConsole.WriteLine(ex.Message);\n\t}\n}\ncatch(Exception ex)\n{\n\tConsole.WriteLine($\"Interpreted Exception: {ex.Message}\");\n}\n```\nOutput：\n```\nGroup0 : Name:\u00270\u0027 :     Value:\u002700123xzacvb1\u0027 :     Success True : 1\nGroup1 : Name:\u00271\u0027 :     Value:\u0027\u0027 :     Success False : 0\nGroup2 : Name:\u00272\u0027 :     Value:\u0027\u0027 :     Success False : 0\nGroup3 : Name:\u0027x\u0027 :     Value:\u0027xzac\u0027 :     Success True : 1\nGroup4 : Name:\u0027x1\u0027 :     Value:\u002712\u0027 :     Success True : 1\nGroup5 : Name:\u0027Group2Captured\u0027 :     Value:\u00271\u0027 :     Success True : 1\nGroup6 : Name:\u0027Group2NotCaptured\u0027 :     Value:\u0027\u0027 :     Success False : 0\nGroup7 : Name:\u0027wtf\u0027 :     Index and length must refer to a location within the string. (Parameter \u0027length\u0027)\n```\n------------------\n------------------\nTwo of the old discoveries:\n```c#\nusing System;\nusing System.Text.RegularExpressions;\n\nstring input = \"00123xzacvb1\";\nstring pattern=@\"\\d+((?\u0027x\u0027[a-z-[b]]+)).(?\u003c=(?\u00272-1\u0027(?\u0027x1\u0027..)).{6})b(?(2)(?\u0027Group2Captured\u0027.)|(?\u0027Group2NotCaptured\u0027.))(?\u00272\u0027)(?\u0027-2\u0027)(?\u003c=(?\u0027wtf\u0027\\2))(?\u0027-2\u0027)\";\ntry\n{\n\tMatch match = new Regex(pattern, RegexOptions.Compiled).Match(input);\n\t\n\tfor (int i = 0; i \u003c match.Groups.Count; i++)\n\t{\n\t\ttry\n\t\t{\n\t\t\tConsole.Write($\"Group{i} : Name:\u0027{match.Groups[i].Name}\u0027 : \\t\");\n\t\t\tConsole.WriteLine($\"Value:\u0027{match.Groups[i]}\u0027 :\\t Success {match.Groups[i].Success} : {match.Groups[i].Captures.Count}\");\n\t\t}catch(Exception ex)\n\t\t{\n\t\t\tConsole.WriteLine(ex.Message);\n\t\t}\n\t}\n\t\n\tConsole.WriteLine(\"---------------------------Second trying---------------------------\");\n\t\n\tfor (int i = 0; i \u003c match.Groups.Count; i++)\n\t{\n\t\ttry\n\t\t{\n\t\t\tConsole.Write($\"Group{i} : Name:\u0027{match.Groups[i].Name}\u0027 : \\t\");\n\t\t\tConsole.WriteLine($\"Value:\u0027{match.Groups[i]}\u0027 :\\t Success {match.Groups[i].Success} : {match.Groups[i].Captures.Count}\");\n\t\t}catch(Exception ex)\n\t\t{\n\t\t\tConsole.WriteLine(ex.Message);\n\t\t}\n\t}\n}\ncatch(Exception ex)\n{\n\tConsole.WriteLine($\"Interpreted Exception: {ex.Message}\");\n}\n```\nOutput:\n```\nGroup0 : Name:\u00270\u0027 :     Value:\u002700123xzacvb1\u0027 :     Success True : 1\nIndex was outside the bounds of the array.\nObject reference not set to an instance of an object.\nObject reference not set to an instance of an object.\nObject reference not set to an instance of an object.\nObject reference not set to an instance of an object.\nObject reference not set to an instance of an object.\nObject reference not set to an instance of an object.\n---------------------------Second trying---------------------------\nGroup0 : Name:\u00270\u0027 :     Value:\u002700123xzacvb1\u0027 :     Success True : 1\nGroup1 : Name:\u00271\u0027 :     Value:\u0027\u0027 :     Success False : 0\nObject reference not set to an instance of an object.\nObject reference not set to an instance of an object.\nObject reference not set to an instance of an object.\nObject reference not set to an instance of an object.\nObject reference not set to an instance of an object.\nObject reference not set to an instance of an object.\n```\n------------------\n```c#\nusing System;\nusing System.Text.RegularExpressions;\n\nstring input = \"00123xzacvb1\";\nstring pattern=@\"\\d+((?\u0027x\u0027[a-z-[b]]+)).(?\u003c=(?\u00272-1\u0027(?\u0027x1\u0027..)).{6})b(?(2)(?\u0027Group2Captured\u0027.)|(?\u0027Group2NotCaptured\u0027.))(?\u00272\u0027)(?\u0027-2\u0027)(?\u003c=(?\u0027wtf\u0027\\2)..)\";\ntry\n{\n\tMatch match = new Regex(pattern, RegexOptions.None).Match(input);\n\tConsole.WriteLine($\"Interpreted Match Success: {match.Success}\");\n\tmatch = new Regex(pattern, RegexOptions.Compiled).Match(input);\n\tConsole.WriteLine($\"Complied Match Success: {match.Success}\");\n}\ncatch(Exception ex)\n{\n\tConsole.WriteLine($\"Interpreted Exception: {ex.Message}\");\n}\n```\nOutputt:\n```\nInterpreted Match Success: False\nComplied Match Success: True\n```",
                                           "updatedAt":  "2025-03-12T01:20:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6iPTUh",
                                           "createdAt":  "2025-03-13T16:35:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Due to the new findings in \"Object reference not set to an instance of an object.\" with compiled, I\u0027ll mark this as a bug. The original issue is likely a bug as well, perhaps the same root cause.\n\nThe `GroupsCollection` is reporting a count of 8 which should be 1, at least that is what the value is for the interpreted results.\n\n`GroupsCollection[2]` is `null` causing the null ref. However, on the first pass, `GroupsCollection[1]` throws `IndexOutOfRangeException`.",
                                           "updatedAt":  "2025-03-14T17:09:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6i-lHm",
                                           "createdAt":  "2025-03-18T18:20:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "longxya",
                                           "body":  "\u003e The original issue is likely a bug as well, perhaps the same root cause.\n\nThe root of all the issues seems to lie in the groups captured negative-length content.\n\nBy the way, it\u0027s actually an old finding：\n\n![Image](https://github.com/user-attachments/assets/42e9f569-0629-48ca-a0cf-378e959f3f5d)\n\n\u003eThe GroupsCollection is reporting a count of 8 which should be 1, at least that is what the value is for the interpreted results.\n\nThis is because for groups with negative-length capture, backreferene can be used in compiled mode, but it cannot be used on the interpreter.\n\n-----\n\n### Regarding the fake pop-up (capture group) mentioned earlier：\n```csharp\nusing System;\nusing System.Text.RegularExpressions;\n\nstring input = \"WTF123AWTF\";\nstring pattern=@\"(?\u00272\u0027WTF)\\d+(.)(?\u003c=(?\u00272-1\u0027.).....)(?\u00272\u0027)(?\u0027-2\u0027)(?\u0027-2\u0027)(?\u0027wahtGroup2Captured\u0027\\2)\";\nMatch match = new Regex(pattern, RegexOptions.None).Match(input);\ntry\n{\n\tfor (int i = 0; i \u003c match.Groups.Count; i++)\n\t{\n\t\tConsole.Write($\"Group{i} : Name:\u0027{match.Groups[i].Name}\u0027 : \\t\");\n\t\tConsole.WriteLine($\"Value:\u0027{match.Groups[i]}\u0027 :\\t Success {match.Groups[i].Success} : {match.Groups[i].Captures.Count}\");\n\t}\n}\ncatch(Exception ex)\n{\n\tConsole.WriteLine($\"Interpreted Exception: {ex.Message}\");\n}\n```\nOutput:\n```\nGroup0 : Name:\u00270\u0027 :     Value:\u0027WTF123AWTF\u0027 :     Success True : 1\nGroup1 : Name:\u00271\u0027 :     Value:\u0027\u0027 :     Success False : 0\nGroup2 : Name:\u00272\u0027 :     Value:\u0027\u0027 :     Success False : 0\nGroup3 : Name:\u0027wahtGroup2Captured\u0027 :     Value:\u0027WTF\u0027 :     Success True : 1\n```\nWe can see there is no capture in `Group2` by using `match.Groups[2].Success` and `match.Groups[2].Captures.Count`.\nBut there is actually a capture `WTF` in `Group2` by using backreference `(?\u0027wahtGroup2Captured\u0027\\2)`.\nAnd now `Group2` can still be used as a balance group, but it will cause `Object reference not set to an instance of an object.` in interpreter and compiled :\n```csharp\nusing System;\nusing System.Text.RegularExpressions;\n\nstring input = \"WTF123AWTF\";\nstring pattern=@\"(?\u00272\u0027WTF)\\d+(.)(?\u003c=(?\u00272-1\u0027.).....)(?\u00272\u0027)(?\u0027-2\u0027)(?\u0027-2\u0027)(?\u0027wahtGroup2Captured\u0027\\2)(?\u0027-2\u0027)\";//add (?\u0027-2\u0027) at the end of the pattern\nMatch match = new Regex(pattern, RegexOptions.None).Match(input);\ntry\n{\n\tfor (int i = 0; i \u003c match.Groups.Count; i++)\n\t{\n\t\tConsole.Write($\"Group{i} : Name:\u0027{match.Groups[i].Name}\u0027 : \\t\");\n\t\tConsole.WriteLine($\"Value:\u0027{match.Groups[i]}\u0027 :\\t Success {match.Groups[i].Success} : {match.Groups[i].Captures.Count}\");\n\t}\n}\ncatch(Exception ex)\n{\n\tConsole.WriteLine($\"Interpreted Exception: {ex.Message}\");\n}\n\nConsole.WriteLine(\"---------------------------Second trying---------------------------\");\n\ntry\n{\n\tfor (int i = 0; i \u003c match.Groups.Count; i++)\n\t{\n\t\tConsole.Write($\"Group{i} : Name:\u0027{match.Groups[i].Name}\u0027 : \\t\");\n\t\tConsole.WriteLine($\"Value:\u0027{match.Groups[i]}\u0027 :\\t Success {match.Groups[i].Success} : {match.Groups[i].Captures.Count}\");\n\t}\n}\ncatch(Exception ex)\n{\n\tConsole.WriteLine($\"Interpreted Exception: {ex.Message}\");\n}\n```\nOutput:\n```\nGroup0 : Name:\u00270\u0027 :     Value:\u0027WTF123AWTF\u0027 :     Success True : 1\nInterpreted Exception: Index was outside the bounds of the array.\n---------------------------Second trying---------------------------\nGroup0 : Name:\u00270\u0027 :     Value:\u0027WTF123AWTF\u0027 :     Success True : 1\nGroup1 : Name:\u00271\u0027 :     Value:\u0027\u0027 :     Success False : 0\nInterpreted Exception: Object reference not set to an instance of an object.\n```",
                                           "updatedAt":  "2025-03-19T01:20:49Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "BUG：Some bug in Balancing Group of Regular Expressions",
        "labels":  [
                       "bug",
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111239",
        "createdAt":  "2025-01-09T14:36:13Z",
        "number":  111239,
        "author":  "stephentoub",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODAMnsA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "neon-sunset",
                                            "createdAt":  "2025-01-09T14:45:59Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "colejohnson66",
                                            "createdAt":  "2025-01-09T18:28:45Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MichalPetryka",
                                            "createdAt":  "2025-01-09T19:57:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "omariom",
                                            "createdAt":  "2025-01-10T20:35:25Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2025-01-12T10:32:32Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "udlose",
                                            "createdAt":  "2025-03-18T02:21:27Z"
                                        }
                                    ],
                          "totalCount":  6
                      },
        "updatedAt":  "2025-01-24T21:28:58Z",
        "body":  "In looking through various code bases, I\u0027ve seen the following pattern repeatedly:\n```C#\nif (Regex.IsMatch(pattern))\n{\n    Match m = Regex.Match(pattern);\n    ...\n}\n```\nThat just doubles the work involved when there is a match. It should instead be:\n```C#\nif (Regex.Match(pattern) is { Success: true } m)\n{\n    ...\n}\n```\nor something similar. We should have an analyzer that flags these duplicative guards and a fixer that transforms into something like the latter.\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOmc3ngg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ZzeeC",
                                           "createdAt":  "2025-01-09T14:36:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-09T14:36:34Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[Analyzer]: Regex.IsMatch guarding Regex.Match",
        "labels":  [
                       "api-approved",
                       "area-System.Text.RegularExpressions",
                       "help wanted",
                       "code-analyzer",
                       "code-fixer"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111633",
        "createdAt":  "2025-01-20T17:39:18Z",
        "number":  111633,
        "author":  "longxya",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-dWvQ==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "punchready",
                                            "createdAt":  "2025-01-20T17:50:35Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "rampaa",
                                            "createdAt":  "2025-01-25T09:45:03Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-01-25T04:46:28Z",
        "body":  "### Description\n\n`(?(wtf)(?i)wtf)` and `(?(?i:wtf)wtf)` can\u0027t run in .NET v5、v6、v7、v8、v9 cause it directly contain regex options.  But it works in lower versions.\n\n### Reproduction Steps\n\n    using System;\n    using System.Text.RegularExpressions;\n    \n    var pattern = @\"(?(wtf)(?i)wtf)\";\n\t//pattern = @\"(?(wtf)(?i:wtf))\";// this behavior same as the expression above\n    var input = @\"11\";\n    try\n    {\n    \tMatch matchCompiled = new Regex(pattern, RegexOptions.None).Match(input);\n    \tConsole.WriteLine($\"Interpreted: {matchCompiled.Success}\");\n    }catch(Exception ex)\n    {\n    \tConsole.WriteLine(ex.Message);\n    }\n    try\n    {\n    \tMatch matchCompiled = new Regex(pattern, RegexOptions.Compiled).Match(input);\n    \tConsole.WriteLine($\"Compiled: {matchCompiled.Success}\");\n    }catch(Exception ex)\n    {\n    \tConsole.WriteLine(ex.Message);\n    }\nOutput：\n\n    Invalid pattern \u0027(?(wtf)(?i)wtf)\u0027 at offset 10. Unrecognized grouping construct.\n    Invalid pattern \u0027(?(wtf)(?i)wtf)\u0027 at offset 10. Unrecognized grouping construct.\n\n### Expected behavior\n\nOutput:\n\n    Interpreted: True\n    Compiled: True\n\n### Actual behavior\n\nOUtput:\n\n    Invalid pattern \u0027(?(wtf)(?i)wtf)\u0027 at offset 10. Unrecognized grouping construct.\n    Invalid pattern \u0027(?(wtf)(?i)wtf)\u0027 at offset 10. Unrecognized grouping construct.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOm8sY2w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6bJjKB",
                                           "createdAt":  "2025-01-20T17:39:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-20T17:39:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6bpsEm",
                                           "createdAt":  "2025-01-24T02:13:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "@danmoseley, this was disabled in https://github.com/dotnet/corefx/pull/16609. It\u0027s not clear to me why, other than as an easy fix for addressing some parsing errors. Was it intentionally blocked off, including prohibiting quantifiers as part of the conditional\u0027s if/else expressions and not just the test expression?",
                                           "updatedAt":  "2025-01-24T02:13:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6byxjb",
                                           "createdAt":  "2025-01-25T04:46:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CyrusNajmabadi",
                                           "body":  "If things change here, please let me know so i can keep Roslyn\u0027s regex parser up to date.  Thanks!",
                                           "updatedAt":  "2025-01-25T04:46:27Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "BUG or Feature? Conditional expressions cannot directly contain regex options in .NET 5 and later versions",
        "labels":  [
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111634",
        "createdAt":  "2025-01-20T17:39:48Z",
        "number":  111634,
        "author":  "longxya",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC-TLcg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_DOWN",
                                            "user":  "punchready",
                                            "createdAt":  "2025-01-20T17:50:50Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-03-21T09:21:06Z",
        "body":  "### Description\n\nIf name of Named group is a `number`, and the `number` is larger than the count of Groups,using `Match.Groups` to check the groups in quick check in visual studio, u will find wrong infomation of this group. But u can use `Match.Groups[number]` to accesse this group.\n\n### Reproduction Steps\n\n    using System;\n    using System.Text.RegularExpressions;\n    \n    var pattern = @\"(?\u00272\u0027.)\";\n    //pattern = @\"(?\u00272\u0027.)(?\u0027wtf\u0027)\";//use this will Output normal result\n    var input = @\"1\";\n    var mh = Regex.Match(input,pattern);\n    Console.WriteLine(string.Join(\",\",mh.Groups.Keys)+\"#\");\n    Console.WriteLine(mh.Groups[1].Success);\n    Console.WriteLine(mh.Groups[2].Success);\n    Console.WriteLine(mh.Groups[2]);\nOutput:\n\n    0,#\n    False\n    True\n    1\n\n### Expected behavior\n\nOutput:\n\n    0,2#\n    False\n    True\n    1\n\n### Actual behavior\n\nOUtput:\n\n    0,#\n    False\n    True\n    1\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOo3uRWw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6bJjSB",
                                           "createdAt":  "2025-01-20T17:40:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-20T17:40:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g5kJQ",
                                           "createdAt":  "2025-03-05T01:05:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "longxya",
                                           "body":  "@stephentoub \nJust like this:\n\n![Image](https://github.com/user-attachments/assets/2c87d974-f386-45cb-83ec-e408866d4cb7)",
                                           "updatedAt":  "2025-03-05T01:05:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6je5Fb",
                                           "createdAt":  "2025-03-21T09:21:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "longxya",
                                           "body":  "Use `Group.Name` cannot get the name of such a group:\n```csharp\nusing System;\nusing System.Text.RegularExpressions;\n\nstring input = \"1\";\nstring pattern = @\"(?\u00272\u0027.)\";\ntry\n{\n\tvar regex=new Regex(pattern, RegexOptions.None);\n\tMatch match = regex.Match(input);\n\tvar groupNums = regex.GetGroupNumbers();\n\tfor (int i = 0; i \u003c groupNums.Length; i++)\n\t{\n\t\tvar group=match.Groups[groupNums[i]];\n\t\tConsole.WriteLine($\"Group{groupNums[i]} : Group.Name:\u0027{group.Name}\u0027, Real Name:\u0027{regex.GroupNameFromNumber(groupNums[i])}\u0027  Success: {group.Success}\");\n\t}\n}\ncatch(Exception ex)\n{\n\tConsole.WriteLine($\"Exception: {ex.Message}\");\n}\n```\nOutput:\n```\nGroup0 : Group.Name:\u00270\u0027, Real Name:\u00270\u0027  Success: True\nGroup2 : Group.Name:\u0027\u0027, Real Name:\u00272\u0027  Success: True\n```",
                                           "updatedAt":  "2025-03-21T09:21:05Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "BUG? Named numbered groups that are too large cannot be directly accessed",
        "labels":  [
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113734",
        "createdAt":  "2025-03-20T16:36:11Z",
        "number":  113734,
        "author":  "longxya",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-26T10:51:25Z",
        "body":  "### Description\n\nIn compiled mode, when a group has negative length capture, back reference of this group will cause the current match index of `input`(`textpos`), move negative length(length of capture), aka move to opposite direction of the match.\n﻿\nIn regular expressions, the matching process typically involves a pointer moving within the input string, trying different paths to find a match. In this situation, the pointer does not move correctly, it cause the engine to repeatedly check the same position, leading to performance issues or resource depletion.\n﻿\nIn test Code, the pointer of current match index always move to the start position of the previous match after each match success down. Due to this, the regex would keep matching until timeout.\n\nThis bug causes the length of the matching item to be negative, resulting in successful matching items not causing the textpos pointer to move backward, which in turn causes the matching to continue at a similar index, then matching will not be done forever.\n\nThis is a sub issue of [this issue](https://github.com/dotnet/runtime/issues/111161)\n\n### Reproduction Steps\n\n```csharp\nusing System;\nusing System.Text.RegularExpressions;\n\nstring pattern = @\"\\d+(?\u00271\u0027.)(?\u003c=(?\u00272-1\u0027.).{5})\\2\";\nstring input = \"WTF123a1\";\nint timeOut = 100;\nRegex regex = new Regex(pattern, RegexOptions.Compiled, TimeSpan.FromMilliseconds(timeOut));\nvar mhes = regex.Matches(input);\ntry\n{\n\t//var matchCount = mhes.Count;// will throw TimeOutException if memory is enough\n\tfor (var i = 0; i \u003c 1000; i++)\n\t{\n\t\tConsole.WriteLine(mhes[i].Index + \" , \" + mhes[i].Length);\n\t}\n}catch(Exception e)\n{\n\tConsole.WriteLine(e.Message);\n}\n```\n\nOutput:\n```\n3 , 0\n3 , 1\n3 , 0\n3 , 1\n3 , 0\n3 , 1\n3 , 0\n  .\n  .\n  .\n3 , 0\n3 , 1\n3 , 0\n3 , 1\n3 , 0\n3 , 1\n3 , 0\n```\n\n### Expected behavior\n\nThere are no expected behavior.\n**For a input which is less than 10 character, it does not make sense for have more than 1000 matches**\n\n### Actual behavior\n\nOutput:\n```\n3 , 0\n3 , 1\n3 , 0\n3 , 1\n3 , 0\n3 , 1\n3 , 0\n  .\n  .\n  .\n3 , 0\n3 , 1\n3 , 0\n3 , 1\n3 , 0\n3 , 1\n3 , 0\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOo9ix1g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6jYTqE",
                                           "createdAt":  "2025-03-20T16:36:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-20T16:36:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6jYVdG",
                                           "createdAt":  "2025-03-20T16:39:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "longxya",
                                           "body":  "ALL the matches have the same start index:\n![Image](https://github.com/user-attachments/assets/8d4d5937-51bb-43b1-a1fc-a1fddd016db5)",
                                           "updatedAt":  "2025-03-20T16:39:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j2Ji-",
                                           "createdAt":  "2025-03-24T17:24:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "Behavior difference between compiled and interpreted.  Does not appear to be a regression - reproduces on .NETFramework as well.  Does not reproduce for source-generated Regex.",
                                           "updatedAt":  "2025-03-24T17:24:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j2LHW",
                                           "createdAt":  "2025-03-24T17:27:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "cc @stephentoub  @steveharter \n\nThis does look like a bug where our compiled emitted code differs from source-generated code.  I wonder if we could leverage assemblybuilder.save to disassemble the generated output and compare to source-generated?",
                                           "updatedAt":  "2025-03-24T17:27:00Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Bug : regular expressions that never stops matching",
        "labels":  [
                       "bug",
                       "area-System.Text.RegularExpressions",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114626",
        "createdAt":  "2025-04-14T12:45:54Z",
        "number":  114626,
        "author":  "LGL-Ben",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODCi8IQ==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "Copilot",
                                            "createdAt":  "2025-05-19T17:58:29Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-06-19T20:11:24Z",
        "body":  "### Description\n\nI\u0027m encountering an IndexOutOfRangeException when using the following regex:\n```cs\nstring r = \"(?\u003e(-*)+?-*)$\";\n```\n\n### Reproduction Steps\n\nUse the above regular expression with Regex.Match.\nMatch against any non-zero length string.\nA reproduction can be found here:\nhttps://sharplab.io/#v2:C4LgTgrgdgNAJiA1AHwAIEYB0AVApgD2EwCVcBzCAGwEMwBRfABzFwGdWBLAeylZPIKYAstWABjABYAKAESYZMGVID8APikBaAFQBKRMu06AJDJ0BuIA\nI removed as much from it as much as I could.\n\n### Expected behavior\n\nThe function should return without throwing an error.\n\n### Actual behavior\n\nThe function throws an IndexOutOfRangeException\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\nIt should be noted that I observed the same error thrown from multiple internal functions, as I removed parts of the expression to simplify it.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqLuRCA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6nAt88",
                                           "createdAt":  "2025-04-14T14:51:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kaiwanyawit-tw",
                                           "body":  "ah...can reproduce it here https://dotnetfiddle.net/biRoXs\n\n```\nusing System;\nusing System.Text.RegularExpressions;\n\nclass Program\n{\n    static void Main()\n    {\n        string pattern = @\"(?\u003e(-*)+?-*)$\";\n\n        // Sample test strings\n        string[] testStrings = {\n            \"\",\n            \"-\",\n            \"--\",\n            \"---\",\n            \"----\",\n            \"abc---\",\n            \"--abc\",\n            \"abc\",\n            \"--\\n\",\n            \"-----a\",\n            \"----\\n\"\n        };\n\n        Regex regex = new Regex(pattern);\n\n        Console.WriteLine($\"Testing pattern: {pattern}\\n\");\n\n        foreach (string input in testStrings)\n        {\n            bool isMatch = regex.IsMatch(input);\n            Console.WriteLine($\"Input: \\\"{input}\\\" =\u003e Match: {isMatch}\");\n        }\n    }\n}\n```\n\n\u003cimg width=\"1088\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/f8251649-0d91-4748-b171-152ac0730712\" /\u003e",
                                           "updatedAt":  "2025-04-14T14:51:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nA3WJ",
                                           "createdAt":  "2025-04-14T15:04:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEOj5HA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "LGL-Ben",
                                                                               "createdAt":  "2025-04-15T07:04:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "kasperk81",
                                                                               "createdAt":  "2025-04-16T14:21:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "am11",
                                           "body":  "It\u0027s an Interpreter specific behavior. It doesn\u0027t repro with Compiled or Generated engines:\n\n```C#\nusing System;\nusing System.Text.RegularExpressions;\n\nvar match = Patterns.Problem.Match(\".\"); // works\nConsole.WriteLine(\"Generated: {0}\", match);\n\nRegex regex = new(\"(?\u003e(-*)+?-*)$\", RegexOptions.Compiled);\nmatch = regex.Match(\".\"); // works\nConsole.WriteLine(\"Compiled {0}\", match);\n\nmatch = Regex.Match(\".\",\"(?\u003e(-*)+?-*)$\"); // IndexOutOfRangeException\nConsole.WriteLine(\"Interpreter: {0}\", match);\n\npartial class Patterns\n{\n    [GeneratedRegex(\"(?\u003e(-*)+?-*)$\")]\n    public static partial Regex Problem { get; }\n}\n```",
                                           "updatedAt":  "2025-04-14T15:04:07Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nBYIq",
                                           "createdAt":  "2025-04-14T15:49:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEOUwag==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "KalleOlaviNiemitalo",
                                                                               "createdAt":  "2025-04-15T05:08:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "LGL-Ben",
                                                                               "createdAt":  "2025-04-15T06:44:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "pra2892",
                                           "body":  "Based on the pattern `(?\u003e(-*)+?-*)$`, it seems you\u0027re trying to match sequences of hyphens at the end of a string with specific backtracking behavior.\n\nThe combination of nested quantifiers inside an atomic group was causing the regex engine to get into an invalid state.\n\nHere\u0027s the possible solution to avoid the IndexOutOfRangeException while maintaining similar matching behavior:\n\n[View Code Here -\u003e](https://sharplab.io/#v2:C4LgTgrgdgNAJiA1AHwAICYCMBYAUKgBgAJVMA6AFQFMAPYMgJSoHMIAbAQzAFEaAHMFQDOQgJYB7KEIDcePBhKYA7HgDeeIpsUA2EgBYiAWQ6ioACgCUGretxb7RAPSOiAeTCjmpjmyIDxAEZsVAC2HMCiAMZ+4cBUYFDWDkTAYACeSQ62ycmkAJxmAETUQhFQzETiHl5QPjHAcQkghRaydjn2AG5cRGHAkQAWmEQAvERMzLRkxv0DRWSFMESFZgD8AHxmALQAVBaIq7sWACQtbR32+WanM4MgRKp9g+QAyhCRkcJCAL5nmfbff5aSLhQZEMy8T58CKSIi0KztZLZC6aK6nSFUaESKD3VRTADiVGAFDSfColjIADkOCEqN8iFsHlNDF8OJNfq0gZpAbguU4XAAhYTAIhCcRsCAwxKIhxXQoAHSgJTKFQCwtF4sl2OanJlXR6TwG6FG4xYzNBc0KCyWK1WICOO1Ouo6aMKtwGuMN6DIbw+Xw55xyfOcRGVRAA7qJgAMiN0POIIEIiKY+JKhHzSAQANoAXRSwpeqVMzCTY1Uy2tyw4i2WWxrhS2jfrHEbdZtrerRG+gdymAKCqVwuLEajMbjEkTyagqeAQh1PYcADMqlQOGCzHHRakp/nSoWPOUhAiOsiUZvDSaJubZmZSmAbWt7XtHX89TlXQByVR374f0brIwLU9C0fXeT4RG+JYADUfAgKh7i/Q0yBgiU6Q/V8Oh5AE8G+IA==)\n\n```\nusing System;\nusing System.Text.RegularExpressions;\n\nclass Program\n{\n    static void Main()\n    {\n        // Original problematic pattern\n        try\n        {\n            Console.WriteLine(\"Testing original pattern:\");\n            var match1 = Regex.Match(\".\", \"(?\u003e(-*)+?-*)$\");\n            Console.WriteLine($\"Match: {match1.Success}\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Exception: {ex.GetType().Name} - {ex.Message}\");\n        }\n\n        // Best solution\n        Console.WriteLine(\"\\nTesting best solution:\");\n        var match2 = Regex.Match(\".\", \"(?:-*)*$\");\n        Console.WriteLine($\"Match: {match2.Success}\");\n        \n        // Test with various inputs\n        string[] testStrings = { \".\", \"a\", \"-\", \"---\", \"a---\", \"---a\" };\n        Console.WriteLine(\"\\nTesting with various inputs:\");\n        foreach (var str in testStrings)\n        {\n            var match = Regex.Match(str, \"(?:-*)*$\");\n            Console.WriteLine($\"\u0027{str}\u0027 =\u003e Match: {match.Success}, Value: \u0027{match.Value}\u0027\");\n        }\n    }\n}\n```",
                                           "updatedAt":  "2025-04-14T15:49:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nIiYE",
                                           "createdAt":  "2025-04-15T07:03:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LGL-Ben",
                                           "body":  "(Irrelevant lore dump:)\n\n\u003e Based on the pattern `(?\u003e(-*)+?-*)$`, it seems you\u0027re trying to match sequences of hyphens at the end of a string with specific backtracking behavior.\n\nWhile I appreciate the effort - I really do -, that was not what I was trying to do.\n\nI was designing some super long regex. As one does...\nAnd after finishing it, I tried to fold some logic in on itself to make it more concise. (Code golf, I guess.)\n\nI ended up adding an atomic group somewhere at somepoint in the refactoring process, which gave me an unexpected error.\nI investigated the error and to much surprise ended up finding it *wasn\u0027t* caused by my code.\n\nSo... I culled many lines of regex from that expression, until I arrrived at a crashing expression with as few characters as possible.\nThe matched dashes used to be many lines of subexpressions.\n\nI had honestly expected to just get a \"false\" back at that point.\nI wasn\u0027t expecting the Regex to match. I also wasn\u0027t expecting it to crash my code sandbox.\n\nAgain, thanks for providing a workaround. Very kind of you.\n\nKind regards,\nBen",
                                           "updatedAt":  "2025-04-15T07:03:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nIlAt",
                                           "createdAt":  "2025-04-15T07:07:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LGL-Ben",
                                           "body":  "As an interesting side-note:\nI was creating the expression on regex101, originally.\n\nThere, removing the $ at the end produced an ArgumentException in the engine as well.\nI couldn\u0027t repro that in sharplab, so I didn\u0027t report it.\nI figure that\u0027s probably something wrong with that site.",
                                           "updatedAt":  "2025-04-16T08:56:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nbCbo",
                                           "createdAt":  "2025-04-16T08:58:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "pra2892",
                                           "body":  "Thanks for the additional context! \n\nIt\u0027s fascinating how you discovered this edge case in the .NET regex engine.\n\nWhat do you think, **is it a bug in the .NET regex engine when it handles certain combinations of atomic groups and nested quantifiers?**\n\nAlso after removing the `$` anchor produced a different exception (ArgumentException) on regex101 but not in sharplab is interesting.\n\npossibly regex101 might be using a different version of the .NET regex engine.\n\n",
                                           "updatedAt":  "2025-04-16T08:58:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6neFLE",
                                           "createdAt":  "2025-04-16T13:57:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LGL-Ben",
                                           "body":  "\u003e What do you think, is it a bug in the .NET regex engine when it handles certain combinations of atomic groups and nested quantifiers?\n\nI\u0027d assume so?\n\nI can\u0027t speak to it for certain, however I couldn\u0027t replicate the error in expressions any shorter than that.\nI tried removing the shy modifier \u0027?\u0027; I tried using other group constructs...\nSomething about this specific setup manages to get the engine into several invalid states.\n\nI\u0027ll attempt to replicate the other Error Message tomorrow, no guarantees on success though.",
                                           "updatedAt":  "2025-04-16T13:58:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nozgN",
                                           "createdAt":  "2025-04-17T10:51:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "LGL-Ben",
                                           "body":  "Firstly, I\u0027d like to add as information, that regex101 labels the regex \u0027flavor\u0027 for .Net as \".Net 7.0 (C#)\"\nUnder the hood, it seems to me they download some static webassembly-packaged .dll to run .Net Regex.\n\nI\u0027ve tried extensively to understand the argument exception, but couldn\u0027t replicate it in a useful manner elsewhere.\nI\u0027d assume it\u0027s probably got a reason similar to the reported error, as many of the explicit errors in the runner\u0027s source are bounds checks.\n\nIt seems almost impressive to me that the snippet at the top causes an **Index**OutOfRangeException, rather than being caught at one of the great many bounds checks strewn across the runner\u0027s source. Never tell me the odds.",
                                           "updatedAt":  "2025-04-17T13:52:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ou5EI",
                                           "createdAt":  "2025-04-25T16:21:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Appears to be interpreter-specific; moving to V10.\n\nOther issues that throw IndexOutOfRangeException:\nhttps://github.com/dotnet/runtime/issues/111161\nhttps://github.com/dotnet/runtime/issues/58786",
                                           "updatedAt":  "2025-04-25T16:21:57Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "Regex engine throws index out of range",
        "labels":  [
                       "bug",
                       "area-System.Text.RegularExpressions",
                       "help wanted"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115082",
        "createdAt":  "2025-04-26T22:04:17Z",
        "number":  115082,
        "author":  "neon-sunset",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODBxNbA==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "jnyrup",
                                            "createdAt":  "2025-04-27T08:41:25Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-05-30T14:57:18Z",
        "body":  "### Description\n\nRegex has a few paths which are expected to be allocation-free, in particular, `IsMatch`.\nUnfortunately, the internal implementation has `IsMatch` go through `RunSingleMatch` call which ends up relying on a [cached singleton instance of `RegexRunner`](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs#L424). It makes it look good on microbenchmarks but not so much if a `Regex` instance holding that `RegexRunner` ends up being on a hot path for multiple threads.\n\n### Data\n\nGiven the example benchmark (note that the actual pattern is different and can\u0027t be (easily) used with IndexOfAny):\n```cs\nstatic partial class RegexHolder\n{\n    [GeneratedRegex(\"[%]|[+]\")]\n    public static partial Regex GeneratedPattern();\n}\n\n[ShortRunJob, MemoryDiagnoser]\npublic abstract class IssueRunner : IDisposable\n{\n    [Params(1, 2, 4)]\n    public int Concurrency;\n\n    public class SourceGeneratedRegex : IssueRunner\n    {\n        protected override void Operation() =\u003e RegexHolder.GeneratedPattern().IsMatch(text);\n    }\n\n    public class ThreadStaticCompiledRegex : IssueRunner\n    {\n        [ThreadStatic]\n        static Regex? regex;\n\n        protected override void Operation() =\u003e (regex ??= InitPattern()).IsMatch(text);\n\n        static Regex InitPattern() =\u003e new(\"[%]|[+]\", RegexOptions.Compiled);\n    }\n\n#nullable disable\n    protected string text;\n    CancellationTokenSource cts;\n    Barrier start;\n    Barrier finish;\n    Task[] workers;\n#nullable restore\n\n    [GlobalSetup]\n    public void Setup()\n    {\n        cts = new();\n        text = new(\u0027a\u0027, 4096);\n        start = new(Concurrency + 1);\n        finish = new(Concurrency + 1);\n        workers = new Task[Concurrency];\n\n        for (var i = 0; i \u003c workers.Length; i++)\n            workers[i] = Task.Run(OperationWorker);\n    }\n\n    [Benchmark]\n    public void Execute()\n    {\n        start.SignalAndWait();\n        finish.SignalAndWait();\n    }\n\n    protected abstract void Operation();\n\n    void OperationWorker()\n    {\n        while (true)\n        {\n            start.SignalAndWait(cts.Token);\n            Operation();\n            finish.SignalAndWait(cts.Token);\n        }\n    }\n\n    public void Dispose()\n    {\n        GC.SuppressFinalize(this);\n\n        cts.Cancel();\n        Task.WhenAll(workers)\n            .ConfigureAwait(ConfigureAwaitOptions.SuppressThrowing)\n            .GetAwaiter()\n            .GetResult();\n\n        cts.Dispose();\n        start.Dispose();\n        finish.Dispose();\n    }\n}\n```\nThe benchmark results are as follows:\n\n| Method                       | Concurrency | Mean       | Error    | StdDev   | Allocated |\n|----------------------------- |------------ |-----------:|---------:|---------:|----------:|\n| ThreadStaticRegex.Execute    | 1           |   441.3 ns | 118.0 ns |  6.47 ns |         - |\n| ThreadStaticRegex.Execute    | 2           |   640.9 ns | 623.9 ns | 34.20 ns |         - |\n| ThreadStaticRegex.Execute    | 4           | 1,038.5 ns | 349.7 ns | 19.17 ns |         - |\n| -----------------------------|-------------|------------|----------|----------|-----------|\n| SourceGeneratedRegex.Execute | 1           |   422.8 ns | 133.8 ns |  7.34 ns |         - |\n| SourceGeneratedRegex.Execute | 2           |   736.0 ns | 109.5 ns |  6.00 ns |     715 B |\n| SourceGeneratedRegex.Execute | 4           | 1,170.7 ns | 875.4 ns | 47.98 ns |    2024 B |\n\n### Analysis\n\nAs you can see, it is possible to work around the issue by falling back to a JIT-compiled regexes stored in a threadlocal.\n\nBut it is more hands-on and goes against the recommended analyzer action of using source-generated method/property which sets the expectation that it is supposed to do the right thing.\n\nThis caught me off guard when tuning an application which relies on .NET\u0027s regex engine assurance to be fast and efficient.\n\nIt would be great if Regex had dedicated path(s) for methods like `IsMatch` and `RunSingleMatch` (but for `EnumerateMatches` ref struct iterator) which only need to locate the presence and/or range for a particular match and could avoid having to use the state carried by `RegexRunner`.\n\n### Configuration\n\n```\n.NET SDK:\n Version:           10.0.100-preview.4.25219.3\n Commit:            e5f35a28bb\n Workload version:  10.0.100-manifests.bb4a133c\n MSBuild version:   17.15.0-preview-25217-10+a9d68ab58\n\nRuntime Environment:\n OS Name:     Mac OS X\n OS Version:  15.4\n OS Platform: Darwin\n RID:         osx-arm64\n Base Path:   /usr/local/share/dotnet/sdk/10.0.100-preview.4.25219.3/\n```\n\n### Regression?\n\nNo\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOrjOh5A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6o1s-t",
                                           "createdAt":  "2025-04-26T22:04:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-26T22:04:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uMTHU",
                                           "createdAt":  "2025-05-30T13:51:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "danmoseley",
                                           "body":  "@neon-sunset any interest in offering a change for this?",
                                           "updatedAt":  "2025-05-30T13:51:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6uM6Hk",
                                           "createdAt":  "2025-05-30T14:54:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e\u003e It would be great if Regex had dedicated path(s) for methods like IsMatch and RunSingleMatch (but for EnumerateMatches ref struct iterator) which only need to locate the presence and/or range for a particular match and could avoid having to use the state carried by RegexRunner.\n\n\u003e any interest in offering a change for this?\n\nThis would be a non-trivial change involving public surface area. It\u0027s also not just a matter of a single match being used. The codegen today relies on state stored on the runner, e.g. capture information in support of backreferences.\n\nThe more likely alternative would be to have a Regex increase the size of its pool of runners, where today that pool has an upper bound of 1. It could be increased, at the expense of more expensive access to the pool and more sustained memory consumption.",
                                           "updatedAt":  "2025-05-30T14:57:17Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Regex caching strategy for RegexRunner turns allocation-free paths into allocating under contention",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117329",
        "createdAt":  "2025-07-05T08:13:59Z",
        "number":  117329,
        "author":  "rs-blade",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODQY_Eg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "zmj",
                                            "createdAt":  "2025-08-25T19:27:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "mpawelski",
                                            "createdAt":  "2025-09-11T09:07:53Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "fr4gles",
                                            "createdAt":  "2025-09-14T12:23:59Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-07-16T08:04:31Z",
        "body":  "Background: Our software system has (as I guess many other too) many text based interfaces to the outside world.\n95% of them use UTF-8.\nSo integrating UTF-8 support deep into System.Text.Json and having the direct UTF-8 support for formatting/parsing base types is really great.\nWhat it leads to in the end is that we try to use UTF-8 in as many places as possible in our software to avoid conversions.\nThere is one big block in our software that we like to switch to UTF-8 but cannot because on some places we use regular expressions on the strings.\nSwitching it to UTF-8 would mean to convert to UTF-16 everytime the regex is checked which would be a big performance penalty.\n\nSo the idea is to have first class UTF-8 support in System.Text.RegularExpressions.Regex.\n(I think it\u0027s ok to not include UTF-8 support to methods returning a Match object 😀)\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOt25RJg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc61Gu2y",
                                           "createdAt":  "2025-07-05T08:14:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-05T08:14:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63APvN",
                                           "createdAt":  "2025-07-14T16:59:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ericstj",
                                           "body":  "@stephentoub have we looked at plumbing UTF8 APIs in Regex?   We added span API for chars, but what about bytes/UTF8?",
                                           "updatedAt":  "2025-07-14T16:59:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63AdzQ",
                                           "createdAt":  "2025-07-14T17:19:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e have we looked at plumbing UTF8 APIs in Regex? We added span API for chars, but what about bytes/UTF8?\n\nYes, and it\u0027s non-trivial. The same issues that make https://github.com/dotnet/runtime/issues/16922 hard for UTF16 apply for UTF8, where everything beyond ASCII falls into that same multi-unit camp.",
                                           "updatedAt":  "2025-07-14T17:19:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63blEm",
                                           "createdAt":  "2025-07-16T08:04:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rs-blade",
                                           "body":  "I\u0027m fully aware that UTF-8 support most likely mean completely parallel code paths in the Regex class. I hope that the new \"UTF-8 paradigm\" that seems to have formed will help to implement this nevertheless :-)\nAnd I\u0027d never expected the current engine having problems with UTF-16 surrogates as those exist nearly as long as 2-byte characters were introduced in Windows back in the days!",
                                           "updatedAt":  "2025-07-16T08:04:31Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Direct support for UTF8 in System.Text.RegularExpressions.Regex",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "feature-request"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117535",
        "createdAt":  "2025-07-11T10:22:37Z",
        "number":  117535,
        "author":  "AndreyTretyak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-14T18:53:06Z",
        "body":  "### Background and motivation\nI would like to apply regular expression to the huge collections of characters representing file in text editor or log output that could be bigger than 2Gb in size. They are implemented as aggregation of multiple small segments like `string` or char[]`. I think is very common approach for representing huge text that could have a lot of small changes, for example, changing one line in text document. \n\nI don\u0027t have a continuous region of memory to create `ReadOnlySpan\u003cchar\u003e` and creating it requires a lot of allocations.\n\nHaving ability to apply regular expressions to something like `ReadOnlySequence\u003cchar\u003e` would allow me to save a lot of resources and significantly speedup regular expression performance. I don\u0027t know how to achieve it with current API, except custom regular expression implementation. If there is a way, please let me know.\n \n```csharp\ninternal class MyHugeTextFile(LinkedList\u003cchar[]\u003e segments)\n{\n   public ReadOnlySpan\u003cchar\u003e ToSpan() // requires allocating continues memory to store all content\n   public ReadOnlySequence\u003cchar\u003e AsSequence() // only requires creating ReadOnlySequenceSegments\n}\n```\n\n### API Proposal\n\nSource generator for `GeneratedRegex` could also produce override that accepts `ReadOnlySequence\u003cchar\u003e` in addition to `ReadOnlySpan\u003cchar\u003e`.\n\nIn the same way support of `ReadOnlySequence\u003cchar\u003e` could be added to `Regex` class.\n\n### API Usage\n\n```csharp\n[GeneratedRegex(\"abc|def\", RegexOptions.IgnoreCase, \"en-US\")]\nprivate static partial Regex AbcOrDefGeneratedRegex();\n\nprivate static void EvaluateText(MyHugeTextFile file)\n{\n    // no need allocating memory to fit full file content    \n    if (AbcOrDefGeneratedRegex().IsMatch(file.AsSequence()))\n    ...\n\n    // Some small change to file content\n    file.Replace(\"foo\", \"bar\"); \n\n    // regular expression can run again without allocation huge memory segment to join all parts\n    if (AbcOrDefGeneratedRegex().IsMatch(file.AsSequence()))\n    ...\n}\n```\n\n### Alternative Designs\n\nWe could add additional parameter to `GeneratedRegex` to generate version with `ReadOnlySequence\u003cchar\u003e` instead of `ReadOnlySpan\u003cchar\u003e`:\n```csharp\n[GeneratedRegex(\"abc|def\", RegexOptions.IgnoreCase, \"en-US\", sequanceAsInput: true)]\n```\nInstead of adding methods to `Regex` it could be separate class like `SequenceRegex`.\n\nThis would allow separating both implementations, but I don\u0027t think it makes sense to separate them.\n\n### Risks\n\nIf custom types have implicit conversions to both `ReadOnlySpan\u003cchar\u003e` or `string` and `ReadOnlySequence\u003cchar\u003e` adding new overload could cause errors:\n```csharp\npublic class MyType\n{\n    public void M(MyType temp) =\u003e Test(temp); // compiler struggles to choose proper method version\n\n    private int Test(ReadOnlySpan\u003cchar\u003e span) =\u003e 0;\n\n    private int Test(ReadOnlySequence\u003cchar\u003e list) =\u003e 1;\n    \n    public static implicit operator ReadOnlySpan\u003cchar\u003e(MyType _) =\u003e \"span\".AsSpan();\n    \n    public static implicit operator ReadOnlySequence\u003cchar\u003e(MyType _) =\u003e new ReadOnlySequence\u003cchar\u003e(\"sequence\".ToCharArray());\n}\n```\nThis could be mitigated by adding `[OverloadResolutionPriority(-10)]` to the version with `ReadOnlySequence\u003cchar\u003e`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOtwB5xg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc62falN",
                                           "createdAt":  "2025-07-11T10:23:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-11T10:23:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc62jnXk",
                                           "createdAt":  "2025-07-11T15:40:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEajEgA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "huoyaoyuan",
                                                                               "createdAt":  "2025-07-11T15:43:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Clockwork-Muse",
                                                                               "createdAt":  "2025-07-11T16:35:21Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AndreyTretyak",
                                                                               "createdAt":  "2025-07-12T02:30:33Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "olegtk",
                                                                               "createdAt":  "2025-07-15T00:06:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "svick",
                                           "body":  "I think `IReadOnlyList\u003cchar\u003e` is not the right abstraction here: it requires an interface call for every character, which makes it quite inefficient.\n\nA `ReadOnlySequence\u003cchar\u003e` should work better.",
                                           "updatedAt":  "2025-07-11T15:40:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc62ltmP",
                                           "createdAt":  "2025-07-11T18:37:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "AndreyTretyak",
                                           "body":  "\u003e I think `IReadOnlyList\u003cchar\u003e` is not the right abstraction here: it requires an interface call for every character, which makes it quite inefficient.\n\u003e \n\u003e A `ReadOnlySequence\u003cchar\u003e` should work better.\n\nI see the appeal of not using interface. \n~~Is there way of creating `ReadOnlySequence\u003cchar\u003e` out of `List\u003cstring\u003e` for example?\nIf not, maybe `ReadOnlySequence\u003cT\u003e` could be extended to handle this or some new struct introduced?~~\nLooks like sequence works for the cases I\u0027ve mention, it would be much better option. Thank you! I\u0027ll update proposal.\n",
                                           "updatedAt":  "2025-07-11T18:59:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc63AHnG",
                                           "createdAt":  "2025-07-14T16:46:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEajEAA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "olegtk",
                                                                               "createdAt":  "2025-07-15T00:05:14Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ericstj",
                                           "body":  "cc @stephentoub ",
                                           "updatedAt":  "2025-07-14T16:46:39Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[API Proposal]: Enable Regex to work on ReadOnlySequence\u003cchar\u003e",
        "labels":  [
                       "api-suggestion",
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/117651",
        "createdAt":  "2025-07-15T10:21:26Z",
        "number":  117651,
        "author":  "longxya",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-23T09:27:32Z",
        "body":  "### Description\n\nI saw u added a test `yield return (@\"(?\u003c=(abc)+?123)\", \"abcabc123\", RegexOptions.None, 0, 9, true, \"\");` on line 135 in [file Regex.Match.Tests.cs](https://github.com/dotnet/runtime/pull/117629/files#diff-2bdc6a6839e8ce7675737db0067c7cf288d190e0af1559feed81d5be92c9b216).\nBased on this, I found a new bug:\nIn Compiled mode, when leaving positive lookbehind assertions, the .NET regex engine will remove all the captures which captured by the last direct group construction(the last direct child node).\n\n\n--------------------------------\nBy the way, I found that when leaving negative assertions, the .NET regex engine would not delete captures which captured in the assertion on .NET8, but this bug fixed on .NET9.\nFor example:\n```c#\nusing System;\nusing System.Text.RegularExpressions;\n\nConsole.WriteLine(new Regex(\"(?\u003c!x())a\",RegexOptions.Compiled).Match(\"a\").Groups[1].Captures.Count);\nConsole.WriteLine(new Regex(\"(?!()x)a\",RegexOptions.Compiled).Match(\"a\").Groups[1].Captures.Count);\n```\nOutput on .NET8:\n```\n1\n1\n```\nMaybe they are related?\n\n### Reproduction Steps\n\n```c#\nusing System;\nusing System.Text.RegularExpressions;\n\nstring input = \"abcabc123a\";\nstring pattern=\"(?\u003c=(abc)+?123)a\";\n//pattern=\"(?\u00271\u0027)(?\u003c=(?\u00271\u0027abc)+?(?#\u003c=just delete the left capture)(?\u00271\u0027abc)+?123)a\";\n//pattern=\"(?\u00271\u0027)(?\u003c=(?\u00271\u0027abc)+?(?\u00272\u0027)123)a\";//the capture of group#1 was removed, but the capture of group#2 wasn\u0027t\n//pattern=\"(?\u003c=(abc){2,}?123)a\";//two captures of group#1 which captured in the positive lookbehind assertions(?\u003c=) are both deleted\n\n//pattern=\"(?\u003c=(abc){2}?123)a\";//not deleted\n//pattern=@\"(?\u003c=\\1?(abc){2,}?123)a\";//not deleted\n//pattern=\"(?\u003c=(?(1))(abc){2,}?123)a\";//not deleted\n//pattern=\"(?\u003c=(?\u0027-1\u0027)?(abc){2,}?123)a\";//not deleted\n\n//pattern=\"1(?=x(abc)+?)\";input=\"1xabc\";//not deleted in positinve lookahead assertions\n//pattern=\"1(?=(abc)+?x)\";input=\"1abcx\";//not deleted in positinve lookahead assertions\n\ntry\n{\n\tConsole.WriteLine(\"----------Compiled----------\");\n\tMatch matchCompiled = new Regex(pattern, RegexOptions.Compiled).Match(input);\n\tConsole.WriteLine(matchCompiled.Value);\n\tConsole.WriteLine(matchCompiled.Groups[1].Captures.Count);\n\tConsole.WriteLine(\"Groups#1 Captures：\");\n\tforeach(Capture c in matchCompiled.Groups[1].Captures)\n\t\tConsole.WriteLine($\"{c.Value}，{c.Index}，{c.Length}\");\n\t\n\tConsole.WriteLine(\"----------Interpreted----------\");\n\tMatch Interpreted= new Regex(pattern, RegexOptions.None).Match(input);\n\tConsole.WriteLine(Interpreted.Value);\n\tConsole.WriteLine(Interpreted.Groups[1].Captures.Count);\n\tConsole.WriteLine(\"Groups#1 Captures：\");\n\tforeach(Capture c in Interpreted.Groups[1].Captures)\n\t\tConsole.WriteLine($\"{c.Value}，{c.Index}，{c.Length}\");\n\t\n\tConsole.WriteLine(\"----------result comparion----------\");\n\tConsole.WriteLine($\"Result equal：{matchCompiled.Groups[1].Captures.Count == Interpreted.Groups[1].Captures.Count}\");\n}\ncatch(Exception ex)\n{\n\tConsole.WriteLine(ex.Message);\n}\n```\n\n### Expected behavior\n\nOutput:\n```\n----------Compiled----------\na\n1\nGroups#1 Captures：\nabc，3，3\n----------Interpreted----------\na\n1\nGroups#1 Captures：\nabc，3，3\n----------result comparion----------\nResult equal：True\n```\n\n### Actual behavior\n\nOutput:\n```\n----------Compiled----------\na\n0\nGroups#1 Captures：\n----------Interpreted----------\na\n1\nGroups#1 Captures：\nabc，3，3\n----------result comparion----------\nResult equal：False\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOuSxJZQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc65LEll",
                                           "createdAt":  "2025-07-23T09:22:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "longxya",
                                           "body":  "### Captures deleted by the balance group will also be recovered incorrectly : \n```c#\nusing System;\nusing System.Text.RegularExpressions;\n\nstring input = \"xxa\";\nstring pattern=\"(.)+(?\u003c=(?\u0027-1\u0027){2,3}?)a\";\n\ntry\n{\n\tConsole.WriteLine(\"----------Compiled----------\");\n\tMatch matchCompiled = new Regex(pattern, RegexOptions.Compiled).Match(input);\n\tConsole.WriteLine(matchCompiled.Value);\n\tConsole.WriteLine(\"Groups#1 Captures count：\" + matchCompiled.Groups[1].Captures.Count);\n\tConsole.WriteLine(\"Groups#1 Captures：\");\n\tforeach(Capture c in matchCompiled.Groups[1].Captures)\n\t\tConsole.WriteLine($\"{c.Value}，{c.Index}，{c.Length}\");\n\t\n\tConsole.WriteLine(\"----------Interpreted----------\");\n\tMatch Interpreted= new Regex(pattern, RegexOptions.None).Match(input);\n\tConsole.WriteLine(Interpreted.Value);\n\tConsole.WriteLine(\"Groups#1 Captures count：\" + Interpreted.Groups[1].Captures.Count);\n\tConsole.WriteLine(\"Groups#1 Captures：\");\n\tforeach(Capture c in Interpreted.Groups[1].Captures)\n\t\tConsole.WriteLine($\"{c.Value}，{c.Index}，{c.Length}\");\n\t\n\tConsole.WriteLine(\"----------result comparion----------\");\n\tConsole.WriteLine($\"Result equal：{matchCompiled.Groups[1].Captures.Count == Interpreted.Groups[1].Captures.Count}\");\n}\ncatch(Exception ex)\n{\n\tConsole.WriteLine(ex.Message);\n}\n```\nOutput:\n```\n----------Compiled----------\nxxa\nGroups#1 Captures count：2\nGroups#1 Captures：\nx，0，1\nx，1，1\n----------Interpreted----------\nxxa\nGroups#1 Captures count：0\nGroups#1 Captures：\n----------result comparion----------\nResult equal：False\n```",
                                           "updatedAt":  "2025-07-23T09:22:15Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Compiled regex incorrectly removes the captures which captured in positive lookbehind assertions",
        "labels":  [
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118062",
        "createdAt":  "2025-07-25T16:27:53Z",
        "number":  118062,
        "author":  "jozkee",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-25T18:06:02Z",
        "body":  "While testing for GB18030-2022 I noticed that Regex is missing multiple named blocks.\nAs per the [documentation](https://learn.microsoft.com/dotnet/standard/base-types/character-classes-in-regular-expressions#supported-named-blocks), the list is based on Unicode 4.0, while latest version is 16.0 https://www.unicode.org/charts/.\n\nI think we already update [Unicode categories](https://github.com/dotnet/runtime/blob/67837792faa88beb3f44105dfa7a3a430961ff12/src/libraries/System.Text.RegularExpressions/tools/Readme.md).  Updating named blocks is not as important as these can be easily defined as a range of characters manually.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOufT9ew==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc657L4N",
                                           "createdAt":  "2025-07-25T16:36:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-07-25T16:36:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc659P17",
                                           "createdAt":  "2025-07-25T18:05:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jeffhandley",
                                           "body":  "Marked as https://github.com/dotnet/runtime/labels/needs-further-triage for .NET 11. We should conclude during .NET 11 whether we want to start updating this regularly, or if there is a reason to keep it snapped to Unicode 4.0.",
                                           "updatedAt":  "2025-07-25T18:06:02Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Consider updating named blocks in Regex",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "needs-further-triage"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118489",
        "createdAt":  "2025-08-07T14:54:50Z",
        "number":  118489,
        "author":  "jnyrup",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-31T17:32:17Z",
        "body":  "\u003c!--This is just a template - feel free to delete any and all of it and replace as appropriate.--\u003e\n\n### Description\n\n\u003c!--\n* Please share a clear and concise description of the performance problem.\n* Include minimal steps to reproduce the problem if possible. E.g.: the smallest possible code snippet; or a small repo to clone, with steps to run it.\n  --\u003e\n\nWhen having a regex pattern which contains both leading+trailing anchors and the pattern is of fixed length, it seems to me that we might be missing an opportunity to fail fast earlier.\n\nTake e.g. the regex pattern `^1234$`.\nCurrently the emitted `TryFindNextPossibleStartingPosition` checks that the input has at least 4 characters to continue.\n```cs\nif (pos \u003c= inputSpan.Length - 4 \u0026\u0026 pos == 0)\n```\n\nWhen invoking `IsMatch(\"12345\")` on the generated regex, the flow will be:\n* pass `TryFindNextPossibleStartingPosition` as the input is longer than 4 characters,\n* enter `TryMatchAtCurrentPosition` and call `.StartsWith(\"1234\")`,\n* and first then fail on `5 \u003c slice.Length` because the input was too long.\n\nIf we tightened the check in `TryFindNextPossibleStartingPosition` to \"exactly 4 characters\", we wouldn\u0027t have to enter `TryMatchAtCurrentPosition`.\n\nIf I understand the code correctly, we can detect this situation in `EmitTryFindNextPossibleStartingPosition` when:\n* `rm.Tree.FindOptimizations.LeadingAnchor is RegexNodeKind.Beginning` and\n* `rm.Tree.FindOptimizations.FindMode is FindNextStartingPositionMode.TrailingAnchor_FixedLength_LeftToRight_End or FindNextStartingPositionMode.TrailingAnchor_FixedLength_LeftToRight_EndZ`\n\nAm I missing something?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvKAObA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc68nz0K",
                                           "createdAt":  "2025-08-07T14:57:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-07T14:57:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc68oA5s",
                                           "createdAt":  "2025-08-07T15:10:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdk5yQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MihaZupan",
                                                                               "createdAt":  "2025-08-07T18:15:14Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2025-08-08T06:56:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "SystematicChaos012",
                                                                               "createdAt":  "2025-08-08T07:01:33Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "Thanks. There are certainly more special-cases we could optimize for; it\u0027s primarily a question of how common they are and whether it\u0027s worth the extra code to maintain. Looking through https://github.com/dotnet/runtime-assets/blob/main/src/System.Text.RegularExpressions.TestData/Regex_RealWorldPatterns.json, there are several hundred occurrences of this pattern, so I\u0027d be ok with a PR to try to optimize it further.\n\nThat said, keep in mind that `$` does not mean \"exactly at the end\". It actually means \"at the end or just before an ending \\n\", so a length check of exactly 4 would be wrong.\n\nFor this specific construction, I think the right answer would be to not emit TryFindNextPossibleStartingPosition at all. You can see in the source generator code there\u0027s already special-cases when Scan is emitted to control whether or not we emit TryFindNextPossibleStartingPosition or TryMatchAtCurrentPosition. In this case, I think the right answer would simply be to just emit TryMatchAtCurrentPosition and have Scan just call it.",
                                           "updatedAt":  "2025-08-07T15:14:21Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Earlier fail fast for fixed-length regex patterns with anchors",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "tenet-performance"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/118666",
        "createdAt":  "2025-08-13T04:02:19Z",
        "number":  118666,
        "author":  "longxya",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-31T17:39:51Z",
        "body":  "### Description\n\nWhen a group captured content of any length except -2, it will be judged as having capture. Why -2?\n\nI roughly believe that, it because `_matches[cap][matchcount[cap] * 2 - 1] != (-3 + 1)` of :\nthis file [RegularExpressions/Match.cs](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Match.cs#LC233)\n```c#\n        /// \u003csummary\u003eTells if a group was matched by capnum\u003c/summary\u003e\n        internal bool IsMatched(int cap)\n        {\n            int[] matchcount = _matchcount;\n            return\n                (uint)cap \u003c (uint)matchcount.Length \u0026\u0026\n                matchcount[cap] \u003e 0 \u0026\u0026\n                _matches[cap][matchcount[cap] * 2 - 1] != (-3 + 1);\n        }\n```\n\nThis is a sub issue of [this issue](https://github.com/dotnet/runtime/issues/111161)\n\n### Reproduction Steps\n\n```c#\nusing System;\nusing System.Text.RegularExpressions;\n\nstring pattern = @\"()(?\u003c=(?\u00272-1\u0027)..)(?(2)(?\u0027group2HAScapture\u0027)|(?\u0027group2NOcapture\u0027))(?\u0027caps_of_g2_not_change_before_after\u0027(?\u00272\u0027)(?\u0027-2\u0027))(?(2)(?\u0027G2HAScapture\u0027)|(?\u0027G2NOcapture1\u0027))\";\nstring input = \"12\";\nvar mh = new Regex(pattern, RegexOptions.None).Match(input);\nConsole.WriteLine(\"group2HAScapture : \" + mh.Groups[\"group2HAScapture\"].Captures.Count);\nConsole.WriteLine(\"group2NOcapture : \" + mh.Groups[\"group2NOcapture\"].Captures.Count);\nConsole.WriteLine(\"G2HAScapture : \" + mh.Groups[\"G2HAScapture\"].Captures.Count);\nConsole.WriteLine(\"G2NOcapture1 : \" + mh.Groups[\"G2NOcapture1\"].Captures.Count);\n```\n\n### Expected behavior\n\n```\ngroup2HAScapture : 1\ngroup2NOcapture : 0\nG2HAScapture : 1\nG2NOcapture1 : 0\n```\n\n### Actual behavior\n\n```\ngroup2HAScapture : 0\ngroup2NOcapture : 1\nG2HAScapture : 1\nG2NOcapture1 : 0\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\nIn this file [RegularExpressions/Match.cs](https://github.com/dotnet/runtime/blob/main/src/libraries/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Match.cs#LC233)\n```c#\n        /// \u003csummary\u003eTells if a group was matched by capnum\u003c/summary\u003e\n        internal bool IsMatched(int cap)\n        {\n            int[] matchcount = _matchcount;\n            return\n                (uint)cap \u003c (uint)matchcount.Length \u0026\u0026\n                matchcount[cap] \u003e 0 \u0026\u0026\n                _matches[cap][matchcount[cap] * 2 - 1] != (-3 + 1);\n        }\n```\nMaybe should change `_matches[cap][matchcount[cap] * 2 - 1] != (-3 + 1)` to `_matches[cap][matchcount[cap] * 2 - 2] != -1`??\n\nChange it to :\n```c#\n        /// \u003csummary\u003eTells if a group was matched by capnum\u003c/summary\u003e\n        internal bool IsMatched(int cap)\n        {\n            int[] matchcount = _matchcount;\n            return\n                (uint)cap \u003c (uint)matchcount.Length \u0026\u0026\n                matchcount[cap] \u003e 0 \u0026\u0026\n                _matches[cap][matchcount[cap] * 2 - 2] != -1/*-3 - (-2)*/;\n        }\n```\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOvavXCQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc69q9cJ",
                                           "createdAt":  "2025-08-13T04:43:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-08-13T04:43:03Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "When a group captured a -2 length capture, it will be judged as no capture",
        "labels":  [
                       "bug",
                       "area-System.Text.RegularExpressions"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119593",
        "createdAt":  "2025-09-01T07:10:04Z",
        "number":  119593,
        "author":  "cheblin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-11T17:38:03Z",
        "body":  "Hello,\n\nI\u0027ve noticed some unexpected behavior with .NET\u0027s (9.0 specific) Regex engine when matching emoji. I\u0027m trying to find all characters that belong to the \"Symbol, Other\" (So) Unicode category.\n\nWhen I run the following code, the result is 0, but I would expect it to be 1, since the hotdog emoji (🌭) is a symbol.\n\n```csharp\nConsole.WriteLine(new Regex(@\"\\p{So}\").Matches(\"🌭\").Count); \n// Output: 0\n\n```\n\nCould you explain why this happens and what the correct way to match such characters would be?",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw5-7Lg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7Dn7FC",
                                           "createdAt":  "2025-09-01T08:31:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEh4xNA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "cheblin",
                                                                               "createdAt":  "2025-09-01T10:11:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "julealgon",
                                                                               "createdAt":  "2025-09-02T21:25:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "JuergenAuer",
                                           "body":  "Hi @cheblin \n\nyour code requires a char-input.\n\nBut currently, Char.MaxValue = #FFFF.\n\nhttps://learn.microsoft.com/en-us/dotnet/api/system.char.maxvalue?view=net-9.0\n\nThe Hot Dog has the Code point 127789, Hex #x1F32D. So the current NET implements only characters max #FFFF, so you must use two surrogate pairs to deal with chars not in the basic multilingual plane (chars greater #ffff).\n\nSee\n\nhttps://learn.microsoft.com/en-us/dotnet/fundamentals/runtime-libraries/system-char\n\n\u003e To determine the Unicode category of a character, call the GetUnicodeCategory method. For example, the following example calls the GetUnicodeCategory to display the Unicode category of each character in a string. The example works correctly only if there are no surrogate pairs in the String instance.\n\nWith Char, you use a surrogate pair, so that can\u0027t work.\n\nUse the Rune struct.\n\nhttps://learn.microsoft.com/en-us/dotnet/api/system.text.rune?view=net-9.0",
                                           "updatedAt":  "2025-09-01T08:31:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Dn7FX",
                                           "createdAt":  "2025-09-02T20:25:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "walid-khalafi",
                                           "body":  "The reason \\p{So} doesn’t match 🌭 is that most emoji are outside the Basic Multilingual Plane and are represented as surrogate pairs in UTF‑16. The \\p{So} category in .NET’s regex engine applies to individual UTF‑16 code units, not full Unicode scalar values, so neither half of the surrogate pair matches So on its own.\nTo match the whole emoji as a single unit, you can either:\n- Use \\X (grapheme cluster) to match complete Unicode characters, then filter by category if needed.\n- Or enable the regex engine’s full Unicode mode and use a pattern that matches the scalar value, e.g.:\n\n```\nvar regex = new Regex(@\"\\p{So}\", RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);\nConsole.WriteLine(regex.Matches(\"🌭\").Count); // 1\n```\n\nThis ensures the engine evaluates the actual Unicode code point rather than each UTF‑16 code unit separately.\nLet me know if you’d like me to share a minimal repro that demonstrates both approaches.\n",
                                           "updatedAt":  "2025-09-02T20:25:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Dn7su",
                                           "createdAt":  "2025-09-11T17:38:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-11T17:38:03Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "Unexpected behavior with .NET\u0027s (9.0 specific) Regex engine when matching emoji.",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119444",
        "createdAt":  "2025-09-07T21:20:25Z",
        "number":  119444,
        "author":  "longxya",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-16T18:05:20Z",
        "body":  "### Description\n\nI\u0027m trying to simplify the pattern.\nAnd there are also some issues with this pattern in source generation.\n\n### Reproduction Steps\n\n```c#\nusing System;\nusing System.Text.RegularExpressions;\n\n//The pattern when this bug was first discovered\nstring pattern = @\"^(?=\\d{3,12})(?\u0027time\u0027){12}(((?=((?\u0027-time\u0027)(?\u0027y\u0027)|(?\u0027x\u0027)){12}((?\u0027time-y\u0027)|){12}((^[1-9](?\u0027count\u0027)(((?\u0027-count\u0027)|((?\u0027-x\u0027)|(?\u0027-x1\u0027))\\d|(?\u0027x1\u0027\\d))(?\u0027count\u0027)){2}|0)(?=\\d{3,9}$)(?((?\u0027-count\u0027){3})(?\u003c!^\\d([6-9]\\d|5[6-9]))|((?\u0027-count\u0027)|){3})([1-9](?\u0027count\u0027)(((?\u0027-count\u0027)|((?\u0027-x\u0027)|(?\u0027-x2\u0027))\\d|(?\u0027x2\u0027\\d))(?\u0027count\u0027)){2}|0)(?=\\d{2,6}$)(?((?\u0027-count\u0027){3})(?\u003c![3-9]\\d\\d|\\d([6-9]\\d|5[6-9]))|((?\u0027-count\u0027)|){3})([1-9](?\u0027count\u0027)(((?\u0027-count\u0027)|((?\u0027-x\u0027)|(?\u0027-x3\u0027))\\d|(?\u0027x3\u0027\\d))(?\u0027count\u0027)){2}|0)(?=\\d{1,3}$)(?((?\u0027-count\u0027){3})(?\u003c![3-9]\\d\\d|\\d([6-9]\\d|5[6-9]))|((?\u0027-count\u0027)|){3})(?(\\d\\d\\d$)(?![3-9]\\d\\d|\\d([6-9]\\d|5[6-9])))([1-9]\\d*|0)$(?!(?\u0027-x\u0027))((?\u0027-x\u0027)|){12}))|)(?\u0027-time\u0027)){12}\";\n//this pattern would work normally in compiled when input = \"101023\"\npattern = @\"(?\u0027time\u0027){2}(?=((?\u0027-time\u0027)|(?\u0027x\u0027)){3}((^[1-9](?\u0027count\u0027)(((?\u0027-count\u0027)|((?\u0027-x\u0027))\\d)(?\u0027count\u0027)){2}|0)(?((?\u0027-count\u0027){3})|((?\u0027-count\u0027)|){3})([1-9](?\u0027count\u0027)(((?\u0027-count\u0027)|((?\u0027-x\u0027))\\d)(?\u0027count\u0027)){2}|0)(?!(?\u0027-x\u0027)))){2}\";\n//this pattern is also  bad in compiled mode, but it does seem to cause Group#2 to permanently fail to match in source generated\npattern = @\"(?\u0027time\u0027){2}(?=((?\u0027-time\u0027)|(?\u0027x\u0027)){3}(((?\u0027count\u0027)(((?\u0027-count\u0027)|((?\u0027-x\u0027)))(?\u0027count\u0027)){2}|0)(?((?\u0027-count\u0027){3})|((?\u0027-count\u0027)|){3})(?!(?\u0027-x\u0027)))){2}\";\n//This pattern seems to have issues in both compiled mode and source-generated code. \npattern = @\"(?\u0027time\u0027){2}(?=((?\u0027-time\u0027)|(?\u0027x\u0027)){3}(((?\u0027count\u0027)(((?\u0027-count\u0027)|((?\u0027-x\u0027)))(?\u0027count\u0027)){2}|0)(?((?\u0027-count\u0027){3})|((?\u0027-count\u0027)|){3})(?!(?\u0027-x\u0027)))|){2}\";\nstring input = \"25525511135\";\nRegex regex = new Regex(pattern, RegexOptions.Compiled);\nvar mhes = regex.Matches(input);\ntry\n{\n\tConsole.WriteLine(mhes.Count);\n}catch(Exception e)\n{\n\tConsole.WriteLine(e.Message);\n}\ntry\n{\n\tConsole.WriteLine(\"Group#2\u0027s captures count : \"+Regex.Match(input, pattern).Groups[2].Captures.Count);\n}catch(Exception e)\n{\n\tConsole.WriteLine(e.Message);\n}\n```\n\n### Expected behavior\n\n12\nGroup#2\u0027s captures count : 1\n\n### Actual behavior\n\nSpecified argument was out of the range of valid values.\nGroup#2\u0027s captures count : 1\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxK3dpQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7CjjJ_",
                                           "createdAt":  "2025-09-07T22:04:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-07T22:04:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Erd2l",
                                           "createdAt":  "2025-09-16T17:36:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "longxya",
                                           "body":  "It looks like there is some wrong when compiler compiling this regex.\nFor an assertion like `(?=exp){1,}`, it should be equal to `(?=exp){1}` or `(?=exp)`. but in this case, it works not very correct  in compiled mode.\n\n```c#\nusing System;\nusing System.Text.RegularExpressions;\n\t\t\t\t\t\nvar pattern = @\"(?=(?\u0027x\u0027)((((|(?\u0027count\u0027))){2})(?((?\u0027-count\u0027))|((?!x)(?=x)|))(?!(?\u0027-x\u0027)))|){1,}\";\n//pattern = @\"(?=(?\u0027x\u0027)((((|(?\u0027count\u0027))){2})(?((?\u0027-count\u0027))|((?!x)(?=x)|))(?!(?\u0027-x\u0027)))|){1}\";//Change the quantifier from `{1,}` to `{1}` will work normally, weird\n//pattern = @\"(?=(?\u0027x\u0027)((((|(?\u0027count\u0027))){2})(?((?\u0027-count\u0027))|((?!)|))(?!(?\u0027-x\u0027)))|){1,}\";//change `(?!x)(?=x)` to `(?!)`, will work normally, weird\nvar input = \"222222\";\nRegex regexCompiled = new Regex(pattern , RegexOptions.Compiled);\nvar Compiled = regexCompiled.Matches(input);\nvar interpreted = Regex.Matches(input, pattern);\nfor(var i = 0; i \u003c Compiled.Count; i++)\n{\n\tConsole.WriteLine($\"Compiled == interpreted : \" + (Compiled[i].Groups[1].Captures.Count == interpreted[i].Groups[1].Captures.Count));\n}\nConsole.WriteLine(\"--------------------------------\");\ntry\n{\n\tvar r = regexCompiled.Match(\"2\").Value;\n}\ncatch(Exception ex)\n{\n\tConsole.WriteLine(\"Compiled error : \" + ex.Message);\n}\ntry\n{\n\tpattern = @\"(?\u0027time\u0027){2}(?=((?\u0027-time\u0027)|(?\u0027x\u0027)){3}(((?\u0027count\u0027)(((?\u0027-count\u0027)|)(?\u0027count\u0027)){2})(?((?\u0027-count\u0027){3})|((?\u0027why\u0027)|))(?!(?\u0027-x\u0027)))|){2}\";\n\tinput = \"22\";\n\tConsole.WriteLine(\"interpreted : \" + Regex.Matches(input, pattern).Count);\n\tvar r = new Regex(pattern, RegexOptions.Compiled).Match(input).Value;\n}\ncatch(Exception ex)\n{\n\tConsole.WriteLine(\"Compiled error : \" + ex.Message);\n}\n```\nOutput:\n```\nCompiled == interpreted : True\nCompiled == interpreted : True\nCompiled == interpreted : False\nCompiled == interpreted : False\nCompiled == interpreted : False\nCompiled == interpreted : False\nCompiled == interpreted : False\n--------------------------------\nCompiled error : Specified argument was out of the range of valid values.\ninterpreted : 3\nCompiled error : Exception of type \u0027System.OutOfMemoryException\u0027 was thrown.\n```",
                                           "updatedAt":  "2025-09-16T18:05:20Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Regex throw an exception `Specified argument was out of the range of valid values.` in compiled mode",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "untriaged"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119570",
        "createdAt":  "2025-09-11T10:20:24Z",
        "number":  119570,
        "author":  "longxya",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-16T15:59:38Z",
        "body":  "### Description\n\nThe pattern created together with the original pattern of [issue#119444](https://github.com/dotnet/runtime/issues/119444), throw a differnet exception `IndexOutOfRangeException`. I think the reason of appearing `ArgumentOutOfRangeException` is some different with issue#119444. Actually, current original pattern cames earlier than issue#119444.\n\u003cdetails\u003e\n\u003csummary\u003ethis is the original pattern of current issue\u003c/summary\u003e\n`^(?=\\d{3,12})(?\u0027time\u0027){12}(((?=(?\u003e(?\u0027-time\u0027)(?\u0027y\u0027)|(?\u0027x\u0027)){12}(?\u003e(?\u0027time-y\u0027)|){12}((^[1-9](?\u0027count\u0027)((?\u003e(?\u0027x11-x1\u0027))\\d(?\u0027count\u0027)||(?\u003e(?\u0027-x\u0027)|(?\u0027x1\u0027))\\d(?\u0027count\u0027)){2}(?\u003e(?\u0027x1-x11\u0027)|){2}|0)(?=(?\u003e\\d{3,9})$)(?((?\u0027-count\u0027){3})(?\u003c!^\\d([6-9]\\d|5[6-9]))|(?\u003e(?\u0027-count\u0027)|){3})([1-9](?\u0027count\u0027)((?\u003e(?\u0027x22-x2\u0027))\\d(?\u0027count\u0027)||(?\u003e(?\u0027-x\u0027)|(?\u0027x2\u0027))\\d(?\u0027count\u0027)){2}(?\u003e(?\u0027x2-x22\u0027)|){2}|0)(?=(?\u003e\\d{2,6})$)(?((?\u0027-count\u0027){3})(?\u003c![3-9]\\d\\d|\\d([6-9]\\d|5[6-9]))|(?\u003e(?\u0027-count\u0027)|){3})([1-9](?\u0027count\u0027)((?\u003e(?\u0027x33-x3\u0027))\\d(?\u0027count\u0027)||(?\u003e(?\u0027-x\u0027)|(?\u0027x3\u0027))\\d(?\u0027count\u0027)){2}(?\u003e(?\u0027x3-x33\u0027)|){2}|0)(?=(?\u003e\\d{1,3})$)(?((?\u0027-count\u0027){3})(?\u003c![3-9]\\d\\d|\\d([6-9]\\d|5[6-9]))|(?\u003e(?\u0027-count\u0027)|){3})(?(\\d\\d\\d$)(?![3-9]\\d\\d|\\d([6-9]\\d|5[6-9])))([1-9]\\d*|0)$(?!(?\u0027-x\u0027))(?\u003e(?\u0027-x\u0027)|){12}))|)(?\u0027-time\u0027)){12}`\n\u003c/details\u003e\n\nI simplified it to `(?\u0027time\u0027){2}(?=(?\u003e(?\u0027-time\u0027)|(?\u0027x\u0027)){3}((((?\u0027x22-x2\u0027)|(?\u003e(?\u0027-x\u0027)|(?\u0027x2\u0027)))\\d){2}((?\u0027-x22\u0027)(?\u0027x2\u0027)|))){2}`. I used my [website](https://www.regexdev.com/) to find that it was probably because tried to balance `group#x22` after `group#x22` got a negative-length capture during the matching process.\nBased on this reason, I constructed some simpler patterns.\n\nCurrent issue is related to [issue#111161](https://github.com/dotnet/runtime/issues/111161).\nThere is also an `IndexOutOfRangeException` in issue#111161, but it cames after the sucess match, different from current situation that occurs during the matching process.\n\n### Reproduction Steps\n\n```c#\nusing System;\nusing System.Text.RegularExpressions;\n{\n\tstring pattern = @\"(?=.....())(?\u00272-1\u0027)\\2\";\n\tstring input = \"12345\";\n\tRegex regex = new Regex(pattern, RegexOptions.Compiled);\n\tvar mhes = regex.Matches(input);\n\ttry\n\t{\n\t\tConsole.WriteLine(mhes.Count);\n\t}catch(Exception e)\n\t{\n\t\tConsole.WriteLine(\"Compiled : \"+e.Message);\n\t}\n\ttry\n\t{\n\t\tConsole.WriteLine(Regex.Matches(input,pattern).Count);\n\t}catch(Exception e)\n\t{\n\t\tConsole.WriteLine(\"Interpretor : \"+e.Message);\n\t}\n}\n{\n\tstring pattern = @\"(?=.....())(?\u00272-1\u0027)(?\u00272\u0027)(?\u0027-2\u0027)\\2\";\n\tstring input = \"12345\";\n\tRegex regex = new Regex(pattern, RegexOptions.Compiled);\n\tvar mhes = regex.Matches(input);\n\ttry\n\t{\n\t\tConsole.WriteLine(mhes.Count);\n\t}catch(Exception e)\n\t{\n\t\tConsole.WriteLine(\"Compiled : \"+e.Message);\n\t}\n\ttry\n\t{\n\t\tConsole.WriteLine(Regex.Matches(input,pattern).Count);\n\t}catch(Exception e)\n\t{\n\t\tConsole.WriteLine(\"Interpretor : \"+e.Message);\n\t}\n}\n```\n\n### Expected behavior\n\nWhatever,  just don\u0027t as same as the actual output.\n\n### Actual behavior\n\n```\nCompiled : Index was outside the bounds of the array.\nInterpretor : Index was outside the bounds of the array.\nCompiled : Specified argument was out of the range of valid values.\nInterpretor : Index was outside the bounds of the array.\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxKkUAg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7DfR-e",
                                           "createdAt":  "2025-09-11T10:21:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-text-regularexpressions\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-11T10:21:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DfZ3h",
                                           "createdAt":  "2025-09-11T10:27:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "longxya",
                                           "body":  "Using `(?=.....())(?\u00272-1\u0027)\\2` or `(?=.....())(?\u00272-1\u0027)(?\u0027-2\u0027)` to match `123456`, throw `Index was outside the bounds of the array.`.\nBecause the execution of operations `\\2` and `(?\u0027-2\u0027)` both use `Match.MatchLength(2)`.\n**Here is the code of `Match.MatchLength()`. I added some analysises:**\n```c#\n        /// \u003csummary\u003e\n        /// Returns the length of the last specified matched group by capnum\n        /// \u003c/summary\u003e\n        internal int MatchLength(int cap)\n        {\n            int[][] matches = _matches;\n\n\t\t\t//matches[cap].Length = 2  it\u0027s cause is Group#2 has only one capture (5,-5)\n            int i = matches[cap][_matchcount[cap] * 2 - 1];\n\t\t\t// i = -5 =\u003e \n\t\t\t//\t-3 - i = 2  but max Index of matches[cap] just can be 1\n\t\t\t//so matches[cap][2] throw IndexOutOfRangeException\n            return i \u003e= 0 ? i : matches[cap][-3 - i];\n        }\n```\n-----\nIn compiled mode and Source Generated code, using `(?=.....())(?\u00272-1\u0027)(?\u00272\u0027)(?\u0027-2\u0027)\\2` to match `12345`, throw `Specified argument was out of the range of valid values.`\n**Here is the code of `Match.MatchLength()`. I also added some analysises:**\n```c#\n        /// \u003csummary\u003e\n        /// Returns the length of the last specified matched group by capnum\n        /// \u003c/summary\u003e\n        internal int MatchLength(int cap)\n        {\n            int[][] matches = _matches;\n\n\t\t\t//matches[cap].Length = 6  cause Group#2 captures : \n\t\t\t//(5,-5) (0,0) (-1,-2)  not all is capture,some is balance\n            int i = matches[cap][_matchcount[cap] * 2 - 1];\n\t\t\t// i = -2 =\u003e \n\t\t\t//\t-3 - i = 1  but matches[cap][1] = -5\n            return i \u003e= 0 ? i : matches[cap][-3 - i];//still return a negative number\n\t\t\t//this is the point, but it wouldn\u0027t throw exception any more\n        }\n```\n\n**ArgumentOutOfRangeException was thrown when using `\\2` at the end:**\n```c#\nmatchLength = base.MatchLength(2);//-5\n//slice = \"12345\"\nif (slice.Length \u003c matchLength || \n\t//inputSpan.Slice(5, -5) throw ThrowArgumentOutOfRangeException\n    !inputSpan.Slice(base.MatchIndex(2), matchLength).SequenceEqual(slice.Slice(0, matchLength)))\n{\n    UncaptureUntil(0);\n    return false; // The input didn\u0027t match.\n}\n```\n-----\nIn [issue#113734](https://github.com/dotnet/runtime/issues/113734), in compiled mode, using `\\d+(?\u00271\u0027.)(?\u003c=(?\u00272-1\u0027.).{5})\\2`to match `WTF123a1`, will cause infinite matches.\nBut it still throw `Specified argument was out of the range of valid values.` in Source Generated code.\nIt because `Length of Group#2\u0027s Capture is -4,(-3 - (-4)) = 1`. It happens to be the index of the last element of matches[cap]. So `Match.MatchLength(2)` wouldn\u0027t throw, but `inputSpan.Slice(base.MatchIndex(2), matchLength)` will.\n\nI don\u0027t konw why that pattern will cause infinite matches instead of thow exception in compiled mode.\nWhat I konw is, in compiled pattern, when group#2 got a negative-length capture, if not throw exception when match steps came to `\\2`, back reference of this group will cause the current match index of input(textpos), move negative length(length of capture), aka move `ABS(negative-length of group#2\u0027s value)` character lengths in the opposite direction of the match(as what I said in issue#113734). And differnet with `(?\u003c=)`, it wouldn\u0027t reset textpos.\n\nBut change the pattern to `\\d+(?\u00271\u0027.)(?\u003c=(?\u00272-1\u0027.).{6})\\2`, will thow `Index was outside the bounds of the array.` in compiled mode and Source Generated code.\nAnd compiled pattern `\\d+(?\u00271\u0027.)(?\u003c=(?\u00272-1\u0027.).{6})(?\u00272\u0027)(?\u0027-2\u0027)\\2` cause infinite matches again.\nAnd in Source Generated code, of course, `\\d+(?\u00271\u0027.)(?\u003c=(?\u00272-1\u0027.).{6})(?\u00272\u0027)(?\u0027-2\u0027)\\2` still throw `Specified argument was out of the range of valid values.`\n\n**Attention : **\n**In the issue#119444,Source Generated code work normally in .net9, but doesn\u0027t in .net10([Source Generated in .net10](https://mihubot.xyz/regex?pattern=%28%3F%27time%27%29%7B2%7D%28%3F%3D%28%28%3F%27-time%27%29%7C%28%3F%27x%27%29%29%7B3%7D%28%28%28%3F%27count%27%29%28%28%28%3F%27-count%27%29%7C%28%28%3F%27-x%27%29%29%29%28%3F%27count%27%29%29%7B2%7D%7C0%29%28%3F%28%28%3F%27-count%27%29%7B3%7D%29%7C%28%28%3F%27-count%27%29%7C%29%7B3%7D%29%28%3F%21%28%3F%27-x%27%29%29%29%7C%29%7B2%7D\u0026showAll=1))**",
                                           "updatedAt":  "2025-09-11T10:27:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DpeBZ",
                                           "createdAt":  "2025-09-11T19:53:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "There\u0027s no situation where running a regex should result in any such exception. The bug is that an exception is being thrown, not which exception is thrown. You\u0027ve opened a few issues; is the fact that an exception is being thrown covered by one of those? If so, this one can be closed.",
                                           "updatedAt":  "2025-09-11T19:53:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Dr68b",
                                           "createdAt":  "2025-09-12T00:30:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "longxya",
                                           "body":  "\u003e There\u0027s no situation where running a regex should result in any such exception.\n\nI see. I think `Regex.Matches(input, pattern)` shouldn\u0027t throw any exception besides pattern error.\n\n\u003e is the fact that an exception is being thrown covered by one of those?\n\nWhat do u mean?\nI did report an `IndexOutOfRangeException` in issue#111161, but there are some differences in how they are triggered, although they are all based on `negative-length capture`.\n\nRegarding the current issue(issue#119570)、issue#118666、issue#111161 and issue#113734.\nI think the root cause of these four issues is a group catching a negative-length capture.\nIt looks like they are all because `(?\u003c=(?\u00272-1\u0027)exp)` or `(?=exp(?\u00272-1\u0027))` could cause group#2 to get a negative-length capture, which leads to a series of issues.\nI don\u0027t know how you plan to deal with groups which could catch negative-length captures.\n\n‌I have a half-baked suggestion. If set capture to 0(`index += length;length = 0;`) when a group gets a negative-length capture, these four issues might be solved.\nAfter all, groups with negative-length capture seem to have no value in backreference; they might be used as a counter only.\nBut if u don\u0027t, they might need different approaches to solve. That\u0027s why I opened different issues.\nFor issue#113734, infinite matches smell very dangerous, so created a separate issue.\n\nAbout issue#119444, I can\u0027t find any connection between it and `negative-length capture`. But I can\u0027t say for sure.\n\nSo if I discover more issues regarding negative-length capture groups after this, shall I comment on issue#111161 ?\n\nOr if I find that regex throws any different exceptions, should I comment on them in one issue?\nFor example, should the `Bad label content in ILGenerator.` and the current two exceptions be discussed in one issue if discovered at the same time?",
                                           "updatedAt":  "2025-09-12T00:30:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Dr8GC",
                                           "createdAt":  "2025-09-12T00:32:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e I think the root cause of these four issues is a group catching a negative-length capture.\n\nThanks. Then we should just use one issue for all of them and close this and the others.",
                                           "updatedAt":  "2025-09-12T00:32:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7DsGVd",
                                           "createdAt":  "2025-09-12T00:55:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "longxya",
                                           "body":  "\u003eall of them\n\nJust `negative-length capture` issues? or all regex issues?\n\nAnd what I mentioned, in the issue#119444, Source Generated code work normally in .net9, but doesn\u0027t in .net10([Source Generated in .net10](https://mihubot.xyz/regex?pattern=%28%3F%27time%27%29%7B2%7D%28%3F%3D%28%28%3F%27-time%27%29%7C%28%3F%27x%27%29%29%7B3%7D%28%28%28%3F%27count%27%29%28%28%28%3F%27-count%27%29%7C%28%28%3F%27-x%27%29%29%29%28%3F%27count%27%29%29%7B2%7D%7C0%29%28%3F%28%28%3F%27-count%27%29%7B3%7D%29%7C%28%28%3F%27-count%27%29%7C%29%7B3%7D%29%28%3F%21%28%3F%27-x%27%29%29%29%7C%29%7B2%7D\u0026showAll=1))\nHere is summary of source generated:\n```c#\npartial class C\n{\n    /// \u003cremarks\u003e\n    /// Pattern:\u003cbr/\u003e\n    /// \u003ccode\u003e(?\u0027time\u0027){2}(?=((?\u0027-time\u0027)|(?\u0027x\u0027)){3}(((?\u0027count\u0027)(((?\u0027-count\u0027)|((?\u0027-x\u0027)))(?\u0027count\u0027)){2}|0)(?((?\u0027-count\u0027){3})|((?\u0027-count\u0027)|){3})(?!(?\u0027-x\u0027)))|){2}\u003c/code\u003e\u003cbr/\u003e\n    /// Explanation:\u003cbr/\u003e\n    /// \u003ccode\u003e\n    /// ○ Loop exactly 2 times.\u003cbr/\u003e\n    ///     ○ \"time\" capture group.\u003cbr/\u003e\n    ///         ○ Match an empty string.\u003cbr/\u003e\n    /// ○ Loop exactly 2 times.\u003cbr/\u003e\n    ///     ○ Zero-width positive lookahead.\u003cbr/\u003e\n    ///         ○ Optional (greedy).\u003cbr/\u003e\n    ///             ○ Loop exactly 3 times.\u003cbr/\u003e\n    ///                 ○ 1st capture group.\u003cbr/\u003e\n    ///                     ○ Match with 2 alternative expressions.\u003cbr/\u003e\n    ///                         ○ Non-capturing balancing group. Uncaptures the \"time\" capture group.\u003cbr/\u003e\n    ///                             ○ Match an empty string.\u003cbr/\u003e\n    ///                         ○ \"x\" capture group.\u003cbr/\u003e\n    ///                             ○ Match an empty string.\u003cbr/\u003e\n    ///             ○ 2nd capture group.\u003cbr/\u003e\n    ///                 ○ Fail to match.\u003cbr/\u003e\n    /// \u003c/code\u003e\n    /// \u003c/remarks\u003e\n    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Text.RegularExpressions.Generator\", \"10.0.12.42804\")]\n    public static partial global::System.Text.RegularExpressions.Regex YourRegex() =\u003e global::System.Text.RegularExpressions.Generated.YourRegex_0.Instance;\n}\n```\n\nIt says \n```c#\n    ///         ○ 2nd capture group.\u003cbr/\u003e\n    ///             ○ Fail to match.\u003cbr/\u003e\n```\nBut in the interpreter, Group#2 does have captures.\n\n**Should  this source generated issue be commented on issue#119444? or open a new issue? or together with `negative-length capture` issues?**",
                                           "updatedAt":  "2025-09-12T01:23:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7ESdjH",
                                           "createdAt":  "2025-09-15T17:17:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Just negative-length capture issues? or all regex issues?\n\nEverything with likely the same root cause should be a single issue.",
                                           "updatedAt":  "2025-09-15T17:17:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EqRQC",
                                           "createdAt":  "2025-09-16T15:59:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "longxya",
                                           "body":  "OK.\n\nCurrent issue(issue#119570)、issue#118666 and issue#113734] could be closed,\nand information of the three issues could be summarized in issue#111161.\n\nAbout **issue#119444**, it\u0027s probably not caused by `negative-length`.",
                                           "updatedAt":  "2025-09-16T15:59:37Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Regex throws `IndexOutOfRangeException` or `ArgumentOutOfRangeException` when using compiled mode or sourceGeneration, and only thow `IndexOutOfRangeException` in interpretor",
        "labels":  [
                       "area-System.Text.RegularExpressions",
                       "untriaged"
                   ]
    }
]
