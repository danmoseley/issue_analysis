[
    {
        "url":  "https://github.com/dotnet/runtime/issues/32072",
        "createdAt":  "2020-02-10T23:34:10Z",
        "number":  32072,
        "author":  "scalablecory",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-28T13:32:34Z",
        "body":  "Our QUIC event callbacks should ideally raise exceptions on the next API call/completion, or at the very least log to `NetEventSource`.\r\n\r\nhttps://github.com/dotnet/runtime/blob/5c6f5b14f0688b20ef339773854ff92e01807cde/src/libraries/System.Net.Quic/src/System/Net/Quic/Implementations/MsQuic/MsQuicConnection.cs#L158-L163",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOMkRM-Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyMDQyNDkxNQ==",
                                           "createdAt":  "2021-04-15T13:32:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Related to https://github.com/dotnet/runtime/issues/51177",
                                           "updatedAt":  "2021-04-15T13:32:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg0MzMzNjk1Mw==",
                                           "createdAt":  "2021-05-18T16:38:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: For 6.0 we need at least EventSource event ... it is now internal code, but we need to have indication of a failure.",
                                           "updatedAt":  "2021-05-18T16:38:47Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[QUIC] Improve error handling for QUIC event callbacks",
        "labels":  [
                       "bug",
                       "tenet-reliability",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43061",
        "createdAt":  "2020-10-05T21:31:24Z",
        "number":  43061,
        "author":  "scalablecory",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOBSnCIw==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "geoffkizer",
                                            "createdAt":  "2020-10-05T22:58:15Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Perksey",
                                            "createdAt":  "2020-10-06T16:03:45Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2022-06-28T13:40:56Z",
        "body":  "Consider participating in automated QUIC interop testing to ensure basic compatibility with other implementations:\r\n\r\nhttps://github.com/marten-seemann/quic-interop-runner/blob/master/README.md#building-a-quic-endpoint",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONxW4vA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwMzkwMDM5NA==",
                                           "createdAt":  "2020-10-05T21:31:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-05T21:31:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43FbG6",
                                           "createdAt":  "2021-09-21T16:48:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We should build on top of what msquic has -- @nibanks do you have some existing interop tests for msquic?",
                                           "updatedAt":  "2021-09-21T16:48:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43Fbi8",
                                           "createdAt":  "2021-09-21T16:50:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB7Nq9A==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2021-09-21T18:36:28Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "nibanks",
                                           "body":  "Yep. I recommend you start by porting: https://github.com/microsoft/msquic/blob/main/src/tools/interop/interop.cpp. Since you have HTTP/3 there are additional tests you can do beyond what MsQuic does.",
                                           "updatedAt":  "2021-09-21T16:50:40Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[QUIC] Participate in QUIC interop testing",
        "labels":  [
                       "test-enhancement",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43792",
        "createdAt":  "2020-10-24T01:09:42Z",
        "number":  43792,
        "author":  "geoffkizer",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T12:08:37Z",
        "body":  "We should have synchronous versions of APIs like AcceptConnection, AcceptStream, etc.\r\n\r\n@scalablecory @stephentoub ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOL_oRA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNTY0OTMzMA==",
                                           "createdAt":  "2020-10-24T01:09:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-10-24T01:09:45Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNTY1MzcxMw==",
                                           "createdAt":  "2020-10-24T01:42:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "I think we should optimize the sync methods on QuicStream, but I don\u0027t think we need sync methods anywhere else. What\u0027s the goal?",
                                           "updatedAt":  "2020-10-24T01:42:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNTY1NDAyNA==",
                                           "createdAt":  "2020-10-24T01:45:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "geoffkizer",
                                           "body":  "Maybe we don\u0027t. I\u0027m not sure what our current general stance is on supporting sync APIs; I know there\u0027s some concern about not supporting them in general.\r\n\r\nI\u0027ll defer to @stephentoub here.",
                                           "updatedAt":  "2020-10-24T01:45:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNTk1MDQ1OQ==",
                                           "createdAt":  "2020-10-24T15:50:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "At a minimum the sync stream methods should be implemented as sync all the way down. \r\n\r\nIt\u0027d be good as well if the sync methods on HttpClient/SocketsHttpHandler were sync all the way down for HTTP/3 (rather than throwing as currently happens for HTTP/2), and I expect that would necessitate such sync connection methods. \r\n\r\nBeyond that, I\u0027d leave it up to expected use cases,  e.g. do we expect existing sync code paths that can\u0027t be changed (e.g. some sync interface callback) would want to establish quic connections. \r\n\r\n(All that said, I\u0027m not currently clear on where blocking would occur with quick. If we\u0027d still have sync over async due to multiplexing in the quic implementation, the benefits here may be limited, and we\u0027ll need to fully understand them to understand how much to invest here.)",
                                           "updatedAt":  "2020-10-24T16:16:20Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNjgyMzgyOA==",
                                           "createdAt":  "2020-10-26T21:06:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "geoffkizer",
                                           "body":  "\u003e If we\u0027d still have sync over async due to multiplexing in the quic implementation, the benefits here may be limited, and we\u0027ll need to fully understand them to understand how much to invest here.\r\n\r\nYes, it would mean sync over async. Even for the sync stream methods.\r\n\r\nI don\u0027t have a strong opinion here; I just want to make sure we are doing the right thing, and I\u0027m not entirely clear on what that is.\r\n\r\nIt\u0027s also possible that the answer here may be different for the stream vs new QUIC-specific APIs.\r\n",
                                           "updatedAt":  "2020-10-26T21:06:54Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNjgzNDY5MQ==",
                                           "createdAt":  "2020-10-26T21:29:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "stephentoub",
                                           "body":  "\u003e Yes, it would mean sync over async. Even for the sync stream methods.\r\n\r\nAt what level does the multiplexing happen? The worst case is only async methods exposed, and in a way where someone on a thread pool thread wants to do a sync operation and queues another work item that requires another thread pool thread to make forward progress, so you end up needing 2x the thread pool threads, waving my hands.  At the other end of the spectrum, if all the multiplexing for all quic connections end up happening in one place, such that you only need at worst one additional thread (and potentially one that\u0027s not actually a thread pool thread, if it\u0027s actually a dedicated thread that\u0027s blocking synchronously), that\u0027s a good motivation for sync APIs.  But I\u0027m guessing reality is somewhere in the middle.",
                                           "updatedAt":  "2020-10-26T21:29:44Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNjg1MTMxOA==",
                                           "createdAt":  "2020-10-26T22:09:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "geoffkizer",
                                           "body":  "\u003e At what level does the multiplexing happen?\r\n\r\nPer-connection, more or less.\r\n\r\nSo it\u0027s not a single global background task, but it\u0027s also not one per stream.\r\n\r\n\u003e I\u0027m guessing reality is somewhere in the middle.\r\n\r\nYep, exactly.",
                                           "updatedAt":  "2020-10-26T22:09:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNjg1NDc0OQ==",
                                           "createdAt":  "2020-10-26T22:18:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "MsQuic is purely async. It maintains its own thread (pool) in a mostly undocumented way. It fully abstracts multiplexing away from us.\r\n\r\nI do think we can avoid the 2x explosion, at least, but we won\u0027t get much more efficient (I guess just avoiding the `Task` allocation) than just doing `.AsTask().GetAwaiter().GetResult()`.",
                                           "updatedAt":  "2020-10-26T22:18:38Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcxNjg2NjE5Ng==",
                                           "createdAt":  "2020-10-26T22:49:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "Making H3 sync `Send()` work should be fairly trivial. The only part that might need refactoring is waiting for an available request stream (but, I think that specific piece of code needs some work anyway, so this doesn\u0027t bother me)\r\n\r\nMy opinion would be to optimize sync stream methods, but avoid introducing QUIC-specific sync APIs unless we believe there will be significant detriment to `SocketsHttpHandler.Send`. I don\u0027t think anyone should be using sync with QUIC.",
                                           "updatedAt":  "2020-10-26T22:49:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2MDM0MTEyNA==",
                                           "createdAt":  "2021-01-14T17:22:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Given that we do not have any customers asking for it and it is non-trivial investment, we won\u0027t do it until we have strong business case in future.",
                                           "updatedAt":  "2021-01-14T17:22:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44v-hE",
                                           "createdAt":  "2021-10-26T16:18:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Still not needed from customers, pushing to Future.",
                                           "updatedAt":  "2022-07-19T12:08:37Z"
                                       }
                                   ],
                         "totalCount":  11
                     },
        "title":  "[QUIC] Does QUIC need sync versions of non-Stream APIs?",
        "labels":  [
                       "design-discussion",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48685",
        "createdAt":  "2021-02-24T06:01:13Z",
        "number":  48685,
        "author":  "scalablecory",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-01-28T15:46:58Z",
        "body":  "Similar to how `Stream` abstracts a `Socket`, we need some sort of abstraction for `QuicStream`, `QuicListener`, and `QuicConnection`.\r\n\r\nThis would allow for improved testing as well as providing the abstracts for https://github.com/dotnet/runtime/issues/48617 to use.\r\n\r\nSomething I\u0027ve wanted to try for this is to have these classes be the actual abstraction, and move their implementation/construction behind a `QuicConnection.ConnectAsync` and `QuicConnection.CreateListener`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPQ5E6Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NDgwNTg1OQ==",
                                           "createdAt":  "2021-02-24T06:01:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSimilar to how `Stream` abstracts a `Socket`, we need some sort of abstraction for `QuicStream`, `QuicListener`, and `QuicConnection`.\r\n\r\nThis would allow for improved testing as well as providing the abstracts for https://github.com/dotnet/runtime/issues/48617 to use.\r\n\r\nSomething I\u0027ve wanted to try for this is to have these classes be the actual abstraction, and move their implementation/construction behind a `QuicConnection.ConnectAsync` and `QuicConnection.CreateListener`.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003escalablecory\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-02-24T06:01:17Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NDgxOTk3Mg==",
                                           "createdAt":  "2021-02-24T06:20:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "geoffkizer",
                                           "body":  "I\u0027m not sure we need an abstraction for `QuicListener`. And I think we already have an abstraction for `QuicStream` -- it\u0027s just Stream.\r\n\r\nI agree re `QuicConnection`. We should consider adding a base class that abstracts the concept of a multiplexed connection.\r\n\r\n ",
                                           "updatedAt":  "2021-02-24T06:20:15Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc4NzY0MTYwMA==",
                                           "createdAt":  "2021-03-01T05:11:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "Ultimately I want to have everything needed to support `SocketsHttpHandler.QuicConnectCallback`.\r\n\r\n\u003e And I think we already have an abstraction for `QuicStream` -- it\u0027s just Stream.\r\n\r\nThere are some QUIC-specific APIs like waiting for stream shutdown ACK and aborting a stream with an error code.\r\n\r\n\u003e We should consider adding a base class that abstracts the concept of a multiplexed connection.\r\n\r\nYeah. This bleeds into the connection abstraction stuff. At a minimum I\u0027d like to have a thought experiment on how we could in the future insert some abstract `MultiplexedConnection` type.\r\n\r\n\u003e I\u0027m not sure we need an abstraction for QuicListener\r\n\r\nYeah, we don\u0027t have a socket listener abstraction currently, so we can probably do without it.",
                                           "updatedAt":  "2021-03-01T05:11:32Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNTA4MjExNQ==",
                                           "createdAt":  "2021-04-22T18:22:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "CC @Tratcher @halter73 @jkotalik @JamesNK \r\n\r\nHaving an abstraction was previously a high-pri item for you; is this still the case? What do you plan to use this for?\r\n\r\nWe need to figure out abstraction model for 6.0.",
                                           "updatedAt":  "2021-04-22T18:22:33Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNTE0NTA0NA==",
                                           "createdAt":  "2021-04-22T19:58:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "@davidfowl\r\n\r\nI think we\u0027ve already solved this on our side. We introduced a multiplexed connection type in ASP.NET Core\u0027s transport abstractions.\r\n\r\nSee https://github.com/dotnet/aspnetcore/tree/9817a811c1fe6034b112e4fde84d2f4271492dc5/src/Servers/Connections.Abstractions/src",
                                           "updatedAt":  "2021-04-22T19:58:56Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNTMzODE1MQ==",
                                           "createdAt":  "2021-04-23T02:18:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "halter73",
                                           "body":  "We had the idea that Kestrel and HttpClient should consolidate on a transport abstraction in System.Net.Connections and Microsoft.AspNetCore.Connections would disappear. https://github.com/dotnet/runtime/issues/1793.\r\n\r\nWe wanted to land the non-multiplexed version of this for .NET 5, but that didn\u0027t pan out. Sharing a transport ~abstraction~ between Kestrel and HttpClient without breaking behavior or regressing performance is no small task though. Trust me 😄.\r\n\r\nAdding QUIC to the mix will only add to that, but at least there would be less legacy behavior to maintain.",
                                           "updatedAt":  "2021-04-23T02:25:42Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyNzc3OTQ1MA==",
                                           "createdAt":  "2021-04-27T17:25:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "scalablecory",
                                           "body":  "@halter73 if I understand correctly, nothing in Kestrel is depending directly on `QuicStream`, `QuicConnection`, beyond the abstraction implementation? You\u0027re not using the `QuicProvider` stuff at all?",
                                           "updatedAt":  "2021-04-27T17:25:25Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODAzODY5OQ==",
                                           "createdAt":  "2021-04-27T23:58:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOBpGolw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "scalablecory",
                                                                               "createdAt":  "2021-04-28T06:09:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "halter73",
                                                                               "createdAt":  "2021-04-29T19:19:07Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "Correct. The `Microsoft.AspNetCore.Server.Kestrel.Transport.Quic` assembly uses QUIC types and nothing else.\r\n\r\nQuicProvider is not used: https://github.com/dotnet/aspnetcore/search?q=QuicProvider",
                                           "updatedAt":  "2021-04-27T23:58:34Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgyODAzOTQzMg==",
                                           "createdAt":  "2021-04-28T00:00:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "If you want to see how ASP.NET Core is using QUIC types, the transport source is here: https://github.com/dotnet/aspnetcore/tree/main/src/Servers/Kestrel/Transport.Quic/src",
                                           "updatedAt":  "2021-04-28T00:00:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49DkTp",
                                           "createdAt":  "2022-01-28T15:46:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Punting to future, the reasoning is stated here: https://github.com/dotnet/runtime/issues/64449. We don\u0027t plan to introduce abstractions for Quic classes in 7.0, but we\u0027re keeping our doors open to do it in the next release.",
                                           "updatedAt":  "2022-01-28T15:46:44Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "Abstracting QUIC",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49136",
        "createdAt":  "2021-03-04T15:59:00Z",
        "number":  49136,
        "author":  "ManickaP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-26T16:14:51Z",
        "body":  "We should have tests for all public methods and for their common scenarios.\r\nFirstly, revise what the current state is and reuse this issue to keep track of which APIs need to be covered by tests. \r\nConsider splitting this issue into smaller ones if the coverage is really low.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOU8JqNQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc5MDcyMzQ5OA==",
                                           "createdAt":  "2021-03-04T15:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe should have tests for all public methods and for their common scenarios.\r\nFirstly, revise what the current state is and reuse this issue to keep track of which APIs need to be covered by tests. \r\nConsider splitting this issue into smaller ones if the coverage is really low.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eManickaP\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Quic`, `test enhancement`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e6.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-04T15:59:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Twmo1",
                                           "createdAt":  "2023-01-26T16:14:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: we can run a code coverage and eventually close this, but we do have fairly good test coverage atm. Punting to future.",
                                           "updatedAt":  "2023-01-26T16:14:44Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[QUIC] Revise test coverage",
        "labels":  [
                       "test-enhancement",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/49972",
        "createdAt":  "2021-03-22T02:29:55Z",
        "number":  49972,
        "author":  "JamesNK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-04-22T19:07:15Z",
        "body":  "In Kestrel we want to reduce per-request HTTP/3 allocations to the minimum possible. Ideally that would be zero.\r\n\r\nWith HTTP/1.1 and HTTP/2 Kestrel is able to reuse per-request instances. For example, after a HTTP/2 request is gracefully completed (i.e. wasn\u0027t aborted and finished writing a frame with the close stream bit set) the stream is returned to a pool on the connection. Future requests on the connection will reuse the pooled stream by reseting it back to its initial state instead of creating a new one. This is discussed in a [blog post](https://devblogs.microsoft.com/aspnet/grpc-performance-improvements-in-net-5/#http-2-allocations-in-kestrel).\r\n\r\nAt the moment a new QuicStream is created for each HTTP/3 request on a connection:\r\n\r\n```cs\r\npublic class QuicConnection\r\n{\r\n    // Existing\r\n    QuicStream OpenUnidirectionalStream();\r\n    QuicStream OpenBidirectionalStream();\r\n    ValueTask\u003cQuicStream\u003e AcceptStreamAsync();\r\n\r\n    // New?\r\n    void ReturnCompletedStream(QuicStream stream);\r\n}\r\n```\r\n\r\nSupport should be added to System.Net.Quic for optionally returning a QuicStream back to the connection when an app is no longer using it. The instance can then be reused by one of the factory methods above.\r\n\r\nExtra things to consider:\r\n* Validate QuicStream is in a valid state before pooling it.\r\n* Maximum number of pooled streams. In Kestrel there is a max of 100 HTTP/2 pooled streams allowed on a connection. I don\u0027t think this needs to be configurable.\r\n* Remove unused streams after a certain amount of time. In Kestrel the HTTP/2 pooled streams on a connection are removed if not used within a certain amount of time. In place so idle connections don\u0027t unnessarily hold onto memory. I don\u0027t think this needs to be configurable.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQfgtwg==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDgwMzcyMDUxMg==",
                                           "createdAt":  "2021-03-22T02:29:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIn Kestrel we want to reduce per-request HTTP/3 connections to the minimum possible. Ideally that would be zero.\r\n\r\nWith HTTP/1.1 and HTTP/2 Kestrel is able to reuse per-request instances. For example, after a HTTP/2 request is gracefully completed (i.e. wasn\u0027t aborted and finished writing a frame with the close stream bit set) the stream is returned to a pool on the connection. Future requests on the connection will reuse the pooled stream by reseting it back to its initial state instead of creating a new one. This is discussed in a [blog post](https://devblogs.microsoft.com/aspnet/grpc-performance-improvements-in-net-5/#http-2-allocations-in-kestrel).\r\n\r\nAt the moment a new QuicStream is created for each HTTP/3 request on a connection:\r\n\r\n```cs\r\npublic class QuicConnection\r\n{\r\n    // Existing\r\n    QuicStream OpenUnidirectionalStream();\r\n    QuicStream OpenBidirectionalStream();\r\n    ValueTask\u003cQuicStream\u003e AcceptStreamAsync();\r\n\r\n    // New?\r\n    void ReturnCompletedStream(QuicStream stream);\r\n}\r\n```\r\n\r\nSupport should be added to System.Net.Quic for optionally returning a QuicStream back to the connection when an app is no longer using it. The instance can then be reused by one of the factory methods above.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJamesNK\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-03-22T02:29:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc43FZY5",
                                           "createdAt":  "2021-09-21T16:38:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Leave it in Future, if it pops in perf analysis, we can move it to 7.0.",
                                           "updatedAt":  "2021-09-21T16:38:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B82RO",
                                           "createdAt":  "2022-04-22T12:34:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "Unlike a TCP stream, which is the connection, QUIC multiplexes streams over a single connection.\r\nCorrect me if I am wrong. In HTTP/2, requests are multiplexed with frames on the same stream. In HTTP/3, each request has its own lightweight stream exclusive for that particular request. Resetting a QUIC stream aborts it. This is how HTTP/3 works over QUIC.\r\nNevertheless, it may be possible to reuse the .NET wrapper on a future instance of native MsQuic stream, which is super lightweight. See also https://github.com/dotnet/aspnetcore/issues/33680.",
                                           "updatedAt":  "2022-04-22T12:34:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B9Znm",
                                           "createdAt":  "2022-04-22T15:15:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "\u003e it may be possible to reuse the .NET wrapper on a future instance of native MsQuic stream\r\n\r\nThat\u0027s how I understood the issue. I think it\u0027s highly unlikely msquic would support re-using their stream object, but maybe I\u0027m wrong, @nibanks?",
                                           "updatedAt":  "2022-04-22T15:15:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B9aX9",
                                           "createdAt":  "2022-04-22T15:19:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCZVoHA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2022-04-22T15:20:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "nibanks",
                                           "body":  "MsQuic stream objects are highly optimized for creation and deletion (most of the time it\u0027s just pushing and popping from a pool list). So don\u0027t really need/want to support reuse. Now, if that\u0027s not easy to do in C#, perhaps you could support reuse by just deleting the old one and opening a new one. ",
                                           "updatedAt":  "2022-04-22T15:19:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B9bCi",
                                           "createdAt":  "2022-04-22T15:22:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Yeah, I thought so, and since native memory doesn\u0027t influence GC, recreating the msquic object wouldn\u0027t have any negative impact on pooling our managed wrapper.",
                                           "updatedAt":  "2022-04-22T15:22:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B-C3C",
                                           "createdAt":  "2022-04-22T19:07:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "We could add API that allows to assign new stream to existing `QuicStream` instead of always allocations new one.\r\nlike stream.Close(); stream = QuicConnection.AcceptAsync(stream, token); \r\nWe can certainly use pool allocation behind the scenes but that has also some cost and does not give choices to the caller. ",
                                           "updatedAt":  "2022-04-22T19:07:15Z"
                                       }
                                   ],
                         "totalCount":  7
                     },
        "title":  "QUIC: Reuse QuicStream instances on a connection",
        "labels":  [
                       "api-suggestion",
                       "tenet-performance",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/53533",
        "createdAt":  "2021-06-01T15:35:40Z",
        "number":  53533,
        "author":  "wegylexy",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODM2JLg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "T-bond",
                                            "createdAt":  "2023-07-21T04:20:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MineCake147E",
                                            "createdAt":  "2023-08-18T03:10:37Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "nxrighthere",
                                            "createdAt":  "2023-12-22T12:47:36Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Stellanora64",
                                            "createdAt":  "2025-08-27T12:17:37Z"
                                        }
                                    ],
                          "totalCount":  4
                      },
        "updatedAt":  "2025-07-28T08:05:01Z",
        "body":  "## Background and Motivation\r\n\r\nQUIC is finally a proposed standard in RFC, with HTTP/3 and WebTransport on the way.\r\nTo prepare for WebTransport and other use cases, such as unreliable message delivery in SignalR, .NET should implement QUIC datagram API, as MsQuic already supports it, to enable higher-level APIs such as WebTransport.\r\nUntil WebTransport is standardized, it may be used today to stream real-time game state and ultra low-latency voice data where dropped packets should not be retransmitted. Once this is done, SignalR may also support new features.\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace System.Net.Quic\r\n{\r\n    public class QuicConnectionOptions\r\n    {\r\n+        public bool DatagramReceiveEnabled { get { throw null; } set { } }\r\n    }\r\n+    public delegate void QuicDatagramReceivedEventHandler(QuicConnection sender, ReadOnlySpan\u003cbyte\u003e buffer);\r\n+    public enum QuicDatagramSendState\r\n+    {\r\n+        Unknown,\r\n+        Sent,\r\n+        LostSuspect,\r\n+        Lost,\r\n+        Acknowledged,\r\n+        AcknowledgedSuprious,\r\n+        Canceled\r\n+    }\r\n+    public delegate void QuicDatagramSendStateChangedHandler(QuicDatagramSendState state, bool isFinal);\r\n+    public sealed class QuicDatagramSendOptions\r\n+    {\r\n+        public bool Priority { get { throw null; } set { } }\r\n+        public QuicDatagramSendStateChangedHandler? StateChanged { get { throw null; } set { } }\r\n+    }\r\n    public class QuicConnection\r\n    {\r\n+        public bool DatagramReceivedEnabled { get { throw null; } set { } }\r\n+        public bool DatagramSendEnabled { get { throw null; } set { } }\r\n+        public int DatagramMaxSendLength { get { throw null; } }\r\n+        public event QuicDatagramReceivedEventHandler? DatagramReceived { add { } remove { } }\r\n+        public void SendDatagram(ReadOnlyMemory\u003cbyte\u003e buffer, QuicDatagramSendOptions? options = null) { throw null; }\r\n+        public void SendDatagram(System.Buffers.ReadOnlySequence\u003cbyte\u003e buffers, QuicDatagramSendOptions? options = null) { throw null; }\r\n    }\r\n}\r\n```\r\nSee https://github.com/wegylexy/quic-with-datagram for implementation (with MsQuic 1.9.0).\r\n\r\n## Usage Examples\r\n\r\n``` C#\r\n// receive\r\nconnection.DatagramReceived += (sender, buffer) =\u003e\r\n{\r\n    // Parse the readonly span synchronously, without copying all the bytes, into an async task\r\n    MyAsyncChannel.Writer.TryWrite(MyZeroCopyHandler.HandleAsync(buffer));\r\n}\r\n// send\r\nvar size = Unsafe.SizeOf\u003cMyTinyStruct\u003e();\r\nDebug.Assert(size \u003c= connection.DatagramMaxSendLength);\r\nTaskCompletionSource tcs = new();\r\n// note: max send length may vary throughout the connection\r\nvar array = ArrayPool\u003cbyte\u003e.Shared.Rent(size);\r\ntry\r\n{\r\n    MemoryMarshal.Cast\u003cbyte, MyTinyStruct\u003e(array).SetCurrentGameState();\r\n    // may prefix with a ReadOnlyMemory\u003cbyte\u003e of a WebTransport session ID into a ReadOnlySequence\u003cbyte\u003e\r\n    connection.SendDatagram(new ReadOnlyMemory\u003cbyte\u003e(array, 0, size), new()\r\n    {\r\n        StateChanged = (state, isFinal) =\u003e\r\n        {\r\n            if (isFinal)\r\n            {\r\n                tcs.TrySetResult();\r\n            }\r\n            Console.WriteLine(state);\r\n        };\r\n    });\r\n    await tcs.Task; // wait until it is safe to return the array back to the pool\r\n}\r\ncatch when (size \u003e connection.DatagramMaxSendLength)\r\n{\r\n    Console.Error.WriteLine(\"Datagram max send length reduced, sending canceled.\")\r\n}\r\ncatch (Exception ex)\r\n{\r\n    Console.Error.WriteLine(ex);\r\n}\r\nfinally\r\n{\r\n    ArrayPool\u003cbyte\u003e.Shared.Return(array);\r\n}\r\n```\r\n\r\n## Alternative Designs\r\n\r\nReceiving datagram buffers with a channel (similar to the stream API) was considered, but the MsQuic datagram buffer is merely a pointer to the underlying UDP buffer such that the buffer content is only available during the event callback. Async handler implies unnecessary cloning of possibly a thousand bytes and increase GC pressure for every single datagram received.\r\n\r\nSending with a readonly span was considered for `stackalloc`ed buffer, but MsQuic needs to hold on to the memory until the datagram send state becomes final.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOulN6LA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjIyNDI0Mw==",
                                           "createdAt":  "2021-06-01T15:35:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-06-01T15:35:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjIyNzY4Ng==",
                                           "createdAt":  "2021-06-01T15:39:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "@karelz seems the bot has trouble adding `area-System.Net.Quic`",
                                           "updatedAt":  "2021-06-01T15:39:22Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjI0MDQxNw==",
                                           "createdAt":  "2021-06-01T15:56:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n## Background and Motivation\r\n\r\nQUIC is finally a proposed standard in RFC, with HTTP/3 and WebTransport on the way.\r\nTo prepare for WebTransport and other use cases, such as unreliable message delivery in SignalR, .NET should implement QUIC datagram API, as msquic already supports it, to enable higher-level APIs such as WebTransport.\r\nUntil WebTransport is standardized, it may be used today to stream real-time game state and ultra low-latency voice data where dropped packets should not be retransmitted. Once this is done, SignalR may support new fetures.\r\n\r\n## Proposed API\r\n\r\n```diff\r\nnamespace System.Net.Quic\r\n{\r\n    public class QuicClientConnectionOptions\r\n    {\r\n+        public bool DatagramReceiveEnabled { get { } set { } }\r\n    }\r\n+    public delegate void QuicDatagramReceivedEventHandler(object sender, ReadOnlySpan\u003cbyte\u003e buffer);\r\n    public class QuicConnection\r\n    {\r\n+        public bool DatagramReceivedEnabled { get { } set { } }\r\n+        public bool DatagramSendEnabled { get { } set { } }\r\n+        public ushort DatagramMaxSendLength { get { } }\r\n+        public event QuicDatagramReceivedEventHandler? DatagramReceived { add { } remove { } }\r\n+        public ValueTask\u003cbool\u003e SendDatagramAsync(ReadOnlyMemory\u003cbyte\u003e buffer, bool priority = false) { }\r\n    }\r\n    public class QuicListenerOptions\r\n    {\r\n+        public bool DatagramReceiveEnabled { get { } set { } }\r\n    }\r\n}\r\n```\r\nSee https://github.com/wegylexy/runtime/pull/1 for implementation with msquic (tested with v1.3.0).\r\n\r\n## Usage Examples\r\n\r\n``` C#\r\n// receive\r\nconnection.DatagramReceived += (sender, buffer) =\u003e\r\n{\r\n    // Parse the readonly span synchronously, without copying all the bytes, into an async task\r\n    MyAsyncChannel.Writer.TryWrite(MyZeroCopyHandler.HandleAsync(buffer));\r\n}\r\n// send\r\nvar array = ArrayPool\u003cbyte\u003e.Shared.Rent(Unsafe.SizeOf\u003cMyTinyStruct\u003e());\r\ntry\r\n{\r\n    MemoryMarshal.Cast\u003cbyte, MyTinyStruct\u003e(array).SetCurrentGameState();\r\n    await connection.SendDatagramAsync(array);\r\n}\r\nfinally\r\n{\r\n    ArrayPool\u003cbyte\u003e.Shared.Return(array);\r\n}\r\n```\r\n\r\n## Alternative Designs\r\n\r\nReceiving datagram buffers with a channel (similar to the stream API) was considered, but the msquic datagram buffer is merely a pointer to the underlying UDP buffer such that the buffer content is only available during the event callback. Async handler implies unnecessary cloning of possibly a thousand bytes and increase GC pressure for every single datagram received.\r\n\r\nSending with a readonly span was considered for `stackalloc`ed buffer, but msquic needs to hold on to the memory beyond the scope of the method.\r\n\r\nSending returns a bool to indicate whether the datagram is acknowledged without spurious loss, or throws when discarded/cancelled. Additional API may be added to handle suspected loss.\r\n\r\n## Risks\r\n\r\n`SendDatagramAsync()` could return something better than a simple `bool` when the task completes.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ewegylexy\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net.Quic`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-06-01T15:56:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjQzMzQwNA==",
                                           "createdAt":  "2021-06-01T20:45:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThadHouse",
                                           "body":  "One thing to note about the msquic side of this API is that DatagramMaxSendLength can dynamically change over the course of a connection. It currently can\u0027t go down (Although in the future that might change) but it can go up after the connection has been started. Just something to note.",
                                           "updatedAt":  "2021-06-01T20:45:21Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjUwNzMyMQ==",
                                           "createdAt":  "2021-06-01T22:14:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "@ThadHouse If notification is needed, could implement `INotifyPropertyChanged`. Otherwise, the getter could be invoked right before filling in the buffer to determine the current max.\r\nSee also [line 327](https://github.com/wegylexy/runtime/pull/1/files#diff-6b1b09f9599d7fce2389d0218dd65b7679d5290d6b87000ada08ee10e67cf072R327) where the msquic datagram-state-changed event handler updates exactly this property.",
                                           "updatedAt":  "2021-06-01T22:14:57Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjUxMzE2MA==",
                                           "createdAt":  "2021-06-01T22:17:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ThadHouse",
                                           "body":  "I know theres a general rule to not have properties update without user interaction, which is the main reason I brought it up. Not a bug in the implementation, just a note.",
                                           "updatedAt":  "2021-06-01T22:17:52Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1MjUzMDkyNA==",
                                           "createdAt":  "2021-06-01T22:37:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "Besides, `Connected` (in the current API) and `DatagramSendEnabled` (in the proposed API) may also update without user interaction, due to peer or transport.",
                                           "updatedAt":  "2021-06-01T22:37:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44wCd2",
                                           "createdAt":  "2021-10-26T16:38:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We will wait for RFC to be finalized (it is not yet to our best knowledge) and for having customer demand. Likely not in 7.0 - perhaps only as preview.\r\n\r\n@nibanks do you have insights from MsQuic view point on the RFC / customer demand?",
                                           "updatedAt":  "2021-10-26T16:39:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44wExZ",
                                           "createdAt":  "2021-10-26T16:50:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nibanks",
                                           "body":  "I expect the datagram spec to be RFC by the time 7.0 is released. I have also had a significant number of folks both internal and external, interested in datagram support; but I don\u0027t know how many would be using .NET. IMO, I would try really hard to get datagram supported in 7.0.",
                                           "updatedAt":  "2021-10-26T16:50:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44wHRp",
                                           "createdAt":  "2021-10-26T17:04:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "I\u0027m using my fork of .NET 6 with msquic 1.8 for datagram.",
                                           "updatedAt":  "2021-10-26T17:04:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45GMkH",
                                           "createdAt":  "2021-11-02T16:35:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Unless the RFC lands by March or earlier, we won\u0027t be able to react in time based on this year experience.\r\n\r\n@wegylexy would you be interested in doing a prototype of the API as mentioned above? (Or we could run it by our API review when it is reasonably close to final shape) ... we might not be ready for that right now, but in couple of months it should be feasible from our side.",
                                           "updatedAt":  "2021-11-02T16:35:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc45I8ry",
                                           "createdAt":  "2021-11-03T04:25:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "@karelz [wegylexy/runtime/.../feature/msquic-datagram](https://github.com/wegylexy/runtime/tree/feature/msquic-datagram) is a prototype, forked from a .NET 6 preview when `System.Net.Quic` was still `public`.",
                                           "updatedAt":  "2021-11-03T04:25:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49DETg",
                                           "createdAt":  "2022-01-28T13:16:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "HTTP/3 WebTransport will need HTTP Datagram which requires QUIC Datagram.",
                                           "updatedAt":  "2022-01-28T13:16:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc49oyk1",
                                           "createdAt":  "2022-02-09T19:11:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "Alternative design: https://github.com/StirlingLabs/MsQuic.Net/blob/main/StirlingLabs.MsQuic/QuicDatagram.cs",
                                           "updatedAt":  "2022-02-09T19:11:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-vMZp",
                                           "createdAt":  "2022-02-26T20:18:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "Updated to use `ReadOnlySequence\u003cbyte\u003e` to enable zero-copy prefixing the datagram payload with a WebTransport session ID, which is another `ReadOnlyMemory\u003cbyte\u003e` of 1-8 bytes.\r\n\r\nA prototype is available at https://github.com/wegylexy/quic-with-datagram and a simple WebTransport server prototype on top of that is coming soon.",
                                           "updatedAt":  "2022-02-26T20:19:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-z0Ok",
                                           "createdAt":  "2022-02-28T01:30:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "WebTransport server prototype: https://github.com/wegylexy/webtransport",
                                           "updatedAt":  "2022-02-28T01:30:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AtBnR",
                                           "createdAt":  "2022-04-01T07:47:46Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEF6WHg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "wegylexy",
                                                                               "createdAt":  "2022-04-01T08:29:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "samsosa",
                                                                               "createdAt":  "2022-04-01T09:11:51Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "nibanks",
                                                                               "createdAt":  "2022-04-01T12:16:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "mclayton7",
                                                                               "createdAt":  "2022-04-03T19:31:07Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "mclayton7",
                                                                               "createdAt":  "2022-04-03T19:31:08Z"
                                                                           },
                                                                           {
                                                                               "content":  "ROCKET",
                                                                               "user":  "wegylexy",
                                                                               "createdAt":  "2022-04-21T04:04:20Z"
                                                                           },
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "Kation",
                                                                               "createdAt":  "2025-02-11T03:37:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Since the QUIC Datagram extension (https://datatracker.ietf.org/doc/rfc9221/) has been officially released as RFC, is it worth trying to get it in for 7.0? @karelz ",
                                           "updatedAt":  "2022-04-01T07:47:46Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5AuGdf",
                                           "createdAt":  "2022-04-01T12:17:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCmIpZQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mclayton7",
                                                                               "createdAt":  "2022-04-03T19:32:28Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wegylexy",
                                                                               "createdAt":  "2022-04-21T04:04:24Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "Khitiara",
                                                                               "createdAt":  "2022-07-11T22:13:17Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "nibanks",
                                           "body":  "Big +1 to exposing the datagram APIs in .NET. I\u0027d love to see that happen in 7.0. Let me know if you need any help from the MsQuic side.",
                                           "updatedAt":  "2022-04-01T12:17:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5B8uZV",
                                           "createdAt":  "2022-04-22T11:51:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCtmrow==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "wegylexy",
                                                                               "createdAt":  "2022-04-22T12:01:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "TheDeadCode",
                                                                               "createdAt":  "2022-10-11T01:15:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "karelz",
                                           "body":  "Given the load on the team and our capacity, I don\u0027t think we will be able to do anything meaningful in 7.0.",
                                           "updatedAt":  "2022-04-22T11:51:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JcMAy",
                                           "createdAt":  "2022-08-30T20:20:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Some interesting pieces from the RFC to consider during design:\r\n\r\n\u003e    Application protocols that use datagrams MUST define how they react\r\n   to the absence of the max_datagram_frame_size transport parameter.\r\n   If datagram support is integral to the application, the application\r\n   protocol can fail the handshake if the max_datagram_frame_size\r\n   transport parameter is not present.\r\n\r\n=\u003e We need to allow user code to decide whether the connection is aborted when Datagram support is absent\r\n\r\n\u003e   Note that while the max_datagram_frame_size transport parameter\r\n   places a limit on the maximum size of DATAGRAM frames, that limit can\r\n   be further reduced by the max_udp_payload_size transport parameter\r\n   and the Maximum Transmission Unit (MTU) of the path between\r\n   endpoints.  DATAGRAM frames cannot be fragmented; therefore,\r\n   application protocols need to handle cases where the maximum datagram\r\n   size is limited by other factors.\r\n\r\nThis is probably what ThadHouse meant when he said that the maximum datagram send size can change during the lifetime of the connection. \r\n\r\n\u003e    QUIC implementations SHOULD present an API to applications to assign\r\n   relative priorities to DATAGRAM frames with respect to each other and\r\n   to QUIC streams.\r\n\r\nSo far we don\u0027t have any way to express prioritization of QuicStreams, so not sure how we would fit Datagrams in the scheme. @nibanks does MsQuic support stream/datagram prioritization?\r\n\r\n\u003e If a sender detects that a packet containing a specific DATAGRAM\r\n   frame might have been lost, the implementation MAY notify the\r\n   application that it believes the datagram was lost.\r\n\u003e\r\n\u003e    Similarly, if a packet containing a DATAGRAM frame is acknowledged,\r\n   the implementation MAY notify the sender application that the\r\n   datagram was successfully transmitted and received.  Due to\r\n   reordering, this can include a DATAGRAM frame that was thought to be\r\n   lost but, at a later point, was received and acknowledged. \r\n\r\nPutting here just to note that notifying user about datagram loss is not strictly required by the RFC.\r\n\r\n",
                                           "updatedAt":  "2022-08-30T20:20:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Je0BF",
                                           "createdAt":  "2022-08-31T11:29:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCrccVA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2022-08-31T12:39:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "nibanks",
                                           "body":  "\u003e  We need to allow user code to decide whether the connection is aborted when Datagram support is absent\r\n\r\nWe have the `QUIC_CONNECTION_EVENT_DATAGRAM_STATE_CHANGED` notification that informs you if it\u0027s enabled or disabled.\r\n\r\n\u003e This is probably what ThadHouse meant when he said that the maximum datagram send size can change during the lifetime of the connection.\r\n\r\nCorrect. `QUIC_CONNECTION_EVENT_DATAGRAM_STATE_CHANGED` also informs you of the `MaxSendLength`.\r\n\r\n\u003e So far we don\u0027t have any way to express prioritization of QuicStreams, so not sure how we would fit Datagrams in the scheme. @nibanks does MsQuic support stream/datagram prioritization?\r\n\r\nFor Streams, we have `QUIC_PARAM_STREAM_PRIORITY` which is just a `uint16_t` used to prioritize across streams. Currently, datagrams are always prioritized higher than streams.\r\n\r\n\u003e Putting here just to note that notifying user about datagram loss is not strictly required by the RFC.\r\n\r\nWe already have a notification for indicating loss, as a part of `QUIC_CONNECTION_EVENT_DATAGRAM_SEND_STATE_CHANGED`. It indicates:\r\n```c\r\ntypedef enum QUIC_DATAGRAM_SEND_STATE {\r\n    QUIC_DATAGRAM_SEND_UNKNOWN,                         // Not yet sent.\r\n    QUIC_DATAGRAM_SEND_SENT,                            // Sent and awaiting acknowledegment\r\n    QUIC_DATAGRAM_SEND_LOST_SUSPECT,                    // Suspected as lost, but still tracked\r\n    QUIC_DATAGRAM_SEND_LOST_DISCARDED,                  // Lost and not longer being tracked\r\n    QUIC_DATAGRAM_SEND_ACKNOWLEDGED,                    // Acknowledged\r\n    QUIC_DATAGRAM_SEND_ACKNOWLEDGED_SPURIOUS,           // Acknowledged after being suspected lost\r\n    QUIC_DATAGRAM_SEND_CANCELED,                        // Canceled before send\r\n} QUIC_DATAGRAM_SEND_STATE;\r\n```",
                                           "updatedAt":  "2022-08-31T11:29:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Je2SX",
                                           "createdAt":  "2022-08-31T11:39:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "\u003e We need to allow user code to decide whether the connection is aborted when Datagram support is absent\r\n\r\nhttps://github.com/wegylexy/runtime/blob/6abc64405576ba8b740ea1ca7ec9109b956b9455/src/libraries/System.Net.Quic/src/System/Net/Quic/Implementations/MsQuic/MsQuicConnection.cs#L949-L959\r\n\r\n\u003e This is probably what ThadHouse meant when he said that the maximum datagram send size can change during the lifetime of the connection.\r\n\r\nhttps://github.com/wegylexy/runtime/blob/6abc64405576ba8b740ea1ca7ec9109b956b9455/src/libraries/System.Net.Quic/src/System/Net/Quic/Implementations/MsQuic/MsQuicConnection.cs#L512-L516\r\n\r\n\u003e does MsQuic support stream/datagram prioritization?\r\n\r\nhttps://github.com/wegylexy/runtime/blob/6abc64405576ba8b740ea1ca7ec9109b956b9455/src/libraries/System.Net.Quic/src/System/Net/Quic/Implementations/MsQuic/MsQuicConnection.cs#L969-L986\r\n\r\n\u003e notifying user about datagram loss\r\n\r\nhttps://github.com/wegylexy/runtime/blob/6abc64405576ba8b740ea1ca7ec9109b956b9455/src/libraries/System.Net.Quic/src/System/Net/Quic/Implementations/MsQuic/MsQuicConnection.cs#L997",
                                           "updatedAt":  "2022-08-31T11:39:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OZAOb",
                                           "createdAt":  "2022-11-15T11:28:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "Rebased my sample implementation onto .NET 7.0 https://github.com/wegylexy/runtime/commit/d4abf8e8fa0d09520d3d5651c41582c585673248",
                                           "updatedAt":  "2022-11-15T11:28:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5OZHFs",
                                           "createdAt":  "2022-11-15T11:55:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCvnQow==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TechPizzaDev",
                                                                               "createdAt":  "2022-11-15T12:20:54Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "antonfirsov",
                                                                               "createdAt":  "2022-11-15T13:26:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e ```diff\r\n\u003e +        public System.Threading.Tasks.Task\u003cQuicDatagramSendingResult\u003e SendDatagramAsync(ReadOnlyMemory\u003cbyte\u003e buffer, bool priority = false) { throw null; }\r\n\u003e +        public System.Threading.Tasks.Task\u003cQuicDatagramSendingResult\u003e SendDatagramAsync(System.Buffers.ReadOnlySequence\u003cbyte\u003e buffers, bool priority = false) { throw null; }\r\n\u003e ```\r\n\r\nThe allocations implied by these APIs seem likely to be unacceptable to a lot of potential users. The `QuicDatagramSendingResult` class instance (and the tasks on it) should probably only be allocated if the user opts into doing so for a given call.",
                                           "updatedAt":  "2022-11-15T13:43:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5dLpeR",
                                           "createdAt":  "2023-05-25T18:31:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "How about this?\r\n```cs\r\npublic class DatagramSendOptions\r\n{\r\n    bool Priority { get { throw null; } set { } }\r\n    Action? Sent { get { throw null; } set { } }\r\n    Action? LostSuspect { get { throw null; } set { } }\r\n    Action? Lost { get { throw null; } set { } }\r\n    Action? Acknowledged { get { throw null; } set { } }\r\n}\r\n\r\npublic Task SendDatagramAsync(ReadOnlyMemory\u003cbyte\u003e buffer, DatagramSendOptions options = null);\r\npublic Task SendDatagramAsync(ReadOnlySequence\u003cbyte\u003e buffer, DatagramSendOptions options = null);\r\n```\r\nWhen the task completes, it will be safe to release the buffer.",
                                           "updatedAt":  "2023-05-25T18:31:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h6jgR",
                                           "createdAt":  "2023-07-19T20:51:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "Edited proposed API just now to eliminate Task allocations for sending a datagram.\r\nSee https://github.com/dotnet/runtime/compare/main...wegylexy:runtime:feature/msquic-datagram#diff-a9b6f4bb4f623894b968d15166375e929e14716f6910febcadd9a13e20a15b46R653-R740",
                                           "updatedAt":  "2023-07-19T21:27:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mE-Rp",
                                           "createdAt":  "2023-09-09T19:03:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "safetonet-github",
                                           "body":  "Can anyone review the above for integration and give any feedback? I have significant interest in this and am willing to help. It looks like @wegylexy has done significant work and presently this appears to be on a \"sometime in the future\" milestone. Seems like an easy integration with high value for next release.",
                                           "updatedAt":  "2023-09-09T19:03:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5mJni5",
                                           "createdAt":  "2023-09-11T12:39:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEL9T3g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "omariom",
                                                                               "createdAt":  "2023-09-17T00:07:42Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "TechnikEmpire",
                                                                               "createdAt":  "2023-10-11T22:32:22Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "nxrighthere",
                                                                               "createdAt":  "2023-12-22T12:47:40Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "NathanNZ",
                                                                               "createdAt":  "2025-03-28T22:20:48Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  4
                                                         },
                                           "author":  "rzikm",
                                           "body":  "I don\u0027t speak for the whole networking team, but I am interested in this feature as well. We really wanted to take this in 8.0, but we were a bit short-staffed and had to cut some features. We will probably have enough bandwidth to work on this in 9.0 timeframe.",
                                           "updatedAt":  "2023-09-11T12:39:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5oobgs",
                                           "createdAt":  "2023-10-10T13:27:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Related: https://github.com/microsoft/msquic/issues/3906",
                                           "updatedAt":  "2023-10-10T13:27:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6d96EO",
                                           "createdAt":  "2025-02-11T09:29:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kation",
                                           "body":  "Still no due date?",
                                           "updatedAt":  "2025-02-11T09:29:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eHt00",
                                           "createdAt":  "2025-02-12T06:59:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEGEsYQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "Kation",
                                                                               "createdAt":  "2025-02-12T07:01:05Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2025-02-12T08:08:35Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "I guess I\u0027m switching over to Rust from .NET then.",
                                           "updatedAt":  "2025-02-12T06:59:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eKlKb",
                                           "createdAt":  "2025-02-12T12:28:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nibanks",
                                           "body":  "@wegylexy I\u0027m curious what your use case for datagrams are. Since we added them at the msquic layer, I\u0027ve come to the conclusion that Streams are still better in most cases. Many times, stuff you want to send unreliable is still bigger than MTU. So, if you use streams, but then abort them before they retransmit (we added a feature for this in msquic), then you effectively get datagram behavior with segmentation/reassembly. At least in MsQuic, streams are very light weight...",
                                           "updatedAt":  "2025-02-12T12:28:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eMTP_",
                                           "createdAt":  "2025-02-12T15:16:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "@nibanks For very high frequency aircraft position updates between Microsoft Flight Simulator and some other simulators, each datagram carries latitude, longitude, altitude, and some animation data at slightly lower frequency. Usually smaller than a hundred bytes, well below MTU. Push-to-talk voice communication is over reliable streams with high priority, and text messages low priority. The most complex part is that data are routed based on spatial proximity inside the virtual world instead of physical real world, so .NET garbage collection was nice that I didn\u0027t have to deal with memory management in C++ (in case of using MsQuic directly), but now Rust is growing fast. It would be easier for us to go that way rather than waiting for NativeAOT to integrate with native clients. Moreover, many users refuse to upgrade from Windows 10, but .NET QUIC checks OS version; too many hacks for us to get things installed.",
                                           "updatedAt":  "2025-02-12T15:16:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eMd2u",
                                           "createdAt":  "2025-02-12T15:31:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nibanks",
                                           "body":  "\u003e now Rust is growing fast\n\nCould you clarify this? Are you referring to the work on the MsQuic Rust crate, or some other Rust QUIC crate?",
                                           "updatedAt":  "2025-02-12T15:31:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6eM1I2",
                                           "createdAt":  "2025-02-12T16:03:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wegylexy",
                                           "body":  "\u003e \u003e now Rust is growing fast\n\u003e \n\u003e Could you clarify this? Are you referring to the work on the MsQuic Rust crate, or some other Rust QUIC crate?\n\nOops, sorry. I\u0027m referring to the crate [wtransport](https://github.com/wegylexy/wtransport/tree/patch-1) which handles all the H3 stuff. Moving up from low-level QUIC to WebTransport, so we can create web clients in JavaScript too.",
                                           "updatedAt":  "2025-02-12T16:03:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66Tu99",
                                           "createdAt":  "2025-07-28T06:34:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "neuecc",
                                           "body":  "I\u0027m interested in using this for games.\nIn games, we traditionally use UDP-based protocols to continuously send small data like coordinates.\nWe already have deployed a game communication framework that works with gRPC - HTTP/2 - TCP,\nbut we want to update the protocol using QUIC and add an option for no retransmission.\n\nCan we build an API that correctly and efficiently handles operations like `abort them before they retransmit` in the C# API layer, regardless of the primitive MsQuic layer...?\nOtherwise, I think Datagram would have simpler behavior.\n\nIn any case, .NET 10 is coming soon.\nI\u0027d like to know the plans.",
                                           "updatedAt":  "2025-07-28T06:34:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc66U3os",
                                           "createdAt":  "2025-07-28T08:05:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "\u003e In any case, .NET 10 is coming soon.\n\nWe\u0027re already past feature complete, so no new features / APIs for .NET 10.",
                                           "updatedAt":  "2025-07-28T08:05:01Z"
                                       }
                                   ],
                         "totalCount":  37
                     },
        "title":  "QUIC Datagram API",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/55352",
        "createdAt":  "2021-07-08T17:23:59Z",
        "number":  55352,
        "author":  "ManickaP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-28T13:42:05Z",
        "body":  "We should consider creating set of QUIC specific stress tests, apart from HTTP stress tests.\r\nWe should take into consideration creating generic `Stream` stress tests, which could be than leveraged by `SslStream`, `NetworkStream`, `QuicStream` etc.\r\n\r\nSpin off #40389",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHONEAP6w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3NjYxMzYxMQ==",
                                           "createdAt":  "2021-07-08T17:24:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe should consider creating set of QUIC specific stress tests, apart from HTTP stress tests.\r\nWe should take into consideration creating generic `Stream` stress tests, which could be than leveraged by `SslStream`, `NetworkStream`, `QuicStream` etc.\r\n\r\nSpin off #40389\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eManickaP\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Quic`, `test enhancement`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003eFuture\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-07-08T17:24:34Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[QUIC] Add QUIC specific stress tests",
        "labels":  [
                       "test-enhancement",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60818",
        "createdAt":  "2021-10-25T00:41:21Z",
        "number":  60818,
        "author":  "JamesNK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCAAFmQ==",
                          "nodes":  [
                                        {
                                            "content":  "EYES",
                                            "user":  "halter73",
                                            "createdAt":  "2021-10-27T02:46:52Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2022-06-14T12:16:14Z",
        "body":  "### Background and motivation\r\n\r\nThere is an `QuicConnection.AcceptStreamAsync(CancellationToken)` method for accepting new streams from the peer. The [main HTTP/3 connection logic loop in Kestrel](https://github.com/dotnet/aspnetcore/blob/caf73e22fe580d907924426a2115f0788ed5cf6d/src/Servers/Kestrel/Core/src/Internal/Http3/Http3Connection.cs#L269-L349) has a call to this method.\r\n\r\nMost of the time in an HTTP/3 connection in Kestrel is either waiting on a new stream from the peer (i.e. awaiting `AcceptStreamAsync`) or processing the stream returned from that method. However, occasionally new events are raised that we want the HTTP/3 connection to react to.\r\n\r\nTo keep things simple in Kestrel, we want connection logic to stay on a single thread. That means connection-related events, such as a request to end the connection because the server is shutting down, are processed as part of the main connection loop. To do this we want to stop waiting for `AcceptStreamAsync`, process updates from other events, then resume waiting on `AcceptStreamAsync` (or exit if the event is to shutdown the connection).\r\n\r\nToday we are achieving this design by using a `CancellationTokenSource` and passing the `CancellationToken` to `AcceptStreamAsync`. An event will cancel the token, do processing, then create a new CTS. The problem is this is quite expensive:\r\n\r\n* Every `AcceptStreamAsync` call will be passed a CT that it needs to subscribe and unsubscribe to. This is the hot path for connection processing in Kestrel. Avoiding this overhead to maximize requests per second is desirable.\r\n* Every time there is a new connection event the CTS will be canceled, `AcceptStreamAsync` will throw `OperationAbortedException`, and a new CTS will be recreated. Reducing this overhead isn\u0027t as important because events aren\u0027t common, but it would be nice to avoid throwing exceptions and allocations if possible.\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace System.Net.Quic\r\n{\r\n    public class QuicConnection\r\n    {\r\n        public void CancelPendingAcceptStream();\r\n    }\r\n}\r\n```     \r\nThe method will behave like [PipeReader.CancelPendingRead()](https://docs.microsoft.com/en-us/dotnet/api/system.io.pipelines.pipereader.cancelpendingread?view=dotnet-plat-ext-5.0).\r\n\r\nWhen called, the current (or next) call to AcceptStreamAsync will immediately return null.\r\n\r\n### API Usage\r\n\r\n```C#\r\nvar connection = await GetQuicConnectionAsync();\r\n\r\nvar newStreamTask = connection.AcceptStreamAsync();\r\n\r\nconnection.CancelPendingAcceptStream();\r\n\r\nvar stream = await newStreamTask;\r\n```     \r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOOMIucQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44pnJE",
                                           "createdAt":  "2021-10-25T00:41:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nThere is an `QuicConnection.AcceptStreamAsync(CancellationToken)` method for accepting new streams from the peer. The main HTTP/3 connection logic loop in Kestrel is a loop containing a call to this method.\r\n\r\nMost of the time in an HTTP/3 connection in Kestrel is either waiting on a new stream from the peer (i.e. awaiting AcceptStreamAsync) or processing the stream returned from that method. However, occasionally new events are raised that we want the HTTP/3 connection to react to.\r\n\r\nTo keep things simple in Kestrel, we want connection logic to stay on a single thread. That means connection-related events, such as a request to end the connection because the server is shutting down, are processed as part of the main connection loop. To do this we want to stop waiting for AcceptStreamAsync, process updates from other events, then resume waiting on AcceptStreamAsync (or exit if the event is to shutdown the connection).\r\n\r\nToday we are achieving this design by using a CancellationTokenSource and passing the CancellationToken to AcceptStreamAsync. An event will cancel the token, do processing, then create a new CTS. The problem is this is quite expensive:\r\n\r\n* Every AcceptStreamAsync call will be passed a CT that it needs to subscribe and unsubscribe to. This is the hot path for connection processing in Kestrel. Avoiding this overhead to maximize requests per second is desirable.\r\n* Every time there is a new connection event the CTS will be canceled, AcceptStreamAsync will throw OperationAbortedException, and a new CTS will be recreated. Reducing this overhead isn\u0027t as important because events aren\u0027t common, but it would be nice to avoid throwing exceptions and allocations if possible.\n\n### API Proposal\n\n```C#\r\nnamespace System.Net.Quic\r\n{\r\n    public class QuicConnection\r\n    {\r\n        public void CancelPendingAcceptStream();\r\n    }\r\n}\r\n```     \r\nThe method will behave like [PipeReader.CancelPendingRead()](https://docs.microsoft.com/en-us/dotnet/api/system.io.pipelines.pipereader.cancelpendingread?view=dotnet-plat-ext-5.0).\r\n\r\nWhen called, the current (or next) call to AcceptStreamAsync will immediately return null.\n\n### API Usage\n\n```C#\r\nvar connection = await GetQuicConnectionAsync();\r\n\r\nvar newStreamTask = connection.AcceptStreamAsync();\r\n\r\nconnection.CancelPendingAcceptStream();\r\n\r\nvar stream = await newStreamTask;\r\n```     \r\n\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJamesNK\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net.Http`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-25T00:41:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44pnbk",
                                           "createdAt":  "2021-10-25T00:45:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "cc @Tratcher @davidfowl @adityamandaleeka @wtgodbe ",
                                           "updatedAt":  "2021-10-25T00:45:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44wi5x",
                                           "createdAt":  "2021-10-26T19:33:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nThere is an `QuicConnection.AcceptStreamAsync(CancellationToken)` method for accepting new streams from the peer. The [main HTTP/3 connection logic loop in Kestrel](https://github.com/dotnet/aspnetcore/blob/caf73e22fe580d907924426a2115f0788ed5cf6d/src/Servers/Kestrel/Core/src/Internal/Http3/Http3Connection.cs#L269-L349) has a call to this method.\r\n\r\nMost of the time in an HTTP/3 connection in Kestrel is either waiting on a new stream from the peer (i.e. awaiting `AcceptStreamAsync`) or processing the stream returned from that method. However, occasionally new events are raised that we want the HTTP/3 connection to react to.\r\n\r\nTo keep things simple in Kestrel, we want connection logic to stay on a single thread. That means connection-related events, such as a request to end the connection because the server is shutting down, are processed as part of the main connection loop. To do this we want to stop waiting for `AcceptStreamAsync`, process updates from other events, then resume waiting on `AcceptStreamAsync` (or exit if the event is to shutdown the connection).\r\n\r\nToday we are achieving this design by using a `CancellationTokenSource` and passing the `CancellationToken` to `AcceptStreamAsync`. An event will cancel the token, do processing, then create a new CTS. The problem is this is quite expensive:\r\n\r\n* Every `AcceptStreamAsync` call will be passed a CT that it needs to subscribe and unsubscribe to. This is the hot path for connection processing in Kestrel. Avoiding this overhead to maximize requests per second is desirable.\r\n* Every time there is a new connection event the CTS will be canceled, `AcceptStreamAsync` will throw `OperationAbortedException`, and a new CTS will be recreated. Reducing this overhead isn\u0027t as important because events aren\u0027t common, but it would be nice to avoid throwing exceptions and allocations if possible.\r\n\r\n### API Proposal\r\n\r\n```C#\r\nnamespace System.Net.Quic\r\n{\r\n    public class QuicConnection\r\n    {\r\n        public void CancelPendingAcceptStream();\r\n    }\r\n}\r\n```     \r\nThe method will behave like [PipeReader.CancelPendingRead()](https://docs.microsoft.com/en-us/dotnet/api/system.io.pipelines.pipereader.cancelpendingread?view=dotnet-plat-ext-5.0).\r\n\r\nWhen called, the current (or next) call to AcceptStreamAsync will immediately return null.\r\n\r\n### API Usage\r\n\r\n```C#\r\nvar connection = await GetQuicConnectionAsync();\r\n\r\nvar newStreamTask = connection.AcceptStreamAsync();\r\n\r\nconnection.CancelPendingAcceptStream();\r\n\r\nvar stream = await newStreamTask;\r\n```     \r\n\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJamesNK\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e7.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-26T19:33:09Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: QuicConnection.CancelPendingAcceptStream",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/65439",
        "createdAt":  "2022-02-16T16:16:05Z",
        "number":  65439,
        "author":  "ManickaP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-06-13T09:54:08Z",
        "body":  "https://github.com/microsoft/msquic/issues/1249",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORMRJHg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc4-GSTp",
                                           "createdAt":  "2022-02-16T16:16:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nhttps://github.com/microsoft/msquic/issues/1249\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eManickaP\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-02-16T16:16:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ExEke",
                                           "createdAt":  "2022-06-13T09:54:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: This was broken on Linux prior to 7.0 for SslStream (we called the callback prior to handshake without info about trusted certs from server), we fixed it in 7.0. On Windows we didn\u0027t pass server certificate even on Windows prior to 7.0.\r\nIt is not recommended practice as it leaks some server info pontetially.\r\n\r\nAs a result we will call the callback before handshake via msquic (tracked by #70651) and wait for customers to ask for this feature (and work with msquic on that then).",
                                           "updatedAt":  "2022-06-13T09:54:07Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[QUIC] Missing implementation for `LocalCertificateSelectionCallback`",
        "labels":  [
                       "tracking-external-issue",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/70357",
        "createdAt":  "2022-06-07T14:34:12Z",
        "number":  70357,
        "author":  "rzikm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-07-19T08:01:34Z",
        "body":  "We should check the OS version and throw `PlatformNotSupportedException` when QUIC listener requires client certificates on Windows Server 2022 (with Schannel MsQuic backend) because this combination is not supported. See [#69792](https://github.com/dotnet/runtime/issues/69792#issuecomment-1137464328) for more info.\r\n\r\nAlso related: https://github.com/dotnet/runtime/issues/69978",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHORHiwfQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5EeLB9",
                                           "createdAt":  "2022-06-07T14:34:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nWe should check the OS version and throw `PlatformNotSupportedException` when QUIC listener requires client certificates on Windows Server 2022 (with Schannel MsQuic backend) because this combination is not supported. See #69792 for more info.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erzikm\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-06-07T14:34:18Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[QUIC] Throw if underlying OS does not support client certificates",
        "labels":  [
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71518",
        "createdAt":  "2022-07-01T04:09:11Z",
        "number":  71518,
        "author":  "JamesNK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-22T14:00:57Z",
        "body":  "### Description\r\n\r\nIn .NET 6 I have unit tests that start a Kestrel HTTP/3 endpoint on port 50019. It works fine.\r\n\r\nI updated the unit test to .NET 7 and it now throws QUIC_STATUS_ADDRESS_IN_USE. Why is that? Is it a bug, or intentional behavior? If it\u0027s intentional then there should be documentation about what ports can be used.\r\n\r\n### Reproduction Steps\r\n\r\nSmall modification to the empty ASP.NET Core template to add a H3 port:\r\n\r\n```cs\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.WebHost.ConfigureKestrel(c =\u003e\r\n{\r\n    c.ListenLocalhost(50009, listner =\u003e\r\n    {\r\n        listner.Protocols = Microsoft.AspNetCore.Server.Kestrel.Core.HttpProtocols.Http3;\r\n        listner.UseHttps();\r\n    });\r\n});\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\"/\", () =\u003e \"Hello World!\");\r\n\r\napp.Run();\r\n```\r\n\r\n### Expected behavior\r\n\r\nWorks\r\n\r\n### Actual behavior\r\n\r\n```\r\nSystem.IO.IOException\r\n  HResult=0x80131620\r\n  Message=Failed to bind to address https://localhost:50009.\r\n  Source=Microsoft.AspNetCore.Server.Kestrel.Core\r\n  StackTrace:\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.LocalhostListenOptions.\u003cBindAsync\u003ed__2.MoveNext()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.EndpointsStrategy.\u003cBindAsync\u003ed__2.MoveNext()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.\u003cBindAsync\u003ed__0.MoveNext()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerImpl.\u003cBindAsync\u003ed__33.MoveNext()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerImpl.\u003cStartAsync\u003ed__30`1.MoveNext()\r\n   at Microsoft.AspNetCore.Hosting.GenericWebHostService.\u003cStartAsync\u003ed__37.MoveNext()\r\n   at Microsoft.Extensions.Hosting.Internal.Host.\u003cStartAsync\u003ed__12.MoveNext()\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.\u003cRunAsync\u003ed__4.MoveNext()\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.\u003cRunAsync\u003ed__4.MoveNext()\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(IHost host)\r\n   at Program.\u003cMain\u003e$(String[] args) in C:\\Users\\james\\source\\repos\\WebApplication6\\WebApplication6\\Program.cs:line 14\r\n\r\n  This exception was originally thrown at this call stack:\r\n    Microsoft.Quic.MsQuic.ThrowIfFailure(int, string)\r\n    System.Net.Quic.Implementations.MsQuic.MsQuicListener.Start(System.Net.Quic.QuicListenerOptions)\r\n    System.Net.Quic.Implementations.MsQuic.MsQuicListener.MsQuicListener(System.Net.Quic.QuicListenerOptions)\r\n    System.Net.Quic.QuicListener.ListenAsync(System.Net.Quic.QuicListenerOptions, System.Threading.CancellationToken)\r\n    Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicConnectionListener.CreateListenerAsync()\r\n    Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportFactory.BindAsync(System.Net.EndPoint, Microsoft.AspNetCore.Http.Features.IFeatureCollection, System.Threading.CancellationToken)\r\n    System.Threading.Tasks.ValueTask\u003cTResult\u003e.Result.get()\r\n    Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.TransportManager.BindAsync(System.Net.EndPoint, Microsoft.AspNetCore.Connections.MultiplexedConnectionDelegate, Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions, System.Threading.CancellationToken)\r\n    Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerImpl.StartAsync.__OnBind|0(Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions, System.Threading.CancellationToken)\r\n    Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindEndpointAsync(Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions, Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBindContext, System.Threading.CancellationToken)\r\n    ...\r\n    [Call Stack Truncated]\r\n\r\nInner Exception 1:\r\nAggregateException: One or more errors occurred.\r\n\r\nInner Exception 2:\r\nMsQuicException: ListenerStart failed: QUIC_STATUS_ADDRESS_IN_USE\r\n```\r\n\r\n### Regression?\r\n\r\nYes\r\n\r\n### Known Workarounds\r\n\r\nUse a different port\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXNIiMw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5F2fSv",
                                           "createdAt":  "2022-07-01T04:09:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nIn .NET 6 I have unit tests that start Kestrel on port 50019. I works fine.\r\n\r\nI updated the unit test to .NET 7 and it now throws QUIC_STATUS_ADDRESS_IN_USE. Why is that? Is it a bug, or intentional behavior? If it\u0027s intentional then there should be documentation about what ports can be used.\n\n### Reproduction Steps\n\n```cs\r\nvar builder = WebApplication.CreateBuilder(args);\r\nbuilder.WebHost.ConfigureKestrel(c =\u003e\r\n{\r\n    c.ListenLocalhost(50009, listner =\u003e\r\n    {\r\n        listner.Protocols = Microsoft.AspNetCore.Server.Kestrel.Core.HttpProtocols.Http3;\r\n        listner.UseHttps();\r\n    });\r\n});\r\nvar app = builder.Build();\r\n\r\napp.MapGet(\"/\", () =\u003e \"Hello World!\");\r\n\r\napp.Run();\r\n```\n\n### Expected behavior\n\nWorks\n\n### Actual behavior\n\n```\r\nSystem.IO.IOException\r\n  HResult=0x80131620\r\n  Message=Failed to bind to address https://localhost:50009.\r\n  Source=Microsoft.AspNetCore.Server.Kestrel.Core\r\n  StackTrace:\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.LocalhostListenOptions.\u003cBindAsync\u003ed__2.MoveNext()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.EndpointsStrategy.\u003cBindAsync\u003ed__2.MoveNext()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.\u003cBindAsync\u003ed__0.MoveNext()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerImpl.\u003cBindAsync\u003ed__33.MoveNext()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerImpl.\u003cStartAsync\u003ed__30`1.MoveNext()\r\n   at Microsoft.AspNetCore.Hosting.GenericWebHostService.\u003cStartAsync\u003ed__37.MoveNext()\r\n   at Microsoft.Extensions.Hosting.Internal.Host.\u003cStartAsync\u003ed__12.MoveNext()\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.\u003cRunAsync\u003ed__4.MoveNext()\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.\u003cRunAsync\u003ed__4.MoveNext()\r\n   at Microsoft.Extensions.Hosting.HostingAbstractionsHostExtensions.Run(IHost host)\r\n   at Program.\u003cMain\u003e$(String[] args) in C:\\Users\\james\\source\\repos\\WebApplication6\\WebApplication6\\Program.cs:line 14\r\n\r\n  This exception was originally thrown at this call stack:\r\n    Microsoft.Quic.MsQuic.ThrowIfFailure(int, string)\r\n    System.Net.Quic.Implementations.MsQuic.MsQuicListener.Start(System.Net.Quic.QuicListenerOptions)\r\n    System.Net.Quic.Implementations.MsQuic.MsQuicListener.MsQuicListener(System.Net.Quic.QuicListenerOptions)\r\n    System.Net.Quic.QuicListener.ListenAsync(System.Net.Quic.QuicListenerOptions, System.Threading.CancellationToken)\r\n    Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicConnectionListener.CreateListenerAsync()\r\n    Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.QuicTransportFactory.BindAsync(System.Net.EndPoint, Microsoft.AspNetCore.Http.Features.IFeatureCollection, System.Threading.CancellationToken)\r\n    System.Threading.Tasks.ValueTask\u003cTResult\u003e.Result.get()\r\n    Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Infrastructure.TransportManager.BindAsync(System.Net.EndPoint, Microsoft.AspNetCore.Connections.MultiplexedConnectionDelegate, Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions, System.Threading.CancellationToken)\r\n    Microsoft.AspNetCore.Server.Kestrel.Core.KestrelServerImpl.StartAsync.__OnBind|0(Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions, System.Threading.CancellationToken)\r\n    Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBinder.BindEndpointAsync(Microsoft.AspNetCore.Server.Kestrel.Core.ListenOptions, Microsoft.AspNetCore.Server.Kestrel.Core.Internal.AddressBindContext, System.Threading.CancellationToken)\r\n    ...\r\n    [Call Stack Truncated]\r\n\r\nInner Exception 1:\r\nAggregateException: One or more errors occurred.\r\n\r\nInner Exception 2:\r\nMsQuicException: ListenerStart failed: QUIC_STATUS_ADDRESS_IN_USE\r\n```\n\n### Regression?\n\nYes\n\n### Known Workarounds\n\nUse a different port\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJamesNK\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-01T04:09:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F2gWC",
                                           "createdAt":  "2022-07-01T04:16:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "The fix in my unit test project was to change the port to 55019.\r\n\r\nWhy 55019 works and 50019 now doesn\u0027t.... 🤷‍♂️ ",
                                           "updatedAt":  "2022-07-01T04:51:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F3NtY",
                                           "createdAt":  "2022-07-01T08:48:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "did you try to dump ports using `netstat`? AFAIK this error comes from Kernel. This could be sign of some old process sticking around.  ",
                                           "updatedAt":  "2022-07-01T08:48:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5F3Q6C",
                                           "createdAt":  "2022-07-01T09:02:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "50019 with .NET 6 = works\r\n50019 with .NET 7 = error\r\n\r\nI flipped back and forth a number of times to check that it was changing the .NET version that triggered it and nothing else. And I changed the port to a couple of other similar values, e.g. 50018, before discovering a bigger change like 55019 worked. Perhaps msquic doesn\u0027t allow listening on a range of ports by default?\r\n\r\nI didn\u0027t use netstat.\r\n\r\nThe QUIC_STATUS_ADDRESS_IN_USE error is coming from MsQuicListener. It\u0027s in the stacktrace.\r\n\r\nRepo is available to test. It\u0027s very simple.",
                                           "updatedAt":  "2022-07-01T09:07:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GlMXb",
                                           "createdAt":  "2022-07-14T08:30:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: let\u0027s investigate for 7.0 and root cause this then we can decide what to do about it.",
                                           "updatedAt":  "2022-07-14T08:30:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GnqU_",
                                           "createdAt":  "2022-07-14T19:10:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "This does not look like .NET Runtime bug, the error comes from MsQuic.\r\n\r\nI was able to reproduce this even outside MsQuic using the sample app from https://docs.microsoft.com/en-us/windows/win32/winsock/sio-acquire-port-reservation, the problematic range seems to be ports 50000-50059.\r\n\r\nI filed issue with MsQuic to see if they can do something about it: https://github.com/microsoft/msquic/issues/2891",
                                           "updatedAt":  "2022-07-14T19:10:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gnqp4",
                                           "createdAt":  "2022-07-14T19:11:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "There is something called _Port Exclusion Ranges_ apparently that affects this:\r\n\r\n```\r\n\u003e netsh int ip show excludedportrange protocol=udp\r\n\r\nProtocol udp Port Exclusion Ranges\r\n\r\nStart Port    End Port\r\n----------    --------\r\n     50000       50059     *\r\n     55642       55741\r\n     63552       63651\r\n\r\n* - Administered port exclusions.\r\n```",
                                           "updatedAt":  "2022-07-14T19:11:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HAvmX",
                                           "createdAt":  "2022-07-21T11:37:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Tracking by (internal) OS issue: https://microsoft.visualstudio.com/OS/_workitems/edit/40464377",
                                           "updatedAt":  "2022-07-21T11:37:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hlt4s",
                                           "createdAt":  "2022-08-01T11:22:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: There is nothing we can do. It needs to be address in the OS. Moving to Future for tracking purposes.\r\nIf we see enough customers hitting it, we should document it properly.",
                                           "updatedAt":  "2022-08-01T11:22:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c0iIz",
                                           "createdAt":  "2023-05-22T14:00:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "This is documented in out troubleshooting guide.",
                                           "updatedAt":  "2023-05-22T14:00:57Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "QUIC: Port 50009 throws QUIC_STATUS_ADDRESS_IN_USE",
        "labels":  [
                       "tracking-external-issue",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/71927",
        "createdAt":  "2022-07-11T09:13:01Z",
        "number":  71927,
        "author":  "JamesNK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-09-18T11:59:38Z",
        "body":  "### Description\r\n\r\nI\u0027ve noticed Kestrel sometimes throws an error when handling a gRPC request. See https://github.com/dotnet/aspnetcore/issues/42289\r\n\r\ntldr; the client sent a gRPC request, the server processed it and sent a response, but aborted the connection because the request is hung on WaitForWriteCompletionAsync, and thought the request was still in-progress and exceeded the timeout to drain the request.\r\n\r\nI investigated what is going on and it appears that most of the time in my scenario `QuicStream.WaitForWriteCompletionAsync` never returns. It appears to work reliably if there is a breakpoint before awaiting on a task, but not if there is a breakpoint after awaiting the task.\r\n\r\n### Reproduction Steps\r\n\r\n1. `git clone https://github.com/jamesnk/grpc-dotnet`\r\n2. `git checkout jamesnk/net7`\r\n3. `dotnet run -c Release --project .\\perf\\benchmarkapps\\GrpcAspNetCoreServer\\ -- --LogLevel Trace --protocol h3`\r\n4. `dotnet run -c Release --project .\\perf\\benchmarkapps\\GrpcClient\\ -- -u https://localhost:5000 -c 1 --streams 1 -s unary -p h3 --grpcClientType grpcnetclient --callCount 1`\r\n\r\n### Expected behavior\r\n\r\nClient and server gracefully complete request.\r\n\r\n### Actual behavior\r\n\r\nHalf the time the QuicStream.WaitForWriteCompletionAsync task doesn\u0027t complete. The server aborts the request and the connection because they\u0027re unhealthy.\r\n\r\nLogs of success and failure are below.\r\n\r\nSuccess logs:\r\n\r\n```\r\n23.0973 dbug: Microsoft.AspNetCore.Server.Kestrel.Transport.Quic[2]\r\n      Stream id \"0HMJ31P1V8BHG:00000002\" type Unidirectional accepted.\r\n23.0974 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[46]\r\n      Connection id \"0HMJ31P1V8BHG\" received SETTINGS frame for stream ID 2 with length 5.\r\n23.1109 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#66993893,NativeCallback,[conn][0x29C45A0F6F0] Connection received event PEER_STREAM_STARTED -\u003e\r\n23.1109 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : SafeMsQuicStreamHandle#14836038,.ctor,MsQuicSafeHandle created -\u003e\r\n23.1109 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,.ctor,[strm][0x29C459C94D0] Inbound bidirectional stream created in connection [conn][0x29C45A0F6F0] with StreamId 0. -\u003e\r\n23.1109 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,NativeCallback,[strm][0x29C459C94D0] Stream received event RECEIVE -\u003e\r\n23.1109 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,HandleEventReceive,[strm][0x29C459C94D0] Stream received 256 bytes -\u003e\r\n23.1110 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,ReadAsync,[strm][0x29C459C94D0] Stream reading into Memory of \u00274096\u0027 bytes. -\u003e\r\n23.1110 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,ReadAsync,[strm][0x29C459C94D0] Stream reading into Memory of \u00274096\u0027 bytes. -\u003e\r\n23.1114 dbug: Microsoft.AspNetCore.Server.Kestrel.Transport.Quic[2]\r\n      Stream id \"0HMJ31P1V8BHG:00000000\" type Bidirectional accepted.\r\n23.1117 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[46]\r\n      Connection id \"0HMJ31P1V8BHG\" received HEADERS frame for stream ID 0 with length 251.\r\n23.1117 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,NativeCallback,[strm][0x29C459C94D0] Stream received event RECEIVE -\u003e\r\n23.1117 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,HandleEventReceive,[strm][0x29C459C94D0] Stream received 7 bytes -\u003e\r\n23.1119 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,ReadAsync,[strm][0x29C459C94D0] Stream reading into Memory of \u00274096\u0027 bytes. -\u003e\r\n23.1119 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[46]\r\n      Connection id \"0HMJ31P1V8BHG\" received DATA frame for stream ID 0 with length 7.\r\n23.1121 info: Microsoft.AspNetCore.Hosting.Diagnostics[1]\r\n      Request starting HTTP/3 POST https://localhost:5000/grpc.testing.BenchmarkService/UnaryCall application/grpc -\r\n23.1121 trce: Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware[2]\r\n      All hosts are allowed.\r\n23.1121 dbug: Microsoft.AspNetCore.Routing.Matching.DfaMatcher[1001]\r\n      1 candidate(s) found for the request path \u0027/grpc.testing.BenchmarkService/UnaryCall\u0027\r\n23.1121 dbug: Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware[1]\r\n      Request matched endpoint \u0027gRPC - /grpc.testing.BenchmarkService/UnaryCall\u0027\r\n23.1121 info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]\r\n      Executing endpoint \u0027gRPC - /grpc.testing.BenchmarkService/UnaryCall\u0027\r\n23.1122 dbug: Grpc.AspNetCore.Server.ServerCallHandler[10]\r\n      Reading message.\r\n23.1122 dbug: Microsoft.AspNetCore.Server.Kestrel[25]\r\n      Connection id \"0HMJ31P1V8BHG\", Request id \"0HMJ31P1V8BHG:00000000\": started reading request body.\r\n23.1122 trce: Grpc.AspNetCore.Server.ServerCallHandler[12]\r\n      Deserializing 2 byte message to \u0027Grpc.Testing.SimpleRequest\u0027.\r\n23.1122 trce: Grpc.AspNetCore.Server.ServerCallHandler[13]\r\n      Received message.\r\n23.1129 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,NativeCallback,[strm][0x29C459C94D0] Stream received event RECEIVE -\u003e\r\n23.1129 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,HandleEventReceive,[strm][0x29C459C94D0] Stream received 0 bytes with FIN flag -\u003e\r\n23.1129 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,NativeCallback,[strm][0x29C459C94D0] Stream received event PEER_SEND_SHUTDOWN -\u003e\r\n23.1129 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,HandleEventPeerSendShutdown,[strm][0x29C459C94D0] Stream completing resettable event source. -\u003e\r\n23.1129 dbug: Microsoft.AspNetCore.Server.Kestrel[26]\r\n      Connection id \"0HMJ31P1V8BHG\", Request id \"0HMJ31P1V8BHG:00000000\": done reading request body.\r\n23.1130 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[47]\r\n      Connection id \"0HMJ31P1V8BHG\" sending HEADERS frame for stream ID 0 with length 76.\r\n23.1130 dbug: Grpc.AspNetCore.Server.ServerCallHandler[15]\r\n      Sending message.\r\n23.1130 trce: Grpc.AspNetCore.Server.ServerCallHandler[18]\r\n      Serialized \u0027Grpc.Testing.SimpleResponse\u0027 to 2 byte message.\r\n23.1130 trce: Grpc.AspNetCore.Server.ServerCallHandler[16]\r\n      Message sent.\r\n23.1130 info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]\r\n      Executed endpoint \u0027gRPC - /grpc.testing.BenchmarkService/UnaryCall\u0027\r\n23.1130 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[47]\r\n      Connection id \"0HMJ31P1V8BHG\" sending DATA frame for stream ID 0 with length 7.\r\n23.1131 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,NativeCallback,[strm][0x29C459C94D0] Stream received event SEND_COMPLETE -\u003e\r\n23.1132 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[47]\r\n      Connection id \"0HMJ31P1V8BHG\" sending HEADERS frame for stream ID 0 with length 17.\r\n23.1132 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,NativeCallback,[strm][0x29C459C94D0] Stream received event SEND_COMPLETE -\u003e\r\n23.1133 info: Microsoft.AspNetCore.Hosting.Diagnostics[2]\r\n      Request finished HTTP/3 POST https://localhost:5000/grpc.testing.BenchmarkService/UnaryCall application/grpc - - 200 - application/grpc 1.2488ms\r\n23.1134 dbug: Microsoft.AspNetCore.Server.Kestrel.Transport.Quic[10]\r\n      Stream id \"0HMJ31P1V8BHG:00000000\" shutting down writes because: \"The QUIC transport\u0027s send loop completed gracefully.\".\r\n23.1401 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,NativeCallback,[strm][0x29C459C94D0] Stream received event SEND_SHUTDOWN_COMPLETE -\u003e\r\n23.1401 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,NativeCallback,[strm][0x29C459C94D0] Stream received event SHUTDOWN_COMPLETE -\u003e\r\n23.1401 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,HandleEventShutdownComplete,[strm][0x29C459C94D0] Stream completing resettable event source. -\u003e\r\n23.1402 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,Dispose,[strm][0x29C459C94D0] Stream disposing True -\u003e\r\n23.1403 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,Cleanup,[strm][0x29C459C94D0] releasing handles. -\u003e\r\n23.1403 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : SafeMsQuicStreamHandle#14836038,ReleaseHandle,MsQuicSafeHandle released -\u003e\r\n23.1403 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,Dispose,[strm][0x29C459C94D0] Stream disposed -\u003e\r\n```\r\n\r\nFailure logs:\r\n\r\n```\r\n43.0608 dbug: Microsoft.AspNetCore.Server.Kestrel.Transport.Quic[2]\r\n      Stream id \"0HMJ31P1V8BHF:00000000\" type Bidirectional accepted.\r\n43.0610 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[46]\r\n      Connection id \"0HMJ31P1V8BHF\" received HEADERS frame for stream ID 0 with length 251.\r\n43.0611 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,NativeCallback,[strm][0x29C459C9A70] Stream received event RECEIVE -\u003e\r\n43.0612 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,HandleEventReceive,[strm][0x29C459C9A70] Stream received 7 bytes -\u003e\r\n43.0613 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,ReadAsync,[strm][0x29C459C9A70] Stream reading into Memory of \u00274096\u0027 bytes. -\u003e\r\n43.0613 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[46]\r\n      Connection id \"0HMJ31P1V8BHF\" received DATA frame for stream ID 0 with length 7.\r\n43.0614 info: Microsoft.AspNetCore.Hosting.Diagnostics[1]\r\n      Request starting HTTP/3 POST https://localhost:5000/grpc.testing.BenchmarkService/UnaryCall application/grpc -\r\n43.0614 trce: Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware[2]\r\n      All hosts are allowed.\r\n43.0615 dbug: Microsoft.AspNetCore.Routing.Matching.DfaMatcher[1001]\r\n      1 candidate(s) found for the request path \u0027/grpc.testing.BenchmarkService/UnaryCall\u0027\r\n43.0615 dbug: Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware[1]\r\n      Request matched endpoint \u0027gRPC - /grpc.testing.BenchmarkService/UnaryCall\u0027\r\n43.0615 info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]\r\n      Executing endpoint \u0027gRPC - /grpc.testing.BenchmarkService/UnaryCall\u0027\r\n43.0615 dbug: Grpc.AspNetCore.Server.ServerCallHandler[10]\r\n      Reading message.\r\n43.0615 dbug: Microsoft.AspNetCore.Server.Kestrel[25]\r\n      Connection id \"0HMJ31P1V8BHF\", Request id \"0HMJ31P1V8BHF:00000000\": started reading request body.\r\n43.0615 trce: Grpc.AspNetCore.Server.ServerCallHandler[12]\r\n      Deserializing 2 byte message to \u0027Grpc.Testing.SimpleRequest\u0027.\r\n43.0615 trce: Grpc.AspNetCore.Server.ServerCallHandler[13]\r\n      Received message.\r\n43.0624 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,NativeCallback,[strm][0x29C459C9A70] Stream received event RECEIVE -\u003e\r\n43.0624 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,HandleEventReceive,[strm][0x29C459C9A70] Stream received 0 bytes with FIN flag -\u003e\r\n43.0624 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,NativeCallback,[strm][0x29C459C9A70] Stream received event PEER_SEND_SHUTDOWN -\u003e\r\n43.0624 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,HandleEventPeerSendShutdown,[strm][0x29C459C9A70] Stream completing resettable event source. -\u003e\r\n43.0625 dbug: Microsoft.AspNetCore.Server.Kestrel[26]\r\n      Connection id \"0HMJ31P1V8BHF\", Request id \"0HMJ31P1V8BHF:00000000\": done reading request body.\r\n43.0625 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[47]\r\n      Connection id \"0HMJ31P1V8BHF\" sending HEADERS frame for stream ID 0 with length 76.\r\n43.0625 dbug: Grpc.AspNetCore.Server.ServerCallHandler[15]\r\n      Sending message.\r\n43.0626 trce: Grpc.AspNetCore.Server.ServerCallHandler[18]\r\n      Serialized \u0027Grpc.Testing.SimpleResponse\u0027 to 2 byte message.\r\n43.0626 trce: Grpc.AspNetCore.Server.ServerCallHandler[16]\r\n      Message sent.\r\n43.0626 info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]\r\n      Executed endpoint \u0027gRPC - /grpc.testing.BenchmarkService/UnaryCall\u0027\r\n43.0626 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[47]\r\n      Connection id \"0HMJ31P1V8BHF\" sending DATA frame for stream ID 0 with length 7.\r\n43.0627 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,NativeCallback,[strm][0x29C459C9A70] Stream received event SEND_COMPLETE -\u003e\r\n43.0627 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[47]\r\n      Connection id \"0HMJ31P1V8BHF\" sending HEADERS frame for stream ID 0 with length 17.\r\n43.0628 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,NativeCallback,[strm][0x29C459C9A70] Stream received event SEND_COMPLETE -\u003e\r\n43.0628 info: Microsoft.AspNetCore.Hosting.Diagnostics[2]\r\n      Request finished HTTP/3 POST https://localhost:5000/grpc.testing.BenchmarkService/UnaryCall application/grpc - - 200 - application/grpc 1.3970ms\r\n43.0629 dbug: Microsoft.AspNetCore.Server.Kestrel.Transport.Quic[10]\r\n      Stream id \"0HMJ31P1V8BHF:00000000\" shutting down writes because: \"The QUIC transport\u0027s send loop completed gracefully.\".\r\n```\r\n\r\nThe request then hangs, waiting on the task that doesn\u0027t complete. After 5 seconds Kestrel aborts the connection which calls QuicConnection.CloseAsync which unsticks `WaitForWriteCompletionAsync` and the task completes.\r\n\r\nLogs after abort:\r\n\r\n```\r\n02.0392 dbug: Microsoft.AspNetCore.Server.Kestrel.BadRequests[28]\r\n      Connection id \"0HMJ330OH884L\", Request id \"0HMJ330OH884L:00000000\": the connection was closed because the response was not read by the client at the specified minimum data rate.\r\n06.7638 dbug: Microsoft.AspNetCore.Server.Kestrel.Http3[53]\r\n      Connection id \"0HMJ330OH884L\": GOAWAY stream ID 4.\r\n06.7638 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[47]\r\n      Connection id \"0HMJ330OH884L\" sending GOAWAY frame for stream ID 3 with length 1.\r\n06.7639 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#16104161,NativeCallback,[strm][0x294D85D0760] Stream received event SEND_COMPLETE -\u003e\r\n06.7639 dbug: Microsoft.AspNetCore.Server.Kestrel.Transport.Quic[6]\r\n      Connection id \"0HMJ330OH884L\" aborted by application with error code 258 because: \"The connection was timed out by the server because the response was not read by the client at the specified minimum data rate.\".\r\n06.7640 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#33397131,NativeCallback,[strm][0x294D85D1840] Stream received event SEND_SHUTDOWN_COMPLETE -\u003e\r\n06.7640 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#33397131,NativeCallback,[strm][0x294D85D1840] Stream received event SHUTDOWN_COMPLETE -\u003e\r\n06.7640 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#33397131,HandleEventConnectionClose,[strm][0x294D85D1840] Stream handling connection [conn][0x294D8698DD0] close -\u003e\r\n06.7647 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#31139921,NativeCallback,[strm][0x294D85D0A30] Stream received event SHUTDOWN_COMPLETE -\u003e\r\n06.7647 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#31139921,HandleEventConnectionClose,[strm][0x294D85D0A30] Stream handling connection [conn][0x294D8698DD0] close -\u003e\r\n06.7657 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#16104161,NativeCallback,[strm][0x294D85D0760] Stream received event SEND_SHUTDOWN_COMPLETE -\u003e\r\n06.7657 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#16104161,NativeCallback,[strm][0x294D85D0760] Stream received event SHUTDOWN_COMPLETE -\u003e\r\n06.7657 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#16104161,HandleEventConnectionClose,[strm][0x294D85D0760] Stream handling connection [conn][0x294D8698DD0] close -\u003e\r\n06.7822 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#33397131,Dispose,[strm][0x294D85D1840] Stream disposing True -\u003e\r\n06.7822 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#33397131,Cleanup,[strm][0x294D85D1840] releasing handles. -\u003e\r\n06.7822 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : SafeMsQuicStreamHandle#6849668,ReleaseHandle,MsQuicSafeHandle released -\u003e\r\n06.7822 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#33397131,Dispose,[strm][0x294D85D1840] Stream disposed -\u003e\r\n06.7995 dbug: Microsoft.AspNetCore.Server.Kestrel.Transport.Quic[10]\r\n      Stream id \"0HMJ330OH884L:00000003\" shutting down writes because: \"Operation aborted.\".\r\n07.0183 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#45133484,NativeCallback,[conn][0x294D8698DD0] Connection received event SHUTDOWN_COMPLETE -\u003e\r\n07.0741 dbug: Microsoft.AspNetCore.Server.Kestrel.BadRequests[20]\r\n      Connection id \"0HMJ330OH884L\" request processing ended abnormally.\r\n      Microsoft.AspNetCore.Connections.ConnectionAbortedException: The connection was timed out by the server because the response was not read by the client at the specified minimum data rate.\r\n         at Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicConnectionContext.AcceptAsync(CancellationToken cancellationToken)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http3.Http3Connection.ProcessRequestsAsync[TContext](IHttpApplication`1 application)\r\n07.0743 dbug: Microsoft.AspNetCore.Server.Kestrel.Http3[44]\r\n      Connection id \"0HMJ330OH884L\" is closed. The last processed stream ID was 0.\r\n07.0744 dbug: Microsoft.AspNetCore.Server.Kestrel.Connections[2]\r\n      Connection id \"0HMJ330OH884L\" stopped.\r\n07.0744 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#45133484,Dispose,[conn][0x294D8698DD0] Connection disposing True -\u003e\r\n```\r\n\r\n### Regression?\r\n\r\nUnknown\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nLatest .NET 7 daily build\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZeiRlQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5GV8HT",
                                           "createdAt":  "2022-07-11T09:13:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nI\u0027ve noticed Kestrel sometimes throws an error when handling a gRPC request. See https://github.com/dotnet/aspnetcore/issues/42289\r\n\r\ntldr; the client sent a gRPC request, the server processed it and sent a response, but aborted the connection because the request is hung on WaitForWriteCompletionAsync, and thought the request was still in-progress and exceeded the timeout to drain the request.\r\n\r\nI investigated what is going on and it appears that most of the time in my scenario `QuicStream.WaitForWriteCompletionAsync` never returns. It appears to work reliably if there is a breakpoint before awaiting on a task, but not if there is a breakpoint after awaiting the task.\n\n### Reproduction Steps\n\n1. git clone https://github.com/jamesnk/grpc-dotnet\r\n2. git checkout jamesnk/net7\r\n3. dotnet run -c Release --project .\\perf\\benchmarkapps\\GrpcClient\\ -- -u https://localhost:5000 -c 1 --streams 1 -s unary -p h3 --grpcClientType grpcnetclient --callCount 1\r\n4. dotnet run -c Release --project .\\perf\\benchmarkapps\\GrpcAspNetCoreServer\\ -- --LogLevel Trace --protocol h3\n\n### Expected behavior\n\nClient and server gracefully complete request.\n\n### Actual behavior\n\nHalf the time the QuicStream.WaitForWriteCompletionAsync task doesn\u0027t complete. The server aborts the request and the connection because they\u0027re unhealthy.\r\n\r\nLogs of success and failure are below.\r\n\r\nSuccess logs:\r\n\r\n```\r\n23.0973 dbug: Microsoft.AspNetCore.Server.Kestrel.Transport.Quic[2]\r\n      Stream id \"0HMJ31P1V8BHG:00000002\" type Unidirectional accepted.\r\n23.0974 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[46]\r\n      Connection id \"0HMJ31P1V8BHG\" received SETTINGS frame for stream ID 2 with length 5.\r\n23.1109 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#66993893,NativeCallback,[conn][0x29C45A0F6F0] Connection received event PEER_STREAM_STARTED -\u003e\r\n23.1109 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : SafeMsQuicStreamHandle#14836038,.ctor,MsQuicSafeHandle created -\u003e\r\n23.1109 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,.ctor,[strm][0x29C459C94D0] Inbound bidirectional stream created in connection [conn][0x29C45A0F6F0] with StreamId 0. -\u003e\r\n23.1109 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,NativeCallback,[strm][0x29C459C94D0] Stream received event RECEIVE -\u003e\r\n23.1109 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,HandleEventReceive,[strm][0x29C459C94D0] Stream received 256 bytes -\u003e\r\n23.1110 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,ReadAsync,[strm][0x29C459C94D0] Stream reading into Memory of \u00274096\u0027 bytes. -\u003e\r\n23.1110 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,ReadAsync,[strm][0x29C459C94D0] Stream reading into Memory of \u00274096\u0027 bytes. -\u003e\r\n23.1114 dbug: Microsoft.AspNetCore.Server.Kestrel.Transport.Quic[2]\r\n      Stream id \"0HMJ31P1V8BHG:00000000\" type Bidirectional accepted.\r\n23.1117 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[46]\r\n      Connection id \"0HMJ31P1V8BHG\" received HEADERS frame for stream ID 0 with length 251.\r\n23.1117 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,NativeCallback,[strm][0x29C459C94D0] Stream received event RECEIVE -\u003e\r\n23.1117 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,HandleEventReceive,[strm][0x29C459C94D0] Stream received 7 bytes -\u003e\r\n23.1119 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,ReadAsync,[strm][0x29C459C94D0] Stream reading into Memory of \u00274096\u0027 bytes. -\u003e\r\n23.1119 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[46]\r\n      Connection id \"0HMJ31P1V8BHG\" received DATA frame for stream ID 0 with length 7.\r\n23.1121 info: Microsoft.AspNetCore.Hosting.Diagnostics[1]\r\n      Request starting HTTP/3 POST https://localhost:5000/grpc.testing.BenchmarkService/UnaryCall application/grpc -\r\n23.1121 trce: Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware[2]\r\n      All hosts are allowed.\r\n23.1121 dbug: Microsoft.AspNetCore.Routing.Matching.DfaMatcher[1001]\r\n      1 candidate(s) found for the request path \u0027/grpc.testing.BenchmarkService/UnaryCall\u0027\r\n23.1121 dbug: Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware[1]\r\n      Request matched endpoint \u0027gRPC - /grpc.testing.BenchmarkService/UnaryCall\u0027\r\n23.1121 info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]\r\n      Executing endpoint \u0027gRPC - /grpc.testing.BenchmarkService/UnaryCall\u0027\r\n23.1122 dbug: Grpc.AspNetCore.Server.ServerCallHandler[10]\r\n      Reading message.\r\n23.1122 dbug: Microsoft.AspNetCore.Server.Kestrel[25]\r\n      Connection id \"0HMJ31P1V8BHG\", Request id \"0HMJ31P1V8BHG:00000000\": started reading request body.\r\n23.1122 trce: Grpc.AspNetCore.Server.ServerCallHandler[12]\r\n      Deserializing 2 byte message to \u0027Grpc.Testing.SimpleRequest\u0027.\r\n23.1122 trce: Grpc.AspNetCore.Server.ServerCallHandler[13]\r\n      Received message.\r\n23.1129 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,NativeCallback,[strm][0x29C459C94D0] Stream received event RECEIVE -\u003e\r\n23.1129 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,HandleEventReceive,[strm][0x29C459C94D0] Stream received 0 bytes with FIN flag -\u003e\r\n23.1129 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,NativeCallback,[strm][0x29C459C94D0] Stream received event PEER_SEND_SHUTDOWN -\u003e\r\n23.1129 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,HandleEventPeerSendShutdown,[strm][0x29C459C94D0] Stream completing resettable event source. -\u003e\r\n23.1129 dbug: Microsoft.AspNetCore.Server.Kestrel[26]\r\n      Connection id \"0HMJ31P1V8BHG\", Request id \"0HMJ31P1V8BHG:00000000\": done reading request body.\r\n23.1130 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[47]\r\n      Connection id \"0HMJ31P1V8BHG\" sending HEADERS frame for stream ID 0 with length 76.\r\n23.1130 dbug: Grpc.AspNetCore.Server.ServerCallHandler[15]\r\n      Sending message.\r\n23.1130 trce: Grpc.AspNetCore.Server.ServerCallHandler[18]\r\n      Serialized \u0027Grpc.Testing.SimpleResponse\u0027 to 2 byte message.\r\n23.1130 trce: Grpc.AspNetCore.Server.ServerCallHandler[16]\r\n      Message sent.\r\n23.1130 info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]\r\n      Executed endpoint \u0027gRPC - /grpc.testing.BenchmarkService/UnaryCall\u0027\r\n23.1130 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[47]\r\n      Connection id \"0HMJ31P1V8BHG\" sending DATA frame for stream ID 0 with length 7.\r\n23.1131 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,NativeCallback,[strm][0x29C459C94D0] Stream received event SEND_COMPLETE -\u003e\r\n23.1132 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[47]\r\n      Connection id \"0HMJ31P1V8BHG\" sending HEADERS frame for stream ID 0 with length 17.\r\n23.1132 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,NativeCallback,[strm][0x29C459C94D0] Stream received event SEND_COMPLETE -\u003e\r\n23.1133 info: Microsoft.AspNetCore.Hosting.Diagnostics[2]\r\n      Request finished HTTP/3 POST https://localhost:5000/grpc.testing.BenchmarkService/UnaryCall application/grpc - - 200 - application/grpc 1.2488ms\r\n23.1134 dbug: Microsoft.AspNetCore.Server.Kestrel.Transport.Quic[10]\r\n      Stream id \"0HMJ31P1V8BHG:00000000\" shutting down writes because: \"The QUIC transport\u0027s send loop completed gracefully.\".\r\n23.1401 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,NativeCallback,[strm][0x29C459C94D0] Stream received event SEND_SHUTDOWN_COMPLETE -\u003e\r\n23.1401 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,NativeCallback,[strm][0x29C459C94D0] Stream received event SHUTDOWN_COMPLETE -\u003e\r\n23.1401 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,HandleEventShutdownComplete,[strm][0x29C459C94D0] Stream completing resettable event source. -\u003e\r\n23.1402 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,Dispose,[strm][0x29C459C94D0] Stream disposing True -\u003e\r\n23.1403 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,Cleanup,[strm][0x29C459C94D0] releasing handles. -\u003e\r\n23.1403 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : SafeMsQuicStreamHandle#14836038,ReleaseHandle,MsQuicSafeHandle released -\u003e\r\n23.1403 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#29809623,Dispose,[strm][0x29C459C94D0] Stream disposed -\u003e\r\n```\r\n\r\nFailure logs:\r\n\r\n```\r\n43.0608 dbug: Microsoft.AspNetCore.Server.Kestrel.Transport.Quic[2]\r\n      Stream id \"0HMJ31P1V8BHF:00000000\" type Bidirectional accepted.\r\n43.0610 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[46]\r\n      Connection id \"0HMJ31P1V8BHF\" received HEADERS frame for stream ID 0 with length 251.\r\n43.0611 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,NativeCallback,[strm][0x29C459C9A70] Stream received event RECEIVE -\u003e\r\n43.0612 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,HandleEventReceive,[strm][0x29C459C9A70] Stream received 7 bytes -\u003e\r\n43.0613 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,ReadAsync,[strm][0x29C459C9A70] Stream reading into Memory of \u00274096\u0027 bytes. -\u003e\r\n43.0613 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[46]\r\n      Connection id \"0HMJ31P1V8BHF\" received DATA frame for stream ID 0 with length 7.\r\n43.0614 info: Microsoft.AspNetCore.Hosting.Diagnostics[1]\r\n      Request starting HTTP/3 POST https://localhost:5000/grpc.testing.BenchmarkService/UnaryCall application/grpc -\r\n43.0614 trce: Microsoft.AspNetCore.HostFiltering.HostFilteringMiddleware[2]\r\n      All hosts are allowed.\r\n43.0615 dbug: Microsoft.AspNetCore.Routing.Matching.DfaMatcher[1001]\r\n      1 candidate(s) found for the request path \u0027/grpc.testing.BenchmarkService/UnaryCall\u0027\r\n43.0615 dbug: Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware[1]\r\n      Request matched endpoint \u0027gRPC - /grpc.testing.BenchmarkService/UnaryCall\u0027\r\n43.0615 info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]\r\n      Executing endpoint \u0027gRPC - /grpc.testing.BenchmarkService/UnaryCall\u0027\r\n43.0615 dbug: Grpc.AspNetCore.Server.ServerCallHandler[10]\r\n      Reading message.\r\n43.0615 dbug: Microsoft.AspNetCore.Server.Kestrel[25]\r\n      Connection id \"0HMJ31P1V8BHF\", Request id \"0HMJ31P1V8BHF:00000000\": started reading request body.\r\n43.0615 trce: Grpc.AspNetCore.Server.ServerCallHandler[12]\r\n      Deserializing 2 byte message to \u0027Grpc.Testing.SimpleRequest\u0027.\r\n43.0615 trce: Grpc.AspNetCore.Server.ServerCallHandler[13]\r\n      Received message.\r\n43.0624 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,NativeCallback,[strm][0x29C459C9A70] Stream received event RECEIVE -\u003e\r\n43.0624 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,HandleEventReceive,[strm][0x29C459C9A70] Stream received 0 bytes with FIN flag -\u003e\r\n43.0624 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,NativeCallback,[strm][0x29C459C9A70] Stream received event PEER_SEND_SHUTDOWN -\u003e\r\n43.0624 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,HandleEventPeerSendShutdown,[strm][0x29C459C9A70] Stream completing resettable event source. -\u003e\r\n43.0625 dbug: Microsoft.AspNetCore.Server.Kestrel[26]\r\n      Connection id \"0HMJ31P1V8BHF\", Request id \"0HMJ31P1V8BHF:00000000\": done reading request body.\r\n43.0625 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[47]\r\n      Connection id \"0HMJ31P1V8BHF\" sending HEADERS frame for stream ID 0 with length 76.\r\n43.0625 dbug: Grpc.AspNetCore.Server.ServerCallHandler[15]\r\n      Sending message.\r\n43.0626 trce: Grpc.AspNetCore.Server.ServerCallHandler[18]\r\n      Serialized \u0027Grpc.Testing.SimpleResponse\u0027 to 2 byte message.\r\n43.0626 trce: Grpc.AspNetCore.Server.ServerCallHandler[16]\r\n      Message sent.\r\n43.0626 info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]\r\n      Executed endpoint \u0027gRPC - /grpc.testing.BenchmarkService/UnaryCall\u0027\r\n43.0626 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[47]\r\n      Connection id \"0HMJ31P1V8BHF\" sending DATA frame for stream ID 0 with length 7.\r\n43.0627 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,NativeCallback,[strm][0x29C459C9A70] Stream received event SEND_COMPLETE -\u003e\r\n43.0627 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[47]\r\n      Connection id \"0HMJ31P1V8BHF\" sending HEADERS frame for stream ID 0 with length 17.\r\n43.0628 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#3891103,NativeCallback,[strm][0x29C459C9A70] Stream received event SEND_COMPLETE -\u003e\r\n43.0628 info: Microsoft.AspNetCore.Hosting.Diagnostics[2]\r\n      Request finished HTTP/3 POST https://localhost:5000/grpc.testing.BenchmarkService/UnaryCall application/grpc - - 200 - application/grpc 1.3970ms\r\n43.0629 dbug: Microsoft.AspNetCore.Server.Kestrel.Transport.Quic[10]\r\n      Stream id \"0HMJ31P1V8BHF:00000000\" shutting down writes because: \"The QUIC transport\u0027s send loop completed gracefully.\".\r\n```\r\n\r\nThe request then hangs, waiting on the task that doesn\u0027t complete. After 5 seconds Kestrel aborts the connection which calls QuicConnection.CloseAsync which unsticks `WaitForWriteCompletionAsync` and the task completes.\r\n\r\nLogs after abort:\r\n\r\n```\r\n02.0392 dbug: Microsoft.AspNetCore.Server.Kestrel.BadRequests[28]\r\n      Connection id \"0HMJ330OH884L\", Request id \"0HMJ330OH884L:00000000\": the connection was closed because the response was not read by the client at the specified minimum data rate.\r\n06.7638 dbug: Microsoft.AspNetCore.Server.Kestrel.Http3[53]\r\n      Connection id \"0HMJ330OH884L\": GOAWAY stream ID 4.\r\n06.7638 trce: Microsoft.AspNetCore.Server.Kestrel.Http3[47]\r\n      Connection id \"0HMJ330OH884L\" sending GOAWAY frame for stream ID 3 with length 1.\r\n06.7639 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#16104161,NativeCallback,[strm][0x294D85D0760] Stream received event SEND_COMPLETE -\u003e\r\n06.7639 dbug: Microsoft.AspNetCore.Server.Kestrel.Transport.Quic[6]\r\n      Connection id \"0HMJ330OH884L\" aborted by application with error code 258 because: \"The connection was timed out by the server because the response was not read by the client at the specified minimum data rate.\".\r\n06.7640 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#33397131,NativeCallback,[strm][0x294D85D1840] Stream received event SEND_SHUTDOWN_COMPLETE -\u003e\r\n06.7640 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#33397131,NativeCallback,[strm][0x294D85D1840] Stream received event SHUTDOWN_COMPLETE -\u003e\r\n06.7640 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#33397131,HandleEventConnectionClose,[strm][0x294D85D1840] Stream handling connection [conn][0x294D8698DD0] close -\u003e\r\n06.7647 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#31139921,NativeCallback,[strm][0x294D85D0A30] Stream received event SHUTDOWN_COMPLETE -\u003e\r\n06.7647 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#31139921,HandleEventConnectionClose,[strm][0x294D85D0A30] Stream handling connection [conn][0x294D8698DD0] close -\u003e\r\n06.7657 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#16104161,NativeCallback,[strm][0x294D85D0760] Stream received event SEND_SHUTDOWN_COMPLETE -\u003e\r\n06.7657 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#16104161,NativeCallback,[strm][0x294D85D0760] Stream received event SHUTDOWN_COMPLETE -\u003e\r\n06.7657 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#16104161,HandleEventConnectionClose,[strm][0x294D85D0760] Stream handling connection [conn][0x294D8698DD0] close -\u003e\r\n06.7822 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#33397131,Dispose,[strm][0x294D85D1840] Stream disposing True -\u003e\r\n06.7822 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#33397131,Cleanup,[strm][0x294D85D1840] releasing handles. -\u003e\r\n06.7822 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : SafeMsQuicStreamHandle#6849668,ReleaseHandle,MsQuicSafeHandle released -\u003e\r\n06.7822 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#33397131,Dispose,[strm][0x294D85D1840] Stream disposed -\u003e\r\n06.7995 dbug: Microsoft.AspNetCore.Server.Kestrel.Transport.Quic[10]\r\n      Stream id \"0HMJ330OH884L:00000003\" shutting down writes because: \"Operation aborted.\".\r\n07.0183 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#45133484,NativeCallback,[conn][0x294D8698DD0] Connection received event SHUTDOWN_COMPLETE -\u003e\r\n07.0741 dbug: Microsoft.AspNetCore.Server.Kestrel.BadRequests[20]\r\n      Connection id \"0HMJ330OH884L\" request processing ended abnormally.\r\n      Microsoft.AspNetCore.Connections.ConnectionAbortedException: The connection was timed out by the server because the response was not read by the client at the specified minimum data rate.\r\n         at Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicConnectionContext.AcceptAsync(CancellationToken cancellationToken)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http3.Http3Connection.ProcessRequestsAsync[TContext](IHttpApplication`1 application)\r\n07.0743 dbug: Microsoft.AspNetCore.Server.Kestrel.Http3[44]\r\n      Connection id \"0HMJ330OH884L\" is closed. The last processed stream ID was 0.\r\n07.0744 dbug: Microsoft.AspNetCore.Server.Kestrel.Connections[2]\r\n      Connection id \"0HMJ330OH884L\" stopped.\r\n07.0744 dbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#45133484,Dispose,[conn][0x294D8698DD0] Connection disposing True -\u003e\r\n```\n\n### Regression?\n\nUnknown\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\nLatest .NET 7 daily build\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJamesNK\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-11T09:13:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GWoaw",
                                           "createdAt":  "2022-07-11T12:16:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "BTW fixing this is a high priority. The bug doesn\u0027t impact the HTTP/3 request because it has told the client it is complete, but 5 seconds later the HTTP/3 connection is aborted.",
                                           "updatedAt":  "2022-07-11T12:16:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GWxQD",
                                           "createdAt":  "2022-07-11T12:53:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Could you point me to the test code for this? Looks like `SEND_SHUTDOWN_COMPLETE` hasn\u0027t arrived in your failed case.",
                                           "updatedAt":  "2022-07-11T12:53:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GW4t1",
                                           "createdAt":  "2022-07-11T13:22:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "The repo steps include them.\r\n\r\nServer: https://github.com/JamesNK/grpc-dotnet/tree/jamesnk/net7/perf/benchmarkapps/GrpcAspNetCoreServer\r\nClient: https://github.com/JamesNK/grpc-dotnet/tree/jamesnk/net7/perf/benchmarkapps/GrpcClient",
                                           "updatedAt":  "2022-07-11T13:22:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GX6rV",
                                           "createdAt":  "2022-07-11T17:27:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Is this a recent regression or has it been there for a while?",
                                           "updatedAt":  "2022-07-11T17:27:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GY1um",
                                           "createdAt":  "2022-07-11T22:07:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "I first noticed it 23 days ago. I don\u0027t know if it happened before then. ",
                                           "updatedAt":  "2022-07-11T22:07:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GlMlK",
                                           "createdAt":  "2022-07-14T08:30:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: looks like reliability issue, let\u0027s investigate in 7.0. It should be fairly simple to reproduce locally.",
                                           "updatedAt":  "2022-07-14T08:30:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Gy-0M",
                                           "createdAt":  "2022-07-18T17:02:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "I can reproduce that, and indeed this is because SEND_SHUTDOWN_COMPLETE sometimes does not arrive to the server\u0027s stream.\r\n\r\nWhile digging through MsQuic logs, I noticed that client side didn\u0027t send ACK for server\u0027s FIN flag before destroying the stream:\r\n\r\n**SERVER**: sends FIN flag\r\n\r\n```\r\n2387 [4]3A44.5574::2022/07/18-14:38:26.406710900 [Microsoft-Quic][strm][0x240A42A4BF0] Built stream frame, offset=107 len=0 fin=1\r\n\r\n2389 [4]3A44.5574::2022/07/18-14:38:26.406715700 [Microsoft-Quic][S][TX][16] SH DestCid: KP:0 SB:1 (Payload 15 bytes)\r\n2390 [4]3A44.5574::2022/07/18-14:38:26.406717600 [Microsoft-Quic][S][TX][16]   ACK Largest:14 Delay:0\r\n2391 [4]3A44.5574::2022/07/18-14:38:26.406719000 [Microsoft-Quic][S][TX][16]     14\r\n2392 [4]3A44.5574::2022/07/18-14:38:26.406721200 [Microsoft-Quic][S][TX][16]   STREAM ID:0 Offset:107 Len:0 Fin\r\n\r\n2401 [4]3A44.5574::2022/07/18-14:38:26.406733200 [Microsoft-Quic][conn][0x240A4218640] Sending batch. 1 datagrams\r\n```\r\n\r\n**CLIENT**: receives the FIN flag datagram\r\n\r\n```\r\n2422 [8]2AC4.6420::2022/07/18-14:38:26.406881200 [Microsoft-Quic][conn][0x21E299B6F00] Batch Recv 1 UDP datagrams\r\n\r\n2424 [8]2AC4.6420::2022/07/18-14:38:26.406886200 [Microsoft-Quic][C][RX][16] SH DestCid: KP:0 SB:1 (Payload 15 bytes)\r\n2425 [8]2AC4.6420::2022/07/18-14:38:26.406888200 [Microsoft-Quic][C][RX][16]   ACK Largest:14 Delay:0\r\n2426 [8]2AC4.6420::2022/07/18-14:38:26.406889600 [Microsoft-Quic][C][RX][16]     14\r\n2427 [8]2AC4.6420::2022/07/18-14:38:26.406891600 [Microsoft-Quic][C][RX][16]   STREAM ID:0 Offset:107 Len:0 Fin\r\n\r\n2428 [8]2AC4.6420::2022/07/18-14:38:26.406892500 [Microsoft-Quic][conn][0x21E299B6F00][RX][16] 5(ONE_RTT) (16 bytes)\r\n\r\n2434 [8]2AC4.6420::2022/07/18-14:38:26.406901600 [Microsoft-Quic][strm][0x21E29D79700] Received 0 bytes, offset=107 Ready=0\r\n```\r\n...marks for ACK but decides not to do that immediately\r\n\r\n```\r\n2436 [8]2AC4.6420::2022/07/18-14:38:26.406904000 [Microsoft-Quic][C][RX][16] Marked for ACK (ECN=0)\r\n2437 [8]2AC4.6420::2022/07/18-14:38:26.406905500 [Microsoft-Quic][conn][0x21E299B6F00] Starting ACK_DELAY timer for 25 ms\r\n```\r\n\r\n...as now both of stream\u0027s directions are shut down, triggers last events\r\n\r\n```\r\n2468 [8]2AC4.6420::2022/07/18-14:38:26.424288300 [Microsoft-Quic][strm][0x21E29D79700] Indicating QUIC_STREAM_EVENT_PEER_SEND_SHUTDOWN\r\n2469 [8]2AC4.6420::2022/07/18-14:38:26.424304800 [Microsoft-Quic][strm][0x21E29D79700] Indicating QUIC_STREAM_EVENT_SHUTDOWN_COMPLETE [ConnectionShutdown=0, ConnectionShutdownByPeer=0, ConnectionErrorCode=0x0]\r\n\r\n2473 [0]2AC4.6260::2022/07/18-14:38:26.426986800 [Microsoft-Quic][ api] Enter 21(STREAM_SHUTDOWN) (0x21E29D79700).\r\n2476 [0]2AC4.6260::2022/07/18-14:38:26.427000700 [Microsoft-Quic][ api] Enter 19(STREAM_CLOSE) (0x21E29D79700).\r\n\r\n2485 [8]2AC4.6420::2022/07/18-14:38:26.427042200 [Microsoft-Quic][strm][0x21E29D79700] Destroyed\r\n```\r\n\r\n...after stream being destroyed, it seems that it forgot to send that delayed ACK to the peer.... it was scheduled for ~14:38:26.*431* but stream was destroyed at 14:38:26.*427*\r\n\r\n\r\n\r\n**SERVER**:  did not hear from client, tries to retransmit FIN..... no response, it isn\u0027t even shown on client connection\u0027s logs (I guess it disregards datagrams addressed to already closed streams)\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003eFull MsQuic logs\u003c/summary\u003e\r\n\r\nhttps://microsofteur-my.sharepoint.com/:f:/g/personal/knatalia_microsoft_com/EsnkYxGB26BKmRrIOh7va-4B8Ezq6elWQTPy-WAuV5-ZBw?e=Qu3hKO\r\n\u003c/details\u003e\r\n\r\n@nibanks does that look like MsQuic bug?",
                                           "updatedAt":  "2022-07-18T17:15:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GzKD-",
                                           "createdAt":  "2022-07-18T17:16:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nibanks",
                                           "body":  "@CarnaViire was the stream aborted? I see that `Ready=0` when the client receives the FIN, indicating you have a pending receive or are missing some payload and can\u0027t deliver yet. But regardless, I believe this means we\u0027re blocked from informing the app that we have the FIN. If the client aborts its receive first, then you won\u0027t get the FIN.",
                                           "updatedAt":  "2022-07-18T17:16:48Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GzSDp",
                                           "createdAt":  "2022-07-18T17:25:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nibanks",
                                           "body":  "Actually, after looking at the logs, it seems the client just stopped all together. It\u0027s not receiving any other packets. This is with a breakpoint attached to it?",
                                           "updatedAt":  "2022-07-18T17:25:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5GzmZ-",
                                           "createdAt":  "2022-07-18T17:50:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "The client\u0027s stream is not aborted, at least from what I see/understand. This is without any breakpoints, just one run of a client application, it executes one request, receives and handles the response and then finishes.\r\n\r\nThe following are .NET and gRPC level client logs from another run when the same problem occurred. Everything looks like receiving all the data with the following graceful shutdown of the stream. After stream is done, though, the connection stayed alive inside HttpClient and, I guess, just got killed after app finished. I wonder if that adds any problems? But that would not be the reason we got Ready=0 (whatever that means)\r\n```\r\n...\r\n...\r\ndbug: Grpc.Net.Client.Internal.GrpcCall[13]\r\n      Reading message.\r\ndbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Http - HandlerMessage : 43205102,28068188,0,ReadFrameEnvelopeAsync,Received frame 0 of length 7. -\u003e\r\ntrce: Grpc.Net.Client.Internal.GrpcCall[15]\r\n      Deserializing 2 byte message to \u0027Grpc.Testing.SimpleResponse\u0027.\r\ndbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#12053474,ReadAsync,[strm][0x200D5717C70] Stream reading into Memory of \u002764\u0027 bytes. -\u003e\r\ndbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Http - HandlerMessage : 43205102,28068188,0,ReadFrameEnvelopeAsync,Received frame 1 of length 17. -\u003e\r\ndbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#12053474,NativeCallback,[strm][0x200D5717C70] Stream received event PEER_SEND_SHUTDOWN -\u003e\r\ndbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#12053474,HandleEventPeerSendShutdown,[strm][0x200D5717C70] Stream completing resettable event source. -\u003e\r\ndbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#12053474,NativeCallback,[strm][0x200D5717C70] Stream received event SHUTDOWN_COMPLETE -\u003e\r\ndbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#12053474,HandleEventShutdownComplete,[strm][0x200D5717C70] Stream completing resettable event source. -\u003e\r\ntrce: Grpc.Net.Client.Internal.GrpcCall[16]\r\n      Received message.\r\ndbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#12053474,Dispose,[strm][0x200D5717C70] Stream disposing True -\u003e\r\ndbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#12053474,Cleanup,[strm][0x200D5717C70] releasing handles. -\u003e\r\ndbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : SafeMsQuicStreamHandle#51484875,ReleaseHandle,MsQuicSafeHandle released -\u003e\r\ndbug: HttpEventSourceListener[0]\r\n      \u003c- Event Private.InternalDiagnostics.System.Net.Quic - Info : State#12053474,Dispose,[strm][0x200D5717C70] Stream disposed -\u003e\r\ndbug: Grpc.Net.Client.Internal.GrpcCall[4]\r\n      Finished gRPC call.\r\n[07:26:06.803] Reached 1\r\n[07:26:06.803] 0 0: Finished unary\r\n[07:26:06.804] Stopping client.\r\n[07:26:06.804] Least Requests per Connection: 1\r\n[07:26:06.804] Most Requests per Connection: 1\r\n[07:26:06.808] RPS: ∞\r\n[07:26:06.808] Total requests: 1\r\n[07:26:06.808] Total errors: 0\r\n[07:26:06.810] Mean latency: 365.535ms\r\n[07:26:06.811] Max latency: 365.535ms\r\ndbug: HttpEventSourceListener[0]\r\n      Stopping HttpEventSourceListener.\r\n```",
                                           "updatedAt":  "2022-07-18T18:16:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G0GK0",
                                           "createdAt":  "2022-07-18T18:25:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "After all, this might be the same issue as https://github.com/dotnet/runtime/issues/72196.\r\nWhat I\u0027ve observed is that we receive data and partially consume them. But before the return value propagates to MsQuic, we read the data on a different thread and call `StreamReceiveSetEnable`, then MsQuic processes the return value and pauses receiving. But we think we\u0027ve re-enabled them. And now we have a sleeping barber problem...\r\n\r\nEDIT: Or is that not possible to happen due to MsQuic thread model?",
                                           "updatedAt":  "2022-07-18T18:27:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G0IcS",
                                           "createdAt":  "2022-07-18T18:29:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "\u003e we receive data and partially consume them.\r\n\r\nI don\u0027t think it\u0027s the same here. Here we consume all the data, because we receive PEER_SEND_SHUTDOWN event, which would not arrive before the app level consumes everything the transport level received. At least that was my understanding.",
                                           "updatedAt":  "2022-07-18T18:29:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G3kjC",
                                           "createdAt":  "2022-07-19T12:09:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nibanks",
                                           "body":  "From what I can tell, the server was waiting on an ACK, but the client process was completely paused or killed. No logs were being generated from it any more. So it never could send the ACK. Notice we just stop see logs from process `2AC4`.\r\n\r\n\u003cimg width=\"956\" alt=\"image\" src=\"https://user-images.githubusercontent.com/20663557/179746694-778ab7eb-7059-4c4c-9fee-e90ca575f548.png\"\u003e\r\n",
                                           "updatedAt":  "2022-07-19T12:09:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G3pda",
                                           "createdAt":  "2022-07-19T12:30:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "We receive all the stream events including stream shutdown, after which we safely close the stream and believe everything was done with it. Is there a way for the application to know that there\u0027s still unfinished work on the transport level related to the stream? Or maybe is it somehow possible to flush the fin related to the stream on stream\u0027s closing? @nibanks \r\n\r\nI wonder, does gRPC dispose HttpClient in the end, or does it stay there until it\u0027s destroyed on app exit? @JamesNK ",
                                           "updatedAt":  "2022-07-19T12:30:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G3qzS",
                                           "createdAt":  "2022-07-19T12:34:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "It\u0027s up to the app to dispose of the channel/HttpClient.\r\n\r\nIn this case, the gRPC benchmark app **isn\u0027t** disposing HttpClient before the process exits.",
                                           "updatedAt":  "2022-07-19T12:42:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G3sPs",
                                           "createdAt":  "2022-07-19T12:40:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nibanks",
                                           "body":  "\u003e Is there a way for the application to know that there\u0027s still unfinished work on the transport level related to the stream?\r\n\r\nIf you immediately terminate things in response to receiving a stream event, you\u0027re always going to risk not acknowledging your peer, resulting in a behavior like this. You can try to do a graceful connection shutdown, and if you use MsQuic we make sure to always ACK everything when we close, but that\u0027s not a required behavior (so other implementations won\u0027t do it).\r\n\r\nBut, this is exactly why HTTP generally only closes on an idle timeout, to make sure everything was exchanged.",
                                           "updatedAt":  "2022-07-19T12:40:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G3u8M",
                                           "createdAt":  "2022-07-19T12:52:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "\u003e You can try to do a graceful connection shutdown\r\n\r\nWe can\u0027t do that after a request, because we don\u0027t know whether the user is done or not. We can only do so when the user signaled us that they\u0027re done - meaning, on dispose - but as James mentions above, the app is free to decide not to do that and just exit, as soon as it gets the full response from the server ☹️\r\n\r\n\u003e HTTP generally only closes on an idle timeout\r\n\r\nI think that\u0027s true for the server, but not for the client?",
                                           "updatedAt":  "2022-07-19T12:52:11Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G3vlK",
                                           "createdAt":  "2022-07-19T12:54:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nibanks",
                                           "body":  "\u003e I think that\u0027s true for the server, but not for the client?\r\n\r\nHTTP is spec\u0027ed to close on both sides based on the idle timeout.\r\n\r\n\u003e app is free to decide not to do that and just exit, as soon as it gets the full response from the server\r\n\r\nThe app is free to do anything, but that doesn\u0027t mean it\u0027s correct. This is not a bug in MsQuic. If you terminate the QUIC connection or process before we have a chance to ACK, then that is a bug on the upper layer.",
                                           "updatedAt":  "2022-07-19T12:54:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G3wpf",
                                           "createdAt":  "2022-07-19T12:59:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "In the gRPC benchmark app the HTTP/3 request is completed gracefully. The client writes the message to the request body, and the server writes the response message including a complete notification. At that point shouldn\u0027t the client send a notification to the server that the write side of the stream is finished?\r\n\r\nOr is the problem that there is a race between the process terminating and sending the notification to the server?",
                                           "updatedAt":  "2022-07-19T12:59:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G3xmD",
                                           "createdAt":  "2022-07-19T13:02:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nibanks",
                                           "body":  "AFAICT, once the client gets indication of the stream/request being complete on its side, the client is tearing everything down immediately (and never sending anything to the server again). This results in the ACK not getting sent to the server and the server never learns the stream was completed.",
                                           "updatedAt":  "2022-07-19T13:02:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HFgLU",
                                           "createdAt":  "2022-07-22T14:20:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "We\u0027ve discussed offline that while there\u0027s no ideal solution without ruining the perf, flushing acks on stream closing (connection-wide) should greatly reduce the race condition window.\r\nThe PR on MsQuic side to test it is https://github.com/microsoft/msquic/pull/2904\r\nI will try out MsQuic privates to see whether the issue reproduces after the change and what\u0027s the perf impact.",
                                           "updatedAt":  "2022-07-22T14:20:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HMvc3",
                                           "createdAt":  "2022-07-25T19:28:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "Change as was is in https://github.com/microsoft/msquic/pull/2904 (flush on stream\u0027s Shutdown) didn\u0027t fully help, because it might happen that the ACK isn\u0027t even scheduled yet by the time Shutdown executes. However, moving flush to stream\u0027s Close fixed the problem. I don\u0027t see the hang on server anymore (if i dispose the stream, but don\u0027t dispose the connection) -- neither in gRPC nor in my small Quic-only repro.\r\n\r\n@nibanks mentioned that there still might be a problem if Close is called from within Shutdown callback (we don\u0027t do that in S.N.Quic, we call Close from managed thread after Shutdown callback unblocks TCS)\r\n\r\nNext steps: check perf impact (unless @nibanks believes there has to be a more complicated change; if so, I will hold back until it\u0027s available)",
                                           "updatedAt":  "2022-07-25T19:28:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HtM6B",
                                           "createdAt":  "2022-08-02T17:44:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We had a meeting where we decided the scenario is fairly corner-case (Kestrel users won\u0027t see anything, unless they enable Diagnostics).\r\nIt would still be nice to have it implemented in msquic, but it is nice to have. Playing nicely with the server is desirable.\r\n\r\nMoving to 8.0. If we have customer complains from the wild, we can always service .NET.",
                                           "updatedAt":  "2022-08-02T17:44:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5O0KzI",
                                           "createdAt":  "2022-11-21T16:10:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC0egSw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2023-01-19T16:12:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "Triage: we need to create an issue in MsQuic repo and link the PR https://github.com/microsoft/msquic/pull/2904 there + mention that in order for it to work, the code should be in Close, not Shutdown (see [comment](https://github.com/dotnet/runtime/issues/71927#issuecomment-1194522423) above).",
                                           "updatedAt":  "2022-11-21T16:10:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5TSAVD",
                                           "createdAt":  "2023-01-19T16:12:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: the last comment stands.",
                                           "updatedAt":  "2023-01-19T16:12:47Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5bOr5R",
                                           "createdAt":  "2023-05-01T23:38:20Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Did we created new issue @CarnaViire or is this something that was fixed in 2.2? I cannot quite tell and I\u0027m not sure what is next step here. ",
                                           "updatedAt":  "2023-05-01T23:38:20Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5e_Elo",
                                           "createdAt":  "2023-06-15T19:13:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ValeryYegorov",
                                           "body":  "Hello \r\nI thought we have same issues on Ios(client) -\u003e linux(sever) architecture. \r\nIssues opened on https://github.com/grpc/grpc-dotnet/issues/2164 and https://github.com/microsoft/msquic/issues/3703",
                                           "updatedAt":  "2023-06-15T19:13:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5l6JGV",
                                           "createdAt":  "2023-09-07T08:48:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODGBFUA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2023-09-07T09:06:49Z"
                                                                           },
                                                                           {
                                                                               "content":  "HOORAY",
                                                                               "user":  "karelz",
                                                                               "createdAt":  "2023-09-07T10:33:45Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "Created https://github.com/microsoft/msquic/issues/3842",
                                           "updatedAt":  "2023-09-07T08:48:56Z"
                                       }
                                   ],
                         "totalCount":  29
                     },
        "title":  "QUIC: QuicStream.WaitForWriteCompletionAsync sometimes doesn\u0027t complete",
        "labels":  [
                       "bug",
                       "tracking-external-issue",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/72511",
        "createdAt":  "2022-07-20T08:10:52Z",
        "number":  72511,
        "author":  "JamesNK",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOCp90gg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "halter73",
                                            "createdAt":  "2022-08-04T00:28:31Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-06-11T15:04:56Z",
        "body":  "### Background and motivation\r\n\r\n`QuicListenerOptions.ConnectionOptionsCallback` is a callback that allows the server to modify connection options when it accepts a connection. One of its arguments is `QuicConnection`.\r\n\r\nhttps://github.com/dotnet/runtime/blob/a54a823ece1094dd05b7380614bd43566834a8f9/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicListenerOptions.cs#L33-L36\r\n\r\nIn ASP.NET Core we allow people to hook into this callback, although we wrap it in our own signature because we have an abstraction called [`ConnectionContext`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.connections.connectioncontext) for a server connection that\u0027s not specific to QUIC or HTTP/3.\r\n\r\n```cs\r\n_quicListenerOptions = new QuicListenerOptions\r\n{\r\n    ApplicationProtocols = _tlsConnectionOptions.ApplicationProtocols,\r\n    ListenEndPoint = listenEndPoint,\r\n    ListenBacklog = options.Backlog,\r\n    ConnectionOptionsCallback = async (quicConnection, helloInfo, cancellationToken) =\u003e\r\n    {\r\n        var serverAuthenticationOptions = await _tlsConnectionOptions.OnConnection(new TlsConnectionCallbackContext\r\n        {\r\n            CancellationToken = cancellationToken,\r\n            ClientHelloInfo = helloInfo,\r\n            State = _tlsConnectionOptions.OnConnectionState,\r\n            Connection = new QuicConnectionContext(quicConnection, _context), // wrap QuicConnection with our abstraction here\r\n        });\r\n        var connectionOptions = new QuicServerConnectionOptions\r\n        {\r\n            ServerAuthenticationOptions = serverAuthenticationOptions,\r\n            IdleTimeout = options.IdleTimeout,\r\n            MaxInboundBidirectionalStreams = options.MaxBidirectionalStreamCount,\r\n            MaxInboundUnidirectionalStreams = options.MaxUnidirectionalStreamCount,\r\n            DefaultCloseErrorCode = 0,\r\n            DefaultStreamErrorCode = 0,\r\n        };\r\n        return connectionOptions;\r\n    }\r\n}\r\n```\r\n\r\nOnce the connection is accepted and returned from\r\n\r\n```cs\r\nvar quicConnection = await _listener.AcceptConnectionAsync(cancellationToken);\r\nvar connectionContext = new QuicConnectionContext(quicConnection, _context);\r\n```\r\n\r\nThe code above is creating our abstraction - `QuicConnectionContext` - twice: once in the callback and then again after `AcceptConnectionAsync` returns. We don\u0027t want to do this because of allocations, but also because someone can update state on our connection abstraction, and that would disappear if it was recreated.\r\n\r\nIt would be better if we were able to create `QuicConnectionContext` once inside the callback, use it, then add it to a property bag on `QuicConnection`, and then use that value when `AcceptConnectionAsync` returns.\r\n\r\n```cs\r\nvar quicConnection = await _listener.AcceptConnectionAsync(cancellationToken);\r\nvar connectionContext = (QuicConnectionContext)quicConnection.Properties[QuicConnectionContextKey];\r\n```\r\n\r\nOther options include adding `QuicConnectionContext` to a `ConditionalWeakTable\u003cQuicConnection, QuicConnectionContext\u003e` inside the callback, then removing it outside the callback. But a place to stash state on the `QuicConnection` would be much simpler.\r\n\r\nThis isn\u0027t critical for .NET 7. Workarounds include using a weak table, allocating twice (which fixes one problem but creates another...), or leaving `ConnectionContext` null in the callback in .NET 7 and waiting for this API in .NET 8.\r\n\r\n### API Proposal\r\n\r\n```csharp\r\nnamespace System.Net.Quic;\r\n\r\npublic class QuicConnection\r\n{\r\n    public IDictionary\u003cstring, object?\u003e Properties { get; }\r\n}\r\n```\r\n\r\n### API Usage\r\n\r\n```cs\r\n_quicListenerOptions = new QuicListenerOptions\r\n{\r\n    ApplicationProtocols = _tlsConnectionOptions.ApplicationProtocols,\r\n    ListenEndPoint = listenEndPoint,\r\n    ListenBacklog = options.Backlog,\r\n    ConnectionOptionsCallback = async (quicConnection, helloInfo, cancellationToken) =\u003e\r\n    {\r\n        quicConnection.Properties[QuicConnectionContextKey] = new QuicConnectionContext(quicConnection, _context);\r\n        \r\n        // ...figure out conneciton options...\r\n\r\n        return connectionOptions;\r\n    }\r\n}\r\n```\r\n\r\n```cs\r\nvar quicConnection = await _listener.AcceptConnectionAsync(cancellationToken);\r\nvar connectionContext = (QuicConnectionContext)quicConnection.Properties[QuicConnectionContextKey];\r\n```\r\n\r\n### Alternative Designs\r\n\r\nAdd a state argument to `ConnectionOptionsCallback` callback and `AcceptConnectionAsync`.\r\n\r\n```cs\r\n_quicListenerOptions = new QuicListenerOptions\r\n{\r\n    ApplicationProtocols = _tlsConnectionOptions.ApplicationProtocols,\r\n    ListenEndPoint = listenEndPoint,\r\n    ListenBacklog = options.Backlog,\r\n    ConnectionOptionsCallback = async (quicConnection, helloInfo, state, cancellationToken) =\u003e\r\n    {\r\n        var listenerContext = (QuicListenerContext)state!\r\n        listenerContext._acceptingQuicConnectionContext = new QuicConnectionContext(quicConnection, _context);\r\n        \r\n        // ...figure out conneciton options...\r\n\r\n        return connectionOptions;\r\n    }\r\n}\r\n```\r\n\r\n```cs\r\nvar quicConnection = await _listener.AcceptConnectionAsync(cancellationToken, state: this);\r\nvar connectionContext = _acceptingQuicConnectionContext; // was set in callback\r\n```\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgJxUcA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5G7W2M",
                                           "createdAt":  "2022-07-20T08:11:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\n`QuicListenerOptions.ConnectionOptionsCallback` is a callback that allows the server to modify connection options when it accepts a connection. One of its arguments is `QuicConnection`.\r\n\r\nhttps://github.com/dotnet/runtime/blob/a54a823ece1094dd05b7380614bd43566834a8f9/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicListenerOptions.cs#L33-L36\r\n\r\nIn ASP.NET Core we allow people to hook into this callback, although we wrap it in our own signature because we have an abstraction called [`ConnectionContext`](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.connections.connectioncontext) for a server connection that\u0027s not specific to QUIC or HTTP/3.\r\n\r\n```cs\r\n_quicListenerOptions = new QuicListenerOptions\r\n{\r\n    ApplicationProtocols = _tlsConnectionOptions.ApplicationProtocols,\r\n    ListenEndPoint = listenEndPoint,\r\n    ListenBacklog = options.Backlog,\r\n    ConnectionOptionsCallback = async (quicConnection, helloInfo, cancellationToken) =\u003e\r\n    {\r\n        var serverAuthenticationOptions = await _tlsConnectionOptions.OnConnection(new TlsConnectionCallbackContext\r\n        {\r\n            CancellationToken = cancellationToken,\r\n            ClientHelloInfo = helloInfo,\r\n            State = _tlsConnectionOptions.OnConnectionState,\r\n            Connection = new QuicConnectionContext(quicConnection, _context), // wrap QuicConnection with our abstraction here\r\n        });\r\n        var connectionOptions = new QuicServerConnectionOptions\r\n        {\r\n            ServerAuthenticationOptions = serverAuthenticationOptions,\r\n            IdleTimeout = options.IdleTimeout,\r\n            MaxInboundBidirectionalStreams = options.MaxBidirectionalStreamCount,\r\n            MaxInboundUnidirectionalStreams = options.MaxUnidirectionalStreamCount,\r\n            DefaultCloseErrorCode = 0,\r\n            DefaultStreamErrorCode = 0,\r\n        };\r\n        return connectionOptions;\r\n    }\r\n}\r\n```\r\n\r\nOnce the connection is accepted and returned from\r\n\r\n```cs\r\nvar quicConnection = await _listener.AcceptConnectionAsync(cancellationToken);\r\nvar connectionContext = new QuicConnectionContext(quicConnection, _context);\r\n```\r\n\r\nThe code above is creating our abstraction - `QuicConnectionContext` - twice: once in the callback and then again after `AcceptConnectionAsync` returns. We don\u0027t want to do this because of allocations, but also because someone can update state on our connection abstraction, and that would disappear if it was recreated.\r\n\r\nIt would be better if we were able to create `QuicConnectionContext` once inside the callback, use it, then add it to a property bag on `QuicConnection`, and then use that value when `AcceptConnectionAsync` returns.\r\n\r\n```cs\r\nvar quicConnection = await _listener.AcceptConnectionAsync(cancellationToken);\r\nvar connectionContext = (QuicConnectionContext)quicConnection.Properties[QuicConnectionContextKey];\r\n```\r\n\r\nOther options include adding `QuicConnectionContext` to a `ConditionalWeakTable\u003cQuicConnection, QuicConnectionContext\u003e` inside the callback, then removing it outside the callback. But a place to stash state on the `QuicConnection` would be much simpler.\r\n\r\nThis isn\u0027t critical for .NET 7. Workarounds include using a weak table, allocating twice (yuck), or leaving `ConnectionContext` null in the callback and waiting for this API in .NET 8.\n\n### API Proposal\n\n```csharp\r\nnamespace System.Net.Quic;\r\n\r\npublic class QuicConnection\r\n{\r\n    public IDictionary\u003cstring, object?\u003e Properties { get; }\r\n}\r\n```\n\n### API Usage\n\n```cs\r\n_quicListenerOptions = new QuicListenerOptions\r\n{\r\n    ApplicationProtocols = _tlsConnectionOptions.ApplicationProtocols,\r\n    ListenEndPoint = listenEndPoint,\r\n    ListenBacklog = options.Backlog,\r\n    ConnectionOptionsCallback = async (quicConnection, helloInfo, cancellationToken) =\u003e\r\n    {\r\n        quicConnection.Properties[QuicConnectionContextKey] = new QuicConnectionContext(quicConnection, _context);\r\n        \r\n        // ...figure out conneciton options...\r\n\r\n        return connectionOptions;\r\n    }\r\n}\r\n```\r\n\r\n```cs\r\nvar quicConnection = await _listener.AcceptConnectionAsync(cancellationToken);\r\nvar connectionContext = (QuicConnectionContext)quicConnection.Properties[QuicConnectionContextKey];\r\n```\n\n### Alternative Designs\n\nAdd a state argument to `ConnectionOptionsCallback` callback and `AcceptConnectionAsync`.\r\n\r\n```cs\r\n_quicListenerOptions = new QuicListenerOptions\r\n{\r\n    ApplicationProtocols = _tlsConnectionOptions.ApplicationProtocols,\r\n    ListenEndPoint = listenEndPoint,\r\n    ListenBacklog = options.Backlog,\r\n    ConnectionOptionsCallback = async (quicConnection, helloInfo, state, cancellationToken) =\u003e\r\n    {\r\n        var listenerContext = (QuicListenerContext)state!\r\n        listenerContext._acceptingQuicConnectionContext = new QuicConnectionContext(quicConnection, _context);\r\n        \r\n        // ...figure out conneciton options...\r\n\r\n        return connectionOptions;\r\n    }\r\n}\r\n```\r\n\r\n```cs\r\nvar quicConnection = await _listener.AcceptConnectionAsync(cancellationToken, state: this);\r\nvar connectionContext = _acceptingQuicConnectionContext; // was set in callback\r\n```\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJamesNK\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-20T08:11:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G7dBN",
                                           "createdAt":  "2022-07-20T08:35:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "Following on from the alternative design idea:\r\n\r\n1. Is `ConnectionOptionsCallback` only invoked when `AcceptConnectionAsync` is called? And it is always finished before `AcceptConnectionAsync` is done. If it isn\u0027t then this approach won\u0027t work.\r\n2. Passing in state isn\u0027t really necessary. We can set a `_acceptingQuicConnectionContext` field via closure.",
                                           "updatedAt":  "2022-07-20T08:38:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5G_ism",
                                           "createdAt":  "2022-07-21T05:40:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "I updated ASP.NET Core to create our abstraction inside the callback and get/set it on a field. It appears to work: https://github.com/dotnet/aspnetcore/pull/42774\r\n\r\nIt feels a little hacky. A property bag on QuicConnection would be easier to follow.",
                                           "updatedAt":  "2022-07-21T05:46:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HBzmh",
                                           "createdAt":  "2022-07-21T15:50:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: We do not like the Property bag -- feels kind of very general-purpose, which bit us in the past on other APIs.\r\nThe alternative proposal sounds reasonable.\r\n\r\nWe expected that it is sufficient for 8.0 as we are past Platform Complete. Is it correct @JamesNK?",
                                           "updatedAt":  "2022-07-21T15:50:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HvPeI",
                                           "createdAt":  "2022-08-03T07:05:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "The alternative proposal doesn\u0027t work. The callback **isn\u0027t** run when `AcceptConnectionAsync` is called. It happens in a background thread. Saving state of the current connection via closure doesn\u0027t work. Neither will passing in state via `AcceptConnectionAsync`\r\n\r\nThat brings us back to the idea of adding a property bag to `QuicConnection`.\r\n\r\nI will see whether using a `ConditionalWeakTable` works but it feels hacky compared to a collection on `QuicConnection` itself.",
                                           "updatedAt":  "2022-08-03T07:48:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5H_psU",
                                           "createdAt":  "2022-08-08T09:12:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "\u003e The alternative proposal doesn\u0027t work. The callback isn\u0027t run when AcceptConnectionAsync is called. It happens in a background thread. \r\n\r\nAnd we can change that if we decide to support the state object. It\u0027s similar to my alternative design for `QuicListener` in https://github.com/dotnet/runtime/issues/67560.",
                                           "updatedAt":  "2022-08-08T09:12:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Twv2d",
                                           "createdAt":  "2023-01-26T16:41:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: the decision must be done 8.0 (no matter which one) as this might alter an existing API. For that reason, this is a high prio.",
                                           "updatedAt":  "2023-01-26T16:41:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ABlcc",
                                           "createdAt":  "2024-06-04T16:03:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Would simple `object? StateObject` property instead of dictionary work for you @JamesNK?",
                                           "updatedAt":  "2024-06-04T16:03:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AEONF",
                                           "createdAt":  "2024-06-04T23:48:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "JamesNK",
                                           "body":  "I think so. But a dictionary seems more flexible (multiple APIs could use it to stash information without overwriting each others changes) and it is like `SocketsHttpHandler.Properties` and `HttpRequestMessage.Properties`.\r\n\r\nAre you worried about performance? The dictionary could be lazily allocated if it is used to make it pay for play.",
                                           "updatedAt":  "2024-06-04T23:48:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AnFRw",
                                           "createdAt":  "2024-06-10T08:43:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "So we had another discussion about this internally. We\u0027re not fans of the dictionary, despite being a similar approach as in HTTP stack (we obsoleted that API some time ago and replaced it with the Options class which makes us wary of this approach). We\u0027d still prefer to use a single object instead. \r\nSince ASP is the only consumer for this and you have a workaround, we decided to postpone the API for the time being and not introduce anything yet.\r\nWe can make the final decision when we have more people wanting this (or something similar) and we have more feedback/input on this.",
                                           "updatedAt":  "2024-06-10T08:43:29Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "[API Proposal]: Add property bag to QuicConnection",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73053",
        "createdAt":  "2022-07-29T10:27:52Z",
        "number":  73053,
        "author":  "rzikm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-08-01T19:55:59Z",
        "body":  "`SslStream` supports some control over which certificates are to be considered as trusted. See `SslStreamCertificateContext.Trust` and e.g. https://github.com/dotnet/runtime/pull/55104.\r\n\r\nWhile we might not be able to force the QUIC TLS backend to send the trusted list as part of TLS handshake, we can still implement the certificate validation part of the above mentioned PR. The prerequisite to that is making the `SslStreamCertificateContext.Trust` public (Or at least visible to S.N.Q), same for internal members of `SslCertificateTrust`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOR3kgow==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5HeRxo",
                                           "createdAt":  "2022-07-29T10:28:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl, @vcsjones\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n`SslStream` supports some control over which certificates are to be considered as trusted. See `SslStreamCertificateContext.Trust` and e.g. https://github.com/dotnet/runtime/pull/55104.\r\n\r\nWhile we might not be able to force the QUIC TLS backend to send the trusted list as part of TLS handshake, we can still implement the certificate validation part of the above mentioned PR. The prerequisite to that is making the `SslStreamCertificateContext.Trust` public.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erzikm\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Security`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-29T10:28:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HeR0g",
                                           "createdAt":  "2022-07-29T10:28:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n`SslStream` supports some control over which certificates are to be considered as trusted. See `SslStreamCertificateContext.Trust` and e.g. https://github.com/dotnet/runtime/pull/55104.\r\n\r\nWhile we might not be able to force the QUIC TLS backend to send the trusted list as part of TLS handshake, we can still implement the certificate validation part of the above mentioned PR. The prerequisite to that is making the `SslStreamCertificateContext.Trust` public.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erzikm\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-07-29T10:28:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HeSCj",
                                           "createdAt":  "2022-07-29T10:29:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Tentatively assigned to Future, this probably is not critical for 7.0 but would be good for consistency.",
                                           "updatedAt":  "2022-07-29T10:29:15Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[QUIC] Add support for SslCertificateTrust",
        "labels":  [
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/74937",
        "createdAt":  "2022-09-01T16:21:35Z",
        "number":  74937,
        "author":  "steveharter",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-23T10:32:06Z",
        "body":  "### Description\r\n\r\nOn my local machine, \r\n`System.Net.Quic.Tests.MsQuicTests.ConnectWithUntrustedCaWithCustomTrust_OK(usePartialChain: True)` \r\nfails consistently even when run all by itself via\r\n` -method System.Net.Quic.Tests.MsQuicTests.ConnectWithUntrustedCaWithCustomTrust_OK`\r\n\r\n### Reproduction Steps\r\n\r\nWindows 11\r\n20 Cores\r\n```\r\nbuild -s clr+libs+libs.tests -c Release\r\nbuild -test -s libs.tests -c Release\r\n```\r\n\r\nNote that my machine is located in Fargo, ND at the Microsoft campus so if there are remote Azure machines, for example, that may be a factor.\r\n\r\n### Expected behavior\r\n\r\nNo failure\r\n\r\n### Actual behavior\r\n\r\n```\r\nc:\\git\\runtimeBaseline\\artifacts\\bin\\System.Net.Quic.Functional.Tests\\Release\\net7.0-windows\u003e\"C:\\git\\runtimeBaseline\\artifacts\\bin\\testhost\\net7.0-windows-Release-x64\\dotnet.exe\" exec --runtimeconfig System.Net.Quic.Functional.Tests.runtimeconfig.json --depsfile System.Net.Quic.Functional.Tests.deps.json xunit.console.dll System.Net.Quic.Functional.Tests.dll -nologo -notrait category=OuterLoop -notrait category=failing\r\n  Discovering: System.Net.Quic.Functional.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Net.Quic.Functional.Tests (found 103 of 112 test cases)\r\n  Starting:    System.Net.Quic.Functional.Tests (parallel test collections = on, max threads = 20)\r\n    System.Net.Quic.Tests.MsQuicPlatformDetectionTests.UnsupportedPlatforms_ThrowsPlatformNotSupportedException [SKIP]\r\n      Condition(s) not met: \"IsQuicUnsupported\"\r\n    System.Net.Quic.Tests.MsQuicTests.ConnectWithUntrustedCaWithCustomTrust_OK(usePartialChain: True) [FAIL]\r\n      System.Security.Authentication.AuthenticationException : Authentication failed because the remote party sent a TLS alert: \u0027UserCanceled\u0027.\r\n      Stack Trace:\r\n        C:\\git\\runtimeBaseline\\src\\libraries\\System.Net.Quic\\src\\System\\Net\\Quic\\QuicConnection.cs(471,0): at System.Net.Quic.QuicConnection.HandleEventShutdownInitiatedByTransport(_SHUTDOWN_INITIATED_BY_TRANSPORT_e__Struct\u0026 data)\r\n        C:\\git\\runtimeBaseline\\src\\libraries\\System.Net.Quic\\src\\System\\Net\\Quic\\QuicConnection.cs(576,0): at System.Net.Quic.QuicConnection.HandleConnectionEvent(QUIC_CONNECTION_EVENT\u0026 connectionEvent)\r\n        C:\\git\\runtimeBaseline\\src\\libraries\\System.Net.Quic\\src\\System\\Net\\Quic\\QuicConnection.cs(605,0): at System.Net.Quic.QuicConnection.NativeCallback(QUIC_HANDLE* connection, Void* context, QUIC_CONNECTION_EVENT* connectionEvent)\r\n        --- End of stack trace from previous location ---\r\n        C:\\git\\runtimeBaseline\\src\\libraries\\System.Net.Quic\\src\\System\\Net\\Quic\\Internal\\ValueTaskSource.cs(176,0): at System.Net.Quic.ValueTaskSource.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n        C:\\git\\runtimeBaseline\\src\\libraries\\System.Net.Quic\\src\\System\\Net\\Quic\\QuicConnection.cs(313,0): at System.Net.Quic.QuicConnection.FinishConnectAsync(QuicClientConnectionOptions options, CancellationToken cancellationToken)\r\n        C:\\git\\runtimeBaseline\\src\\libraries\\System.Net.Quic\\src\\System\\Net\\Quic\\QuicConnection.cs(76,0): at System.Net.Quic.QuicConnection.ConnectAsync(QuicClientConnectionOptions options, CancellationToken cancellationToken)\r\n        C:\\git\\runtimeBaseline\\src\\libraries\\System.Net.Quic\\src\\System\\Net\\Quic\\QuicConnection.cs(76,0): at System.Net.Quic.QuicConnection.ConnectAsync(QuicClientConnectionOptions options, CancellationToken cancellationToken)\r\n        C:\\git\\runtimeBaseline\\src\\libraries\\System.Net.Quic\\tests\\FunctionalTests\\QuicTestBase.cs(218,0): at System.Net.Quic.Tests.QuicTestBase.CreateConnectedQuicConnection(QuicClientConnectionOptions clientOptions, QuicListener listener)\r\n        C:\\git\\runtimeBaseline\\src\\libraries\\System.Net.Quic\\tests\\FunctionalTests\\QuicTestBase.cs(218,0): at System.Net.Quic.Tests.QuicTestBase.CreateConnectedQuicConnection(QuicClientConnectionOptions clientOptions, QuicListener listener)\r\n        C:\\git\\runtimeBaseline\\src\\libraries\\System.Net.Quic\\tests\\FunctionalTests\\MsQuicTests.cs(187,0): at System.Net.Quic.Tests.MsQuicTests.ConnectWithUntrustedCaWithCustomTrust_OK(Boolean usePartialChain)\r\n        C:\\git\\runtimeBaseline\\src\\libraries\\System.Net.Quic\\tests\\FunctionalTests\\MsQuicTests.cs(189,0): at System.Net.Quic.Tests.MsQuicTests.ConnectWithUntrustedCaWithCustomTrust_OK(Boolean usePartialChain)\r\n        --- End of stack trace from previous location ---\r\n  Finished:    System.Net.Quic.Functional.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Net.Quic.Functional.Tests  Total: 322, Errors: 0, Failed: 1, Skipped: 1, Time: 64.296s\r\n```\r\n\r\n### Regression?\r\n\r\nNot sure as I typically don\u0027t run all library tests; I don\u0027t remember seeing this a few weeks ago\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOU8K4Ng==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5JmC_x",
                                           "createdAt":  "2022-09-01T19:48:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "This test only use `loopback` @steveharter. Any suggestions how to debug this more @rzikm? I was planning to hook up the test event listener @ManickaP put in for other failure but this may be simply timing out....",
                                           "updatedAt":  "2022-09-01T19:48:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JmE2Q",
                                           "createdAt":  "2022-09-01T19:58:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "`UserCanceled` means we killed the connection before handshake finished, so around the time we are invoking the connectionOptions callback or certificate selection callback. A good place to start would be awaiting the `QuicListener.AcceptConnection` task or placing a breakpoint in `QuicListener.PendingConnection.StartHandshake` and see which exception pops up there.\r\n\r\nhttps://github.com/dotnet/runtime/blob/104fe14a7e0d9f027b37c23e5e3c58621c711353/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicListener.PendingConnection.cs#L54-L79",
                                           "updatedAt":  "2022-09-01T20:00:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JohTT",
                                           "createdAt":  "2022-09-02T10:57:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "We have an internal timeout to finish the handshake: https://source.dot.net/#System.Net.Quic/System/Net/Quic/QuicListener.PendingConnection.cs,76d2d524386f0e43,references\r\nBecause at this point in time in the handshake process, msquic will not kill the connection on their own: https://github.com/microsoft/msquic/discussions/2705\r\n\r\n10 seconds seemed like long enough time for the callback and the handshake. Note that if the test failed sooner than 10 seconds, it\u0027s something else.\r\n\r\nAlso note that no user cancellation tokens are used to kill this, they will only cancel pending AcceptConnection operation.",
                                           "updatedAt":  "2022-09-02T10:58:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Johjf",
                                           "createdAt":  "2022-09-02T10:58:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Also the exception from handshake will propagate to AcceptConnection on the listener, so you should see it there.",
                                           "updatedAt":  "2022-09-02T10:58:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J0GZd",
                                           "createdAt":  "2022-09-06T16:37:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: Looks environmental - CI and our machines work just fine. We should try to track it down on @steveharter\u0027s machine ...\r\nNot critical for 7.0.",
                                           "updatedAt":  "2022-09-06T16:37:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J01dm",
                                           "createdAt":  "2022-09-06T19:53:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Additional info:\r\n\r\nBoth the `true` and `false` argument for the test case input fails when debugging.\r\n\r\nRun root exception causing the test to fail is `System.Security.Cryptography.CryptographicException: \u0027Access is denied.\u0027` with this call stack\r\n```\r\nSystem.Security.Cryptography.dll!System.Security.Cryptography.X509Certificates.StorePal.Add(System.Security.Cryptography.X509Certificates.ICertificatePal certificate = {System.Security.Cryptography.X509Certificates.CertificatePal}) Line 55\tC#\tSymbols loaded.\r\n \tSystem.Security.Cryptography.dll!System.Security.Cryptography.X509Certificates.X509Store.Add(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate = {System.Security.Cryptography.X509Certificates.X509Certificate2}) Line 137\tC#\tSymbols loaded.\r\n\u003e\tSystem.Net.Security.dll!System.Net.Security.SslStreamCertificateContext.SslStreamCertificateContext(System.Security.Cryptography.X509Certificates.X509Certificate2 target = {System.Security.Cryptography.X509Certificates.X509Certificate2}, System.Security.Cryptography.X509Certificates.X509Certificate2[] intermediates = {System.Security.Cryptography.X509Certificates.X509Certificate2[4]}, System.Net.Security.SslCertificateTrust trust = null) Line 77\tC#\tSymbols loaded.\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStreamCertificateContext.Create(System.Security.Cryptography.X509Certificates.X509Certificate2 target = {System.Security.Cryptography.X509Certificates.X509Certificate2}, System.Security.Cryptography.X509Certificates.X509Certificate2Collection additionalCertificates = {System.Security.Cryptography.X509Certificates.X509Certificate2Collection}, bool offline = false, System.Net.Security.SslCertificateTrust trust = null, bool noOcspFetch = false) Line 107\tC#\tSymbols loaded.\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStreamCertificateContext.Create(System.Security.Cryptography.X509Certificates.X509Certificate2 target = {System.Security.Cryptography.X509Certificates.X509Certificate2}, System.Security.Cryptography.X509Certificates.X509Certificate2Collection additionalCertificates = {System.Security.Cryptography.X509Certificates.X509Certificate2Collection}, bool offline = false, System.Net.Security.SslCertificateTrust trust = null) Line 23\tC#\tSymbols loaded.\r\n \tSystem.Net.Quic.Functional.Tests.dll!System.Net.Quic.Tests.MsQuicTests.ConnectWithUntrustedCaWithCustomTrust_OK.AnonymousMethod__0(System.Net.Quic.QuicConnection _ = {System.Net.Quic.QuicConnection}, System.Net.Security.SslClientHelloInfo _ = {System.Net.Security.SslClientHelloInfo}, System.Threading.CancellationToken _ = IsCancellationRequested = false) Line 159\tC#\tSymbols loaded.\r\n \tSystem.Net.Quic.dll!System.Net.Quic.QuicListener.PendingConnection.StartHandshake(System.Net.Quic.QuicConnection connection = {System.Net.Quic.QuicConnection}, System.Net.Security.SslClientHelloInfo clientHello = {System.Net.Security.SslClientHelloInfo}, System.Func\u003cSystem.Net.Quic.QuicConnection, System.Net.Security.SslClientHelloInfo, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask\u003cSystem.Net.Quic.QuicServerConnectionOptions\u003e\u003e connectionOptionsCallback = {Method = {System.Reflection.RuntimeMethodInfo}}) Line 59\tC#\tSymbols loaded.\r\n \tSystem.Net.Quic.dll!System.Net.Quic.QuicListener.HandleEventNewConnection(ref Microsoft.Quic.QUIC_LISTENER_EVENT._Anonymous_e__Union._NEW_CONNECTION_e__Struct data = {Microsoft.Quic.QUIC_LISTENER_EVENT._Anonymous_e__Union._NEW_CONNECTION_e__Struct}) Line 200\tC#\tSymbols loaded.\r\n \tSystem.Net.Quic.dll!System.Net.Quic.QuicListener.HandleListenerEvent(ref Microsoft.Quic.QUIC_LISTENER_EVENT listenerEvent = {Microsoft.Quic.QUIC_LISTENER_EVENT}) Line 212\tC#\tSymbols loaded.\r\n \tSystem.Net.Quic.dll!System.Net.Quic.QuicListener.NativeCallback(Microsoft.Quic.QUIC_HANDLE* listener = 0x00000241a6500750, void* context = 0x000002010bb41048, Microsoft.Quic.QUIC_LISTENER_EVENT* listenerEvent = 0x0000005c9d7feba0) Line 241\tC#\tSymbols loaded.\r\n```\r\n\r\n```cs\r\n        public void Add(ICertificatePal certificate)\r\n        {\r\n            using (SafeCertContextHandle certContext = ((CertificatePal)certificate).GetCertContext())\r\n            {\r\n                if (!Interop.Crypt32.CertAddCertificateContextToStore(_certStore, certContext, Interop.Crypt32.CertStoreAddDisposition.CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES, IntPtr.Zero))\r\n                    throw Marshal.GetLastPInvokeError().ToCryptographicException();\r\n            }\r\n        }\r\n````\r\n\r\nHowever, `CryptographicException: \u0027Access is denied.\u0027` also occurs during test start-up in `System.Net.Quic.Tests.CertificateSetup()`, but the exception is eaten and doesn\u0027t cause the tests not to run:\r\n```\r\n\u003e\tSystem.Security.Cryptography.dll!System.Security.Cryptography.X509Certificates.StorePal.FromSystemStore(string storeName = \"CA\", System.Security.Cryptography.X509Certificates.StoreLocation storeLocation = LocalMachine, System.Security.Cryptography.X509Certificates.OpenFlags openFlags = ReadWrite) Line 191\tC#\tSymbols loaded.\r\n \tSystem.Security.Cryptography.dll!System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags flags = ReadWrite) Line 108\tC#\tSymbols loaded.\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStreamCertificateContext.SslStreamCertificateContext(System.Security.Cryptography.X509Certificates.X509Certificate2 target = {System.Security.Cryptography.X509Certificates.X509Certificate2}, System.Security.Cryptography.X509Certificates.X509Certificate2[] intermediates = {System.Security.Cryptography.X509Certificates.X509Certificate2[4]}, System.Net.Security.SslCertificateTrust trust = null) Line 51\tC#\tSymbols loaded.\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStreamCertificateContext.Create(System.Security.Cryptography.X509Certificates.X509Certificate2 target = {System.Security.Cryptography.X509Certificates.X509Certificate2}, System.Security.Cryptography.X509Certificates.X509Certificate2Collection additionalCertificates = {System.Security.Cryptography.X509Certificates.X509Certificate2Collection}, bool offline = false, System.Net.Security.SslCertificateTrust trust = null, bool noOcspFetch = false) Line 107\tC#\tSymbols loaded.\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStreamCertificateContext.Create(System.Security.Cryptography.X509Certificates.X509Certificate2 target = {System.Security.Cryptography.X509Certificates.X509Certificate2}, System.Security.Cryptography.X509Certificates.X509Certificate2Collection additionalCertificates = {System.Security.Cryptography.X509Certificates.X509Certificate2Collection}, bool offline = false, System.Net.Security.SslCertificateTrust trust = null) Line 23\tC#\tSymbols loaded.\r\n \tSystem.Net.Quic.Functional.Tests.dll!System.Net.Quic.Tests.MsQuicTests.ConnectWithUntrustedCaWithCustomTrust_OK.AnonymousMethod__0(System.Net.Quic.QuicConnection _ = {System.Net.Quic.QuicConnection}, System.Net.Security.SslClientHelloInfo _ = {System.Net.Security.SslClientHelloInfo}, System.Threading.CancellationToken _ = IsCancellationRequested = false) Line 159\tC#\tSymbols loaded.\r\n \tSystem.Net.Quic.dll!System.Net.Quic.QuicListener.PendingConnection.StartHandshake(System.Net.Quic.QuicConnection connection = {System.Net.Quic.QuicConnection}, System.Net.Security.SslClientHelloInfo clientHello = {System.Net.Security.SslClientHelloInfo}, System.Func\u003cSystem.Net.Quic.QuicConnection, System.Net.Security.SslClientHelloInfo, System.Threading.CancellationToken, System.Threading.Tasks.ValueTask\u003cSystem.Net.Quic.QuicServerConnectionOptions\u003e\u003e connectionOptionsCallback = {Method = {System.Reflection.RuntimeMethodInfo}}) Line 59\tC#\tSymbols loaded.\r\n \tSystem.Net.Quic.dll!System.Net.Quic.QuicListener.HandleEventNewConnection(ref Microsoft.Quic.QUIC_LISTENER_EVENT._Anonymous_e__Union._NEW_CONNECTION_e__Struct data = {Microsoft.Quic.QUIC_LISTENER_EVENT._Anonymous_e__Union._NEW_CONNECTION_e__Struct}) Line 200\tC#\tSymbols loaded.\r\n \tSystem.Net.Quic.dll!System.Net.Quic.QuicListener.HandleListenerEvent(ref Microsoft.Quic.QUIC_LISTENER_EVENT listenerEvent = {Microsoft.Quic.QUIC_LISTENER_EVENT}) Line 212\tC#\tSymbols loaded.\r\n \tSystem.Net.Quic.dll!System.Net.Quic.QuicListener.NativeCallback(Microsoft.Quic.QUIC_HANDLE* listener = 0x0000024793c70750, void* context = 0x00000206f9601050, Microsoft.Quic.QUIC_LISTENER_EVENT* listenerEvent = 0x000000f032b3eb30) Line 241\tC#\tSymbols loaded.\r\n```\r\n```cs\r\n        internal static partial IStorePal FromSystemStore(string storeName, StoreLocation storeLocation, OpenFlags openFlags)\r\n        {\r\n            Interop.Crypt32.CertStoreFlags certStoreFlags = MapX509StoreFlags(storeLocation, openFlags);\r\n\r\n            SafeCertStoreHandle certStore = Interop.crypt32.CertOpenStore(CertStoreProvider.CERT_STORE_PROV_SYSTEM_W, Interop.Crypt32.CertEncodingType.All, IntPtr.Zero, certStoreFlags, storeName);\r\n            if (certStore.IsInvalid)\r\n            {\r\n                Exception e = Marshal.GetLastPInvokeError().ToCryptographicException();\r\n                certStore.Dispose();\r\n                throw e;\r\n            }\r\n```\r\n\r\n",
                                           "updatedAt":  "2022-09-06T19:53:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J02e1",
                                           "createdAt":  "2022-09-06T19:58:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "nice, thanks for the update @steveharter. It seems like we should deal with the error and skip the test when we cannot add needed certificates. Can you pass tests in `System.Net.Security/tests/FunctionalTests` ???  There is similar pattern and I\u0027m wondering if it works there or not. ",
                                           "updatedAt":  "2022-09-06T19:58:06Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5J07cl",
                                           "createdAt":  "2022-09-06T20:21:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveharter",
                                           "body":  "Also note that the tests pass when running in administrator mode. They fail when running as current user, although I am an admin on the machine.\r\n\r\n\u003e Can you pass tests in System.Net.Security/tests/FunctionalTest\r\n\r\nIn Sytem.Net.Security.Tests I do also get an auth failure that doesn\u0027t occur is running as admin:\r\n```\r\n    System.Net.Security.Tests.SslStreamNetworkStreamTest.SslStream_UntrustedCaWithCustomTrust_OK(usePartialChain: True) [FAIL]\r\n      System.Security.Cryptography.CryptographicException : Access is denied.\r\n      Stack Trace:\r\n        C:\\git\\runtimeBaseline\\src\\libraries\\System.Security.Cryptography\\src\\System\\Security\\Cryptography\\X509Certificates\\StorePal.Windows.cs(55,0): at System.Security.Cryptography.X509Certificates.StorePal.Add(ICertificatePal certificate)\r\n        C:\\git\\runtimeBaseline\\src\\libraries\\System.Security.Cryptography\\src\\System\\Security\\Cryptography\\X509Certificates\\X509Store.cs(136,0): at System.Security.Cryptography.X509Certificates.X509Store.Add(X509Certificate2 certificate)\r\n        C:\\git\\runtimeBaseline\\src\\libraries\\System.Net.Security\\src\\System\\Net\\Security\\SslStreamCertificateContext.Windows.cs(107,0): at System.Net.Security.SslStreamCertificateContext..ctor(X509Certificate2 target, X509Certificate2[] intermediates, SslCertificateTrust trust)\r\n        C:\\git\\runtimeBaseline\\src\\libraries\\System.Net.Security\\src\\System\\Net\\Security\\SslStreamCertificateContext.cs(107,0): at System.Net.Security.SslStreamCertificateContext.Create(X509Certificate2 target, X509Certificate2Collection additionalCertificates, Boolean offline, SslCertificateTrust trust, Boolean noOcspFetch)\r\n        C:\\git\\runtimeBaseline\\src\\libraries\\System.Net.Security\\src\\System\\Net\\Security\\SslStreamCertificateContext.cs(23,0): at System.Net.Security.SslStreamCertificateContext.Create(X509Certificate2 target, X509Certificate2Collection additionalCertificates, Boolean offline, SslCertificateTrust trust)\r\n        C:\\git\\runtimeBaseline\\src\\libraries\\System.Net.Security\\tests\\FunctionalTests\\SslStreamNetworkStreamTest.cs(794,0): at System.Net.Security.Tests.SslStreamNetworkStreamTest.SslStream_UntrustedCaWithCustomTrust_OK(Boolean usePartialChain)\r\n        --- End of stack trace from previous location ---\r\n    System.Net.Security.Tests.SslStreamNetworkStreamTest.SslStream_UnifiedHello_Ok [SKIP]\r\n      Condition(s) not met: \"SupportsTls10\"\r\n  Finished:    System.Net.Security.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Net.Security.Tests  Total: 5040, Errors: 0, Failed: 1, Skipped: 21, Time: 12.484s```",
                                           "updatedAt":  "2022-09-06T20:21:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Twrg2",
                                           "createdAt":  "2023-01-26T16:29:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: this is general error with certificates, happens with security tests as well. It is also a local problem. Solution might be to avoid calling tests that would fail with access denied (conditional test). Not critical for 8.0.",
                                           "updatedAt":  "2023-01-26T16:29:05Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  " System.Net.Quic.Tests.MsQuicTests.ConnectWithUntrustedCaWithCustomTrust_OK(usePartialChain: True) Fails locally",
        "labels":  [
                       "test-failure",
                       "test-enhancement",
                       "test-run-core",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75009",
        "createdAt":  "2022-09-02T17:28:51Z",
        "number":  75009,
        "author":  "ManickaP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-26T16:26:07Z",
        "body":  "Introduce a source generator for interop calls from: https://github.com/dotnet/runtime/blob/main/src/libraries/System.Net.Quic/src/System/Net/Quic/Internal/MsQuicApi.NativeMethods.cs.\r\nConsider addressing comments:\r\n- make them static, hide `ApiTable` and `Api`: https://github.com/dotnet/runtime/pull/74669#issuecomment-1229853340\r\n- customize `Open...` methods to directly create `MsQuicContextSafeHandle`: https://github.com/dotnet/runtime/pull/74669#discussion_r959823243\r\n- include native call logging\r\n  - we might create another logging source for this and for callback event details, which logging might be generalized: https://github.com/dotnet/runtime/pull/74479#discussion_r953526173\r\n  - common logging issue for Quic: https://github.com/dotnet/runtime/issues/51177",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOU8Kn3Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5JqAU0",
                                           "createdAt":  "2022-09-02T17:29:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nIntroduce a source generator for interop calls from: https://github.com/dotnet/runtime/blob/main/src/libraries/System.Net.Quic/src/System/Net/Quic/Internal/MsQuicApi.NativeMethods.cs.\r\nConsider addressing comments:\r\n- make them static, hide `ApiTable` and `Api`: https://github.com/dotnet/runtime/pull/74669#issuecomment-1229853340\r\n- customize `Open...` methods to directly create `MsQuicContextSafeHandle`: https://github.com/dotnet/runtime/pull/74669#discussion_r959823243\r\n- include native call logging\r\n  - we might create another logging source for this and for callback event details, which logging might be generalized: https://github.com/dotnet/runtime/pull/74479#discussion_r953526173\r\n  - common logging issue for Quic: https://github.com/dotnet/runtime/issues/51177\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eManickaP\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e8.0.0\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-02T17:29:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JqFwN",
                                           "createdAt":  "2022-09-02T17:57:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "teo-tsirpanis",
                                           "body":  "Would #63590 cover your needs?",
                                           "updatedAt":  "2022-09-02T17:57:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5JqN5z",
                                           "createdAt":  "2022-09-02T18:42:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCrp3LQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "AaronRobinsonMSFT",
                                                                               "createdAt":  "2022-09-04T15:23:52Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2022-09-05T08:12:31Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "jkoritzinsky",
                                           "body":  "I think we can handle this with https://github.com/dotnet/runtime/pull/68276. MSQuic\u0027s table-based API was one of the motivating ideas behind the \"no-implicit-this\" support in that PR.",
                                           "updatedAt":  "2022-09-02T18:42:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Twqfd",
                                           "createdAt":  "2023-01-26T16:25:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: we have a functional interop layer in place, there isn\u0027t many API changes coming from msquic and this is not a simple task. For those reasons putting into future.",
                                           "updatedAt":  "2023-01-26T16:25:59Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[QUIC] Source generators for interop calls",
        "labels":  [
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75343",
        "createdAt":  "2022-09-09T14:47:59Z",
        "number":  75343,
        "author":  "rzikm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-05-22T14:00:31Z",
        "body":  "### Description\r\n\r\nQuicListener will not throw when attempting to listen on IPv6 address if IPv6 was disabled on the system. This diverges from the behavior common e.g. on Sockets (which will throw when binding to an IPv6 address on such systems).\r\n\r\nThis is an issue in the underlying MsQuic library: https://github.com/microsoft/msquic/issues/3052\r\n\r\n### Reproduction Steps\r\n\r\n1. Disable IPv6\r\n2. Start QuicListener on IPv6 loopback (or other IPv6 address)\r\n\r\n### Expected behavior\r\n\r\n`QuicException` with `QuicError.AddressNotAvailable`\r\n\r\n### Actual behavior\r\n\r\nQuicListener successfully started, but it is not possible to create connections to that listener.\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\n_No response_\r\n\r\n### Other information\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXNIfOg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5KCHce",
                                           "createdAt":  "2022-09-09T14:48:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nQuicListener will not throw when attempting to listen on IPv6 address if IPv6 was disabled on the system. This diverges from the behavior common e.g. on Sockets (which will throw when binding to an IPv6 address on such systems).\n\n### Reproduction Steps\n\n1. Disable IPv6\r\n2. Start QuicListener on IPv6 loopback (or other IPv6 address)\n\n### Expected behavior\n\n`QuicException` with `QuicError.AddressNotAvailable`\n\n### Actual behavior\n\nQuicListener successfully started, but it is not possible to create connections to that listener.\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erzikm\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-09T14:48:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KCt6P",
                                           "createdAt":  "2022-09-09T16:58:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "How is the IPv6 disabled? We would fail to create IPv6 socket? Or just fail to bind/connect to `::1` ???",
                                           "updatedAt":  "2022-09-09T16:58:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5KDoe3",
                                           "createdAt":  "2022-09-09T20:59:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCr_aWw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "wfurt",
                                                                               "createdAt":  "2022-09-09T21:39:40Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "rzikm",
                                           "body":  "I used `sysctl` to set all `net.ipv6.conf.*.disable_ipv6=1`, I found it in some guide.\r\n\r\nThat essentially got me the same behavior as on the OpenSUSE image we have on CI",
                                           "updatedAt":  "2022-09-09T20:59:40Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5LFzPH",
                                           "createdAt":  "2022-09-27T17:15:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "karelz",
                                           "body":  "Triage: It would be nice to detect it on our side, because msquic does not have easy way to fix it.\r\nWe should check if IPv6 is supported first.\r\n\r\nIt happened only in our test runs for now, not high pri.",
                                           "updatedAt":  "2022-09-27T17:15:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5c0h86",
                                           "createdAt":  "2023-05-22T14:00:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "This is document in our troubleshooting guide. ",
                                           "updatedAt":  "2023-05-22T14:00:31Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "QuicListener will not throw when listening on IPv6 address on systems with disabled IPv6",
        "labels":  [
                       "enhancement",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/80687",
        "createdAt":  "2023-01-16T11:05:34Z",
        "number":  80687,
        "author":  "ManickaP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-01-17T12:55:26Z",
        "body":  "Since we do not announce a newly opened stream until we send some data, the following scenario will never work:\r\n```C#\r\nvar outgoingStream = await connection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);\r\nvar buffer = new byte[100];\r\nawait outgoingStream.ReadAsync(buffer);\r\n...\r\n```\r\nI do concur that this is not very logical use of the stream, but after quick peruse, I haven\u0027t found anything against this in the spec (I might have missed it though).\r\n\r\nThoughts on this? @wfurt, @CarnaViire, @rzikm, @nibanks",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOUpNGhg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5SfEEe",
                                           "createdAt":  "2023-01-16T11:05:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nSince we do not announce a newly opened stream until we send some data, the following scenario will never work:\r\n```C#\r\nvar outgoingStream = await connection.OpenOutboundStreamAsync(QuicStreamType.Bidirectional);\r\nvar buffer = new byte[100];\r\nawait outgoingStream.ReadAsync(buffer);\r\n...\r\n```\r\nI do concur that this is not very logical use of the stream, but after quick peruse, I haven\u0027t found anything against this in the spec (I might have missed it though).\r\n\r\nThoughts on this? @wfurt, @CarnaViire, @rzikm, @nibanks\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eManickaP\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-01-16T11:05:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SfOSk",
                                           "createdAt":  "2023-01-16T11:37:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "The RFC says that the stream is opened by sending the first STREAM frame for it. It is a bit unfortunate/misleading that our Open*StreamAsync method does not really open the stream as RFC defines it :D. We can force open the stream by sending an empty STREAM frame when opening the stream by passing an appropriate flag to MsQuic (it might be interesting to be able to do this also later by calling Flush, I am not sure if MsQuic supports that)\r\n\r\nFrom a perspective of a protocol built on top of QUIC, it seems weird to open a stream and wait for data on it. Looking at it from the other side: why should peer have to wait for us to open a stream so that it can send data when it can open its own stream and start sending immediately?\r\n\r\nI see a few options:\r\n1. Always force open the stream when opening it - I believe that if the user queues data quickly enough, it will still go out as a single STREAM frame, but there is no guarantee and it might cause more datagrams to be sent as a result.\r\n2. Throw an exception in cases like above to prevent user being stuck in self-deadlock.\r\n3. Lazily force-open the stream in cases like above (if supported by MsQuic).\r\n\r\nPersonally, I like 2 and 3.",
                                           "updatedAt":  "2023-01-16T11:37:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SfxUw",
                                           "createdAt":  "2023-01-16T13:25:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "nibanks",
                                           "body":  "Sounds like you might want the `QUIC_STREAM_START_FLAG_IMMEDIATE` flag:\r\n```c\r\nQUIC_STREAM_START_FLAG_IMMEDIATE            = 0x0001,   // Immediately informs peer that stream is open.\r\n```\r\nThis is for cases where you want to immediately send out that zero-length stream frame to inform the peer.\r\n\r\nThough, another interesting angle to consider here, is that even if you don\u0027t do this, but if you then open and start another stream after it, the act of starting that other stream implicitly informs the peer of the first stream\u0027s creation; so you could then start receiving on it...",
                                           "updatedAt":  "2023-01-16T13:25:50Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Sf3CY",
                                           "createdAt":  "2023-01-16T13:44:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Apart from QUIC_STREAM_START_FLAG_IMMEDIATE, is there other way to notify the peer about the stream? E.g. by issuing 0-byte send?\r\n",
                                           "updatedAt":  "2023-01-16T13:44:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5SkyvQ",
                                           "createdAt":  "2023-01-17T12:49:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCyyudA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2023-01-17T12:51:50Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2023-01-17T16:10:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "nibanks",
                                           "body":  "Yes. I believe you can do a 0-byte send with the `QUIC_SEND_FLAG_START` flag.",
                                           "updatedAt":  "2023-01-17T12:49:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Sk0aG",
                                           "createdAt":  "2023-01-17T12:55:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCy22Ig==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2023-01-17T17:02:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "CONFUSED",
                                                                               "user":  "CarnaViire",
                                                                               "createdAt":  "2023-01-18T12:59:47Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "nibanks",
                                           "body":  "Actually, after looking at the code, if you\u0027ve previously started the stream, I *think* sending a 0-length send, even with the \"start\" flag, won\u0027t do anything.",
                                           "updatedAt":  "2023-01-17T12:55:26Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[QUIC] Bidirectional stream cannot start with receiving",
        "labels":  [
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/82404",
        "createdAt":  "2023-02-20T16:00:49Z",
        "number":  82404,
        "author":  "CarnaViire",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-10T08:48:45Z",
        "body":  "Currently, we are mostly using MsQuic\u0027s basic name resolution, that would only use the first IP resolved.\r\n\r\nWe agreed previously that we would like to unify Sockets and Quic in terms that\r\n- In both cases name resolution happens in managed code (and preferably by the same code)\r\n- We would have more resilient algorithm that traverses a list of resolved IPs instead of only trying the first, which might not work\r\n- We would be able to improve/extend the algorithm by configuration options discussed in https://github.com/dotnet/runtime/issues/68967, https://github.com/dotnet/runtime/issues/26177\r\n\r\nThat would also help to unify name resolution errors/exceptions, see https://github.com/dotnet/runtime/issues/82262#issuecomment-1433768487, https://github.com/dotnet/runtime/issues/76644",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOgJx9HQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5Vqo00",
                                           "createdAt":  "2023-02-20T16:01:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrently, we are mostly using MsQuic\u0027s basic name resolution, that would only use the first IP resolved.\r\n\r\nWe agreed previously that we would like to unify Sockets and Quic in terms that\r\n- In both cases name resolution happens in managed code (and preferably by the same code)\r\n- We would have more resilient algorithm that traverses a list of resolved IPs instead of only trying the first, which might not work\r\n- We would be able to improve/extend the algorithm by configuration options discussed in https://github.com/dotnet/runtime/issues/68967, https://github.com/dotnet/runtime/issues/26177\r\n\r\nThat would also help to unify name resolution errors/exceptions, see https://github.com/dotnet/runtime/issues/82262#issuecomment-1433768487, https://github.com/dotnet/runtime/issues/76644\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eCarnaViire\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-02-20T16:01:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5VqpY1",
                                           "createdAt":  "2023-02-20T16:02:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "Triage: optimistically putting to 8.0 as it touches exceptions (#82262)",
                                           "updatedAt":  "2023-02-20T16:02:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55p403",
                                           "createdAt":  "2024-04-06T09:04:21Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "liveans",
                                           "body":  "There are better ways to solve this other than my PR (#99204) so I closed the PR for now.\r\n\r\nHere is the msquic issue related to DNS Resolution: https://github.com/microsoft/msquic/issues/1181\r\n",
                                           "updatedAt":  "2024-04-06T09:04:21Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AnH0d",
                                           "createdAt":  "2024-06-10T08:48:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: we still don\u0027t have a full consensus on how exactly this should be resolved and we don\u0027t have a direct usage/complains about the current behavior, so punting this. ",
                                           "updatedAt":  "2024-06-10T08:48:44Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Unify DNS resolution between Sockets and QUIC",
        "labels":  [
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/83012",
        "createdAt":  "2023-03-06T00:33:38Z",
        "number":  83012,
        "author":  "wfurt",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-03-14T18:33:04Z",
        "body":  "```\r\n      System.Net.Quic.Tests.QuicListenerTests.ListenOnAlreadyUsedPort_Throws_AddressInUse [FAIL]\r\n        Assert.Throws() Failure\r\n        Expected: typeof(System.Net.Quic.QuicException)\r\n        Actual:   (No exception was thrown)\r\n        Stack Trace:\r\n          /Users/furt/github/wfurt-runtime2/src/libraries/System.Net.Quic/tests/FunctionalTests/QuicTestBase.cs(63,0): at System.Net.Quic.Tests.QuicTestBase.AssertThrowsQuicExceptionAsync(QuicError expectedError, Func`1 testCode)\r\n          /Users/furt/github/wfurt-runtime2/src/libraries/System.Net.Quic/tests/FunctionalTests/QuicListenerTests.cs(312,0): at System.Net.Quic.Tests.QuicListenerTests.ListenOnAlreadyUsedPort_Throws_AddressInUse()\r\n          --- End of stack trace from previous location ---\r\n        Output:\r\n          Using libmsquic.dylib version=2.2.0.0 commit=bd8602cffb379a7d7a0888cf98aed86d2d166c0a\r\n```\r\n\r\nThis seems to be platform difference. The test would block IPv4 port but since MsQuic actually uses IPv6 socket in dual mode macOS allows the bind:\r\n```\r\nShining:wfurt-msquic furt$ netstat -an| grep 63385\r\nudp46      0      0  *.63385                *.*\r\nudp4       0      0  *.63385                *.*\r\n```\r\n\r\nWe may fix it just for macOS or we may consider updating the test so it uses `AddressFamily` consistent with the implementation. ",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOV4l9_Q==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5WvZ8c",
                                           "createdAt":  "2023-03-06T00:33:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n```\r\n      System.Net.Quic.Tests.QuicListenerTests.ListenOnAlreadyUsedPort_Throws_AddressInUse [FAIL]\r\n        Assert.Throws() Failure\r\n        Expected: typeof(System.Net.Quic.QuicException)\r\n        Actual:   (No exception was thrown)\r\n        Stack Trace:\r\n          /Users/furt/github/wfurt-runtime2/src/libraries/System.Net.Quic/tests/FunctionalTests/QuicTestBase.cs(63,0): at System.Net.Quic.Tests.QuicTestBase.AssertThrowsQuicExceptionAsync(QuicError expectedError, Func`1 testCode)\r\n          /Users/furt/github/wfurt-runtime2/src/libraries/System.Net.Quic/tests/FunctionalTests/QuicListenerTests.cs(312,0): at System.Net.Quic.Tests.QuicListenerTests.ListenOnAlreadyUsedPort_Throws_AddressInUse()\r\n          --- End of stack trace from previous location ---\r\n        Output:\r\n          Using libmsquic.dylib version=2.2.0.0 commit=bd8602cffb379a7d7a0888cf98aed86d2d166c0a\r\n```\r\n\r\nThis seems to be platform difference. The test would block IPv4 port but since MsQuic actually uses IPv6 socket in dual mode macOS allows the bind:\r\n```\r\nShining:wfurt-msquic furt$ netstat -an| grep 63385\r\nudp46      0      0  *.63385                *.*\r\nudp4       0      0  *.63385                *.*\r\n```\r\n\r\nWe may fix it just for macOS or we may consider updating the test so it uses `AddressFamily` consistent with the implementation. \n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ewfurt\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`os-mac-os-x`, `area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-06T00:33:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5XiX39",
                                           "createdAt":  "2023-03-14T18:33:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CarnaViire",
                                           "body":  "Triage: low-pri until we would start to support macOS. We can disable the test when we\u0027ll start running tests for mac. Putting to Future",
                                           "updatedAt":  "2023-03-14T18:33:04Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "QuicListenerTests.ListenOnAlreadyUsedPort_Throws_AddressInUse test fails on macOS",
        "labels":  [
                       "os-mac-os-x",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/84093",
        "createdAt":  "2023-03-29T20:41:09Z",
        "number":  84093,
        "author":  "ladeak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-04-12T08:23:42Z",
        "body":  "### Background and motivation\r\n\r\nI am looking for a reasonable way to monitor traffic (number of bytes received) on HTTP requests including HTTP/3.\r\n\r\nI found a previous issue https://github.com/dotnet/runtime/issues/41949 that allows to use a custom stream implementation for H2 \r\n\r\nHowever, I don\u0027t see that being viable for `QuicConnetions` and H3.\r\n\r\nWhat I would prefer is something similar as described in https://github.com/dotnet/runtime/issues/31003 by @karelz using monitoring.\r\n\r\nHowever, the [ReadAsync](https://source.dot.net/#System.Net.Quic/System/Net/Quic/QuicStream.cs,4946c783c60758c8,references) only seems to monitor the size of the buffer where the data is read into, but not the actual size of the received data:\r\n\r\n```csharp\r\nif (NetEventSource.Log.IsEnabled())\r\n{\r\n    NetEventSource.Info(this, $\"{this} Stream reading into memory of \u0027{buffer.Length}\u0027 bytes.\");\r\n}\r\n```\r\n\r\nIs there an alternative approach to access this data?\r\n\r\n### API Proposal\r\n\r\nI would be happy to use `EventListener` to collect the described data.\r\n\r\nIdeally the event payload could store the size of the data without formatting it to string message.\r\n\r\n### API Usage\r\n\r\nNo new public API would be required.\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOWbJwpQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5YxJ2s",
                                           "createdAt":  "2023-03-29T20:41:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nI am looking for a reasonable way to monitor traffic (number of bytes received) on HTTP requests including HTTP/3.\r\n\r\nI found a previous issue https://github.com/dotnet/runtime/issues/41949 that allows to use a custom stream implementation for H2 \r\n\r\nHowever, I don\u0027t see that being viable for `QuicConnetions` and H3.\r\n\r\nWhat I would prefer is something similar as described in https://github.com/dotnet/runtime/issues/31003 by @karelz using monitoring.\r\n\r\nHowever, the [ReadAsync](https://source.dot.net/#System.Net.Quic/System/Net/Quic/QuicStream.cs,4946c783c60758c8,references) only seems to monitor the size of the buffer where the data is read into, but not the actual size of the received data.\r\n\r\nIs there an alternative approach to access this data?\n\n### API Proposal\n\nI would be happy to use `EventListener` to collect the described data.\r\n\r\nIdeally the event payload could store the size of the data without formatting it to string message.\n\n### API Usage\n\nNo new public API would be required.\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eladeak\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net.Http`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-03-29T20:41:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Y6PZB",
                                           "createdAt":  "2023-03-31T09:59:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Are you interested in HTTP payload size or bytes received on QUIC level? HTTP/3 has its own framing, which would count as part of QUIC bytes, but wouldn\u0027t count into actual HTTP payload bytes.",
                                           "updatedAt":  "2023-03-31T09:59:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Y6wA1",
                                           "createdAt":  "2023-03-31T11:38:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ladeak",
                                           "body":  "I would be interested in the Quic bytes which includes the H3 frames.",
                                           "updatedAt":  "2023-03-31T11:38:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZMWBP",
                                           "createdAt":  "2023-04-04T18:22:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ladeak",
                                           "body":  "@ManickaP or @karelz do you have any suggestions?",
                                           "updatedAt":  "2023-04-04T18:22:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZYSv5",
                                           "createdAt":  "2023-04-06T19:52:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\r\n\r\nI am looking for a reasonable way to monitor traffic (number of bytes received) on HTTP requests including HTTP/3.\r\n\r\nI found a previous issue https://github.com/dotnet/runtime/issues/41949 that allows to use a custom stream implementation for H2 \r\n\r\nHowever, I don\u0027t see that being viable for `QuicConnetions` and H3.\r\n\r\nWhat I would prefer is something similar as described in https://github.com/dotnet/runtime/issues/31003 by @karelz using monitoring.\r\n\r\nHowever, the [ReadAsync](https://source.dot.net/#System.Net.Quic/System/Net/Quic/QuicStream.cs,4946c783c60758c8,references) only seems to monitor the size of the buffer where the data is read into, but not the actual size of the received data:\r\n\r\n```csharp\r\nif (NetEventSource.Log.IsEnabled())\r\n{\r\n    NetEventSource.Info(this, $\"{this} Stream reading into memory of \u0027{buffer.Length}\u0027 bytes.\");\r\n}\r\n```\r\n\r\nIs there an alternative approach to access this data?\r\n\r\n### API Proposal\r\n\r\nI would be happy to use `EventListener` to collect the described data.\r\n\r\nIdeally the event payload could store the size of the data without formatting it to string message.\r\n\r\n### API Usage\r\n\r\nNo new public API would be required.\r\n\r\n### Alternative Designs\r\n\r\n_No response_\r\n\r\n### Risks\r\n\r\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eladeak\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `untriaged`, `area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-04-06T19:52:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZseCI",
                                           "createdAt":  "2023-04-12T07:56:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "At the moment, no suggestions. This will need change in production code. If you were the one calling Quic, you\u0027d now the amount of bytes. If you were interested in H/3 bytes, then this would be nice suggestion for HTTP telemetry. But this is neither, so I\u0027m inclined to push this to future.\r\n\r\nIf you really need this, we would take a contribution for 8.0. And if you\u0027d be willing to do this, please let us know and talk about potential solutions before diving into implementation.",
                                           "updatedAt":  "2023-04-12T07:56:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Zsfoc",
                                           "createdAt":  "2023-04-12T08:00:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC5rUuQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2023-04-12T08:22:37Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ladeak",
                                           "body":  "I am busy in the coming weeks, but I can return here in the summer and discuss potential solutions before contributing.",
                                           "updatedAt":  "2023-04-12T08:00:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ZsnCl",
                                           "createdAt":  "2023-04-12T08:23:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Awesome, thanks!\r\nJust FYI, we have a feature freeze in the first half of July, so your potential change might end up in .NET 9.0 instead of 8.0.",
                                           "updatedAt":  "2023-04-12T08:23:42Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "Monitoring QUIC/HTTP3 read and written bytes",
        "labels":  [
                       "help wanted",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/87478",
        "createdAt":  "2023-06-13T13:49:30Z",
        "number":  87478,
        "author":  "bentoi",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODLIFeA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ZarehD",
                                            "createdAt":  "2025-08-13T22:00:09Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-08-21T18:14:11Z",
        "body":  "### Description\n\nThis is related to the missing Quic KeepAlive option issue I reported a while ago: https://github.com/dotnet/runtime/issues/70090. \r\n\r\nBecause Quic doesn\u0027t provide an option to enable keep alive, an HTTP/3 request can fail while being processed by the server if the Quic connection idle timeout kicks in.\r\n\r\nI\u0027m attaching a test case that demonstrates this. This test case shows a number of issues:\r\n- the `PooledConnectionIdleTimeout` property is used to configure the `QuicConnection` idle timeout. To me these properties are unrelated.\r\n- Kestrel shows a critical error when the Quic stream is shutdown\r\n- the HTTP/3 request doesn\u0027t complete because the connection idle timeout kicks in\r\n\r\n[keepalive.zip](https://github.com/dotnet/runtime/files/11735523/keepalive.zip)\r\n\n\n### Reproduction Steps\n\n```\r\ndotnet run --project kestrel-server/kestrel-server.csproj\r\ndotnet run --project http-client/http-client.csproj\r\n```\n\n### Expected behavior\n\nNo exceptions, the PUT request should succeed.\n\n### Actual behavior\n\nThe PUT request fails with the following exception:\r\n```\r\nUnhandled exception. System.Net.Http.HttpRequestException: An error occurred while sending the request.\r\n ---\u003e System.Net.Quic.QuicException: The connection timed out from inactivity.\r\n   at System.Net.Quic.ResettableValueTaskSource.TryComplete(Exception exception, Boolean final)\r\n   at System.Net.Quic.QuicStream.HandleEventShutdownComplete(_SHUTDOWN_COMPLETE_e__Struct\u0026 data)\r\n   at System.Net.Quic.QuicStream.HandleStreamEvent(QUIC_STREAM_EVENT\u0026 streamEvent)\r\n   at System.Net.Quic.QuicStream.NativeCallback(QUIC_HANDLE* connection, Void* context, QUIC_STREAM_EVENT* streamEvent)\r\n--- End of stack trace from previous location ---\r\n   at System.Net.Quic.ResettableValueTaskSource.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Quic.QuicStream.ReadAsync(Memory`1 buffer, CancellationToken cancellationToken)\r\n   at System.Net.Http.Http3RequestStream.ReadFrameEnvelopeAsync(CancellationToken cancellationToken)\r\n   at System.Net.Http.Http3RequestStream.ReadResponseAsync(CancellationToken cancellationToken)\r\n   at System.Net.Http.Http3RequestStream.SendAsync(CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.Http3RequestStream.SendAsync(CancellationToken cancellationToken)\r\n   at System.Net.Http.Http3RequestStream.SendAsync(CancellationToken cancellationToken)\r\n   at System.Net.Http.Http3Connection.SendAsync(HttpRequestMessage request, Int64 queueStartingTimestamp, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.TrySendUsingHttp3Async(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithVersionDetectionAndRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.\u003cSendAsync\u003eg__Core|83_0(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationTokenSource cts, Boolean disposeCts, CancellationTokenSource pendingRequestsCts, CancellationToken originalCancellationToken)\r\n   at Program.Main(String[] args) in /home/vagrant/workspace/testcases/keepalive/http-client/Program.cs:line 26\r\n   at Program.\u003cMain\u003e(String[] args)\r\n```\r\n\r\nKestrel shows a critical error:\r\n```\r\ncrit: Microsoft.AspNetCore.Server.Kestrel[0]\r\n      Unexpected exception in HttpConnection.ProcessRequestsAsync.\r\n      System.Net.Quic.QuicException: An internal error has occurred. StreamShutdown failed: QUIC_STATUS_INVALID_PARAMETER\r\n         at System.Net.Quic.ThrowHelper.ThrowIfMsQuicError(Int32 status, String message)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicStreamContext.Abort(ConnectionAbortedException abortReason)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http3.Http3FrameWriter.Abort(ConnectionAbortedException error)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http3.Http3Stream.AbortCore(Exception exception, Http3ErrorCode errorCode)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http3.Http3Connection.ProcessRequestsAsync[TContext](IHttpApplication`1 application)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection.ProcessRequestsAsync[TContext](IHttpApplication`1 httpApplication)\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET SDK:\r\n Version:   7.0.302\r\n Commit:    990cf98a27\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  22.04\r\n OS Platform: Linux\r\n RID:         ubuntu.22.04-x64\r\n Base Path:   /home/vagrant/dotnet/sdk/7.0.302/\r\n\r\nHost:\r\n  Version:      7.0.5\r\n  Architecture: x64\r\n  Commit:       8042d61b17\r\n\r\n.NET SDKs installed:\r\n  7.0.302 [/home/vagrant/dotnet/sdk]\r\n\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYCtUAg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5eu7DL",
                                           "createdAt":  "2023-06-13T13:49:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\n\nThis is related to the missing Quic KeepAlive option issue I reported a while ago: https://github.com/dotnet/runtime/issues/70090. \r\n\r\nBecause Quic doesn\u0027t provide an option to enable keep alive, an HTTP/3 request can fail while being processed by the server if the Quic connection idle timeout kicks in.\r\n\r\nI\u0027m attaching a test case that demonstrates this. This test case shows a number of issues:\r\n- the `PooledConnectionIdleTimeout` property is used to configure the `QuicConnection` idle timeout. To me these properties are unrelated.\r\n- Kestrel shows a critical error when the Quic stream is shutdown\r\n- the HTTP/3 request doesn\u0027t complete because the connection idle timeout kicks in\r\n\r\n[keepalive.zip](https://github.com/dotnet/runtime/files/11735523/keepalive.zip)\r\n\n\n### Reproduction Steps\n\n```\r\ndotnet run --project kestrel-server/kestrel-server.csproj\r\ndotnet run --project http-client/http-client.csproj\r\n```\n\n### Expected behavior\n\nNo exceptions, the PUT request should succeed.\n\n### Actual behavior\n\nThe PUT request fails with the following exception:\r\n```\r\nUnhandled exception. System.Net.Http.HttpRequestException: An error occurred while sending the request.\r\n ---\u003e System.Net.Quic.QuicException: The connection timed out from inactivity.\r\n   at System.Net.Quic.ResettableValueTaskSource.TryComplete(Exception exception, Boolean final)\r\n   at System.Net.Quic.QuicStream.HandleEventShutdownComplete(_SHUTDOWN_COMPLETE_e__Struct\u0026 data)\r\n   at System.Net.Quic.QuicStream.HandleStreamEvent(QUIC_STREAM_EVENT\u0026 streamEvent)\r\n   at System.Net.Quic.QuicStream.NativeCallback(QUIC_HANDLE* connection, Void* context, QUIC_STREAM_EVENT* streamEvent)\r\n--- End of stack trace from previous location ---\r\n   at System.Net.Quic.ResettableValueTaskSource.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\r\n   at System.Net.Quic.QuicStream.ReadAsync(Memory`1 buffer, CancellationToken cancellationToken)\r\n   at System.Net.Http.Http3RequestStream.ReadFrameEnvelopeAsync(CancellationToken cancellationToken)\r\n   at System.Net.Http.Http3RequestStream.ReadResponseAsync(CancellationToken cancellationToken)\r\n   at System.Net.Http.Http3RequestStream.SendAsync(CancellationToken cancellationToken)\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.Http3RequestStream.SendAsync(CancellationToken cancellationToken)\r\n   at System.Net.Http.Http3RequestStream.SendAsync(CancellationToken cancellationToken)\r\n   at System.Net.Http.Http3Connection.SendAsync(HttpRequestMessage request, Int64 queueStartingTimestamp, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.TrySendUsingHttp3Async(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithVersionDetectionAndRetryAsync(HttpRequestMessage request, Boolean async, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, Boolean async, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.\u003cSendAsync\u003eg__Core|83_0(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationTokenSource cts, Boolean disposeCts, CancellationTokenSource pendingRequestsCts, CancellationToken originalCancellationToken)\r\n   at Program.Main(String[] args) in /home/vagrant/workspace/testcases/keepalive/http-client/Program.cs:line 26\r\n   at Program.\u003cMain\u003e(String[] args)\r\n```\r\n\r\nKestrel shows a critical error:\r\n```\r\ncrit: Microsoft.AspNetCore.Server.Kestrel[0]\r\n      Unexpected exception in HttpConnection.ProcessRequestsAsync.\r\n      System.Net.Quic.QuicException: An internal error has occurred. StreamShutdown failed: QUIC_STATUS_INVALID_PARAMETER\r\n         at System.Net.Quic.ThrowHelper.ThrowIfMsQuicError(Int32 status, String message)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Transport.Quic.Internal.QuicStreamContext.Abort(ConnectionAbortedException abortReason)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http3.Http3FrameWriter.Abort(ConnectionAbortedException error)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http3.Http3Stream.AbortCore(Exception exception, Http3ErrorCode errorCode)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http3.Http3Connection.ProcessRequestsAsync[TContext](IHttpApplication`1 application)\r\n         at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.HttpConnection.ProcessRequestsAsync[TContext](IHttpApplication`1 httpApplication)\r\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n.NET SDK:\r\n Version:   7.0.302\r\n Commit:    990cf98a27\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  22.04\r\n OS Platform: Linux\r\n RID:         ubuntu.22.04-x64\r\n Base Path:   /home/vagrant/dotnet/sdk/7.0.302/\r\n\r\nHost:\r\n  Version:      7.0.5\r\n  Architecture: x64\r\n  Commit:       8042d61b17\r\n\r\n.NET SDKs installed:\r\n  7.0.302 [/home/vagrant/dotnet/sdk]\r\n\n\n### Other information\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ebentoi\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-06-13T13:49:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gKG2F",
                                           "createdAt":  "2023-06-29T14:16:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: I just retested this with H/2 and HTTP 1.1 and it doesn\u0027t fail there. We should fix this for H/3. However, the test is very artificial, setting up idle connection lifetime as low as 1s and having server pause for 5 seconds with the reply doesn\u0027t seem like realistic scenario. Workaround for this is not to set idle connection lifetime so low. Therefore Future for now.\r\n\r\nFor the QUIC pings, we could reuse existing H/2 settings https://learn.microsoft.com/en-us/dotnet/api/system.net.http.socketshttphandler.keepalivepingtimeout?view=net-7.0 and pass it to `QuicConnection`, obviously that would need above mentioned #70090. However, this should work without using pings, i.e. we should strive for as similar behavior as possible to H/2 and HTTP 1.1. One option would be to not to set QUIC idle timeout and implement https://github.com/dotnet/runtime/issues/54968.",
                                           "updatedAt":  "2023-06-29T14:16:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gKb4s",
                                           "createdAt":  "2023-06-29T15:06:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "bentoi",
                                           "body":  "Allowing to configure keep alive through the `QuicConnectionOptions` as suggested by #70090 could still be useful for application that want to use Quic.\r\n\r\nAlso, if the idle timeout is not set and keep alive are disabled, how will an HTTP/3 client figure out that the Quic connection is dead? For example the HTTP/3 client sends a GET request and waits for the response. If the connection link dies before the response is sent, won\u0027t the client hang indefinitely? Or is there a specific request timeout implemented at the HTTP level that handles this scenario?\r\n\r\nThe HTTP/3 spec also specifies that clients are expected to keep the Quic connection open while there are request/push in progress: https://datatracker.ietf.org/doc/html/rfc9114#name-idle-connections ",
                                           "updatedAt":  "2023-06-29T15:06:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5gK1QC",
                                           "createdAt":  "2023-06-29T15:54:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "\u003e Allowing to configure keep alive through the QuicConnectionOptions as suggested by https://github.com/dotnet/runtime/issues/70090 could still be useful for application that want to use Quic.\r\n\r\nI didn\u0027t mean that we shouldn\u0027t do #70090, just that we should fix this regardless of it. We might need to implement it to fix this though.\r\n\r\n\u003e if the idle timeout is not set and keep alive are disabled, how will an HTTP/3 client figure out that the Quic connection is dead?\r\n\r\nAnything called on that connection will fail, i.e. the next request will fail and the connection gets scrapped.\r\n\r\n\u003e If the connection link dies before the response is sent, won\u0027t the client hang indefinitely?  Or is there a specific request timeout implemented at the HTTP level that handles this scenario?\r\n\r\nThere is request timeout by default.\r\n\r\n---\r\n\r\nWhat I think should be the goal of this issues is that if there\u0027s a request on a connection, we never kill the connection until the request is done (which might happen to be request timeout). How is that achieved should be implementation detail hidden from the user (from HttpClient perspective) as this should behave the same for all HTTP versions.",
                                           "updatedAt":  "2023-06-29T15:54:57Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "Quic connection idle timeout kicks in while HTTP/3 request is in progress",
        "labels":  [
                       "bug",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/90281",
        "createdAt":  "2023-08-09T23:22:36Z",
        "number":  90281,
        "author":  "alexrp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHODMPf-g==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "Darcara",
                                            "createdAt":  "2025-05-16T12:48:42Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "kitlith",
                                            "createdAt":  "2025-08-22T04:27:10Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "TheButlah",
                                            "createdAt":  "2025-08-22T06:44:08Z"
                                        }
                                    ],
                          "totalCount":  3
                      },
        "updatedAt":  "2025-06-17T15:22:41Z",
        "body":  "MsQuic has support for stream prioritization: https://github.com/microsoft/msquic/blob/main/docs/Settings.md#stream-parameters (`QUIC_PARAM_STREAM_PRIORITY`)\r\n\r\nThis is something I\u0027d like to use in my application, so I wanted to first check if there are already existing plans to support this in System.Net.Quic? (I saw there\u0027s discussion about adding more options in #72984, but that seems to be specifically about connection-level options.)\r\n\r\nIf there are no existing plans for this, I can turn this issue into an actual API proposal.\r\n\r\n---\r\n\r\n# API proposal after discussion\r\n\r\n```diff\r\n+public sealed class QuicStreamOptions\r\n+{\r\n+    public byte? Priority { get; set; }\r\n+}\r\n\r\n public sealed class QuicConnection\r\n {\r\n     public ValueTask\u003cQuicStream\u003e AcceptInboundStreamAsync(CancellationToken cancellationToken = default);\r\n+    public ValueTask\u003cQuicStream\u003e AcceptInboundStreamAsync(QuicStreamOptions options, CancellationToken cancellationToken = default);\r\n     public ValueTask\u003cQuicStream\u003e OpenOutboundStreamAsync(QuicStreamType type, CancellationToken cancellationToken = default);\r\n+    public ValueTask\u003cQuicStream\u003e OpenOutboundStreamAsync(QuicStreamType type, QuicStreamOptions options, CancellationToken cancellationToken = default);\r\n}\r\n```\r\n\r\nConsiderations:\r\n\r\n* While MsQuic supports `ushort` priority values, [quiche](https://docs.rs/quiche/latest/quiche/struct.Connection.html#method.stream_priority) only supports `byte`, hence `Priority` being typed as the latter.\r\n    * Alternatively, we could make it an `int` and just limit the range until such a time that we might want to allow a broader range of values.\r\n    * Another approach would be to use a `QuicStreamPriority` enum, akin to `ThreadPriority`, but perhaps this is too constraining.\r\n* Should it be possible to change the stream priority after stream creation? I *think* both MsQuic and quiche support this.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhJ3v9w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5jrV5F",
                                           "createdAt":  "2023-08-09T23:22:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nMsQuic has support for stream prioritization: https://github.com/microsoft/msquic/blob/main/docs/Settings.md#stream-parameters (`QUIC_PARAM_STREAM_PRIORITY`)\r\n\r\nThis is something I\u0027d like to use in my application, so I wanted to first check if there are already existing plans to support this in System.Net.Quic? (I saw there\u0027s discussion about adding more options in #72984, but that seems to be specifically about connection-level options.)\r\n\r\nIf there are no existing plans for this, I can turn this issue into an actual API proposal.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003ealexrp\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-08-09T23:22:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jsz4n",
                                           "createdAt":  "2023-08-10T07:20:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODDRSEg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexrp",
                                                                               "createdAt":  "2023-08-10T07:43:41Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "\u003e If there are no existing plans for this, I can turn this issue into an actual API proposal.\r\n\r\nHey, no plans for stream level configuration yet. If you wish to work an API proposal, we\u0027ll gladly take it and help wherever needed. \r\n\r\nI did a quick search on the spec (https://www.rfc-editor.org/rfc/rfc9000.html#name-stream-prioritization) and Rust quiche implementation of this feature (https://docs.rs/quiche/latest/quiche/struct.Connection.html#method.stream_priority). The spec doesn\u0027t say anything about representation of this and it doesn\u0027t affect the wire operations, it\u0027s just a suggestion on possible implementation. Thus, MsQuic use different type (`ushort`) then Rust quiche (`byte`) for priority. So we\u0027d like to avoid getting locked in MsQuic way and the proposal should take into consideration other implementations.\r\n\r\nWhether you feel like looking into it or not, this will not get in earlier than 9.0 as all API changes for 8.0 are past due.\r\n",
                                           "updatedAt":  "2023-08-10T07:20:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jtMJe",
                                           "createdAt":  "2023-08-10T08:29:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "Given the difference in priority type, do you think it would make more sense to go with `byte`, or perhaps a `QuicStreamPriority` enum with a much more limited set of values (along the lines of `ThreadPriority`)? The latter would be fine for my purposes as I just have a few streams, so even `byte` range is way more than I\u0027ll ever need. But I\u0027m not sure what other people are using QUIC for, so hard for me to extrapolate from that.\r\n\r\nAdditionally, would we want this to be configurable at stream creation time (i.e. with a `QuicStreamOptions` class) rather than just making it a settable property on `QuicStream`?\r\n\r\n🤔",
                                           "updatedAt":  "2023-08-10T08:29:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5j7Rlf",
                                           "createdAt":  "2023-08-13T22:44:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODRqGQg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexrp",
                                                                               "createdAt":  "2024-01-08T20:42:24Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "Softhead",
                                           "body":  "I think it should be a settable property on `QuicStream`.  As well, create a `QuicStreamOptions` class so that when you call `QuicConnection`.`OpenOutboundStreamAsync` you can provide the options, instead of having a large group of different definitions for `OpenOutboundStreamAsync`, one for each combination of options.",
                                           "updatedAt":  "2023-08-13T22:44:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wKddG",
                                           "createdAt":  "2024-01-08T20:42:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "\u003e Given the difference in priority type, do you think it would make more sense to go with `byte`, or perhaps a `QuicStreamPriority` enum with a much more limited set of values (along the lines of `ThreadPriority`)? The latter would be fine for my purposes as I just have a few streams, so even `byte` range is way more than I\u0027ll ever need. But I\u0027m not sure what other people are using QUIC for, so hard for me to extrapolate from that.\r\n\r\n@ManickaP any thoughts on this part?",
                                           "updatedAt":  "2024-01-08T20:42:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wNM3T",
                                           "createdAt":  "2024-01-09T06:58:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "\u003e Given the difference in priority type, do you think it would make more sense to go with `byte`, or perhaps a `QuicStreamPriority` enum with a much more limited set of values (along the lines of `ThreadPriority`)? The latter would be fine for my purposes as I just have a few streams, so even `byte` range is way more than I\u0027ll ever need. But I\u0027m not sure what other people are using QUIC for, so hard for me to extrapolate from that.\r\n\u003e \r\n\u003e Additionally, would we want this to be configurable at stream creation time (i.e. with a `QuicStreamOptions` class) rather than just making it a settable property on `QuicStream`?\r\n\u003e \r\n\u003e 🤔\r\n\r\nBoth `byte` and `QuicStreamPriority` seem reasonable, I personally don\u0027t have preference, we can suggest one as preferred and put the other one as an alternative design. And this should be configurable with stream creation (`QuicStreamOptions` seems appropriate and in line with other options we have), not a settable property. In general, we don\u0027t allow changing settings after the thing is in use. \r\n\r\nAnd sorry for such a late reply, it got off my radar.",
                                           "updatedAt":  "2024-01-09T06:58:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wO97j",
                                           "createdAt":  "2024-01-09T12:19:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "No problem, thanks for the reply. 🙂\r\n\r\nI\u0027ll type up an updated proposal later today.",
                                           "updatedAt":  "2024-01-09T12:19:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5wRyFQ",
                                           "createdAt":  "2024-01-09T20:10:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODR2wdw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2024-01-10T08:11:56Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alexrp",
                                           "body":  "Updated the issue with a proposed API surface and some considerations for API review.",
                                           "updatedAt":  "2024-01-09T20:10:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc577r6b",
                                           "createdAt":  "2024-04-26T11:57:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "Just checking in, do I need to do anything else for this to become ready for API review? :eyes:",
                                           "updatedAt":  "2024-04-26T11:57:08Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5785Kr",
                                           "createdAt":  "2024-04-26T14:57:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfrKrQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "alexrp",
                                                                               "createdAt":  "2024-04-26T15:21:38Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "I just put it on my team\u0027s radar, we\u0027ll discuss it in 2 weeks time in the latest (I\u0027ll be OOF for 2 weeks). Though be aware that as you\u0027re the only one asking for this (no upvotes, ~nobody else commenting~ 1 person commenting) it might get pushed out of 9.0.",
                                           "updatedAt":  "2024-04-26T14:58:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc579E-j",
                                           "createdAt":  "2024-04-26T15:23:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODfrObQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2024-04-26T15:29:00Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "alexrp",
                                           "body":  "Yeah, that\u0027s fine, just wanted to make sure it wasn\u0027t forgotten. :slightly_smiling_face:",
                                           "updatedAt":  "2024-04-26T15:23:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6AnGZ8",
                                           "createdAt":  "2024-06-10T08:45:48Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: we decided to wait with this API as we have only one person wanting this at the moment. If there\u0027re more people out there looking for this, please upvote so we can prioritize this better (pun intended :smile: )",
                                           "updatedAt":  "2024-06-10T08:46:00Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ElIUo",
                                           "createdAt":  "2024-07-12T02:48:59Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "alexrp",
                                           "body":  "Can it be reconsidered for .NET 10 planning? Or is it just dependent on more people needing it?",
                                           "updatedAt":  "2024-07-12T02:48:59Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Ene_3",
                                           "createdAt":  "2024-07-12T06:53:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "\u003e dependent on more people needing it\r\n\r\nYes and no. This is backed by RFC, which gives us an argument to introduce it without a great number of people asking for it. On the other hand, you\u0027re the only one asking so that gives us argument to chop it. \r\nHaving few more people upvoting / commenting would improve the chances of being introduced in 10.0.\r\n\r\nEDIT: I moved to 10.0 for now.",
                                           "updatedAt":  "2024-07-12T06:55:02Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "[API Proposal]: QUIC stream priority support",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/92943",
        "createdAt":  "2023-10-03T16:44:46Z",
        "number":  92943,
        "author":  "ManickaP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-04-25T08:22:34Z",
        "body":  "Depends on https://github.com/dotnet/dotnet-api-docs/issues/7840\r\n\r\nWe need to go through all of QUIC APIs and document stored exception.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaAgDIA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5oCAMg",
                                           "createdAt":  "2023-10-03T16:44:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nDepends on https://github.com/dotnet/dotnet-api-docs/issues/7840\r\n\r\nWe need to go through all of QUIC APIs and document stored exception.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eManickaP\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-10-03T16:44:56Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[QUIC] Document async exceptions",
        "labels":  [
                       "documentation",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95263",
        "createdAt":  "2023-11-27T13:18:24Z",
        "number":  95263,
        "author":  "rzikm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC0Rqkg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "ManickaP",
                                            "createdAt":  "2023-11-28T13:44:16Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2023-11-28T13:44:35Z",
        "body":  "### Background and motivation\n\nQuicStream has `ReadsClosed` and `WritesClosed` which are completed when the given direction of the stream is closed (either gracefully or not). These properties allow users to react to those events without needing a pending call to receive/send on the stream.\r\n\r\nFor QuicConnection, the user code will often probably have a pending call to `AcceptInboundStreamAsync` which will throw on connection abort, however, adding a dedicated property may still be useful.\r\n\r\nNote that we should probably wait with implementation until we discover a scenario where the property gives significant advantage.\n\n### API Proposal\n\n```diff\r\nnamespace System.Net.Quic;\r\n\r\npublic class QuicConnection\r\n{\r\n+   public Task ConnectionClosed { get; }\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\nQuicConnection conn = ...;\r\n\r\nconn.ConnectionClosed.ContinueWith(f =\u003e DoCleanup(f));\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObPJMxA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5s8kzE",
                                           "createdAt":  "2023-11-27T13:18:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Background and motivation\n\nQuicStream has `ReadsClosed` and `WritesClosed` which are completed when the given direction of the stream is closed (either gracefully or not). These properties allow users to react to those events without needing a pending call to receive/send on the stream.\r\n\r\nFor QuicConnection, the user code will often probably have a pending call to `AcceptInboundStreamAsync` which will throw on connection abort, however, adding a dedicated property may still be useful.\r\n\r\nNote that we should probably wait with implementation until we discover a scenario where the property gives significant advantage.\n\n### API Proposal\n\n```diff\r\nnamespace System.Net.Quic;\r\n\r\npublic class QuicConnection\r\n{\r\n+   public Task ConnectionClosed { get; }\r\n}\r\n```\n\n### API Usage\n\n```csharp\r\nQuicConnection conn = ...;\r\n\r\nconn.ConnectionClosed.ContinueWith(f =\u003e DoCleanup(f));\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003erzikm\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`api-suggestion`, `area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-27T13:18:31Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[API Proposal]: QuicConnection.ConnectionClosed task",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/95351",
        "createdAt":  "2023-11-28T18:02:35Z",
        "number":  95351,
        "author":  "ManickaP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-17T15:22:02Z",
        "body":  "The performance of QUIC and HTTP/3 is lacking in comparison with H/2.\r\n\r\nAlso see #95104",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOo_agTw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5tGbml",
                                           "createdAt":  "2023-11-28T18:02:42Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nThe performance of QUIC and HTTP/3 is lacking in comparison with H/2.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eManickaP\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-11-28T18:02:42Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6j9qBP",
                                           "createdAt":  "2025-03-25T10:48:08Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Kation",
                                           "body":  "Any progress?",
                                           "updatedAt":  "2025-03-25T10:48:08Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[QUIC][H/3] Improve perfomance",
        "labels":  [
                       "enhancement",
                       "tenet-performance",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/96161",
        "createdAt":  "2023-12-19T05:10:09Z",
        "number":  96161,
        "author":  "John0King",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC1oGlA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "amis92",
                                            "createdAt":  "2024-02-03T17:47:59Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2024-01-02T02:23:47Z",
        "body":  "Current dotnet rely on a native binary \"MsQuic\" , and it seems a pain dependency in some platform , such as \"android\".\r\nPlease consider implement a full managed quic library instead of rely on a native binary!",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOb6x0LQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5u_dHW",
                                           "createdAt":  "2023-12-19T05:10:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nCurrent dotnet rely on a native binary \"MsQuic\" , and it seems a pain dependency in some platform , such as \"android\".\r\nPlease consider implement a full managed quic library instead of rely on a native binary!\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eJohn0King\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`untriaged`, `area-System.Net.Quic`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2023-12-19T05:10:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vBlvg",
                                           "createdAt":  "2023-12-19T12:40:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "huoyaoyuan",
                                           "body":  "See the experiment at https://github.com/dotnet/runtimelab/tree/feature/ManagedQuic",
                                           "updatedAt":  "2023-12-19T12:40:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vBzrf",
                                           "createdAt":  "2023-12-19T13:18:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "John0King",
                                           "body":  "@huoyaoyuan  the lastest comment on  managedQuic   was 2 years befor , and it seem been cut off because a decision to  use \"MsQuic\" c++ binary instead of re-implement new one.\r\nI\u0027m wonder that does the managed quic still on the future plan ? ",
                                           "updatedAt":  "2023-12-19T13:18:38Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vDNDR",
                                           "createdAt":  "2023-12-19T16:39:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODVrz_w==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "PaulusParssinen",
                                                                               "createdAt":  "2023-12-19T18:02:57Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManuelRin",
                                                                               "createdAt":  "2023-12-19T23:48:11Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "John0King",
                                                                               "createdAt":  "2023-12-20T00:49:36Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "mahara",
                                                                               "createdAt":  "2023-12-20T16:50:37Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2024-01-02T02:16:23Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CarnaViire",
                                                                               "createdAt":  "2024-01-02T14:29:15Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stratosblue",
                                                                               "createdAt":  "2024-02-06T13:52:20Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  7
                                                         },
                                           "author":  "rzikm",
                                           "body":  "@John0King I was the one to implement the original ManagedQuic experiment before joining the .NET networking team (it was a topic for my Master thesis). Recently, me and some other team members did a hackathon and refreshed the implementation. A more recent version is available at https://github.com/rzikm/dotnet-runtime/tree/managed-quic, but it is far from production ready.\r\n\r\nThe big technical problem preventing us/me from finishing the implementation is availability of TLS API. QUIC uses TLS 1.3 in a different way than your average TCP connection and needs access to raw (unencrypted) TLS records + encryption secrets to perform its own encryption scheme. The necessary API has been added to SChannel on Windows, but **there is no such API available on Linux or MacOs (and I doubt it is present in Android APIs).**\r\n\r\nMsQuic is able to work on Linux because it is statically linking against a **forked version of OpenSSL** (see https://github.com/quictls/openssl). But this option is not available to .NET code because\r\n  - we don\u0027t want to compile and distribute the custom OpenSSL bits as part of .NET Runtime\r\n  - shipping cryptography is problematic (I understand that some users may require that the implementation is somehow certified) and requires lots of resources/expertise to make the implementations secure.\r\n\r\nOpenSSL seems to have gone in the direction of implementing QUIC on their own (currently work in progress IIRC). This suggests that it is unlikely that the changes made in the fork would be merged into the mainline OpenSSL to enable others to implement QUIC on top of OpenSSL.\r\n\r\nTLS problems aside, the other problem is the manpower needed to make the implementation performant and bug-free. MsQuic has been in development for several years and there were multiple people working on it full-time, and those people have years of experience in low-level networking (low-level here means OS-level TCP stack development).\r\n\r\nFor these reasons, we are currently not considering moving to Managed QUIC in the near future.\r\n\r\nHowever. If there are (or there will become) QUIC APIs available on Android, It would be a lot easier to have a different implementation for `QuicConnection` and other classes which would be used on Android. We already have different implementations of other parts of the runtime for some platforms (browser platform needs special handling in many networking cases). ",
                                           "updatedAt":  "2023-12-20T10:38:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vD2BZ",
                                           "createdAt":  "2023-12-19T18:26:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Agree with the original statement that dependencies are pain. But did you manage to get it working @John0King? AFAIK it should be possible to compile msquic for Android. We do not have tests but perhaps that is something we may improve e.g. increase test coverage even to platforms that are not fully supported. (like we do now for macOS) \r\n\r\nhttps://github.com/microsoft/msquic/issues/952 was closed but time moved on and perhaps it would be reasonable to ask MsQuic once again for binary packages. As @rzikm mentioned above the managed implementation was discussed but because of many technical challenges I don\u0027t see it coming anytime soon.  ",
                                           "updatedAt":  "2023-12-19T18:26:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5vrHQt",
                                           "createdAt":  "2024-01-02T02:23:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODVr0CQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CarnaViire",
                                                                               "createdAt":  "2024-01-02T14:29:39Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "John0King",
                                                                               "createdAt":  "2024-01-05T02:08:19Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "stratosblue",
                                                                               "createdAt":  "2024-02-06T13:52:22Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: I\u0027ll keep this open for the sake of the discussion and discoverability. @rzikm [comment](https://github.com/dotnet/runtime/issues/96161#issuecomment-1863110865) summarized well why we chose not to pursue managed QUIC at the moment. But if anything from those reasons changes, we\u0027re always open to reevaluate the decision.\r\n\r\nAlso, if anyone tries to compile and use .NET with MsQuic on any platform outside of our official support and hits any issues. Please feel free to file a bug, we\u0027ll try to help make it work!",
                                           "updatedAt":  "2024-01-02T02:23:45Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "[feature-request] Full managed Quic implement ",
        "labels":  [
                       "discussion",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/100003",
        "createdAt":  "2024-03-20T09:43:32Z",
        "number":  100003,
        "author":  "denadmin",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC2t-Gg==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "MineCake147E",
                                            "createdAt":  "2024-03-21T08:12:56Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "martincostello",
                                            "createdAt":  "2024-03-22T14:28:04Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2024-04-08T06:53:54Z",
        "body":  "### Background and motivation\n\nAt this moment there are two options for congestion control algorithm in msquic: \r\n`Cubic` and `BBR`\r\nbut there is no way to set it in options\r\n\r\nIt would be great to have an ability to switch between them to choose a better one\n\n### API Proposal\n\n```csharp\r\n\r\npublic class QuicConnectionOptions\r\n{\r\n    ....\r\n    public QuicCongestionControlAlgorithm CongestionControlAlgorithm { get; set; };\r\n    ....\r\n}\r\n\r\npublic enum QuicCongestionControlAlgorithm\r\n{\r\n    CUBIC,\r\n    BBR\r\n}\r\n```\r\n\n\n### API Usage\n\n```csharp\r\nvar options = new QuicClientConnectionOptions()\r\n{\r\n   ...\r\n   CongestionControlAlgorithm = QuicCongestionControlAlgorithm.BBR\r\n}\r\n\r\nvar connection = await QuicConnection.ConnectAsync(options);\r\n```\n\n### Alternative Designs\n\n_No response_\n\n### Risks\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOebZN1g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc53wRpL",
                                           "createdAt":  "2024-03-20T09:43:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-03-20T09:43:56Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55Ncsn",
                                           "createdAt":  "2024-04-03T05:35:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "@denadmin could you describe your use cases? And why you need to change this from your app? I\u0027m trying to understand the priority/importance of this as this is fairly low-level settings. Also, I wonder if other implementations offer this type of settings to the application. I\u0027m wary of exposing something MsQuic specific in System.Net.Quic APIs.",
                                           "updatedAt":  "2024-04-03T05:35:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc55tk3W",
                                           "createdAt":  "2024-04-08T06:53:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODdoMSA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2024-04-10T03:06:03Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: low prio in future. We should have some concrete use case for this before we put it in.",
                                           "updatedAt":  "2024-04-08T06:53:52Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[API Proposal]: Add ability to select QUIC congestion control algorithm",
        "labels":  [
                       "api-suggestion",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/101602",
        "createdAt":  "2024-04-26T09:59:49Z",
        "number":  101602,
        "author":  "rzikm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-05-13T07:37:36Z",
        "body":  "Originally, MsQuic linked statically to both `libssl` (forked to add QUIC supporting APIs) and `libcrypto`. Because of that it was dangerous to pass raw `X509*` to applications, because the system installed `libcrypto` (where OpenSSL\u0027s X.509 code lives) could be different version and have different `X509` object layout. So currently, the certificates are being serialized to DER or PKCS12 format and parsed again by the application, which delays the handshake by about 1 ms.\r\n\r\nSince recent MsQuic versions are compiled to use system-installed libcrypto, it should be possible to exchange raw `X509*` under these conditions:\r\n\r\n- MsQuic was compiled with `-UseSystemOpenSSLCrypto`\r\n- MsQuic was dynamically linked against the same `libcrypto` version used by .NET process\r\n\r\nTo verify these conditions, we need additional API surface in MsQuic (additional global Get-only parameters).",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOe-54_w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc57680u",
                                           "createdAt":  "2024-04-26T10:00:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-04-26T10:00:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc577nj_",
                                           "createdAt":  "2024-04-26T11:44:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "Scratch that, i must have miscounted decimal digits, the impact is order of magnitude lower than I assumed (in order of ms). Updatd description. This makes it low priority.",
                                           "updatedAt":  "2024-04-26T11:44:31Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[QUIC] Eliminate peer X509 certificate parsing on Linux",
        "labels":  [
                       "tenet-performance",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/104373",
        "createdAt":  "2024-07-03T15:45:48Z",
        "number":  104373,
        "author":  "rzikm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC5GtDA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "liveans",
                                            "createdAt":  "2024-07-03T16:56:37Z"
                                        }
                                    ],
                          "totalCount":  1
                      },
        "updatedAt":  "2025-07-28T08:10:46Z",
        "body":  "Related to https://github.com/grpc/grpc-dotnet/issues/2470.\r\n\r\nConsider detecting this class of errors and throw a more informative exception or disable QUIC altogether.\r\n\r\nConsider updating https://learn.microsoft.com/en-us/dotnet/fundamentals/networking/quic/quic-troubleshooting and https://learn.microsoft.com/en-us/dotnet/core/extensions/sslstream-troubleshooting",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "Improve diagnostics for disabled TLS 1.3 ciphersuites for QUIC",
        "labels":  [
                       "enhancement",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/107969",
        "createdAt":  "2024-09-18T08:09:54Z",
        "number":  107969,
        "author":  "v-wenyuxu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-17T15:22:34Z",
        "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20240917.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=810440\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=20975938\u0026resultId=172426\u0026paneView=debug)\r\n\r\n**Failed tests:**\r\n```\r\nnet9.0-linux-Release-arm-no_tiered_compilation-(Debian.12.Arm32.Open)Ubuntu.2004.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-12-helix-arm32v7\r\n    - System.Net.Quic.Tests.QuicStreamTests.TestStreams\r\n    - System.Net.Quic.Tests.QuicStreamTests.GetStreamIdWithoutStartWorks\r\n    - System.Net.Quic.Tests.QuicStreamTests.ReadOutstanding_ReadAborted_Throws\r\n    - System.Net.Quic.Tests.QuicStreamTests.MultipleReadsAndWrites\r\n    - System.Net.Quic.Tests.QuicStreamTests.WaitForReadsClosedAsync_ConnectionClosed_Throws\r\n    - System.Net.Quic.Tests.QuicStreamTests.WaitForWritesClosedAsync_ConnectionClosed_Throws\r\n    - System.Net.Quic.Tests.QuicStreamTests.MultipleConcurrentStreamsOnSingleConnection\r\n    - System.Net.Quic.Tests.QuicStreamTests.AbortAfterDispose_StreamCreationFlushedByDispose_Success\r\n    - System.Net.Quic.Tests.QuicStreamTests.BasicTest\r\n    - System.Net.Quic.Tests.QuicStreamTests.Read_SynchronousCompletion_Success\r\n    - System.Net.Quic.Tests.QuicStreamTests.WaitForWritesClosedAsync_ServerShutdown_Success\r\n    - System.Net.Quic.Tests.QuicStreamTests.WaitForWritesClosedAsync_ServerWriteAborted_Throws\r\n    - System.Net.Quic.Tests.QuicStreamTests.LargeDataSentAndReceived\r\n    - System.Net.Quic.Tests.QuicStreamTests.WaitForReadsClosedAsync_ServerReadAborted_Throws\r\n    - System.Net.Quic.Tests.QuicStreamTests.WriteAsync_LocalAbort_Throws\r\n    - System.Net.Quic.Tests.QuicStreamTests.WriteAbortedWithoutWriting_ReadThrows\r\n    - System.Net.Quic.Tests.QuicStreamTests.WriteCanceled_NextWriteThrows\r\n    - System.Net.Quic.Tests.QuicStreamTests.ReadAbortedWithoutReading_WriteThrows\r\n    - System.Net.Quic.Tests.QuicStreamTests.WaitForWritesClosedAsync_ClientReadAborted_Throws\r\n    - System.Net.Quic.Tests.QuicStreamTests.WaitForWriteCompletionAsync_ClientReadAborted_Throws\r\n    - System.Net.Quic.Tests.QuicStreamTests.WritePreCanceled_Throws\r\n    - System.Net.Quic.Tests.QuicStreamTests.WaitForReadsClosedAsync_GracefulShutdown_Success\r\n    - System.Net.Quic.Tests.QuicStreamTests.WaitForReadsClosedAsync_ClientWriteAborted_Throws\r\n    - System.Net.Quic.Tests.QuicStreamTests.MultipleStreamsOnSingleConnection\r\n```\r\n\r\n**Error message:**\r\n```\r\n System.Net.Quic.QuicException : The connection timed out from inactivity.\r\n```\r\n\r\n**Stack trace:**\r\n```\r\n   at System.Net.Quic.QuicConnection.HandleEventShutdownInitiatedByTransport(_SHUTDOWN_INITIATED_BY_TRANSPORT_e__Struct\u0026 data) in /_/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicConnection.cs:line 659\r\n   at System.Net.Quic.QuicConnection.HandleConnectionEvent(QUIC_CONNECTION_EVENT\u0026 connectionEvent) in /_/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicConnection.cs:line 761\r\n   at System.Net.Quic.QuicConnection.NativeCallback(QUIC_HANDLE* connection, Void* context, QUIC_CONNECTION_EVENT* connectionEvent) in /_/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicConnection.cs:line 796\r\n--- End of stack trace from previous location ---\r\n   at System.Net.Quic.QuicConnection.OpenOutboundStreamAsync(QuicStreamType type, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicConnection.cs:line 553\r\n   at System.Net.Quic.Tests.QuicStreamTests.CreateAndTestBidirectionalStream(QuicConnection c1, QuicConnection c2) in /_/src/libraries/System.Net.Quic/tests/FunctionalTests/QuicStreamTests.cs:line 286\r\n   at System.Net.Quic.Tests.QuicStreamTests.TestStreams() in /_/src/libraries/System.Net.Quic/tests/FunctionalTests/QuicStreamTests.cs:line 276\r\n   at System.Net.Quic.Tests.QuicStreamTests.TestStreams() in /_/src/libraries/System.Net.Quic/tests/FunctionalTests/QuicStreamTests.cs:line 280\r\n   at System.Net.Quic.Tests.QuicStreamTests.TestStreams() in /_/src/libraries/System.Net.Quic/tests/FunctionalTests/QuicStreamTests.cs:line 280\r\n   at System.Net.Quic.Tests.QuicStreamTests.TestStreams() in /_/src/libraries/System.Net.Quic/tests/FunctionalTests/QuicStreamTests.cs:line 280\r\n--- End of stack trace from previous location ---\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqN6wBQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6MiRSL",
                                           "createdAt":  "2024-09-18T08:10:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-09-18T08:10:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6OAZRT",
                                           "createdAt":  "2024-09-30T08:38:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOD0DsiA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2024-09-30T08:39:13Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "liveans",
                                           "body":  "We started to see this kind of failures lately on Debian Arm32. I\u0027ll take a look at this when I have time, but I believe this is not an actual product issue, since the failure is happening on Arm32 + JitStress.\r\n\r\n/cc @ManickaP ",
                                           "updatedAt":  "2024-09-30T08:38:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gsNBv",
                                           "createdAt":  "2025-03-04T01:23:29Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "v-wenyuxu",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20250302.3](https://dev.azure.com/dnceng-public/public/_build/results?buildId=967110\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=25771452\u0026resultId=167896\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-arm-disabler2r-(Debian.12.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-12-helix-arm32v7\n    - System.Net.Quic.Tests.MsQuicTests.OpenStreamAsync_BlocksUntilAvailable_PeerClosesWritingUnidirectional\n    - System.Net.Quic.Tests.MsQuicTests.Read_ConnectionAbortedByUser_Throws\n    - System.Net.Quic.Tests.MsQuicTests.CallDifferentWriteMethodsWorks\n    - System.Net.Quic.Tests.MsQuicTests.DisposingConnection_OK\n    - System.Net.Quic.Tests.MsQuicTests.Read_ConnectionAbortedByPeer_Throws\n    - System.Net.Quic.Tests.MsQuicTests.QuicRootedObjectGetReleased\n    - System.Net.Quic.Tests.MsQuicTests.CertificateCallbackThrowPropagates\n    - System.Net.Quic.Tests.QuicConnectionTests.GetStreamCapacity_SumInvariant\n    - System.Net.Quic.Tests.QuicConnectionTests.Connection_AwaitsStream_ConnectionSurvivesGC\n    - System.Net.Quic.Tests.QuicConnectionTests.GetStreamCapacity_OpenCloseStream_CountsCorrectly\n    - System.Net.Quic.Tests.QuicConnectionTests.AcceptStreamAsync_ConnectionDisposed_Throws\n    - System.Net.Quic.Tests.QuicListenerTests.TwoListenersOnSamePort_DisjointAlpn_Success\n    - System.Net.Quic.Tests.QuicListenerTests.Listener_AwaitsConnection_ListenerSurvivesGC\n    - System.Net.Quic.Tests.QuicListenerTests.Listener_Backlog_Success\n    - System.Net.Quic.Tests.QuicListenerTests.AcceptConnectionAsync_ClientConnects_CancelIgnored\n    - System.Net.Quic.Tests.QuicListenerTests.Listener_BacklogLimitRefusesConnection_ClientThrows\n    - System.Net.Quic.Tests.QuicListenerTests.Listener_AlpnNarrowingDown_Success\n    - System.Net.Quic.Tests.QuicListenerTests.Listener_IPv6Any_Accepts_IPv4\n    - System.Net.Quic.Tests.QuicListenerTests.Listener_Backlog_Success_IPv6\n    - System.Net.Quic.Tests.QuicStreamTests.GetStreamIdWithoutStartWorks\n    - System.Net.Quic.Tests.QuicStreamTests.ReadOutstanding_ReadAborted_Throws\n    - System.Net.Quic.Tests.QuicStreamTests.MultipleConcurrentStreamsOnSingleConnection\n```\n\n**Error message:**\n```\n System.Net.Quic.QuicException : The connection timed out from inactivity.\n```\n\n**Stack trace:**\n```\n   at System.Net.Quic.QuicConnection.HandleEventShutdownInitiatedByTransport(_SHUTDOWN_INITIATED_BY_TRANSPORT_e__Struct\u0026 data) in /_/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicConnection.cs:line 659\n   at System.Net.Quic.QuicConnection.HandleConnectionEvent(QUIC_CONNECTION_EVENT\u0026 connectionEvent) in /_/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicConnection.cs:line 773\n   at System.Net.Quic.QuicConnection.NativeCallback(QUIC_HANDLE* connection, Void* context, QUIC_CONNECTION_EVENT* connectionEvent) in /_/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicConnection.cs:line 808\n--- End of stack trace from previous location ---\n   at System.Net.Quic.QuicConnection.OpenOutboundStreamAsync(QuicStreamType type, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicConnection.cs:line 553\n   at System.Net.Quic.Tests.MsQuicTests.OpenStreamAsync_BlocksUntilAvailable_PeerClosesWritingUnidirectional() in /_/src/libraries/System.Net.Quic/tests/FunctionalTests/MsQuicTests.cs:line 867\n--- End of stack trace from previous location ---\n```",
                                           "updatedAt":  "2025-03-04T01:23:29Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6kzQIi",
                                           "createdAt":  "2025-03-31T01:41:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20250330.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=998489\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=26648728\u0026resultId=190256\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-arm-no_tiered_compilation-(Debian.12.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-12-helix-arm32v7\n    - System.Net.Quic.Tests.QuicStreamConformanceTests.ArgumentValidation_ThrowsExpectedException\n    - System.Net.Quic.Tests.QuicStreamTests.TestStreams\n    - System.Net.Quic.Tests.QuicStreamTests.GetStreamIdWithoutStartWorks\n    - System.Net.Quic.Tests.QuicStreamTests.ReadOutstanding_ReadAborted_Throws\n    - System.Net.Quic.Tests.QuicStreamTests.WritePreCanceled_Throws\n    - System.Net.Quic.Tests.QuicStreamTests.WaitForReadsClosedAsync_GracefulShutdown_Success\n    - System.Net.Quic.Tests.QuicStreamTests.WaitForReadsClosedAsync_ClientWriteAborted_Throws\n    - System.Net.Quic.Tests.QuicStreamTests.MultipleStreamsOnSingleConnection\n```\n\n**Error message:**\n```\n System.Net.Quic.QuicException : The connection timed out from inactivity.\n```\n\n**Stack trace:**\n```\n   at System.Net.Quic.QuicConnection.HandleEventShutdownInitiatedByTransport(_SHUTDOWN_INITIATED_BY_TRANSPORT_e__Struct\u0026 data) in /_/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicConnection.cs:line 659\n   at System.Net.Quic.QuicConnection.HandleConnectionEvent(QUIC_CONNECTION_EVENT\u0026 connectionEvent) in /_/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicConnection.cs:line 773\n   at System.Net.Quic.QuicConnection.NativeCallback(QUIC_HANDLE* connection, Void* context, QUIC_CONNECTION_EVENT* connectionEvent) in /_/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicConnection.cs:line 808\n--- End of stack trace from previous location ---\n   at System.Net.Quic.QuicConnection.AcceptInboundStreamAsync(CancellationToken cancellationToken) in /_/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicConnection.cs:line 581\n   at System.Net.Quic.Tests.QuicStreamConformanceTests.\u003c\u003ec__DisplayClass12_0.\u003c\u003cCreateConnectedStreamsAsync\u003eb__1\u003ed.MoveNext() in /_/src/libraries/System.Net.Quic/tests/FunctionalTests/QuicStreamConnectedStreamConformanceTests.cs:line 84\n--- End of stack trace from previous location ---\n   at System.IO.Tests.StreamConformanceTests.WhenAllOrAnyFailed(Task task1, Task task2) in /_/src/libraries/Common/tests/StreamConformanceTests/System/IO/StreamConformanceTests.cs:line 585\n   at System.Net.Quic.Tests.QuicStreamConformanceTests.CreateConnectedStreamsAsync() in /_/src/libraries/System.Net.Quic/tests/FunctionalTests/QuicStreamConnectedStreamConformanceTests.cs:line 80\n   at System.Net.Quic.Tests.QuicStreamConformanceTests.CreateConnectedStreamsAsync() in /_/src/libraries/System.Net.Quic/tests/FunctionalTests/QuicStreamConnectedStreamConformanceTests.cs:line 137\n   at System.IO.Tests.ConnectedStreamConformanceTests.ArgumentValidation_ThrowsExpectedException() in /_/src/libraries/Common/tests/StreamConformanceTests/System/IO/StreamConformanceTests.cs:line 1678\n--- End of stack trace from previous location ---\n```",
                                           "updatedAt":  "2025-03-31T01:41:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6o3rAF",
                                           "createdAt":  "2025-04-27T05:25:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SakeTao",
                                           "body":  "**Failed in:** [runtime-coreclr libraries-jitstress 20250426.1](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1027298\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=27550690\u0026resultId=179534\u0026paneView=debug)\n\n**Failed tests:**\n```\nnet10.0-linux-Release-arm-no_tiered_compilation-(Debian.12.Arm32.Open)Ubuntu.2204.ArmArch.Open@mcr.microsoft.com/dotnet-buildtools/prereqs:debian-12-helix-arm32v7\n    - System.Net.Quic.Tests.QuicStreamTests.ReadOutstanding_ReadAborted_Throws\n```\n\n**Error message:**\n```\n System.Net.Quic.QuicException : The connection timed out from inactivity.\n```\n\n**Stack trace:**\n```\n   at System.Net.Quic.QuicConnection.HandleEventShutdownInitiatedByTransport(_SHUTDOWN_INITIATED_BY_TRANSPORT_e__Struct\u0026 data) in /_/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicConnection.cs:line 659\n   at System.Net.Quic.QuicConnection.HandleConnectionEvent(QUIC_CONNECTION_EVENT\u0026 connectionEvent) in /_/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicConnection.cs:line 773\n   at System.Net.Quic.QuicConnection.NativeCallback(QUIC_HANDLE* connection, Void* context, QUIC_CONNECTION_EVENT* connectionEvent) in /_/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicConnection.cs:line 808\n--- End of stack trace from previous location ---\n   at System.Net.Quic.QuicConnection.OpenOutboundStreamAsync(QuicStreamType type, CancellationToken cancellationToken) in /_/src/libraries/System.Net.Quic/src/System/Net/Quic/QuicConnection.cs:line 553\n   at System.Net.Quic.Tests.QuicStreamTests.ReadOutstanding_ReadAborted_Throws() in /_/src/libraries/System.Net.Quic/tests/FunctionalTests/QuicStreamTests.cs:line 506\n   at System.Net.Quic.Tests.QuicStreamTests.ReadOutstanding_ReadAborted_Throws() in /_/src/libraries/System.Net.Quic/tests/FunctionalTests/QuicStreamTests.cs:line 523\n   at System.Net.Quic.Tests.QuicStreamTests.ReadOutstanding_ReadAborted_Throws() in /_/src/libraries/System.Net.Quic/tests/FunctionalTests/QuicStreamTests.cs:line 523\n--- End of stack trace from previous location ---\n```",
                                           "updatedAt":  "2025-04-27T05:25:03Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "Test failure: System.Net.Quic.Tests.QuicStreamTests.TestStreams",
        "labels":  [
                       "arch-arm32",
                       "os-linux",
                       "JitStress",
                       "blocking-clean-ci-optional",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/111019",
        "createdAt":  "2025-01-01T07:21:28Z",
        "number":  111019,
        "author":  "xlievo",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-08T19:39:55Z",
        "body":  "### Describe the bug\n\nIn simple terms, I compiled the OpenSSL3 version of libsquic for Android ARM64-v8a based on the documentation, and utilized it within a .NET 8.0 Android project to establish a QUIC connection to the server.\n[https://github.com/microsoft/msquic/blob/main/docs/BUILD.md](https://github.com/microsoft/msquic/blob/main/docs/BUILD.md)\n```sh\npwsh ./scripts/build.ps1 -Platform android -Arch arm64 -Config Release\n```\nAdditionally, OpenSSL for msquic was compiled according to the documentation.\n[https://github.com/quictls/openssl](https://github.com/quictls/openssl)\n\n**So far, three native libraries have been obtained: libcrypto.so, libssl.so, and libmsquic.so.**\n\nHere are the exceptions thrown during usage on the Android 14 system. I\u0027m not sure if this is related to OpenSSL?\n**It\u0027s important to note that the same code connects successfully on Windows x64.**\n\n### Reproduction Steps\n\n```C#\nvar con = await QuicConnection.ConnectAsync(new QuicClientConnectionOptions\n{\n    IdleTimeout = TimeSpan.MaxValue,\n    RemoteEndPoint = new IPEndPoint(endPoint.Address.MapToIPv4(), 9000),\n    DefaultCloseErrorCode = 0x0A,\n    DefaultStreamErrorCode = 0x0B,\n    ClientAuthenticationOptions = new SslClientAuthenticationOptions\n    {\n        ApplicationProtocols = [SslApplicationProtocol.Http3],\n        RemoteCertificateValidationCallback = (sender, certificate, chain, errors) =\u003e true,\n        TargetHost = \"localhost\"\n    }\n});\n```\n\n### Expected behavior\n\nNormal connection\n\n### Actual behavior\n\n**The type initializer for \u0027Crypto\u0027 threw an exception.**\n```cmd\n   at System.Net.Security.CertificateValidation.BuildChainAndVerifyProperties(X509Chain chain, X509Certificate2 remoteCertificate, Boolean checkCertName, Boolean _, String hostName)\n   at System.Net.Security.CertificateValidation.BuildChainAndVerifyProperties(X509Chain chain, X509Certificate2 remoteCertificate, Boolean checkCertName, Boolean isServer, String hostName, IntPtr certificateBuffer, Int32 bufferLength)\n   at System.Net.Quic.QuicConnection.SslConnectionOptions.ValidateCertificate(QUIC_BUFFER* certificatePtr, QUIC_BUFFER* chainPtr, X509Certificate2\u0026 certificate)\n   at System.Net.Quic.QuicConnection.HandleEventPeerCertificateReceived(_PEER_CERTIFICATE_RECEIVED_e__Struct\u0026 data)\n--- End of stack trace from previous location ---\n   at System.Net.Quic.ValueTaskSource.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\n   at System.Net.Quic.QuicConnection.FinishConnectAsync(QuicClientConnectionOptions options, CancellationToken cancellationToken)\n   at System.Net.Quic.QuicConnection.\u003cConnectAsync\u003eg__StartConnectAsync|2_0(QuicClientConnectionOptions options, CancellationToken cancellationToken)\n   at System.Net.Quic.QuicConnection.\u003cConnectAsync\u003eg__StartConnectAsync|2_0(QuicClientConnectionOptions options, CancellationToken cancellationToken)\n```\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOq0K8FQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6Y_5RN",
                                           "createdAt":  "2025-01-01T07:22:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-01T07:22:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZAkow",
                                           "createdAt":  "2025-01-01T16:09:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-01-01T16:09:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZFN2P",
                                           "createdAt":  "2025-01-02T19:41:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "This is going to be trickier IMHO than just providing `libmsquic`. MsQuic expects openssl but the Android `Crypto` is wrapper around JAVA API. \nMaybe @simonrozsival would have some suggestion. I suspect we will need to add some more shim to .NET `Quic` layer.  ",
                                           "updatedAt":  "2025-01-02T19:41:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZV_hr",
                                           "createdAt":  "2025-01-06T09:26:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "simonrozsival",
                                           "body":  "I think that using OpenSSL on Android is currently not supported out of the box and it would require a custom build of the .NET runtime. @wfurt I\u0027m not familiar with the .NET `Quic` implementation so I have no idea what our options are. I assume we could extract the Android-specific bits of `SslStream` that call the Java APIs and share it with Quic though.",
                                           "updatedAt":  "2025-01-06T09:26:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZWd0h",
                                           "createdAt":  "2025-01-06T10:19:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "\u003e MsQuic expects openssl but the Android Crypto is wrapper around JAVA API.\n\nBut does it matter? We serialize / deserialize the certs between MsQuic and System.Net.Security? So theoretically this should work with whatever security backend .NET uses.",
                                           "updatedAt":  "2025-01-06T10:19:53Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZW9xG",
                                           "createdAt":  "2025-01-06T11:38:38Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "\u003e \u003e MsQuic expects openssl but the Android Crypto is wrapper around JAVA API.\n\u003e \n\u003e But does it matter? We serialize / deserialize the certs between MsQuic and System.Net.Security? So theoretically this should work with whatever security backend .NET uses.\n\nWe are calling into System.Net.Security.CertificateValidation, which has different implementations for each platform, we need to make a separate build of System.Net.Quic.dll for Android and use the correct platform-specific file there\n\nhttps://github.com/dotnet/runtime/blob/3e15b2898386637034d738f6e63204f1e721cb45/src/libraries/System.Net.Quic/src/System.Net.Quic.csproj#L104-L120\n\nEdit: There is no CertificateValidation.Android so this might require more work, but it seems to me that copying the Unix version and doing some fixups to use AndroidCrypto specific APIs might work.",
                                           "updatedAt":  "2025-01-06T11:52:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ZXgNQ",
                                           "createdAt":  "2025-01-06T13:06:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEBRXfQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2025-01-06T13:18:53Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "simonrozsival",
                                                                               "createdAt":  "2025-01-06T15:07:10Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "xlievo",
                                                                               "createdAt":  "2025-01-07T03:35:53Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  3
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "I think Android falls under the \"linux\" umbrella here. S.N.Quic would either be NOP / PNSE or it wouldn\u0027t compile without the `CertificateValidation.*.cs` code.\n\nSo this is basically feature request to implement `BuildChainAndVerifyProperties` for Android. @simonrozsival you should probably triage this based on your current load and priorities.\n\nAlso, we should explicitly make Android binary PNSE until it\u0027s functional and we have some test coverage.",
                                           "updatedAt":  "2025-01-06T13:06:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6Zbs1X",
                                           "createdAt":  "2025-01-07T00:39:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "Conceptually, there is certificate validation code for SslStream on Android. I would feel this would be mostly build change...\nThat posted exception above seems incomplete - it would be perhaps nice to give it shot at least under emulator.  ",
                                           "updatedAt":  "2025-01-07T00:39:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rCceb",
                                           "createdAt":  "2025-05-11T07:04:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Maklith",
                                           "body":  "\nI used the compiled library(Only msquic) to connect, and I got the following error\n```cs\nSystem.TypeInitializationException: The type initializer for \u0027Crypto\u0027 threw an exception.\n ---\u003e System.TypeInitializationException: The type initializer for \u0027CryptoInitializer\u0027 threw an exception.\n ---\u003e System.DllNotFoundException: libSystem.Security.Cryptography.Native.OpenSsl\n   at Interop.CryptoInitializer..cctor()\n   --- End of inner exception stack trace ---\n   at Interop.Crypto..cctor()\n   --- End of inner exception stack trace ---\n   at System.Net.Security.CertificateValidation.BuildChainAndVerifyProperties(X509Chain chain, X509Certificate2 remoteCertificate, Boolean checkCertName, Boolean _, String hostName)\n   at System.Net.Security.CertificateValidation.BuildChainAndVerifyProperties(X509Chain chain, X509Certificate2 remoteCertificate, Boolean checkCertName, Boolean isServer, String hostName, Span`1 certificateBuffer)\n   at System.Net.Quic.QuicConnection.SslConnectionOptions.ValidateCertificate(X509Certificate2 certificate, Span`1 certData, Span`1 chainData)\n   at System.Net.Quic.QuicConnection.SslConnectionOptions.StartAsyncCertificateValidation(IntPtr certificatePtr, IntPtr chainPtr)\n   at System.Net.Quic.ValueTaskSource.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)\n   at System.Net.Quic.QuicConnection.FinishConnectAsync(QuicClientConnectionOptions options, CancellationToken cancellationToken)\n   at System.Net.Quic.QuicConnection.\u003cConnectAsync\u003eg__StartConnectAsync|2_0(QuicClientConnectionOptions options, CancellationToken cancellationToken)\n   at System.Net.Quic.QuicConnection.\u003cConnectAsync\u003eg__StartConnectAsync|2_0(QuicClientConnectionOptions options, CancellationToken cancellationToken)\n   at QuicTest.ViewModels.MainViewModel.\u003c.ctor\u003eb__1_0() in D:\\CSs\\QuicTest\\QuicTest\\QuicTest\\ViewModels\\MainViewModel.cs:line 25\n```\nI\u0027ve noticed that there\u0027s a Cryptography implementation for Android in [System.Security.Cryptography.Native.Android](https://github.com/dotnet/runtime/tree/main/src/native/libs/System.Security.Cryptography.Native.Android) and how I should change it to use it",
                                           "updatedAt":  "2025-05-11T08:31:55Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rQrwV",
                                           "createdAt":  "2025-05-12T16:47:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "as @rzikm pointed out we should probably start with  Common/src/System/Net/Security/CertificateValidation.Android. \nGrab code from https://github.com/dotnet/runtime/blob/main/src/libraries/System.Net.Security/src/System/Net/CertificateValidationPal.Android.cs and refactor it to common and use it same way as https://github.com/dotnet/runtime/blob/main/src/libraries/System.Net.Security/src/System/Net/CertificateValidationPal.Unix.cs does. When ready, Quic can use it same way as SslStream. There may be little bit more fiddling with build and serialization.  \n",
                                           "updatedAt":  "2025-05-12T16:47:44Z"
                                       }
                                   ],
                         "totalCount":  10
                     },
        "title":  "android quic ConnectAsync throw exception",
        "labels":  [
                       "os-android",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/113100",
        "createdAt":  "2025-03-03T22:57:02Z",
        "number":  113100,
        "author":  "mastahg",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-03-05T11:05:52Z",
        "body":  "### Description\n\nCurrently if you attempt to disable ipv6 via System.Net.DisableIPv6 and initiate a Http3 connection it will fail because Socket.OSSupportsIPv6 will return false.\n\n### Reproduction Steps\n\nDisable ipv6 via System.Net.DisableIPv6\nCreate a http3 client with \n\n```\nHttpClient Client = new HttpClient()\n        {\n            DefaultRequestVersion = HttpVersion.Version30,\n            DefaultVersionPolicy = HttpVersionPolicy.RequestVersionExact\n        };\n\n```\nattempt to use the httpclient and it will throw an exception\n\n### Expected behavior\n\nHttp3 should work regardless of the presence of ipv6\n\n### Actual behavior\n\nIt does not work\n\n### Regression?\n\n_No response_\n\n### Known Workarounds\n\n_No response_\n\n### Configuration\n\n_No response_\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOoPfIPQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6grfo-",
                                           "createdAt":  "2025-03-03T22:57:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-03T22:57:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gr6Fr",
                                           "createdAt":  "2025-03-04T00:17:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-03-04T00:17:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gr9ce",
                                           "createdAt":  "2025-03-04T00:28:03Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihaZupan",
                                           "body":  "What issues are you trying to workaround by disabling IPv6?\n\nWe\u0027re disabling MsQuic if the OS doesn\u0027t support IPv6. At the Quic layer we don\u0027t know whether that\u0027s due to the OS actually not supporting it, or due to it being disabled via the switch.\nhttps://github.com/dotnet/runtime/blob/4fb40206e16efb0b43ef68d40b4bbf9abf873b8c/src/libraries/System.Net.Quic/src/System/Net/Quic/Internal/MsQuicApi.cs#L81-L90",
                                           "updatedAt":  "2025-03-04T00:28:03Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gsBVd",
                                           "createdAt":  "2025-03-04T00:41:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mastahg",
                                           "body":  "So we recently switched to using cloudflare proxy to protect our servers, they automatically define ipv6 aaaa records which can\u0027t be disabled without an enterprise plan, they handle the ipv6-\u003eipv4 conversion which works fine for most users. \nSome users however report issues where it seems like their ISP or their router has half-baked ipv6 support.  For these users ipv6 is utterly broken, from having extreme timeouts or just being unable to reach the servers. I\u0027ve had several users ping our services at the os the level and when ipv6 is enabled they\u0027ll be unable to contact the cloudflare edge servers. Having them disable ipv6 systemwide resolves the issue. \n\nDisabling ipv6 for my application seems to make the most sense, I was doing this via the System.Net.DisableIPv6 flag, and as you indicated this disables msquic. There is no way to handle this at the application layer when using http3 as the httpclient lacks a callback handler, as tracked in issue https://github.com/dotnet/runtime/issues/64449\n",
                                           "updatedAt":  "2025-03-04T00:41:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gsQo-",
                                           "createdAt":  "2025-03-04T01:31:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "antonfirsov",
                                           "body":  "\u003e For these users ipv6 is utterly broken\n\n@mastahg I\u0027m afraid this could mean that msquic (the underlying quic lib) is also doomed to fail given that it uses dual-mode (IPv6) sockets even for IPv4.\n\n\u003e ipv6 aaaa records\n\nOne possible way to enforce the usage of the IPv4 endpoints (and see if it helps) would be to use an IP address directly in the Uri (while setting the host header).",
                                           "updatedAt":  "2025-03-04T01:36:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gsVi3",
                                           "createdAt":  "2025-03-04T01:50:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mastahg",
                                           "body":  "\u003e \u003e For these users ipv6 is utterly broken\n\u003e \n\u003e [@mastahg](https://github.com/mastahg) I\u0027m afraid this could mean that msquic (the underlying quic lib) is also doomed to fail given that it uses dual-mode (IPv6) sockets even for IPv4.\n\nI\u0027m evaluating the usage of http3 in censorship prone environments, this effects a much larger portion of my userbase and I\u0027m weighing the pros and cons of each approach. Perhaps this issue would be better directed at the msquic repo. I\u0027m not a expert in sockets but the requirement of dual-mode sockets seems arbitrary.\n\n\u003e \u003e ipv6 aaaa records\n\u003e \n\u003e One possible way to enforce the usage of the IPv4 endpoints (and see if it helps) would be to use an IP address directly in the Uri (while setting the host header).\n\nI\u0027ll investigate this approach.\n\n",
                                           "updatedAt":  "2025-03-04T01:50:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6guo-Q",
                                           "createdAt":  "2025-03-04T08:13:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "rzikm",
                                           "body":  "this is related to https://github.com/dotnet/runtime/issues/75343 and (https://github.com/microsoft/msquic/issues/3052). I don\u0027t remember from top of my head if there were other reasons than these for checking for IPv6 availability.",
                                           "updatedAt":  "2025-03-04T08:13:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gupmC",
                                           "createdAt":  "2025-03-04T08:14:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEIY5Aw==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "rzikm",
                                                                               "createdAt":  "2025-03-04T08:21:42Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "\u003e Perhaps this issue would be better directed at the msquic repo.\n\nI 100% recommend this. Please do file the issue with MsQuic.\n\nFor context, this was changed in https://github.com/dotnet/runtime/pull/87208.",
                                           "updatedAt":  "2025-03-04T08:14:22Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6guqUG",
                                           "createdAt":  "2025-03-04T08:15:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Either way, there isn\u0027t much we can do about this on .NET level atm. ",
                                           "updatedAt":  "2025-03-04T08:15:41Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6gvkCH",
                                           "createdAt":  "2025-03-04T09:36:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "\u003e Either way, there isn\u0027t much we can do about this on .NET level atm.\n\ndocumentation ??? (unless it is already there) While the `QuicListener` may be problematic, could we make the client work if DualMode socket can be created with IPv4? ",
                                           "updatedAt":  "2025-03-04T09:36:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g1dSp",
                                           "createdAt":  "2025-03-04T17:09:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mastahg",
                                           "body":  "\u003e \u003e Either way, there isn\u0027t much we can do about this on .NET level atm.\n\u003e \n\u003e documentation ??? (unless it is already there) While the `QuicListener` may be problematic, could we make the client work if DualMode socket can be created with IPv4?\n\nThis had me wondering, if I patched Socket.OSSupportsIPv6 to always return true would it just work? And it does!\n\n```\n _harmony = new Harmony(\"hrmm\");\n            var thing = typeof(Socket).GetProperty(\"OSSupportsIPv6\");\n            if (thing != null)\n            {\n                _harmony.Patch(thing.GetMethod, postfix: new HarmonyMethod(Postfix));\n            }\n\n        static void Postfix(ref bool __result)\n        {\n            __result = true;\n        }\n```\nI had both System.Net.DisableIPv6 set to true, and ipv6 disabled on my only network interface.\n",
                                           "updatedAt":  "2025-03-04T17:09:45Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g3qHD",
                                           "createdAt":  "2025-03-04T21:20:27Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "mastahg",
                                           "body":  "So I did more testing, I can\u0027t even find a local scenario where Socket.OSSupportsIPv6 returns false other then setting System.Net.DisableIPv6. I\u0027m shipping on .net8, so the supported operating system is windows 10 at a minimum. I\u0027ve tried disabling ipv6 via registry and the network adapter but Socket.OSSupportsIPv6 still returns true. I don\u0027t understand how at least one user was able to trigger Socket.OSSupportsIPv6 being false.",
                                           "updatedAt":  "2025-03-04T21:20:27Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g3412",
                                           "createdAt":  "2025-03-04T21:42:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "wfurt",
                                           "body":  "there are some ways described in https://github.com/dotnet/runtime/pull/87208 and Windows is only one OS we care about. It is difficult for Quic layer to know if the address family is truly not supported by Kernel of if `OSSupportsIPv6` is false for any other reason. ",
                                           "updatedAt":  "2025-03-04T21:42:35Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6g98g9",
                                           "createdAt":  "2025-03-05T11:05:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "I talked offline with @wfurt, there is potential to improve this on the client side where we could check if we can create the dual mode socket (or even try to create MsQuic connection) despite IPv6 being disabled. We already have separate `IsSupported` for client and listener, so we can split the behavior here.",
                                           "updatedAt":  "2025-03-05T11:05:51Z"
                                       }
                                   ],
                         "totalCount":  14
                     },
        "title":  "Support Http3 in scenarios where ipv6 has been disabled at the runtime level",
        "labels":  [
                       "enhancement",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114911",
        "createdAt":  "2025-04-22T13:08:56Z",
        "number":  114911,
        "author":  "ManickaP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-06-17T15:22:23Z",
        "body":  "Follow up for https://github.com/microsoft/msquic/pull/4959\n\nMsQuic is adopting official OpenSSL TLS support for QUIC, we should adopt it in our CI pipeline as soon as possible to catch any potential problems.\n\nOne option to do that are to get some cutting edge docker image with OpenSSL 3.5, build MsQuic from their main and add it to our CI matrix.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOqv4ItA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6oKVeW",
                                           "createdAt":  "2025-04-22T13:09:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-22T13:09:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pAB17",
                                           "createdAt":  "2025-04-28T14:01:57Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEQEpFA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "HEART",
                                                                               "user":  "ManickaP",
                                                                               "createdAt":  "2025-04-29T07:20:27Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "Myself and @bartonjs are probably interested in this work. All of the PQC work depends on OpenSSL 3.5, and right now we are relying on an ad-hoc CI solution.\n\nOver at https://github.com/vcsjones/runtime-ci (for example, this run https://github.com/vcsjones/runtime-ci/actions/runs/14708797543) we have a daily job that runs crypto tests against OpenSSL 3.5.\n\nOn the other hand, if getting a docker image for the CI pipeline is going to take too much time, I can see about adding the Quic tests to my home-grown CI, if anything to at least give y\u0027all an idea of what to expect.",
                                           "updatedAt":  "2025-04-28T14:01:57Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6pENG8",
                                           "createdAt":  "2025-04-28T20:24:11Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "liveans",
                                           "body":  "\u003e On the other hand, if getting a docker image for the CI pipeline is going to take too much time, I can see about adding the Quic tests to my home-grown CI, if anything to at least give y\u0027all an idea of what to expect.\n\nIt shouldn\u0027t take too much time, some distros are providing docker image for their `latest` unreleased version.\nFor example: `alpine:edge` already has openssl 3.5, and we can perhaps use it for this purpose.\n\nI\u0027m planning to take a look at this as soon as clean up my plate.",
                                           "updatedAt":  "2025-04-28T20:25:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6q_gi0",
                                           "createdAt":  "2025-05-10T11:46:47Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOES03Zg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "liveans",
                                                                               "createdAt":  "2025-05-20T13:44:54Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "vcsjones",
                                           "body":  "For what it\u0027s worth, we\u0027ve noticed that CentOS Stream 10 and Debian 13 have OpenSSL 3.5, the former is already running in pipelines.",
                                           "updatedAt":  "2025-05-10T11:46:47Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[QUIC] Test MsQuic with OpenSSL 3.5",
        "labels":  [
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114912",
        "createdAt":  "2025-04-22T14:09:20Z",
        "number":  114912,
        "author":  "liveans",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-05T12:17:06Z",
        "body":  "We have observed that the Homebrew `libmsquic` package functions correctly when running a standalone project using dotnet run. However, when attempting to execute QUIC tests, the package fails to load `libssl/crypto`, both locally and in the CI environment. This issue requires further investigation to determine the root cause.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOu9jVfg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6oLCvR",
                                           "createdAt":  "2025-04-22T14:09:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-22T14:09:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc672NV-",
                                           "createdAt":  "2025-08-04T16:53:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEdJRxg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "CarnaViire",
                                                                               "createdAt":  "2025-08-05T10:16:46Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "liveans",
                                                                               "createdAt":  "2025-08-05T11:04:43Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Triage: moving to 11.0, we have a workaround (hopefully) via [#118339](https://github.com/dotnet/runtime/pull/118339), so it\u0027s not a blocker anymore.",
                                           "updatedAt":  "2025-08-04T16:53:43Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[QUIC] Use MsQuic from brew package in OSX",
        "labels":  [
                       "disabled-test",
                       "test-bug",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119641",
        "createdAt":  "2025-09-12T13:41:37Z",
        "number":  119641,
        "author":  "rzikm",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-12T14:13:42Z",
        "body":  "Discoverd during https://github.com/dotnet/runtime/pull/119265.\n\nOn linux, statically linked libssl does not recognize ML-DSA certificates as valid for TLS purposes. This introduces situation on OpenSSL 3.5.0+ systems where HTTP/1.1 and HTTP/2 can use ML-DSA certs (as they go through system libssl), but not with QUIC and by extension HTTP/3 (as they go through statically linked quictls which is pre 3.5.0 fork of OpenSSL.\n\nThis should get eventually resolved with MsQuic builds that use system libssl, as those expose APIs necessary to support MsQUic without need for a fork.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOw9QgEg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7D0oHg",
                                           "createdAt":  "2025-09-12T13:42:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-12T13:42:34Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7D1CAS",
                                           "createdAt":  "2025-09-12T14:13:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "Depends on https://github.com/microsoft/msquic/issues/5210",
                                           "updatedAt":  "2025-09-12T14:13:30Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "ML-DSA certificates cannot be used with QUIC and HTTP/3",
        "labels":  [
                       "tracking-external-issue",
                       "area-System.Net.Quic"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/119763",
        "createdAt":  "2025-09-16T14:07:41Z",
        "number":  119763,
        "author":  "ManickaP",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-09-20T22:04:42Z",
        "body":  "## Build Information\nBuild: https://dev.azure.com/dnceng-public/cbb18261-c48f-4abb-8651-8cdcb5474649/_build/results?buildId=1149293\nBuild error leg or test failing: System.Net.Quic.Functional.Tests.WorkItemExecution\nPull request: https://github.com/dotnet/runtime/pull/119747\n\u003c!-- Error message template  --\u003e\n## Error Message\n\nFill the error message using [step by step known issues guidance](https://github.com/dotnet/arcade/blob/main/Documentation/Projects/Build%20Analysis/KnownIssueJsonStepByStep.md).\n\n\u003c!-- Use ErrorMessage for String.Contains matches. Use ErrorPattern for regex matches (single line/no backtracking). Set BuildRetry to `true` to retry builds with this error. Set ExcludeConsoleLog to `true` to skip helix logs analysis. --\u003e\n\n```json\n{\n  \"ErrorMessage\": \"System.Net.Quic.Functional.Tests: [Long Running Test]\",\n  \"ErrorPattern\": \"\",\n  \"BuildRetry\": false,\n  \"ExcludeConsoleLog\": false\n}\n```\n\n\r\n\u003c!-- Known issue validation start --\u003e\r\n ### Known issue validation\r\n**Build: :mag_right:** https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149293\r\n**Error message validated:** `[System.Net.Quic.Functional.Tests: [Long Running Test]`]\r\n**Result validation:** :white_check_mark: Known issue matched with the provided build.\r\n**Validation performed at:** 9/16/2025 2:08:19 PM UTC\r\n\u003c!-- Known issue validation end --\u003e\r\n\u003c!--Known issue error report start --\u003e\r\n\r\n### Report\r\n\r\n|Build|Definition|Test|Pull Request|\r\n|---|---|---|---|\r\n|[1153851](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153851)|dotnet/runtime|[System.Net.Quic.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153851\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31873286\u0026resultId=216609)|dotnet/runtime#98643|\r\n|[1153438](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153438)|dotnet/runtime|[System.Net.Quic.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1153438\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31863248\u0026resultId=225851)|dotnet/runtime#119909|\r\n|[1150243](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150243)|dotnet/runtime|[System.Net.Quic.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1150243\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31773748\u0026resultId=212084)|dotnet/runtime#119793|\r\n|[1149293](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149293)|dotnet/runtime|[System.Net.Quic.Functional.Tests.WorkItemExecution](https://dev.azure.com/dnceng-public/public/_build/results?buildId=1149293\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=31746488\u0026resultId=225646)|dotnet/runtime#119747|\r\n#### Summary\r\n|24-Hour Hit Count|7-Day Hit Count|1-Month Count|\r\n|---|---|---|\r\n|2|4|4|\r\n\u003c!--Known issue error report end --\u003e",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOxKI4wA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc7Eofme",
                                           "createdAt":  "2025-09-16T14:09:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ManickaP",
                                           "body":  "It still happens albeit much less than in the past.\nOccurs on all platforms, from once to few times a week.\nKusto query:\n```kql\nWorkItems\n| where FriendlyName == \"System.Net.Quic.Functional.Tests\"  and Status == \"Timeout\"\n```",
                                           "updatedAt":  "2025-09-16T14:09:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7Eohkt",
                                           "createdAt":  "2025-09-16T14:11:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @dotnet/ncl\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-09-16T14:11:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc7EojjA",
                                           "createdAt":  "2025-09-16T14:12:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MihuBot",
                                           "body":  "I\u0027m a bot. Here are possible related and/or duplicate issues (I may be wrong):\n- https://github.com/dotnet/runtime/issues/103482\n- https://github.com/dotnet/runtime/issues/107761\n- https://github.com/dotnet/runtime/issues/107762",
                                           "updatedAt":  "2025-09-16T14:12:54Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[QUIC] Sporadic long running tests",
        "labels":  [
                       "blocking-clean-ci",
                       "area-System.Net.Quic",
                       "Known Build Error"
                   ]
    }
]
