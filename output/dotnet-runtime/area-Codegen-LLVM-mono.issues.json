[
    {
        "url":  "https://github.com/dotnet/runtime/issues/34390",
        "createdAt":  "2020-04-01T12:50:37Z",
        "number":  34390,
        "author":  "SamMonoRT",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-26T15:53:17Z",
        "body":  "Crash seen when running the following CoreCLR test on the mono runtime from the dotnet\\runtime repo.\r\nRepro : Command to run individual tests : From the dotnet\\runtime repo src\\mono\\netcore run this command or relevant one for a particular test - make run-tests-coreclr CoreClrTest=\"bash ../../artifacts/tests/coreclr/OSX.x64.Debug/Regressions/coreclr/15647/interfacestatics/interfacestatics.sh\"\r\n\r\nCrash report :\r\n\r\n =================================================================\r\n          External Debugger Dump:\r\n          =================================================================\r\n          /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Regressions/coreclr/15647/interfacestatics/interfacestatics.sh: line 275: 87420 Abort trap: 6           $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n          \r\n          Return code:      1\r\n          Raw output file:      /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Regressions/coreclr/Reports/Regressions.coreclr/15647/interfacestatics/interfacestatics.output.txt\r\n          Raw output:\r\n          BEGIN EXECUTION\r\n          /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/corerun interfacestatics.dll \u0027\u0027\r\n          * Assertion at /Users/samarthpatel/Documents/DotNetRunTime/runtime/src/mono/mono/mini/mini-trampolines.c:619, condition `actual_method\u0027 not met\r\n          \r\n          \r\n          =================================================================\r\n          Native Crash Reporting\r\n          =================================================================\r\n          Got a abrt while executing native code. This usually indicates\r\n          a fatal error in the mono runtime or one of the native libraries \r\n          used by your application.\r\n          =================================================================\r\n          \r\n          =================================================================\r\n          Native stacktrace:\r\n          =================================================================\r\n          0x104fc24b2 - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/libcoreclr.dylib : mono_dump_native_crash_info\r\n          0x104f64105 - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/libcoreclr.dylib : mono_handle_native_crash\r\n          0x104fc1abf - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/libcoreclr.dylib : sigabrt_signal_handler\r\n          0x7fff728f342d - /usr/lib/system/libsystem_platform.dylib : _sigtramp\r\n          0x0 - Unknown\r\n          0x7fff727c8a1c - /usr/lib/system/libsystem_c.dylib : abort\r\n          0x10517f117 - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/libcoreclr.dylib : monoeg_assert_abort\r\n          0x10515f117 - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/libcoreclr.dylib : mono_log_write_logfile\r\n          0x10517f5a5 - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/libcoreclr.dylib : monoeg_g_logv_nofree\r\n          0x10517f72f - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/libcoreclr.dylib : monoeg_assertion_message\r\n          0x10517f76a - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/libcoreclr.dylib : mono_assertion_message\r\n          0x104f66f78 - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/libcoreclr.dylib : common_call_trampoline\r\n          0x104f66690 - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/libcoreclr.dylib : mono_magic_trampoline\r\n          0x105343393 - Unknown\r\n          0x1053c7f4b - Unknown\r\n          0x104ec7f9e - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/libcoreclr.dylib : mono_jit_runtime_invoke\r\n          0x10509d2c8 - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/libcoreclr.dylib : mono_runtime_invoke_checked\r\n          0x1050a3645 - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/libcoreclr.dylib : mono_runtime_exec_main_checked\r\n          0x104f2202c - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/libcoreclr.dylib : mono_jit_exec\r\n          0x104f25126 - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/libcoreclr.dylib : mono_main\r\n          0x104f9e589 - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/libcoreclr.dylib : monovm_execute_assembly\r\n          0x104e7c896 - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/corerun : _Z22ExecuteManagedAssemblyPKcS0_S0_iPS0_\r\n          0x104e7b18d - /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root/corerun : main\r\n          0x7fff726fa7fd - /usr/lib/system/libdyld.dylib : start\r\n          \r\n          =================================================================\r\n          Telemetry Dumper:\r\n          =================================================================\r\n          Pkilling 0x123145405009920x from 0x4616334784x\r\n          Entering thread summarizer pause from 0x4616334784x\r\n          Finished thread summarizer pause from 0x4616334784x.\r\n          \r\n          Waiting for dumping threads to resume\r\n          \r\n          =================================================================\r\n          Basic Fault Address Reporting\r\n          =================================================================\r\n          Memory around native instruction pointer (0x7fff728417fa):0x7fff728417ea  ff ff c3 90 90 90 b8 48 01 00 02 49 89 ca 0f 05  .......H...I....\r\n          0x7fff728417fa  73 08 48 89 c7 e9 85 a2 ff ff c3 90 90 90 b8 53  s.H............S\r\n          0x7fff7284180a  00 00 02 49 89 ca 0f 05 73 08 48 89 c7 e9 6d a2  ...I....s.H...m.\r\n          0x7fff7284181a  ff ff c3 90 90 90 b8 83 01 00 02 49 89 ca 0f 05  ...........I....\r\n          \r\n          =================================================================\r\n          Managed Stacktrace:\r\n          =================================================================\r\n            at \u003cunknown\u003e \u003c0xffffffff\u003e\r\n            at IFoo:GimmeU_T \u003c0x000aa\u003e\r\n            at \u003cModule\u003e:Main \u003c0x0016a\u003e\r\n            at \u003cModule\u003e:runtime_invoke_int \u003c0x000a5\u003e\r\n          =================================================================\r\n          Expected: 100\r\n          Actual: 134\r\n          END EXECUTION - FAILED\r\n          Test Harness Exitcode is : 1\r\n          To run the test:\r\n          \u003e set CORE_ROOT=/Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Tests/Core_Root\r\n          \u003e /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/Regressions/coreclr/15647/interfacestatics/interfacestatics.sh\r\n          Expected: True\r\n          Actual:   False\r\n          Stack Trace:\r\n            /Users/samarthpatel/Documents/DotNetRunTime/runtime/artifacts/tests/coreclr/OSX.x64.Debug/TestWrappers/Regressions.coreclr/Regressions.coreclr.XUnitWrapper.cs(334,0): at Regressions_coreclr._15647_interfacestatics_interfacestatics_._15647_interfacestatics_interfacestatics_sh()\r\n            /Users/samarthpatel/Documents/DotNetRunTime/runtime/src/mono/netcore/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.cs(339,0): at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOahZr_w==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNzIyOTk2Mw==",
                                           "createdAt":  "2020-04-01T12:50:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "Dotnet-GitSync-Bot",
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. Please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2020-04-01T12:50:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwNzMwNDc2MQ==",
                                           "createdAt":  "2020-04-01T15:06:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "### Area Owners\n@lambdageek",
                                           "updatedAt":  "2020-04-01T15:06:43Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYwOTExNjEwMA==",
                                           "createdAt":  "2020-04-05T01:54:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "CoffeeFlux",
                                           "body":  "Issue appears to be related to looking up static methods on interfaces.\r\n\r\n```\r\n\t\tif (method_inst || m-\u003ewrapper_type) {\r\n\t\t\tMonoGenericContext context = { NULL, NULL };\r\n\r\n\t\t\tif (m-\u003eis_inflated)\r\n\t\t\t\tdeclaring = mono_method_get_declaring_generic_method (m);\r\n\t\t\telse\r\n\t\t\t\tdeclaring = m;\r\n\r\n\t\t\tif (mono_class_is_ginst (klass))\r\n\t\t\t\tcontext.class_inst = mono_class_get_generic_class (klass)-\u003econtext.class_inst;\r\n\t\t\telse if (mono_class_is_gtd (klass))\r\n\t\t\t\tcontext.class_inst = mono_class_get_generic_container (klass)-\u003econtext.class_inst;\r\n\t\t\tcontext.method_inst = method_inst;\r\n\r\n\t\t\tactual_method = mono_class_inflate_generic_method_checked (declaring, \u0026context, error);\r\n\t\t\tmono_error_assert_ok (error);\r\n\t\t} else {\r\n\t\t\tactual_method = mono_class_get_method_generic (klass, m, error);\r\n\t\t\tmono_error_assert_ok (error);\r\n\t\t}\r\n```\r\n\r\nAt the end of this code `actual_method` appears to be null, but the MonoError is fine and so we hit an assert. The problematic method, going by the managed stack trace, is this:\r\n```\r\n  .method public static class [System.Runtime]System.Type GimmeU_T\u003cU\u003e()\r\n  {\r\n    call class [System.Runtime]System.Type class IFoo\u003c!!U\u003e::GimmeT()\r\n    ret\r\n  }\r\n```",
                                           "updatedAt":  "2020-04-05T01:54:10Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDYxMDk2NTYzNQ==",
                                           "createdAt":  "2020-04-08T13:39:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@CoffeeFlux - sending this your way. ",
                                           "updatedAt":  "2020-04-08T13:39:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5e7sTS",
                                           "createdAt":  "2023-06-15T09:35:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrzVlad",
                                           "body":  "This test currently fails only on `llvm aot`. Trying to enable this `https://github.com/dotnet/runtime/pull/84419` lead to failure on lane `Build linux-x64 Release AllSubsets_Mono_LLVMAot_RuntimeTests llvmaot`",
                                           "updatedAt":  "2023-06-15T09:35:25Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5qFmv_",
                                           "createdAt":  "2023-10-25T18:46:28Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@BrzVlad - static interface related. Low priority - can you validate status of this on latest main.",
                                           "updatedAt":  "2023-10-25T18:46:28Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "CoreCLR tests on Mono runtime : crash running Regressions/coreclr/15647/interfacestatics/interfacestatics.sh",
        "labels":  [
                       "runtime-mono",
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/42350",
        "createdAt":  "2020-09-16T22:28:58Z",
        "number":  42350,
        "author":  "imhameed",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-11T14:58:33Z",
        "body":  "## .NET 6\r\n\r\n### `System.Runtime.Intrinsics.Vector128`:\r\n\r\n- AsByte\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsDouble\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsInt16\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsInt32\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsInt64\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsSByte\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsSingle\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsUInt16\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsUInt32\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsUInt64\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsVector128\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsVector4\r\n    - [ ] amd64 - Blocked on improved support for System.Numerics.Vector\r\n    - [ ] arm64 - Blocked on improved support for System.Numerics.Vector\r\n- AsVector\r\n    - [ ] amd64 - Blocked on improved support for System.Numerics.Vector\r\n    - [ ] arm64 - Blocked on improved support for System.Numerics.Vector\r\n- As\r\n    - [x] amd64\r\n    - [x] arm64\r\n- Create\r\n    - [x] amd64\r\n    - [x] arm64\r\n- CreateScalarUnsafe\r\n    - [x] amd64\r\n    - [x] arm64\r\n- GetElement\r\n    - [x] amd64\r\n    - [x] arm64\r\n- WithElement\r\n    - [x] amd64 - This is intrinsified in Mono but not CoreCLR; revise this decision if cross-assembly AOT inlining works\r\n    - [x] arm64 - This is intrinsified in Mono but not CoreCLR; revise this decision if cross-assembly AOT inlining works\r\n- GetLower\r\n    - [x] amd64\r\n    - [x] arm64\r\n- GetUpper\r\n    - [x] amd64\r\n    - [x] arm64\r\n- ToScalar\r\n    - [x] amd64\r\n    - [x] arm64\r\n- ToVector256\r\n    - [ ] amd64 - Blocked on 256-bit vector support\r\n    - [ ] arm64 - Blocked on 256-bit vector support\r\n- ToVector256Unsafe\r\n    - [ ] amd64 - Blocked on 256-bit vector support\r\n    - [ ] arm64 - Blocked on 256-bit vector support\r\n- WithLower\r\n    - [x] amd64\r\n    - [x] arm64\r\n- WithUpper\r\n    - [x] amd64\r\n    - [x] arm64\r\n\r\n### `System.Runtime.Intrinsics.Vector128\u003cT\u003e`:\r\n\r\n- AllBitsSet\r\n    - [x] amd64\r\n    - [x] arm64\r\n- Count\r\n    - [x] amd64\r\n    - [x] arm64\r\n- Zero\r\n    - [x] amd64\r\n    - [x] arm64\r\n\r\n### `System.Runtime.Intrinsics.Vector64`:\r\n\r\n- As\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsByte\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsDouble\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsInt16\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsInt32\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsInt64\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsSByte\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsSingle\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsUInt16\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AsUInt32\r\n    - [x] amd64\r\n    - [x] arm64\r\n- Create\r\n    - [x] amd64\r\n    - [x] arm64\r\n- CreateScalarUnsafe\r\n    - [x] amd64\r\n    - [x] arm64\r\n- GetElement\r\n    - [x] amd64\r\n    - [x] arm64\r\n- WithElement\r\n    - [x] amd64 - This is intrinsified in Mono but not CoreCLR; revise this decision if cross-assembly AOT inlining works\r\n    - [x] arm64 - This is intrinsified in Mono but not CoreCLR; revise this decision if cross-assembly AOT inlining works\r\n- ToScalar\r\n    - [x] amd64\r\n    - [x] arm64\r\n- ToVector128\r\n    - [x] amd64\r\n    - [x] arm64\r\n- ToVector128Unsafe\r\n    - [x] amd64\r\n    - [x] arm64\r\n\r\n### `System.Runtime.Intrinsics.Vector64\u003cT\u003e`:\r\n\r\n- Count\r\n    - [x] amd64\r\n    - [x] arm64\r\n- Zero\r\n    - [x] amd64\r\n    - [x] arm64\r\n- AllBitsSet\r\n    - [x] amd64\r\n    - [x] arm64\r\n\r\n\r\n## Future\r\n\r\n### `System.Runtime.Intrinsics.Vector256`:\r\n\r\n- As\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsByte\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsDouble\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsInt16\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsInt32\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsInt64\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsSByte\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsSingle\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsUInt16\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsUInt32\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsVector256\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsVector\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- Create\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- CreateScalarUnsafe\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- GetElement\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- WithElement\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- GetLower\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- ToScalar\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n\r\n### `System.Runtime.Intrinsics.Vector256\u003cT\u003e`:\r\n\r\n- Count\r\n    - [x] amd64\r\n    - [ ] arm64\r\n- Zero\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AllBitsSet\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n\r\n### `System.Runtime.Intrinsics.Vector512`:\r\n\r\n- As\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsByte\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsDouble\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsInt16\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsInt32\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsInt64\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsSByte\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsSingle\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsUInt16\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsUInt32\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsVector256\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AsVector\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- Create\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- CreateScalarUnsafe\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- GetElement\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- WithElement\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- GetLower\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- ToScalar\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n\r\n### `System.Runtime.Intrinsics.Vector512\u003cT\u003e`:\r\n\r\n- Count\r\n    - [x] amd64\r\n    - [ ] arm64\r\n- Zero\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n- AllBitsSet\r\n    - [ ] amd64\r\n    - [ ] arm64\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhkk8Mw==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDY5MzY5OTM0OA==",
                                           "createdAt":  "2020-09-16T22:29:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: \nSee info in area-owners.md if you want to be subscribed.",
                                           "updatedAt":  "2020-09-16T22:29:02Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDc2Mzg1MTc0Ng==",
                                           "createdAt":  "2021-01-20T18:40:00Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "imhameed",
                                           "body":  "Some work towards completing this is done in: https://github.com/dotnet/runtime/pull/47028",
                                           "updatedAt":  "2021-01-20T18:40:00Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg3MjM5NTA2MQ==",
                                           "createdAt":  "2021-07-01T16:40:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "imhameed",
                                           "body":  "The non-System.Numerics.Vector and non-256-bit-SIMD parts were finished in: https://github.com/dotnet/runtime/pull/54924",
                                           "updatedAt":  "2021-07-01T16:40:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44T87T",
                                           "createdAt":  "2021-10-15T22:08:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kasperk81",
                                           "body":  "were there some disabled tests and that should be enabled after #54924 work or is there no way to confirm in tests whether underlying runtime used software fallback or the real thing?",
                                           "updatedAt":  "2021-10-15T22:08:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hn-bD",
                                           "createdAt":  "2022-08-01T20:10:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "Didn\u0027t have bandwidth to work on Vector256 in .NET7. Moving to milestone 8.0.0",
                                           "updatedAt":  "2022-08-01T20:10:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hUgoS",
                                           "createdAt":  "2023-07-12T15:35:23Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "Moving tracking issue to 9.0.0",
                                           "updatedAt":  "2023-07-12T15:35:23Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hWaTg",
                                           "createdAt":  "2023-07-12T21:59:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kasperk81",
                                           "body":  "vec 512 is missing from the list. would be nice to have https://github.com/dotnet/runtime/issues/87037 fixed in 8.0 so software fallback work on mono",
                                           "updatedAt":  "2023-07-12T21:59:58Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6GSTwz",
                                           "createdAt":  "2024-07-26T14:57:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "Moving tracking issue to 10.0.0",
                                           "updatedAt":  "2024-07-26T14:57:53Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "[mono] Tracking: Implement `System.Runtime.Intrinsics.Vector{512,128,256,64}`",
        "labels":  [
                       "runtime-mono",
                       "tracking",
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/43050",
        "createdAt":  "2020-10-05T17:49:03Z",
        "number":  43050,
        "author":  "imhameed",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-05-21T16:26:33Z",
        "body":  "Mostly a note to myself. Several SIMD instructions on amd64 (e.g. shuffles, dot products, blending, etc.) take immediate control masks. We currently generate large branching fallback code inline but this is not great for code size. Can use `llvm.is.constant` to keep the large materialized branching code sequence out of line while still allowing constant propagation to simplify shuffles with control masks that happen to be constant after optimization.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYTZJxA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDcwNDA5MTkwNg==",
                                           "createdAt":  "2020-10-06T07:40:54Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "EgorBo",
                                           "body":  "LLVM needs a sort of `llvm.convert_to_const(value, range)` so it can generate a switch itself",
                                           "updatedAt":  "2020-10-06T07:40:54Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5Hn-7N",
                                           "createdAt":  "2022-08-01T20:12:09Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCpkqXQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "ivanpovazan",
                                                                               "createdAt":  "2022-08-01T20:48:50Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "Nice to have feature. Moving to 8.0.0",
                                           "updatedAt":  "2022-08-01T20:12:09Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hNknE",
                                           "createdAt":  "2023-07-11T14:34:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "ivanpovazan",
                                           "body":  "Moving to 9.0.0",
                                           "updatedAt":  "2023-07-11T14:34:33Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "[mono] Share large fallback immediate-parameter workaround code sequences",
        "labels":  [
                       "runtime-mono",
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/46881",
        "createdAt":  "2021-01-12T22:03:55Z",
        "number":  46881,
        "author":  "imhameed",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2022-03-01T18:59:05Z",
        "body":  "Crash info:\r\n\r\n```\r\ncorerun: /home/imhameed/ms/llvm-9.x/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp:401: void llvm::RuntimeDyldELF::resolveAArch64Relocation(const llvm::SectionEntry \u0026, uint64_t, uint64_t, uint32_t, int64_t): Assertion `static_cast\u003cint64_t\u003e(Result) \u003e= INT32_MIN \u0026\u0026 static_cast\u003cint64_t\u003e(Result) \u003c= UINT32_MAX\u0027 failed.\r\n\r\n=================================================================\r\n»       Native Crash Reporting\r\n=================================================================\r\nGot a SIGABRT while executing native code. This usually indicates\r\na fatal error in the mono runtime or one of the native libraries·\r\nused by your application.\r\n=================================================================\r\n\r\n=================================================================\r\n»       Native stacktrace:\r\n=================================================================\r\n»       0xffffb83872dc - Unknown\r\n\r\n=================================================================\r\n»       Telemetry Dumper:\r\n=================================================================\r\nPkilling 0x281473727881680x from 0x281473802608576x\r\nEntering thread summarizer pause from 0x281473802608576x\r\nCould not exec mono-hang-watchdog, expected on path \u0027/home/imhameed/ms/dnr-9.x/runtime/artifacts/obj/mono/Linux.arm64.Release/out/etc/../bin/mono-hang-watchdog\u0027 (errno 2)\r\nFinished thread summarizer pause from 0x281473802608576x.\r\nFailed to create breadcrumb file (null)/crash_hash_0x0\r\n\r\nWaiting for dumping threads to resume\r\n\r\n=================================================================\r\n»       External Debugger Dump:\r\n=================================================================\r\n[New LWP 23998]\r\n[New LWP 23999]\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/aarch64-linux-gnu/libthread_db.so.1\".\r\n0x0000ffffba426d5c in __waitpid (pid=\u003coptimized out\u003e, stat_loc=0xffffcffd0da4, options=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/waitpid.c:30\r\n30»     ../sysdeps/unix/sysv/linux/waitpid.c: No such file or directory.\r\n  Id   Target Id         Frame·\r\n* 1    Thread 0xffffba049fc0 (LWP 23996) \"corerun\" 0x0000ffffba426d5c in __waitpid (pid=\u003coptimized out\u003e, stat_loc=0xffffcffd0da4, options=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/waitpid.c:30\r\n  2    Thread 0xffffb73ff1d0 (LWP 23998) \"SGen worker\" 0x0000ffffba4222a4 in futex_wait_cancelable (private=\u003coptimized out\u003e, expected=0, futex_word=0xffffba00d4e0 \u003cwork_cond+40\u003e) at ../sysdeps/unix/sysv/linux/futex-internal.h:88\r\n  3    Thread 0xffffb59061d0 (LWP 23999) \"corerun\" 0x0000ffffba111e28 in __GI___poll (fds=0xffffb0003a60, nfds=281473792771112, timeout=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/poll.c:41\r\n\r\nThread 3 (Thread 0xffffb59061d0 (LWP 23999)):\r\n#0  0x0000ffffba111e28 in __GI___poll (fds=0xffffb0003a60, nfds=281473792771112, timeout=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/poll.c:41\r\n#1  0x0000ffffb82a648c in ds_ipc_poll (poll_handles_data=0xffffb00031f0, poll_handles_data_len=1, timeout_ms=4294967295, callback=0xffffb82a5c0c \u003cserver_warning_callback\u003e) at /home/imhameed/ms/dnr-9.x/runtime/src/native/eventpipe/ds-ipc-posix.c:422\r\n#2  0x0000ffffb82a45d4 in ds_ipc_stream_factory_get_next_available_stream (callback=0xffffb82a5c0c \u003cserver_warning_callback\u003e) at /home/imhameed/ms/dnr-9.x/runtime/src/native/eventpipe/ds-ipc.c:367\r\n#3  0x0000ffffb82a30e0 in server_thread (data=\u003coptimized out\u003e) at /home/imhameed/ms/dnr-9.x/runtime/src/native/eventpipe/ds-server.c:124\r\n#4  0x0000ffffb82a5be4 in ep_rt_thread_mono_start_func (data=0xaaaaeb4ae390) at /home/imhameed/ms/dnr-9.x/runtime/src/mono/mono/mini/../eventpipe/ep-rt-mono.h:1311\r\n#5  0x0000ffffba41c088 in start_thread (arg=0xffffcffd3d5f) at pthread_create.c:463\r\n#6  0x0000ffffba11affc in thread_start () at ../sysdeps/unix/sysv/linux/aarch64/clone.S:78\r\n\r\nThread 2 (Thread 0xffffb73ff1d0 (LWP 23998)):\r\n#0  0x0000ffffba4222a4 in futex_wait_cancelable (private=\u003coptimized out\u003e, expected=0, futex_word=0xffffba00d4e0 \u003cwork_cond+40\u003e) at ../sysdeps/unix/sysv/linux/futex-internal.h:88\r\n#1  __pthread_cond_wait_common (abstime=0x0, mutex=0xffffba00d488 \u003clock\u003e, cond=0xffffba00d4b8 \u003cwork_cond\u003e) at pthread_cond_wait.c:502\r\n#2  __pthread_cond_wait (cond=0xffffba00d4b8 \u003cwork_cond\u003e, mutex=0xffffba00d488 \u003clock\u003e) at pthread_cond_wait.c:655\r\n#3  0x0000ffffb828bd44 in mono_os_cond_wait (cond=0xffffba00d4e0 \u003cwork_cond+40\u003e, mutex=\u003coptimized out\u003e) at /home/imhameed/ms/dnr-9.x/runtime/src/mono/mono/mini/../../mono/utils/mono-os-mutex.h:219\r\n#4  get_work (worker_index=\u003coptimized out\u003e, work_context=\u003coptimized out\u003e, do_idle=\u003coptimized out\u003e, job=\u003coptimized out\u003e) at /home/imhameed/ms/dnr-9.x/runtime/src/mono/mono/sgen/sgen-thread-pool.c:167\r\n#5  thread_func (data=0x0) at /home/imhameed/ms/dnr-9.x/runtime/src/mono/mono/sgen/sgen-thread-pool.c:198\r\n#6  0x0000ffffba41c088 in start_thread (arg=0xffffcffd3d5f) at pthread_create.c:463\r\n#7  0x0000ffffba11affc in thread_start () at ../sysdeps/unix/sysv/linux/aarch64/clone.S:78\r\n\r\nThread 1 (Thread 0xffffba049fc0 (LWP 23996)):\r\n#0  0x0000ffffba426d5c in __waitpid (pid=\u003coptimized out\u003e, stat_loc=0xffffcffd0da4, options=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/waitpid.c:30\r\n#1  0x0000ffffb83874bc in dump_native_stacktrace (signal=\u003coptimized out\u003e, mctx=\u003coptimized out\u003e) at /home/imhameed/ms/dnr-9.x/runtime/src/mono/mono/mini/mini-posix.c:1060\r\n#2  mono_dump_native_crash_info (signal=\u003coptimized out\u003e, mctx=\u003coptimized out\u003e, info=\u003coptimized out\u003e) at /home/imhameed/ms/dnr-9.x/runtime/src/mono/mono/mini/mini-posix.c:1104\r\n#3  0x0000ffffb834645c in mono_handle_native_crash (signal=0xffffb96e153e \"SIGABRT\", mctx=0xffffcffd1900, info=0xffffcffd1c50) at /home/imhameed/ms/dnr-9.x/runtime/src/mono/mono/mini/mini-exceptions.c:3451\r\n#4  0x0000ffffb838687c in sigabrt_signal_handler (_dummy=6, _info=0xffffcffd1c50, context=0xffffcffd1cd0) at /home/imhameed/ms/dnr-9.x/runtime/src/mono/mono/mini/mini-posix.c:234\r\n#5  \u003csignal handler called\u003e\r\n#6  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51\r\n#7  0x0000ffffba07e8d4 in __GI_abort () at abort.c:79\r\n#8  0x0000ffffba076b84 in __assert_fail_base (fmt=0xffffba171c10 \"%s%s%s:%u: %s%sAssertion `%s\u0027 failed.\\n%n\", assertion=assertion@entry=0xffffb9c08288 \"static_cast\u003cint64_t\u003e(Result) \u003e= INT32_MIN \u0026\u0026 static_cast\u003cint64_t\u003e(Result) \u003c= UINT32_MAX\", file=file@entry=0xffffb9c07f62 \"/home/imhameed/ms/llvm-9.x/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp\", line=line@entry=401, function=function@entry=0xffffb9c081d0 \"void llvm::RuntimeDyldELF::resolveAArch64Relocation(const llvm::SectionEntry \u0026, uint64_t, uint64_t, uint32_t, int64_t)\") at assert.c:92\r\n#9  0x0000ffffba076c04 in __GI___assert_fail (assertion=0xffffb9c08288 \"static_cast\u003cint64_t\u003e(Result) \u003e= INT32_MIN \u0026\u0026 static_cast\u003cint64_t\u003e(Result) \u003c= UINT32_MAX\", file=0xffffb9c07f62 \"/home/imhameed/ms/llvm-9.x/llvm-project/llvm/lib/ExecutionEngine/RuntimeDyld/RuntimeDyldELF.cpp\", line=401, function=0xffffb9c081d0 \"void llvm::RuntimeDyldELF::resolveAArch64Relocation(const llvm::SectionEntry \u0026, uint64_t, uint64_t, uint32_t, int64_t)\") at assert.c:101\r\n#10 0x0000ffffb8fe6d00 in llvm::RuntimeDyldELF::resolveAArch64Relocation(llvm::SectionEntry const\u0026, unsigned long, unsigned long, unsigned int, long) () from /home/imhameed/ms/dnr-9.x/runtime/artifacts/tests/coreclr/Linux.arm64.Release/Tests/Core_Root/libcoreclr.so\r\n#11 0x0000ffffb8fd7580 in llvm::RuntimeDyldImpl::resolveLocalRelocations() () from /home/imhameed/ms/dnr-9.x/runtime/artifacts/tests/coreclr/Linux.arm64.Release/Tests/Core_Root/libcoreclr.so\r\n#12 0x0000ffffb8fd65cc in llvm::RuntimeDyldImpl::resolveRelocations() () from /home/imhameed/ms/dnr-9.x/runtime/artifacts/tests/coreclr/Linux.arm64.Release/Tests/Core_Root/libcoreclr.so\r\n#13 0x0000ffffb8fd65cc in llvm::RuntimeDyldImpl::resolveRelocations() () from /home/imhameed/ms/dnr-9.x/runtime/artifacts/tests/coreclr/Linux.arm64.Release/Tests/Core_Root/libcoreclr.so\r\n#14 0x0000ffffb8fd65cc in llvm::RuntimeDyldImpl::resolveRelocations() () from /home/imhameed/ms/dnr-9.x/runtime/artifacts/tests/coreclr/Linux.arm64.Release/Tests/Core_Root/libcoreclr.so\r\n#15 0x0000ffffb8fd65cc in llvm::RuntimeDyldImpl::resolveRelocations() () from /home/imhameed/ms/dnr-9.x/runtime/artifacts/tests/coreclr/Linux.arm64.Release/Tests/Core_Root/libcoreclr.so\r\n#16 0x0000ffffb8fd65cc in llvm::RuntimeDyldImpl::resolveRelocations() () from /home/imhameed/ms/dnr-9.x/runtime/artifacts/tests/coreclr/Linux.arm64.Release/Tests/Core_Root/libcoreclr.so\r\n#17 0x0000ffffb8fd65cc in llvm::RuntimeDyldImpl::resolveRelocations() () from /home/imhameed/ms/dnr-9.x/runtime/artifacts/tests/coreclr/Linux.arm64.Release/Tests/Core_Root/libcoreclr.so\r\n#18 0x0000ffffb8fd65cc in llvm::RuntimeDyldImpl::resolveRelocations() () from /home/imhameed/ms/dnr-9.x/runtime/artifacts/tests/coreclr/Linux.arm64.Release/Tests/Core_Root/libcoreclr.so\r\n#19 0x0000ffffb8fd65cc in llvm::RuntimeDyldImpl::resolveRelocations() () from /home/imhameed/ms/dnr-9.x/runtime/artifacts/tests/coreclr/Linux.arm64.Release/Tests/Core_Root/libcoreclr.so\r\n#20 0x0000ffffb8fd65cc in llvm::RuntimeDyldImpl::resolveRelocations() () from /home/imhameed/ms/dnr-9.x/runtime/artifacts/tests/coreclr/Linux.arm64.Release/Tests/Core_Root/libcoreclr.so\r\n[...]\r\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOPu2RzA==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg1Mzk2MTkyMA==",
                                           "createdAt":  "2021-06-03T15:34:18Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "imhameed",
                                           "body":  "Marked this as a \"Future\" milestone task: LLVM AOT doesn\u0027t have this problem, as far as I remember, and I doubt Mono\u0027s LLVM JIT is frequently used (outside of runtime development and debugging) in the real world, due to extreme compilation latency.",
                                           "updatedAt":  "2021-06-03T15:34:18Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc4-7ZHM",
                                           "createdAt":  "2022-03-01T18:59:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@vargaz  - pretty low priority",
                                           "updatedAt":  "2022-03-01T18:59:05Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[mono] LLVM JIT on arm64 crashes due to an assertion failure if LLVM assertions are enabled",
        "labels":  [
                       "runtime-mono",
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/47026",
        "createdAt":  "2021-01-15T04:50:08Z",
        "number":  47026,
        "author":  "imhameed",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2021-06-01T18:48:06Z",
        "body":  "https://github.com/dotnet/llvm-project/pull/89 works around this. See https://github.com/dotnet/runtime/pull/46817#issuecomment-760542379.\r\n\r\nCurrent (not completely minimized) test IR:\r\n\r\nThis successfully compiles (https://godbolt.org/z/dvrqG8):\r\n```llvm\r\n@aotconst_sflda_22 = internal unnamed_addr global i64* null, align 8\r\n@aotconst_sflda_23 = internal unnamed_addr global i64* null, align 8\r\n\r\ndefine void @testfunc(i32 %branchguy, i64 * %dst) {\r\n  %1 = icmp eq i32 %branchguy, 1\r\n\r\n  %isnull = icmp eq i64 * %dst, null\r\n  br i1 %isnull, label %EX_BB0, label %NOEX_BB0, !make.implicit !0\r\n\r\nNOEX_BB0:\r\n  %dst1 = bitcast i64 * %dst to i32 *\r\n  store i32 0, i32 *%dst1, align 4\r\n\r\n  %.val = load i64**, i64*** bitcast (i64** @aotconst_sflda_22 to i64***), align 8\r\n  %.val4 = load i64**, i64*** bitcast (i64** @aotconst_sflda_23 to i64***), align 8\r\n  %.in = select i1 %1, i64** %.val, i64** %.val4\r\n  %2 = load i64*, i64** %.in, align 8\r\n\r\n  %is_2_null = icmp eq i64 * %2, null\r\n  br i1 %is_2_null, label %EX_BB1, label %NOEX_BB1, !make.implicit !0\r\n\r\nEX_BB0:\r\n  ret void\r\n\r\nNOEX_BB1:\r\n  store i32 0, i32 * %dst1, align 4\r\n  ret void\r\n\r\nEX_BB1:\r\n  ret void\r\n}\r\n\r\n!0 = !{}\r\n```\r\n\r\nThis will make llc crash (https://godbolt.org/z/8sq6hd):\r\n```llvm\r\n@aotconst_sflda_22 = internal unnamed_addr global i64* null, align 8\r\n@aotconst_sflda_23 = internal unnamed_addr global i64* null, align 8\r\n\r\ndefine void @testfunc(i32 %branchguy, i64 * %dst) {\r\n  %1 = icmp eq i32 %branchguy, 1\r\n\r\n  %.val = load i64**, i64*** bitcast (i64** @aotconst_sflda_22 to i64***), align 8\r\n  %.val4 = load i64**, i64*** bitcast (i64** @aotconst_sflda_23 to i64***), align 8\r\n  %.in = select i1 %1, i64** %.val, i64** %.val4\r\n  %2 = load i64*, i64** %.in, align 8\r\n\r\n  %isnull = icmp eq i64 * %dst, null\r\n  br i1 %isnull, label %EX_BB0, label %NOEX_BB0, !make.implicit !0\r\n\r\nNOEX_BB0:\r\n  %dst1 = bitcast i64 * %dst to i32 *\r\n  store i32 0, i32 *%dst1, align 4\r\n\r\n  %is_2_null = icmp eq i64 * %2, null\r\n  br i1 %is_2_null, label %EX_BB1, label %NOEX_BB1, !make.implicit !0\r\n\r\nEX_BB0:\r\n  ret void\r\n\r\nNOEX_BB1:\r\n  store i32 0, i32 * %dst1, align 4\r\n  ret void\r\n\r\nEX_BB1:\r\n  ret void\r\n}\r\n\r\n!0 = !{}\r\n```\r\n\r\nBuild with `-march=x86-64 -mcpu=generic -enable-implicit-null-checks -filetype=obj`.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[mono] LLVM ImplicitNullChecks crash",
        "labels":  [
                       "runtime-mono",
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/48914",
        "createdAt":  "2021-03-01T16:28:15Z",
        "number":  48914,
        "author":  "fanyang-mono",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-26T17:01:47Z",
        "body":  "The following runtime test failed on CI lane `Mono llvmaot Pri0 Runtime Tests Run Linux arm64 release` of PR #48397:\r\n- JIT/Regression/CLR-x86-JIT/V1.1-M1-Beta1/b143840/b143840/b143840.sh. [Link](https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-48397-merge-3aa9e8ff85a24c069b/JIT.Regression/console.faa6c9ed.log?sv=2019-07-07\u0026se=2021-03-21T00%3A21%3A18Z\u0026sr=c\u0026sp=rl\u0026sig=eNRQrnnUSdGG7OX%2Fy%2FjQfgiWI2Ry2jr3EZ%2FYZRqsG20%3D) to the failure log.\r\n\r\n```\r\nJIT/Regression/CLR-x86-JIT/V1.1-M1-Beta1/b143840/b143840/b143840.sh [FAIL]\r\n      \r\n      =================================================================\r\n      External Debugger Dump:\r\n      =================================================================\r\n      [New LWP 2178]\r\n      [New LWP 2179]\r\n      [New LWP 2181]\r\n      [New LWP 2196]\r\n      [New LWP 2197]\r\n      [New LWP 2198]\r\n      [New LWP 2199]\r\n      [New LWP 2200]\r\n      [New LWP 2201]\r\n      [New LWP 2202]\r\n      [New LWP 2203]\r\n      [New LWP 2204]\r\n      [New LWP 2205]\r\n      [Thread debugging using libthread_db enabled]\r\n      Using host libthread_db library \"/lib/aarch64-linux-gnu/libthread_db.so.1\".\r\n      0x0000007fa79b322c in futex_wait_cancelable (private=\u003coptimized out\u003e, expected=0, futex_word=0x7fc8719af0) at ../sysdeps/unix/sysv/linux/futex-internal.h:88\r\n      88../sysdeps/unix/sysv/linux/futex-internal.h: No such file or directory.\r\n        Id   Target Id         Frame \r\n      * 1    Thread 0x7fa7a06fc0 (LWP 2177) \"corerun\" 0x0000007fa79b322c in futex_wait_cancelable (private=\u003coptimized out\u003e, expected=0, futex_word=0x7fc8719af0) at ../sysdeps/unix/sysv/linux/futex-internal.h:88\r\n        2    Thread 0x7fa53ff1d0 (LWP 2178) \"SGen worker\" 0x0000007fa79b322c in futex_wait_cancelable (private=\u003coptimized out\u003e, expected=0, futex_word=0x7fa75a4f10 \u003cwork_cond+40\u003e) at ../sysdeps/unix/sysv/linux/futex-internal.h:88\r\n        3    Thread 0x7fa38fe1d0 (LWP 2179) \"corerun\" 0x0000007fa76a3048 in __GI___poll (fds=0x7f9c003b60, nfds=548265110680, timeout=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/poll.c:41\r\n        4    Thread 0x7fa36fd1d0 (LWP 2181) \"Finalizer\" 0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7fa7595e60 \u003cfinalizer_sem\u003e) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n        5    Thread 0x7fa32ff1d0 (LWP 2196) \"corerun\" 0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7f98000b80) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n        6    Thread 0x7fa30fe1d0 (LWP 2197) \"corerun\" 0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7f8c000b80) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n        7    Thread 0x7fa2efd1d0 (LWP 2198) \"corerun\" 0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7fa759afe0 \u003csuspend_semaphore\u003e) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n        8    Thread 0x7fa2cfc1d0 (LWP 2199) \"corerun\" 0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7f84000b80) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n        9    Thread 0x7fa2afb1d0 (LWP 2200) \"corerun\" 0x0000007fa79b65f0 in __lll_lock_wait (futex=futex@entry=0x7f90003690, private=0) at lowlevellock.c:43\r\n        10   Thread 0x7fa28fa1d0 (LWP 2201) \"corerun\" 0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7f7c000b80) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n        11   Thread 0x7fa26f91d0 (LWP 2202) \"corerun\" 0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7f80000b80) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n        12   Thread 0x7fa24f81d0 (LWP 2203) \"corerun\" 0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7f74000b80) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n        13   Thread 0x7fa22f71d0 (LWP 2204) \"corerun\" 0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7f78000b80) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n        14   Thread 0x7fa20f61d0 (LWP 2205) \"corerun\" 0x0000007fa79b7ce4 in __waitpid (pid=\u003coptimized out\u003e, stat_loc=0x7fa20f0bf4, options=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/waitpid.c:30\r\n      \r\n      Thread 14 (Thread 0x7fa20f61d0 (LWP 2205)):\r\n      #0  0x0000007fa79b7ce4 in __waitpid (pid=\u003coptimized out\u003e, stat_loc=0x7fa20f0bf4, options=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/waitpid.c:30\r\n      #1  0x0000007fa62a5c50 in dump_native_stacktrace (signal=\u003coptimized out\u003e, mctx=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/mini-posix.c:1052\r\n      #2  mono_dump_native_crash_info (signal=\u003coptimized out\u003e, mctx=\u003coptimized out\u003e, info=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/mini-posix.c:1096\r\n      #3  0x0000007fa62635d0 in mono_handle_native_crash (signal=0x7fa7254041 \"SIGSEGV\", mctx=0x7fa20f1780, info=0x7fa20f1ae0) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:3389\r\n      #4  0x0000007fa61d2080 in mono_sigsegv_signal_handler_debug (_dummy=11, _info=0x7fa20f1ae0, context=0x7fa20f1b60, debug_fault_addr=0x55ccd564) at /__w/1/s/src/mono/mono/mini/mini-runtime.c:3575\r\n      #5  \u003csignal handler called\u003e\r\n      #6  mono_class_is_assignable_from_general (klass=0x55ccb5a0f8, oklass=0x55ccd544, signature_assignment=0, result=0x7fa20f2e3c, error=0x7fa20f2de8) at /__w/1/s/src/mono/mono/metadata/class.c:3876\r\n      #7  0x0000007fa6081454 in mono_class_is_assignable_from_checked (klass=0x55ccb5a0f8, oklass=0x55ccd544, result=0x7fa20f2e3c, error=0x7fa20f2de8) at /__w/1/s/src/mono/mono/metadata/class.c:3852\r\n      #8  mono_class_is_assignable_from_internal (klass=0x55ccb5a0f8, oklass=0x55ccd544) at /__w/1/s/src/mono/mono/metadata/class.c:3789\r\n      #9  0x0000007fa60eac00 in mono_object_handle_isinst (obj=..., klass=0x55ccb5a0f8, error=0x7fa20f32b8) at /__w/1/s/src/mono/mono/metadata/object.c:6578\r\n      #10 0x0000007fa60eacd4 in mono_object_isinst_checked (obj_raw=0x7fa5610880, klass=0x55ccb5a0f8, error=0x7fa20f32b8) at /__w/1/s/src/mono/mono/metadata/object.c:6553\r\n      #11 0x0000007fa62618dc in mono_handle_exception_internal (ctx=0x7fa20f3b00, obj=0x7fa5610880, resume=1, out_ji=0x0) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:2554\r\n      #12 0x0000007fa62639a8 in mono_resume_unwind (ctx=0x7fa20f3e40) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:3489\r\n      #13 0x0000007fa62a1c18 in mono_arm_resume_unwind (arg=\u003coptimized out\u003e, pc=2, int_regs=0x0, fp_regs=0x7fa20f2e3c, corlib=\u003coptimized out\u003e, rethrow=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/exceptions-arm64.c:422\r\n      #14 0x0000007fa5ae8fa8 in ?? ()\r\n      #15 0x0000007fa20f6370 in ?? ()\r\n      Backtrace stopped: previous frame inner to this frame (corrupt stack?)\r\n      \r\n      Thread 13 (Thread 0x7fa22f71d0 (LWP 2204)):\r\n      #0  0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7f78000b80) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n      #1  do_futex_wait (sem=sem@entry=0x7f78000b80, abstime=0x0) at sem_waitcommon.c:111\r\n      #2  0x0000007fa79b5ae8 in __new_sem_wait_slow (sem=0x7f78000b80, abstime=0x0) at sem_waitcommon.c:181\r\n      #3  0x0000007fa615ecac in mono_os_sem_wait (sem=0x7f78000b80, flags=MONO_SEM_FLAGS_NONE) at /__w/1/s/src/mono/mono/utils/mono-os-semaphore.h:204\r\n      #4  mono_thread_info_wait_for_resume (info=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/utils/mono-threads.c:236\r\n      #5  0x0000007fa6164e94 in mono_threads_state_poll_with_info (info=0x7f78000b20) at /__w/1/s/src/mono/mono/utils/mono-threads-coop.c:149\r\n      #6  0x0000007fa5929ad4 in ?? ()\r\n      Backtrace stopped: previous frame identical to this frame (corrupt stack?)\r\n      \r\n      Thread 12 (Thread 0x7fa24f81d0 (LWP 2203)):\r\n      #0  0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7f74000b80) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n      #1  do_futex_wait (sem=sem@entry=0x7f74000b80, abstime=0x0) at sem_waitcommon.c:111\r\n      #2  0x0000007fa79b5ae8 in __new_sem_wait_slow (sem=0x7f74000b80, abstime=0x0) at sem_waitcommon.c:181\r\n      #3  0x0000007fa615ecac in mono_os_sem_wait (sem=0x7f74000b80, flags=MONO_SEM_FLAGS_NONE) at /__w/1/s/src/mono/mono/utils/mono-os-semaphore.h:204\r\n      #4  mono_thread_info_wait_for_resume (info=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/utils/mono-threads.c:236\r\n      #5  0x0000007fa6164e94 in mono_threads_state_poll_with_info (info=0x7f74000b20) at /__w/1/s/src/mono/mono/utils/mono-threads-coop.c:149\r\n      #6  0x0000007fa61650c8 in mono_threads_enter_gc_safe_region_unbalanced_with_info (info=0x7f74000b20, stackdata=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/utils/mono-threads-coop.c:329\r\n      #7  0x0000007fa6174ea0 in mono_coop_mutex_lock (mutex=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/../../mono/utils/mono-coop-mutex.h:55\r\n      #8  sgen_gc_lock () at /__w/1/s/src/mono/mono/sgen/sgen-gc.c:3914\r\n      #9  0x0000007fa6133db8 in mono_gc_alloc_vector (vtable=0x7f8c5ad9c8, size=2528, max_length=312) at /__w/1/s/src/mono/mono/metadata/sgen-mono.c:1338\r\n      #10 0x0000007fa60e9bb8 in mono_array_new_specific_internal (vtable=0x7f8c5ad9c8, n=312, pinned=0, error=0x7fa24f50b0) at /__w/1/s/src/mono/mono/metadata/object.c:5799\r\n      #11 mono_array_new_specific_checked (vtable=0x7f8c5ad9c8, n=312, error=0x7fa24f50b0) at /__w/1/s/src/mono/mono/metadata/object.c:5814\r\n      #12 0x0000007fa60ec598 in mono_array_new_checked (eclass=0x55ccb54cd8, n=393, error=0x7fa24f50b0) at /__w/1/s/src/mono/mono/metadata/object.c:5759\r\n      #13 mono_glist_to_array (list=0x7f74008150, eclass=0x55ccb54cd8, error=0x7fa24f50b0) at /__w/1/s/src/mono/mono/metadata/object.c:7688\r\n      #14 0x0000007fa6264e04 in setup_stack_trace (mono_ex=0x7fa5698930, dynamic_methods=0x7fa24f5cd0, trace_ips=\u003coptimized out\u003e, remove_wrappers=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:2125\r\n      #15 0x0000007fa6262ce0 in handle_exception_first_pass (ctx=0x7fa24f5240, obj=\u003coptimized out\u003e, out_ji=\u003coptimized out\u003e, non_exception=\u003coptimized out\u003e, catch_frame=0x7fa24f51d0, out_filter_idx=\u003coptimized out\u003e, out_prev_ji=\u003coptimized out\u003e, last_mono_wrapper_runtime_invoke=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:2432\r\n      #16 mono_handle_exception_internal (ctx=0x7fa24f5db0, obj=\u003coptimized out\u003e, resume=0, out_ji=0x0) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:2667\r\n      #17 0x0000007fa62617ec in mono_handle_exception (ctx=0x7f74000b80, void_obj=0x189) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:3058\r\n      #18 0x0000007fa62a1ac8 in mono_arm_throw_exception (arg=\u003coptimized out\u003e, pc=\u003coptimized out\u003e, int_regs=0x7fa24f6170, fp_regs=0x7fa24f6270, corlib=\u003coptimized out\u003e, rethrow=0, preserve_ips=0) at /__w/1/s/src/mono/mono/mini/exceptions-arm64.c:401\r\n      #19 0x0000007fa5ae8aac in ?? ()\r\n      #20 0x0000007fa24f8370 in ?? ()\r\n      Backtrace stopped: previous frame identical to this frame (corrupt stack?)\r\n      \r\n      Thread 11 (Thread 0x7fa26f91d0 (LWP 2202)):\r\n      #0  0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7f80000b80) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n      #1  do_futex_wait (sem=sem@entry=0x7f80000b80, abstime=0x0) at sem_waitcommon.c:111\r\n      #2  0x0000007fa79b5ae8 in __new_sem_wait_slow (sem=0x7f80000b80, abstime=0x0) at sem_waitcommon.c:181\r\n      #3  0x0000007fa615ecac in mono_os_sem_wait (sem=0x7f80000b80, flags=MONO_SEM_FLAGS_NONE) at /__w/1/s/src/mono/mono/utils/mono-os-semaphore.h:204\r\n      #4  mono_thread_info_wait_for_resume (info=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/utils/mono-threads.c:236\r\n      #5  0x0000007fa6164e94 in mono_threads_state_poll_with_info (info=0x7f80000b20) at /__w/1/s/src/mono/mono/utils/mono-threads-coop.c:149\r\n      #6  0x0000007fa61650c8 in mono_threads_enter_gc_safe_region_unbalanced_with_info (info=0x7f80000b20, stackdata=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/utils/mono-threads-coop.c:329\r\n      #7  0x0000007fa6174ea0 in mono_coop_mutex_lock (mutex=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/../../mono/utils/mono-coop-mutex.h:55\r\n      #8  sgen_gc_lock () at /__w/1/s/src/mono/mono/sgen/sgen-gc.c:3914\r\n      #9  0x0000007fa6133db8 in mono_gc_alloc_vector (vtable=0x7f8c5ad9c8, size=2528, max_length=312) at /__w/1/s/src/mono/mono/metadata/sgen-mono.c:1338\r\n      #10 0x0000007fa60e9bb8 in mono_array_new_specific_internal (vtable=0x7f8c5ad9c8, n=312, pinned=0, error=0x7fa26f60b0) at /__w/1/s/src/mono/mono/metadata/object.c:5799\r\n      #11 mono_array_new_specific_checked (vtable=0x7f8c5ad9c8, n=312, error=0x7fa26f60b0) at /__w/1/s/src/mono/mono/metadata/object.c:5814\r\n      #12 0x0000007fa60ec598 in mono_array_new_checked (eclass=0x55ccb54cd8, n=393, error=0x7fa26f60b0) at /__w/1/s/src/mono/mono/metadata/object.c:5759\r\n      #13 mono_glist_to_array (list=0x7f8001ffd0, eclass=0x55ccb54cd8, error=0x7fa26f60b0) at /__w/1/s/src/mono/mono/metadata/object.c:7688\r\n      #14 0x0000007fa6264e04 in setup_stack_trace (mono_ex=0x7fa57f0f70, dynamic_methods=0x7fa26f6cd0, trace_ips=\u003coptimized out\u003e, remove_wrappers=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:2125\r\n      #15 0x0000007fa6262ce0 in handle_exception_first_pass (ctx=0x7fa26f6240, obj=\u003coptimized out\u003e, out_ji=\u003coptimized out\u003e, non_exception=\u003coptimized out\u003e, catch_frame=0x7fa26f61d0, out_filter_idx=\u003coptimized out\u003e, out_prev_ji=\u003coptimized out\u003e, last_mono_wrapper_runtime_invoke=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:2432\r\n      #16 mono_handle_exception_internal (ctx=0x7fa26f6db0, obj=\u003coptimized out\u003e, resume=0, out_ji=0x0) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:2667\r\n      #17 0x0000007fa62617ec in mono_handle_exception (ctx=0x7f80000b80, void_obj=0x189) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:3058\r\n      #18 0x0000007fa62a1ac8 in mono_arm_throw_exception (arg=\u003coptimized out\u003e, pc=\u003coptimized out\u003e, int_regs=0x7fa26f7170, fp_regs=0x7fa26f7270, corlib=\u003coptimized out\u003e, rethrow=0, preserve_ips=0) at /__w/1/s/src/mono/mono/mini/exceptions-arm64.c:401\r\n      #19 0x0000007fa5ae8aac in ?? ()\r\n      #20 0x0000007fa26f9370 in ?? ()\r\n      Backtrace stopped: previous frame identical to this frame (corrupt stack?)\r\n      \r\n      Thread 10 (Thread 0x7fa28fa1d0 (LWP 2201)):\r\n      #0  0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7f7c000b80) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n      #1  do_futex_wait (sem=sem@entry=0x7f7c000b80, abstime=0x0) at sem_waitcommon.c:111\r\n      #2  0x0000007fa79b5ae8 in __new_sem_wait_slow (sem=0x7f7c000b80, abstime=0x0) at sem_waitcommon.c:181\r\n      #3  0x0000007fa615ecac in mono_os_sem_wait (sem=0x7f7c000b80, flags=MONO_SEM_FLAGS_NONE) at /__w/1/s/src/mono/mono/utils/mono-os-semaphore.h:204\r\n      #4  mono_thread_info_wait_for_resume (info=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/utils/mono-threads.c:236\r\n      #5  0x0000007fa6165250 in mono_threads_exit_gc_safe_region_unbalanced_internal (cookie=0x7f7c000b20, stackdata=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/utils/mono-threads-coop.c:392\r\n      #6  0x0000007fa6126784 in mono_coop_cond_wait (cond=0x7f900036d0, mutex=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/../../mono/utils/mono-coop-mutex.h:93\r\n      #7  mono_monitor_try_enter_inflated (obj=0x7fa540a0f8, ms=4294967295, allow_interruption=0, id=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/metadata/monitor.c:930\r\n      #8  0x0000007fa612518c in mono_monitor_try_enter_loop_if_interrupted (obj=0x7fa540a0f8, ms=4294967295, allow_interruption=\u003coptimized out\u003e, lockTaken=0x7fa28f8ca8 \"\", error=0x0) at /__w/1/s/src/mono/mono/metadata/monitor.c:1194\r\n      #9  0x0000007fa588e7e4 in ?? ()\r\n      #10 0x0000007f7c0033e0 in ?? ()\r\n      Backtrace stopped: previous frame identical to this frame (corrupt stack?)\r\n      \r\n      Thread 9 (Thread 0x7fa2afb1d0 (LWP 2200)):\r\n      #0  0x0000007fa79b65f0 in __lll_lock_wait (futex=futex@entry=0x7f90003690, private=0) at lowlevellock.c:43\r\n      #1  0x0000007fa79b158c in __pthread_mutex_cond_lock (mutex=mutex@entry=0x7f90003690) at ../nptl/pthread_mutex_lock.c:78\r\n      #2  0x0000007fa79b30fc in __pthread_cond_wait_common (abstime=0x0, mutex=0x7f90003690, cond=0x7f900036d0) at pthread_cond_wait.c:645\r\n      #3  __pthread_cond_wait (cond=0x7f900036d0, mutex=0x7f90003690) at pthread_cond_wait.c:655\r\n      #4  0x0000007fa6126770 in mono_os_cond_wait (cond=0x7f900036d0, mutex=0x7f90003690) at /__w/1/s/src/mono/mono/mini/../../mono/utils/mono-os-mutex.h:219\r\n      #5  mono_coop_cond_wait (cond=0x7f900036d0, mutex=0x7f90003690) at /__w/1/s/src/mono/mono/mini/../../mono/utils/mono-coop-mutex.h:91\r\n      #6  mono_monitor_try_enter_inflated (obj=0x7fa540a0f8, ms=4294967295, allow_interruption=0, id=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/metadata/monitor.c:930\r\n      #7  0x0000007fa612518c in mono_monitor_try_enter_loop_if_interrupted (obj=0x7fa540a0f8, ms=4294967295, allow_interruption=\u003coptimized out\u003e, lockTaken=0x7fa2af9ca8 \"\", error=0x0) at /__w/1/s/src/mono/mono/metadata/monitor.c:1194\r\n      #8  0x0000007fa588e7e4 in ?? ()\r\n      #9  0x0000007f88003180 in ?? ()\r\n      Backtrace stopped: previous frame identical to this frame (corrupt stack?)\r\n      \r\n      Thread 8 (Thread 0x7fa2cfc1d0 (LWP 2199)):\r\n      #0  0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7f84000b80) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n      #1  do_futex_wait (sem=sem@entry=0x7f84000b80, abstime=0x0) at sem_waitcommon.c:111\r\n      #2  0x0000007fa79b5ae8 in __new_sem_wait_slow (sem=0x7f84000b80, abstime=0x0) at sem_waitcommon.c:181\r\n      #3  0x0000007fa615ecac in mono_os_sem_wait (sem=0x7f84000b80, flags=MONO_SEM_FLAGS_NONE) at /__w/1/s/src/mono/mono/utils/mono-os-semaphore.h:204\r\n      #4  mono_thread_info_wait_for_resume (info=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/utils/mono-threads.c:236\r\n      #5  0x0000007fa6164e94 in mono_threads_state_poll_with_info (info=0x7f84000b20) at /__w/1/s/src/mono/mono/utils/mono-threads-coop.c:149\r\n      #6  0x0000007fa61650c8 in mono_threads_enter_gc_safe_region_unbalanced_with_info (info=0x7f84000b20, stackdata=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/utils/mono-threads-coop.c:329\r\n      #7  0x0000007fa6174ea0 in mono_coop_mutex_lock (mutex=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/../../mono/utils/mono-coop-mutex.h:55\r\n      #8  sgen_gc_lock () at /__w/1/s/src/mono/mono/sgen/sgen-gc.c:3914\r\n      #9  0x0000007fa6133db8 in mono_gc_alloc_vector (vtable=0x7f8c5ad9c8, size=2528, max_length=312) at /__w/1/s/src/mono/mono/metadata/sgen-mono.c:1338\r\n      #10 0x0000007fa60e9bb8 in mono_array_new_specific_internal (vtable=0x7f8c5ad9c8, n=312, pinned=0, error=0x7fa2cf90b0) at /__w/1/s/src/mono/mono/metadata/object.c:5799\r\n      #11 mono_array_new_specific_checked (vtable=0x7f8c5ad9c8, n=312, error=0x7fa2cf90b0) at /__w/1/s/src/mono/mono/metadata/object.c:5814\r\n      #12 0x0000007fa60ec598 in mono_array_new_checked (eclass=0x55ccb54cd8, n=393, error=0x7fa2cf90b0) at /__w/1/s/src/mono/mono/metadata/object.c:5759\r\n      #13 mono_glist_to_array (list=0x7f840081a0, eclass=0x55ccb54cd8, error=0x7fa2cf90b0) at /__w/1/s/src/mono/mono/metadata/object.c:7688\r\n      #14 0x0000007fa6264e04 in setup_stack_trace (mono_ex=0x7fa5508590, dynamic_methods=0x7fa2cf9cd0, trace_ips=\u003coptimized out\u003e, remove_wrappers=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:2125\r\n      #15 0x0000007fa6262ce0 in handle_exception_first_pass (ctx=0x7fa2cf9240, obj=\u003coptimized out\u003e, out_ji=\u003coptimized out\u003e, non_exception=\u003coptimized out\u003e, catch_frame=0x7fa2cf91d0, out_filter_idx=\u003coptimized out\u003e, out_prev_ji=\u003coptimized out\u003e, last_mono_wrapper_runtime_invoke=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:2432\r\n      #16 mono_handle_exception_internal (ctx=0x7fa2cf9db0, obj=\u003coptimized out\u003e, resume=0, out_ji=0x0) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:2667\r\n      #17 0x0000007fa62617ec in mono_handle_exception (ctx=0x7f84000b80, void_obj=0x189) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:3058\r\n      #18 0x0000007fa62a1ac8 in mono_arm_throw_exception (arg=\u003coptimized out\u003e, pc=\u003coptimized out\u003e, int_regs=0x7fa2cfa170, fp_regs=0x7fa2cfa270, corlib=\u003coptimized out\u003e, rethrow=0, preserve_ips=0) at /__w/1/s/src/mono/mono/mini/exceptions-arm64.c:401\r\n      #19 0x0000007fa5ae8aac in ?? ()\r\n      #20 0x0000007fa2cfc370 in ?? ()\r\n      Backtrace stopped: previous frame identical to this frame (corrupt stack?)\r\n      \r\n      Thread 7 (Thread 0x7fa2efd1d0 (LWP 2198)):\r\n      #0  0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7fa759afe0 \u003csuspend_semaphore\u003e) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n      #1  do_futex_wait (sem=sem@entry=0x7fa759afe0 \u003csuspend_semaphore\u003e, abstime=0x0) at sem_waitcommon.c:111\r\n      #2  0x0000007fa79b5ae8 in __new_sem_wait_slow (sem=0x7fa759afe0 \u003csuspend_semaphore\u003e, abstime=0x0) at sem_waitcommon.c:181\r\n      #3  0x0000007fa615f164 in mono_os_sem_wait (sem=\u003coptimized out\u003e, flags=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/utils/mono-os-semaphore.h:204\r\n      #4  mono_os_sem_timedwait (sem=0x7fa759afe0 \u003csuspend_semaphore\u003e, timeout_ms=4294967295, flags=MONO_SEM_FLAGS_NONE) at /__w/1/s/src/mono/mono/utils/mono-os-semaphore.h:237\r\n      #5  0x0000007fa615ee88 in mono_threads_wait_pending_operations () at /__w/1/s/src/mono/mono/utils/mono-threads.c:322\r\n      #6  0x0000007fa6131524 in unified_suspend_stop_world (flags=MONO_THREAD_INFO_FLAGS_NO_GC, thread_stopped_callback=0x7fa6131950 \u003csgen_client_stop_world_thread_stopped_callback\u003e) at /__w/1/s/src/mono/mono/metadata/sgen-stw.c:343\r\n      #7  0x0000007fa613120c in sgen_client_stop_world (generation=0, serial_collection=0) at /__w/1/s/src/mono/mono/metadata/sgen-stw.c:153\r\n      #8  0x0000007fa61779b4 in sgen_stop_world (generation=0, serial_collection=0) at /__w/1/s/src/mono/mono/sgen/sgen-gc.c:3972\r\n      #9  0x0000007fa61744f0 in sgen_perform_collection_inner (requested_size=\u003coptimized out\u003e, generation_to_collect=\u003coptimized out\u003e, reason=\u003coptimized out\u003e, forced_serial=\u003coptimized out\u003e, stw=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/sgen/sgen-gc.c:2640\r\n      #10 sgen_perform_collection (requested_size=2528, generation_to_collect=0, reason=0x7fa7255570 \"Nursery full\", forced_serial=0, stw=1) at /__w/1/s/src/mono/mono/sgen/sgen-gc.c:2753\r\n      #11 0x0000007fa617442c in sgen_ensure_free_space (size=2528, generation=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/sgen/sgen-gc.c:2619\r\n      #12 0x0000007fa6169284 in sgen_alloc_obj_nolock (vtable=0x7f8c5ad9c8, size=2528) at /__w/1/s/src/mono/mono/sgen/sgen-alloc.c:258\r\n      #13 0x0000007fa6133dc4 in mono_gc_alloc_vector (vtable=0x7f8c5ad9c8, size=2528, max_length=312) at /__w/1/s/src/mono/mono/metadata/sgen-mono.c:1340\r\n      #14 0x0000007fa60e9bb8 in mono_array_new_specific_internal (vtable=0x7f8c5ad9c8, n=312, pinned=0, error=0x7fa2efa0b0) at /__w/1/s/src/mono/mono/metadata/object.c:5799\r\n      #15 mono_array_new_specific_checked (vtable=0x7f8c5ad9c8, n=312, error=0x7fa2efa0b0) at /__w/1/s/src/mono/mono/metadata/object.c:5814\r\n      #16 0x0000007fa60ec598 in mono_array_new_checked (eclass=0x55ccb54cd8, n=393, error=0x7fa2efa0b0) at /__w/1/s/src/mono/mono/metadata/object.c:5759\r\n      #17 mono_glist_to_array (list=0x7f9008ad10, eclass=0x55ccb54cd8, error=0x7fa2efa0b0) at /__w/1/s/src/mono/mono/metadata/object.c:7688\r\n      #18 0x0000007fa6264e04 in setup_stack_trace (mono_ex=0x7fa57e9d10, dynamic_methods=0x7fa2efacd0, trace_ips=\u003coptimized out\u003e, remove_wrappers=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:2125\r\n      #19 0x0000007fa6262ce0 in handle_exception_first_pass (ctx=0x7fa2efa240, obj=\u003coptimized out\u003e, out_ji=\u003coptimized out\u003e, non_exception=\u003coptimized out\u003e, catch_frame=0x7fa2efa1d0, out_filter_idx=\u003coptimized out\u003e, out_prev_ji=\u003coptimized out\u003e, last_mono_wrapper_runtime_invoke=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:2432\r\n      #20 mono_handle_exception_internal (ctx=0x7fa2efadb0, obj=\u003coptimized out\u003e, resume=0, out_ji=0x0) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:2667\r\n      #21 0x0000007fa62617ec in mono_handle_exception (ctx=0x7fa759afe0 \u003csuspend_semaphore\u003e, void_obj=0x189) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:3058\r\n      #22 0x0000007fa62a1ac8 in mono_arm_throw_exception (arg=\u003coptimized out\u003e, pc=\u003coptimized out\u003e, int_regs=0x7fa2efb170, fp_regs=0x7fa2efb270, corlib=\u003coptimized out\u003e, rethrow=0, preserve_ips=0) at /__w/1/s/src/mono/mono/mini/exceptions-arm64.c:401\r\n      #23 0x0000007fa5ae8aac in ?? ()\r\n      #24 0x0000007fa2efd370 in ?? ()\r\n      Backtrace stopped: previous frame identical to this frame (corrupt stack?)\r\n      \r\n      Thread 6 (Thread 0x7fa30fe1d0 (LWP 2197)):\r\n      #0  0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7f8c000b80) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n      #1  do_futex_wait (sem=sem@entry=0x7f8c000b80, abstime=0x0) at sem_waitcommon.c:111\r\n      #2  0x0000007fa79b5ae8 in __new_sem_wait_slow (sem=0x7f8c000b80, abstime=0x0) at sem_waitcommon.c:181\r\n      #3  0x0000007fa615ecac in mono_os_sem_wait (sem=0x7f8c000b80, flags=MONO_SEM_FLAGS_NONE) at /__w/1/s/src/mono/mono/utils/mono-os-semaphore.h:204\r\n      #4  mono_thread_info_wait_for_resume (info=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/utils/mono-threads.c:236\r\n      #5  0x0000007fa6164e94 in mono_threads_state_poll_with_info (info=0x7f8c000b20) at /__w/1/s/src/mono/mono/utils/mono-threads-coop.c:149\r\n      #6  0x0000007fa5929ad4 in ?? ()\r\n      #7  0x0000000400000004 in ?? ()\r\n      Backtrace stopped: previous frame identical to this frame (corrupt stack?)\r\n      \r\n      Thread 5 (Thread 0x7fa32ff1d0 (LWP 2196)):\r\n      #0  0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7f98000b80) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n      #1  do_futex_wait (sem=sem@entry=0x7f98000b80, abstime=0x0) at sem_waitcommon.c:111\r\n      #2  0x0000007fa79b5ae8 in __new_sem_wait_slow (sem=0x7f98000b80, abstime=0x0) at sem_waitcommon.c:181\r\n      #3  0x0000007fa615ecac in mono_os_sem_wait (sem=0x7f98000b80, flags=MONO_SEM_FLAGS_NONE) at /__w/1/s/src/mono/mono/utils/mono-os-semaphore.h:204\r\n      #4  mono_thread_info_wait_for_resume (info=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/utils/mono-threads.c:236\r\n      #5  0x0000007fa6164e94 in mono_threads_state_poll_with_info (info=0x7f98000b20) at /__w/1/s/src/mono/mono/utils/mono-threads-coop.c:149\r\n      #6  0x0000007fa61650c8 in mono_threads_enter_gc_safe_region_unbalanced_with_info (info=0x7f98000b20, stackdata=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/utils/mono-threads-coop.c:329\r\n      #7  0x0000007fa6174ea0 in mono_coop_mutex_lock (mutex=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/../../mono/utils/mono-coop-mutex.h:55\r\n      #8  sgen_gc_lock () at /__w/1/s/src/mono/mono/sgen/sgen-gc.c:3914\r\n      #9  0x0000007fa6133db8 in mono_gc_alloc_vector (vtable=0x7f8c5ad9c8, size=2528, max_length=312) at /__w/1/s/src/mono/mono/metadata/sgen-mono.c:1338\r\n      #10 0x0000007fa60e9bb8 in mono_array_new_specific_internal (vtable=0x7f8c5ad9c8, n=312, pinned=0, error=0x7fa32fc0b0) at /__w/1/s/src/mono/mono/metadata/object.c:5799\r\n      #11 mono_array_new_specific_checked (vtable=0x7f8c5ad9c8, n=312, error=0x7fa32fc0b0) at /__w/1/s/src/mono/mono/metadata/object.c:5814\r\n      #12 0x0000007fa60ec598 in mono_array_new_checked (eclass=0x55ccb54cd8, n=393, error=0x7fa32fc0b0) at /__w/1/s/src/mono/mono/metadata/object.c:5759\r\n      #13 mono_glist_to_array (list=0x7f9800f200, eclass=0x55ccb54cd8, error=0x7fa32fc0b0) at /__w/1/s/src/mono/mono/metadata/object.c:7688\r\n      #14 0x0000007fa6264e04 in setup_stack_trace (mono_ex=0x7fa55cf0f0, dynamic_methods=0x7fa32fccd0, trace_ips=\u003coptimized out\u003e, remove_wrappers=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:2125\r\n      #15 0x0000007fa6262ce0 in handle_exception_first_pass (ctx=0x7fa32fc240, obj=\u003coptimized out\u003e, out_ji=\u003coptimized out\u003e, non_exception=\u003coptimized out\u003e, catch_frame=0x7fa32fc1d0, out_filter_idx=\u003coptimized out\u003e, out_prev_ji=\u003coptimized out\u003e, last_mono_wrapper_runtime_invoke=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:2432\r\n      #16 mono_handle_exception_internal (ctx=0x7fa32fcdb0, obj=\u003coptimized out\u003e, resume=0, out_ji=0x0) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:2667\r\n      #17 0x0000007fa62617ec in mono_handle_exception (ctx=0x7f98000b80, void_obj=0x189) at /__w/1/s/src/mono/mono/mini/mini-exceptions.c:3058\r\n      #18 0x0000007fa62a1ac8 in mono_arm_throw_exception (arg=\u003coptimized out\u003e, pc=\u003coptimized out\u003e, int_regs=0x7fa32fd170, fp_regs=0x7fa32fd270, corlib=\u003coptimized out\u003e, rethrow=0, preserve_ips=0) at /__w/1/s/src/mono/mono/mini/exceptions-arm64.c:401\r\n      #19 0x0000007fa5ae8aac in ?? ()\r\n      #20 0x0000007fa32ff370 in ?? ()\r\n      Backtrace stopped: previous frame identical to this frame (corrupt stack?)\r\n      \r\n      Thread 4 (Thread 0x7fa36fd1d0 (LWP 2181)):\r\n      #0  0x0000007fa79b59c8 in futex_abstimed_wait_cancelable (private=0, abstime=0x0, expected=0, futex_word=0x7fa7595e60 \u003cfinalizer_sem\u003e) at ../sysdeps/unix/sysv/linux/futex-internal.h:205\r\n      #1  do_futex_wait (sem=sem@entry=0x7fa7595e60 \u003cfinalizer_sem\u003e, abstime=0x0) at sem_waitcommon.c:111\r\n      #2  0x0000007fa79b5ae8 in __new_sem_wait_slow (sem=0x7fa7595e60 \u003cfinalizer_sem\u003e, abstime=0x0) at sem_waitcommon.c:181\r\n      #3  0x0000007fa6124318 in mono_os_sem_wait (sem=\u003coptimized out\u003e, flags=MONO_SEM_FLAGS_ALERTABLE) at /__w/1/s/src/mono/mono/mini/../utils/mono-os-semaphore.h:204\r\n      #4  mono_coop_sem_wait (sem=\u003coptimized out\u003e, flags=MONO_SEM_FLAGS_ALERTABLE) at /__w/1/s/src/mono/mono/mini/../../mono/utils/mono-coop-semaphore.h:41\r\n      #5  finalizer_thread (unused=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/metadata/gc.c:862\r\n      #6  0x0000007fa60fdaf0 in start_wrapper_internal (start_info=0x0, stack_ptr=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/metadata/threads.c:1142\r\n      #7  0x0000007fa60fd998 in start_wrapper (data=0x55ccbaddb0) at /__w/1/s/src/mono/mono/metadata/threads.c:1204\r\n      #8  0x0000007fa79ad088 in start_thread (arg=0x7fc8719d3f) at pthread_create.c:463\r\n      #9  0x0000007fa76ac4ec in thread_start () at ../sysdeps/unix/sysv/linux/aarch64/clone.S:78\r\n      \r\n      Thread 3 (Thread 0x7fa38fe1d0 (LWP 2179)):\r\n      #0  0x0000007fa76a3048 in __GI___poll (fds=0x7f9c003b60, nfds=548265110680, timeout=\u003coptimized out\u003e) at ../sysdeps/unix/sysv/linux/poll.c:41\r\n      #1  0x0000007fa61c4500 in ds_ipc_poll (poll_handles_data=0x7f9c0032d0, poll_handles_data_len=1, timeout_ms=4294967295, callback=0x7fa61c3c80 \u003cserver_warning_callback\u003e) at /__w/1/s/src/native/eventpipe/ds-ipc-posix.c:425\r\n      #2  0x0000007fa61c2658 in ds_ipc_stream_factory_get_next_available_stream (callback=0x7fa61c3c80 \u003cserver_warning_callback\u003e) at /__w/1/s/src/native/eventpipe/ds-ipc.c:369\r\n      #3  0x0000007fa61c1160 in server_thread (data=\u003coptimized out\u003e) at /__w/1/s/src/native/eventpipe/ds-server.c:124\r\n      #4  0x0000007fa61c3c5c in ep_rt_thread_mono_start_func (data=0x55ccb6d0c0) at /__w/1/s/src/mono/mono/mini/../eventpipe/ep-rt-mono.h:1402\r\n      #5  0x0000007fa79ad088 in start_thread (arg=0x7fc8719e2f) at pthread_create.c:463\r\n      #6  0x0000007fa76ac4ec in thread_start () at ../sysdeps/unix/sysv/linux/aarch64/clone.S:78\r\n      \r\n      Thread 2 (Thread 0x7fa53ff1d0 (LWP 2178)):\r\n      #0  0x0000007fa79b322c in futex_wait_cancelable (private=\u003coptimized out\u003e, expected=0, futex_word=0x7fa75a4f10 \u003cwork_cond+40\u003e) at ../sysdeps/unix/sysv/linux/futex-internal.h:88\r\n      #1  __pthread_cond_wait_common (abstime=0x0, mutex=0x7fa75a4eb8 \u003clock\u003e, cond=0x7fa75a4ee8 \u003cwork_cond\u003e) at pthread_cond_wait.c:502\r\n      #2  __pthread_cond_wait (cond=0x7fa75a4ee8 \u003cwork_cond\u003e, mutex=0x7fa75a4eb8 \u003clock\u003e) at pthread_cond_wait.c:655\r\n      #3  0x0000007fa61a95ec in mono_os_cond_wait (cond=0x7fa75a4f10 \u003cwork_cond+40\u003e, mutex=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/../../mono/utils/mono-os-mutex.h:219\r\n      #4  get_work (worker_index=\u003coptimized out\u003e, work_context=\u003coptimized out\u003e, do_idle=\u003coptimized out\u003e, job=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/sgen/sgen-thread-pool.c:167\r\n      #5  thread_func (data=0x0) at /__w/1/s/src/mono/mono/sgen/sgen-thread-pool.c:198\r\n      #6  0x0000007fa79ad088 in start_thread (arg=0x7fc8719e3f) at pthread_create.c:463\r\n      #7  0x0000007fa76ac4ec in thread_start () at ../sysdeps/unix/sysv/linux/aarch64/clone.S:78\r\n      \r\n      Thread 1 (Thread 0x7fa7a06fc0 (LWP 2177)):\r\n      #0  0x0000007fa79b322c in futex_wait_cancelable (private=\u003coptimized out\u003e, expected=0, futex_word=0x7fc8719af0) at ../sysdeps/unix/sysv/linux/futex-internal.h:88\r\n      #1  __pthread_cond_wait_common (abstime=0x0, mutex=0x7fa759ab78 \u003csignal_mutex\u003e, cond=0x7fc8719ac8) at pthread_cond_wait.c:502\r\n      #2  __pthread_cond_wait (cond=0x7fc8719ac8, mutex=0x7fa759ab78 \u003csignal_mutex\u003e) at pthread_cond_wait.c:655\r\n      #3  0x0000007fa61481c4 in mono_os_cond_wait (cond=0x7fc8719ac8, mutex=0x7fa759ab78 \u003csignal_mutex\u003e) at /__w/1/s/src/mono/mono/utils/mono-os-mutex.h:219\r\n      #4  mono_os_event_wait_multiple (events=0x7fc8719b60, nevents=11, waitall=0, timeout=4294967295, alertable=1) at /__w/1/s/src/mono/mono/utils/os-event-unix.c:190\r\n      #5  0x0000007fa6162494 in mono_thread_info_wait_multiple_handle (thread_handles=\u003coptimized out\u003e, nhandles=11, background_change_event=\u003coptimized out\u003e, waitall=\u003coptimized out\u003e, timeout=\u003coptimized out\u003e, alertable=-1482658128) at /__w/1/s/src/mono/mono/utils/mono-threads.c:2121\r\n      #6  0x0000007fa60fa6ec in wait_for_tids (wait=0x7fc8719d88, timeout=4294967295, check_state_change=1) at /__w/1/s/src/mono/mono/metadata/threads.c:3191\r\n      #7  mono_thread_manage_internal () at /__w/1/s/src/mono/mono/metadata/threads.c:3362\r\n      #8  0x0000007fa6228c0c in mono_main (argc=\u003coptimized out\u003e, argv=\u003coptimized out\u003e) at /__w/1/s/src/mono/mono/mini/driver.c:2688\r\n      #9  0x0000007fa6292864 in monovm_execute_assembly (argc=0, argv=0x0, managedAssemblyPath=\u003coptimized out\u003e, exitCode=0x7fc871a46c) at /__w/1/s/src/mono/mono/mini/monovm.c:259\r\n      #10 0x00000055950187d0 in ExecuteManagedAssembly (currentExeAbsolutePath=\u003coptimized out\u003e, clrFilesAbsolutePath=\u003coptimized out\u003e, managedAssemblyAbsolutePath=\u003coptimized out\u003e, managedAssemblyArgc=0, managedAssemblyArgv=\u003coptimized out\u003e) at /__w/1/s/src/coreclr/hosts/unixcorerun/corerun.cpp:385\r\n      #11 0x0000005595018f70 in main (argc=\u003coptimized out\u003e, argv=\u003coptimized out\u003e) at /__w/1/s/src/coreclr/hosts/unixcorerun/corerun.cpp:573\r\n      /root/helix/work/workitem/JIT/Regression/CLR-x86-JIT/V1.1-M1-Beta1/b143840/b143840/b143840.sh: line 404:  2177 Aborted                 (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n      \r\n```\r\n\r\ncc: @imhameed \r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYVf7CQ==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MDEyNzcxOA==",
                                           "createdAt":  "2021-06-12T23:56:41Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "imhameed",
                                           "body":  "This fails intermittently (but frequently enough) on my amd64 PC, with stacks that look pretty similar:\r\nhttps://gist.github.com/imhameed/9faa48b70be7c540b00f4b3279b9a0c9\r\nhttps://gist.github.com/imhameed/e397265d683f357db28b4a158e38429a\r\n\r\nLLVM AOT compiling the test assembly (with `MONO_ENV_OPTIONS=\"--aot=llvm,llvm-path=path/prefix/to/opt/and/llc\" and then running the assembly with LLVM JIT enabled is sufficient to reproduce this (after a few tries).",
                                           "updatedAt":  "2021-06-12T23:58:28Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc42hGIg",
                                           "createdAt":  "2021-09-07T21:37:12Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "imhameed",
                                           "body":  "Also fails on arm64 FullAOT. A CI log can be found [here](https://helixre8s23ayyeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-55362-merge-c1795bba6ea44330a7/JIT.Regression/1/console.3c6c8ba8.log?sv=2019-07-07\u0026se=2021-09-27T18%3A17%3A52Z\u0026sr=c\u0026sp=rl\u0026sig=lTucHtcfk4oyFhz7T6BjePCM8eloElU8P32BbCYel6I%3D). The log is also duplicated here: https://gist.github.com/imhameed/4d2a3d559314e9a7ac112408f616737f\r\n\r\nFullAOT tests are run using `MONO_ENV_OPTIONS=--full-aot`.\r\n\r\nFullAOT compilation uses these flags on x64:\r\n```\r\nMONO_ENV_OPTIONS=\"--aot=full,llvm,llvm-path=$MONO_PFX,mattr=crc,mattr=crypto\"\r\n```",
                                           "updatedAt":  "2021-09-07T21:37:12Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5HpEeV",
                                           "createdAt":  "2022-08-02T02:38:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "Didn\u0027t have bandwidth to work on this in .NET7. Moving to milestone 8.0.0.",
                                           "updatedAt":  "2022-08-02T02:38:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hV_sJ",
                                           "createdAt":  "2023-07-12T20:22:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "Moving to 9.0.0",
                                           "updatedAt":  "2023-07-12T20:22:13Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[mono][llvm] b143840.dll fails with LLVM AOT + JIT",
        "labels":  [
                       "runtime-mono",
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/54185",
        "createdAt":  "2021-06-14T22:13:02Z",
        "number":  54185,
        "author":  "imhameed",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-10-09T09:24:58Z",
        "body":  "Seen in https://github.com/dotnet/runtime/blob/6474c725025a8b29b4265c4d9485018982ee6b16/src/tests/JIT/HardwareIntrinsics/X86/Sse42.X64/Crc32.cs. Makes Mono bail out of translating to LLVM with \"LLVM failed for \u0027Program.Main\u0027: non-finally/catch/fault clause.\"\r\n\r\nThe resulting test then ends up with weird semi-consistent codegen which causes it to print:\r\n```\r\nIntrinsic Sse42.X64.Crc32 is called on non-supported hardware.\r\nSse42.IsSupported False\r\nEnvironment.Is64BitProcess True\r\nIntrinsic Sse42.X64.Crc32 is called via reflection on non-supported hardware.\r\nSse42.IsSupported False\r\nEnvironment.Is64BitProcess True\r\n```\r\nbut still yield 0 (instead of 100) as an exit code.\r\n\r\nRandom notes:\r\n\r\nhttps://llvm.org/docs/LangRef.html#llvm-localescape-and-llvm-localrecover-intrinsics\r\nhttps://github.com/dotnet/llvm-project/blob/release/11.x/llvm/test/CodeGen/X86/wineh-coreclr.ll\r\n\r\nOne difficulty with `llvm.localaddress` and `llvm.localrecover` is that they are currently only supported on x86, x86-64, and aarch64. But it doesn\u0027t look like it\u0027d be too hard to add support for other platforms. (But I have no idea how involved this would be for WASM)\r\n\r\nAlso enable JIT/HardwareIntrinsics/X86/Sse42.X64/Crc32_{r,ro} test with the fix\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOaHcX8Q==",
                         "nodes":  [
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MTUxODU4MQ==",
                                           "createdAt":  "2021-06-15T13:53:53Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@BrzVlad - any overlap between work done on exception filters from issues in your queue ?",
                                           "updatedAt":  "2021-06-15T13:53:53Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MjEzMDMyMQ==",
                                           "createdAt":  "2021-06-16T07:40:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "BrzVlad",
                                           "body":  "Supporting exception filters with llvm requires some research, unrelated with any other work. We never supported exception filters with llvm. Doesn\u0027t seem feasible for .NET 6.0",
                                           "updatedAt":  "2021-06-16T07:40:39Z"
                                       },
                                       {
                                           "id":  "MDEyOklzc3VlQ29tbWVudDg2MjY3Mzg1NQ==",
                                           "createdAt":  "2021-06-16T20:01:13Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "Moving this to Future milestone. ",
                                           "updatedAt":  "2021-06-16T20:01:13Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5obiL5",
                                           "createdAt":  "2023-10-08T14:59:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "kasperk81",
                                           "body":  "@jandupej https://github.com/dotnet/runtime/issues/54176 is closed but referenced in https://github.com/dotnet/runtime/blob/f0208617e3c4f2e222adefa0b249d3af61400029/src/tests/issues.targets#L1207-L1212 and https://github.com/dotnet/runtime/blob/f0208617e3c4f2e222adefa0b249d3af61400029/src/tests/JIT/HardwareIntrinsics/X86/Sse2.X64/StoreNonTemporal.cs#L19 will it be fixed somewhat differently? otherwise replace the link with reason strings similar to other unsupported tests: `non-temporal store intrinsics are not supported on this platform`.",
                                           "updatedAt":  "2023-10-08T14:59:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5odxfx",
                                           "createdAt":  "2023-10-09T09:24:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jandupej",
                                           "body":  "@kasperk81 The reason for disabling the test you indicate is strange. I created an issue where enabling these tests can be tracked: https://github.com/dotnet/runtime/issues/93202",
                                           "updatedAt":  "2023-10-09T09:24:58Z"
                                       }
                                   ],
                         "totalCount":  5
                     },
        "title":  "[mono][llvm] Support exception filters",
        "labels":  [
                       "runtime-mono",
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/60792",
        "createdAt":  "2021-10-23T04:35:49Z",
        "number":  60792,
        "author":  "MineCake147E",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-28T15:51:57Z",
        "body":  "### Description\r\n\r\n`AdvSimd.IsSupported` returns `false`, and `AdvSimd.Add(Vector128\u003cfloat\u003e, Vector128\u003cfloat\u003e)` \r\nthrows `PlatformNotSupportedException`.  \r\n\r\n### Reproduction Steps\r\n\r\n1. Create a new maui project with `net6.0-android`.\r\n2. Replace text inside `OnCounterClicked` with:\r\n```csharp\r\nprivate void OnCounterClicked(object sender, EventArgs e)\r\n{\r\n\tvar sb = new StringBuilder()\r\n\tsb.AppendLine($\"AdvSimd: {AdvSimd.IsSupported}\");\r\n        try\r\n        {\r\n                var r = Vector128.Create(1f);\r\n                var q = AdvSimd.Add(r, r);\r\n                sb.AppendLine($\"{q.GetElement(3)}\");\r\n        }\r\n        catch (Exception e)\r\n        {\r\n                sb.AppendLine($\"{e}\");\r\n        }\r\n\tCounterLabel.Text = sb.ToString();\r\n        SemanticScreenReader.Announce(CounterLabel.Text);\r\n}\r\n```\r\n3. Build and deploy in Release mode.\r\n4. Run the app.\r\n5. Tap the counter.\r\n\r\n### Expected behavior\r\n\r\nShows\r\n```\r\nAdvSimd: true\r\n2\r\n```\r\n\r\n### Actual behavior\r\n\r\nShows\r\n```\r\nAdvSimd: false\r\n```\r\nand Exception details\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\r\nEDIT: Updated Environment information and added a device.\r\n\r\n\u003cdetails\u003e\r\n\u003csummary\u003e\r\nEDIT: Visual Studio 2022 installation\r\n\u003c/summary\u003e\r\n\r\n```\r\nMicrosoft Visual Studio Community 2022\r\nVersion 17.3.0 Preview 3.0\r\nVisualStudio.17.Preview/17.3.0-pre.3.0+32708.82\r\nMicrosoft .NET Framework\r\nVersion 4.8.04084\r\n\r\nインストールされているバージョン:Community\r\n\r\nVisual C++ 2022   00482-90000-00000-AA086\r\nMicrosoft Visual C++ 2022\r\n\r\nASP.NET and Web Tools   17.3.364.15177\r\nASP.NET and Web Tools\r\n\r\nAvaloniaPackage Extension   1.0\r\nAvaloniaPackage Visual Studio Extension Detailed Info\r\n\r\nAzure App Service Tools v3.0.0   17.3.364.15177\r\nAzure App Service Tools v3.0.0\r\n\r\nBoost.Test のテスト アダプター   1.0\r\nBoost.Test 向けに作成された単体テストを含む、Visual Studio のテスト ツールを有効にします。拡張機能のインストール ディレクトリに、使用条件およびサード パーティからの通知が含まれています。\r\n\r\nC# ツール   4.3.0-3.22329.30+29e657c0582904529bae2a87c227220e03f509cf\r\nIDE で使用する C# コンポーネント。プロジェクトの種類や設定に応じて、異なるバージョンのコンパイラを使用できます。\r\n\r\nCode Cleanup On Save   1.0.12\r\nAutomatically run one of the Code Clean profiles when saving the document. This ensures your code is always formatted correctly and follows your coding style conventions.\r\n\r\nCodeMaid   12.0\r\nCodeMaid is an open source Visual Studio extension to cleanup and simplify our C#, C++, F#, VB, PHP, PowerShell, R, JSON, XAML, XML, ASP, HTML, CSS, LESS, SCSS, JavaScript and TypeScript coding.\r\n\r\nCommon Azure Tools   1.10\r\nAzure Mobile Services および Microsoft Azure Tools で使用する共通サービスを提供します。\r\n\r\nExtensibility Message Bus   1.2.6 (master@34d6af2)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nFile Icons   2.7\r\nAdds icons for files that are not recognized by Solution Explorer\r\n\r\nGhostDoc   22.2.22190.0  (Not Loaded)\r\nGenerate XML Comments from your code, maintain clean and up-to-date documentation, produce help documentation in multiple formats, use intelligent source code Spell Checker in Visual Studio.\r\n\r\nLinux コア ダンプ デバッグ   1.0.9.32708\r\nLinux コア ダンプのデバッグを有効にします。\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMono Debugging for Visual Studio   17.3.20 (3f4cb00)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet パッケージ マネージャー   6.3.0\r\nVisual Studio 内の NuGet パッケージ マネージャー。NuGet の詳細については、https://docs.nuget.org/ にアクセスしてください\r\n\r\nRazor (ASP.NET Core)   17.0.0.2232702+e1d654e792aa2fe6646a6935bcca80ff0aff4387\r\nASP.NET Core Razor の言語サービスを提供します。\r\n\r\nSonarLint for Visual Studio   6.6.0.49766\r\nSonarLint is an extension to your favorite IDE that provides on-the-fly feedback to developers on new bugs and quality issues injected into their code.\r\n\r\nSyntax Visualizer   1.0\r\nAn extension for visualizing Roslyn SyntaxTrees.\r\n\r\nTest Adapter for Google Test   1.0\r\nGoogle Test 向けに作成された単体テストを含む、Visual Studio のテスト ツールを有効にします。拡張機能のインストール ディレクトリに、使用条件およびサード パーティからの通知が含まれています。\r\n\r\nTweaks 2022   1.1.134\r\nA collection of minor fixes and tweaks for Visual Studio to reduce the paper cuts and make you a happier developer\r\n\r\nTypeScript Tools   17.0.10701.2001\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic ツール   4.3.0-3.22329.30+29e657c0582904529bae2a87c227220e03f509cf\r\nIDE で使用する Visual Basic コンポーネント。プロジェクトの種類や設定に応じて、異なるバージョンのコンパイラを使用できます。\r\n\r\nVisual C++ for Cross Platform Mobile Development (Android)   17.0.32708.82\r\nVisual C++ for Cross Platform Mobile Development (Android)\r\n\r\nVisual C++ for Linux Development   1.0.9.32708\r\nVisual C++ for Linux Development\r\n\r\nVisual F# Tools   17.1.0-beta.22327.2+ddc90b20287a765a9d526da42b3be0dd8e907ec5\r\nMicrosoft Visual F# Tools\r\n\r\nVisual Studio Color Theme Designer   1.0\r\nAllows users to create and edit Visual Studio themes. Themes can customize colors used for menus, toolbars, tabs, titlebars, the text editor, and other environment colors.\r\n\r\nVisual Studio IntelliCode   2.2\r\nVisual Studio 向けの AI 支援付き開発。\r\n\r\nVisual Studio Spell Check Everywhere   VSSpellCheckEverywhere\r\nAn extension that enables spell checking within any Visual Studio file editor or tool window that uses WPF text boxes.\r\nhttps://GitHub.com/EWSoftware/VSSpellChecker\r\n\r\nVisual Studio Spell Checker   VSSpellChecker\r\nAn editor extension that checks the spelling of comments, strings, and plain text as you type or interactively with tool windows.\r\nhttps://GitHub.com/EWSoftware/VSSpellChecker\r\n\r\nVisualStudio.DeviceLog   1.0\r\nパッケージに関する情報\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   17.3.0.288 (main@5d42bb2)\r\nXamarin.iOS と Xamarin.Android の開発を有効にする Visual Studio 拡張機能\r\n\r\nXamarin Designer   17.3.0.202 (remotes/origin/d17-3@6ce0bfa51)\r\nVisual Studio で Xamarin Designer ツールを有効にするための Visual Studio 拡張機能。\r\n\r\nXamarin Templates   17.2.28 (9b3d244)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   13.0.0.0 (d17-3/030cd63)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n    Mono: dffa5ab\r\n    Java.Interop: xamarin/java.interop/d17-3@7716ae53\r\n    SQLite: xamarin/sqlite/3.38.5@df4deab\r\n    Xamarin.Android Tools: xamarin/xamarin-android-tools/main@14076a6\r\n\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   15.11.0.308 (7ad9f8893)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n```\r\n\r\n\u003c/details\u003e\r\n\r\n- PC: Modified DELL XPS 8700\r\n  - OS: Windows 10 21H2\r\n  - CPU: Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz   3.60 GHz\r\n  - RAM: 32 GB DDR3\r\n  - Graphics: NVIDIA GeForce GTX1060(6 GB) Compatible\r\n  - Storage: \r\n    - OS(C:) : Western Digital WDC WDS100T2B0A-00SM50 1000.2 GB SATA SSD\r\n    - WORKSPACE(D:) : Seagate ST1000DM003-1ER162 1000.2 GB 7200RPM SATA HDD\r\n    - ARCHIVE(E:) : HGST HCC541010B9E660 1000.2 GB 5400RPM SATA HDD\r\n- Phone: Sony Xperia™ XZ3(SOV39)\r\n  - OS: Android 10(52.1.C.0.360)\r\n  - SoC: Qualcomm Snapdragon 845\r\n  - RAM: 4 GB\r\n- Phone 2: Sony Xperia™ 1 IV(SOG06)\r\n  - OS: Android 12(64.0.D.5.48)\r\n  - SoC: Qualcomm Snapdragon 8 Gen 1\r\n  - RAM: 12 GB\r\n\r\n### Other information\r\n\r\nOther intrinsics such as ArmBase and Dp did not work at all on both devices, and `Vector.IsHardwareAccelerated` also returned `false`, meaning that SIMD is currently not available at all.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYVDgfw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc44oMBx",
                                           "createdAt":  "2021-10-23T04:35:51Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "I couldn\u0027t figure out the best area label to add to this issue. If you have write-permissions please help me learn by adding exactly one [area label](https://github.com/dotnet/runtime/blob/master/docs/area-owners.md).",
                                           "updatedAt":  "2021-10-23T04:35:51Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44oObz",
                                           "createdAt":  "2021-10-23T05:20:33Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOB_izsA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2021-10-23T06:28:09Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "tannergooding",
                                           "body":  "CC. @imhameed, @fanyang-mono \r\n\r\nThis is dependent on Mono and is tracked by https://github.com/dotnet/runtime/issues/43051\r\n",
                                           "updatedAt":  "2021-10-23T05:20:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44odkj",
                                           "createdAt":  "2021-10-23T10:25:16Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "MineCake147E",
                                           "body":  "Thank you for reply.  \r\nI updated my Visual Studio 2022 configuration.  \r\nI\u0027m glad if it helps.",
                                           "updatedAt":  "2021-10-23T10:25:16Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc44omlg",
                                           "createdAt":  "2021-10-23T15:22:43Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @dotnet/area-system-runtime-intrinsics\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\n### Description\r\n\r\n`AdvSimd.IsSupported` returns `false`, and `AdvSimd.Add(Vector128\u003cfloat\u003e, Vector128\u003cfloat\u003e)` \r\nthrows `PlatformNotSupportedException`.\r\n\r\n### Reproduction Steps\r\n\r\n1. Create a new maui project with `net6.0-android`.\r\n2. Replace text inside `OnCounterClicked` with:\r\n```csharp\r\nprivate void OnCounterClicked(object sender, EventArgs e)\r\n{\r\n\tvar sb = new StringBuilder()\r\n\tsb.AppendLine($\"AdvSimd: {AdvSimd.IsSupported}\");\r\n        try\r\n        {\r\n                var r = Vector128.Create(1f);\r\n                var q = AdvSimd.Add(r, r);\r\n                sb.AppendLine($\"{q.GetElement(3)}\");\r\n        }\r\n        catch (Exception e)\r\n        {\r\n                sb.AppendLine($\"{e}\");\r\n        }\r\n\tCounterLabel.Text = sb.ToString();\r\n        SemanticScreenReader.Announce(CounterLabel.Text);\r\n}\r\n```\r\n3. Build and deploy in Release mode.\r\n4. Run the app.\r\n5. Tap the counter.\r\n\r\n### Expected behavior\r\n\r\nShows\r\n```\r\nAdvSimd: true\r\n2\r\n```\r\nEDIT: miscalculation (my bad...)\r\n\r\n### Actual behavior\r\n\r\nShows\r\n```\r\nAdvSimd: false\r\n```\r\nand Exception details\r\n\r\n### Regression?\r\n\r\n_No response_\r\n\r\n### Known Workarounds\r\n\r\n_No response_\r\n\r\n### Configuration\r\n\u003cdetails\u003e\r\n\u003csummary\u003e\r\nEDIT: Visual Studio 2022 installation\r\n\u003c/summary\u003e\r\n\r\n```\r\nMicrosoft Visual Studio Community 2022 Preview\r\nVersion 17.0.0 Preview 6.0\r\nVisualStudio.17.Preview/17.0.0-pre.6.0+31815.197\r\nMicrosoft .NET Framework\r\nVersion 4.8.04084\r\n\r\nインストールされているバージョン:Community\r\n\r\nVisual C++ 2022   00482-90000-00000-AA086\r\nMicrosoft Visual C++ 2022\r\n\r\nASP.NET and Web Tools 2019   17.0.776.61824\r\nASP.NET and Web Tools 2019\r\n\r\nAzure App Service Tools v3.0.0   17.0.776.61824\r\nAzure App Service Tools v3.0.0\r\n\r\nBoost.Test のテスト アダプター   1.0\r\nBoost.Test 向けに作成された単体テストを含む、Visual Studio のテスト ツールを有効にします。拡張機能のインストール ディレクトリに、使用条件およびサード パーティからの通知が含まれています。\r\n\r\nC# ツール   4.0.0-6.21514.4+df45061e218c9b5813c5531bc06fb238a23e30f6\r\nIDE で使用する C# コンポーネント。プロジェクトの種類や設定に応じて、異なるバージョンのコンパイラを使用できます。\r\n\r\nCode Cleanup On Save   1.0.12\r\nAutomatically run one of the Code Clean profiles when saving the document. This ensures your code is always formatted correctly and follows your coding style conventions.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nExtensibility Message Bus   1.2.6 (master@34d6af2)\r\nProvides common messaging-based MEF services for loosely coupled Visual Studio extension components communication and integration.\r\n\r\nFile Icons   2.7\r\nAdds icons for files that are not recognized by Solution Explorer\r\n\r\nLinux コア ダンプ デバッグ   1.0.9.31808\r\nLinux コア ダンプのデバッグを有効にします。\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ ウィザード   1.0\r\nMicrosoft Visual C++ ウィザード\r\n\r\nMicrosoft Visual Studio VC パッケージ   1.0\r\nMicrosoft Visual Studio VC パッケージ\r\n\r\nMono Debugging for Visual Studio   17.0.11 (54f19d2)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet パッケージ マネージャー   6.0.0\r\nVisual Studio 内の NuGet パッケージ マネージャー。NuGet の詳細については、https://docs.nuget.org/ にアクセスしてください\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nSyntax Visualizer   1.0\r\nAn extension for visualizing Roslyn SyntaxTrees.\r\n\r\nTest Adapter for Google Test   1.0\r\nGoogle Test 向けに作成された単体テストを含む、Visual Studio のテスト ツールを有効にします。拡張機能のインストール ディレクトリに、使用条件およびサード パーティからの通知が含まれています。\r\n\r\nTypeScript Tools   17.0.1001.2002\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic ツール   4.0.0-6.21514.4+df45061e218c9b5813c5531bc06fb238a23e30f6\r\nIDE で使用する Visual Basic コンポーネント。プロジェクトの種類や設定に応じて、異なるバージョンのコンパイラを使用できます。\r\n\r\nVisual C++ for Cross Platform Mobile Development (Android)   17.0.31808.319\r\nVisual C++ for Cross Platform Mobile Development (Android)\r\n\r\nVisual C++ for Linux Development   1.0.9.31808\r\nVisual C++ for Linux Development\r\n\r\nVisual F# Tools   17.0.0-beta.21472.3+f0b5108c92b92ba5ee440228aadba3bae79b43a3\r\nMicrosoft Visual F# Tools\r\n\r\nVisual Studio Code デバッグ アダプターのホスト パッケージ   1.0\r\nVisual Studio Code デバッグ アダプターを Visual Studio でホストするための相互運用レイヤー\r\n\r\nVisual Studio IntelliCode   2.2\r\nVisual Studio 向けの AI 支援付き開発。\r\n\r\nVisual Studio Spell Check Everywhere   VSSpellCheckEverywhere\r\nAn extension that enables spell checking within any Visual Studio file editor or tool window that uses WPF text boxes.\r\nhttps://GitHub.com/EWSoftware/VSSpellChecker\r\n\r\nVisual Studio Spell Checker   VSSpellChecker\r\nAn editor extension that checks the spelling of comments, strings, and plain text as you type or interactively with tool windows.\r\nhttps://GitHub.com/EWSoftware/VSSpellChecker\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisualStudio.DeviceLog   1.0\r\nパッケージに関する情報\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nWSL を使用した .NET Core デバッグ   1.0\r\nWSL を使用した .NET Core デバッグ\r\n\r\nXamarin   17.0.0.324 (d17-0@b917ee4)\r\nXamarin.iOS と Xamarin.Android の開発を有効にする Visual Studio 拡張機能\r\n\r\nXamarin Designer   17.0.0.175 (remotes/origin/main@2e64cffa4)\r\nVisual Studio で Xamarin Designer ツールを有効にするための Visual Studio 拡張機能。\r\n\r\nXamarin Templates   17.0.13 (1bcd73e)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   12.1.0.4 (d17-0/642abcd)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n    Mono: c633fe9\r\n    Java.Interop: xamarin/java.interop/d17-0@8f7ddcdd\r\n    ProGuard: Guardsquare/proguard/v7.0.1@912d149\r\n    SQLite: xamarin/sqlite/3.36.0@a575761\r\n    Xamarin.Android Tools: xamarin/xamarin-android-tools/d17-0@a5194e9\r\n\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   15.0.0.17 (344dcfc35)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n```\r\n\r\n\u003c/details\u003e\r\n\r\n- PC: Modified DELL XPS 8700\r\n  - OS: Windows 10 21H1\r\n  - CPU: Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz   3.60 GHz\r\n  - RAM: 16GB DDR3\r\n  - Graphics: NVIDIA GeForce GTX1060(6GB) Compatible\r\n  - Storage: \r\n    - OS(C:) : Western Digital WDC WDS100T2B0A-00SM50 1000.2 GB SATA SSD\r\n    - WORKSPACE(D:) : Seagate ST1000DM003-1ER162 1000.2 GB 7200RPM SATA HDD\r\n    - ARCHIVE(E:) : HGST HCC541010B9E660 1000.2 GB 5400RPM SATA HDD\r\n- Phone: Sony Xperia™ XZ3(SOV39)\r\n  - OS: Android 10(52.1.C.0.360)\r\n  - SoC: Qualcomm Snapdragon 845\r\n\r\n### Other information\r\n\r\nOther intrinsics such as ArmBase and Dp didn\u0027t work as well. Even `Vector.IsHardwareAccelerated` returns `false`, meaning SIMD isn\u0027t currently available at all.\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eMineCake147E\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-System.Runtime.Intrinsics`, `untriaged`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2021-10-23T15:22:43Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5ICyLy",
                                           "createdAt":  "2022-08-08T22:37:15Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dakersnar",
                                           "body":  "@fanyang-mono is this still planned for .NET 7.0? If not, can you please move it to 8.0? Thanks!",
                                           "updatedAt":  "2022-08-08T22:37:15Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IF28x",
                                           "createdAt":  "2022-08-09T14:58:52Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOCqSUPA==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "tannergooding",
                                                                               "createdAt":  "2022-08-09T14:59:17Z"
                                                                           },
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "dakersnar",
                                                                               "createdAt":  "2022-08-09T16:07:06Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  2
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "This might have been fixed by https://github.com/dotnet/runtime/pull/72982. I will try it out this week. If not, will move this to .NET8",
                                           "updatedAt":  "2022-08-09T14:58:52Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5IU9Hv",
                                           "createdAt":  "2022-08-12T19:37:07Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "AdvSimd is only supported when LLVM is enabled. This issue will persist till LLVM works on MAUI Android, which teams are focused on fixing some issues.  For example,\r\nhttps://github.com/dotnet/runtime/issues/73304\r\nhttps://github.com/dotnet/runtime/issues/68914\r\n\r\nWe should validate this again after LLVM is enabled. Moving this issue to 8.0.0",
                                           "updatedAt":  "2022-08-12T19:44:33Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hUOB_",
                                           "createdAt":  "2023-07-12T14:53:55Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHODAw6Vg==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "MineCake147E",
                                                                               "createdAt":  "2023-07-15T04:17:46Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "AdvSimd can only be enabled when both LLVM and JIT supports it on Arm64. The support for JIT hasn\u0027t landed yet. Moving this to .NET9.",
                                           "updatedAt":  "2023-07-12T14:53:55Z"
                                       }
                                   ],
                         "totalCount":  8
                     },
        "title":  "AdvSimd doesn\u0027t work at all on multiple Android devices",
        "labels":  [
                       "runtime-mono",
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/67893",
        "createdAt":  "2022-04-12T07:28:07Z",
        "number":  67893,
        "author":  "simonrozsival",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-09T13:57:42Z",
        "body":  "Architecture: arm64\r\nConfiguration: Release\r\n\r\nSome `System.Numerics.Tests.GenericVectorTests` are failing on tvOS:\r\n- MultiplicationWithScalarSByte\r\n- MultiplicationWithScalarInt16\r\n- MultiplicationWithScalarInt32\r\n- MultiplicationWithScalarInt64\r\n- MultiplicationWithScalarByte\r\n- MultiplicationWithScalarUInt16\r\n- MultiplicationWithScalarUInt32\r\n- MultiplicationWithScalarUInt64\r\n- MultiplicationWithScalarSingle\r\n- MultiplicationWithScalarDouble\r\n\r\nThe tests fail because the result of multiplication is 0. Sample test output:\r\n```\r\nAssert.Equal() Failure\r\nExpected: -1981376615\r\nActual:   0\r\n```\r\n\r\nSample failing tests in CI: https://dev.azure.com/dnceng/public/_build/results?buildId=1711460\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=46542900\u0026resultId=133095\u0026paneView=debug",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOQVdrYQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5BV2th",
                                           "createdAt":  "2022-04-12T07:28:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to \u0027os-tvos\u0027: @steveisok, @akoeplinger\nSee info in area-owners.md if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nArchitecture: arm64\r\nConfiguration: Release\r\n\r\nSome `System.Numerics.Vectors.Tests` are failing on tvOS:\r\n- MultiplicationWithScalarSByte\r\n- MultiplicationWithScalarInt16\r\n- MultiplicationWithScalarInt32\r\n- MultiplicationWithScalarInt64\r\n- MultiplicationWithScalarByte\r\n- MultiplicationWithScalarUInt16\r\n- MultiplicationWithScalarUInt32\r\n- MultiplicationWithScalarUInt64\r\n- MultiplicationWithScalarSingle\r\n- MultiplicationWithScalarDouble\r\n\r\nThe tests fail because the result of multiplication is 0. Sample test output:\r\n```\r\nAssert.Equal() Failure\r\nExpected: -1981376615\r\nActual:   0\r\n```\r\n\r\nSample failing tests in CI: https://dev.azure.com/dnceng/public/_build/results?buildId=1711460\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=46542900\u0026resultId=133095\u0026paneView=debug\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003esimonrozsival\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`os-tvos`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-04-12T07:28:10Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "[tvOS] Failing System.Numerics.Vectors.Tests",
        "labels":  [
                       "disabled-test",
                       "area-Codegen-LLVM-mono",
                       "os-tvos"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/73261",
        "createdAt":  "2022-08-02T19:10:28Z",
        "number":  73261,
        "author":  "fanyang-mono",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-11T14:58:48Z",
        "body":  "Refer to https://github.com/dotnet/runtime/issues/63331 for details.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOh0Ttcg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5iQjOq",
                                           "createdAt":  "2023-07-24T19:43:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "Moving to 9.0.0",
                                           "updatedAt":  "2023-07-24T19:43:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6HRO1y",
                                           "createdAt":  "2024-08-05T16:16:40Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "Moving to 10.0.0",
                                           "updatedAt":  "2024-08-05T16:16:40Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[Mono] Intrinsify loading/storing, reordering, and extracting a per-element \"mask\" API\u0027s of Vector{64, 128, 256}",
        "labels":  [
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75144",
        "createdAt":  "2022-09-06T17:12:33Z",
        "number":  75144,
        "author":  "matouskozak",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-26T16:15:46Z",
        "body":  "There is a lot of arm64 code inside mini-llvm.c that could be used for amd64. For example the OP_ARM64_XNEG:\r\n\r\nhttps://github.com/dotnet/runtime/blob/2a747212d2bf60b633a567b8992b06ceab3bb85f/src/mono/mono/mini/mini-llvm.c#L10516-L10533\r\n\r\nwhich could be used for emitting negation on amd64 as well. Maybe we could reorganize the code so that it could be used on other platforms as well.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOXKrNug==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5J0Roq",
                                           "createdAt":  "2022-09-06T17:14:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "cc @jandupej @vargaz ",
                                           "updatedAt":  "2022-09-06T17:14:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5cqs26",
                                           "createdAt":  "2023-05-19T14:42:58Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOC8Il6g==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "THUMBS_UP",
                                                                               "user":  "jandupej",
                                                                               "createdAt":  "2023-05-22T08:27:01Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "No resource to address code refactor work in .NET8. Will re-visit in .NET9",
                                           "updatedAt":  "2023-05-19T14:42:58Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[Mono] Code duplication between amd64 and arm64 intrinsics",
        "labels":  [
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/75359",
        "createdAt":  "2022-09-09T18:19:11Z",
        "number":  75359,
        "author":  "akoeplinger",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-08-06T18:26:06Z",
        "body":  "Discovered on https://github.com/dotnet/runtime/pull/75055\r\n\r\n```\r\n+ dotnet /datadisks/disk1/work/A650097C/p/xunit/xunit.console.dll JIT/SIMD/JIT.SIMD.XUnitWrapper.dll JIT/Intrinsics/JIT.Intrinsics.XUnitWrapper.dll -parallel collections -nocolor -noshadow -xml testResults.xml\r\nMicrosoft.DotNet.XUnitConsoleRunner v2.5.0 (64-bit .NET 7.0.0-preview.7.22375.6)\r\n  Discovering: JIT.SIMD.XUnitWrapper (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  JIT.SIMD.XUnitWrapper (found 99 test cases)\r\n  Starting:    JIT.SIMD.XUnitWrapper (parallel test collections = on, max threads = 2)\r\n    JIT/SIMD/VectorConvert_r_Target_64Bit/VectorConvert_r_Target_64Bit.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /datadisks/disk1/work/A650097C/w/B0510920/uploads/Reports/JIT.SIMD/VectorConvert_r_Target_64Bit/VectorConvert_r_Target_64Bit.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /datadisks/disk1/work/A650097C/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false VectorConvert_r_Target_64Bit.dll \u0027\u0027\r\n      A[1] = -7.76248910142792E+18, B[1] = 10684254972281631744, C[1] = 1.0684254972281633E+19, uint64Val = 10684254972281631744, cvtDblVal = 1.068425497228163E+19\r\n      Testing Converts between Double and UInt64 failed\r\n      JitLogFile SIMD.log not found.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/datadisks/disk1/work/A650097C/p\r\n      \u003e /datadisks/disk1/work/A650097C/w/B0510920/e/JIT/SIMD/VectorConvert_r_Target_64Bit/VectorConvert_r_Target_64Bit.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at JIT_SIMD._VectorConvert_r_Target_64Bit_VectorConvert_r_Target_64Bit_._VectorConvert_r_Target_64Bit_VectorConvert_r_Target_64Bit_sh()\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n           at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n      Output:\r\n        \r\n        Return code:      1\r\n        Raw output file:      /datadisks/disk1/work/A650097C/w/B0510920/uploads/Reports/JIT.SIMD/VectorConvert_r_Target_64Bit/VectorConvert_r_Target_64Bit.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /datadisks/disk1/work/A650097C/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false VectorConvert_r_Target_64Bit.dll \u0027\u0027\r\n        A[1] = -7.76248910142792E+18, B[1] = 10684254972281631744, C[1] = 1.0684254972281633E+19, uint64Val = 10684254972281631744, cvtDblVal = 1.068425497228163E+19\r\n        Testing Converts between Double and UInt64 failed\r\n        JitLogFile SIMD.log not found.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        Expected: 100\r\n        Actual: 255\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/datadisks/disk1/work/A650097C/p\r\n        \u003e /datadisks/disk1/work/A650097C/w/B0510920/e/JIT/SIMD/VectorConvert_r_Target_64Bit/VectorConvert_r_Target_64Bit.sh\r\n    JIT/SIMD/VectorConvert_ro_Target_64Bit/VectorConvert_ro_Target_64Bit.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /datadisks/disk1/work/A650097C/w/B0510920/uploads/Reports/JIT.SIMD/VectorConvert_ro_Target_64Bit/VectorConvert_ro_Target_64Bit.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /datadisks/disk1/work/A650097C/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false VectorConvert_ro_Target_64Bit.dll \u0027\u0027\r\n      A[1] = -7.76248910142792E+18, B[1] = 10684254972281631744, C[1] = 1.0684254972281633E+19, uint64Val = 10684254972281631744, cvtDblVal = 1.068425497228163E+19\r\n      Testing Converts between Double and UInt64 failed\r\n      JitLogFile SIMD.log not found.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/datadisks/disk1/work/A650097C/p\r\n      \u003e /datadisks/disk1/work/A650097C/w/B0510920/e/JIT/SIMD/VectorConvert_ro_Target_64Bit/VectorConvert_ro_Target_64Bit.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at JIT_SIMD._VectorConvert_ro_Target_64Bit_VectorConvert_ro_Target_64Bit_._VectorConvert_ro_Target_64Bit_VectorConvert_ro_Target_64Bit_sh()\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n           at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n      Output:\r\n        \r\n        Return code:      1\r\n        Raw output file:      /datadisks/disk1/work/A650097C/w/B0510920/uploads/Reports/JIT.SIMD/VectorConvert_ro_Target_64Bit/VectorConvert_ro_Target_64Bit.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /datadisks/disk1/work/A650097C/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false VectorConvert_ro_Target_64Bit.dll \u0027\u0027\r\n        A[1] = -7.76248910142792E+18, B[1] = 10684254972281631744, C[1] = 1.0684254972281633E+19, uint64Val = 10684254972281631744, cvtDblVal = 1.068425497228163E+19\r\n        Testing Converts between Double and UInt64 failed\r\n        JitLogFile SIMD.log not found.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        Expected: 100\r\n        Actual: 255\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/datadisks/disk1/work/A650097C/p\r\n        \u003e /datadisks/disk1/work/A650097C/w/B0510920/e/JIT/SIMD/VectorConvert_ro_Target_64Bit/VectorConvert_ro_Target_64Bit.sh\r\n  Finished:    JIT.SIMD.XUnitWrapper\r\n  Discovering: JIT.Intrinsics.XUnitWrapper (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  JIT.Intrinsics.XUnitWrapper (found 27 test cases)\r\n  Starting:    JIT.Intrinsics.XUnitWrapper (parallel test collections = on, max threads = 2)\r\n  Finished:    JIT.Intrinsics.XUnitWrapper\r\n=== TEST EXECUTION SUMMARY ===\r\n   JIT.Intrinsics.XUnitWrapper  Total:  27, Errors: 0, Failed: 0, Skipped: 0, Time: 1.504s\r\n   JIT.SIMD.XUnitWrapper        Total:  99, Errors: 0, Failed: 2, Skipped: 0, Time: 8.066s\r\n                                       ---          -          -           -        ------\r\n                          GRAND TOTAL: 126          0          2           0        9.570s (9.658s)\r\n```\r\n\r\nfrom here https://github.com/dotnet/runtime/blob/ca0d3e4ddd50311ebb4320db0637713cb1ec23ce/src/tests/JIT/SIMD/VectorConvert.cs#L209-L227",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHObGw48A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5KDEr8",
                                           "createdAt":  "2022-09-09T18:19:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  null,
                                           "body":  "Tagging subscribers to this area: @JulieLeeMSFT, @jakobbotsch\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003cdetails\u003e\n\u003csummary\u003eIssue Details\u003c/summary\u003e\n\u003chr /\u003e\n\nDiscovered on https://github.com/dotnet/runtime/pull/75055\r\n\r\n```\r\n+ dotnet /datadisks/disk1/work/A650097C/p/xunit/xunit.console.dll JIT/SIMD/JIT.SIMD.XUnitWrapper.dll JIT/Intrinsics/JIT.Intrinsics.XUnitWrapper.dll -parallel collections -nocolor -noshadow -xml testResults.xml\r\nMicrosoft.DotNet.XUnitConsoleRunner v2.5.0 (64-bit .NET 7.0.0-preview.7.22375.6)\r\n  Discovering: JIT.SIMD.XUnitWrapper (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  JIT.SIMD.XUnitWrapper (found 99 test cases)\r\n  Starting:    JIT.SIMD.XUnitWrapper (parallel test collections = on, max threads = 2)\r\n    JIT/SIMD/VectorConvert_r_Target_64Bit/VectorConvert_r_Target_64Bit.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /datadisks/disk1/work/A650097C/w/B0510920/uploads/Reports/JIT.SIMD/VectorConvert_r_Target_64Bit/VectorConvert_r_Target_64Bit.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /datadisks/disk1/work/A650097C/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false VectorConvert_r_Target_64Bit.dll \u0027\u0027\r\n      A[1] = -7.76248910142792E+18, B[1] = 10684254972281631744, C[1] = 1.0684254972281633E+19, uint64Val = 10684254972281631744, cvtDblVal = 1.068425497228163E+19\r\n      Testing Converts between Double and UInt64 failed\r\n      JitLogFile SIMD.log not found.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/datadisks/disk1/work/A650097C/p\r\n      \u003e /datadisks/disk1/work/A650097C/w/B0510920/e/JIT/SIMD/VectorConvert_r_Target_64Bit/VectorConvert_r_Target_64Bit.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at JIT_SIMD._VectorConvert_r_Target_64Bit_VectorConvert_r_Target_64Bit_._VectorConvert_r_Target_64Bit_VectorConvert_r_Target_64Bit_sh()\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n           at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n      Output:\r\n        \r\n        Return code:      1\r\n        Raw output file:      /datadisks/disk1/work/A650097C/w/B0510920/uploads/Reports/JIT.SIMD/VectorConvert_r_Target_64Bit/VectorConvert_r_Target_64Bit.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /datadisks/disk1/work/A650097C/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false VectorConvert_r_Target_64Bit.dll \u0027\u0027\r\n        A[1] = -7.76248910142792E+18, B[1] = 10684254972281631744, C[1] = 1.0684254972281633E+19, uint64Val = 10684254972281631744, cvtDblVal = 1.068425497228163E+19\r\n        Testing Converts between Double and UInt64 failed\r\n        JitLogFile SIMD.log not found.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        Expected: 100\r\n        Actual: 255\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/datadisks/disk1/work/A650097C/p\r\n        \u003e /datadisks/disk1/work/A650097C/w/B0510920/e/JIT/SIMD/VectorConvert_r_Target_64Bit/VectorConvert_r_Target_64Bit.sh\r\n    JIT/SIMD/VectorConvert_ro_Target_64Bit/VectorConvert_ro_Target_64Bit.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /datadisks/disk1/work/A650097C/w/B0510920/uploads/Reports/JIT.SIMD/VectorConvert_ro_Target_64Bit/VectorConvert_ro_Target_64Bit.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /datadisks/disk1/work/A650097C/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false VectorConvert_ro_Target_64Bit.dll \u0027\u0027\r\n      A[1] = -7.76248910142792E+18, B[1] = 10684254972281631744, C[1] = 1.0684254972281633E+19, uint64Val = 10684254972281631744, cvtDblVal = 1.068425497228163E+19\r\n      Testing Converts between Double and UInt64 failed\r\n      JitLogFile SIMD.log not found.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      JitLog not enabled.\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n      To run the test:\r\n      \u003e set CORE_ROOT=/datadisks/disk1/work/A650097C/p\r\n      \u003e /datadisks/disk1/work/A650097C/w/B0510920/e/JIT/SIMD/VectorConvert_ro_Target_64Bit/VectorConvert_ro_Target_64Bit.sh\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n           at JIT_SIMD._VectorConvert_ro_Target_64Bit_VectorConvert_ro_Target_64Bit_._VectorConvert_ro_Target_64Bit_VectorConvert_ro_Target_64Bit_sh()\r\n           at System.RuntimeMethodHandle.InvokeMethod(Object target, Void** arguments, Signature sig, Boolean isConstructor)\r\n           at System.Reflection.MethodInvoker.Invoke(Object obj, IntPtr* args, BindingFlags invokeAttr)\r\n      Output:\r\n        \r\n        Return code:      1\r\n        Raw output file:      /datadisks/disk1/work/A650097C/w/B0510920/uploads/Reports/JIT.SIMD/VectorConvert_ro_Target_64Bit/VectorConvert_ro_Target_64Bit.output.txt\r\n        Raw output:\r\n        BEGIN EXECUTION\r\n        /datadisks/disk1/work/A650097C/p/corerun -p System.Reflection.Metadata.MetadataUpdater.IsSupported=false VectorConvert_ro_Target_64Bit.dll \u0027\u0027\r\n        A[1] = -7.76248910142792E+18, B[1] = 10684254972281631744, C[1] = 1.0684254972281633E+19, uint64Val = 10684254972281631744, cvtDblVal = 1.068425497228163E+19\r\n        Testing Converts between Double and UInt64 failed\r\n        JitLogFile SIMD.log not found.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        JitLog not enabled.\r\n        Expected: 100\r\n        Actual: 255\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        \u003e set CORE_ROOT=/datadisks/disk1/work/A650097C/p\r\n        \u003e /datadisks/disk1/work/A650097C/w/B0510920/e/JIT/SIMD/VectorConvert_ro_Target_64Bit/VectorConvert_ro_Target_64Bit.sh\r\n  Finished:    JIT.SIMD.XUnitWrapper\r\n  Discovering: JIT.Intrinsics.XUnitWrapper (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  JIT.Intrinsics.XUnitWrapper (found 27 test cases)\r\n  Starting:    JIT.Intrinsics.XUnitWrapper (parallel test collections = on, max threads = 2)\r\n  Finished:    JIT.Intrinsics.XUnitWrapper\r\n=== TEST EXECUTION SUMMARY ===\r\n   JIT.Intrinsics.XUnitWrapper  Total:  27, Errors: 0, Failed: 0, Skipped: 0, Time: 1.504s\r\n   JIT.SIMD.XUnitWrapper        Total:  99, Errors: 0, Failed: 2, Skipped: 0, Time: 8.066s\r\n                                       ---          -          -           -        ------\r\n                          GRAND TOTAL: 126          0          2           0        9.570s (9.658s)\r\n```\r\n\r\nfrom here https://github.com/dotnet/runtime/blob/ca0d3e4ddd50311ebb4320db0637713cb1ec23ce/src/tests/JIT/SIMD/VectorConvert.cs#L209-L227\n\n\u003ctable\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAuthor:\u003c/th\u003e\n    \u003ctd\u003eakoeplinger\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eAssignees:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eLabels:\u003c/th\u003e\n    \u003ctd\u003e\n\n`area-CodeGen-coreclr`\n\n\u003c/td\u003e\n  \u003c/tr\u003e\n  \u003ctr\u003e\n    \u003cth align=\"left\"\u003eMilestone:\u003c/th\u003e\n    \u003ctd\u003e-\u003c/td\u003e\n  \u003c/tr\u003e\n\u003c/table\u003e\n\u003c/details\u003e",
                                           "updatedAt":  "2022-09-09T18:19:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iW1qS",
                                           "createdAt":  "2023-07-25T16:23:32Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "@akoeplinger  -  Do these fail with LLVM16 (we updated to that right?) (Moving to 9.0, but if needed will consider backporting the fix)",
                                           "updatedAt":  "2023-07-25T16:23:32Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5sbDjw",
                                           "createdAt":  "2023-11-20T13:06:56Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "Yes we\u0027re on LLVM16 but the tests are disabled in src/tests/issues.targets so they\u0027d need to be reenabled to check whether they still fail.",
                                           "updatedAt":  "2023-11-20T13:06:56Z"
                                       }
                                   ],
                         "totalCount":  3
                     },
        "title":  "VectorConvert_r_Target_64Bit and VectorConvert_ro_Target_64Bit fail with LLVM 14",
        "labels":  [
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/81610",
        "createdAt":  "2023-02-03T19:54:16Z",
        "number":  81610,
        "author":  "fanyang-mono",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-26T17:10:02Z",
        "body":  "Investigate and hopefully fix https://github.com/xamarin/xamarin-android/pull/6946. Then Android could remove the workaround.\r\n\r\nNote that the LLVM version that Android team chooses to use here is not necessary align with what Mono uses for LLVM. This problem exist regardless Mono LLVM is enabled or not. This is related to LLVM 14 because the linker that Android team uses to create Android apps uses LLVM and that is part of NDK. So the LLVM version here was decided by the one used by Android NDK.\r\n\r\nMono AOT needs to learn to recognize the new pattern that `lld` generates starting LLVM 14.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOYVVikQ==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5WCx4d",
                                           "createdAt":  "2023-02-24T11:43:39Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "Shouldn\u0027t we put this in the 8.0 milestone?",
                                           "updatedAt":  "2023-02-24T11:43:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5hVWKR",
                                           "createdAt":  "2023-07-12T18:05:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "As mono has been upgraded to LLVM 16, we may be able to remove the workaround?",
                                           "updatedAt":  "2023-07-12T18:05:30Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[Mono] An assertion that Android hit when using LLVM 14 with AOT",
        "labels":  [
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/88207",
        "createdAt":  "2023-06-29T18:43:43Z",
        "number":  88207,
        "author":  "fanyang-mono",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2023-06-29T18:44:51Z",
        "body":  "Intrinsify Quaternion and Plane for all Mono backend engines\r\n- [x] LLVM (#81483)\r\n- [ ] mini JIT on arm64\r\n- [ ] mini JIT on amd64\r\n- [ ] interpreter",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[Mono] Intrinsify Quaternion and Plane",
        "labels":  [
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89190",
        "createdAt":  "2023-07-19T15:47:32Z",
        "number":  89190,
        "author":  "jonathanpeppers",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-26T16:11:52Z",
        "body":  "### Description\n\nWe have a set of on-device tests that only fail when building with `-p:EnableLLVM=true`.\r\n\r\n```\r\nError message\r\nExpected: True\r\nBut was:  False\r\nStack trace\r\n   at Java.InteropTests.JniValueMarshalerContractTests`1[[System.Nullable`1[[System.Boolean, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]].CreateValue()\r\n   at System.Reflection.MethodInvoker.InterpretedInvoke(Object , IntPtr* )\r\n   at System.Reflection.MethodInvoker.Invoke(Object , IntPtr* , BindingFlags )\r\n```\r\n\r\nExample:\r\n\r\n* https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=8098222\u0026view=ms.vss-test-web.build-test-results-tab\u0026runId=80171849\u0026resultId=100662\u0026paneView=debug\r\n* https://github.com/xamarin/java.interop/blob/151b03ee1eefa62e3d29b034b2aaf05ea73d99ed/tests/Java.Interop-Tests/Java.Interop/JniValueMarshalerContractTests.cs#L401-L419\r\n\r\nThey only fail on `bool`, `sbyte`, `char`, and `short`. The tests pass if `-p:EnableLLVM` is false (which is the default for customers) and they pass for the other data types.\n\n### Reproduction Steps\n\nBuild and run the xamarin/xamarin-android device test project with `-c Release -p:EnableLLVM=true`:\r\n* https://github.com/xamarin/xamarin-android/blob/main/tests/Mono.Android-Tests/Java.Interop-Tests/Java.Interop-Tests.NET.csproj\r\n* https://github.com/xamarin/xamarin-android/blob/main/Documentation/workflow/UnitTests.md#on-device-unit-tests\n\n### Expected behavior\n\nTests pass when `-p:EnableLLVM=true`.\n\n### Actual behavior\n\nTests fail when `-p:EnableLLVM=true`.\n\n### Regression?\n\nYes, this worked in .NET 6 \u0026 .NET 7 and past .NET 8 previews.\n\n### Known Workarounds\n\nUse `-p:EnableLLVM=false` instead.\n\n### Configuration\n\nStarted happening: https://github.com/xamarin/xamarin-android/pull/8176\r\n\r\n.NET SDK: 8.0.100-preview.7.23364.32\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZGWcMg==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5h6U9j",
                                           "createdAt":  "2023-07-19T20:02:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "akoeplinger",
                                           "body":  "/cc @vargaz ",
                                           "updatedAt":  "2023-07-19T20:02:49Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h8TzH",
                                           "createdAt":  "2023-07-20T05:06:06Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "Would it be possible to create a smaller testcase that doesn\u0027t depend on xamarin-android ? Or the functionality is android specific ?\r\n",
                                           "updatedAt":  "2023-07-20T05:06:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5h_NyT",
                                           "createdAt":  "2023-07-20T13:47:37Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "Maybe @jonpryor would know how to do this when he\u0027s back.\r\n\r\nI\u0027m guessing this would be something like:\r\n\r\n* Console app running on macOS\r\n* Mono runtime\r\n* Bring in some amount of code from java.interop\r\n\r\nBut then you\u0027d have to setup the `\u003cMonoAOTCompiler/\u003e` task w/ LLVM?\r\n\r\nI don\u0027t see the required AOT pack to make this kind of project:\r\n\r\nhttps://dev.azure.com/dnceng/public/_artifacts/feed/dotnet8/NuGet/Microsoft.NETCore.App.Runtime.AOT.osx-arm64.Cross.maccatalyst-arm64/overview/8.0.0-preview.7.23369.13\r\n\r\nI think we would need `Microsoft.NETCore.App.Runtime.AOT.osx-arm64.Cross.osx-arm64` to do this on an M1, which doesn\u0027t exist?\r\n\r\nMaybe the only way to do this is on Android.",
                                           "updatedAt":  "2023-07-20T13:47:37Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5iO_8I",
                                           "createdAt":  "2023-07-24T15:11:01Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "cc @fanyang-mono ",
                                           "updatedAt":  "2023-07-24T15:11:01Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5jVJzJ",
                                           "createdAt":  "2023-08-05T12:15:24Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "vargaz",
                                           "body":  "Tried extracting a testcase out of the test suite into a standalone app, but can\u0027t reproduce the problem.\r\n",
                                           "updatedAt":  "2023-08-05T12:15:24Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5kZZwy",
                                           "createdAt":  "2023-08-18T20:02:45Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "SamMonoRT",
                                           "body":  "This seems like a test case failure. Moving to 9.0.0, but based on ongoing investigations, if needed will backport fix to 8.0\\rc1",
                                           "updatedAt":  "2023-08-18T20:02:45Z"
                                       }
                                   ],
                         "totalCount":  6
                     },
        "title":  "Android on-device tests that fail under LLVM",
        "labels":  [
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/89616",
        "createdAt":  "2023-07-28T06:57:32Z",
        "number":  89616,
        "author":  "LeVladIonescu",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-02-16T10:34:17Z",
        "body":  "Currently, there are a few code paths in `emit_vector_2_3_4` that are quite similar and could be merged in order to simplify the code.\r\n\r\ni.e. Eliminate this type of if-else statement\r\n\r\n`\r\nif (COMPILE_LLVM (CFG) {\r\n    // llvm code path\r\n} else {\r\n    // non-llvm code path\r\n}\r\n`",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  null,
                         "nodes":  [

                                   ],
                         "totalCount":  0
                     },
        "title":  "[mono] Merge LLVM and non-LLVM code paths in emit_vector_2_3_4",
        "labels":  [
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/91392",
        "createdAt":  "2023-08-31T12:49:34Z",
        "number":  91392,
        "author":  "jandupej",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-06-28T20:54:48Z",
        "body":  "Unit tests were disabled in https://github.com/dotnet/runtime/pull/75768 for the LLVM AOT lane. Enable them!\r\n\r\nIssue follows up from https://github.com/dotnet/runtime/issues/75767.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOZdDF-w==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc5lYxKk",
                                           "createdAt":  "2023-08-31T12:57:35Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "fanyang-mono",
                                           "body":  "To clarify, the restoration of these tests requires the incorporation of the `System.Runtime.Intrinsics.X86` intrinsics support into the mini JIT on the amd64 platform.",
                                           "updatedAt":  "2023-08-31T15:37:39Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc5l0MX7",
                                           "createdAt":  "2023-09-06T11:41:49Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jandupej",
                                           "body":  "Could benefit from https://github.com/dotnet/runtime/pull/91393",
                                           "updatedAt":  "2023-09-06T11:41:49Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[mono] Reenable disabled x86 SIMD unit tests",
        "labels":  [
                       "disabled-test",
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/102037",
        "createdAt":  "2024-05-09T01:42:06Z",
        "number":  102037,
        "author":  "tannergooding",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-26T16:12:27Z",
        "body":  "As per the title the Sse2_r and Sse2_ro hardware intrinsics projects fail compiling with errors similar to the following:\r\n```\r\n /__w/1/s/artifacts/bin/mono/linux.x64.Release/opt: mono_aot_dFNFkp/temp.bc: error: Invalid record (Producer: \u0027LLVM16.0.5\u0027 Reader: \u0027LLVM 16.0.5\u0027)\r\n  AOT of image /__w/1/s/artifacts/tests/coreclr/linux.x64.Release/JIT/HardwareIntrinsics/HardwareIntrinsics_X86_r/X86_Sse2_r.dll failed.\r\n  Mono Ahead of Time compiler - compiling assembly /__w/1/s/artifacts/tests/coreclr/linux.x64.Release/JIT/HardwareIntrinsics/HardwareIntrinsics_X86_r/X86_Sse2_r.dll\r\n```\r\n\r\nThis was found in https://github.com/dotnet/runtime/pull/101886 after extending various tests to include new coverage in the form of the following (that is, the same as the existing `RuneBasicScenario` but using `Vector.Create` and `Vector.ConditionalSelect` as part of the scenario to ensure that embedded broadcasts and embedded masking could be validated.\r\n```csharp\r\npublic void RunBroadcastScenario()\r\n        {\r\n            TestLibrary.TestFramework.BeginScenario(nameof(RunBroadcastScenario));\r\n\r\n            var result = {Isa}.{Method}(\r\n                Unsafe.Read\u003c{Op1VectorType}\u003c{Op1BaseType}\u003e\u003e(_dataTable.inArray1Ptr),\r\n                {Op2VectorType}.Create\u003c{Op2BaseType}\u003e(Unsafe.Read\u003c{Op2BaseType}\u003e(_dataTable.inArray2Ptr))\r\n            );\r\n\r\n            Unsafe.Write(_dataTable.outArrayPtr, result);\r\n            ValidateResult(_dataTable.inArray1Ptr, _dataTable.inArray2Ptr, _dataTable.outArrayPtr, isBroadcast: true);\r\n        }\r\n\r\n        public void RunMaskingValueScenario()\r\n        {\r\n            TestLibrary.TestFramework.BeginScenario(nameof(RunMaskingValueScenario));\r\n\r\n            var op1 = Unsafe.Read\u003c{Op1VectorType}\u003c{Op1BaseType}\u003e\u003e(_dataTable.inArray1Ptr);\r\n\r\n            var result = {RetVectorType}.ConditionalSelect(\r\n                {RetVectorType}.Equals\u003c{RetBaseType}\u003e(op1.As{RetBaseType}(), {RetVectorType}\u003c{RetBaseType}\u003e.Zero),\r\n                {Isa}.{Method}(\r\n                    op1,\r\n                    Unsafe.Read\u003c{Op2VectorType}\u003c{Op2BaseType}\u003e\u003e(_dataTable.inArray2Ptr)\r\n                ),\r\n                {RetVectorType}.Create\u003c{RetBaseType}\u003e(1)\r\n            );\r\n\r\n            Unsafe.Write(_dataTable.outArrayPtr, result);\r\n            ValidateResult(_dataTable.inArray1Ptr, _dataTable.inArray2Ptr, _dataTable.outArrayPtr, mask: 1);\r\n        }\r\n\r\n        public void RunMaskingZeroScenario()\r\n        {\r\n            TestLibrary.TestFramework.BeginScenario(nameof(RunMaskingZeroScenario));\r\n\r\n            var op1 = Unsafe.Read\u003c{Op1VectorType}\u003c{Op1BaseType}\u003e\u003e(_dataTable.inArray1Ptr);\r\n\r\n            var result = {RetVectorType}.ConditionalSelect(\r\n                {RetVectorType}.Equals\u003c{RetBaseType}\u003e(op1.As{RetBaseType}(), {RetVectorType}\u003c{RetBaseType}\u003e.Zero),\r\n                {Isa}.{Method}(\r\n                    op1,\r\n                    Unsafe.Read\u003c{Op2VectorType}\u003c{Op2BaseType}\u003e\u003e(_dataTable.inArray2Ptr)\r\n                ),\r\n                {RetVectorType}\u003c{RetBaseType}\u003e.Zero\r\n            );\r\n\r\n            Unsafe.Write(_dataTable.outArrayPtr, result);\r\n            ValidateResult(_dataTable.inArray1Ptr, _dataTable.inArray2Ptr, _dataTable.outArrayPtr, mask: 0);\r\n        }\r\n\r\n        public void RunBroadcastAndMaskingScenario()\r\n        {\r\n            TestLibrary.TestFramework.BeginScenario(nameof(RunBroadcastAndMaskingScenario));\r\n\r\n            var op1 = Unsafe.Read\u003c{Op1VectorType}\u003c{Op1BaseType}\u003e\u003e(_dataTable.inArray1Ptr);\r\n\r\n            var result = {RetVectorType}.ConditionalSelect(\r\n                {RetVectorType}.Equals\u003c{RetBaseType}\u003e(op1.As{RetBaseType}(), {RetVectorType}\u003c{RetBaseType}\u003e.Zero),\r\n                {Isa}.{Method}(\r\n                    op1,\r\n                    {Op2VectorType}.Create\u003c{Op2BaseType}\u003e(Unsafe.Read\u003c{Op2BaseType}\u003e(_dataTable.inArray2Ptr))\r\n                ),\r\n                {RetVectorType}\u003c{RetBaseType}\u003e.Zero\r\n            );\r\n\r\n            Unsafe.Write(_dataTable.outArrayPtr, result);\r\n            ValidateResult(_dataTable.inArray1Ptr, _dataTable.inArray2Ptr, _dataTable.outArrayPtr, isBroadcast: true, mask: 0);\r\n        }\r\n```\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOfUa99A==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc59RpfR",
                                           "createdAt":  "2024-05-09T01:44:19Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @lambdageek, @steveisok\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-05-09T01:44:19Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc59Rr30",
                                           "createdAt":  "2024-05-09T01:53:10Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "steveisok",
                                           "body":  "/cc @fanyang-mono ",
                                           "updatedAt":  "2024-05-09T01:53:10Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Mono LLVMAOT fails for Sse2_r and Sse2_ro with Invalid Record",
        "labels":  [
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/105281",
        "createdAt":  "2024-07-22T21:06:54Z",
        "number":  105281,
        "author":  "radekdoulik",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2024-07-22T21:30:09Z",
        "body":  "Context: https://github.com/dotnet/llvm-project/pull/599\r\n\r\nThe mono EH frame generation code in llvm should also include the specialized functions.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOhb4Dig==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6FvgOK",
                                           "createdAt":  "2024-07-22T21:11:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @lambdageek, @steveisok\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-07-22T21:11:31Z"
                                       }
                                   ],
                         "totalCount":  1
                     },
        "title":  "Update EH frame generation in llvm to work with functions specialization",
        "labels":  [
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/106270",
        "createdAt":  "2024-08-12T14:17:55Z",
        "number":  106270,
        "author":  "BrzVlad",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  "Y3Vyc29yOnYyOpHOC6LwDA==",
                          "nodes":  [
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "tannergooding",
                                            "createdAt":  "2024-08-12T15:33:21Z"
                                        },
                                        {
                                            "content":  "THUMBS_UP",
                                            "user":  "radekdoulik",
                                            "createdAt":  "2024-08-14T16:18:45Z"
                                        }
                                    ],
                          "totalCount":  2
                      },
        "updatedAt":  "2025-08-22T16:32:59Z",
        "body":  "Crash started happening after change in shuffle intrinsic handling in https://github.com/dotnet/runtime/commit/4fbd498cc25c\r\n\r\n### Crash stacktrace\r\n```\r\n0x104d49ccb mono-aot-cross : _ZN4llvm10ConstantFP3getERNS_11LLVMContextERKNS_7APFloatE\r\n0x104d4ae2b mono-aot-cross : _ZN4llvm8Constant15getAllOnesValueEPNS_4TypeE\r\n0x104d2c716 mono-aot-cross : _ZN4llvm29ConstantFoldBinaryInstructionEjPNS_8ConstantES1_\r\n0x104d2d525 mono-aot-cross : _ZN4llvm29ConstantFoldBinaryInstructionEjPNS_8ConstantES1_\r\n0x104d6ea15 mono-aot-cross : LLVMBuildAnd\r\n0x1046ee3cf mono-aot-cross : process_bb\r\n0x1046d83b4 mono-aot-cross : emit_method_inner\r\n0x1046d63fc mono-aot-cross : mono_llvm_emit_method\r\n0x104574012 mono-aot-cross : mini_method_compile\r\n0x104602a64 mono-aot-cross : compile_method\r\n0x1045f540f mono-aot-cross : compile_methods\r\n0x1045f0401 mono-aot-cross : aot_assembly\r\n0x1045ed39f mono-aot-cross : mono_aot_assemblies\r\n0x1045e4943 mono-aot-cross : main_thread_handler\r\n0x1045e0b0d mono-aot-cross : mono_main\r\n0x10442c5f8 mono-aot-cross : main\r\n```\r\n\r\n### Steps to reproduce\r\n\r\n* Reproducible on osx x64, probably reproduces the same on linux x64\r\n* Revert fix in `simd-intrinsics.c` from https://github.com/dotnet/runtime/pull/105867\r\n* ./build.sh -subset mono+libs+clr.hosts -c Release /p:MonoEnableLLVM=true /p:MonoAOTEnableLLVM=true\r\n* ./src/tests/build.sh -mono Release generatelayoutonly\r\n* cd artifacts/tests/coreclr/osx.x64.Release/Tests/Core_Root\r\n* export MONO_PATH=..../artifacts/tests/coreclr/osx.x64.Release/Tests/Core_Root\r\n* export PATH=$PATH:.../artifacts/bin/mono/osx.x64.Release // in order to find opt and llc\r\n* export MONO_ENV_OPTIONS=\"--aot=llvm\"\r\n* ./artifacts/bin/mono/osx.x64.Release/cross/osx-x64/mono-aot-cross System.IO.Hashing.dll\r\n\r\n\r\n\r\n\r\n",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOiCTc8g==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6IJM8g",
                                           "createdAt":  "2024-08-12T14:18:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @lambdageek, @steveisok\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2024-08-12T14:18:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6IJNzy",
                                           "createdAt":  "2024-08-12T14:19:34Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "lambdageek",
                                           "body":  "Cc @tannergooding ",
                                           "updatedAt":  "2024-08-12T14:19:34Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "Mono llvm crash when emitting shuffle intrinsic",
        "labels":  [
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114794",
        "createdAt":  "2025-04-11T15:08:19Z",
        "number":  114794,
        "author":  "janne-hmp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-04T05:18:49Z",
        "body":  "### Description\n\nI\u0027ve been trying to see if I can improve the performance of my game GnollHack in MAUI. Since LLVM is enabled on iOS in Release configuration, I tried to enabling it also for Android by setting EnableLLVM true in the project file. However, this leads to a crash at start. Tested on .NET 9.0.4 / MAUI 9.0.60.\n\n### Steps to Reproduce\n\n1. Clone the reproduction repository at https://github.com/hyvanmielenpelit/GnollHackMAUIEasyBuild\n2. Open GnollHackM.csproj project file under `win/win32/xpl/GnollHackM`\n3. In Visual Studio 2022, open GnollHackM\u0027s project properties by right-clicking the project and selecting Properties from the popup menu\n4. Scroll down to Android \u003e Options section and find LLVM subtitle there. Tick the box \"Use LLVM optimizing compiler\", which sets `EnableLLVM` in the project file to true\n5. Change the configuration to Release\n6. Delete `bin` and `obj` directories if they exist\n7. Build GnollHackM according to instructions in the repository\n8. Start the game on your Android device by selecting the device from the debug dropdown list and then clicking the Start without Debugging green arrow.\n9. The game crashes at start\n10. (If you do not set EnableLLVM to true, the game starts successfully. Delete `bin` and `obj` directories first, though.) \n\n### Link to public reproduction project repository\n\nhttps://github.com/hyvanmielenpelit/GnollHackMAUIEasyBuild\n\n### Version with bug\n\n9.0.60 SR6\n\n### Is this a regression from previous behavior?\n\nNot sure, did not test other versions\n\n### Last version that worked well\n\nUnknown/Other\n\n### Affected platforms\n\nAndroid\n\n### Affected platform versions\n\nAndroid 15\n\n### Did you find any workaround?\n\nNo, I cannot use LLVM on Android at the moment. Perhaps it does not work properly there yet, generally or with SkiaSharp or the like.\n\n### Relevant log output\n\n```shell\n\n```",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp9wYyw==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6ntUMH",
                                           "createdAt":  "2025-04-11T20:06:05Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "PureWeen",
                                           "body":  "Can you attach a logcat file with your crash?\nhttps://learn.microsoft.com/en-us/xamarin/android/deploy-test/debugging/android-debug-log?tabs=windows\n\n@jonathanpeppers @jonpryor ",
                                           "updatedAt":  "2025-04-11T20:06:05Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ntUMT",
                                           "createdAt":  "2025-04-11T20:44:31Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janne-hmp",
                                           "body":  "Sure. Here you go. The appropriate crash is the last one.\n\n[logcat.zip](https://github.com/user-attachments/files/19713857/logcat.zip)",
                                           "updatedAt":  "2025-04-11T20:44:31Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ntUMc",
                                           "createdAt":  "2025-04-12T14:21:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janne-hmp",
                                           "body":  "I found out that setting `\u003cAndroidEnableProfiledAot\u003efalse\u003c/AndroidEnableProfiledAot\u003e` prevents the startup crash. However, with this setting optimizing the libraries for size takes c. 10 minutes (up from 3 minutes with `EnableLLVM = true` and up from 1 minute with `EnableLLVM = false`), and the optimization is conducted on each build and deployment (so minimum 2 times / 20 min per deployment), while with `AndroidEnableProfiledAot = true`, the whole process seemed to take about 3 min with `EnableLLVM = true` and 1 minute when `EnableLLVM = false`.",
                                           "updatedAt":  "2025-04-12T16:41:10Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ntUMj",
                                           "createdAt":  "2025-04-12T16:39:26Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  "Y3Vyc29yOnYyOpHOEOwtSQ==",
                                                             "nodes":  [
                                                                           {
                                                                               "content":  "EYES",
                                                                               "user":  "OvrBtn",
                                                                               "createdAt":  "2025-04-15T11:06:10Z"
                                                                           }
                                                                       ],
                                                             "totalCount":  1
                                                         },
                                           "author":  "janne-hmp",
                                           "body":  "@jonathanpeppers I have a few questions regarding this overall:\n- Why does `AndroidEnableProfiledAot = false` make LLVM slow (c. 10 min to optimize the libraries)? (Or why is LLVM so fast when the setting is `true`, c. 3 min to optimize the libraries)\n- Why are all the libraries, especially the ones in the .NET framework, always optimized every time? Cannot the optimized versions of framework libraries be stored somewhere in the `obj` directory, wherefrom they could be retrieved on every build (perhaps rebuild would optimize them again)?\n- Why is library optimization rerun on every deployment in addition to build when `AndroidEnableProfiledAot = false`, causing things to slow down by a factor of 2? (But not when the setting is true, speeding up deployment massively.)\n- Why are there 4 processes doing the optimization for Android x64 libraries but seemingly just one process optimizing Android ARM64 libraries, thus being 4 times slower? Could the number of processes / threads be increased to e.g. 8 processes / threads, making the best use of available processor capacity (now one process takes only 7% of CPU time)?\n\nBy (1) fixing the unnecessary library reoptimization before deployment, (2) optimizing the framework libraries only once, and (3) using 8 processes to optimize the remaining libraries, I think the build and deployment time in `EnableLLVM = true` and `AndroidEnableProfiledAot = false` could be brought down by a factor of at least 10.",
                                           "updatedAt":  "2025-04-12T16:39:26Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ntUMr",
                                           "createdAt":  "2025-04-17T17:56:44Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "jonathanpeppers",
                                           "body":  "The crash is in mono, moving to dotnet/runtime:\n```\nAbort message: \u0027* Assertion at /__w/1/s/src/mono/mono/mini/aot-runtime.c:5332, condition `plt_entry\u0027 not met\u0027\n```\n\nGenerally, you shouldn\u0027t use `-p:EnableLLVM=true` without also turning off profiled AOT: `-p:AndroidEnableProfiledAot=false`. It\u0027s not clear to me if that is the issue here, though.",
                                           "updatedAt":  "2025-04-17T17:56:44Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6ntUn8",
                                           "createdAt":  "2025-04-17T17:58:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-17T17:58:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6nykUz",
                                           "createdAt":  "2025-04-18T09:22:04Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janne-hmp",
                                           "body":  "Thanks. Perhaps you can also give a hint to the Visual Studio development team that ticking the LLVM checkbox on Android should also set ProfiledAot off. Now it only enables LLVM, leading the app to crash in release mode. Or, alternatively make LLVM work with ProfiledAot (which is a bigger effort most likely). Also, it would be great if the speed of LLVM optimization process could improved e.g. by not processing all .NET libraries every time (if that\u0027s possible) and/or using as many threads in parallel to process the libraries as possible.",
                                           "updatedAt":  "2025-04-18T09:22:04Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6n1C8o",
                                           "createdAt":  "2025-04-18T16:02:36Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janne-hmp",
                                           "body":  "@jonathanpeppers  As a further performance point at least when building in Visual Studio 2022 17.13.6, I do see from Task Manager that the AoT libraries in `win\\win32\\xpl\\GnollHackM\\obj\\Release\\net9.0-android\\android-arm64\\aot` are processed by just one process, while the AoT libraries in `win\\win32\\xpl\\GnollHackM\\obj\\Release\\net9.0-android\\android-x64\\aot` are built much faster using 4-8 processes. Getting arm64 to use more processes might be an easy fix to achieve much faster build times with LLVM. Furthermore, there\u0027s also the question why all the framework libraries are rebuilt \u0026 optimized every time.",
                                           "updatedAt":  "2025-04-18T16:02:36Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6n3BjL",
                                           "createdAt":  "2025-04-18T21:27:50Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-18T21:27:50Z"
                                       }
                                   ],
                         "totalCount":  9
                     },
        "title":  "[Android, 9.0.60] Enabling LLVM on Android crashes the app at start",
        "labels":  [
                       "os-android",
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/114822",
        "createdAt":  "2025-04-18T18:27:26Z",
        "number":  114822,
        "author":  "janne-hmp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-07-28T15:18:34Z",
        "body":  "### Description\n\nIn my game GnollHack, I have a specialized drawing function called DrawTileWithRadialTransparency that uses SkiaSharp to draw radial transparency for a bitmap. The function works always (on all platforms and in both Xamarin and MAUI), except for MAUI in Android in release mode when EnableLLVM is set to true and AndroidEnableProfileAot set to false, in which case it either does not draw anything or draws something in the wrong place with a wrong size. This seems to be some sort of an LLVM code generation bug, as the behavior makes otherwise little sense (it feels like the program does not do what is instructed in the code). Not sure why the problems occur just with this function, although it is a bit more complicated than the other ones. If I comment some parts of the code out (e.g. the unsafe block) or add something, the function most often still does not work as intended.\n\n### Reproduction Steps\n\n1. Clone the reproduction repository at https://github.com/hyvanmielenpelit/GnollHackMAUIEasyBuild\n2. Open GnollHackM solution\n3. Build it for Android in Release configuration according to instructions in the repository\n4. Note that EnableLLVM is on.\n5. Start the app on your Android device\n6. Press Settings button and switch Developer Mode on in System section, then press Close\n7. Switch on Wizard Mode\n8. Press Play Game, create a character and start playing\n9. Press More Commands button on bottom right corner, and scroll then left to Wizard Mode Commands\n10. Select Genesis and type yellow light\n11. A yellow light monster appears, but it has no graphics\n12. Quit the game and exit app\n13. Switch EnableLLVM to off and AndroidEnableProfiledAot to true.\n14. Go to step 3. In step 11, note that the yellow light has now graphics.\n\n### Expected behavior\n\nRadial transparency function works with Android Release mode with EnableLLVM = true just like in every other case.\n\n### Actual behavior\n\nThe drawn picture either is not drawn or is drawn in the wrong position with the wrong size.\n\n### Regression?\n\nNot sure. This is an LLVM problem.\n\n### Known Workarounds\n\nNone. Cannot use LLVM if I want to use the function in question.\n\n### Configuration\n\n.NET 9.0.3, .NET MAUI 9.0.50, SkiaSharp 3.116.1\nAndroid 15, ARM64\n\n### Other information\n\n_No response_",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOp-HIaA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6n2iGe",
                                           "createdAt":  "2025-04-18T19:41:30Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janne-hmp",
                                           "body":  "As an additional remark, if I move the code from the radial transparency function to the function calling it, then the whole parent function malfunctions, even when the radial transparency code is not even executed at all (no tiles with such transparency being drawn), so this indeed seems to be some sort of a code compilation error.",
                                           "updatedAt":  "2025-04-18T19:41:30Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6n2nLO",
                                           "createdAt":  "2025-04-18T20:01:17Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janne-hmp",
                                           "body":  "@jonathanpeppers Just to note that I\u0027m having a really weird problem with LLVM on Android: One function seems to have been somehow incorrectly compiled.",
                                           "updatedAt":  "2025-04-18T20:01:17Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6n29bQ",
                                           "createdAt":  "2025-04-18T21:13:02Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-04-18T21:13:02Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6n4cho",
                                           "createdAt":  "2025-04-19T07:38:22Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "janne-hmp",
                                           "body":  "When I refactored the code of the `DrawTileWithRadialTransparency` function and split it in 4 subfunctions (each just holding part of the original code), things started to function with LLVM enabled (the code generation bug did not occur). The new code is as follows, and can be in its entirety found in the main repository at https://github.com/hyvanmielenpelit/GnollHack . The malfunctioning original code is in the reproduction repository at https://github.com/hyvanmielenpelit/GnollHackMAUIEasyBuild .\n\n```\npublic void DrawTileWithRadialTransparency(SKCanvas canvas, bool delayedDraw, SKImage tileSheet, SKRect sourcerect, SKRect targetrect, ref LayerInfo layers, float destSplitY, float opaqueness, SKPaint paint, int mapX, int mapY, float canvaswidth, float canvasheight, float targetscale, bool usingGL, bool usingMipMap, bool fixRects)\n        {\n            bool cache = false;\n            if (sourcerect.Left % GHConstants.TileWidth == 0 \u0026\u0026 sourcerect.Top % GHConstants.TileHeight == 0\n                \u0026\u0026 sourcerect.Width == GHConstants.TileWidth \u0026\u0026 sourcerect.Height == GHConstants.TileHeight)\n                cache = true;\n\n            if (cache \u0026\u0026 RetrieveCachedRadialTile(canvas, delayedDraw, tileSheet, sourcerect, targetrect, ref layers, destSplitY, opaqueness, paint, mapX, mapY, canvaswidth, canvasheight, targetscale, usingGL, usingMipMap, fixRects))\n                return;\n\n            int copywidth, copyheight;\n            if (!ProcessRadialTile(canvas, delayedDraw, tileSheet, sourcerect, targetrect, ref layers, destSplitY, opaqueness, paint, mapX, mapY, canvaswidth, canvasheight, targetscale, usingGL, usingMipMap, fixRects, out copywidth, out copyheight))\n                return;\n\n            SetRadialTileExtraTransparency(ref layers, paint, opaqueness);\n\n            SKRect tempsourcerect = new SKRect(0, 0, copywidth, copyheight);\n            if (cache)\n                CacheRadialTileAndDraw(canvas, delayedDraw, tileSheet, sourcerect, targetrect, ref layers, destSplitY, opaqueness, paint, mapX, mapY, canvaswidth, canvasheight, targetscale, usingGL, usingMipMap, fixRects, tempsourcerect);\n            else\n                DrawSplitBitmap(canvas, delayedDraw, destSplitY, SKImage.FromBitmap(_tempBitmap), tempsourcerect, targetrect, paint, mapX, mapY, canvaswidth, canvasheight, targetscale, usingGL, usingMipMap, fixRects);\n        }\n\n```\n\nNot sure what it exactly is, since things did not seem to work even when I commented the unsafe block out in the original code, but did work when I commented the cache code out, but that code is much simpler, so hard to understand why it would be any problem for LLVM. All of this points out to some sort of a code generation bug with LLVM (potentially with the cache code somehow).",
                                           "updatedAt":  "2025-04-19T07:40:10Z"
                                       }
                                   ],
                         "totalCount":  4
                     },
        "title":  "[Android 9.0.3] Enabling LLVM leads to incorrect SkiaSharp drawing behavior in some cases",
        "labels":  [
                       "area-Codegen-LLVM-mono"
                   ]
    },
    {
        "url":  "https://github.com/dotnet/runtime/issues/115533",
        "createdAt":  "2025-05-13T21:40:35Z",
        "number":  115533,
        "author":  "janne-hmp",
        "reactions":  {
                          "hasNextPage":  false,
                          "endCursor":  null,
                          "nodes":  [

                                    ],
                          "totalCount":  0
                      },
        "updatedAt":  "2025-08-04T05:18:34Z",
        "body":  "### Description\n\nI’m developing a game called GnollHack using .NET MAUI 9.0.50 / .NET SDK 9.0.202, and it uses NuGet package called `Azure.Storage.Blobs` (see https://github.com/hyvanmielenpelit/GnollHack). The game and the package works just fine on iOS, Windows and also on Android when `EnableLLVM` is set to false or when using x64 ABI. When `EnableLLVM` is turned on on Android ARM64, the game works otherwise very well, except for when it tries to call a function called `GetBlobContainers` from `Azure.Storage.Blobs`, in which case the app freezes. There is no crash, just the main thread seems to freeze. If I use `GetBlobContainersAsync` instead, the function just does not work, but there is no freeze.\n\nWe investigated this in detail, and it turns out that LLVM version of ARM64 ABI library for `System.Net.Sockets.dll.so` causes the issue. If the LLVM version is changed to Mono AOT version while keeping all the other libraries LLVM compiled, the game works just fine.\n\nWe suspect that this is some sort of an LLVM code generation bug on Android ARM64.\n\n### Reproduction Steps\n\n1. Clone the reproduction repository at https://github.com/hyvanmielenpelit/GnollHackMAUIEasyBuild\n2. Open GnollHackM.sln solution file located at win/win32/xpl/GnollHackM in Visual Studio 2022\n3. Select Release configuration\n4. Build the solution according to instructions in the repository\n5. Start the game on your Android device by pressing Start without Debugging green arrow in Visual Studio’s toolbar\n6. Go to the game’s settings screen by pressing Settings button on the main screen\n7. Switch Record Game and Auto-Upload to Cloud on under Replays subtitle\n8. Press Play Game, and start playing\n9. Open game menu from the button in top-right corner, and select Save \u0026 Exit Game (answer ‘yes’ to any questions)\n10. The game freezes upon return to the main screen (the game tries to upload a recorded replay file to Azure)\n11. (If you switch EnableLLVM off, the game does not freeze anymore)\n12. You can also see that Azure.Storage.Blobs malfunctions by going to Vault \u003e Replays, and changing the location in the selection dropdown list from Local to Cloud, which returns a number of directories if working, and stucks at (Loading...) if not\n\n### Expected behavior\n\nAzure.Storage.Blobs works normally on Android ARM64 when using LLVM\n\n### Actual behavior\n\nUsing Azure.Storage.Blobs either freezes the app or generally malfunctions on Android ARM64 when using LLVM\n\n### Regression?\n\nNot sure.\n\n### Known Workarounds\n\nReplace the LLVM generated library for `System.Net.Sockets.dll.so` with the one generated by Mono AOT\n\n### Configuration\n\n.NET 9.0.3, Android 15, ARM64\n\n### Other information\n\nJonathan Peppers suggested that I file the bug report here.",
        "comments":  {
                         "hasNextPage":  false,
                         "endCursor":  "Y3Vyc29yOnYyOpHOq5WNQA==",
                         "nodes":  [
                                       {
                                           "id":  "IC_kwDODI9FZc6rlYxO",
                                           "createdAt":  "2025-05-14T05:17:14Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to \u0027arch-android\u0027: @vitek-karas, @simonrozsival, @steveisok, @akoeplinger\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-14T05:17:14Z"
                                       },
                                       {
                                           "id":  "IC_kwDODI9FZc6rlY1A",
                                           "createdAt":  "2025-05-14T05:17:25Z",
                                           "reactions":  {
                                                             "hasNextPage":  false,
                                                             "endCursor":  null,
                                                             "nodes":  [

                                                                       ],
                                                             "totalCount":  0
                                                         },
                                           "author":  "dotnet-policy-service",
                                           "body":  "Tagging subscribers to this area: @steveisok, @vitek-karas\nSee info in [area-owners.md](https://github.com/dotnet/runtime/blob/main/docs/area-owners.md) if you want to be subscribed.\n\u003c!-- Policy app identification https://img.shields.io/static/v1?label=PullRequestIssueManagement. --\u003e",
                                           "updatedAt":  "2025-05-14T05:17:25Z"
                                       }
                                   ],
                         "totalCount":  2
                     },
        "title":  "[Android, 9.0.3, LLVM] LLVM version of System.Net.Sockets.dll.so on Android ARM64 causes Azure.Storage.Blobs to malfunction",
        "labels":  [
                       "os-android",
                       "area-Codegen-LLVM-mono"
                   ]
    }
]
